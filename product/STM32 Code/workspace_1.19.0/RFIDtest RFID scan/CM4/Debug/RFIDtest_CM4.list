
RFIDtest_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a244  10000000  10000000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000a244  1000a244  0000c244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000558  1000a294  1000a294  0000c294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000a7ec  1000a7ec  0000d1b4  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  1000a7ec  1000a7ec  0000c7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  1000a7f4  1000a7f4  0000d1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000a7f4  1000a7f4  0000c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  1000a7f8  1000a7f8  0000c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000128  10020000  1000a7fc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020128  1000a924  0000d128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          0000039c  100201b4  1000a9b0  0000d1b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020550  1000ad4c  0000d1b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000d1b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c338  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004473  00000000  00000000  0002951c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a0  00000000  00000000  0002d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cfd  00000000  00000000  0002eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004a02f  00000000  00000000  0002f82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ada9  00000000  00000000  0007985c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001cdf61  00000000  00000000  00094605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00262566  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004fa0  00000000  00000000  002625ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  0026754c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201b4 	.word	0x100201b4
1000001c:	00000000 	.word	0x00000000
10000020:	1000a22c 	.word	0x1000a22c

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201b8 	.word	0x100201b8
1000003c:	1000a22c 	.word	0x1000a22c

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000100:	b480      	push	{r7}
10000102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000104:	4b0f      	ldr	r3, [pc, #60]	@ (10000144 <SystemInit+0x44>)
10000106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000010a:	4a0e      	ldr	r2, [pc, #56]	@ (10000144 <SystemInit+0x44>)
1000010c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000114:	4b0c      	ldr	r3, [pc, #48]	@ (10000148 <SystemInit+0x48>)
10000116:	2200      	movs	r2, #0
10000118:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000011a:	4b0b      	ldr	r3, [pc, #44]	@ (10000148 <SystemInit+0x48>)
1000011c:	2200      	movs	r2, #0
1000011e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000120:	4b09      	ldr	r3, [pc, #36]	@ (10000148 <SystemInit+0x48>)
10000122:	2200      	movs	r2, #0
10000124:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000126:	4b08      	ldr	r3, [pc, #32]	@ (10000148 <SystemInit+0x48>)
10000128:	2200      	movs	r2, #0
1000012a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000012c:	4b06      	ldr	r3, [pc, #24]	@ (10000148 <SystemInit+0x48>)
1000012e:	2200      	movs	r2, #0
10000130:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000132:	4b05      	ldr	r3, [pc, #20]	@ (10000148 <SystemInit+0x48>)
10000134:	2200      	movs	r2, #0
10000136:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000138:	bf00      	nop
1000013a:	46bd      	mov	sp, r7
1000013c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000140:	4770      	bx	lr
10000142:	bf00      	nop
10000144:	e000ed00 	.word	0xe000ed00
10000148:	5000d0c0 	.word	0x5000d0c0

1000014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
1000014c:	b580      	push	{r7, lr}
1000014e:	b082      	sub	sp, #8
10000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000152:	f001 f9cf 	bl	100014f4 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000156:	4b80      	ldr	r3, [pc, #512]	@ (10000358 <main+0x20c>)
10000158:	681b      	ldr	r3, [r3, #0]
1000015a:	f003 0307 	and.w	r3, r3, #7
1000015e:	2b04      	cmp	r3, #4
10000160:	d101      	bne.n	10000166 <main+0x1a>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000162:	f000 f925 	bl	100003b0 <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
10000166:	4b7c      	ldr	r3, [pc, #496]	@ (10000358 <main+0x20c>)
10000168:	681b      	ldr	r3, [r3, #0]
1000016a:	f003 0307 	and.w	r3, r3, #7
1000016e:	2b04      	cmp	r3, #4
10000170:	d102      	bne.n	10000178 <main+0x2c>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000172:	f000 fa93 	bl	1000069c <PeriphCommonClock_Config>
10000176:	e005      	b.n	10000184 <main+0x38>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000178:	f000 fabe 	bl	100006f8 <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
1000017c:	2100      	movs	r1, #0
1000017e:	2001      	movs	r0, #1
10000180:	f008 fdc4 	bl	10008d0c <MX_OPENAMP_Init>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000184:	f000 fb33 	bl	100007ee <MX_GPIO_Init>
  MX_DMA_Init();
10000188:	f000 fb20 	bl	100007cc <MX_DMA_Init>
  MX_SPI5_Init();
1000018c:	f000 fac8 	bl	10000720 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  // Initialize MFRC522
  mfrc522.hspi = &hspi5;  // Make sure this matches your SPI instance
10000190:	4b72      	ldr	r3, [pc, #456]	@ (1000035c <main+0x210>)
10000192:	4a73      	ldr	r2, [pc, #460]	@ (10000360 <main+0x214>)
10000194:	601a      	str	r2, [r3, #0]
  mfrc522.CS_GPIO_Port = GPIOD;  // Adjust to your CS pin port
10000196:	4b71      	ldr	r3, [pc, #452]	@ (1000035c <main+0x210>)
10000198:	f04f 2250 	mov.w	r2, #1342197760	@ 0x50005000
1000019c:	605a      	str	r2, [r3, #4]
  mfrc522.CS_Pin = GPIO_PIN_14;   // Adjust to your CS pin number
1000019e:	4b6f      	ldr	r3, [pc, #444]	@ (1000035c <main+0x210>)
100001a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
100001a4:	811a      	strh	r2, [r3, #8]
  mfrc522.RST_GPIO_Port = GPIOD;  // Adjust to your RST pin port
100001a6:	4b6d      	ldr	r3, [pc, #436]	@ (1000035c <main+0x210>)
100001a8:	f04f 2250 	mov.w	r2, #1342197760	@ 0x50005000
100001ac:	60da      	str	r2, [r3, #12]
  mfrc522.RST_Pin = GPIO_PIN_15;  // Adjust to your RST pin number
100001ae:	4b6b      	ldr	r3, [pc, #428]	@ (1000035c <main+0x210>)
100001b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
100001b4:	821a      	strh	r2, [r3, #16]

  MFRC522_Init(&mfrc522);
100001b6:	4869      	ldr	r0, [pc, #420]	@ (1000035c <main+0x210>)
100001b8:	f000 fb90 	bl	100008dc <MFRC522_Init>





  VIRT_UART_Init(&huart0);
100001bc:	4869      	ldr	r0, [pc, #420]	@ (10000364 <main+0x218>)
100001be:	f008 f901 	bl	100083c4 <VIRT_UART_Init>
  if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART_RxCpltCallback) != VIRT_UART_OK) {
100001c2:	4a69      	ldr	r2, [pc, #420]	@ (10000368 <main+0x21c>)
100001c4:	2100      	movs	r1, #0
100001c6:	4867      	ldr	r0, [pc, #412]	@ (10000364 <main+0x218>)
100001c8:	f008 f918 	bl	100083fc <VIRT_UART_RegisterCallback>
100001cc:	4603      	mov	r3, r0
100001ce:	2b00      	cmp	r3, #0
100001d0:	d001      	beq.n	100001d6 <main+0x8a>
    Error_Handler();
100001d2:	f000 fb7b 	bl	100008cc <Error_Handler>

      /* USER CODE BEGIN 3 */

      // Look for new cards
      uint8_t tagType[2];
      MFRC522_Status_t status = MFRC522_Request(PICC_CMD_REQA, tagType);
100001d6:	463b      	mov	r3, r7
100001d8:	4619      	mov	r1, r3
100001da:	2026      	movs	r0, #38	@ 0x26
100001dc:	f000 fd9a 	bl	10000d14 <MFRC522_Request>
100001e0:	4603      	mov	r3, r0
100001e2:	713b      	strb	r3, [r7, #4]

      if (status == MFRC522_OK) {
100001e4:	793b      	ldrb	r3, [r7, #4]
100001e6:	2b00      	cmp	r3, #0
100001e8:	f040 80b1 	bne.w	1000034e <main+0x202>
          qprint("\r\n=== Card Detected ===\r\n");
100001ec:	485f      	ldr	r0, [pc, #380]	@ (1000036c <main+0x220>)
100001ee:	f000 fb45 	bl	1000087c <qprint>

          // Anti-collision detection, get card UID
          status = MFRC522_Anticoll(&uid);
100001f2:	485f      	ldr	r0, [pc, #380]	@ (10000370 <main+0x224>)
100001f4:	f000 fdb3 	bl	10000d5e <MFRC522_Anticoll>
100001f8:	4603      	mov	r3, r0
100001fa:	713b      	strb	r3, [r7, #4]

          if (status == MFRC522_OK) {
100001fc:	793b      	ldrb	r3, [r7, #4]
100001fe:	2b00      	cmp	r3, #0
10000200:	f040 8097 	bne.w	10000332 <main+0x1e6>
              qprint("Card UID: ");
10000204:	485b      	ldr	r0, [pc, #364]	@ (10000374 <main+0x228>)
10000206:	f000 fb39 	bl	1000087c <qprint>
              for (uint8_t i = 0; i < uid.size; i++) {
1000020a:	2300      	movs	r3, #0
1000020c:	71fb      	strb	r3, [r7, #7]
1000020e:	e00a      	b.n	10000226 <main+0xda>
                  qprint("%02X ", uid.uidByte[i]);
10000210:	79fb      	ldrb	r3, [r7, #7]
10000212:	4a57      	ldr	r2, [pc, #348]	@ (10000370 <main+0x224>)
10000214:	4413      	add	r3, r2
10000216:	785b      	ldrb	r3, [r3, #1]
10000218:	4619      	mov	r1, r3
1000021a:	4857      	ldr	r0, [pc, #348]	@ (10000378 <main+0x22c>)
1000021c:	f000 fb2e 	bl	1000087c <qprint>
              for (uint8_t i = 0; i < uid.size; i++) {
10000220:	79fb      	ldrb	r3, [r7, #7]
10000222:	3301      	adds	r3, #1
10000224:	71fb      	strb	r3, [r7, #7]
10000226:	4b52      	ldr	r3, [pc, #328]	@ (10000370 <main+0x224>)
10000228:	781b      	ldrb	r3, [r3, #0]
1000022a:	79fa      	ldrb	r2, [r7, #7]
1000022c:	429a      	cmp	r2, r3
1000022e:	d3ef      	bcc.n	10000210 <main+0xc4>
              }
              qprint("\r\n");
10000230:	4852      	ldr	r0, [pc, #328]	@ (1000037c <main+0x230>)
10000232:	f000 fb23 	bl	1000087c <qprint>

              // Select the card
              status = MFRC522_SelectTag(&uid);
10000236:	484e      	ldr	r0, [pc, #312]	@ (10000370 <main+0x224>)
10000238:	f000 fddd 	bl	10000df6 <MFRC522_SelectTag>
1000023c:	4603      	mov	r3, r0
1000023e:	713b      	strb	r3, [r7, #4]

              if (status == MFRC522_OK) {
10000240:	793b      	ldrb	r3, [r7, #4]
10000242:	2b00      	cmp	r3, #0
10000244:	d175      	bne.n	10000332 <main+0x1e6>
                  PICC_Type_t cardType = MFRC522_GetType(uid.sak);
10000246:	4b4a      	ldr	r3, [pc, #296]	@ (10000370 <main+0x224>)
10000248:	7adb      	ldrb	r3, [r3, #11]
1000024a:	4618      	mov	r0, r3
1000024c:	f000 febe 	bl	10000fcc <MFRC522_GetType>
10000250:	4603      	mov	r3, r0
10000252:	70fb      	strb	r3, [r7, #3]
                  qprint("Card Type: %s\r\n", MFRC522_GetTypeName(cardType));
10000254:	78fb      	ldrb	r3, [r7, #3]
10000256:	4618      	mov	r0, r3
10000258:	f000 ff10 	bl	1000107c <MFRC522_GetTypeName>
1000025c:	4603      	mov	r3, r0
1000025e:	4619      	mov	r1, r3
10000260:	4847      	ldr	r0, [pc, #284]	@ (10000380 <main+0x234>)
10000262:	f000 fb0b 	bl	1000087c <qprint>
                  qprint("SAK: 0x%02X\r\n", uid.sak);
10000266:	4b42      	ldr	r3, [pc, #264]	@ (10000370 <main+0x224>)
10000268:	7adb      	ldrb	r3, [r3, #11]
1000026a:	4619      	mov	r1, r3
1000026c:	4845      	ldr	r0, [pc, #276]	@ (10000384 <main+0x238>)
1000026e:	f000 fb05 	bl	1000087c <qprint>

                  // Example: Read block 4 (first data block of sector 1)
                  uint8_t blockAddr = 4;
10000272:	2304      	movs	r3, #4
10000274:	70bb      	strb	r3, [r7, #2]

                  // Authenticate with Key A
                  status = MFRC522_Auth(PICC_CMD_MF_AUTH_KEY_A, blockAddr, keyA, &uid);
10000276:	78b9      	ldrb	r1, [r7, #2]
10000278:	4b3d      	ldr	r3, [pc, #244]	@ (10000370 <main+0x224>)
1000027a:	4a43      	ldr	r2, [pc, #268]	@ (10000388 <main+0x23c>)
1000027c:	2060      	movs	r0, #96	@ 0x60
1000027e:	f000 fe0a 	bl	10000e96 <MFRC522_Auth>
10000282:	4603      	mov	r3, r0
10000284:	713b      	strb	r3, [r7, #4]

                  if (status == MFRC522_OK) {
10000286:	793b      	ldrb	r3, [r7, #4]
10000288:	2b00      	cmp	r3, #0
1000028a:	d14f      	bne.n	1000032c <main+0x1e0>
                      qprint("Authentication successful!\r\n");
1000028c:	483f      	ldr	r0, [pc, #252]	@ (1000038c <main+0x240>)
1000028e:	f000 faf5 	bl	1000087c <qprint>

                      // Read the block
                      status = MFRC522_Read(blockAddr, readBuffer);
10000292:	78bb      	ldrb	r3, [r7, #2]
10000294:	493e      	ldr	r1, [pc, #248]	@ (10000390 <main+0x244>)
10000296:	4618      	mov	r0, r3
10000298:	f000 fe50 	bl	10000f3c <MFRC522_Read>
1000029c:	4603      	mov	r3, r0
1000029e:	713b      	strb	r3, [r7, #4]

                      if (status == MFRC522_OK) {
100002a0:	793b      	ldrb	r3, [r7, #4]
100002a2:	2b00      	cmp	r3, #0
100002a4:	d13c      	bne.n	10000320 <main+0x1d4>
                          qprint("Block %d data: ", blockAddr);
100002a6:	78bb      	ldrb	r3, [r7, #2]
100002a8:	4619      	mov	r1, r3
100002aa:	483a      	ldr	r0, [pc, #232]	@ (10000394 <main+0x248>)
100002ac:	f000 fae6 	bl	1000087c <qprint>
                          for (uint8_t i = 0; i < 16; i++) {
100002b0:	2300      	movs	r3, #0
100002b2:	71bb      	strb	r3, [r7, #6]
100002b4:	e009      	b.n	100002ca <main+0x17e>
                              qprint("%02X ", readBuffer[i]);
100002b6:	79bb      	ldrb	r3, [r7, #6]
100002b8:	4a35      	ldr	r2, [pc, #212]	@ (10000390 <main+0x244>)
100002ba:	5cd3      	ldrb	r3, [r2, r3]
100002bc:	4619      	mov	r1, r3
100002be:	482e      	ldr	r0, [pc, #184]	@ (10000378 <main+0x22c>)
100002c0:	f000 fadc 	bl	1000087c <qprint>
                          for (uint8_t i = 0; i < 16; i++) {
100002c4:	79bb      	ldrb	r3, [r7, #6]
100002c6:	3301      	adds	r3, #1
100002c8:	71bb      	strb	r3, [r7, #6]
100002ca:	79bb      	ldrb	r3, [r7, #6]
100002cc:	2b0f      	cmp	r3, #15
100002ce:	d9f2      	bls.n	100002b6 <main+0x16a>
                          }
                          qprint("\r\n");
100002d0:	482a      	ldr	r0, [pc, #168]	@ (1000037c <main+0x230>)
100002d2:	f000 fad3 	bl	1000087c <qprint>

                          // Print as ASCII (if printable)
                          qprint("ASCII: ");
100002d6:	4830      	ldr	r0, [pc, #192]	@ (10000398 <main+0x24c>)
100002d8:	f000 fad0 	bl	1000087c <qprint>
                          for (uint8_t i = 0; i < 16; i++) {
100002dc:	2300      	movs	r3, #0
100002de:	717b      	strb	r3, [r7, #5]
100002e0:	e017      	b.n	10000312 <main+0x1c6>
                              if (readBuffer[i] >= 0x20 && readBuffer[i] <= 0x7E) {
100002e2:	797b      	ldrb	r3, [r7, #5]
100002e4:	4a2a      	ldr	r2, [pc, #168]	@ (10000390 <main+0x244>)
100002e6:	5cd3      	ldrb	r3, [r2, r3]
100002e8:	2b1f      	cmp	r3, #31
100002ea:	d90c      	bls.n	10000306 <main+0x1ba>
100002ec:	797b      	ldrb	r3, [r7, #5]
100002ee:	4a28      	ldr	r2, [pc, #160]	@ (10000390 <main+0x244>)
100002f0:	5cd3      	ldrb	r3, [r2, r3]
100002f2:	2b7e      	cmp	r3, #126	@ 0x7e
100002f4:	d807      	bhi.n	10000306 <main+0x1ba>
                                  qprint("%c", readBuffer[i]);
100002f6:	797b      	ldrb	r3, [r7, #5]
100002f8:	4a25      	ldr	r2, [pc, #148]	@ (10000390 <main+0x244>)
100002fa:	5cd3      	ldrb	r3, [r2, r3]
100002fc:	4619      	mov	r1, r3
100002fe:	4827      	ldr	r0, [pc, #156]	@ (1000039c <main+0x250>)
10000300:	f000 fabc 	bl	1000087c <qprint>
10000304:	e002      	b.n	1000030c <main+0x1c0>
                              } else {
                                  qprint(".");
10000306:	4826      	ldr	r0, [pc, #152]	@ (100003a0 <main+0x254>)
10000308:	f000 fab8 	bl	1000087c <qprint>
                          for (uint8_t i = 0; i < 16; i++) {
1000030c:	797b      	ldrb	r3, [r7, #5]
1000030e:	3301      	adds	r3, #1
10000310:	717b      	strb	r3, [r7, #5]
10000312:	797b      	ldrb	r3, [r7, #5]
10000314:	2b0f      	cmp	r3, #15
10000316:	d9e4      	bls.n	100002e2 <main+0x196>
                              }
                          }
                          qprint("\r\n");
10000318:	4818      	ldr	r0, [pc, #96]	@ (1000037c <main+0x230>)
1000031a:	f000 faaf 	bl	1000087c <qprint>
1000031e:	e008      	b.n	10000332 <main+0x1e6>

                      } else {
                          qprint("Failed to read block %d\r\n", blockAddr);
10000320:	78bb      	ldrb	r3, [r7, #2]
10000322:	4619      	mov	r1, r3
10000324:	481f      	ldr	r0, [pc, #124]	@ (100003a4 <main+0x258>)
10000326:	f000 faa9 	bl	1000087c <qprint>
1000032a:	e002      	b.n	10000332 <main+0x1e6>
                      }

                  } else {
                      qprint("Authentication failed!\r\n");
1000032c:	481e      	ldr	r0, [pc, #120]	@ (100003a8 <main+0x25c>)
1000032e:	f000 faa5 	bl	1000087c <qprint>
                  }
              }
          }

          // CRITICAL: Halt the card and stop crypto
          MFRC522_Halt();
10000332:	f000 fe2f 	bl	10000f94 <MFRC522_Halt>

          // Clear the MFCrypto1On bit to stop encryption
          MFRC522_ClearBitMask(MFRC522_REG_STATUS_2, 0x08);
10000336:	2108      	movs	r1, #8
10000338:	2008      	movs	r0, #8
1000033a:	f000 fbb2 	bl	10000aa2 <MFRC522_ClearBitMask>

          qprint("=== End ===\r\n\r\n");
1000033e:	481b      	ldr	r0, [pc, #108]	@ (100003ac <main+0x260>)
10000340:	f000 fa9c 	bl	1000087c <qprint>

          // Wait a bit to prevent multiple rapid reads of the same card
          HAL_Delay(500);
10000344:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
10000348:	f001 f944 	bl	100015d4 <HAL_Delay>
1000034c:	e743      	b.n	100001d6 <main+0x8a>

      } else {
          // No card detected, small delay before next attempt
          HAL_Delay(50);
1000034e:	2032      	movs	r0, #50	@ 0x32
10000350:	f001 f940 	bl	100015d4 <HAL_Delay>
  {
10000354:	e73f      	b.n	100001d6 <main+0x8a>
10000356:	bf00      	nop
10000358:	50020000 	.word	0x50020000
1000035c:	100202e4 	.word	0x100202e4
10000360:	1002020c 	.word	0x1002020c
10000364:	10020294 	.word	0x10020294
10000368:	10000869 	.word	0x10000869
1000036c:	1000a294 	.word	0x1000a294
10000370:	100202f8 	.word	0x100202f8
10000374:	1000a2b0 	.word	0x1000a2b0
10000378:	1000a2bc 	.word	0x1000a2bc
1000037c:	1000a2c4 	.word	0x1000a2c4
10000380:	1000a2c8 	.word	0x1000a2c8
10000384:	1000a2d8 	.word	0x1000a2d8
10000388:	10020004 	.word	0x10020004
1000038c:	1000a2e8 	.word	0x1000a2e8
10000390:	10020304 	.word	0x10020304
10000394:	1000a308 	.word	0x1000a308
10000398:	1000a318 	.word	0x1000a318
1000039c:	1000a320 	.word	0x1000a320
100003a0:	1000a324 	.word	0x1000a324
100003a4:	1000a328 	.word	0x1000a328
100003a8:	1000a344 	.word	0x1000a344
100003ac:	1000a360 	.word	0x1000a360

100003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100003b0:	b580      	push	{r7, lr}
100003b2:	b0d2      	sub	sp, #328	@ 0x148
100003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100003b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003be:	4618      	mov	r0, r3
100003c0:	f44f 738a 	mov.w	r3, #276	@ 0x114
100003c4:	461a      	mov	r2, r3
100003c6:	2100      	movs	r1, #0
100003c8:	f008 ffa2 	bl	10009310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100003cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100003d4:	4618      	mov	r0, r3
100003d6:	2330      	movs	r3, #48	@ 0x30
100003d8:	461a      	mov	r2, r3
100003da:	2100      	movs	r1, #0
100003dc:	f008 ff98 	bl	10009310 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
100003e0:	f001 fe08 	bl	10001ff4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
100003e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100003e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100003ec:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
100003f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100003f4:	f043 0320 	orr.w	r3, r3, #32
100003f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
100003fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000400:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000404:	2217      	movs	r2, #23
10000406:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000408:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000040c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000410:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
10000414:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000416:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000041a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000041e:	2201      	movs	r2, #1
10000420:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000422:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000426:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000042a:	2201      	movs	r2, #1
1000042c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
1000042e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000432:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000436:	2200      	movs	r2, #0
10000438:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
1000043a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000043e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000442:	2210      	movs	r2, #16
10000444:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000446:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000044a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000044e:	2200      	movs	r2, #0
10000450:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000452:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000456:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000045a:	2202      	movs	r2, #2
1000045c:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
1000045e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000462:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000466:	2201      	movs	r2, #1
10000468:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
1000046a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000046e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000472:	2203      	movs	r2, #3
10000474:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000476:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000047a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000047e:	2242      	movs	r2, #66	@ 0x42
10000480:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
10000482:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000486:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000048a:	2202      	movs	r2, #2
1000048c:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
1000048e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000492:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000496:	2201      	movs	r2, #1
10000498:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
1000049a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000049e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004a2:	2201      	movs	r2, #1
100004a4:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
100004a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004ae:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
100004b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
100004b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004be:	2201      	movs	r2, #1
100004c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
100004c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004cc:	2202      	movs	r2, #2
100004ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
100004d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004da:	2201      	movs	r2, #1
100004dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
100004e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004e8:	2202      	movs	r2, #2
100004ea:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
100004ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004f6:	2222      	movs	r2, #34	@ 0x22
100004f8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
100004fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000500:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000504:	2202      	movs	r2, #2
10000506:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
1000050a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000050e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000512:	2211      	movs	r2, #17
10000514:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000518:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000051c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000520:	2225      	movs	r2, #37	@ 0x25
10000522:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000526:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000052a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000052e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
10000532:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
10000536:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000053a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000053e:	f641 2204 	movw	r2, #6660	@ 0x1a04
10000542:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000546:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000054a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000054e:	2201      	movs	r2, #1
10000550:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000554:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000558:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000055c:	2202      	movs	r2, #2
1000055e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
10000562:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000566:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000056a:	2201      	movs	r2, #1
1000056c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000570:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000574:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000578:	2204      	movs	r2, #4
1000057a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
1000057e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000582:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000586:	2263      	movs	r2, #99	@ 0x63
10000588:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
1000058c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000590:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000594:	2206      	movs	r2, #6
10000596:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
1000059a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000059e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100005a2:	2208      	movs	r2, #8
100005a4:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
100005a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100005ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100005b0:	2208      	movs	r2, #8
100005b2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
100005b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100005ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100005be:	2200      	movs	r2, #0
100005c0:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
100005c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100005c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100005cc:	2200      	movs	r2, #0
100005ce:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
100005d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100005d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100005da:	2200      	movs	r2, #0
100005dc:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100005e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
100005e4:	4618      	mov	r0, r3
100005e6:	f001 fd15 	bl	10002014 <HAL_RCC_OscConfig>
100005ea:	4603      	mov	r3, r0
100005ec:	2b00      	cmp	r3, #0
100005ee:	d001      	beq.n	100005f4 <SystemClock_Config+0x244>
  {
    Error_Handler();
100005f0:	f000 f96c 	bl	100008cc <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100005f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100005f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100005fc:	22fe      	movs	r2, #254	@ 0xfe
100005fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000600:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000604:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000608:	2202      	movs	r2, #2
1000060a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
1000060c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000610:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000614:	2200      	movs	r2, #0
10000616:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000618:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000061c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000620:	2203      	movs	r2, #3
10000622:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000624:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000628:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000062c:	2200      	movs	r2, #0
1000062e:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000630:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000634:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000638:	2201      	movs	r2, #1
1000063a:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
1000063c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000640:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000644:	2202      	movs	r2, #2
10000646:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000648:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000064c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000650:	2201      	movs	r2, #1
10000652:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000654:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000658:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000065c:	2201      	movs	r2, #1
1000065e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000660:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000664:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000668:	2201      	movs	r2, #1
1000066a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
1000066c:	1d3b      	adds	r3, r7, #4
1000066e:	4618      	mov	r0, r3
10000670:	f002 fa6e 	bl	10002b50 <HAL_RCC_ClockConfig>
10000674:	4603      	mov	r3, r0
10000676:	2b00      	cmp	r3, #0
10000678:	d001      	beq.n	1000067e <SystemClock_Config+0x2ce>
  {
    Error_Handler();
1000067a:	f000 f927 	bl	100008cc <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
1000067e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10000684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
10000688:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000068c:	f043 0317 	orr.w	r3, r3, #23
10000690:	6453      	str	r3, [r2, #68]	@ 0x44
}
10000692:	bf00      	nop
10000694:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
10000698:	46bd      	mov	sp, r7
1000069a:	bd80      	pop	{r7, pc}

1000069c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
1000069c:	b580      	push	{r7, lr}
1000069e:	b0d6      	sub	sp, #344	@ 0x158
100006a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100006a2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100006a6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
100006aa:	4618      	mov	r0, r3
100006ac:	f44f 73ac 	mov.w	r3, #344	@ 0x158
100006b0:	461a      	mov	r2, r3
100006b2:	2100      	movs	r1, #0
100006b4:	f008 fe2c 	bl	10009310 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
100006b8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100006bc:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
100006c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
100006c4:	f04f 0300 	mov.w	r3, #0
100006c8:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
100006cc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100006d0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
100006d4:	2202      	movs	r2, #2
100006d6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100006da:	463b      	mov	r3, r7
100006dc:	4618      	mov	r0, r3
100006de:	f003 fab5 	bl	10003c4c <HAL_RCCEx_PeriphCLKConfig>
100006e2:	4603      	mov	r3, r0
100006e4:	2b00      	cmp	r3, #0
100006e6:	d001      	beq.n	100006ec <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
100006e8:	f000 f8f0 	bl	100008cc <Error_Handler>
  }
}
100006ec:	bf00      	nop
100006ee:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
100006f2:	46bd      	mov	sp, r7
100006f4:	bd80      	pop	{r7, pc}
	...

100006f8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
100006f8:	b580      	push	{r7, lr}
100006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_Init 0 */
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */
  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
100006fc:	4b06      	ldr	r3, [pc, #24]	@ (10000718 <MX_IPCC_Init+0x20>)
100006fe:	4a07      	ldr	r2, [pc, #28]	@ (1000071c <MX_IPCC_Init+0x24>)
10000700:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
10000702:	4805      	ldr	r0, [pc, #20]	@ (10000718 <MX_IPCC_Init+0x20>)
10000704:	f001 fa60 	bl	10001bc8 <HAL_IPCC_Init>
10000708:	4603      	mov	r3, r0
1000070a:	2b00      	cmp	r3, #0
1000070c:	d001      	beq.n	10000712 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
1000070e:	f000 f8dd 	bl	100008cc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */
  /* USER CODE END IPCC_Init 2 */

}
10000712:	bf00      	nop
10000714:	bd80      	pop	{r7, pc}
10000716:	bf00      	nop
10000718:	100201d0 	.word	0x100201d0
1000071c:	4c001000 	.word	0x4c001000

10000720 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
10000720:	b580      	push	{r7, lr}
10000722:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */
  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
10000724:	4b27      	ldr	r3, [pc, #156]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000726:	4a28      	ldr	r2, [pc, #160]	@ (100007c8 <MX_SPI5_Init+0xa8>)
10000728:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
1000072a:	4b26      	ldr	r3, [pc, #152]	@ (100007c4 <MX_SPI5_Init+0xa4>)
1000072c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
10000730:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
10000732:	4b24      	ldr	r3, [pc, #144]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000734:	2200      	movs	r2, #0
10000736:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
10000738:	4b22      	ldr	r3, [pc, #136]	@ (100007c4 <MX_SPI5_Init+0xa4>)
1000073a:	2207      	movs	r2, #7
1000073c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
1000073e:	4b21      	ldr	r3, [pc, #132]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000740:	2200      	movs	r2, #0
10000742:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
10000744:	4b1f      	ldr	r3, [pc, #124]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000746:	2200      	movs	r2, #0
10000748:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
1000074a:	4b1e      	ldr	r3, [pc, #120]	@ (100007c4 <MX_SPI5_Init+0xa4>)
1000074c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
10000750:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
10000752:	4b1c      	ldr	r3, [pc, #112]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000754:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
10000758:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
1000075a:	4b1a      	ldr	r3, [pc, #104]	@ (100007c4 <MX_SPI5_Init+0xa4>)
1000075c:	2200      	movs	r2, #0
1000075e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
10000760:	4b18      	ldr	r3, [pc, #96]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000762:	2200      	movs	r2, #0
10000764:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10000766:	4b17      	ldr	r3, [pc, #92]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000768:	2200      	movs	r2, #0
1000076a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
1000076c:	4b15      	ldr	r3, [pc, #84]	@ (100007c4 <MX_SPI5_Init+0xa4>)
1000076e:	2200      	movs	r2, #0
10000770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
10000772:	4b14      	ldr	r3, [pc, #80]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000774:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
10000778:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
1000077a:	4b12      	ldr	r3, [pc, #72]	@ (100007c4 <MX_SPI5_Init+0xa4>)
1000077c:	2200      	movs	r2, #0
1000077e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
10000780:	4b10      	ldr	r3, [pc, #64]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000782:	2200      	movs	r2, #0
10000784:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
10000786:	4b0f      	ldr	r3, [pc, #60]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000788:	2200      	movs	r2, #0
1000078a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
1000078c:	4b0d      	ldr	r3, [pc, #52]	@ (100007c4 <MX_SPI5_Init+0xa4>)
1000078e:	2200      	movs	r2, #0
10000790:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
10000792:	4b0c      	ldr	r3, [pc, #48]	@ (100007c4 <MX_SPI5_Init+0xa4>)
10000794:	2200      	movs	r2, #0
10000796:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
10000798:	4b0a      	ldr	r3, [pc, #40]	@ (100007c4 <MX_SPI5_Init+0xa4>)
1000079a:	2200      	movs	r2, #0
1000079c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
1000079e:	4b09      	ldr	r3, [pc, #36]	@ (100007c4 <MX_SPI5_Init+0xa4>)
100007a0:	2200      	movs	r2, #0
100007a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
100007a4:	4b07      	ldr	r3, [pc, #28]	@ (100007c4 <MX_SPI5_Init+0xa4>)
100007a6:	2200      	movs	r2, #0
100007a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
100007aa:	4b06      	ldr	r3, [pc, #24]	@ (100007c4 <MX_SPI5_Init+0xa4>)
100007ac:	2200      	movs	r2, #0
100007ae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
100007b0:	4804      	ldr	r0, [pc, #16]	@ (100007c4 <MX_SPI5_Init+0xa4>)
100007b2:	f005 f8df 	bl	10005974 <HAL_SPI_Init>
100007b6:	4603      	mov	r3, r0
100007b8:	2b00      	cmp	r3, #0
100007ba:	d001      	beq.n	100007c0 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
100007bc:	f000 f886 	bl	100008cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */
  /* USER CODE END SPI5_Init 2 */

}
100007c0:	bf00      	nop
100007c2:	bd80      	pop	{r7, pc}
100007c4:	1002020c 	.word	0x1002020c
100007c8:	44009000 	.word	0x44009000

100007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
100007cc:	b480      	push	{r7}
100007ce:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX_CLK_ENABLE();
100007d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100007d4:	2204      	movs	r2, #4
100007d6:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98
  __HAL_RCC_DMA1_CLK_ENABLE();
100007da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100007de:	2201      	movs	r2, #1
100007e0:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98

}
100007e4:	bf00      	nop
100007e6:	46bd      	mov	sp, r7
100007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100007ec:	4770      	bx	lr

100007ee <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100007ee:	b580      	push	{r7, lr}
100007f0:	b086      	sub	sp, #24
100007f2:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100007f4:	1d3b      	adds	r3, r7, #4
100007f6:	2200      	movs	r2, #0
100007f8:	601a      	str	r2, [r3, #0]
100007fa:	605a      	str	r2, [r3, #4]
100007fc:	609a      	str	r2, [r3, #8]
100007fe:	60da      	str	r2, [r3, #12]
10000800:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
10000802:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000806:	2208      	movs	r2, #8
10000808:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOC_CLK_ENABLE();
1000080c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000810:	2204      	movs	r2, #4
10000812:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
10000816:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000081a:	2280      	movs	r2, #128	@ 0x80
1000081c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
10000820:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000824:	2220      	movs	r2, #32
10000826:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
1000082a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000082e:	2201      	movs	r2, #1
10000830:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
10000834:	2201      	movs	r2, #1
10000836:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
1000083a:	f04f 2050 	mov.w	r0, #1342197760	@ 0x50005000
1000083e:	f001 f9a9 	bl	10001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RFID_RST_Pin RFID_CS_Pin */
  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
10000842:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
10000846:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10000848:	2301      	movs	r3, #1
1000084a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
1000084c:	2300      	movs	r3, #0
1000084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10000850:	2300      	movs	r3, #0
10000852:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
10000854:	1d3b      	adds	r3, r7, #4
10000856:	4619      	mov	r1, r3
10000858:	f04f 2050 	mov.w	r0, #1342197760	@ 0x50005000
1000085c:	f000 fff0 	bl	10001840 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
10000860:	bf00      	nop
10000862:	3718      	adds	r7, #24
10000864:	46bd      	mov	sp, r7
10000866:	bd80      	pop	{r7, pc}

10000868 <VIRT_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void VIRT_UART_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
10000868:	b480      	push	{r7}
1000086a:	b083      	sub	sp, #12
1000086c:	af00      	add	r7, sp, #0
1000086e:	6078      	str	r0, [r7, #4]
    // Handle received data from Linux
    // This callback is needed to complete the handshake
}
10000870:	bf00      	nop
10000872:	370c      	adds	r7, #12
10000874:	46bd      	mov	sp, r7
10000876:	f85d 7b04 	ldr.w	r7, [sp], #4
1000087a:	4770      	bx	lr

1000087c <qprint>:

void qprint(const char* format, ...) {
1000087c:	b40f      	push	{r0, r1, r2, r3}
1000087e:	b580      	push	{r7, lr}
10000880:	b0a2      	sub	sp, #136	@ 0x88
10000882:	af00      	add	r7, sp, #0
	OPENAMP_check_for_message();
10000884:	f008 faf4 	bl	10008e70 <OPENAMP_check_for_message>
    char buffer[128];
    va_list args;
    va_start(args, format);
10000888:	f107 0394 	add.w	r3, r7, #148	@ 0x94
1000088c:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
1000088e:	1d38      	adds	r0, r7, #4
10000890:	683b      	ldr	r3, [r7, #0]
10000892:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
10000896:	2180      	movs	r1, #128	@ 0x80
10000898:	f008 fd2c 	bl	100092f4 <vsniprintf>
1000089c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (len > 0) {
100008a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
100008a4:	2b00      	cmp	r3, #0
100008a6:	dd07      	ble.n	100008b8 <qprint+0x3c>
        VIRT_UART_Transmit(&huart0, (uint8_t*)buffer, len);
100008a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
100008ac:	b29a      	uxth	r2, r3
100008ae:	1d3b      	adds	r3, r7, #4
100008b0:	4619      	mov	r1, r3
100008b2:	4805      	ldr	r0, [pc, #20]	@ (100008c8 <qprint+0x4c>)
100008b4:	f007 fdbc 	bl	10008430 <VIRT_UART_Transmit>
    }
}
100008b8:	bf00      	nop
100008ba:	3788      	adds	r7, #136	@ 0x88
100008bc:	46bd      	mov	sp, r7
100008be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
100008c2:	b004      	add	sp, #16
100008c4:	4770      	bx	lr
100008c6:	bf00      	nop
100008c8:	10020294 	.word	0x10020294

100008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100008cc:	b480      	push	{r7}
100008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
100008d0:	bf00      	nop
100008d2:	46bd      	mov	sp, r7
100008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100008d8:	4770      	bx	lr
	...

100008dc <MFRC522_Init>:
#define MFRC522_CS_HIGH()  HAL_GPIO_WritePin(mfrc522_config.CS_GPIO_Port, mfrc522_config.CS_Pin, GPIO_PIN_SET)
#define MFRC522_RST_LOW()  HAL_GPIO_WritePin(mfrc522_config.RST_GPIO_Port, mfrc522_config.RST_Pin, GPIO_PIN_RESET)
#define MFRC522_RST_HIGH() HAL_GPIO_WritePin(mfrc522_config.RST_GPIO_Port, mfrc522_config.RST_Pin, GPIO_PIN_SET)

/* Initialize MFRC522 */
void MFRC522_Init(MFRC522_Config_t *config) {
100008dc:	b580      	push	{r7, lr}
100008de:	b082      	sub	sp, #8
100008e0:	af00      	add	r7, sp, #0
100008e2:	6078      	str	r0, [r7, #4]
    memcpy(&mfrc522_config, config, sizeof(MFRC522_Config_t));
100008e4:	2214      	movs	r2, #20
100008e6:	6879      	ldr	r1, [r7, #4]
100008e8:	481a      	ldr	r0, [pc, #104]	@ (10000954 <MFRC522_Init+0x78>)
100008ea:	f008 fdc2 	bl	10009472 <memcpy>

    MFRC522_CS_HIGH();
100008ee:	4b19      	ldr	r3, [pc, #100]	@ (10000954 <MFRC522_Init+0x78>)
100008f0:	685b      	ldr	r3, [r3, #4]
100008f2:	4a18      	ldr	r2, [pc, #96]	@ (10000954 <MFRC522_Init+0x78>)
100008f4:	8911      	ldrh	r1, [r2, #8]
100008f6:	2201      	movs	r2, #1
100008f8:	4618      	mov	r0, r3
100008fa:	f001 f94b 	bl	10001b94 <HAL_GPIO_WritePin>
    MFRC522_RST_HIGH();
100008fe:	4b15      	ldr	r3, [pc, #84]	@ (10000954 <MFRC522_Init+0x78>)
10000900:	68db      	ldr	r3, [r3, #12]
10000902:	4a14      	ldr	r2, [pc, #80]	@ (10000954 <MFRC522_Init+0x78>)
10000904:	8a11      	ldrh	r1, [r2, #16]
10000906:	2201      	movs	r2, #1
10000908:	4618      	mov	r0, r3
1000090a:	f001 f943 	bl	10001b94 <HAL_GPIO_WritePin>
    HAL_Delay(10);
1000090e:	200a      	movs	r0, #10
10000910:	f000 fe60 	bl	100015d4 <HAL_Delay>

    MFRC522_Reset();
10000914:	f000 f820 	bl	10000958 <MFRC522_Reset>

    // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
    MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
10000918:	218d      	movs	r1, #141	@ 0x8d
1000091a:	202a      	movs	r0, #42	@ 0x2a
1000091c:	f000 f83c 	bl	10000998 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
10000920:	213e      	movs	r1, #62	@ 0x3e
10000922:	202b      	movs	r0, #43	@ 0x2b
10000924:	f000 f838 	bl	10000998 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
10000928:	211e      	movs	r1, #30
1000092a:	202d      	movs	r0, #45	@ 0x2d
1000092c:	f000 f834 	bl	10000998 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
10000930:	2100      	movs	r1, #0
10000932:	202c      	movs	r0, #44	@ 0x2c
10000934:	f000 f830 	bl	10000998 <MFRC522_WriteRegister>

    MFRC522_WriteRegister(MFRC522_REG_TX_ASK, 0x40);
10000938:	2140      	movs	r1, #64	@ 0x40
1000093a:	2015      	movs	r0, #21
1000093c:	f000 f82c 	bl	10000998 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
10000940:	213d      	movs	r1, #61	@ 0x3d
10000942:	2011      	movs	r0, #17
10000944:	f000 f828 	bl	10000998 <MFRC522_WriteRegister>

    MFRC522_AntennaOn();
10000948:	f000 f811 	bl	1000096e <MFRC522_AntennaOn>
}
1000094c:	bf00      	nop
1000094e:	3708      	adds	r7, #8
10000950:	46bd      	mov	sp, r7
10000952:	bd80      	pop	{r7, pc}
10000954:	10020318 	.word	0x10020318

10000958 <MFRC522_Reset>:

/* Reset the MFRC522 */
void MFRC522_Reset(void) {
10000958:	b580      	push	{r7, lr}
1000095a:	af00      	add	r7, sp, #0
    MFRC522_WriteRegister(MFRC522_REG_COMMAND, MFRC522_CMD_SOFT_RESET);
1000095c:	210f      	movs	r1, #15
1000095e:	2001      	movs	r0, #1
10000960:	f000 f81a 	bl	10000998 <MFRC522_WriteRegister>
    HAL_Delay(50);
10000964:	2032      	movs	r0, #50	@ 0x32
10000966:	f000 fe35 	bl	100015d4 <HAL_Delay>
}
1000096a:	bf00      	nop
1000096c:	bd80      	pop	{r7, pc}

1000096e <MFRC522_AntennaOn>:
    *version = MFRC522_ReadRegister(MFRC522_REG_VERSION);
    return (*version == 0x91 || *version == 0x92);
}

/* Turn on antenna */
void MFRC522_AntennaOn(void) {
1000096e:	b580      	push	{r7, lr}
10000970:	b082      	sub	sp, #8
10000972:	af00      	add	r7, sp, #0
    uint8_t temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
10000974:	2014      	movs	r0, #20
10000976:	f000 f83f 	bl	100009f8 <MFRC522_ReadRegister>
1000097a:	4603      	mov	r3, r0
1000097c:	71fb      	strb	r3, [r7, #7]
    if (!(temp & 0x03)) {
1000097e:	79fb      	ldrb	r3, [r7, #7]
10000980:	f003 0303 	and.w	r3, r3, #3
10000984:	2b00      	cmp	r3, #0
10000986:	d103      	bne.n	10000990 <MFRC522_AntennaOn+0x22>
        MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
10000988:	2103      	movs	r1, #3
1000098a:	2014      	movs	r0, #20
1000098c:	f000 f86e 	bl	10000a6c <MFRC522_SetBitMask>
    }
}
10000990:	bf00      	nop
10000992:	3708      	adds	r7, #8
10000994:	46bd      	mov	sp, r7
10000996:	bd80      	pop	{r7, pc}

10000998 <MFRC522_WriteRegister>:
void MFRC522_AntennaOff(void) {
    MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

/* Write to MFRC522 register */
void MFRC522_WriteRegister(uint8_t reg, uint8_t value) {
10000998:	b580      	push	{r7, lr}
1000099a:	b084      	sub	sp, #16
1000099c:	af00      	add	r7, sp, #0
1000099e:	4603      	mov	r3, r0
100009a0:	460a      	mov	r2, r1
100009a2:	71fb      	strb	r3, [r7, #7]
100009a4:	4613      	mov	r3, r2
100009a6:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2];
    txData[0] = (reg << 1) & 0x7E;
100009a8:	79fb      	ldrb	r3, [r7, #7]
100009aa:	005b      	lsls	r3, r3, #1
100009ac:	b2db      	uxtb	r3, r3
100009ae:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
100009b2:	b2db      	uxtb	r3, r3
100009b4:	733b      	strb	r3, [r7, #12]
    txData[1] = value;
100009b6:	79bb      	ldrb	r3, [r7, #6]
100009b8:	737b      	strb	r3, [r7, #13]

    MFRC522_CS_LOW();
100009ba:	4b0e      	ldr	r3, [pc, #56]	@ (100009f4 <MFRC522_WriteRegister+0x5c>)
100009bc:	685b      	ldr	r3, [r3, #4]
100009be:	4a0d      	ldr	r2, [pc, #52]	@ (100009f4 <MFRC522_WriteRegister+0x5c>)
100009c0:	8911      	ldrh	r1, [r2, #8]
100009c2:	2200      	movs	r2, #0
100009c4:	4618      	mov	r0, r3
100009c6:	f001 f8e5 	bl	10001b94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(mfrc522_config.hspi, txData, 2, 100);
100009ca:	4b0a      	ldr	r3, [pc, #40]	@ (100009f4 <MFRC522_WriteRegister+0x5c>)
100009cc:	6818      	ldr	r0, [r3, #0]
100009ce:	f107 010c 	add.w	r1, r7, #12
100009d2:	2364      	movs	r3, #100	@ 0x64
100009d4:	2202      	movs	r2, #2
100009d6:	f005 f8f1 	bl	10005bbc <HAL_SPI_Transmit>
    MFRC522_CS_HIGH();
100009da:	4b06      	ldr	r3, [pc, #24]	@ (100009f4 <MFRC522_WriteRegister+0x5c>)
100009dc:	685b      	ldr	r3, [r3, #4]
100009de:	4a05      	ldr	r2, [pc, #20]	@ (100009f4 <MFRC522_WriteRegister+0x5c>)
100009e0:	8911      	ldrh	r1, [r2, #8]
100009e2:	2201      	movs	r2, #1
100009e4:	4618      	mov	r0, r3
100009e6:	f001 f8d5 	bl	10001b94 <HAL_GPIO_WritePin>
}
100009ea:	bf00      	nop
100009ec:	3710      	adds	r7, #16
100009ee:	46bd      	mov	sp, r7
100009f0:	bd80      	pop	{r7, pc}
100009f2:	bf00      	nop
100009f4:	10020318 	.word	0x10020318

100009f8 <MFRC522_ReadRegister>:

/* Read from MFRC522 register */
uint8_t MFRC522_ReadRegister(uint8_t reg) {
100009f8:	b580      	push	{r7, lr}
100009fa:	b084      	sub	sp, #16
100009fc:	af00      	add	r7, sp, #0
100009fe:	4603      	mov	r3, r0
10000a00:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = ((reg << 1) & 0x7E) | 0x80;
10000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
10000a06:	005b      	lsls	r3, r3, #1
10000a08:	b25b      	sxtb	r3, r3
10000a0a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
10000a0e:	b25b      	sxtb	r3, r3
10000a10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
10000a14:	b25b      	sxtb	r3, r3
10000a16:	b2db      	uxtb	r3, r3
10000a18:	73fb      	strb	r3, [r7, #15]
    uint8_t rxData = 0;
10000a1a:	2300      	movs	r3, #0
10000a1c:	73bb      	strb	r3, [r7, #14]

    MFRC522_CS_LOW();
10000a1e:	4b12      	ldr	r3, [pc, #72]	@ (10000a68 <MFRC522_ReadRegister+0x70>)
10000a20:	685b      	ldr	r3, [r3, #4]
10000a22:	4a11      	ldr	r2, [pc, #68]	@ (10000a68 <MFRC522_ReadRegister+0x70>)
10000a24:	8911      	ldrh	r1, [r2, #8]
10000a26:	2200      	movs	r2, #0
10000a28:	4618      	mov	r0, r3
10000a2a:	f001 f8b3 	bl	10001b94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(mfrc522_config.hspi, &txData, 1, 100);
10000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (10000a68 <MFRC522_ReadRegister+0x70>)
10000a30:	6818      	ldr	r0, [r3, #0]
10000a32:	f107 010f 	add.w	r1, r7, #15
10000a36:	2364      	movs	r3, #100	@ 0x64
10000a38:	2201      	movs	r2, #1
10000a3a:	f005 f8bf 	bl	10005bbc <HAL_SPI_Transmit>
    HAL_SPI_Receive(mfrc522_config.hspi, &rxData, 1, 100);
10000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (10000a68 <MFRC522_ReadRegister+0x70>)
10000a40:	6818      	ldr	r0, [r3, #0]
10000a42:	f107 010e 	add.w	r1, r7, #14
10000a46:	2364      	movs	r3, #100	@ 0x64
10000a48:	2201      	movs	r2, #1
10000a4a:	f005 fab0 	bl	10005fae <HAL_SPI_Receive>
    MFRC522_CS_HIGH();
10000a4e:	4b06      	ldr	r3, [pc, #24]	@ (10000a68 <MFRC522_ReadRegister+0x70>)
10000a50:	685b      	ldr	r3, [r3, #4]
10000a52:	4a05      	ldr	r2, [pc, #20]	@ (10000a68 <MFRC522_ReadRegister+0x70>)
10000a54:	8911      	ldrh	r1, [r2, #8]
10000a56:	2201      	movs	r2, #1
10000a58:	4618      	mov	r0, r3
10000a5a:	f001 f89b 	bl	10001b94 <HAL_GPIO_WritePin>

    return rxData;
10000a5e:	7bbb      	ldrb	r3, [r7, #14]
}
10000a60:	4618      	mov	r0, r3
10000a62:	3710      	adds	r7, #16
10000a64:	46bd      	mov	sp, r7
10000a66:	bd80      	pop	{r7, pc}
10000a68:	10020318 	.word	0x10020318

10000a6c <MFRC522_SetBitMask>:

/* Set bit mask in register */
void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
10000a6c:	b580      	push	{r7, lr}
10000a6e:	b084      	sub	sp, #16
10000a70:	af00      	add	r7, sp, #0
10000a72:	4603      	mov	r3, r0
10000a74:	460a      	mov	r2, r1
10000a76:	71fb      	strb	r3, [r7, #7]
10000a78:	4613      	mov	r3, r2
10000a7a:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadRegister(reg);
10000a7c:	79fb      	ldrb	r3, [r7, #7]
10000a7e:	4618      	mov	r0, r3
10000a80:	f7ff ffba 	bl	100009f8 <MFRC522_ReadRegister>
10000a84:	4603      	mov	r3, r0
10000a86:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteRegister(reg, tmp | mask);
10000a88:	7bfa      	ldrb	r2, [r7, #15]
10000a8a:	79bb      	ldrb	r3, [r7, #6]
10000a8c:	4313      	orrs	r3, r2
10000a8e:	b2da      	uxtb	r2, r3
10000a90:	79fb      	ldrb	r3, [r7, #7]
10000a92:	4611      	mov	r1, r2
10000a94:	4618      	mov	r0, r3
10000a96:	f7ff ff7f 	bl	10000998 <MFRC522_WriteRegister>
}
10000a9a:	bf00      	nop
10000a9c:	3710      	adds	r7, #16
10000a9e:	46bd      	mov	sp, r7
10000aa0:	bd80      	pop	{r7, pc}

10000aa2 <MFRC522_ClearBitMask>:

/* Clear bit mask in register */
void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask) {
10000aa2:	b580      	push	{r7, lr}
10000aa4:	b084      	sub	sp, #16
10000aa6:	af00      	add	r7, sp, #0
10000aa8:	4603      	mov	r3, r0
10000aaa:	460a      	mov	r2, r1
10000aac:	71fb      	strb	r3, [r7, #7]
10000aae:	4613      	mov	r3, r2
10000ab0:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadRegister(reg);
10000ab2:	79fb      	ldrb	r3, [r7, #7]
10000ab4:	4618      	mov	r0, r3
10000ab6:	f7ff ff9f 	bl	100009f8 <MFRC522_ReadRegister>
10000aba:	4603      	mov	r3, r0
10000abc:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteRegister(reg, tmp & (~mask));
10000abe:	f997 3006 	ldrsb.w	r3, [r7, #6]
10000ac2:	43db      	mvns	r3, r3
10000ac4:	b25a      	sxtb	r2, r3
10000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
10000aca:	4013      	ands	r3, r2
10000acc:	b25b      	sxtb	r3, r3
10000ace:	b2da      	uxtb	r2, r3
10000ad0:	79fb      	ldrb	r3, [r7, #7]
10000ad2:	4611      	mov	r1, r2
10000ad4:	4618      	mov	r0, r3
10000ad6:	f7ff ff5f 	bl	10000998 <MFRC522_WriteRegister>
}
10000ada:	bf00      	nop
10000adc:	3710      	adds	r7, #16
10000ade:	46bd      	mov	sp, r7
10000ae0:	bd80      	pop	{r7, pc}

10000ae2 <MFRC522_CalculateCRC>:

/* Calculate CRC */
void MFRC522_CalculateCRC(uint8_t *data, uint8_t len, uint8_t *result) {
10000ae2:	b590      	push	{r4, r7, lr}
10000ae4:	b087      	sub	sp, #28
10000ae6:	af00      	add	r7, sp, #0
10000ae8:	60f8      	str	r0, [r7, #12]
10000aea:	460b      	mov	r3, r1
10000aec:	607a      	str	r2, [r7, #4]
10000aee:	72fb      	strb	r3, [r7, #11]
    MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);
10000af0:	2104      	movs	r1, #4
10000af2:	2005      	movs	r0, #5
10000af4:	f7ff ffd5 	bl	10000aa2 <MFRC522_ClearBitMask>
    MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
10000af8:	2180      	movs	r1, #128	@ 0x80
10000afa:	200a      	movs	r0, #10
10000afc:	f7ff ffb6 	bl	10000a6c <MFRC522_SetBitMask>

    for (uint8_t i = 0; i < len; i++) {
10000b00:	2300      	movs	r3, #0
10000b02:	75fb      	strb	r3, [r7, #23]
10000b04:	e00a      	b.n	10000b1c <MFRC522_CalculateCRC+0x3a>
        MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, data[i]);
10000b06:	7dfb      	ldrb	r3, [r7, #23]
10000b08:	68fa      	ldr	r2, [r7, #12]
10000b0a:	4413      	add	r3, r2
10000b0c:	781b      	ldrb	r3, [r3, #0]
10000b0e:	4619      	mov	r1, r3
10000b10:	2009      	movs	r0, #9
10000b12:	f7ff ff41 	bl	10000998 <MFRC522_WriteRegister>
    for (uint8_t i = 0; i < len; i++) {
10000b16:	7dfb      	ldrb	r3, [r7, #23]
10000b18:	3301      	adds	r3, #1
10000b1a:	75fb      	strb	r3, [r7, #23]
10000b1c:	7dfa      	ldrb	r2, [r7, #23]
10000b1e:	7afb      	ldrb	r3, [r7, #11]
10000b20:	429a      	cmp	r2, r3
10000b22:	d3f0      	bcc.n	10000b06 <MFRC522_CalculateCRC+0x24>
    }

    MFRC522_WriteRegister(MFRC522_REG_COMMAND, MFRC522_CMD_CALC_CRC);
10000b24:	2103      	movs	r1, #3
10000b26:	2001      	movs	r0, #1
10000b28:	f7ff ff36 	bl	10000998 <MFRC522_WriteRegister>

    uint16_t timeout = 5000;
10000b2c:	f241 3388 	movw	r3, #5000	@ 0x1388
10000b30:	82bb      	strh	r3, [r7, #20]
    uint8_t n;
    do {
        n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
10000b32:	2005      	movs	r0, #5
10000b34:	f7ff ff60 	bl	100009f8 <MFRC522_ReadRegister>
10000b38:	4603      	mov	r3, r0
10000b3a:	74fb      	strb	r3, [r7, #19]
        timeout--;
10000b3c:	8abb      	ldrh	r3, [r7, #20]
10000b3e:	3b01      	subs	r3, #1
10000b40:	82bb      	strh	r3, [r7, #20]
    } while ((timeout != 0) && !(n & 0x04));
10000b42:	8abb      	ldrh	r3, [r7, #20]
10000b44:	2b00      	cmp	r3, #0
10000b46:	d004      	beq.n	10000b52 <MFRC522_CalculateCRC+0x70>
10000b48:	7cfb      	ldrb	r3, [r7, #19]
10000b4a:	f003 0304 	and.w	r3, r3, #4
10000b4e:	2b00      	cmp	r3, #0
10000b50:	d0ef      	beq.n	10000b32 <MFRC522_CalculateCRC+0x50>

    result[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
10000b52:	2022      	movs	r0, #34	@ 0x22
10000b54:	f7ff ff50 	bl	100009f8 <MFRC522_ReadRegister>
10000b58:	4603      	mov	r3, r0
10000b5a:	461a      	mov	r2, r3
10000b5c:	687b      	ldr	r3, [r7, #4]
10000b5e:	701a      	strb	r2, [r3, #0]
    result[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_H);
10000b60:	687b      	ldr	r3, [r7, #4]
10000b62:	1c5c      	adds	r4, r3, #1
10000b64:	2021      	movs	r0, #33	@ 0x21
10000b66:	f7ff ff47 	bl	100009f8 <MFRC522_ReadRegister>
10000b6a:	4603      	mov	r3, r0
10000b6c:	7023      	strb	r3, [r4, #0]
}
10000b6e:	bf00      	nop
10000b70:	371c      	adds	r7, #28
10000b72:	46bd      	mov	sp, r7
10000b74:	bd90      	pop	{r4, r7, pc}

10000b76 <MFRC522_ToCard>:

/* Communicate with PICC */
MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
                                 uint8_t *backData, uint16_t *backLen) {
10000b76:	b590      	push	{r4, r7, lr}
10000b78:	b087      	sub	sp, #28
10000b7a:	af00      	add	r7, sp, #0
10000b7c:	60b9      	str	r1, [r7, #8]
10000b7e:	607b      	str	r3, [r7, #4]
10000b80:	4603      	mov	r3, r0
10000b82:	73fb      	strb	r3, [r7, #15]
10000b84:	4613      	mov	r3, r2
10000b86:	73bb      	strb	r3, [r7, #14]
    MFRC522_Status_t status = MFRC522_ERR;
10000b88:	2302      	movs	r3, #2
10000b8a:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x00;
10000b8c:	2300      	movs	r3, #0
10000b8e:	75bb      	strb	r3, [r7, #22]
    uint8_t waitIRq = 0x00;
10000b90:	2300      	movs	r3, #0
10000b92:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (command) {
10000b94:	7bfb      	ldrb	r3, [r7, #15]
10000b96:	2b0c      	cmp	r3, #12
10000b98:	d006      	beq.n	10000ba8 <MFRC522_ToCard+0x32>
10000b9a:	2b0e      	cmp	r3, #14
10000b9c:	d109      	bne.n	10000bb2 <MFRC522_ToCard+0x3c>
        case MFRC522_CMD_MF_AUTHENT:
            irqEn = 0x12;
10000b9e:	2312      	movs	r3, #18
10000ba0:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x10;
10000ba2:	2310      	movs	r3, #16
10000ba4:	757b      	strb	r3, [r7, #21]
            break;
10000ba6:	e005      	b.n	10000bb4 <MFRC522_ToCard+0x3e>
        case MFRC522_CMD_TRANSCEIVE:
            irqEn = 0x77;
10000ba8:	2377      	movs	r3, #119	@ 0x77
10000baa:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x30;
10000bac:	2330      	movs	r3, #48	@ 0x30
10000bae:	757b      	strb	r3, [r7, #21]
            break;
10000bb0:	e000      	b.n	10000bb4 <MFRC522_ToCard+0x3e>
        default:
            break;
10000bb2:	bf00      	nop
    }

    MFRC522_WriteRegister(MFRC522_REG_COMM_IEN, irqEn | 0x80);
10000bb4:	7dbb      	ldrb	r3, [r7, #22]
10000bb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
10000bba:	b2db      	uxtb	r3, r3
10000bbc:	4619      	mov	r1, r3
10000bbe:	2002      	movs	r0, #2
10000bc0:	f7ff feea 	bl	10000998 <MFRC522_WriteRegister>
    MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
10000bc4:	2180      	movs	r1, #128	@ 0x80
10000bc6:	2004      	movs	r0, #4
10000bc8:	f7ff ff6b 	bl	10000aa2 <MFRC522_ClearBitMask>
    MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
10000bcc:	2180      	movs	r1, #128	@ 0x80
10000bce:	200a      	movs	r0, #10
10000bd0:	f7ff ff4c 	bl	10000a6c <MFRC522_SetBitMask>
    MFRC522_WriteRegister(MFRC522_REG_COMMAND, MFRC522_CMD_IDLE);
10000bd4:	2100      	movs	r1, #0
10000bd6:	2001      	movs	r0, #1
10000bd8:	f7ff fede 	bl	10000998 <MFRC522_WriteRegister>

    for (i = 0; i < sendLen; i++) {
10000bdc:	2300      	movs	r3, #0
10000bde:	827b      	strh	r3, [r7, #18]
10000be0:	e00a      	b.n	10000bf8 <MFRC522_ToCard+0x82>
        MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
10000be2:	8a7b      	ldrh	r3, [r7, #18]
10000be4:	68ba      	ldr	r2, [r7, #8]
10000be6:	4413      	add	r3, r2
10000be8:	781b      	ldrb	r3, [r3, #0]
10000bea:	4619      	mov	r1, r3
10000bec:	2009      	movs	r0, #9
10000bee:	f7ff fed3 	bl	10000998 <MFRC522_WriteRegister>
    for (i = 0; i < sendLen; i++) {
10000bf2:	8a7b      	ldrh	r3, [r7, #18]
10000bf4:	3301      	adds	r3, #1
10000bf6:	827b      	strh	r3, [r7, #18]
10000bf8:	7bbb      	ldrb	r3, [r7, #14]
10000bfa:	b29b      	uxth	r3, r3
10000bfc:	8a7a      	ldrh	r2, [r7, #18]
10000bfe:	429a      	cmp	r2, r3
10000c00:	d3ef      	bcc.n	10000be2 <MFRC522_ToCard+0x6c>
    }

    MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
10000c02:	7bfb      	ldrb	r3, [r7, #15]
10000c04:	4619      	mov	r1, r3
10000c06:	2001      	movs	r0, #1
10000c08:	f7ff fec6 	bl	10000998 <MFRC522_WriteRegister>

    if (command == MFRC522_CMD_TRANSCEIVE) {
10000c0c:	7bfb      	ldrb	r3, [r7, #15]
10000c0e:	2b0c      	cmp	r3, #12
10000c10:	d103      	bne.n	10000c1a <MFRC522_ToCard+0xa4>
        MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);
10000c12:	2180      	movs	r1, #128	@ 0x80
10000c14:	200d      	movs	r0, #13
10000c16:	f7ff ff29 	bl	10000a6c <MFRC522_SetBitMask>
    }

    i = 2000;
10000c1a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
10000c1e:	827b      	strh	r3, [r7, #18]
    do {
        n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
10000c20:	2004      	movs	r0, #4
10000c22:	f7ff fee9 	bl	100009f8 <MFRC522_ReadRegister>
10000c26:	4603      	mov	r3, r0
10000c28:	753b      	strb	r3, [r7, #20]
        i--;
10000c2a:	8a7b      	ldrh	r3, [r7, #18]
10000c2c:	3b01      	subs	r3, #1
10000c2e:	827b      	strh	r3, [r7, #18]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
10000c30:	8a7b      	ldrh	r3, [r7, #18]
10000c32:	2b00      	cmp	r3, #0
10000c34:	d00a      	beq.n	10000c4c <MFRC522_ToCard+0xd6>
10000c36:	7d3b      	ldrb	r3, [r7, #20]
10000c38:	f003 0301 	and.w	r3, r3, #1
10000c3c:	2b00      	cmp	r3, #0
10000c3e:	d105      	bne.n	10000c4c <MFRC522_ToCard+0xd6>
10000c40:	7d3a      	ldrb	r2, [r7, #20]
10000c42:	7d7b      	ldrb	r3, [r7, #21]
10000c44:	4013      	ands	r3, r2
10000c46:	b2db      	uxtb	r3, r3
10000c48:	2b00      	cmp	r3, #0
10000c4a:	d0e9      	beq.n	10000c20 <MFRC522_ToCard+0xaa>

    MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);
10000c4c:	2180      	movs	r1, #128	@ 0x80
10000c4e:	200d      	movs	r0, #13
10000c50:	f7ff ff27 	bl	10000aa2 <MFRC522_ClearBitMask>

    if (i != 0) {
10000c54:	8a7b      	ldrh	r3, [r7, #18]
10000c56:	2b00      	cmp	r3, #0
10000c58:	d057      	beq.n	10000d0a <MFRC522_ToCard+0x194>
        if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
10000c5a:	2006      	movs	r0, #6
10000c5c:	f7ff fecc 	bl	100009f8 <MFRC522_ReadRegister>
10000c60:	4603      	mov	r3, r0
10000c62:	f003 031b 	and.w	r3, r3, #27
10000c66:	2b00      	cmp	r3, #0
10000c68:	d14d      	bne.n	10000d06 <MFRC522_ToCard+0x190>
            status = MFRC522_OK;
10000c6a:	2300      	movs	r3, #0
10000c6c:	75fb      	strb	r3, [r7, #23]

            if (n & irqEn & 0x01) {
10000c6e:	7d3a      	ldrb	r2, [r7, #20]
10000c70:	7dbb      	ldrb	r3, [r7, #22]
10000c72:	4013      	ands	r3, r2
10000c74:	b2db      	uxtb	r3, r3
10000c76:	f003 0301 	and.w	r3, r3, #1
10000c7a:	2b00      	cmp	r3, #0
10000c7c:	d001      	beq.n	10000c82 <MFRC522_ToCard+0x10c>
                status = MFRC522_NOTAGERR;
10000c7e:	2301      	movs	r3, #1
10000c80:	75fb      	strb	r3, [r7, #23]
            }

            if (command == MFRC522_CMD_TRANSCEIVE) {
10000c82:	7bfb      	ldrb	r3, [r7, #15]
10000c84:	2b0c      	cmp	r3, #12
10000c86:	d140      	bne.n	10000d0a <MFRC522_ToCard+0x194>
                n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
10000c88:	200a      	movs	r0, #10
10000c8a:	f7ff feb5 	bl	100009f8 <MFRC522_ReadRegister>
10000c8e:	4603      	mov	r3, r0
10000c90:	753b      	strb	r3, [r7, #20]
                lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
10000c92:	200c      	movs	r0, #12
10000c94:	f7ff feb0 	bl	100009f8 <MFRC522_ReadRegister>
10000c98:	4603      	mov	r3, r0
10000c9a:	f003 0307 	and.w	r3, r3, #7
10000c9e:	747b      	strb	r3, [r7, #17]

                if (lastBits) {
10000ca0:	7c7b      	ldrb	r3, [r7, #17]
10000ca2:	2b00      	cmp	r3, #0
10000ca4:	d00b      	beq.n	10000cbe <MFRC522_ToCard+0x148>
                    *backLen = (n - 1) * 8 + lastBits;
10000ca6:	7d3b      	ldrb	r3, [r7, #20]
10000ca8:	3b01      	subs	r3, #1
10000caa:	b29b      	uxth	r3, r3
10000cac:	00db      	lsls	r3, r3, #3
10000cae:	b29a      	uxth	r2, r3
10000cb0:	7c7b      	ldrb	r3, [r7, #17]
10000cb2:	b29b      	uxth	r3, r3
10000cb4:	4413      	add	r3, r2
10000cb6:	b29a      	uxth	r2, r3
10000cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10000cba:	801a      	strh	r2, [r3, #0]
10000cbc:	e005      	b.n	10000cca <MFRC522_ToCard+0x154>
                } else {
                    *backLen = n * 8;
10000cbe:	7d3b      	ldrb	r3, [r7, #20]
10000cc0:	b29b      	uxth	r3, r3
10000cc2:	00db      	lsls	r3, r3, #3
10000cc4:	b29a      	uxth	r2, r3
10000cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10000cc8:	801a      	strh	r2, [r3, #0]
                }

                if (n == 0) {
10000cca:	7d3b      	ldrb	r3, [r7, #20]
10000ccc:	2b00      	cmp	r3, #0
10000cce:	d101      	bne.n	10000cd4 <MFRC522_ToCard+0x15e>
                    n = 1;
10000cd0:	2301      	movs	r3, #1
10000cd2:	753b      	strb	r3, [r7, #20]
                }
                if (n > 16) {
10000cd4:	7d3b      	ldrb	r3, [r7, #20]
10000cd6:	2b10      	cmp	r3, #16
10000cd8:	d901      	bls.n	10000cde <MFRC522_ToCard+0x168>
                    n = 16;
10000cda:	2310      	movs	r3, #16
10000cdc:	753b      	strb	r3, [r7, #20]
                }

                for (i = 0; i < n; i++) {
10000cde:	2300      	movs	r3, #0
10000ce0:	827b      	strh	r3, [r7, #18]
10000ce2:	e00a      	b.n	10000cfa <MFRC522_ToCard+0x184>
                    backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
10000ce4:	8a7b      	ldrh	r3, [r7, #18]
10000ce6:	687a      	ldr	r2, [r7, #4]
10000ce8:	18d4      	adds	r4, r2, r3
10000cea:	2009      	movs	r0, #9
10000cec:	f7ff fe84 	bl	100009f8 <MFRC522_ReadRegister>
10000cf0:	4603      	mov	r3, r0
10000cf2:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; i++) {
10000cf4:	8a7b      	ldrh	r3, [r7, #18]
10000cf6:	3301      	adds	r3, #1
10000cf8:	827b      	strh	r3, [r7, #18]
10000cfa:	7d3b      	ldrb	r3, [r7, #20]
10000cfc:	b29b      	uxth	r3, r3
10000cfe:	8a7a      	ldrh	r2, [r7, #18]
10000d00:	429a      	cmp	r2, r3
10000d02:	d3ef      	bcc.n	10000ce4 <MFRC522_ToCard+0x16e>
10000d04:	e001      	b.n	10000d0a <MFRC522_ToCard+0x194>
                }
            }
        } else {
            status = MFRC522_ERR;
10000d06:	2302      	movs	r3, #2
10000d08:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
10000d0a:	7dfb      	ldrb	r3, [r7, #23]
}
10000d0c:	4618      	mov	r0, r3
10000d0e:	371c      	adds	r7, #28
10000d10:	46bd      	mov	sp, r7
10000d12:	bd90      	pop	{r4, r7, pc}

10000d14 <MFRC522_Request>:

/* Request tag */
MFRC522_Status_t MFRC522_Request(uint8_t reqMode, uint8_t *tagType) {
10000d14:	b580      	push	{r7, lr}
10000d16:	b086      	sub	sp, #24
10000d18:	af02      	add	r7, sp, #8
10000d1a:	4603      	mov	r3, r0
10000d1c:	6039      	str	r1, [r7, #0]
10000d1e:	71fb      	strb	r3, [r7, #7]
    MFRC522_Status_t status;
    uint16_t backBits;

    MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);
10000d20:	2107      	movs	r1, #7
10000d22:	200d      	movs	r0, #13
10000d24:	f7ff fe38 	bl	10000998 <MFRC522_WriteRegister>

    tagType[0] = reqMode;
10000d28:	683b      	ldr	r3, [r7, #0]
10000d2a:	79fa      	ldrb	r2, [r7, #7]
10000d2c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, tagType, 1, tagType, &backBits);
10000d2e:	f107 030c 	add.w	r3, r7, #12
10000d32:	9300      	str	r3, [sp, #0]
10000d34:	683b      	ldr	r3, [r7, #0]
10000d36:	2201      	movs	r2, #1
10000d38:	6839      	ldr	r1, [r7, #0]
10000d3a:	200c      	movs	r0, #12
10000d3c:	f7ff ff1b 	bl	10000b76 <MFRC522_ToCard>
10000d40:	4603      	mov	r3, r0
10000d42:	73fb      	strb	r3, [r7, #15]

    if ((status != MFRC522_OK) || (backBits != 0x10)) {
10000d44:	7bfb      	ldrb	r3, [r7, #15]
10000d46:	2b00      	cmp	r3, #0
10000d48:	d102      	bne.n	10000d50 <MFRC522_Request+0x3c>
10000d4a:	89bb      	ldrh	r3, [r7, #12]
10000d4c:	2b10      	cmp	r3, #16
10000d4e:	d001      	beq.n	10000d54 <MFRC522_Request+0x40>
        status = MFRC522_ERR;
10000d50:	2302      	movs	r3, #2
10000d52:	73fb      	strb	r3, [r7, #15]
    }

    return status;
10000d54:	7bfb      	ldrb	r3, [r7, #15]
}
10000d56:	4618      	mov	r0, r3
10000d58:	3710      	adds	r7, #16
10000d5a:	46bd      	mov	sp, r7
10000d5c:	bd80      	pop	{r7, pc}

10000d5e <MFRC522_Anticoll>:

/* Anti-collision detection */
MFRC522_Status_t MFRC522_Anticoll(Uid_t *uid) {
10000d5e:	b580      	push	{r7, lr}
10000d60:	b086      	sub	sp, #24
10000d62:	af02      	add	r7, sp, #8
10000d64:	6078      	str	r0, [r7, #4]
    MFRC522_Status_t status;
    uint8_t i;
    uint8_t serNumCheck = 0;
10000d66:	2300      	movs	r3, #0
10000d68:	737b      	strb	r3, [r7, #13]
    uint16_t unLen;

    MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);
10000d6a:	2100      	movs	r1, #0
10000d6c:	200d      	movs	r0, #13
10000d6e:	f7ff fe13 	bl	10000998 <MFRC522_WriteRegister>

    uint8_t serNum[2];
    serNum[0] = PICC_CMD_SEL_CL1;
10000d72:	2393      	movs	r3, #147	@ 0x93
10000d74:	723b      	strb	r3, [r7, #8]
    serNum[1] = 0x20;
10000d76:	2320      	movs	r3, #32
10000d78:	727b      	strb	r3, [r7, #9]

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, serNum, 2, serNum, &unLen);
10000d7a:	f107 0208 	add.w	r2, r7, #8
10000d7e:	f107 0108 	add.w	r1, r7, #8
10000d82:	f107 030a 	add.w	r3, r7, #10
10000d86:	9300      	str	r3, [sp, #0]
10000d88:	4613      	mov	r3, r2
10000d8a:	2202      	movs	r2, #2
10000d8c:	200c      	movs	r0, #12
10000d8e:	f7ff fef2 	bl	10000b76 <MFRC522_ToCard>
10000d92:	4603      	mov	r3, r0
10000d94:	73fb      	strb	r3, [r7, #15]

    if (status == MFRC522_OK) {
10000d96:	7bfb      	ldrb	r3, [r7, #15]
10000d98:	2b00      	cmp	r3, #0
10000d9a:	d127      	bne.n	10000dec <MFRC522_Anticoll+0x8e>
        for (i = 0; i < 4; i++) {
10000d9c:	2300      	movs	r3, #0
10000d9e:	73bb      	strb	r3, [r7, #14]
10000da0:	e014      	b.n	10000dcc <MFRC522_Anticoll+0x6e>
            uid->uidByte[i] = serNum[i];
10000da2:	7bba      	ldrb	r2, [r7, #14]
10000da4:	7bbb      	ldrb	r3, [r7, #14]
10000da6:	3210      	adds	r2, #16
10000da8:	443a      	add	r2, r7
10000daa:	f812 1c08 	ldrb.w	r1, [r2, #-8]
10000dae:	687a      	ldr	r2, [r7, #4]
10000db0:	4413      	add	r3, r2
10000db2:	460a      	mov	r2, r1
10000db4:	705a      	strb	r2, [r3, #1]
            serNumCheck ^= serNum[i];
10000db6:	7bbb      	ldrb	r3, [r7, #14]
10000db8:	3310      	adds	r3, #16
10000dba:	443b      	add	r3, r7
10000dbc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
10000dc0:	7b7b      	ldrb	r3, [r7, #13]
10000dc2:	4053      	eors	r3, r2
10000dc4:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++) {
10000dc6:	7bbb      	ldrb	r3, [r7, #14]
10000dc8:	3301      	adds	r3, #1
10000dca:	73bb      	strb	r3, [r7, #14]
10000dcc:	7bbb      	ldrb	r3, [r7, #14]
10000dce:	2b03      	cmp	r3, #3
10000dd0:	d9e7      	bls.n	10000da2 <MFRC522_Anticoll+0x44>
        }

        if (serNumCheck != serNum[i]) {
10000dd2:	7bbb      	ldrb	r3, [r7, #14]
10000dd4:	3310      	adds	r3, #16
10000dd6:	443b      	add	r3, r7
10000dd8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
10000ddc:	7b7a      	ldrb	r2, [r7, #13]
10000dde:	429a      	cmp	r2, r3
10000de0:	d001      	beq.n	10000de6 <MFRC522_Anticoll+0x88>
            status = MFRC522_ERR;
10000de2:	2302      	movs	r3, #2
10000de4:	73fb      	strb	r3, [r7, #15]
        }

        uid->size = 4;
10000de6:	687b      	ldr	r3, [r7, #4]
10000de8:	2204      	movs	r2, #4
10000dea:	701a      	strb	r2, [r3, #0]
    }

    return status;
10000dec:	7bfb      	ldrb	r3, [r7, #15]
}
10000dee:	4618      	mov	r0, r3
10000df0:	3710      	adds	r7, #16
10000df2:	46bd      	mov	sp, r7
10000df4:	bd80      	pop	{r7, pc}

10000df6 <MFRC522_SelectTag>:

/* Select tag */
MFRC522_Status_t MFRC522_SelectTag(Uid_t *uid) {
10000df6:	b580      	push	{r7, lr}
10000df8:	b088      	sub	sp, #32
10000dfa:	af02      	add	r7, sp, #8
10000dfc:	6078      	str	r0, [r7, #4]
    MFRC522_Status_t status;
    uint8_t i;
    uint16_t recvBits;
    uint8_t buffer[9];

    buffer[0] = PICC_CMD_SEL_CL1;
10000dfe:	2393      	movs	r3, #147	@ 0x93
10000e00:	723b      	strb	r3, [r7, #8]
    buffer[1] = 0x70;
10000e02:	2370      	movs	r3, #112	@ 0x70
10000e04:	727b      	strb	r3, [r7, #9]

    for (i = 0; i < 4; i++) {
10000e06:	2300      	movs	r3, #0
10000e08:	75bb      	strb	r3, [r7, #22]
10000e0a:	e00c      	b.n	10000e26 <MFRC522_SelectTag+0x30>
        buffer[i + 2] = uid->uidByte[i];
10000e0c:	7dba      	ldrb	r2, [r7, #22]
10000e0e:	7dbb      	ldrb	r3, [r7, #22]
10000e10:	3302      	adds	r3, #2
10000e12:	6879      	ldr	r1, [r7, #4]
10000e14:	440a      	add	r2, r1
10000e16:	7852      	ldrb	r2, [r2, #1]
10000e18:	3318      	adds	r3, #24
10000e1a:	443b      	add	r3, r7
10000e1c:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (i = 0; i < 4; i++) {
10000e20:	7dbb      	ldrb	r3, [r7, #22]
10000e22:	3301      	adds	r3, #1
10000e24:	75bb      	strb	r3, [r7, #22]
10000e26:	7dbb      	ldrb	r3, [r7, #22]
10000e28:	2b03      	cmp	r3, #3
10000e2a:	d9ef      	bls.n	10000e0c <MFRC522_SelectTag+0x16>
    }

    buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
10000e2c:	7aba      	ldrb	r2, [r7, #10]
10000e2e:	7afb      	ldrb	r3, [r7, #11]
10000e30:	4053      	eors	r3, r2
10000e32:	b2da      	uxtb	r2, r3
10000e34:	7b3b      	ldrb	r3, [r7, #12]
10000e36:	4053      	eors	r3, r2
10000e38:	b2da      	uxtb	r2, r3
10000e3a:	7b7b      	ldrb	r3, [r7, #13]
10000e3c:	4053      	eors	r3, r2
10000e3e:	b2db      	uxtb	r3, r3
10000e40:	73bb      	strb	r3, [r7, #14]

    MFRC522_CalculateCRC(buffer, 7, &buffer[7]);
10000e42:	f107 0308 	add.w	r3, r7, #8
10000e46:	1dda      	adds	r2, r3, #7
10000e48:	f107 0308 	add.w	r3, r7, #8
10000e4c:	2107      	movs	r1, #7
10000e4e:	4618      	mov	r0, r3
10000e50:	f7ff fe47 	bl	10000ae2 <MFRC522_CalculateCRC>

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
10000e54:	f107 0208 	add.w	r2, r7, #8
10000e58:	f107 0108 	add.w	r1, r7, #8
10000e5c:	f107 0314 	add.w	r3, r7, #20
10000e60:	9300      	str	r3, [sp, #0]
10000e62:	4613      	mov	r3, r2
10000e64:	2209      	movs	r2, #9
10000e66:	200c      	movs	r0, #12
10000e68:	f7ff fe85 	bl	10000b76 <MFRC522_ToCard>
10000e6c:	4603      	mov	r3, r0
10000e6e:	75fb      	strb	r3, [r7, #23]

    if ((status == MFRC522_OK) && (recvBits == 0x18)) {
10000e70:	7dfb      	ldrb	r3, [r7, #23]
10000e72:	2b00      	cmp	r3, #0
10000e74:	d108      	bne.n	10000e88 <MFRC522_SelectTag+0x92>
10000e76:	8abb      	ldrh	r3, [r7, #20]
10000e78:	2b18      	cmp	r3, #24
10000e7a:	d105      	bne.n	10000e88 <MFRC522_SelectTag+0x92>
        uid->sak = buffer[0];
10000e7c:	7a3a      	ldrb	r2, [r7, #8]
10000e7e:	687b      	ldr	r3, [r7, #4]
10000e80:	72da      	strb	r2, [r3, #11]
        status = MFRC522_OK;
10000e82:	2300      	movs	r3, #0
10000e84:	75fb      	strb	r3, [r7, #23]
10000e86:	e001      	b.n	10000e8c <MFRC522_SelectTag+0x96>
    } else {
        status = MFRC522_ERR;
10000e88:	2302      	movs	r3, #2
10000e8a:	75fb      	strb	r3, [r7, #23]
    }

    return status;
10000e8c:	7dfb      	ldrb	r3, [r7, #23]
}
10000e8e:	4618      	mov	r0, r3
10000e90:	3718      	adds	r7, #24
10000e92:	46bd      	mov	sp, r7
10000e94:	bd80      	pop	{r7, pc}

10000e96 <MFRC522_Auth>:

/* Authenticate */
MFRC522_Status_t MFRC522_Auth(uint8_t authMode, uint8_t blockAddr, uint8_t *key, Uid_t *uid) {
10000e96:	b580      	push	{r7, lr}
10000e98:	b08a      	sub	sp, #40	@ 0x28
10000e9a:	af02      	add	r7, sp, #8
10000e9c:	60ba      	str	r2, [r7, #8]
10000e9e:	607b      	str	r3, [r7, #4]
10000ea0:	4603      	mov	r3, r0
10000ea2:	73fb      	strb	r3, [r7, #15]
10000ea4:	460b      	mov	r3, r1
10000ea6:	73bb      	strb	r3, [r7, #14]
    MFRC522_Status_t status;
    uint16_t recvBits;
    uint8_t i;
    uint8_t buff[12];

    buff[0] = authMode;
10000ea8:	7bfb      	ldrb	r3, [r7, #15]
10000eaa:	743b      	strb	r3, [r7, #16]
    buff[1] = blockAddr;
10000eac:	7bbb      	ldrb	r3, [r7, #14]
10000eae:	747b      	strb	r3, [r7, #17]

    for (i = 0; i < 6; i++) {
10000eb0:	2300      	movs	r3, #0
10000eb2:	77bb      	strb	r3, [r7, #30]
10000eb4:	e00c      	b.n	10000ed0 <MFRC522_Auth+0x3a>
        buff[i + 2] = key[i];
10000eb6:	7fbb      	ldrb	r3, [r7, #30]
10000eb8:	68ba      	ldr	r2, [r7, #8]
10000eba:	441a      	add	r2, r3
10000ebc:	7fbb      	ldrb	r3, [r7, #30]
10000ebe:	3302      	adds	r3, #2
10000ec0:	7812      	ldrb	r2, [r2, #0]
10000ec2:	3320      	adds	r3, #32
10000ec4:	443b      	add	r3, r7
10000ec6:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (i = 0; i < 6; i++) {
10000eca:	7fbb      	ldrb	r3, [r7, #30]
10000ecc:	3301      	adds	r3, #1
10000ece:	77bb      	strb	r3, [r7, #30]
10000ed0:	7fbb      	ldrb	r3, [r7, #30]
10000ed2:	2b05      	cmp	r3, #5
10000ed4:	d9ef      	bls.n	10000eb6 <MFRC522_Auth+0x20>
    }

    for (i = 0; i < 4; i++) {
10000ed6:	2300      	movs	r3, #0
10000ed8:	77bb      	strb	r3, [r7, #30]
10000eda:	e00c      	b.n	10000ef6 <MFRC522_Auth+0x60>
        buff[i + 8] = uid->uidByte[i];
10000edc:	7fba      	ldrb	r2, [r7, #30]
10000ede:	7fbb      	ldrb	r3, [r7, #30]
10000ee0:	3308      	adds	r3, #8
10000ee2:	6879      	ldr	r1, [r7, #4]
10000ee4:	440a      	add	r2, r1
10000ee6:	7852      	ldrb	r2, [r2, #1]
10000ee8:	3320      	adds	r3, #32
10000eea:	443b      	add	r3, r7
10000eec:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (i = 0; i < 4; i++) {
10000ef0:	7fbb      	ldrb	r3, [r7, #30]
10000ef2:	3301      	adds	r3, #1
10000ef4:	77bb      	strb	r3, [r7, #30]
10000ef6:	7fbb      	ldrb	r3, [r7, #30]
10000ef8:	2b03      	cmp	r3, #3
10000efa:	d9ef      	bls.n	10000edc <MFRC522_Auth+0x46>
    }

    status = MFRC522_ToCard(MFRC522_CMD_MF_AUTHENT, buff, 12, buff, &recvBits);
10000efc:	f107 0210 	add.w	r2, r7, #16
10000f00:	f107 0110 	add.w	r1, r7, #16
10000f04:	f107 031c 	add.w	r3, r7, #28
10000f08:	9300      	str	r3, [sp, #0]
10000f0a:	4613      	mov	r3, r2
10000f0c:	220c      	movs	r2, #12
10000f0e:	200e      	movs	r0, #14
10000f10:	f7ff fe31 	bl	10000b76 <MFRC522_ToCard>
10000f14:	4603      	mov	r3, r0
10000f16:	77fb      	strb	r3, [r7, #31]

    if ((status != MFRC522_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS_2) & 0x08))) {
10000f18:	7ffb      	ldrb	r3, [r7, #31]
10000f1a:	2b00      	cmp	r3, #0
10000f1c:	d107      	bne.n	10000f2e <MFRC522_Auth+0x98>
10000f1e:	2008      	movs	r0, #8
10000f20:	f7ff fd6a 	bl	100009f8 <MFRC522_ReadRegister>
10000f24:	4603      	mov	r3, r0
10000f26:	f003 0308 	and.w	r3, r3, #8
10000f2a:	2b00      	cmp	r3, #0
10000f2c:	d101      	bne.n	10000f32 <MFRC522_Auth+0x9c>
        status = MFRC522_ERR;
10000f2e:	2302      	movs	r3, #2
10000f30:	77fb      	strb	r3, [r7, #31]
    }

    return status;
10000f32:	7ffb      	ldrb	r3, [r7, #31]
}
10000f34:	4618      	mov	r0, r3
10000f36:	3720      	adds	r7, #32
10000f38:	46bd      	mov	sp, r7
10000f3a:	bd80      	pop	{r7, pc}

10000f3c <MFRC522_Read>:

/* Read block */
MFRC522_Status_t MFRC522_Read(uint8_t blockAddr, uint8_t *recvData) {
10000f3c:	b580      	push	{r7, lr}
10000f3e:	b086      	sub	sp, #24
10000f40:	af02      	add	r7, sp, #8
10000f42:	4603      	mov	r3, r0
10000f44:	6039      	str	r1, [r7, #0]
10000f46:	71fb      	strb	r3, [r7, #7]
    MFRC522_Status_t status;
    uint16_t unLen;

    recvData[0] = PICC_CMD_MF_READ;
10000f48:	683b      	ldr	r3, [r7, #0]
10000f4a:	2230      	movs	r2, #48	@ 0x30
10000f4c:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
10000f4e:	683b      	ldr	r3, [r7, #0]
10000f50:	3301      	adds	r3, #1
10000f52:	79fa      	ldrb	r2, [r7, #7]
10000f54:	701a      	strb	r2, [r3, #0]

    MFRC522_CalculateCRC(recvData, 2, &recvData[2]);
10000f56:	683b      	ldr	r3, [r7, #0]
10000f58:	3302      	adds	r3, #2
10000f5a:	461a      	mov	r2, r3
10000f5c:	2102      	movs	r1, #2
10000f5e:	6838      	ldr	r0, [r7, #0]
10000f60:	f7ff fdbf 	bl	10000ae2 <MFRC522_CalculateCRC>

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, recvData, 4, recvData, &unLen);
10000f64:	f107 030c 	add.w	r3, r7, #12
10000f68:	9300      	str	r3, [sp, #0]
10000f6a:	683b      	ldr	r3, [r7, #0]
10000f6c:	2204      	movs	r2, #4
10000f6e:	6839      	ldr	r1, [r7, #0]
10000f70:	200c      	movs	r0, #12
10000f72:	f7ff fe00 	bl	10000b76 <MFRC522_ToCard>
10000f76:	4603      	mov	r3, r0
10000f78:	73fb      	strb	r3, [r7, #15]

    if ((status != MFRC522_OK) || (unLen != 0x90)) {
10000f7a:	7bfb      	ldrb	r3, [r7, #15]
10000f7c:	2b00      	cmp	r3, #0
10000f7e:	d102      	bne.n	10000f86 <MFRC522_Read+0x4a>
10000f80:	89bb      	ldrh	r3, [r7, #12]
10000f82:	2b90      	cmp	r3, #144	@ 0x90
10000f84:	d001      	beq.n	10000f8a <MFRC522_Read+0x4e>
        status = MFRC522_ERR;
10000f86:	2302      	movs	r3, #2
10000f88:	73fb      	strb	r3, [r7, #15]
    }

    return status;
10000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
10000f8c:	4618      	mov	r0, r3
10000f8e:	3710      	adds	r7, #16
10000f90:	46bd      	mov	sp, r7
10000f92:	bd80      	pop	{r7, pc}

10000f94 <MFRC522_Halt>:

    return status;
}

/* Halt tag */
void MFRC522_Halt(void) {
10000f94:	b580      	push	{r7, lr}
10000f96:	b084      	sub	sp, #16
10000f98:	af02      	add	r7, sp, #8
    uint16_t unLen;
    uint8_t buff[4];

    buff[0] = PICC_CMD_HLTA;
10000f9a:	2350      	movs	r3, #80	@ 0x50
10000f9c:	703b      	strb	r3, [r7, #0]
    buff[1] = 0;
10000f9e:	2300      	movs	r3, #0
10000fa0:	707b      	strb	r3, [r7, #1]
    MFRC522_CalculateCRC(buff, 2, &buff[2]);
10000fa2:	463b      	mov	r3, r7
10000fa4:	1c9a      	adds	r2, r3, #2
10000fa6:	463b      	mov	r3, r7
10000fa8:	2102      	movs	r1, #2
10000faa:	4618      	mov	r0, r3
10000fac:	f7ff fd99 	bl	10000ae2 <MFRC522_CalculateCRC>

    MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buff, 4, buff, &unLen);
10000fb0:	463a      	mov	r2, r7
10000fb2:	4639      	mov	r1, r7
10000fb4:	1dbb      	adds	r3, r7, #6
10000fb6:	9300      	str	r3, [sp, #0]
10000fb8:	4613      	mov	r3, r2
10000fba:	2204      	movs	r2, #4
10000fbc:	200c      	movs	r0, #12
10000fbe:	f7ff fdda 	bl	10000b76 <MFRC522_ToCard>
}
10000fc2:	bf00      	nop
10000fc4:	3708      	adds	r7, #8
10000fc6:	46bd      	mov	sp, r7
10000fc8:	bd80      	pop	{r7, pc}
	...

10000fcc <MFRC522_GetType>:

/* Get card type */
PICC_Type_t MFRC522_GetType(uint8_t sak) {
10000fcc:	b480      	push	{r7}
10000fce:	b083      	sub	sp, #12
10000fd0:	af00      	add	r7, sp, #0
10000fd2:	4603      	mov	r3, r0
10000fd4:	71fb      	strb	r3, [r7, #7]
    if (sak & 0x04) {
10000fd6:	79fb      	ldrb	r3, [r7, #7]
10000fd8:	f003 0304 	and.w	r3, r3, #4
10000fdc:	2b00      	cmp	r3, #0
10000fde:	d001      	beq.n	10000fe4 <MFRC522_GetType+0x18>
        return PICC_TYPE_NOT_COMPLETE;
10000fe0:	2307      	movs	r3, #7
10000fe2:	e044      	b.n	1000106e <MFRC522_GetType+0xa2>
    }

    switch (sak) {
10000fe4:	79fb      	ldrb	r3, [r7, #7]
10000fe6:	2b18      	cmp	r3, #24
10000fe8:	d840      	bhi.n	1000106c <MFRC522_GetType+0xa0>
10000fea:	a201      	add	r2, pc, #4	@ (adr r2, 10000ff0 <MFRC522_GetType+0x24>)
10000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10000ff0:	10001061 	.word	0x10001061
10000ff4:	10001069 	.word	0x10001069
10000ff8:	1000106d 	.word	0x1000106d
10000ffc:	1000106d 	.word	0x1000106d
10001000:	1000106d 	.word	0x1000106d
10001004:	1000106d 	.word	0x1000106d
10001008:	1000106d 	.word	0x1000106d
1000100c:	1000106d 	.word	0x1000106d
10001010:	10001059 	.word	0x10001059
10001014:	10001055 	.word	0x10001055
10001018:	1000106d 	.word	0x1000106d
1000101c:	1000106d 	.word	0x1000106d
10001020:	1000106d 	.word	0x1000106d
10001024:	1000106d 	.word	0x1000106d
10001028:	1000106d 	.word	0x1000106d
1000102c:	1000106d 	.word	0x1000106d
10001030:	10001065 	.word	0x10001065
10001034:	10001065 	.word	0x10001065
10001038:	1000106d 	.word	0x1000106d
1000103c:	1000106d 	.word	0x1000106d
10001040:	1000106d 	.word	0x1000106d
10001044:	1000106d 	.word	0x1000106d
10001048:	1000106d 	.word	0x1000106d
1000104c:	1000106d 	.word	0x1000106d
10001050:	1000105d 	.word	0x1000105d
        case 0x09: return PICC_TYPE_MIFARE_MINI;
10001054:	2301      	movs	r3, #1
10001056:	e00a      	b.n	1000106e <MFRC522_GetType+0xa2>
        case 0x08: return PICC_TYPE_MIFARE_1K;
10001058:	2302      	movs	r3, #2
1000105a:	e008      	b.n	1000106e <MFRC522_GetType+0xa2>
        case 0x18: return PICC_TYPE_MIFARE_4K;
1000105c:	2303      	movs	r3, #3
1000105e:	e006      	b.n	1000106e <MFRC522_GetType+0xa2>
        case 0x00: return PICC_TYPE_MIFARE_UL;
10001060:	2304      	movs	r3, #4
10001062:	e004      	b.n	1000106e <MFRC522_GetType+0xa2>
        case 0x10:
        case 0x11: return PICC_TYPE_MIFARE_PLUS;
10001064:	2305      	movs	r3, #5
10001066:	e002      	b.n	1000106e <MFRC522_GetType+0xa2>
        case 0x01: return PICC_TYPE_TNP3XXX;
10001068:	2306      	movs	r3, #6
1000106a:	e000      	b.n	1000106e <MFRC522_GetType+0xa2>
        default: return PICC_TYPE_UNKNOWN;
1000106c:	2300      	movs	r3, #0
    }
}
1000106e:	4618      	mov	r0, r3
10001070:	370c      	adds	r7, #12
10001072:	46bd      	mov	sp, r7
10001074:	f85d 7b04 	ldr.w	r7, [sp], #4
10001078:	4770      	bx	lr
1000107a:	bf00      	nop

1000107c <MFRC522_GetTypeName>:

/* Get card type name */
const char* MFRC522_GetTypeName(PICC_Type_t type) {
1000107c:	b480      	push	{r7}
1000107e:	b083      	sub	sp, #12
10001080:	af00      	add	r7, sp, #0
10001082:	4603      	mov	r3, r0
10001084:	71fb      	strb	r3, [r7, #7]
    switch (type) {
10001086:	79fb      	ldrb	r3, [r7, #7]
10001088:	3b01      	subs	r3, #1
1000108a:	2b06      	cmp	r3, #6
1000108c:	d81e      	bhi.n	100010cc <MFRC522_GetTypeName+0x50>
1000108e:	a201      	add	r2, pc, #4	@ (adr r2, 10001094 <MFRC522_GetTypeName+0x18>)
10001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001094:	100010b1 	.word	0x100010b1
10001098:	100010b5 	.word	0x100010b5
1000109c:	100010b9 	.word	0x100010b9
100010a0:	100010bd 	.word	0x100010bd
100010a4:	100010c1 	.word	0x100010c1
100010a8:	100010c5 	.word	0x100010c5
100010ac:	100010c9 	.word	0x100010c9
        case PICC_TYPE_MIFARE_MINI: return "MIFARE Mini";
100010b0:	4b0a      	ldr	r3, [pc, #40]	@ (100010dc <MFRC522_GetTypeName+0x60>)
100010b2:	e00c      	b.n	100010ce <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_1K: return "MIFARE 1KB";
100010b4:	4b0a      	ldr	r3, [pc, #40]	@ (100010e0 <MFRC522_GetTypeName+0x64>)
100010b6:	e00a      	b.n	100010ce <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_4K: return "MIFARE 4KB";
100010b8:	4b0a      	ldr	r3, [pc, #40]	@ (100010e4 <MFRC522_GetTypeName+0x68>)
100010ba:	e008      	b.n	100010ce <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_UL: return "MIFARE Ultralight";
100010bc:	4b0a      	ldr	r3, [pc, #40]	@ (100010e8 <MFRC522_GetTypeName+0x6c>)
100010be:	e006      	b.n	100010ce <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_PLUS: return "MIFARE Plus";
100010c0:	4b0a      	ldr	r3, [pc, #40]	@ (100010ec <MFRC522_GetTypeName+0x70>)
100010c2:	e004      	b.n	100010ce <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_TNP3XXX: return "MIFARE TNP3XXX";
100010c4:	4b0a      	ldr	r3, [pc, #40]	@ (100010f0 <MFRC522_GetTypeName+0x74>)
100010c6:	e002      	b.n	100010ce <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_NOT_COMPLETE: return "SAK incomplete";
100010c8:	4b0a      	ldr	r3, [pc, #40]	@ (100010f4 <MFRC522_GetTypeName+0x78>)
100010ca:	e000      	b.n	100010ce <MFRC522_GetTypeName+0x52>
        default: return "Unknown";
100010cc:	4b0a      	ldr	r3, [pc, #40]	@ (100010f8 <MFRC522_GetTypeName+0x7c>)
    }
}
100010ce:	4618      	mov	r0, r3
100010d0:	370c      	adds	r7, #12
100010d2:	46bd      	mov	sp, r7
100010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100010d8:	4770      	bx	lr
100010da:	bf00      	nop
100010dc:	1000a370 	.word	0x1000a370
100010e0:	1000a37c 	.word	0x1000a37c
100010e4:	1000a388 	.word	0x1000a388
100010e8:	1000a394 	.word	0x1000a394
100010ec:	1000a3a8 	.word	0x1000a3a8
100010f0:	1000a3b4 	.word	0x1000a3b4
100010f4:	1000a3c4 	.word	0x1000a3c4
100010f8:	1000a3d4 	.word	0x1000a3d4

100010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100010fc:	b580      	push	{r7, lr}
100010fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
10001100:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001104:	f44f 6200 	mov.w	r2, #2048	@ 0x800
10001108:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
1000110c:	2200      	movs	r2, #0
1000110e:	2101      	movs	r1, #1
10001110:	f06f 000b 	mvn.w	r0, #11
10001114:	f000 fb5d 	bl	100017d2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10001118:	2200      	movs	r2, #0
1000111a:	2101      	movs	r1, #1
1000111c:	f06f 000a 	mvn.w	r0, #10
10001120:	f000 fb57 	bl	100017d2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10001124:	2200      	movs	r2, #0
10001126:	2101      	movs	r1, #1
10001128:	f06f 0009 	mvn.w	r0, #9
1000112c:	f000 fb51 	bl	100017d2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
10001130:	2200      	movs	r2, #0
10001132:	2101      	movs	r1, #1
10001134:	f06f 0004 	mvn.w	r0, #4
10001138:	f000 fb4b 	bl	100017d2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
1000113c:	2200      	movs	r2, #0
1000113e:	2101      	movs	r1, #1
10001140:	f06f 0003 	mvn.w	r0, #3
10001144:	f000 fb45 	bl	100017d2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
10001148:	2200      	movs	r2, #0
1000114a:	2101      	movs	r1, #1
1000114c:	f06f 0001 	mvn.w	r0, #1
10001150:	f000 fb3f 	bl	100017d2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
10001154:	2200      	movs	r2, #0
10001156:	2100      	movs	r1, #0
10001158:	2091      	movs	r0, #145	@ 0x91
1000115a:	f000 fb3a 	bl	100017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
1000115e:	2091      	movs	r0, #145	@ 0x91
10001160:	f000 fb53 	bl	1000180a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10001164:	bf00      	nop
10001166:	bd80      	pop	{r7, pc}

10001168 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
10001168:	b580      	push	{r7, lr}
1000116a:	b082      	sub	sp, #8
1000116c:	af00      	add	r7, sp, #0
1000116e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
10001170:	687b      	ldr	r3, [r7, #4]
10001172:	681b      	ldr	r3, [r3, #0]
10001174:	4a0e      	ldr	r2, [pc, #56]	@ (100011b0 <HAL_IPCC_MspInit+0x48>)
10001176:	4293      	cmp	r3, r2
10001178:	d115      	bne.n	100011a6 <HAL_IPCC_MspInit+0x3e>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
1000117a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000117e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
10001182:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
10001186:	2200      	movs	r2, #0
10001188:	2101      	movs	r1, #1
1000118a:	2067      	movs	r0, #103	@ 0x67
1000118c:	f000 fb21 	bl	100017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
10001190:	2067      	movs	r0, #103	@ 0x67
10001192:	f000 fb3a 	bl	1000180a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
10001196:	2200      	movs	r2, #0
10001198:	2101      	movs	r1, #1
1000119a:	2068      	movs	r0, #104	@ 0x68
1000119c:	f000 fb19 	bl	100017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
100011a0:	2068      	movs	r0, #104	@ 0x68
100011a2:	f000 fb32 	bl	1000180a <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
100011a6:	bf00      	nop
100011a8:	3708      	adds	r7, #8
100011aa:	46bd      	mov	sp, r7
100011ac:	bd80      	pop	{r7, pc}
100011ae:	bf00      	nop
100011b0:	4c001000 	.word	0x4c001000

100011b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
100011b4:	b580      	push	{r7, lr}
100011b6:	b0de      	sub	sp, #376	@ 0x178
100011b8:	af00      	add	r7, sp, #0
100011ba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100011be:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
100011c2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100011c4:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
100011c8:	2200      	movs	r2, #0
100011ca:	601a      	str	r2, [r3, #0]
100011cc:	605a      	str	r2, [r3, #4]
100011ce:	609a      	str	r2, [r3, #8]
100011d0:	60da      	str	r2, [r3, #12]
100011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100011d4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100011d8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
100011dc:	4618      	mov	r0, r3
100011de:	f44f 73ac 	mov.w	r3, #344	@ 0x158
100011e2:	461a      	mov	r2, r3
100011e4:	2100      	movs	r1, #0
100011e6:	f008 f893 	bl	10009310 <memset>
  if(hspi->Instance==SPI5)
100011ea:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100011ee:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
100011f2:	681b      	ldr	r3, [r3, #0]
100011f4:	681b      	ldr	r3, [r3, #0]
100011f6:	4a32      	ldr	r2, [pc, #200]	@ (100012c0 <HAL_SPI_MspInit+0x10c>)
100011f8:	4293      	cmp	r3, r2
100011fa:	d15b      	bne.n	100012b4 <HAL_SPI_MspInit+0x100>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
100011fc:	4b31      	ldr	r3, [pc, #196]	@ (100012c4 <HAL_SPI_MspInit+0x110>)
100011fe:	681b      	ldr	r3, [r3, #0]
10001200:	f003 0307 	and.w	r3, r3, #7
10001204:	2b04      	cmp	r3, #4
10001206:	d11a      	bne.n	1000123e <HAL_SPI_MspInit+0x8a>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI45;
10001208:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
1000120c:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
10001210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10001214:	f04f 0300 	mov.w	r3, #0
10001218:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PCLK2;
1000121c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10001220:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
10001224:	2200      	movs	r2, #0
10001226:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
1000122a:	f107 0308 	add.w	r3, r7, #8
1000122e:	4618      	mov	r0, r3
10001230:	f002 fd0c 	bl	10003c4c <HAL_RCCEx_PeriphCLKConfig>
10001234:	4603      	mov	r3, r0
10001236:	2b00      	cmp	r3, #0
10001238:	d001      	beq.n	1000123e <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
1000123a:	f7ff fb47 	bl	100008cc <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
1000123e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001242:	f44f 6280 	mov.w	r2, #1024	@ 0x400
10001246:	f8c3 2a88 	str.w	r2, [r3, #2696]	@ 0xa88

    __HAL_RCC_GPIOH_CLK_ENABLE();
1000124a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000124e:	2280      	movs	r2, #128	@ 0x80
10001250:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
10001254:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001258:	2220      	movs	r2, #32
1000125a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    /**SPI5 GPIO Configuration
    PH6     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
1000125e:	2340      	movs	r3, #64	@ 0x40
10001260:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10001264:	2302      	movs	r3, #2
10001266:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000126a:	2300      	movs	r3, #0
1000126c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
10001270:	2301      	movs	r3, #1
10001272:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
10001276:	2305      	movs	r3, #5
10001278:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
1000127c:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
10001280:	4619      	mov	r1, r3
10001282:	4811      	ldr	r0, [pc, #68]	@ (100012c8 <HAL_SPI_MspInit+0x114>)
10001284:	f000 fadc 	bl	10001840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
10001288:	f44f 7340 	mov.w	r3, #768	@ 0x300
1000128c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10001290:	2302      	movs	r3, #2
10001292:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10001296:	2300      	movs	r3, #0
10001298:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
1000129c:	2301      	movs	r3, #1
1000129e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
100012a2:	2305      	movs	r3, #5
100012a4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
100012a8:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
100012ac:	4619      	mov	r1, r3
100012ae:	4807      	ldr	r0, [pc, #28]	@ (100012cc <HAL_SPI_MspInit+0x118>)
100012b0:	f000 fac6 	bl	10001840 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
100012b4:	bf00      	nop
100012b6:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
100012ba:	46bd      	mov	sp, r7
100012bc:	bd80      	pop	{r7, pc}
100012be:	bf00      	nop
100012c0:	44009000 	.word	0x44009000
100012c4:	50020000 	.word	0x50020000
100012c8:	50009000 	.word	0x50009000
100012cc:	50007000 	.word	0x50007000

100012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100012d0:	b480      	push	{r7}
100012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100012d4:	bf00      	nop
100012d6:	e7fd      	b.n	100012d4 <NMI_Handler+0x4>

100012d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100012d8:	b480      	push	{r7}
100012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100012dc:	bf00      	nop
100012de:	e7fd      	b.n	100012dc <HardFault_Handler+0x4>

100012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100012e0:	b480      	push	{r7}
100012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100012e4:	bf00      	nop
100012e6:	e7fd      	b.n	100012e4 <MemManage_Handler+0x4>

100012e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100012e8:	b480      	push	{r7}
100012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100012ec:	bf00      	nop
100012ee:	e7fd      	b.n	100012ec <BusFault_Handler+0x4>

100012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
100012f0:	b480      	push	{r7}
100012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100012f4:	bf00      	nop
100012f6:	e7fd      	b.n	100012f4 <UsageFault_Handler+0x4>

100012f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100012f8:	b480      	push	{r7}
100012fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100012fc:	bf00      	nop
100012fe:	46bd      	mov	sp, r7
10001300:	f85d 7b04 	ldr.w	r7, [sp], #4
10001304:	4770      	bx	lr

10001306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10001306:	b480      	push	{r7}
10001308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
1000130a:	bf00      	nop
1000130c:	46bd      	mov	sp, r7
1000130e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001312:	4770      	bx	lr

10001314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10001314:	b480      	push	{r7}
10001316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10001318:	bf00      	nop
1000131a:	46bd      	mov	sp, r7
1000131c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001320:	4770      	bx	lr

10001322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10001322:	b580      	push	{r7, lr}
10001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10001326:	f000 f935 	bl	10001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1000132a:	bf00      	nop
1000132c:	bd80      	pop	{r7, pc}
	...

10001330 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
10001330:	b580      	push	{r7, lr}
10001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10001334:	4802      	ldr	r0, [pc, #8]	@ (10001340 <IPCC_RX1_IRQHandler+0x10>)
10001336:	f000 fd8f 	bl	10001e58 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
1000133a:	bf00      	nop
1000133c:	bd80      	pop	{r7, pc}
1000133e:	bf00      	nop
10001340:	100201d0 	.word	0x100201d0

10001344 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
10001344:	b580      	push	{r7, lr}
10001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10001348:	4802      	ldr	r0, [pc, #8]	@ (10001354 <IPCC_TX1_IRQHandler+0x10>)
1000134a:	f000 fd37 	bl	10001dbc <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
1000134e:	bf00      	nop
10001350:	bd80      	pop	{r7, pc}
10001352:	bf00      	nop
10001354:	100201d0 	.word	0x100201d0

10001358 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10001358:	b580      	push	{r7, lr}
1000135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
1000135c:	f002 f816 	bl	1000338c <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10001360:	bf00      	nop
10001362:	bd80      	pop	{r7, pc}

10001364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
10001364:	b480      	push	{r7}
10001366:	af00      	add	r7, sp, #0
  return 1;
10001368:	2301      	movs	r3, #1
}
1000136a:	4618      	mov	r0, r3
1000136c:	46bd      	mov	sp, r7
1000136e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001372:	4770      	bx	lr

10001374 <_kill>:

int _kill(int pid, int sig)
{
10001374:	b580      	push	{r7, lr}
10001376:	b082      	sub	sp, #8
10001378:	af00      	add	r7, sp, #0
1000137a:	6078      	str	r0, [r7, #4]
1000137c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
1000137e:	f008 f84b 	bl	10009418 <__errno>
10001382:	4603      	mov	r3, r0
10001384:	2216      	movs	r2, #22
10001386:	601a      	str	r2, [r3, #0]
  return -1;
10001388:	f04f 33ff 	mov.w	r3, #4294967295
}
1000138c:	4618      	mov	r0, r3
1000138e:	3708      	adds	r7, #8
10001390:	46bd      	mov	sp, r7
10001392:	bd80      	pop	{r7, pc}

10001394 <_exit>:

void _exit (int status)
{
10001394:	b580      	push	{r7, lr}
10001396:	b082      	sub	sp, #8
10001398:	af00      	add	r7, sp, #0
1000139a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
1000139c:	f04f 31ff 	mov.w	r1, #4294967295
100013a0:	6878      	ldr	r0, [r7, #4]
100013a2:	f7ff ffe7 	bl	10001374 <_kill>
  while (1) {}    /* Make sure we hang here */
100013a6:	bf00      	nop
100013a8:	e7fd      	b.n	100013a6 <_exit+0x12>

100013aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100013aa:	b580      	push	{r7, lr}
100013ac:	b086      	sub	sp, #24
100013ae:	af00      	add	r7, sp, #0
100013b0:	60f8      	str	r0, [r7, #12]
100013b2:	60b9      	str	r1, [r7, #8]
100013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100013b6:	2300      	movs	r3, #0
100013b8:	617b      	str	r3, [r7, #20]
100013ba:	e00a      	b.n	100013d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
100013bc:	f3af 8000 	nop.w
100013c0:	4601      	mov	r1, r0
100013c2:	68bb      	ldr	r3, [r7, #8]
100013c4:	1c5a      	adds	r2, r3, #1
100013c6:	60ba      	str	r2, [r7, #8]
100013c8:	b2ca      	uxtb	r2, r1
100013ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100013cc:	697b      	ldr	r3, [r7, #20]
100013ce:	3301      	adds	r3, #1
100013d0:	617b      	str	r3, [r7, #20]
100013d2:	697a      	ldr	r2, [r7, #20]
100013d4:	687b      	ldr	r3, [r7, #4]
100013d6:	429a      	cmp	r2, r3
100013d8:	dbf0      	blt.n	100013bc <_read+0x12>
  }

  return len;
100013da:	687b      	ldr	r3, [r7, #4]
}
100013dc:	4618      	mov	r0, r3
100013de:	3718      	adds	r7, #24
100013e0:	46bd      	mov	sp, r7
100013e2:	bd80      	pop	{r7, pc}

100013e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100013e4:	b580      	push	{r7, lr}
100013e6:	b086      	sub	sp, #24
100013e8:	af00      	add	r7, sp, #0
100013ea:	60f8      	str	r0, [r7, #12]
100013ec:	60b9      	str	r1, [r7, #8]
100013ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100013f0:	2300      	movs	r3, #0
100013f2:	617b      	str	r3, [r7, #20]
100013f4:	e009      	b.n	1000140a <_write+0x26>
  {
    __io_putchar(*ptr++);
100013f6:	68bb      	ldr	r3, [r7, #8]
100013f8:	1c5a      	adds	r2, r3, #1
100013fa:	60ba      	str	r2, [r7, #8]
100013fc:	781b      	ldrb	r3, [r3, #0]
100013fe:	4618      	mov	r0, r3
10001400:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001404:	697b      	ldr	r3, [r7, #20]
10001406:	3301      	adds	r3, #1
10001408:	617b      	str	r3, [r7, #20]
1000140a:	697a      	ldr	r2, [r7, #20]
1000140c:	687b      	ldr	r3, [r7, #4]
1000140e:	429a      	cmp	r2, r3
10001410:	dbf1      	blt.n	100013f6 <_write+0x12>
  }
  return len;
10001412:	687b      	ldr	r3, [r7, #4]
}
10001414:	4618      	mov	r0, r3
10001416:	3718      	adds	r7, #24
10001418:	46bd      	mov	sp, r7
1000141a:	bd80      	pop	{r7, pc}

1000141c <_close>:

int _close(int file)
{
1000141c:	b480      	push	{r7}
1000141e:	b083      	sub	sp, #12
10001420:	af00      	add	r7, sp, #0
10001422:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10001424:	f04f 33ff 	mov.w	r3, #4294967295
}
10001428:	4618      	mov	r0, r3
1000142a:	370c      	adds	r7, #12
1000142c:	46bd      	mov	sp, r7
1000142e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001432:	4770      	bx	lr

10001434 <_fstat>:


int _fstat(int file, struct stat *st)
{
10001434:	b480      	push	{r7}
10001436:	b083      	sub	sp, #12
10001438:	af00      	add	r7, sp, #0
1000143a:	6078      	str	r0, [r7, #4]
1000143c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
1000143e:	683b      	ldr	r3, [r7, #0]
10001440:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
10001444:	605a      	str	r2, [r3, #4]
  return 0;
10001446:	2300      	movs	r3, #0
}
10001448:	4618      	mov	r0, r3
1000144a:	370c      	adds	r7, #12
1000144c:	46bd      	mov	sp, r7
1000144e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001452:	4770      	bx	lr

10001454 <_isatty>:

int _isatty(int file)
{
10001454:	b480      	push	{r7}
10001456:	b083      	sub	sp, #12
10001458:	af00      	add	r7, sp, #0
1000145a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
1000145c:	2301      	movs	r3, #1
}
1000145e:	4618      	mov	r0, r3
10001460:	370c      	adds	r7, #12
10001462:	46bd      	mov	sp, r7
10001464:	f85d 7b04 	ldr.w	r7, [sp], #4
10001468:	4770      	bx	lr

1000146a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
1000146a:	b480      	push	{r7}
1000146c:	b085      	sub	sp, #20
1000146e:	af00      	add	r7, sp, #0
10001470:	60f8      	str	r0, [r7, #12]
10001472:	60b9      	str	r1, [r7, #8]
10001474:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10001476:	2300      	movs	r3, #0
}
10001478:	4618      	mov	r0, r3
1000147a:	3714      	adds	r7, #20
1000147c:	46bd      	mov	sp, r7
1000147e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001482:	4770      	bx	lr

10001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10001484:	b580      	push	{r7, lr}
10001486:	b086      	sub	sp, #24
10001488:	af00      	add	r7, sp, #0
1000148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
1000148c:	4a14      	ldr	r2, [pc, #80]	@ (100014e0 <_sbrk+0x5c>)
1000148e:	4b15      	ldr	r3, [pc, #84]	@ (100014e4 <_sbrk+0x60>)
10001490:	1ad3      	subs	r3, r2, r3
10001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10001494:	697b      	ldr	r3, [r7, #20]
10001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10001498:	4b13      	ldr	r3, [pc, #76]	@ (100014e8 <_sbrk+0x64>)
1000149a:	681b      	ldr	r3, [r3, #0]
1000149c:	2b00      	cmp	r3, #0
1000149e:	d102      	bne.n	100014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100014a0:	4b11      	ldr	r3, [pc, #68]	@ (100014e8 <_sbrk+0x64>)
100014a2:	4a12      	ldr	r2, [pc, #72]	@ (100014ec <_sbrk+0x68>)
100014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100014a6:	4b10      	ldr	r3, [pc, #64]	@ (100014e8 <_sbrk+0x64>)
100014a8:	681a      	ldr	r2, [r3, #0]
100014aa:	687b      	ldr	r3, [r7, #4]
100014ac:	4413      	add	r3, r2
100014ae:	693a      	ldr	r2, [r7, #16]
100014b0:	429a      	cmp	r2, r3
100014b2:	d207      	bcs.n	100014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
100014b4:	f007 ffb0 	bl	10009418 <__errno>
100014b8:	4603      	mov	r3, r0
100014ba:	220c      	movs	r2, #12
100014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100014be:	f04f 33ff 	mov.w	r3, #4294967295
100014c2:	e009      	b.n	100014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100014c4:	4b08      	ldr	r3, [pc, #32]	@ (100014e8 <_sbrk+0x64>)
100014c6:	681b      	ldr	r3, [r3, #0]
100014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100014ca:	4b07      	ldr	r3, [pc, #28]	@ (100014e8 <_sbrk+0x64>)
100014cc:	681a      	ldr	r2, [r3, #0]
100014ce:	687b      	ldr	r3, [r7, #4]
100014d0:	4413      	add	r3, r2
100014d2:	4a05      	ldr	r2, [pc, #20]	@ (100014e8 <_sbrk+0x64>)
100014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
100014d6:	68fb      	ldr	r3, [r7, #12]
}
100014d8:	4618      	mov	r0, r3
100014da:	3718      	adds	r7, #24
100014dc:	46bd      	mov	sp, r7
100014de:	bd80      	pop	{r7, pc}
100014e0:	10040000 	.word	0x10040000
100014e4:	00000400 	.word	0x00000400
100014e8:	1002032c 	.word	0x1002032c
100014ec:	10020550 	.word	0x10020550

100014f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
100014f0:	e7fe      	b.n	100014f0 <ADC1_IRQHandler>
	...

100014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100014f4:	b580      	push	{r7, lr}
100014f6:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100014f8:	2003      	movs	r0, #3
100014fa:	f000 f95f 	bl	100017bc <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100014fe:	f001 ff04 	bl	1000330a <HAL_RCC_GetSystemCoreClockFreq>
10001502:	4603      	mov	r3, r0
10001504:	4a07      	ldr	r2, [pc, #28]	@ (10001524 <HAL_Init+0x30>)
10001506:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10001508:	2001      	movs	r0, #1
1000150a:	f000 f80d 	bl	10001528 <HAL_InitTick>
1000150e:	4603      	mov	r3, r0
10001510:	2b00      	cmp	r3, #0
10001512:	d001      	beq.n	10001518 <HAL_Init+0x24>
  {
    return HAL_ERROR;
10001514:	2301      	movs	r3, #1
10001516:	e002      	b.n	1000151e <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10001518:	f7ff fdf0 	bl	100010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
1000151c:	2300      	movs	r3, #0
}
1000151e:	4618      	mov	r0, r3
10001520:	bd80      	pop	{r7, pc}
10001522:	bf00      	nop
10001524:	10020000 	.word	0x10020000

10001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10001528:	b580      	push	{r7, lr}
1000152a:	b082      	sub	sp, #8
1000152c:	af00      	add	r7, sp, #0
1000152e:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10001530:	4b15      	ldr	r3, [pc, #84]	@ (10001588 <HAL_InitTick+0x60>)
10001532:	781b      	ldrb	r3, [r3, #0]
10001534:	2b00      	cmp	r3, #0
10001536:	d101      	bne.n	1000153c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10001538:	2301      	movs	r3, #1
1000153a:	e021      	b.n	10001580 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
1000153c:	4b13      	ldr	r3, [pc, #76]	@ (1000158c <HAL_InitTick+0x64>)
1000153e:	681a      	ldr	r2, [r3, #0]
10001540:	4b11      	ldr	r3, [pc, #68]	@ (10001588 <HAL_InitTick+0x60>)
10001542:	781b      	ldrb	r3, [r3, #0]
10001544:	4619      	mov	r1, r3
10001546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
1000154a:	fbb3 f3f1 	udiv	r3, r3, r1
1000154e:	fbb2 f3f3 	udiv	r3, r2, r3
10001552:	4618      	mov	r0, r3
10001554:	f000 f967 	bl	10001826 <HAL_SYSTICK_Config>
10001558:	4603      	mov	r3, r0
1000155a:	2b00      	cmp	r3, #0
1000155c:	d001      	beq.n	10001562 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
1000155e:	2301      	movs	r3, #1
10001560:	e00e      	b.n	10001580 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10001562:	687b      	ldr	r3, [r7, #4]
10001564:	2b0f      	cmp	r3, #15
10001566:	d80a      	bhi.n	1000157e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10001568:	2200      	movs	r2, #0
1000156a:	6879      	ldr	r1, [r7, #4]
1000156c:	f04f 30ff 	mov.w	r0, #4294967295
10001570:	f000 f92f 	bl	100017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10001574:	4a06      	ldr	r2, [pc, #24]	@ (10001590 <HAL_InitTick+0x68>)
10001576:	687b      	ldr	r3, [r7, #4]
10001578:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000157a:	2300      	movs	r3, #0
1000157c:	e000      	b.n	10001580 <HAL_InitTick+0x58>
    return HAL_ERROR;
1000157e:	2301      	movs	r3, #1
}
10001580:	4618      	mov	r0, r3
10001582:	3708      	adds	r7, #8
10001584:	46bd      	mov	sp, r7
10001586:	bd80      	pop	{r7, pc}
10001588:	10020010 	.word	0x10020010
1000158c:	10020000 	.word	0x10020000
10001590:	1002000c 	.word	0x1002000c

10001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10001594:	b480      	push	{r7}
10001596:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10001598:	4b06      	ldr	r3, [pc, #24]	@ (100015b4 <HAL_IncTick+0x20>)
1000159a:	781b      	ldrb	r3, [r3, #0]
1000159c:	461a      	mov	r2, r3
1000159e:	4b06      	ldr	r3, [pc, #24]	@ (100015b8 <HAL_IncTick+0x24>)
100015a0:	681b      	ldr	r3, [r3, #0]
100015a2:	4413      	add	r3, r2
100015a4:	4a04      	ldr	r2, [pc, #16]	@ (100015b8 <HAL_IncTick+0x24>)
100015a6:	6013      	str	r3, [r2, #0]
}
100015a8:	bf00      	nop
100015aa:	46bd      	mov	sp, r7
100015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
100015b0:	4770      	bx	lr
100015b2:	bf00      	nop
100015b4:	10020010 	.word	0x10020010
100015b8:	10020330 	.word	0x10020330

100015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100015bc:	b480      	push	{r7}
100015be:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
100015c0:	4b03      	ldr	r3, [pc, #12]	@ (100015d0 <HAL_GetTick+0x14>)
100015c2:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
100015c4:	4618      	mov	r0, r3
100015c6:	46bd      	mov	sp, r7
100015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
100015cc:	4770      	bx	lr
100015ce:	bf00      	nop
100015d0:	10020330 	.word	0x10020330

100015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100015d4:	b580      	push	{r7, lr}
100015d6:	b084      	sub	sp, #16
100015d8:	af00      	add	r7, sp, #0
100015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100015dc:	f7ff ffee 	bl	100015bc <HAL_GetTick>
100015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
100015e2:	687b      	ldr	r3, [r7, #4]
100015e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100015e6:	68fb      	ldr	r3, [r7, #12]
100015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
100015ec:	d005      	beq.n	100015fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100015ee:	4b0a      	ldr	r3, [pc, #40]	@ (10001618 <HAL_Delay+0x44>)
100015f0:	781b      	ldrb	r3, [r3, #0]
100015f2:	461a      	mov	r2, r3
100015f4:	68fb      	ldr	r3, [r7, #12]
100015f6:	4413      	add	r3, r2
100015f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
100015fa:	bf00      	nop
100015fc:	f7ff ffde 	bl	100015bc <HAL_GetTick>
10001600:	4602      	mov	r2, r0
10001602:	68bb      	ldr	r3, [r7, #8]
10001604:	1ad3      	subs	r3, r2, r3
10001606:	68fa      	ldr	r2, [r7, #12]
10001608:	429a      	cmp	r2, r3
1000160a:	d8f7      	bhi.n	100015fc <HAL_Delay+0x28>
  {
  }
}
1000160c:	bf00      	nop
1000160e:	bf00      	nop
10001610:	3710      	adds	r7, #16
10001612:	46bd      	mov	sp, r7
10001614:	bd80      	pop	{r7, pc}
10001616:	bf00      	nop
10001618:	10020010 	.word	0x10020010

1000161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000161c:	b480      	push	{r7}
1000161e:	b085      	sub	sp, #20
10001620:	af00      	add	r7, sp, #0
10001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10001624:	687b      	ldr	r3, [r7, #4]
10001626:	f003 0307 	and.w	r3, r3, #7
1000162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
1000162c:	4b0c      	ldr	r3, [pc, #48]	@ (10001660 <__NVIC_SetPriorityGrouping+0x44>)
1000162e:	68db      	ldr	r3, [r3, #12]
10001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10001632:	68ba      	ldr	r2, [r7, #8]
10001634:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10001638:	4013      	ands	r3, r2
1000163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
1000163c:	68fb      	ldr	r3, [r7, #12]
1000163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10001640:	68bb      	ldr	r3, [r7, #8]
10001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10001644:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10001648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
1000164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
1000164e:	4a04      	ldr	r2, [pc, #16]	@ (10001660 <__NVIC_SetPriorityGrouping+0x44>)
10001650:	68bb      	ldr	r3, [r7, #8]
10001652:	60d3      	str	r3, [r2, #12]
}
10001654:	bf00      	nop
10001656:	3714      	adds	r7, #20
10001658:	46bd      	mov	sp, r7
1000165a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000165e:	4770      	bx	lr
10001660:	e000ed00 	.word	0xe000ed00

10001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10001664:	b480      	push	{r7}
10001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10001668:	4b04      	ldr	r3, [pc, #16]	@ (1000167c <__NVIC_GetPriorityGrouping+0x18>)
1000166a:	68db      	ldr	r3, [r3, #12]
1000166c:	0a1b      	lsrs	r3, r3, #8
1000166e:	f003 0307 	and.w	r3, r3, #7
}
10001672:	4618      	mov	r0, r3
10001674:	46bd      	mov	sp, r7
10001676:	f85d 7b04 	ldr.w	r7, [sp], #4
1000167a:	4770      	bx	lr
1000167c:	e000ed00 	.word	0xe000ed00

10001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001680:	b480      	push	{r7}
10001682:	b083      	sub	sp, #12
10001684:	af00      	add	r7, sp, #0
10001686:	4603      	mov	r3, r0
10001688:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
1000168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000168e:	2b00      	cmp	r3, #0
10001690:	db0b      	blt.n	100016aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10001692:	88fb      	ldrh	r3, [r7, #6]
10001694:	f003 021f 	and.w	r2, r3, #31
10001698:	4907      	ldr	r1, [pc, #28]	@ (100016b8 <__NVIC_EnableIRQ+0x38>)
1000169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000169e:	095b      	lsrs	r3, r3, #5
100016a0:	2001      	movs	r0, #1
100016a2:	fa00 f202 	lsl.w	r2, r0, r2
100016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
100016aa:	bf00      	nop
100016ac:	370c      	adds	r7, #12
100016ae:	46bd      	mov	sp, r7
100016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100016b4:	4770      	bx	lr
100016b6:	bf00      	nop
100016b8:	e000e100 	.word	0xe000e100

100016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100016bc:	b480      	push	{r7}
100016be:	b083      	sub	sp, #12
100016c0:	af00      	add	r7, sp, #0
100016c2:	4603      	mov	r3, r0
100016c4:	6039      	str	r1, [r7, #0]
100016c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100016c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100016cc:	2b00      	cmp	r3, #0
100016ce:	db0a      	blt.n	100016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100016d0:	683b      	ldr	r3, [r7, #0]
100016d2:	b2da      	uxtb	r2, r3
100016d4:	490c      	ldr	r1, [pc, #48]	@ (10001708 <__NVIC_SetPriority+0x4c>)
100016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100016da:	0112      	lsls	r2, r2, #4
100016dc:	b2d2      	uxtb	r2, r2
100016de:	440b      	add	r3, r1
100016e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
100016e4:	e00a      	b.n	100016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100016e6:	683b      	ldr	r3, [r7, #0]
100016e8:	b2da      	uxtb	r2, r3
100016ea:	4908      	ldr	r1, [pc, #32]	@ (1000170c <__NVIC_SetPriority+0x50>)
100016ec:	88fb      	ldrh	r3, [r7, #6]
100016ee:	f003 030f 	and.w	r3, r3, #15
100016f2:	3b04      	subs	r3, #4
100016f4:	0112      	lsls	r2, r2, #4
100016f6:	b2d2      	uxtb	r2, r2
100016f8:	440b      	add	r3, r1
100016fa:	761a      	strb	r2, [r3, #24]
}
100016fc:	bf00      	nop
100016fe:	370c      	adds	r7, #12
10001700:	46bd      	mov	sp, r7
10001702:	f85d 7b04 	ldr.w	r7, [sp], #4
10001706:	4770      	bx	lr
10001708:	e000e100 	.word	0xe000e100
1000170c:	e000ed00 	.word	0xe000ed00

10001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001710:	b480      	push	{r7}
10001712:	b089      	sub	sp, #36	@ 0x24
10001714:	af00      	add	r7, sp, #0
10001716:	60f8      	str	r0, [r7, #12]
10001718:	60b9      	str	r1, [r7, #8]
1000171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
1000171c:	68fb      	ldr	r3, [r7, #12]
1000171e:	f003 0307 	and.w	r3, r3, #7
10001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10001724:	69fb      	ldr	r3, [r7, #28]
10001726:	f1c3 0307 	rsb	r3, r3, #7
1000172a:	2b04      	cmp	r3, #4
1000172c:	bf28      	it	cs
1000172e:	2304      	movcs	r3, #4
10001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10001732:	69fb      	ldr	r3, [r7, #28]
10001734:	3304      	adds	r3, #4
10001736:	2b06      	cmp	r3, #6
10001738:	d902      	bls.n	10001740 <NVIC_EncodePriority+0x30>
1000173a:	69fb      	ldr	r3, [r7, #28]
1000173c:	3b03      	subs	r3, #3
1000173e:	e000      	b.n	10001742 <NVIC_EncodePriority+0x32>
10001740:	2300      	movs	r3, #0
10001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001744:	f04f 32ff 	mov.w	r2, #4294967295
10001748:	69bb      	ldr	r3, [r7, #24]
1000174a:	fa02 f303 	lsl.w	r3, r2, r3
1000174e:	43da      	mvns	r2, r3
10001750:	68bb      	ldr	r3, [r7, #8]
10001752:	401a      	ands	r2, r3
10001754:	697b      	ldr	r3, [r7, #20]
10001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10001758:	f04f 31ff 	mov.w	r1, #4294967295
1000175c:	697b      	ldr	r3, [r7, #20]
1000175e:	fa01 f303 	lsl.w	r3, r1, r3
10001762:	43d9      	mvns	r1, r3
10001764:	687b      	ldr	r3, [r7, #4]
10001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001768:	4313      	orrs	r3, r2
         );
}
1000176a:	4618      	mov	r0, r3
1000176c:	3724      	adds	r7, #36	@ 0x24
1000176e:	46bd      	mov	sp, r7
10001770:	f85d 7b04 	ldr.w	r7, [sp], #4
10001774:	4770      	bx	lr
	...

10001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10001778:	b580      	push	{r7, lr}
1000177a:	b082      	sub	sp, #8
1000177c:	af00      	add	r7, sp, #0
1000177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10001780:	687b      	ldr	r3, [r7, #4]
10001782:	3b01      	subs	r3, #1
10001784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10001788:	d301      	bcc.n	1000178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
1000178a:	2301      	movs	r3, #1
1000178c:	e00f      	b.n	100017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1000178e:	4a0a      	ldr	r2, [pc, #40]	@ (100017b8 <SysTick_Config+0x40>)
10001790:	687b      	ldr	r3, [r7, #4]
10001792:	3b01      	subs	r3, #1
10001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10001796:	210f      	movs	r1, #15
10001798:	f04f 30ff 	mov.w	r0, #4294967295
1000179c:	f7ff ff8e 	bl	100016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100017a0:	4b05      	ldr	r3, [pc, #20]	@ (100017b8 <SysTick_Config+0x40>)
100017a2:	2200      	movs	r2, #0
100017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100017a6:	4b04      	ldr	r3, [pc, #16]	@ (100017b8 <SysTick_Config+0x40>)
100017a8:	2207      	movs	r2, #7
100017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100017ac:	2300      	movs	r3, #0
}
100017ae:	4618      	mov	r0, r3
100017b0:	3708      	adds	r7, #8
100017b2:	46bd      	mov	sp, r7
100017b4:	bd80      	pop	{r7, pc}
100017b6:	bf00      	nop
100017b8:	e000e010 	.word	0xe000e010

100017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100017bc:	b580      	push	{r7, lr}
100017be:	b082      	sub	sp, #8
100017c0:	af00      	add	r7, sp, #0
100017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
100017c4:	6878      	ldr	r0, [r7, #4]
100017c6:	f7ff ff29 	bl	1000161c <__NVIC_SetPriorityGrouping>
}
100017ca:	bf00      	nop
100017cc:	3708      	adds	r7, #8
100017ce:	46bd      	mov	sp, r7
100017d0:	bd80      	pop	{r7, pc}

100017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100017d2:	b580      	push	{r7, lr}
100017d4:	b086      	sub	sp, #24
100017d6:	af00      	add	r7, sp, #0
100017d8:	4603      	mov	r3, r0
100017da:	60b9      	str	r1, [r7, #8]
100017dc:	607a      	str	r2, [r7, #4]
100017de:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
100017e0:	2300      	movs	r3, #0
100017e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
100017e4:	f7ff ff3e 	bl	10001664 <__NVIC_GetPriorityGrouping>
100017e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
100017ea:	687a      	ldr	r2, [r7, #4]
100017ec:	68b9      	ldr	r1, [r7, #8]
100017ee:	6978      	ldr	r0, [r7, #20]
100017f0:	f7ff ff8e 	bl	10001710 <NVIC_EncodePriority>
100017f4:	4602      	mov	r2, r0
100017f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
100017fa:	4611      	mov	r1, r2
100017fc:	4618      	mov	r0, r3
100017fe:	f7ff ff5d 	bl	100016bc <__NVIC_SetPriority>
}
10001802:	bf00      	nop
10001804:	3718      	adds	r7, #24
10001806:	46bd      	mov	sp, r7
10001808:	bd80      	pop	{r7, pc}

1000180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000180a:	b580      	push	{r7, lr}
1000180c:	b082      	sub	sp, #8
1000180e:	af00      	add	r7, sp, #0
10001810:	4603      	mov	r3, r0
10001812:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10001814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001818:	4618      	mov	r0, r3
1000181a:	f7ff ff31 	bl	10001680 <__NVIC_EnableIRQ>
}
1000181e:	bf00      	nop
10001820:	3708      	adds	r7, #8
10001822:	46bd      	mov	sp, r7
10001824:	bd80      	pop	{r7, pc}

10001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10001826:	b580      	push	{r7, lr}
10001828:	b082      	sub	sp, #8
1000182a:	af00      	add	r7, sp, #0
1000182c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
1000182e:	6878      	ldr	r0, [r7, #4]
10001830:	f7ff ffa2 	bl	10001778 <SysTick_Config>
10001834:	4603      	mov	r3, r0
}
10001836:	4618      	mov	r0, r3
10001838:	3708      	adds	r7, #8
1000183a:	46bd      	mov	sp, r7
1000183c:	bd80      	pop	{r7, pc}
	...

10001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10001840:	b480      	push	{r7}
10001842:	b089      	sub	sp, #36	@ 0x24
10001844:	af00      	add	r7, sp, #0
10001846:	6078      	str	r0, [r7, #4]
10001848:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
1000184a:	4b8a      	ldr	r3, [pc, #552]	@ (10001a74 <HAL_GPIO_Init+0x234>)
1000184c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
1000184e:	2300      	movs	r3, #0
10001850:	61fb      	str	r3, [r7, #28]
10001852:	e191      	b.n	10001b78 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10001854:	2201      	movs	r2, #1
10001856:	69fb      	ldr	r3, [r7, #28]
10001858:	fa02 f303 	lsl.w	r3, r2, r3
1000185c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
1000185e:	683b      	ldr	r3, [r7, #0]
10001860:	681b      	ldr	r3, [r3, #0]
10001862:	693a      	ldr	r2, [r7, #16]
10001864:	4013      	ands	r3, r2
10001866:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10001868:	68fa      	ldr	r2, [r7, #12]
1000186a:	693b      	ldr	r3, [r7, #16]
1000186c:	429a      	cmp	r2, r3
1000186e:	f040 8180 	bne.w	10001b72 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001872:	683b      	ldr	r3, [r7, #0]
10001874:	685b      	ldr	r3, [r3, #4]
10001876:	2b02      	cmp	r3, #2
10001878:	d003      	beq.n	10001882 <HAL_GPIO_Init+0x42>
1000187a:	683b      	ldr	r3, [r7, #0]
1000187c:	685b      	ldr	r3, [r3, #4]
1000187e:	2b12      	cmp	r3, #18
10001880:	d123      	bne.n	100018ca <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10001882:	69fb      	ldr	r3, [r7, #28]
10001884:	08da      	lsrs	r2, r3, #3
10001886:	687b      	ldr	r3, [r7, #4]
10001888:	3208      	adds	r2, #8
1000188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1000188e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10001890:	69fb      	ldr	r3, [r7, #28]
10001892:	f003 0307 	and.w	r3, r3, #7
10001896:	009b      	lsls	r3, r3, #2
10001898:	220f      	movs	r2, #15
1000189a:	fa02 f303 	lsl.w	r3, r2, r3
1000189e:	43db      	mvns	r3, r3
100018a0:	69ba      	ldr	r2, [r7, #24]
100018a2:	4013      	ands	r3, r2
100018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
100018a6:	683b      	ldr	r3, [r7, #0]
100018a8:	691a      	ldr	r2, [r3, #16]
100018aa:	69fb      	ldr	r3, [r7, #28]
100018ac:	f003 0307 	and.w	r3, r3, #7
100018b0:	009b      	lsls	r3, r3, #2
100018b2:	fa02 f303 	lsl.w	r3, r2, r3
100018b6:	69ba      	ldr	r2, [r7, #24]
100018b8:	4313      	orrs	r3, r2
100018ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
100018bc:	69fb      	ldr	r3, [r7, #28]
100018be:	08da      	lsrs	r2, r3, #3
100018c0:	687b      	ldr	r3, [r7, #4]
100018c2:	3208      	adds	r2, #8
100018c4:	69b9      	ldr	r1, [r7, #24]
100018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100018ca:	687b      	ldr	r3, [r7, #4]
100018cc:	681b      	ldr	r3, [r3, #0]
100018ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100018d0:	69fb      	ldr	r3, [r7, #28]
100018d2:	005b      	lsls	r3, r3, #1
100018d4:	2203      	movs	r2, #3
100018d6:	fa02 f303 	lsl.w	r3, r2, r3
100018da:	43db      	mvns	r3, r3
100018dc:	69ba      	ldr	r2, [r7, #24]
100018de:	4013      	ands	r3, r2
100018e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
100018e2:	683b      	ldr	r3, [r7, #0]
100018e4:	685b      	ldr	r3, [r3, #4]
100018e6:	f003 0203 	and.w	r2, r3, #3
100018ea:	69fb      	ldr	r3, [r7, #28]
100018ec:	005b      	lsls	r3, r3, #1
100018ee:	fa02 f303 	lsl.w	r3, r2, r3
100018f2:	69ba      	ldr	r2, [r7, #24]
100018f4:	4313      	orrs	r3, r2
100018f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
100018f8:	687b      	ldr	r3, [r7, #4]
100018fa:	69ba      	ldr	r2, [r7, #24]
100018fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100018fe:	683b      	ldr	r3, [r7, #0]
10001900:	685b      	ldr	r3, [r3, #4]
10001902:	2b01      	cmp	r3, #1
10001904:	d00b      	beq.n	1000191e <HAL_GPIO_Init+0xde>
10001906:	683b      	ldr	r3, [r7, #0]
10001908:	685b      	ldr	r3, [r3, #4]
1000190a:	2b02      	cmp	r3, #2
1000190c:	d007      	beq.n	1000191e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000190e:	683b      	ldr	r3, [r7, #0]
10001910:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001912:	2b11      	cmp	r3, #17
10001914:	d003      	beq.n	1000191e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001916:	683b      	ldr	r3, [r7, #0]
10001918:	685b      	ldr	r3, [r3, #4]
1000191a:	2b12      	cmp	r3, #18
1000191c:	d130      	bne.n	10001980 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1000191e:	687b      	ldr	r3, [r7, #4]
10001920:	689b      	ldr	r3, [r3, #8]
10001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10001924:	69fb      	ldr	r3, [r7, #28]
10001926:	005b      	lsls	r3, r3, #1
10001928:	2203      	movs	r2, #3
1000192a:	fa02 f303 	lsl.w	r3, r2, r3
1000192e:	43db      	mvns	r3, r3
10001930:	69ba      	ldr	r2, [r7, #24]
10001932:	4013      	ands	r3, r2
10001934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10001936:	683b      	ldr	r3, [r7, #0]
10001938:	68da      	ldr	r2, [r3, #12]
1000193a:	69fb      	ldr	r3, [r7, #28]
1000193c:	005b      	lsls	r3, r3, #1
1000193e:	fa02 f303 	lsl.w	r3, r2, r3
10001942:	69ba      	ldr	r2, [r7, #24]
10001944:	4313      	orrs	r3, r2
10001946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10001948:	687b      	ldr	r3, [r7, #4]
1000194a:	69ba      	ldr	r2, [r7, #24]
1000194c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1000194e:	687b      	ldr	r3, [r7, #4]
10001950:	685b      	ldr	r3, [r3, #4]
10001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10001954:	2201      	movs	r2, #1
10001956:	69fb      	ldr	r3, [r7, #28]
10001958:	fa02 f303 	lsl.w	r3, r2, r3
1000195c:	43db      	mvns	r3, r3
1000195e:	69ba      	ldr	r2, [r7, #24]
10001960:	4013      	ands	r3, r2
10001962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10001964:	683b      	ldr	r3, [r7, #0]
10001966:	685b      	ldr	r3, [r3, #4]
10001968:	091b      	lsrs	r3, r3, #4
1000196a:	f003 0201 	and.w	r2, r3, #1
1000196e:	69fb      	ldr	r3, [r7, #28]
10001970:	fa02 f303 	lsl.w	r3, r2, r3
10001974:	69ba      	ldr	r2, [r7, #24]
10001976:	4313      	orrs	r3, r2
10001978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
1000197a:	687b      	ldr	r3, [r7, #4]
1000197c:	69ba      	ldr	r2, [r7, #24]
1000197e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10001980:	687b      	ldr	r3, [r7, #4]
10001982:	68db      	ldr	r3, [r3, #12]
10001984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10001986:	69fb      	ldr	r3, [r7, #28]
10001988:	005b      	lsls	r3, r3, #1
1000198a:	2203      	movs	r2, #3
1000198c:	fa02 f303 	lsl.w	r3, r2, r3
10001990:	43db      	mvns	r3, r3
10001992:	69ba      	ldr	r2, [r7, #24]
10001994:	4013      	ands	r3, r2
10001996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10001998:	683b      	ldr	r3, [r7, #0]
1000199a:	689a      	ldr	r2, [r3, #8]
1000199c:	69fb      	ldr	r3, [r7, #28]
1000199e:	005b      	lsls	r3, r3, #1
100019a0:	fa02 f303 	lsl.w	r3, r2, r3
100019a4:	69ba      	ldr	r2, [r7, #24]
100019a6:	4313      	orrs	r3, r2
100019a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
100019aa:	687b      	ldr	r3, [r7, #4]
100019ac:	69ba      	ldr	r2, [r7, #24]
100019ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
100019b0:	683b      	ldr	r3, [r7, #0]
100019b2:	685b      	ldr	r3, [r3, #4]
100019b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
100019b8:	2b00      	cmp	r3, #0
100019ba:	f000 80da 	beq.w	10001b72 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
100019be:	4a2e      	ldr	r2, [pc, #184]	@ (10001a78 <HAL_GPIO_Init+0x238>)
100019c0:	69fb      	ldr	r3, [r7, #28]
100019c2:	089b      	lsrs	r3, r3, #2
100019c4:	3318      	adds	r3, #24
100019c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
100019cc:	69fb      	ldr	r3, [r7, #28]
100019ce:	f003 0303 	and.w	r3, r3, #3
100019d2:	00db      	lsls	r3, r3, #3
100019d4:	22ff      	movs	r2, #255	@ 0xff
100019d6:	fa02 f303 	lsl.w	r3, r2, r3
100019da:	43db      	mvns	r3, r3
100019dc:	69ba      	ldr	r2, [r7, #24]
100019de:	4013      	ands	r3, r2
100019e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
100019e2:	687b      	ldr	r3, [r7, #4]
100019e4:	4a25      	ldr	r2, [pc, #148]	@ (10001a7c <HAL_GPIO_Init+0x23c>)
100019e6:	4293      	cmp	r3, r2
100019e8:	d05e      	beq.n	10001aa8 <HAL_GPIO_Init+0x268>
100019ea:	687b      	ldr	r3, [r7, #4]
100019ec:	4a24      	ldr	r2, [pc, #144]	@ (10001a80 <HAL_GPIO_Init+0x240>)
100019ee:	4293      	cmp	r3, r2
100019f0:	d03d      	beq.n	10001a6e <HAL_GPIO_Init+0x22e>
100019f2:	687b      	ldr	r3, [r7, #4]
100019f4:	4a23      	ldr	r2, [pc, #140]	@ (10001a84 <HAL_GPIO_Init+0x244>)
100019f6:	4293      	cmp	r3, r2
100019f8:	d037      	beq.n	10001a6a <HAL_GPIO_Init+0x22a>
100019fa:	687b      	ldr	r3, [r7, #4]
100019fc:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
10001a00:	d031      	beq.n	10001a66 <HAL_GPIO_Init+0x226>
10001a02:	687b      	ldr	r3, [r7, #4]
10001a04:	4a20      	ldr	r2, [pc, #128]	@ (10001a88 <HAL_GPIO_Init+0x248>)
10001a06:	4293      	cmp	r3, r2
10001a08:	d02b      	beq.n	10001a62 <HAL_GPIO_Init+0x222>
10001a0a:	687b      	ldr	r3, [r7, #4]
10001a0c:	4a1f      	ldr	r2, [pc, #124]	@ (10001a8c <HAL_GPIO_Init+0x24c>)
10001a0e:	4293      	cmp	r3, r2
10001a10:	d025      	beq.n	10001a5e <HAL_GPIO_Init+0x21e>
10001a12:	687b      	ldr	r3, [r7, #4]
10001a14:	4a1e      	ldr	r2, [pc, #120]	@ (10001a90 <HAL_GPIO_Init+0x250>)
10001a16:	4293      	cmp	r3, r2
10001a18:	d01f      	beq.n	10001a5a <HAL_GPIO_Init+0x21a>
10001a1a:	687b      	ldr	r3, [r7, #4]
10001a1c:	4a1d      	ldr	r2, [pc, #116]	@ (10001a94 <HAL_GPIO_Init+0x254>)
10001a1e:	4293      	cmp	r3, r2
10001a20:	d019      	beq.n	10001a56 <HAL_GPIO_Init+0x216>
10001a22:	687b      	ldr	r3, [r7, #4]
10001a24:	4a1c      	ldr	r2, [pc, #112]	@ (10001a98 <HAL_GPIO_Init+0x258>)
10001a26:	4293      	cmp	r3, r2
10001a28:	d013      	beq.n	10001a52 <HAL_GPIO_Init+0x212>
10001a2a:	687b      	ldr	r3, [r7, #4]
10001a2c:	4a1b      	ldr	r2, [pc, #108]	@ (10001a9c <HAL_GPIO_Init+0x25c>)
10001a2e:	4293      	cmp	r3, r2
10001a30:	d00d      	beq.n	10001a4e <HAL_GPIO_Init+0x20e>
10001a32:	687b      	ldr	r3, [r7, #4]
10001a34:	4a1a      	ldr	r2, [pc, #104]	@ (10001aa0 <HAL_GPIO_Init+0x260>)
10001a36:	4293      	cmp	r3, r2
10001a38:	d007      	beq.n	10001a4a <HAL_GPIO_Init+0x20a>
10001a3a:	687b      	ldr	r3, [r7, #4]
10001a3c:	4a19      	ldr	r2, [pc, #100]	@ (10001aa4 <HAL_GPIO_Init+0x264>)
10001a3e:	4293      	cmp	r3, r2
10001a40:	d101      	bne.n	10001a46 <HAL_GPIO_Init+0x206>
10001a42:	230b      	movs	r3, #11
10001a44:	e031      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a46:	2319      	movs	r3, #25
10001a48:	e02f      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a4a:	230a      	movs	r3, #10
10001a4c:	e02d      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a4e:	2309      	movs	r3, #9
10001a50:	e02b      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a52:	2308      	movs	r3, #8
10001a54:	e029      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a56:	2307      	movs	r3, #7
10001a58:	e027      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a5a:	2306      	movs	r3, #6
10001a5c:	e025      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a5e:	2305      	movs	r3, #5
10001a60:	e023      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a62:	2304      	movs	r3, #4
10001a64:	e021      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a66:	2303      	movs	r3, #3
10001a68:	e01f      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a6a:	2302      	movs	r3, #2
10001a6c:	e01d      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a6e:	2301      	movs	r3, #1
10001a70:	e01b      	b.n	10001aaa <HAL_GPIO_Init+0x26a>
10001a72:	bf00      	nop
10001a74:	5000d0c0 	.word	0x5000d0c0
10001a78:	5000d000 	.word	0x5000d000
10001a7c:	50002000 	.word	0x50002000
10001a80:	50003000 	.word	0x50003000
10001a84:	50004000 	.word	0x50004000
10001a88:	50006000 	.word	0x50006000
10001a8c:	50007000 	.word	0x50007000
10001a90:	50008000 	.word	0x50008000
10001a94:	50009000 	.word	0x50009000
10001a98:	5000a000 	.word	0x5000a000
10001a9c:	5000b000 	.word	0x5000b000
10001aa0:	5000c000 	.word	0x5000c000
10001aa4:	54004000 	.word	0x54004000
10001aa8:	2300      	movs	r3, #0
10001aaa:	69fa      	ldr	r2, [r7, #28]
10001aac:	f002 0203 	and.w	r2, r2, #3
10001ab0:	00d2      	lsls	r2, r2, #3
10001ab2:	4093      	lsls	r3, r2
10001ab4:	461a      	mov	r2, r3
10001ab6:	69bb      	ldr	r3, [r7, #24]
10001ab8:	4313      	orrs	r3, r2
10001aba:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10001abc:	4934      	ldr	r1, [pc, #208]	@ (10001b90 <HAL_GPIO_Init+0x350>)
10001abe:	69fb      	ldr	r3, [r7, #28]
10001ac0:	089b      	lsrs	r3, r3, #2
10001ac2:	3318      	adds	r3, #24
10001ac4:	69ba      	ldr	r2, [r7, #24]
10001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10001aca:	697b      	ldr	r3, [r7, #20]
10001acc:	681b      	ldr	r3, [r3, #0]
10001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001ad0:	68fb      	ldr	r3, [r7, #12]
10001ad2:	43db      	mvns	r3, r3
10001ad4:	69ba      	ldr	r2, [r7, #24]
10001ad6:	4013      	ands	r3, r2
10001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10001ada:	683b      	ldr	r3, [r7, #0]
10001adc:	685b      	ldr	r3, [r3, #4]
10001ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
10001ae2:	2b00      	cmp	r3, #0
10001ae4:	d003      	beq.n	10001aee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10001ae6:	69ba      	ldr	r2, [r7, #24]
10001ae8:	68fb      	ldr	r3, [r7, #12]
10001aea:	4313      	orrs	r3, r2
10001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10001aee:	697b      	ldr	r3, [r7, #20]
10001af0:	69ba      	ldr	r2, [r7, #24]
10001af2:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10001af4:	697b      	ldr	r3, [r7, #20]
10001af6:	685b      	ldr	r3, [r3, #4]
10001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001afa:	68fb      	ldr	r3, [r7, #12]
10001afc:	43db      	mvns	r3, r3
10001afe:	69ba      	ldr	r2, [r7, #24]
10001b00:	4013      	ands	r3, r2
10001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10001b04:	683b      	ldr	r3, [r7, #0]
10001b06:	685b      	ldr	r3, [r3, #4]
10001b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
10001b0c:	2b00      	cmp	r3, #0
10001b0e:	d003      	beq.n	10001b18 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10001b10:	69ba      	ldr	r2, [r7, #24]
10001b12:	68fb      	ldr	r3, [r7, #12]
10001b14:	4313      	orrs	r3, r2
10001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10001b18:	697b      	ldr	r3, [r7, #20]
10001b1a:	69ba      	ldr	r2, [r7, #24]
10001b1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (10001b90 <HAL_GPIO_Init+0x350>)
10001b20:	681b      	ldr	r3, [r3, #0]
10001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001b24:	68fb      	ldr	r3, [r7, #12]
10001b26:	43db      	mvns	r3, r3
10001b28:	69ba      	ldr	r2, [r7, #24]
10001b2a:	4013      	ands	r3, r2
10001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10001b2e:	683b      	ldr	r3, [r7, #0]
10001b30:	685b      	ldr	r3, [r3, #4]
10001b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
10001b36:	2b00      	cmp	r3, #0
10001b38:	d003      	beq.n	10001b42 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10001b3a:	69ba      	ldr	r2, [r7, #24]
10001b3c:	68fb      	ldr	r3, [r7, #12]
10001b3e:	4313      	orrs	r3, r2
10001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10001b42:	4a13      	ldr	r2, [pc, #76]	@ (10001b90 <HAL_GPIO_Init+0x350>)
10001b44:	69bb      	ldr	r3, [r7, #24]
10001b46:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10001b48:	4b11      	ldr	r3, [pc, #68]	@ (10001b90 <HAL_GPIO_Init+0x350>)
10001b4a:	685b      	ldr	r3, [r3, #4]
10001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001b4e:	68fb      	ldr	r3, [r7, #12]
10001b50:	43db      	mvns	r3, r3
10001b52:	69ba      	ldr	r2, [r7, #24]
10001b54:	4013      	ands	r3, r2
10001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10001b58:	683b      	ldr	r3, [r7, #0]
10001b5a:	685b      	ldr	r3, [r3, #4]
10001b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
10001b60:	2b00      	cmp	r3, #0
10001b62:	d003      	beq.n	10001b6c <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10001b64:	69ba      	ldr	r2, [r7, #24]
10001b66:	68fb      	ldr	r3, [r7, #12]
10001b68:	4313      	orrs	r3, r2
10001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10001b6c:	4a08      	ldr	r2, [pc, #32]	@ (10001b90 <HAL_GPIO_Init+0x350>)
10001b6e:	69bb      	ldr	r3, [r7, #24]
10001b70:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10001b72:	69fb      	ldr	r3, [r7, #28]
10001b74:	3301      	adds	r3, #1
10001b76:	61fb      	str	r3, [r7, #28]
10001b78:	69fb      	ldr	r3, [r7, #28]
10001b7a:	2b0f      	cmp	r3, #15
10001b7c:	f67f ae6a 	bls.w	10001854 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10001b80:	bf00      	nop
10001b82:	bf00      	nop
10001b84:	3724      	adds	r7, #36	@ 0x24
10001b86:	46bd      	mov	sp, r7
10001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b8c:	4770      	bx	lr
10001b8e:	bf00      	nop
10001b90:	5000d000 	.word	0x5000d000

10001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10001b94:	b480      	push	{r7}
10001b96:	b083      	sub	sp, #12
10001b98:	af00      	add	r7, sp, #0
10001b9a:	6078      	str	r0, [r7, #4]
10001b9c:	460b      	mov	r3, r1
10001b9e:	807b      	strh	r3, [r7, #2]
10001ba0:	4613      	mov	r3, r2
10001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10001ba4:	787b      	ldrb	r3, [r7, #1]
10001ba6:	2b00      	cmp	r3, #0
10001ba8:	d003      	beq.n	10001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10001baa:	887a      	ldrh	r2, [r7, #2]
10001bac:	687b      	ldr	r3, [r7, #4]
10001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10001bb0:	e003      	b.n	10001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10001bb2:	887b      	ldrh	r3, [r7, #2]
10001bb4:	041a      	lsls	r2, r3, #16
10001bb6:	687b      	ldr	r3, [r7, #4]
10001bb8:	619a      	str	r2, [r3, #24]
}
10001bba:	bf00      	nop
10001bbc:	370c      	adds	r7, #12
10001bbe:	46bd      	mov	sp, r7
10001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bc4:	4770      	bx	lr
	...

10001bc8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10001bc8:	b580      	push	{r7, lr}
10001bca:	b084      	sub	sp, #16
10001bcc:	af00      	add	r7, sp, #0
10001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10001bd0:	2300      	movs	r3, #0
10001bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10001bd4:	687b      	ldr	r3, [r7, #4]
10001bd6:	2b00      	cmp	r3, #0
10001bd8:	d01e      	beq.n	10001c18 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001bda:	4b13      	ldr	r3, [pc, #76]	@ (10001c28 <HAL_IPCC_Init+0x60>)
10001bdc:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10001bde:	687b      	ldr	r3, [r7, #4]
10001be0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10001be4:	b2db      	uxtb	r3, r3
10001be6:	2b00      	cmp	r3, #0
10001be8:	d102      	bne.n	10001bf0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10001bea:	6878      	ldr	r0, [r7, #4]
10001bec:	f7ff fabc 	bl	10001168 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10001bf0:	68b8      	ldr	r0, [r7, #8]
10001bf2:	f000 f9eb 	bl	10001fcc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10001bf6:	68bb      	ldr	r3, [r7, #8]
10001bf8:	681b      	ldr	r3, [r3, #0]
10001bfa:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
10001bfe:	68bb      	ldr	r3, [r7, #8]
10001c00:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
10001c02:	6878      	ldr	r0, [r7, #4]
10001c04:	f000 f9bc 	bl	10001f80 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10001c08:	687b      	ldr	r3, [r7, #4]
10001c0a:	2200      	movs	r2, #0
10001c0c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10001c0e:	687b      	ldr	r3, [r7, #4]
10001c10:	2201      	movs	r2, #1
10001c12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
10001c16:	e001      	b.n	10001c1c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10001c18:	2301      	movs	r3, #1
10001c1a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
10001c1e:	4618      	mov	r0, r3
10001c20:	3710      	adds	r7, #16
10001c22:	46bd      	mov	sp, r7
10001c24:	bd80      	pop	{r7, pc}
10001c26:	bf00      	nop
10001c28:	4c001010 	.word	0x4c001010

10001c2c <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10001c2c:	b580      	push	{r7, lr}
10001c2e:	b086      	sub	sp, #24
10001c30:	af00      	add	r7, sp, #0
10001c32:	60f8      	str	r0, [r7, #12]
10001c34:	60b9      	str	r1, [r7, #8]
10001c36:	603b      	str	r3, [r7, #0]
10001c38:	4613      	mov	r3, r2
10001c3a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10001c3c:	2300      	movs	r3, #0
10001c3e:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10001c40:	68fb      	ldr	r3, [r7, #12]
10001c42:	2b00      	cmp	r3, #0
10001c44:	d039      	beq.n	10001cba <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10001c46:	68fb      	ldr	r3, [r7, #12]
10001c48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10001c4c:	b2db      	uxtb	r3, r3
10001c4e:	2b01      	cmp	r3, #1
10001c50:	d130      	bne.n	10001cb4 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001c52:	79fb      	ldrb	r3, [r7, #7]
10001c54:	2b00      	cmp	r3, #0
10001c56:	d113      	bne.n	10001c80 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10001c58:	68fa      	ldr	r2, [r7, #12]
10001c5a:	68bb      	ldr	r3, [r7, #8]
10001c5c:	3306      	adds	r3, #6
10001c5e:	009b      	lsls	r3, r3, #2
10001c60:	4413      	add	r3, r2
10001c62:	683a      	ldr	r2, [r7, #0]
10001c64:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001c66:	68fb      	ldr	r3, [r7, #12]
10001c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10001c6a:	68bb      	ldr	r3, [r7, #8]
10001c6c:	f003 030f 	and.w	r3, r3, #15
10001c70:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10001c74:	fa01 f303 	lsl.w	r3, r1, r3
10001c78:	431a      	orrs	r2, r3
10001c7a:	68fb      	ldr	r3, [r7, #12]
10001c7c:	635a      	str	r2, [r3, #52]	@ 0x34
10001c7e:	e010      	b.n	10001ca2 <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10001c80:	68fa      	ldr	r2, [r7, #12]
10001c82:	68bb      	ldr	r3, [r7, #8]
10001c84:	009b      	lsls	r3, r3, #2
10001c86:	4413      	add	r3, r2
10001c88:	683a      	ldr	r2, [r7, #0]
10001c8a:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001c8c:	68fb      	ldr	r3, [r7, #12]
10001c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10001c90:	68bb      	ldr	r3, [r7, #8]
10001c92:	f003 030f 	and.w	r3, r3, #15
10001c96:	2101      	movs	r1, #1
10001c98:	fa01 f303 	lsl.w	r3, r1, r3
10001c9c:	431a      	orrs	r2, r3
10001c9e:	68fb      	ldr	r3, [r7, #12]
10001ca0:	635a      	str	r2, [r3, #52]	@ 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
10001ca2:	79fb      	ldrb	r3, [r7, #7]
10001ca4:	2b01      	cmp	r3, #1
10001ca6:	d10a      	bne.n	10001cbe <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10001ca8:	79fb      	ldrb	r3, [r7, #7]
10001caa:	4619      	mov	r1, r3
10001cac:	68b8      	ldr	r0, [r7, #8]
10001cae:	f000 f939 	bl	10001f24 <IPCC_UnmaskInterrupt>
10001cb2:	e004      	b.n	10001cbe <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10001cb4:	2301      	movs	r3, #1
10001cb6:	75fb      	strb	r3, [r7, #23]
10001cb8:	e001      	b.n	10001cbe <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10001cba:	2301      	movs	r3, #1
10001cbc:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10001cbe:	7dfb      	ldrb	r3, [r7, #23]
}
10001cc0:	4618      	mov	r0, r3
10001cc2:	3718      	adds	r7, #24
10001cc4:	46bd      	mov	sp, r7
10001cc6:	bd80      	pop	{r7, pc}

10001cc8 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001cc8:	b480      	push	{r7}
10001cca:	b089      	sub	sp, #36	@ 0x24
10001ccc:	af00      	add	r7, sp, #0
10001cce:	60f8      	str	r0, [r7, #12]
10001cd0:	60b9      	str	r1, [r7, #8]
10001cd2:	4613      	mov	r3, r2
10001cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001cd6:	4b14      	ldr	r3, [pc, #80]	@ (10001d28 <HAL_IPCC_GetChannelStatus+0x60>)
10001cd8:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10001cda:	4b14      	ldr	r3, [pc, #80]	@ (10001d2c <HAL_IPCC_GetChannelStatus+0x64>)
10001cdc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001cde:	79fb      	ldrb	r3, [r7, #7]
10001ce0:	2b00      	cmp	r3, #0
10001ce2:	d10a      	bne.n	10001cfa <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001ce4:	69bb      	ldr	r3, [r7, #24]
10001ce6:	68da      	ldr	r2, [r3, #12]
10001ce8:	68bb      	ldr	r3, [r7, #8]
10001cea:	f003 030f 	and.w	r3, r3, #15
10001cee:	2101      	movs	r1, #1
10001cf0:	fa01 f303 	lsl.w	r3, r1, r3
10001cf4:	4013      	ands	r3, r2
10001cf6:	61fb      	str	r3, [r7, #28]
10001cf8:	e009      	b.n	10001d0e <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001cfa:	697b      	ldr	r3, [r7, #20]
10001cfc:	68da      	ldr	r2, [r3, #12]
10001cfe:	68bb      	ldr	r3, [r7, #8]
10001d00:	f003 030f 	and.w	r3, r3, #15
10001d04:	2101      	movs	r1, #1
10001d06:	fa01 f303 	lsl.w	r3, r1, r3
10001d0a:	4013      	ands	r3, r2
10001d0c:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10001d0e:	69fb      	ldr	r3, [r7, #28]
10001d10:	2b00      	cmp	r3, #0
10001d12:	bf14      	ite	ne
10001d14:	2301      	movne	r3, #1
10001d16:	2300      	moveq	r3, #0
10001d18:	b2db      	uxtb	r3, r3
}
10001d1a:	4618      	mov	r0, r3
10001d1c:	3724      	adds	r7, #36	@ 0x24
10001d1e:	46bd      	mov	sp, r7
10001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d24:	4770      	bx	lr
10001d26:	bf00      	nop
10001d28:	4c001010 	.word	0x4c001010
10001d2c:	4c001000 	.word	0x4c001000

10001d30 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001d30:	b580      	push	{r7, lr}
10001d32:	b088      	sub	sp, #32
10001d34:	af00      	add	r7, sp, #0
10001d36:	60f8      	str	r0, [r7, #12]
10001d38:	60b9      	str	r1, [r7, #8]
10001d3a:	4613      	mov	r3, r2
10001d3c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10001d3e:	2300      	movs	r3, #0
10001d40:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001d42:	4b1d      	ldr	r3, [pc, #116]	@ (10001db8 <HAL_IPCC_NotifyCPU+0x88>)
10001d44:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10001d46:	68fb      	ldr	r3, [r7, #12]
10001d48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10001d4c:	b2db      	uxtb	r3, r3
10001d4e:	2b01      	cmp	r3, #1
10001d50:	d12a      	bne.n	10001da8 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10001d52:	69bb      	ldr	r3, [r7, #24]
10001d54:	689a      	ldr	r2, [r3, #8]
10001d56:	79fb      	ldrb	r3, [r7, #7]
10001d58:	2b00      	cmp	r3, #0
10001d5a:	d102      	bne.n	10001d62 <HAL_IPCC_NotifyCPU+0x32>
10001d5c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10001d60:	e000      	b.n	10001d64 <HAL_IPCC_NotifyCPU+0x34>
10001d62:	2101      	movs	r1, #1
10001d64:	68bb      	ldr	r3, [r7, #8]
10001d66:	f003 030f 	and.w	r3, r3, #15
10001d6a:	fa01 f303 	lsl.w	r3, r1, r3
10001d6e:	431a      	orrs	r2, r3
10001d70:	69bb      	ldr	r3, [r7, #24]
10001d72:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10001d74:	79fb      	ldrb	r3, [r7, #7]
10001d76:	2b00      	cmp	r3, #0
10001d78:	d102      	bne.n	10001d80 <HAL_IPCC_NotifyCPU+0x50>
10001d7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
10001d7e:	e000      	b.n	10001d82 <HAL_IPCC_NotifyCPU+0x52>
10001d80:	2201      	movs	r2, #1
10001d82:	68bb      	ldr	r3, [r7, #8]
10001d84:	f003 030f 	and.w	r3, r3, #15
10001d88:	fa02 f303 	lsl.w	r3, r2, r3
10001d8c:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
10001d8e:	68fb      	ldr	r3, [r7, #12]
10001d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10001d92:	697b      	ldr	r3, [r7, #20]
10001d94:	4013      	ands	r3, r2
10001d96:	697a      	ldr	r2, [r7, #20]
10001d98:	429a      	cmp	r2, r3
10001d9a:	d107      	bne.n	10001dac <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10001d9c:	79fb      	ldrb	r3, [r7, #7]
10001d9e:	4619      	mov	r1, r3
10001da0:	68b8      	ldr	r0, [r7, #8]
10001da2:	f000 f8bf 	bl	10001f24 <IPCC_UnmaskInterrupt>
10001da6:	e001      	b.n	10001dac <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10001da8:	2301      	movs	r3, #1
10001daa:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10001dac:	7ffb      	ldrb	r3, [r7, #31]
}
10001dae:	4618      	mov	r0, r3
10001db0:	3720      	adds	r7, #32
10001db2:	46bd      	mov	sp, r7
10001db4:	bd80      	pop	{r7, pc}
10001db6:	bf00      	nop
10001db8:	4c001010 	.word	0x4c001010

10001dbc <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10001dbc:	b580      	push	{r7, lr}
10001dbe:	b086      	sub	sp, #24
10001dc0:	af00      	add	r7, sp, #0
10001dc2:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10001dc4:	2300      	movs	r3, #0
10001dc6:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001dc8:	4b22      	ldr	r3, [pc, #136]	@ (10001e54 <HAL_IPCC_TX_IRQHandler+0x98>)
10001dca:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10001dcc:	68fb      	ldr	r3, [r7, #12]
10001dce:	685b      	ldr	r3, [r3, #4]
10001dd0:	43db      	mvns	r3, r3
10001dd2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
10001dd6:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10001dd8:	68fb      	ldr	r3, [r7, #12]
10001dda:	68db      	ldr	r3, [r3, #12]
10001ddc:	041b      	lsls	r3, r3, #16
10001dde:	43db      	mvns	r3, r3
10001de0:	697a      	ldr	r2, [r7, #20]
10001de2:	4013      	ands	r3, r2
10001de4:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001de6:	e02c      	b.n	10001e42 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10001de8:	693b      	ldr	r3, [r7, #16]
10001dea:	f003 030f 	and.w	r3, r3, #15
10001dee:	3310      	adds	r3, #16
10001df0:	2201      	movs	r2, #1
10001df2:	fa02 f303 	lsl.w	r3, r2, r3
10001df6:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10001df8:	697a      	ldr	r2, [r7, #20]
10001dfa:	68bb      	ldr	r3, [r7, #8]
10001dfc:	4013      	ands	r3, r2
10001dfe:	2b00      	cmp	r3, #0
10001e00:	d01c      	beq.n	10001e3c <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
10001e02:	68fb      	ldr	r3, [r7, #12]
10001e04:	685a      	ldr	r2, [r3, #4]
10001e06:	68bb      	ldr	r3, [r7, #8]
10001e08:	431a      	orrs	r2, r3
10001e0a:	68fb      	ldr	r3, [r7, #12]
10001e0c:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
10001e0e:	687a      	ldr	r2, [r7, #4]
10001e10:	693b      	ldr	r3, [r7, #16]
10001e12:	3306      	adds	r3, #6
10001e14:	009b      	lsls	r3, r3, #2
10001e16:	4413      	add	r3, r2
10001e18:	685b      	ldr	r3, [r3, #4]
10001e1a:	2b00      	cmp	r3, #0
10001e1c:	d009      	beq.n	10001e32 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
10001e1e:	687a      	ldr	r2, [r7, #4]
10001e20:	693b      	ldr	r3, [r7, #16]
10001e22:	3306      	adds	r3, #6
10001e24:	009b      	lsls	r3, r3, #2
10001e26:	4413      	add	r3, r2
10001e28:	685b      	ldr	r3, [r3, #4]
10001e2a:	2200      	movs	r2, #0
10001e2c:	6939      	ldr	r1, [r7, #16]
10001e2e:	6878      	ldr	r0, [r7, #4]
10001e30:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
10001e32:	68bb      	ldr	r3, [r7, #8]
10001e34:	43db      	mvns	r3, r3
10001e36:	697a      	ldr	r2, [r7, #20]
10001e38:	4013      	ands	r3, r2
10001e3a:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
10001e3c:	693b      	ldr	r3, [r7, #16]
10001e3e:	3301      	adds	r3, #1
10001e40:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001e42:	697b      	ldr	r3, [r7, #20]
10001e44:	2b00      	cmp	r3, #0
10001e46:	d1cf      	bne.n	10001de8 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
10001e48:	bf00      	nop
10001e4a:	bf00      	nop
10001e4c:	3718      	adds	r7, #24
10001e4e:	46bd      	mov	sp, r7
10001e50:	bd80      	pop	{r7, pc}
10001e52:	bf00      	nop
10001e54:	4c001010 	.word	0x4c001010

10001e58 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10001e58:	b580      	push	{r7, lr}
10001e5a:	b088      	sub	sp, #32
10001e5c:	af00      	add	r7, sp, #0
10001e5e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10001e60:	2300      	movs	r3, #0
10001e62:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001e64:	4b20      	ldr	r3, [pc, #128]	@ (10001ee8 <HAL_IPCC_RX_IRQHandler+0x90>)
10001e66:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10001e68:	4b20      	ldr	r3, [pc, #128]	@ (10001eec <HAL_IPCC_RX_IRQHandler+0x94>)
10001e6a:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10001e6c:	697b      	ldr	r3, [r7, #20]
10001e6e:	685b      	ldr	r3, [r3, #4]
10001e70:	43db      	mvns	r3, r3
10001e72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10001e76:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10001e78:	693b      	ldr	r3, [r7, #16]
10001e7a:	68db      	ldr	r3, [r3, #12]
10001e7c:	69fa      	ldr	r2, [r7, #28]
10001e7e:	4013      	ands	r3, r2
10001e80:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001e82:	e029      	b.n	10001ed8 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10001e84:	69bb      	ldr	r3, [r7, #24]
10001e86:	f003 030f 	and.w	r3, r3, #15
10001e8a:	2201      	movs	r2, #1
10001e8c:	fa02 f303 	lsl.w	r3, r2, r3
10001e90:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
10001e92:	69fa      	ldr	r2, [r7, #28]
10001e94:	68fb      	ldr	r3, [r7, #12]
10001e96:	4013      	ands	r3, r2
10001e98:	2b00      	cmp	r3, #0
10001e9a:	d01a      	beq.n	10001ed2 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10001e9c:	697b      	ldr	r3, [r7, #20]
10001e9e:	685a      	ldr	r2, [r3, #4]
10001ea0:	68fb      	ldr	r3, [r7, #12]
10001ea2:	431a      	orrs	r2, r3
10001ea4:	697b      	ldr	r3, [r7, #20]
10001ea6:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10001ea8:	687a      	ldr	r2, [r7, #4]
10001eaa:	69bb      	ldr	r3, [r7, #24]
10001eac:	009b      	lsls	r3, r3, #2
10001eae:	4413      	add	r3, r2
10001eb0:	685b      	ldr	r3, [r3, #4]
10001eb2:	2b00      	cmp	r3, #0
10001eb4:	d008      	beq.n	10001ec8 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10001eb6:	687a      	ldr	r2, [r7, #4]
10001eb8:	69bb      	ldr	r3, [r7, #24]
10001eba:	009b      	lsls	r3, r3, #2
10001ebc:	4413      	add	r3, r2
10001ebe:	685b      	ldr	r3, [r3, #4]
10001ec0:	2201      	movs	r2, #1
10001ec2:	69b9      	ldr	r1, [r7, #24]
10001ec4:	6878      	ldr	r0, [r7, #4]
10001ec6:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10001ec8:	68fb      	ldr	r3, [r7, #12]
10001eca:	43db      	mvns	r3, r3
10001ecc:	69fa      	ldr	r2, [r7, #28]
10001ece:	4013      	ands	r3, r2
10001ed0:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10001ed2:	69bb      	ldr	r3, [r7, #24]
10001ed4:	3301      	adds	r3, #1
10001ed6:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001ed8:	69fb      	ldr	r3, [r7, #28]
10001eda:	2b00      	cmp	r3, #0
10001edc:	d1d2      	bne.n	10001e84 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10001ede:	bf00      	nop
10001ee0:	bf00      	nop
10001ee2:	3720      	adds	r7, #32
10001ee4:	46bd      	mov	sp, r7
10001ee6:	bd80      	pop	{r7, pc}
10001ee8:	4c001010 	.word	0x4c001010
10001eec:	4c001000 	.word	0x4c001000

10001ef0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001ef0:	b480      	push	{r7}
10001ef2:	b085      	sub	sp, #20
10001ef4:	af00      	add	r7, sp, #0
10001ef6:	60f8      	str	r0, [r7, #12]
10001ef8:	60b9      	str	r1, [r7, #8]
10001efa:	4613      	mov	r3, r2
10001efc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
10001efe:	bf00      	nop
10001f00:	3714      	adds	r7, #20
10001f02:	46bd      	mov	sp, r7
10001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f08:	4770      	bx	lr

10001f0a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001f0a:	b480      	push	{r7}
10001f0c:	b085      	sub	sp, #20
10001f0e:	af00      	add	r7, sp, #0
10001f10:	60f8      	str	r0, [r7, #12]
10001f12:	60b9      	str	r1, [r7, #8]
10001f14:	4613      	mov	r3, r2
10001f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10001f18:	bf00      	nop
10001f1a:	3714      	adds	r7, #20
10001f1c:	46bd      	mov	sp, r7
10001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f22:	4770      	bx	lr

10001f24 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001f24:	b480      	push	{r7}
10001f26:	b085      	sub	sp, #20
10001f28:	af00      	add	r7, sp, #0
10001f2a:	6078      	str	r0, [r7, #4]
10001f2c:	460b      	mov	r3, r1
10001f2e:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001f30:	4b12      	ldr	r3, [pc, #72]	@ (10001f7c <IPCC_UnmaskInterrupt+0x58>)
10001f32:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10001f34:	78fb      	ldrb	r3, [r7, #3]
10001f36:	2b00      	cmp	r3, #0
10001f38:	d10d      	bne.n	10001f56 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001f3a:	68fb      	ldr	r3, [r7, #12]
10001f3c:	685a      	ldr	r2, [r3, #4]
10001f3e:	687b      	ldr	r3, [r7, #4]
10001f40:	f003 030f 	and.w	r3, r3, #15
10001f44:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10001f48:	fa01 f303 	lsl.w	r3, r1, r3
10001f4c:	43db      	mvns	r3, r3
10001f4e:	401a      	ands	r2, r3
10001f50:	68fb      	ldr	r3, [r7, #12]
10001f52:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10001f54:	e00b      	b.n	10001f6e <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001f56:	68fb      	ldr	r3, [r7, #12]
10001f58:	685a      	ldr	r2, [r3, #4]
10001f5a:	687b      	ldr	r3, [r7, #4]
10001f5c:	f003 030f 	and.w	r3, r3, #15
10001f60:	2101      	movs	r1, #1
10001f62:	fa01 f303 	lsl.w	r3, r1, r3
10001f66:	43db      	mvns	r3, r3
10001f68:	401a      	ands	r2, r3
10001f6a:	68fb      	ldr	r3, [r7, #12]
10001f6c:	605a      	str	r2, [r3, #4]
}
10001f6e:	bf00      	nop
10001f70:	3714      	adds	r7, #20
10001f72:	46bd      	mov	sp, r7
10001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f78:	4770      	bx	lr
10001f7a:	bf00      	nop
10001f7c:	4c001010 	.word	0x4c001010

10001f80 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10001f80:	b480      	push	{r7}
10001f82:	b085      	sub	sp, #20
10001f84:	af00      	add	r7, sp, #0
10001f86:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10001f88:	2300      	movs	r3, #0
10001f8a:	60fb      	str	r3, [r7, #12]
10001f8c:	e00f      	b.n	10001fae <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
10001f8e:	687a      	ldr	r2, [r7, #4]
10001f90:	68fb      	ldr	r3, [r7, #12]
10001f92:	009b      	lsls	r3, r3, #2
10001f94:	4413      	add	r3, r2
10001f96:	4a0b      	ldr	r2, [pc, #44]	@ (10001fc4 <IPCC_SetDefaultCallbacks+0x44>)
10001f98:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10001f9a:	687a      	ldr	r2, [r7, #4]
10001f9c:	68fb      	ldr	r3, [r7, #12]
10001f9e:	3306      	adds	r3, #6
10001fa0:	009b      	lsls	r3, r3, #2
10001fa2:	4413      	add	r3, r2
10001fa4:	4a08      	ldr	r2, [pc, #32]	@ (10001fc8 <IPCC_SetDefaultCallbacks+0x48>)
10001fa6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10001fa8:	68fb      	ldr	r3, [r7, #12]
10001faa:	3301      	adds	r3, #1
10001fac:	60fb      	str	r3, [r7, #12]
10001fae:	68fb      	ldr	r3, [r7, #12]
10001fb0:	2b05      	cmp	r3, #5
10001fb2:	d9ec      	bls.n	10001f8e <IPCC_SetDefaultCallbacks+0xe>
  }
}
10001fb4:	bf00      	nop
10001fb6:	bf00      	nop
10001fb8:	3714      	adds	r7, #20
10001fba:	46bd      	mov	sp, r7
10001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
10001fc0:	4770      	bx	lr
10001fc2:	bf00      	nop
10001fc4:	10001ef1 	.word	0x10001ef1
10001fc8:	10001f0b 	.word	0x10001f0b

10001fcc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10001fcc:	b480      	push	{r7}
10001fce:	b083      	sub	sp, #12
10001fd0:	af00      	add	r7, sp, #0
10001fd2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10001fd4:	687b      	ldr	r3, [r7, #4]
10001fd6:	2200      	movs	r2, #0
10001fd8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10001fda:	687b      	ldr	r3, [r7, #4]
10001fdc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
10001fe0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
10001fe2:	687b      	ldr	r3, [r7, #4]
10001fe4:	223f      	movs	r2, #63	@ 0x3f
10001fe6:	609a      	str	r2, [r3, #8]
}
10001fe8:	bf00      	nop
10001fea:	370c      	adds	r7, #12
10001fec:	46bd      	mov	sp, r7
10001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ff2:	4770      	bx	lr

10001ff4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10001ff4:	b480      	push	{r7}
10001ff6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10001ff8:	4b05      	ldr	r3, [pc, #20]	@ (10002010 <HAL_PWR_EnableBkUpAccess+0x1c>)
10001ffa:	681b      	ldr	r3, [r3, #0]
10001ffc:	4a04      	ldr	r2, [pc, #16]	@ (10002010 <HAL_PWR_EnableBkUpAccess+0x1c>)
10001ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10002002:	6013      	str	r3, [r2, #0]
}
10002004:	bf00      	nop
10002006:	46bd      	mov	sp, r7
10002008:	f85d 7b04 	ldr.w	r7, [sp], #4
1000200c:	4770      	bx	lr
1000200e:	bf00      	nop
10002010:	50001000 	.word	0x50001000

10002014 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10002014:	b580      	push	{r7, lr}
10002016:	b084      	sub	sp, #16
10002018:	af00      	add	r7, sp, #0
1000201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
1000201c:	2300      	movs	r3, #0
1000201e:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10002020:	687b      	ldr	r3, [r7, #4]
10002022:	2b00      	cmp	r3, #0
10002024:	d101      	bne.n	1000202a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10002026:	2301      	movs	r3, #1
10002028:	e320      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1000202a:	687b      	ldr	r3, [r7, #4]
1000202c:	681b      	ldr	r3, [r3, #0]
1000202e:	f003 0301 	and.w	r3, r3, #1
10002032:	2b00      	cmp	r3, #0
10002034:	f000 8081 	beq.w	1000213a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10002038:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000203c:	6a1b      	ldr	r3, [r3, #32]
1000203e:	f003 0303 	and.w	r3, r3, #3
10002042:	2b01      	cmp	r3, #1
10002044:	d107      	bne.n	10002056 <HAL_RCC_OscConfig+0x42>
10002046:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000204a:	6a1b      	ldr	r3, [r3, #32]
1000204c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002054:	d054      	beq.n	10002100 <HAL_RCC_OscConfig+0xec>
10002056:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000205c:	f003 0307 	and.w	r3, r3, #7
10002060:	2b01      	cmp	r3, #1
10002062:	d107      	bne.n	10002074 <HAL_RCC_OscConfig+0x60>
10002064:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000206a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000206e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002072:	d045      	beq.n	10002100 <HAL_RCC_OscConfig+0xec>
10002074:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000207a:	f003 0303 	and.w	r3, r3, #3
1000207e:	2b01      	cmp	r3, #1
10002080:	d107      	bne.n	10002092 <HAL_RCC_OscConfig+0x7e>
10002082:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000208c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002090:	d036      	beq.n	10002100 <HAL_RCC_OscConfig+0xec>
10002092:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002098:	f003 0303 	and.w	r3, r3, #3
1000209c:	2b01      	cmp	r3, #1
1000209e:	d10f      	bne.n	100020c0 <HAL_RCC_OscConfig+0xac>
100020a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100020a8:	f003 0302 	and.w	r3, r3, #2
100020ac:	2b02      	cmp	r3, #2
100020ae:	d027      	beq.n	10002100 <HAL_RCC_OscConfig+0xec>
100020b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100020b8:	f003 0302 	and.w	r3, r3, #2
100020bc:	2b02      	cmp	r3, #2
100020be:	d01f      	beq.n	10002100 <HAL_RCC_OscConfig+0xec>
100020c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020c4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100020c8:	f003 0303 	and.w	r3, r3, #3
100020cc:	2b01      	cmp	r3, #1
100020ce:	d107      	bne.n	100020e0 <HAL_RCC_OscConfig+0xcc>
100020d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020d4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100020d8:	f003 0302 	and.w	r3, r3, #2
100020dc:	2b02      	cmp	r3, #2
100020de:	d00f      	beq.n	10002100 <HAL_RCC_OscConfig+0xec>
100020e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020e4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100020e8:	f003 0303 	and.w	r3, r3, #3
100020ec:	2b01      	cmp	r3, #1
100020ee:	d117      	bne.n	10002120 <HAL_RCC_OscConfig+0x10c>
100020f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020f4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100020f8:	f003 0302 	and.w	r3, r3, #2
100020fc:	2b02      	cmp	r3, #2
100020fe:	d10f      	bne.n	10002120 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10002100:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002104:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000210c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002110:	d112      	bne.n	10002138 <HAL_RCC_OscConfig+0x124>
10002112:	687b      	ldr	r3, [r7, #4]
10002114:	685b      	ldr	r3, [r3, #4]
10002116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000211a:	d00d      	beq.n	10002138 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
1000211c:	2301      	movs	r3, #1
1000211e:	e2a5      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10002120:	687b      	ldr	r3, [r7, #4]
10002122:	685b      	ldr	r3, [r3, #4]
10002124:	4618      	mov	r0, r3
10002126:	f000 faa7 	bl	10002678 <HAL_RCC_HSEConfig>
1000212a:	4603      	mov	r3, r0
1000212c:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
1000212e:	7bfb      	ldrb	r3, [r7, #15]
10002130:	2b00      	cmp	r3, #0
10002132:	d002      	beq.n	1000213a <HAL_RCC_OscConfig+0x126>
      {
        return result;
10002134:	7bfb      	ldrb	r3, [r7, #15]
10002136:	e299      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10002138:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1000213a:	687b      	ldr	r3, [r7, #4]
1000213c:	681b      	ldr	r3, [r3, #0]
1000213e:	f003 0302 	and.w	r3, r3, #2
10002142:	2b00      	cmp	r3, #0
10002144:	f000 814e 	beq.w	100023e4 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10002148:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000214c:	6a1b      	ldr	r3, [r3, #32]
1000214e:	f003 0303 	and.w	r3, r3, #3
10002152:	2b00      	cmp	r3, #0
10002154:	d107      	bne.n	10002166 <HAL_RCC_OscConfig+0x152>
10002156:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000215a:	6a1b      	ldr	r3, [r3, #32]
1000215c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002164:	d055      	beq.n	10002212 <HAL_RCC_OscConfig+0x1fe>
10002166:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000216c:	f003 0307 	and.w	r3, r3, #7
10002170:	2b00      	cmp	r3, #0
10002172:	d107      	bne.n	10002184 <HAL_RCC_OscConfig+0x170>
10002174:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000217a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000217e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002182:	d046      	beq.n	10002212 <HAL_RCC_OscConfig+0x1fe>
10002184:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000218a:	f003 0303 	and.w	r3, r3, #3
1000218e:	2b00      	cmp	r3, #0
10002190:	d107      	bne.n	100021a2 <HAL_RCC_OscConfig+0x18e>
10002192:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000219c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100021a0:	d037      	beq.n	10002212 <HAL_RCC_OscConfig+0x1fe>
100021a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100021a8:	f003 0303 	and.w	r3, r3, #3
100021ac:	2b00      	cmp	r3, #0
100021ae:	d10f      	bne.n	100021d0 <HAL_RCC_OscConfig+0x1bc>
100021b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100021b8:	f003 0302 	and.w	r3, r3, #2
100021bc:	2b02      	cmp	r3, #2
100021be:	d028      	beq.n	10002212 <HAL_RCC_OscConfig+0x1fe>
100021c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100021c8:	f003 0302 	and.w	r3, r3, #2
100021cc:	2b02      	cmp	r3, #2
100021ce:	d020      	beq.n	10002212 <HAL_RCC_OscConfig+0x1fe>
100021d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021d4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100021d8:	f003 0303 	and.w	r3, r3, #3
100021dc:	2b00      	cmp	r3, #0
100021de:	d107      	bne.n	100021f0 <HAL_RCC_OscConfig+0x1dc>
100021e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021e4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100021e8:	f003 0302 	and.w	r3, r3, #2
100021ec:	2b02      	cmp	r3, #2
100021ee:	d010      	beq.n	10002212 <HAL_RCC_OscConfig+0x1fe>
100021f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021f4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100021f8:	f003 0303 	and.w	r3, r3, #3
100021fc:	2b00      	cmp	r3, #0
100021fe:	f040 8088 	bne.w	10002312 <HAL_RCC_OscConfig+0x2fe>
10002202:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002206:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000220a:	f003 0302 	and.w	r3, r3, #2
1000220e:	2b02      	cmp	r3, #2
10002210:	d17f      	bne.n	10002312 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10002212:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002216:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000221a:	f003 0301 	and.w	r3, r3, #1
1000221e:	2b01      	cmp	r3, #1
10002220:	d105      	bne.n	1000222e <HAL_RCC_OscConfig+0x21a>
10002222:	687b      	ldr	r3, [r7, #4]
10002224:	68db      	ldr	r3, [r3, #12]
10002226:	2b01      	cmp	r3, #1
10002228:	d001      	beq.n	1000222e <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
1000222a:	2301      	movs	r3, #1
1000222c:	e21e      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
1000222e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002232:	699b      	ldr	r3, [r3, #24]
10002234:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10002238:	687b      	ldr	r3, [r7, #4]
1000223a:	691b      	ldr	r3, [r3, #16]
1000223c:	021b      	lsls	r3, r3, #8
1000223e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002242:	4313      	orrs	r3, r2
10002244:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10002246:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000224c:	f003 0303 	and.w	r3, r3, #3
10002250:	2b00      	cmp	r3, #0
10002252:	d10f      	bne.n	10002274 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10002254:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000225c:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10002260:	2b02      	cmp	r3, #2
10002262:	d047      	beq.n	100022f4 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10002264:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000226c:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10002270:	2b02      	cmp	r3, #2
10002272:	d03f      	beq.n	100022f4 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10002274:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002278:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000227c:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10002280:	2b00      	cmp	r3, #0
10002282:	d107      	bne.n	10002294 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10002284:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002288:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000228c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10002290:	2b02      	cmp	r3, #2
10002292:	d02f      	beq.n	100022f4 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10002294:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002298:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
1000229c:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100022a0:	2b00      	cmp	r3, #0
100022a2:	d107      	bne.n	100022b4 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
100022a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022a8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100022ac:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100022b0:	2b02      	cmp	r3, #2
100022b2:	d01f      	beq.n	100022f4 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100022b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022b8:	699b      	ldr	r3, [r3, #24]
100022ba:	f023 0203 	bic.w	r2, r3, #3
100022be:	687b      	ldr	r3, [r7, #4]
100022c0:	695b      	ldr	r3, [r3, #20]
100022c2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100022c6:	4313      	orrs	r3, r2
100022c8:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
100022ca:	f7ff f977 	bl	100015bc <HAL_GetTick>
100022ce:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100022d0:	e008      	b.n	100022e4 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100022d2:	f7ff f973 	bl	100015bc <HAL_GetTick>
100022d6:	4602      	mov	r2, r0
100022d8:	68bb      	ldr	r3, [r7, #8]
100022da:	1ad3      	subs	r3, r2, r3
100022dc:	2b64      	cmp	r3, #100	@ 0x64
100022de:	d901      	bls.n	100022e4 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
100022e0:	2303      	movs	r3, #3
100022e2:	e1c3      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100022e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022e8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100022ec:	f003 0304 	and.w	r3, r3, #4
100022f0:	2b04      	cmp	r3, #4
100022f2:	d1ee      	bne.n	100022d2 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
100022f4:	f001 f809 	bl	1000330a <HAL_RCC_GetSystemCoreClockFreq>
100022f8:	4603      	mov	r3, r0
100022fa:	4ab3      	ldr	r2, [pc, #716]	@ (100025c8 <HAL_RCC_OscConfig+0x5b4>)
100022fc:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
100022fe:	4bb3      	ldr	r3, [pc, #716]	@ (100025cc <HAL_RCC_OscConfig+0x5b8>)
10002300:	681b      	ldr	r3, [r3, #0]
10002302:	4618      	mov	r0, r3
10002304:	f7ff f910 	bl	10001528 <HAL_InitTick>
10002308:	4603      	mov	r3, r0
1000230a:	2b00      	cmp	r3, #0
1000230c:	d069      	beq.n	100023e2 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
1000230e:	2301      	movs	r3, #1
10002310:	e1ac      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10002312:	687b      	ldr	r3, [r7, #4]
10002314:	68db      	ldr	r3, [r3, #12]
10002316:	2b00      	cmp	r3, #0
10002318:	d049      	beq.n	100023ae <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
1000231a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000231e:	68db      	ldr	r3, [r3, #12]
10002320:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002324:	f043 0301 	orr.w	r3, r3, #1
10002328:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000232a:	f7ff f947 	bl	100015bc <HAL_GetTick>
1000232e:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002330:	e008      	b.n	10002344 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10002332:	f7ff f943 	bl	100015bc <HAL_GetTick>
10002336:	4602      	mov	r2, r0
10002338:	68bb      	ldr	r3, [r7, #8]
1000233a:	1ad3      	subs	r3, r2, r3
1000233c:	2b64      	cmp	r3, #100	@ 0x64
1000233e:	d901      	bls.n	10002344 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10002340:	2303      	movs	r3, #3
10002342:	e193      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002344:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002348:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000234c:	f003 0301 	and.w	r3, r3, #1
10002350:	2b01      	cmp	r3, #1
10002352:	d1ee      	bne.n	10002332 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10002354:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002358:	699b      	ldr	r3, [r3, #24]
1000235a:	f023 0203 	bic.w	r2, r3, #3
1000235e:	687b      	ldr	r3, [r7, #4]
10002360:	695b      	ldr	r3, [r3, #20]
10002362:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002366:	4313      	orrs	r3, r2
10002368:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000236a:	f7ff f927 	bl	100015bc <HAL_GetTick>
1000236e:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10002370:	e008      	b.n	10002384 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10002372:	f7ff f923 	bl	100015bc <HAL_GetTick>
10002376:	4602      	mov	r2, r0
10002378:	68bb      	ldr	r3, [r7, #8]
1000237a:	1ad3      	subs	r3, r2, r3
1000237c:	2b64      	cmp	r3, #100	@ 0x64
1000237e:	d901      	bls.n	10002384 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10002380:	2303      	movs	r3, #3
10002382:	e173      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10002384:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002388:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000238c:	f003 0304 	and.w	r3, r3, #4
10002390:	2b04      	cmp	r3, #4
10002392:	d1ee      	bne.n	10002372 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10002394:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002398:	699b      	ldr	r3, [r3, #24]
1000239a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
1000239e:	687b      	ldr	r3, [r7, #4]
100023a0:	691b      	ldr	r3, [r3, #16]
100023a2:	021b      	lsls	r3, r3, #8
100023a4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100023a8:	4313      	orrs	r3, r2
100023aa:	618b      	str	r3, [r1, #24]
100023ac:	e01a      	b.n	100023e4 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
100023ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023b2:	2201      	movs	r2, #1
100023b4:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100023b6:	f7ff f901 	bl	100015bc <HAL_GetTick>
100023ba:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100023bc:	e008      	b.n	100023d0 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100023be:	f7ff f8fd 	bl	100015bc <HAL_GetTick>
100023c2:	4602      	mov	r2, r0
100023c4:	68bb      	ldr	r3, [r7, #8]
100023c6:	1ad3      	subs	r3, r2, r3
100023c8:	2b64      	cmp	r3, #100	@ 0x64
100023ca:	d901      	bls.n	100023d0 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
100023cc:	2303      	movs	r3, #3
100023ce:	e14d      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100023d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023d4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100023d8:	f003 0301 	and.w	r3, r3, #1
100023dc:	2b01      	cmp	r3, #1
100023de:	d0ee      	beq.n	100023be <HAL_RCC_OscConfig+0x3aa>
100023e0:	e000      	b.n	100023e4 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100023e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
100023e4:	687b      	ldr	r3, [r7, #4]
100023e6:	681b      	ldr	r3, [r3, #0]
100023e8:	f003 0310 	and.w	r3, r3, #16
100023ec:	2b00      	cmp	r3, #0
100023ee:	f000 8091 	beq.w	10002514 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
100023f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023f6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100023fa:	f003 0303 	and.w	r3, r3, #3
100023fe:	2b02      	cmp	r3, #2
10002400:	d107      	bne.n	10002412 <HAL_RCC_OscConfig+0x3fe>
10002402:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002406:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000240a:	f003 0302 	and.w	r3, r3, #2
1000240e:	2b02      	cmp	r3, #2
10002410:	d01e      	beq.n	10002450 <HAL_RCC_OscConfig+0x43c>
10002412:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002418:	f003 0303 	and.w	r3, r3, #3
1000241c:	2b02      	cmp	r3, #2
1000241e:	d107      	bne.n	10002430 <HAL_RCC_OscConfig+0x41c>
10002420:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002426:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000242a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000242e:	d00f      	beq.n	10002450 <HAL_RCC_OscConfig+0x43c>
10002430:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002434:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002438:	f003 0303 	and.w	r3, r3, #3
1000243c:	2b02      	cmp	r3, #2
1000243e:	d122      	bne.n	10002486 <HAL_RCC_OscConfig+0x472>
10002440:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002444:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002448:	f003 0302 	and.w	r3, r3, #2
1000244c:	2b02      	cmp	r3, #2
1000244e:	d11a      	bne.n	10002486 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10002450:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002454:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002458:	f003 0310 	and.w	r3, r3, #16
1000245c:	2b10      	cmp	r3, #16
1000245e:	d105      	bne.n	1000246c <HAL_RCC_OscConfig+0x458>
10002460:	687b      	ldr	r3, [r7, #4]
10002462:	69db      	ldr	r3, [r3, #28]
10002464:	2b10      	cmp	r3, #16
10002466:	d001      	beq.n	1000246c <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10002468:	2301      	movs	r3, #1
1000246a:	e0ff      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
1000246c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002470:	69db      	ldr	r3, [r3, #28]
10002472:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10002476:	687b      	ldr	r3, [r7, #4]
10002478:	6a1b      	ldr	r3, [r3, #32]
1000247a:	021b      	lsls	r3, r3, #8
1000247c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002480:	4313      	orrs	r3, r2
10002482:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10002484:	e046      	b.n	10002514 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10002486:	687b      	ldr	r3, [r7, #4]
10002488:	69db      	ldr	r3, [r3, #28]
1000248a:	2b00      	cmp	r3, #0
1000248c:	d029      	beq.n	100024e2 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
1000248e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002492:	68db      	ldr	r3, [r3, #12]
10002494:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002498:	f043 0310 	orr.w	r3, r3, #16
1000249c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000249e:	f7ff f88d 	bl	100015bc <HAL_GetTick>
100024a2:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100024a4:	e008      	b.n	100024b8 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100024a6:	f7ff f889 	bl	100015bc <HAL_GetTick>
100024aa:	4602      	mov	r2, r0
100024ac:	68bb      	ldr	r3, [r7, #8]
100024ae:	1ad3      	subs	r3, r2, r3
100024b0:	2b64      	cmp	r3, #100	@ 0x64
100024b2:	d901      	bls.n	100024b8 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
100024b4:	2303      	movs	r3, #3
100024b6:	e0d9      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100024b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024bc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100024c0:	f003 0310 	and.w	r3, r3, #16
100024c4:	2b10      	cmp	r3, #16
100024c6:	d1ee      	bne.n	100024a6 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100024c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024cc:	69db      	ldr	r3, [r3, #28]
100024ce:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
100024d2:	687b      	ldr	r3, [r7, #4]
100024d4:	6a1b      	ldr	r3, [r3, #32]
100024d6:	021b      	lsls	r3, r3, #8
100024d8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100024dc:	4313      	orrs	r3, r2
100024de:	61cb      	str	r3, [r1, #28]
100024e0:	e018      	b.n	10002514 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
100024e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024e6:	2210      	movs	r2, #16
100024e8:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100024ea:	f7ff f867 	bl	100015bc <HAL_GetTick>
100024ee:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100024f0:	e008      	b.n	10002504 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100024f2:	f7ff f863 	bl	100015bc <HAL_GetTick>
100024f6:	4602      	mov	r2, r0
100024f8:	68bb      	ldr	r3, [r7, #8]
100024fa:	1ad3      	subs	r3, r2, r3
100024fc:	2b64      	cmp	r3, #100	@ 0x64
100024fe:	d901      	bls.n	10002504 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10002500:	2303      	movs	r3, #3
10002502:	e0b3      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10002504:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002508:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000250c:	f003 0310 	and.w	r3, r3, #16
10002510:	2b10      	cmp	r3, #16
10002512:	d0ee      	beq.n	100024f2 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10002514:	687b      	ldr	r3, [r7, #4]
10002516:	681b      	ldr	r3, [r3, #0]
10002518:	f003 0308 	and.w	r3, r3, #8
1000251c:	2b00      	cmp	r3, #0
1000251e:	d042      	beq.n	100025a6 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10002520:	687b      	ldr	r3, [r7, #4]
10002522:	699b      	ldr	r3, [r3, #24]
10002524:	2b00      	cmp	r3, #0
10002526:	d01f      	beq.n	10002568 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10002528:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000252c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002530:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002534:	f043 0301 	orr.w	r3, r3, #1
10002538:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000253c:	f7ff f83e 	bl	100015bc <HAL_GetTick>
10002540:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10002542:	e008      	b.n	10002556 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10002544:	f7ff f83a 	bl	100015bc <HAL_GetTick>
10002548:	4602      	mov	r2, r0
1000254a:	68bb      	ldr	r3, [r7, #8]
1000254c:	1ad3      	subs	r3, r2, r3
1000254e:	2b64      	cmp	r3, #100	@ 0x64
10002550:	d901      	bls.n	10002556 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10002552:	2303      	movs	r3, #3
10002554:	e08a      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10002556:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000255a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000255e:	f003 0302 	and.w	r3, r3, #2
10002562:	2b02      	cmp	r3, #2
10002564:	d1ee      	bne.n	10002544 <HAL_RCC_OscConfig+0x530>
10002566:	e01e      	b.n	100025a6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10002568:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000256c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002570:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002574:	f023 0301 	bic.w	r3, r3, #1
10002578:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000257c:	f7ff f81e 	bl	100015bc <HAL_GetTick>
10002580:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002582:	e008      	b.n	10002596 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10002584:	f7ff f81a 	bl	100015bc <HAL_GetTick>
10002588:	4602      	mov	r2, r0
1000258a:	68bb      	ldr	r3, [r7, #8]
1000258c:	1ad3      	subs	r3, r2, r3
1000258e:	2b64      	cmp	r3, #100	@ 0x64
10002590:	d901      	bls.n	10002596 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10002592:	2303      	movs	r3, #3
10002594:	e06a      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002596:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000259a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000259e:	f003 0302 	and.w	r3, r3, #2
100025a2:	2b02      	cmp	r3, #2
100025a4:	d0ee      	beq.n	10002584 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100025a6:	687b      	ldr	r3, [r7, #4]
100025a8:	681b      	ldr	r3, [r3, #0]
100025aa:	f003 0304 	and.w	r3, r3, #4
100025ae:	2b00      	cmp	r3, #0
100025b0:	d02b      	beq.n	1000260a <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100025b2:	4b07      	ldr	r3, [pc, #28]	@ (100025d0 <HAL_RCC_OscConfig+0x5bc>)
100025b4:	681b      	ldr	r3, [r3, #0]
100025b6:	4a06      	ldr	r2, [pc, #24]	@ (100025d0 <HAL_RCC_OscConfig+0x5bc>)
100025b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
100025bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100025be:	f7fe fffd 	bl	100015bc <HAL_GetTick>
100025c2:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100025c4:	e00f      	b.n	100025e6 <HAL_RCC_OscConfig+0x5d2>
100025c6:	bf00      	nop
100025c8:	10020000 	.word	0x10020000
100025cc:	1002000c 	.word	0x1002000c
100025d0:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100025d4:	f7fe fff2 	bl	100015bc <HAL_GetTick>
100025d8:	4602      	mov	r2, r0
100025da:	68bb      	ldr	r3, [r7, #8]
100025dc:	1ad3      	subs	r3, r2, r3
100025de:	2b64      	cmp	r3, #100	@ 0x64
100025e0:	d901      	bls.n	100025e6 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
100025e2:	2303      	movs	r3, #3
100025e4:	e042      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100025e6:	4b23      	ldr	r3, [pc, #140]	@ (10002674 <HAL_RCC_OscConfig+0x660>)
100025e8:	681b      	ldr	r3, [r3, #0]
100025ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100025ee:	2b00      	cmp	r3, #0
100025f0:	d0f0      	beq.n	100025d4 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100025f2:	687b      	ldr	r3, [r7, #4]
100025f4:	689b      	ldr	r3, [r3, #8]
100025f6:	4618      	mov	r0, r3
100025f8:	f000 f8a9 	bl	1000274e <HAL_RCC_LSEConfig>
100025fc:	4603      	mov	r3, r0
100025fe:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10002600:	7bfb      	ldrb	r3, [r7, #15]
10002602:	2b00      	cmp	r3, #0
10002604:	d001      	beq.n	1000260a <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10002606:	7bfb      	ldrb	r3, [r7, #15]
10002608:	e030      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
1000260a:	687b      	ldr	r3, [r7, #4]
1000260c:	3324      	adds	r3, #36	@ 0x24
1000260e:	4618      	mov	r0, r3
10002610:	f000 f91a 	bl	10002848 <RCC_PLL1_Config>
10002614:	4603      	mov	r3, r0
10002616:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002618:	7bfb      	ldrb	r3, [r7, #15]
1000261a:	2b00      	cmp	r3, #0
1000261c:	d001      	beq.n	10002622 <HAL_RCC_OscConfig+0x60e>
  {
    return result;
1000261e:	7bfb      	ldrb	r3, [r7, #15]
10002620:	e024      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10002622:	687b      	ldr	r3, [r7, #4]
10002624:	3360      	adds	r3, #96	@ 0x60
10002626:	4618      	mov	r0, r3
10002628:	f000 fecc 	bl	100033c4 <RCCEx_PLL2_Config>
1000262c:	4603      	mov	r3, r0
1000262e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002630:	7bfb      	ldrb	r3, [r7, #15]
10002632:	2b00      	cmp	r3, #0
10002634:	d001      	beq.n	1000263a <HAL_RCC_OscConfig+0x626>
  {
    return result;
10002636:	7bfb      	ldrb	r3, [r7, #15]
10002638:	e018      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
1000263a:	687b      	ldr	r3, [r7, #4]
1000263c:	339c      	adds	r3, #156	@ 0x9c
1000263e:	4618      	mov	r0, r3
10002640:	f001 f842 	bl	100036c8 <RCCEx_PLL3_Config>
10002644:	4603      	mov	r3, r0
10002646:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002648:	7bfb      	ldrb	r3, [r7, #15]
1000264a:	2b00      	cmp	r3, #0
1000264c:	d001      	beq.n	10002652 <HAL_RCC_OscConfig+0x63e>
  {
    return result;
1000264e:	7bfb      	ldrb	r3, [r7, #15]
10002650:	e00c      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10002652:	687b      	ldr	r3, [r7, #4]
10002654:	33d8      	adds	r3, #216	@ 0xd8
10002656:	4618      	mov	r0, r3
10002658:	f001 f9a0 	bl	1000399c <RCCEx_PLL4_Config>
1000265c:	4603      	mov	r3, r0
1000265e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002660:	7bfb      	ldrb	r3, [r7, #15]
10002662:	2b00      	cmp	r3, #0
10002664:	d001      	beq.n	1000266a <HAL_RCC_OscConfig+0x656>
  {
    return result;
10002666:	7bfb      	ldrb	r3, [r7, #15]
10002668:	e000      	b.n	1000266c <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
1000266a:	2300      	movs	r3, #0
}
1000266c:	4618      	mov	r0, r3
1000266e:	3710      	adds	r7, #16
10002670:	46bd      	mov	sp, r7
10002672:	bd80      	pop	{r7, pc}
10002674:	50001000 	.word	0x50001000

10002678 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10002678:	b580      	push	{r7, lr}
1000267a:	b084      	sub	sp, #16
1000267c:	af00      	add	r7, sp, #0
1000267e:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10002680:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002684:	f44f 7280 	mov.w	r2, #256	@ 0x100
10002688:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000268a:	f7fe ff97 	bl	100015bc <HAL_GetTick>
1000268e:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10002690:	e008      	b.n	100026a4 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10002692:	f7fe ff93 	bl	100015bc <HAL_GetTick>
10002696:	4602      	mov	r2, r0
10002698:	68fb      	ldr	r3, [r7, #12]
1000269a:	1ad3      	subs	r3, r2, r3
1000269c:	2b64      	cmp	r3, #100	@ 0x64
1000269e:	d901      	bls.n	100026a4 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
100026a0:	2303      	movs	r3, #3
100026a2:	e050      	b.n	10002746 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100026a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026a8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100026b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100026b4:	d0ed      	beq.n	10002692 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100026b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026ba:	f44f 6290 	mov.w	r2, #1152	@ 0x480
100026be:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100026c0:	687b      	ldr	r3, [r7, #4]
100026c2:	2b00      	cmp	r3, #0
100026c4:	d03e      	beq.n	10002744 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100026c6:	687b      	ldr	r3, [r7, #4]
100026c8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
100026cc:	d108      	bne.n	100026e0 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100026ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026d2:	68db      	ldr	r3, [r3, #12]
100026d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100026d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100026dc:	60d3      	str	r3, [r2, #12]
100026de:	e013      	b.n	10002708 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100026e0:	687b      	ldr	r3, [r7, #4]
100026e2:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
100026e6:	d10f      	bne.n	10002708 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100026e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026ec:	68db      	ldr	r3, [r3, #12]
100026ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100026f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100026f6:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100026f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026fc:	68db      	ldr	r3, [r3, #12]
100026fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002702:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10002706:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10002708:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000270c:	68db      	ldr	r3, [r3, #12]
1000270e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10002716:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002718:	f7fe ff50 	bl	100015bc <HAL_GetTick>
1000271c:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000271e:	e008      	b.n	10002732 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10002720:	f7fe ff4c 	bl	100015bc <HAL_GetTick>
10002724:	4602      	mov	r2, r0
10002726:	68fb      	ldr	r3, [r7, #12]
10002728:	1ad3      	subs	r3, r2, r3
1000272a:	2b64      	cmp	r3, #100	@ 0x64
1000272c:	d901      	bls.n	10002732 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
1000272e:	2303      	movs	r3, #3
10002730:	e009      	b.n	10002746 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002732:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002736:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000273a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000273e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002742:	d1ed      	bne.n	10002720 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10002744:	2300      	movs	r3, #0
}
10002746:	4618      	mov	r0, r3
10002748:	3710      	adds	r7, #16
1000274a:	46bd      	mov	sp, r7
1000274c:	bd80      	pop	{r7, pc}

1000274e <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000274e:	b580      	push	{r7, lr}
10002750:	b084      	sub	sp, #16
10002752:	af00      	add	r7, sp, #0
10002754:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10002756:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000275a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000275e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002762:	f023 0301 	bic.w	r3, r3, #1
10002766:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000276a:	f7fe ff27 	bl	100015bc <HAL_GetTick>
1000276e:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10002770:	e00a      	b.n	10002788 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10002772:	f7fe ff23 	bl	100015bc <HAL_GetTick>
10002776:	4602      	mov	r2, r0
10002778:	68fb      	ldr	r3, [r7, #12]
1000277a:	1ad3      	subs	r3, r2, r3
1000277c:	f241 3288 	movw	r2, #5000	@ 0x1388
10002780:	4293      	cmp	r3, r2
10002782:	d901      	bls.n	10002788 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10002784:	2303      	movs	r3, #3
10002786:	e05b      	b.n	10002840 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10002788:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000278c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002790:	f003 0304 	and.w	r3, r3, #4
10002794:	2b04      	cmp	r3, #4
10002796:	d0ec      	beq.n	10002772 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10002798:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000279c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100027a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100027a4:	f023 030a 	bic.w	r3, r3, #10
100027a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
100027ac:	687b      	ldr	r3, [r7, #4]
100027ae:	2b00      	cmp	r3, #0
100027b0:	d045      	beq.n	1000283e <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
100027b2:	687b      	ldr	r3, [r7, #4]
100027b4:	2b03      	cmp	r3, #3
100027b6:	d10a      	bne.n	100027ce <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100027b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100027c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100027c4:	f043 0302 	orr.w	r3, r3, #2
100027c8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
100027cc:	e016      	b.n	100027fc <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100027ce:	687b      	ldr	r3, [r7, #4]
100027d0:	2b0b      	cmp	r3, #11
100027d2:	d113      	bne.n	100027fc <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100027d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100027dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100027e0:	f043 0308 	orr.w	r3, r3, #8
100027e4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100027e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100027f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100027f4:	f043 0302 	orr.w	r3, r3, #2
100027f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100027fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002800:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002804:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002808:	f043 0301 	orr.w	r3, r3, #1
1000280c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002810:	f7fe fed4 	bl	100015bc <HAL_GetTick>
10002814:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10002816:	e00a      	b.n	1000282e <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10002818:	f7fe fed0 	bl	100015bc <HAL_GetTick>
1000281c:	4602      	mov	r2, r0
1000281e:	68fb      	ldr	r3, [r7, #12]
10002820:	1ad3      	subs	r3, r2, r3
10002822:	f241 3288 	movw	r2, #5000	@ 0x1388
10002826:	4293      	cmp	r3, r2
10002828:	d901      	bls.n	1000282e <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
1000282a:	2303      	movs	r3, #3
1000282c:	e008      	b.n	10002840 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000282e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002832:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002836:	f003 0304 	and.w	r3, r3, #4
1000283a:	2b04      	cmp	r3, #4
1000283c:	d1ec      	bne.n	10002818 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
1000283e:	2300      	movs	r3, #0
}
10002840:	4618      	mov	r0, r3
10002842:	3710      	adds	r7, #16
10002844:	46bd      	mov	sp, r7
10002846:	bd80      	pop	{r7, pc}

10002848 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10002848:	b580      	push	{r7, lr}
1000284a:	b084      	sub	sp, #16
1000284c:	af00      	add	r7, sp, #0
1000284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10002850:	687b      	ldr	r3, [r7, #4]
10002852:	681b      	ldr	r3, [r3, #0]
10002854:	2b00      	cmp	r3, #0
10002856:	f000 8174 	beq.w	10002b42 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
1000285a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000285e:	6a1b      	ldr	r3, [r3, #32]
10002860:	f003 0303 	and.w	r3, r3, #3
10002864:	2b02      	cmp	r3, #2
10002866:	d108      	bne.n	1000287a <RCC_PLL1_Config+0x32>
10002868:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000286c:	6a1b      	ldr	r3, [r3, #32]
1000286e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002876:	f000 8162 	beq.w	10002b3e <RCC_PLL1_Config+0x2f6>
1000287a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000287e:	6a1b      	ldr	r3, [r3, #32]
10002880:	f003 0303 	and.w	r3, r3, #3
10002884:	2b03      	cmp	r3, #3
10002886:	d108      	bne.n	1000289a <RCC_PLL1_Config+0x52>
10002888:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000288c:	6a1b      	ldr	r3, [r3, #32]
1000288e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002892:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002896:	f000 8152 	beq.w	10002b3e <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
1000289a:	687b      	ldr	r3, [r7, #4]
1000289c:	681b      	ldr	r3, [r3, #0]
1000289e:	2b02      	cmp	r3, #2
100028a0:	f040 8123 	bne.w	10002aea <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100028a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100028ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100028b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
100028b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100028c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100028c4:	f023 0301 	bic.w	r3, r3, #1
100028c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100028cc:	f7fe fe76 	bl	100015bc <HAL_GetTick>
100028d0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100028d2:	e008      	b.n	100028e6 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100028d4:	f7fe fe72 	bl	100015bc <HAL_GetTick>
100028d8:	4602      	mov	r2, r0
100028da:	68fb      	ldr	r3, [r7, #12]
100028dc:	1ad3      	subs	r3, r2, r3
100028de:	2b64      	cmp	r3, #100	@ 0x64
100028e0:	d901      	bls.n	100028e6 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100028e2:	2303      	movs	r3, #3
100028e4:	e12e      	b.n	10002b44 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100028e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100028ee:	f003 0302 	and.w	r3, r3, #2
100028f2:	2b02      	cmp	r3, #2
100028f4:	d0ee      	beq.n	100028d4 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100028f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100028fc:	f003 0307 	and.w	r3, r3, #7
10002900:	2b02      	cmp	r3, #2
10002902:	d112      	bne.n	1000292a <RCC_PLL1_Config+0xe2>
10002904:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000290a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000290e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002912:	d10a      	bne.n	1000292a <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10002914:	687b      	ldr	r3, [r7, #4]
10002916:	685a      	ldr	r2, [r3, #4]
10002918:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000291e:	f003 0303 	and.w	r3, r3, #3
10002922:	429a      	cmp	r2, r3
10002924:	d00c      	beq.n	10002940 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10002926:	2301      	movs	r3, #1
10002928:	e10c      	b.n	10002b44 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
1000292a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002930:	f023 0203 	bic.w	r2, r3, #3
10002934:	687b      	ldr	r3, [r7, #4]
10002936:	685b      	ldr	r3, [r3, #4]
10002938:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000293c:	4313      	orrs	r3, r2
1000293e:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10002940:	e008      	b.n	10002954 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002942:	f7fe fe3b 	bl	100015bc <HAL_GetTick>
10002946:	4602      	mov	r2, r0
10002948:	68fb      	ldr	r3, [r7, #12]
1000294a:	1ad3      	subs	r3, r2, r3
1000294c:	2b64      	cmp	r3, #100	@ 0x64
1000294e:	d901      	bls.n	10002954 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10002950:	2303      	movs	r3, #3
10002952:	e0f7      	b.n	10002b44 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10002954:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000295a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000295e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002962:	d1ee      	bne.n	10002942 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10002964:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002968:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
1000296c:	4b77      	ldr	r3, [pc, #476]	@ (10002b4c <RCC_PLL1_Config+0x304>)
1000296e:	4013      	ands	r3, r2
10002970:	687a      	ldr	r2, [r7, #4]
10002972:	68d2      	ldr	r2, [r2, #12]
10002974:	1e51      	subs	r1, r2, #1
10002976:	687a      	ldr	r2, [r7, #4]
10002978:	6892      	ldr	r2, [r2, #8]
1000297a:	3a01      	subs	r2, #1
1000297c:	0412      	lsls	r2, r2, #16
1000297e:	430a      	orrs	r2, r1
10002980:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002984:	4313      	orrs	r3, r2
10002986:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
1000298a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10002992:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10002996:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
1000299a:	687a      	ldr	r2, [r7, #4]
1000299c:	6912      	ldr	r2, [r2, #16]
1000299e:	1e51      	subs	r1, r2, #1
100029a0:	687a      	ldr	r2, [r7, #4]
100029a2:	6952      	ldr	r2, [r2, #20]
100029a4:	3a01      	subs	r2, #1
100029a6:	0212      	lsls	r2, r2, #8
100029a8:	4311      	orrs	r1, r2
100029aa:	687a      	ldr	r2, [r7, #4]
100029ac:	6992      	ldr	r2, [r2, #24]
100029ae:	3a01      	subs	r2, #1
100029b0:	0412      	lsls	r2, r2, #16
100029b2:	430a      	orrs	r2, r1
100029b4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100029b8:	4313      	orrs	r3, r2
100029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
100029be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100029c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100029ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100029ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
100029d2:	687b      	ldr	r3, [r7, #4]
100029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100029d6:	2b02      	cmp	r3, #2
100029d8:	d003      	beq.n	100029e2 <RCC_PLL1_Config+0x19a>
100029da:	687b      	ldr	r3, [r7, #4]
100029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100029de:	2b00      	cmp	r3, #0
100029e0:	d10c      	bne.n	100029fc <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100029e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100029ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100029ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100029f2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100029f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
100029fa:	e00f      	b.n	10002a1c <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100029fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10002a04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002a08:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002a0c:	687a      	ldr	r2, [r7, #4]
10002a0e:	6a12      	ldr	r2, [r2, #32]
10002a10:	00d2      	lsls	r2, r2, #3
10002a12:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a16:	4313      	orrs	r3, r2
10002a18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10002a1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10002a24:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002a2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002a30:	687b      	ldr	r3, [r7, #4]
10002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002a34:	2b02      	cmp	r3, #2
10002a36:	d124      	bne.n	10002a82 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10002a38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
10002a40:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002a44:	687b      	ldr	r3, [r7, #4]
10002a46:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10002a48:	687b      	ldr	r3, [r7, #4]
10002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002a4c:	4319      	orrs	r1, r3
10002a4e:	687b      	ldr	r3, [r7, #4]
10002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002a52:	4319      	orrs	r1, r3
10002a54:	687b      	ldr	r3, [r7, #4]
10002a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10002a58:	4319      	orrs	r1, r3
10002a5a:	687b      	ldr	r3, [r7, #4]
10002a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002a5e:	041b      	lsls	r3, r3, #16
10002a60:	430b      	orrs	r3, r1
10002a62:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a66:	4313      	orrs	r3, r2
10002a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10002a6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002a74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002a78:	f043 0304 	orr.w	r3, r3, #4
10002a7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
10002a80:	e009      	b.n	10002a96 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10002a82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002a8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002a8e:	f023 0304 	bic.w	r3, r3, #4
10002a92:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10002a96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002a9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002aa2:	f043 0301 	orr.w	r3, r3, #1
10002aa6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002aaa:	f7fe fd87 	bl	100015bc <HAL_GetTick>
10002aae:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002ab0:	e008      	b.n	10002ac4 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002ab2:	f7fe fd83 	bl	100015bc <HAL_GetTick>
10002ab6:	4602      	mov	r2, r0
10002ab8:	68fb      	ldr	r3, [r7, #12]
10002aba:	1ad3      	subs	r3, r2, r3
10002abc:	2b64      	cmp	r3, #100	@ 0x64
10002abe:	d901      	bls.n	10002ac4 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10002ac0:	2303      	movs	r3, #3
10002ac2:	e03f      	b.n	10002b44 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002ac4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002acc:	f003 0302 	and.w	r3, r3, #2
10002ad0:	2b02      	cmp	r3, #2
10002ad2:	d1ee      	bne.n	10002ab2 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002ad4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002adc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ae0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002ae4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10002ae8:	e02b      	b.n	10002b42 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002aea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002af2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002afa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10002afe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002b06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b0a:	f023 0301 	bic.w	r3, r3, #1
10002b0e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002b12:	f7fe fd53 	bl	100015bc <HAL_GetTick>
10002b16:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002b18:	e008      	b.n	10002b2c <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002b1a:	f7fe fd4f 	bl	100015bc <HAL_GetTick>
10002b1e:	4602      	mov	r2, r0
10002b20:	68fb      	ldr	r3, [r7, #12]
10002b22:	1ad3      	subs	r3, r2, r3
10002b24:	2b64      	cmp	r3, #100	@ 0x64
10002b26:	d901      	bls.n	10002b2c <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10002b28:	2303      	movs	r3, #3
10002b2a:	e00b      	b.n	10002b44 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002b2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002b34:	f003 0302 	and.w	r3, r3, #2
10002b38:	2b02      	cmp	r3, #2
10002b3a:	d0ee      	beq.n	10002b1a <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10002b3c:	e001      	b.n	10002b42 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002b3e:	2301      	movs	r3, #1
10002b40:	e000      	b.n	10002b44 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10002b42:	2300      	movs	r3, #0

}
10002b44:	4618      	mov	r0, r3
10002b46:	3710      	adds	r7, #16
10002b48:	46bd      	mov	sp, r7
10002b4a:	bd80      	pop	{r7, pc}
10002b4c:	ffc0fe00 	.word	0xffc0fe00

10002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10002b50:	b580      	push	{r7, lr}
10002b52:	b084      	sub	sp, #16
10002b54:	af00      	add	r7, sp, #0
10002b56:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10002b58:	2300      	movs	r3, #0
10002b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10002b5c:	687b      	ldr	r3, [r7, #4]
10002b5e:	2b00      	cmp	r3, #0
10002b60:	d101      	bne.n	10002b66 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10002b62:	2301      	movs	r3, #1
10002b64:	e102      	b.n	10002d6c <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10002b66:	687b      	ldr	r3, [r7, #4]
10002b68:	681b      	ldr	r3, [r3, #0]
10002b6a:	f003 0301 	and.w	r3, r3, #1
10002b6e:	2b00      	cmp	r3, #0
10002b70:	d00b      	beq.n	10002b8a <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10002b72:	687b      	ldr	r3, [r7, #4]
10002b74:	3304      	adds	r3, #4
10002b76:	4618      	mov	r0, r3
10002b78:	f000 f8fc 	bl	10002d74 <RCC_MPUConfig>
10002b7c:	4603      	mov	r3, r0
10002b7e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002b80:	7bfb      	ldrb	r3, [r7, #15]
10002b82:	2b00      	cmp	r3, #0
10002b84:	d001      	beq.n	10002b8a <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10002b86:	7bfb      	ldrb	r3, [r7, #15]
10002b88:	e0f0      	b.n	10002d6c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10002b8a:	687b      	ldr	r3, [r7, #4]
10002b8c:	681b      	ldr	r3, [r3, #0]
10002b8e:	f003 0302 	and.w	r3, r3, #2
10002b92:	2b00      	cmp	r3, #0
10002b94:	d00b      	beq.n	10002bae <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10002b96:	687b      	ldr	r3, [r7, #4]
10002b98:	330c      	adds	r3, #12
10002b9a:	4618      	mov	r0, r3
10002b9c:	f000 f960 	bl	10002e60 <RCC_AXISSConfig>
10002ba0:	4603      	mov	r3, r0
10002ba2:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002ba4:	7bfb      	ldrb	r3, [r7, #15]
10002ba6:	2b00      	cmp	r3, #0
10002ba8:	d001      	beq.n	10002bae <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10002baa:	7bfb      	ldrb	r3, [r7, #15]
10002bac:	e0de      	b.n	10002d6c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10002bae:	687b      	ldr	r3, [r7, #4]
10002bb0:	681b      	ldr	r3, [r3, #0]
10002bb2:	f003 0304 	and.w	r3, r3, #4
10002bb6:	2b00      	cmp	r3, #0
10002bb8:	d00b      	beq.n	10002bd2 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10002bba:	687b      	ldr	r3, [r7, #4]
10002bbc:	3314      	adds	r3, #20
10002bbe:	4618      	mov	r0, r3
10002bc0:	f000 f9e6 	bl	10002f90 <RCC_MCUConfig>
10002bc4:	4603      	mov	r3, r0
10002bc6:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002bc8:	7bfb      	ldrb	r3, [r7, #15]
10002bca:	2b00      	cmp	r3, #0
10002bcc:	d001      	beq.n	10002bd2 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10002bce:	7bfb      	ldrb	r3, [r7, #15]
10002bd0:	e0cc      	b.n	10002d6c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10002bd2:	687b      	ldr	r3, [r7, #4]
10002bd4:	681b      	ldr	r3, [r3, #0]
10002bd6:	f003 0308 	and.w	r3, r3, #8
10002bda:	2b00      	cmp	r3, #0
10002bdc:	d020      	beq.n	10002c20 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10002bde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10002be4:	f023 0207 	bic.w	r2, r3, #7
10002be8:	687b      	ldr	r3, [r7, #4]
10002bea:	69db      	ldr	r3, [r3, #28]
10002bec:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002bf0:	4313      	orrs	r3, r2
10002bf2:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002bf4:	f7fe fce2 	bl	100015bc <HAL_GetTick>
10002bf8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002bfa:	e009      	b.n	10002c10 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002bfc:	f7fe fcde 	bl	100015bc <HAL_GetTick>
10002c00:	4602      	mov	r2, r0
10002c02:	68bb      	ldr	r3, [r7, #8]
10002c04:	1ad3      	subs	r3, r2, r3
10002c06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002c0a:	d901      	bls.n	10002c10 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10002c0c:	2303      	movs	r3, #3
10002c0e:	e0ad      	b.n	10002d6c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002c10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10002c16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002c1e:	d1ed      	bne.n	10002bfc <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10002c20:	687b      	ldr	r3, [r7, #4]
10002c22:	681b      	ldr	r3, [r3, #0]
10002c24:	f003 0310 	and.w	r3, r3, #16
10002c28:	2b00      	cmp	r3, #0
10002c2a:	d020      	beq.n	10002c6e <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10002c2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10002c32:	f023 0207 	bic.w	r2, r3, #7
10002c36:	687b      	ldr	r3, [r7, #4]
10002c38:	6a1b      	ldr	r3, [r3, #32]
10002c3a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002c3e:	4313      	orrs	r3, r2
10002c40:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002c42:	f7fe fcbb 	bl	100015bc <HAL_GetTick>
10002c46:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10002c48:	e009      	b.n	10002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002c4a:	f7fe fcb7 	bl	100015bc <HAL_GetTick>
10002c4e:	4602      	mov	r2, r0
10002c50:	68bb      	ldr	r3, [r7, #8]
10002c52:	1ad3      	subs	r3, r2, r3
10002c54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002c58:	d901      	bls.n	10002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10002c5a:	2303      	movs	r3, #3
10002c5c:	e086      	b.n	10002d6c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10002c5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10002c64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002c6c:	d1ed      	bne.n	10002c4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10002c6e:	687b      	ldr	r3, [r7, #4]
10002c70:	681b      	ldr	r3, [r3, #0]
10002c72:	f003 0320 	and.w	r3, r3, #32
10002c76:	2b00      	cmp	r3, #0
10002c78:	d023      	beq.n	10002cc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10002c7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c7e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10002c82:	f023 0207 	bic.w	r2, r3, #7
10002c86:	687b      	ldr	r3, [r7, #4]
10002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002c8a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002c8e:	4313      	orrs	r3, r2
10002c90:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002c94:	f7fe fc92 	bl	100015bc <HAL_GetTick>
10002c98:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002c9a:	e009      	b.n	10002cb0 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002c9c:	f7fe fc8e 	bl	100015bc <HAL_GetTick>
10002ca0:	4602      	mov	r2, r0
10002ca2:	68bb      	ldr	r3, [r7, #8]
10002ca4:	1ad3      	subs	r3, r2, r3
10002ca6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002caa:	d901      	bls.n	10002cb0 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10002cac:	2303      	movs	r3, #3
10002cae:	e05d      	b.n	10002d6c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002cb0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002cb4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10002cb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002cc0:	d1ec      	bne.n	10002c9c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10002cc2:	687b      	ldr	r3, [r7, #4]
10002cc4:	681b      	ldr	r3, [r3, #0]
10002cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10002cca:	2b00      	cmp	r3, #0
10002ccc:	d023      	beq.n	10002d16 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10002cce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002cd2:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10002cd6:	f023 0207 	bic.w	r2, r3, #7
10002cda:	687b      	ldr	r3, [r7, #4]
10002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002cde:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002ce2:	4313      	orrs	r3, r2
10002ce4:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002ce8:	f7fe fc68 	bl	100015bc <HAL_GetTick>
10002cec:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002cee:	e009      	b.n	10002d04 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002cf0:	f7fe fc64 	bl	100015bc <HAL_GetTick>
10002cf4:	4602      	mov	r2, r0
10002cf6:	68bb      	ldr	r3, [r7, #8]
10002cf8:	1ad3      	subs	r3, r2, r3
10002cfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002cfe:	d901      	bls.n	10002d04 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10002d00:	2303      	movs	r3, #3
10002d02:	e033      	b.n	10002d6c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002d04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d08:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10002d0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002d10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002d14:	d1ec      	bne.n	10002cf0 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10002d16:	687b      	ldr	r3, [r7, #4]
10002d18:	681b      	ldr	r3, [r3, #0]
10002d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10002d1e:	2b00      	cmp	r3, #0
10002d20:	d023      	beq.n	10002d6a <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10002d22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d26:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10002d2a:	f023 0207 	bic.w	r2, r3, #7
10002d2e:	687b      	ldr	r3, [r7, #4]
10002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002d32:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002d36:	4313      	orrs	r3, r2
10002d38:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002d3c:	f7fe fc3e 	bl	100015bc <HAL_GetTick>
10002d40:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10002d42:	e009      	b.n	10002d58 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002d44:	f7fe fc3a 	bl	100015bc <HAL_GetTick>
10002d48:	4602      	mov	r2, r0
10002d4a:	68bb      	ldr	r3, [r7, #8]
10002d4c:	1ad3      	subs	r3, r2, r3
10002d4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002d52:	d901      	bls.n	10002d58 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10002d54:	2303      	movs	r3, #3
10002d56:	e009      	b.n	10002d6c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10002d58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d5c:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10002d60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002d64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002d68:	d1ec      	bne.n	10002d44 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10002d6a:	2300      	movs	r3, #0
}
10002d6c:	4618      	mov	r0, r3
10002d6e:	3710      	adds	r7, #16
10002d70:	46bd      	mov	sp, r7
10002d72:	bd80      	pop	{r7, pc}

10002d74 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10002d74:	b580      	push	{r7, lr}
10002d76:	b084      	sub	sp, #16
10002d78:	af00      	add	r7, sp, #0
10002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10002d7c:	687b      	ldr	r3, [r7, #4]
10002d7e:	681b      	ldr	r3, [r3, #0]
10002d80:	2b03      	cmp	r3, #3
10002d82:	d840      	bhi.n	10002e06 <RCC_MPUConfig+0x92>
10002d84:	a201      	add	r2, pc, #4	@ (adr r2, 10002d8c <RCC_MPUConfig+0x18>)
10002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002d8a:	bf00      	nop
10002d8c:	10002d9d 	.word	0x10002d9d
10002d90:	10002db1 	.word	0x10002db1
10002d94:	10002dc7 	.word	0x10002dc7
10002d98:	10002ddb 	.word	0x10002ddb
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002d9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002da0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002da4:	f003 0301 	and.w	r3, r3, #1
10002da8:	2b01      	cmp	r3, #1
10002daa:	d02e      	beq.n	10002e0a <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10002dac:	2301      	movs	r3, #1
10002dae:	e053      	b.n	10002e58 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002db0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002db4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002dc0:	d025      	beq.n	10002e0e <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10002dc2:	2301      	movs	r3, #1
10002dc4:	e048      	b.n	10002e58 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002dc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002dce:	f003 0302 	and.w	r3, r3, #2
10002dd2:	2b02      	cmp	r3, #2
10002dd4:	d01d      	beq.n	10002e12 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10002dd6:	2301      	movs	r3, #1
10002dd8:	e03e      	b.n	10002e58 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002dda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002de2:	f003 0302 	and.w	r3, r3, #2
10002de6:	2b02      	cmp	r3, #2
10002de8:	d001      	beq.n	10002dee <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10002dea:	2301      	movs	r3, #1
10002dec:	e034      	b.n	10002e58 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10002dee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002df4:	f023 0207 	bic.w	r2, r3, #7
10002df8:	687b      	ldr	r3, [r7, #4]
10002dfa:	685b      	ldr	r3, [r3, #4]
10002dfc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002e00:	4313      	orrs	r3, r2
10002e02:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
10002e04:	e006      	b.n	10002e14 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10002e06:	2301      	movs	r3, #1
10002e08:	e026      	b.n	10002e58 <RCC_MPUConfig+0xe4>
      break;
10002e0a:	bf00      	nop
10002e0c:	e002      	b.n	10002e14 <RCC_MPUConfig+0xa0>
      break;
10002e0e:	bf00      	nop
10002e10:	e000      	b.n	10002e14 <RCC_MPUConfig+0xa0>
      break;
10002e12:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10002e14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e18:	6a1b      	ldr	r3, [r3, #32]
10002e1a:	f023 0203 	bic.w	r2, r3, #3
10002e1e:	687b      	ldr	r3, [r7, #4]
10002e20:	681b      	ldr	r3, [r3, #0]
10002e22:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002e26:	4313      	orrs	r3, r2
10002e28:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002e2a:	f7fe fbc7 	bl	100015bc <HAL_GetTick>
10002e2e:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10002e30:	e009      	b.n	10002e46 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002e32:	f7fe fbc3 	bl	100015bc <HAL_GetTick>
10002e36:	4602      	mov	r2, r0
10002e38:	68fb      	ldr	r3, [r7, #12]
10002e3a:	1ad3      	subs	r3, r2, r3
10002e3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002e40:	d901      	bls.n	10002e46 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10002e42:	2303      	movs	r3, #3
10002e44:	e008      	b.n	10002e58 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10002e46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e4a:	6a1b      	ldr	r3, [r3, #32]
10002e4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002e50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002e54:	d1ed      	bne.n	10002e32 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10002e56:	2300      	movs	r3, #0
}
10002e58:	4618      	mov	r0, r3
10002e5a:	3710      	adds	r7, #16
10002e5c:	46bd      	mov	sp, r7
10002e5e:	bd80      	pop	{r7, pc}

10002e60 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10002e60:	b580      	push	{r7, lr}
10002e62:	b084      	sub	sp, #16
10002e64:	af00      	add	r7, sp, #0
10002e66:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10002e68:	687b      	ldr	r3, [r7, #4]
10002e6a:	681b      	ldr	r3, [r3, #0]
10002e6c:	2b02      	cmp	r3, #2
10002e6e:	d01b      	beq.n	10002ea8 <RCC_AXISSConfig+0x48>
10002e70:	2b02      	cmp	r3, #2
10002e72:	d823      	bhi.n	10002ebc <RCC_AXISSConfig+0x5c>
10002e74:	2b00      	cmp	r3, #0
10002e76:	d002      	beq.n	10002e7e <RCC_AXISSConfig+0x1e>
10002e78:	2b01      	cmp	r3, #1
10002e7a:	d00a      	beq.n	10002e92 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10002e7c:	e01e      	b.n	10002ebc <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002e7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e82:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002e86:	f003 0301 	and.w	r3, r3, #1
10002e8a:	2b01      	cmp	r3, #1
10002e8c:	d018      	beq.n	10002ec0 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10002e8e:	2301      	movs	r3, #1
10002e90:	e079      	b.n	10002f86 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002e92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e96:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002ea2:	d00f      	beq.n	10002ec4 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10002ea4:	2301      	movs	r3, #1
10002ea6:	e06e      	b.n	10002f86 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002ea8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002eb0:	f003 0302 	and.w	r3, r3, #2
10002eb4:	2b02      	cmp	r3, #2
10002eb6:	d007      	beq.n	10002ec8 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10002eb8:	2301      	movs	r3, #1
10002eba:	e064      	b.n	10002f86 <RCC_AXISSConfig+0x126>
      break;
10002ebc:	bf00      	nop
10002ebe:	e004      	b.n	10002eca <RCC_AXISSConfig+0x6a>
      break;
10002ec0:	bf00      	nop
10002ec2:	e002      	b.n	10002eca <RCC_AXISSConfig+0x6a>
      break;
10002ec4:	bf00      	nop
10002ec6:	e000      	b.n	10002eca <RCC_AXISSConfig+0x6a>
      break;
10002ec8:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10002eca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002ed0:	f023 0207 	bic.w	r2, r3, #7
10002ed4:	687b      	ldr	r3, [r7, #4]
10002ed6:	681b      	ldr	r3, [r3, #0]
10002ed8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002edc:	4313      	orrs	r3, r2
10002ede:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10002ee0:	687b      	ldr	r3, [r7, #4]
10002ee2:	681b      	ldr	r3, [r3, #0]
10002ee4:	2b03      	cmp	r3, #3
10002ee6:	d016      	beq.n	10002f16 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002ee8:	f7fe fb68 	bl	100015bc <HAL_GetTick>
10002eec:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002eee:	e009      	b.n	10002f04 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002ef0:	f7fe fb64 	bl	100015bc <HAL_GetTick>
10002ef4:	4602      	mov	r2, r0
10002ef6:	68fb      	ldr	r3, [r7, #12]
10002ef8:	1ad3      	subs	r3, r2, r3
10002efa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002efe:	d901      	bls.n	10002f04 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10002f00:	2303      	movs	r3, #3
10002f02:	e040      	b.n	10002f86 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002f04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002f0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002f12:	d1ed      	bne.n	10002ef0 <RCC_AXISSConfig+0x90>
10002f14:	e015      	b.n	10002f42 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002f16:	f7fe fb51 	bl	100015bc <HAL_GetTick>
10002f1a:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002f1c:	e009      	b.n	10002f32 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002f1e:	f7fe fb4d 	bl	100015bc <HAL_GetTick>
10002f22:	4602      	mov	r2, r0
10002f24:	68fb      	ldr	r3, [r7, #12]
10002f26:	1ad3      	subs	r3, r2, r3
10002f28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002f2c:	d901      	bls.n	10002f32 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10002f2e:	2303      	movs	r3, #3
10002f30:	e029      	b.n	10002f86 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002f32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002f38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002f40:	d0ed      	beq.n	10002f1e <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10002f42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002f48:	f023 0207 	bic.w	r2, r3, #7
10002f4c:	687b      	ldr	r3, [r7, #4]
10002f4e:	685b      	ldr	r3, [r3, #4]
10002f50:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002f54:	4313      	orrs	r3, r2
10002f56:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002f58:	f7fe fb30 	bl	100015bc <HAL_GetTick>
10002f5c:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002f5e:	e009      	b.n	10002f74 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002f60:	f7fe fb2c 	bl	100015bc <HAL_GetTick>
10002f64:	4602      	mov	r2, r0
10002f66:	68fb      	ldr	r3, [r7, #12]
10002f68:	1ad3      	subs	r3, r2, r3
10002f6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002f6e:	d901      	bls.n	10002f74 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10002f70:	2303      	movs	r3, #3
10002f72:	e008      	b.n	10002f86 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002f74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002f7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002f82:	d1ed      	bne.n	10002f60 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10002f84:	2300      	movs	r3, #0
}
10002f86:	4618      	mov	r0, r3
10002f88:	3710      	adds	r7, #16
10002f8a:	46bd      	mov	sp, r7
10002f8c:	bd80      	pop	{r7, pc}
	...

10002f90 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10002f90:	b580      	push	{r7, lr}
10002f92:	b084      	sub	sp, #16
10002f94:	af00      	add	r7, sp, #0
10002f96:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10002f98:	687b      	ldr	r3, [r7, #4]
10002f9a:	681b      	ldr	r3, [r3, #0]
10002f9c:	2b03      	cmp	r3, #3
10002f9e:	d834      	bhi.n	1000300a <RCC_MCUConfig+0x7a>
10002fa0:	a201      	add	r2, pc, #4	@ (adr r2, 10002fa8 <RCC_MCUConfig+0x18>)
10002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002fa6:	bf00      	nop
10002fa8:	10002fb9 	.word	0x10002fb9
10002fac:	10002fcd 	.word	0x10002fcd
10002fb0:	10002fe3 	.word	0x10002fe3
10002fb4:	10002ff7 	.word	0x10002ff7
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002fb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fbc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002fc0:	f003 0301 	and.w	r3, r3, #1
10002fc4:	2b01      	cmp	r3, #1
10002fc6:	d022      	beq.n	1000300e <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10002fc8:	2301      	movs	r3, #1
10002fca:	e081      	b.n	100030d0 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002fcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fd0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002fdc:	d019      	beq.n	10003012 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10002fde:	2301      	movs	r3, #1
10002fe0:	e076      	b.n	100030d0 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002fe2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fe6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002fea:	f003 0310 	and.w	r3, r3, #16
10002fee:	2b10      	cmp	r3, #16
10002ff0:	d011      	beq.n	10003016 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10002ff2:	2301      	movs	r3, #1
10002ff4:	e06c      	b.n	100030d0 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002ff6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ffa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002ffe:	f003 0302 	and.w	r3, r3, #2
10003002:	2b02      	cmp	r3, #2
10003004:	d009      	beq.n	1000301a <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10003006:	2301      	movs	r3, #1
10003008:	e062      	b.n	100030d0 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
1000300a:	bf00      	nop
1000300c:	e006      	b.n	1000301c <RCC_MCUConfig+0x8c>
      break;
1000300e:	bf00      	nop
10003010:	e004      	b.n	1000301c <RCC_MCUConfig+0x8c>
      break;
10003012:	bf00      	nop
10003014:	e002      	b.n	1000301c <RCC_MCUConfig+0x8c>
      break;
10003016:	bf00      	nop
10003018:	e000      	b.n	1000301c <RCC_MCUConfig+0x8c>
      break;
1000301a:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
1000301c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003022:	f023 0203 	bic.w	r2, r3, #3
10003026:	687b      	ldr	r3, [r7, #4]
10003028:	681b      	ldr	r3, [r3, #0]
1000302a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000302e:	4313      	orrs	r3, r2
10003030:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003032:	f7fe fac3 	bl	100015bc <HAL_GetTick>
10003036:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10003038:	e009      	b.n	1000304e <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000303a:	f7fe fabf 	bl	100015bc <HAL_GetTick>
1000303e:	4602      	mov	r2, r0
10003040:	68fb      	ldr	r3, [r7, #12]
10003042:	1ad3      	subs	r3, r2, r3
10003044:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003048:	d901      	bls.n	1000304e <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
1000304a:	2303      	movs	r3, #3
1000304c:	e040      	b.n	100030d0 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
1000304e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000305c:	d1ed      	bne.n	1000303a <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000305e:	f000 f954 	bl	1000330a <HAL_RCC_GetSystemCoreClockFreq>
10003062:	4603      	mov	r3, r0
10003064:	4a1c      	ldr	r2, [pc, #112]	@ (100030d8 <RCC_MCUConfig+0x148>)
10003066:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10003068:	4b1c      	ldr	r3, [pc, #112]	@ (100030dc <RCC_MCUConfig+0x14c>)
1000306a:	681b      	ldr	r3, [r3, #0]
1000306c:	4618      	mov	r0, r3
1000306e:	f7fe fa5b 	bl	10001528 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10003072:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003076:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
1000307a:	f023 020f 	bic.w	r2, r3, #15
1000307e:	687b      	ldr	r3, [r7, #4]
10003080:	685b      	ldr	r3, [r3, #4]
10003082:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003086:	4313      	orrs	r3, r2
10003088:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000308c:	f7fe fa96 	bl	100015bc <HAL_GetTick>
10003090:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10003092:	e009      	b.n	100030a8 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003094:	f7fe fa92 	bl	100015bc <HAL_GetTick>
10003098:	4602      	mov	r2, r0
1000309a:	68fb      	ldr	r3, [r7, #12]
1000309c:	1ad3      	subs	r3, r2, r3
1000309e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100030a2:	d901      	bls.n	100030a8 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
100030a4:	2303      	movs	r3, #3
100030a6:	e013      	b.n	100030d0 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100030a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030ac:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100030b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100030b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100030b8:	d1ec      	bne.n	10003094 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100030ba:	f000 f926 	bl	1000330a <HAL_RCC_GetSystemCoreClockFreq>
100030be:	4603      	mov	r3, r0
100030c0:	4a05      	ldr	r2, [pc, #20]	@ (100030d8 <RCC_MCUConfig+0x148>)
100030c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100030c4:	4b05      	ldr	r3, [pc, #20]	@ (100030dc <RCC_MCUConfig+0x14c>)
100030c6:	681b      	ldr	r3, [r3, #0]
100030c8:	4618      	mov	r0, r3
100030ca:	f7fe fa2d 	bl	10001528 <HAL_InitTick>
#endif

  return HAL_OK;
100030ce:	2300      	movs	r3, #0
}
100030d0:	4618      	mov	r0, r3
100030d2:	3710      	adds	r7, #16
100030d4:	46bd      	mov	sp, r7
100030d6:	bd80      	pop	{r7, pc}
100030d8:	10020000 	.word	0x10020000
100030dc:	1002000c 	.word	0x1002000c

100030e0 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
100030e0:	b480      	push	{r7}
100030e2:	b089      	sub	sp, #36	@ 0x24
100030e4:	af00      	add	r7, sp, #0
100030e6:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
100030e8:	2300      	movs	r3, #0
100030ea:	61bb      	str	r3, [r7, #24]
100030ec:	2301      	movs	r3, #1
100030ee:	617b      	str	r3, [r7, #20]
100030f0:	2300      	movs	r3, #0
100030f2:	613b      	str	r3, [r7, #16]
100030f4:	2300      	movs	r3, #0
100030f6:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
100030f8:	f04f 0300 	mov.w	r3, #0
100030fc:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
100030fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003102:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10003106:	f003 0303 	and.w	r3, r3, #3
1000310a:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
1000310c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003110:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10003114:	0c1b      	lsrs	r3, r3, #16
10003116:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
1000311a:	3301      	adds	r3, #1
1000311c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
1000311e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003122:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003126:	0c1b      	lsrs	r3, r3, #16
10003128:	f003 0301 	and.w	r3, r3, #1
1000312c:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
1000312e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003132:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003136:	08db      	lsrs	r3, r3, #3
10003138:	f3c3 030c 	ubfx	r3, r3, #0, #13
1000313c:	693a      	ldr	r2, [r7, #16]
1000313e:	fb02 f303 	mul.w	r3, r2, r3
10003142:	ee07 3a90 	vmov	s15, r3
10003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000314a:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
1000314e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003152:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10003156:	f3c3 0308 	ubfx	r3, r3, #0, #9
1000315a:	3301      	adds	r3, #1
1000315c:	ee07 3a90 	vmov	s15, r3
10003160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003164:	edd7 6a02 	vldr	s13, [r7, #8]
10003168:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 100032c4 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
1000316c:	eec6 7a86 	vdiv.f32	s15, s13, s12
10003170:	ee77 7a27 	vadd.f32	s15, s14, s15
10003174:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10003178:	69bb      	ldr	r3, [r7, #24]
1000317a:	2b03      	cmp	r3, #3
1000317c:	d85b      	bhi.n	10003236 <HAL_RCC_GetPLL3ClockFreq+0x156>
1000317e:	a201      	add	r2, pc, #4	@ (adr r2, 10003184 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003184:	10003195 	.word	0x10003195
10003188:	100031f3 	.word	0x100031f3
1000318c:	10003211 	.word	0x10003211
10003190:	1000322f 	.word	0x1000322f
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10003194:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003198:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000319c:	f003 0304 	and.w	r3, r3, #4
100031a0:	2b04      	cmp	r3, #4
100031a2:	d117      	bne.n	100031d4 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100031a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031a8:	699b      	ldr	r3, [r3, #24]
100031aa:	f003 0303 	and.w	r3, r3, #3
100031ae:	4a46      	ldr	r2, [pc, #280]	@ (100032c8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100031b0:	fa22 f303 	lsr.w	r3, r2, r3
100031b4:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
100031b6:	68fa      	ldr	r2, [r7, #12]
100031b8:	697b      	ldr	r3, [r7, #20]
100031ba:	fbb2 f3f3 	udiv	r3, r2, r3
100031be:	ee07 3a90 	vmov	s15, r3
100031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100031c6:	ed97 7a07 	vldr	s14, [r7, #28]
100031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
100031ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
100031d2:	e030      	b.n	10003236 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
100031d4:	4a3c      	ldr	r2, [pc, #240]	@ (100032c8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100031d6:	697b      	ldr	r3, [r7, #20]
100031d8:	fbb2 f3f3 	udiv	r3, r2, r3
100031dc:	ee07 3a90 	vmov	s15, r3
100031e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
100031e4:	ed97 7a07 	vldr	s14, [r7, #28]
100031e8:	ee67 7a27 	vmul.f32	s15, s14, s15
100031ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100031f0:	e021      	b.n	10003236 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
100031f2:	4a36      	ldr	r2, [pc, #216]	@ (100032cc <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
100031f4:	697b      	ldr	r3, [r7, #20]
100031f6:	fbb2 f3f3 	udiv	r3, r2, r3
100031fa:	ee07 3a90 	vmov	s15, r3
100031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003202:	ed97 7a07 	vldr	s14, [r7, #28]
10003206:	ee67 7a27 	vmul.f32	s15, s14, s15
1000320a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000320e:	e012      	b.n	10003236 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10003210:	4a2f      	ldr	r2, [pc, #188]	@ (100032d0 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10003212:	697b      	ldr	r3, [r7, #20]
10003214:	fbb2 f3f3 	udiv	r3, r2, r3
10003218:	ee07 3a90 	vmov	s15, r3
1000321c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003220:	ed97 7a07 	vldr	s14, [r7, #28]
10003224:	ee67 7a27 	vmul.f32	s15, s14, s15
10003228:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000322c:	e003      	b.n	10003236 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
1000322e:	f04f 0300 	mov.w	r3, #0
10003232:	61fb      	str	r3, [r7, #28]
      break;
10003234:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10003236:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000323a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
1000323e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10003242:	3301      	adds	r3, #1
10003244:	ee07 3a90 	vmov	s15, r3
10003248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000324c:	edd7 6a07 	vldr	s13, [r7, #28]
10003250:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10003258:	ee17 2a90 	vmov	r2, s15
1000325c:	687b      	ldr	r3, [r7, #4]
1000325e:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10003260:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003264:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10003268:	0a1b      	lsrs	r3, r3, #8
1000326a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000326e:	3301      	adds	r3, #1
10003270:	ee07 3a90 	vmov	s15, r3
10003274:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003278:	edd7 6a07 	vldr	s13, [r7, #28]
1000327c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10003284:	ee17 2a90 	vmov	r2, s15
10003288:	687b      	ldr	r3, [r7, #4]
1000328a:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
1000328c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003290:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10003294:	0c1b      	lsrs	r3, r3, #16
10003296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000329a:	3301      	adds	r3, #1
1000329c:	ee07 3a90 	vmov	s15, r3
100032a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100032a4:	edd7 6a07 	vldr	s13, [r7, #28]
100032a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
100032ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100032b0:	ee17 2a90 	vmov	r2, s15
100032b4:	687b      	ldr	r3, [r7, #4]
100032b6:	609a      	str	r2, [r3, #8]
}
100032b8:	bf00      	nop
100032ba:	3724      	adds	r7, #36	@ 0x24
100032bc:	46bd      	mov	sp, r7
100032be:	f85d 7b04 	ldr.w	r7, [sp], #4
100032c2:	4770      	bx	lr
100032c4:	46000000 	.word	0x46000000
100032c8:	03d09000 	.word	0x03d09000
100032cc:	016e3600 	.word	0x016e3600
100032d0:	003d0900 	.word	0x003d0900

100032d4 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
100032d4:	b580      	push	{r7, lr}
100032d6:	b082      	sub	sp, #8
100032d8:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
100032da:	2300      	movs	r3, #0
100032dc:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
100032de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032e2:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100032e6:	f003 030f 	and.w	r3, r3, #15
100032ea:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
100032ec:	687b      	ldr	r3, [r7, #4]
100032ee:	2b09      	cmp	r3, #9
100032f0:	d901      	bls.n	100032f6 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
100032f2:	2309      	movs	r3, #9
100032f4:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
100032f6:	f000 f80f 	bl	10003318 <HAL_RCC_GetMCUSSFreq>
100032fa:	4602      	mov	r2, r0
100032fc:	687b      	ldr	r3, [r7, #4]
100032fe:	fa22 f303 	lsr.w	r3, r2, r3
}
10003302:	4618      	mov	r0, r3
10003304:	3708      	adds	r7, #8
10003306:	46bd      	mov	sp, r7
10003308:	bd80      	pop	{r7, pc}

1000330a <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
1000330a:	b580      	push	{r7, lr}
1000330c:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
1000330e:	f7ff ffe1 	bl	100032d4 <HAL_RCC_GetMCUFreq>
10003312:	4603      	mov	r3, r0
#endif
}
10003314:	4618      	mov	r0, r3
10003316:	bd80      	pop	{r7, pc}

10003318 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10003318:	b580      	push	{r7, lr}
1000331a:	b084      	sub	sp, #16
1000331c:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
1000331e:	2300      	movs	r3, #0
10003320:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10003322:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003328:	f003 0303 	and.w	r3, r3, #3
1000332c:	2b03      	cmp	r3, #3
1000332e:	d822      	bhi.n	10003376 <HAL_RCC_GetMCUSSFreq+0x5e>
10003330:	a201      	add	r2, pc, #4	@ (adr r2, 10003338 <HAL_RCC_GetMCUSSFreq+0x20>)
10003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003336:	bf00      	nop
10003338:	10003357 	.word	0x10003357
1000333c:	1000336b 	.word	0x1000336b
10003340:	10003371 	.word	0x10003371
10003344:	10003349 	.word	0x10003349
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10003348:	463b      	mov	r3, r7
1000334a:	4618      	mov	r0, r3
1000334c:	f7ff fec8 	bl	100030e0 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10003350:	683b      	ldr	r3, [r7, #0]
10003352:	60fb      	str	r3, [r7, #12]
      break;
10003354:	e00f      	b.n	10003376 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10003356:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000335a:	699b      	ldr	r3, [r3, #24]
1000335c:	f003 0303 	and.w	r3, r3, #3
10003360:	4a07      	ldr	r2, [pc, #28]	@ (10003380 <HAL_RCC_GetMCUSSFreq+0x68>)
10003362:	fa22 f303 	lsr.w	r3, r2, r3
10003366:	60fb      	str	r3, [r7, #12]

      break;
10003368:	e005      	b.n	10003376 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
1000336a:	4b06      	ldr	r3, [pc, #24]	@ (10003384 <HAL_RCC_GetMCUSSFreq+0x6c>)
1000336c:	60fb      	str	r3, [r7, #12]
      break;
1000336e:	e002      	b.n	10003376 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10003370:	4b05      	ldr	r3, [pc, #20]	@ (10003388 <HAL_RCC_GetMCUSSFreq+0x70>)
10003372:	60fb      	str	r3, [r7, #12]
      break;
10003374:	bf00      	nop
  }

  return mcussfreq;
10003376:	68fb      	ldr	r3, [r7, #12]
}
10003378:	4618      	mov	r0, r3
1000337a:	3710      	adds	r7, #16
1000337c:	46bd      	mov	sp, r7
1000337e:	bd80      	pop	{r7, pc}
10003380:	03d09000 	.word	0x03d09000
10003384:	016e3600 	.word	0x016e3600
10003388:	003d0900 	.word	0x003d0900

1000338c <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
1000338c:	b580      	push	{r7, lr}
1000338e:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10003390:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003394:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	@ 0xc18
10003398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
1000339c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
100033a0:	d107      	bne.n	100033b2 <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
100033a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
100033aa:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
100033ae:	f000 f802 	bl	100033b6 <HAL_RCC_WAKEUP_Callback>
  }
}
100033b2:	bf00      	nop
100033b4:	bd80      	pop	{r7, pc}

100033b6 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
100033b6:	b480      	push	{r7}
100033b8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
100033ba:	bf00      	nop
100033bc:	46bd      	mov	sp, r7
100033be:	f85d 7b04 	ldr.w	r7, [sp], #4
100033c2:	4770      	bx	lr

100033c4 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100033c4:	b580      	push	{r7, lr}
100033c6:	b084      	sub	sp, #16
100033c8:	af00      	add	r7, sp, #0
100033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
100033cc:	687b      	ldr	r3, [r7, #4]
100033ce:	681b      	ldr	r3, [r3, #0]
100033d0:	2b00      	cmp	r3, #0
100033d2:	f000 8171 	beq.w	100036b8 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
100033d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100033dc:	f003 0307 	and.w	r3, r3, #7
100033e0:	2b02      	cmp	r3, #2
100033e2:	d108      	bne.n	100033f6 <RCCEx_PLL2_Config+0x32>
100033e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100033ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100033ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100033f2:	f000 815f 	beq.w	100036b4 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
100033f6:	687b      	ldr	r3, [r7, #4]
100033f8:	681b      	ldr	r3, [r3, #0]
100033fa:	2b02      	cmp	r3, #2
100033fc:	f040 8130 	bne.w	10003660 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10003400:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003406:	f003 0303 	and.w	r3, r3, #3
1000340a:	2b00      	cmp	r3, #0
1000340c:	d008      	beq.n	10003420 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
1000340e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003414:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10003418:	2b01      	cmp	r3, #1
1000341a:	d001      	beq.n	10003420 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
1000341c:	2301      	movs	r3, #1
1000341e:	e14c      	b.n	100036ba <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003420:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003428:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000342c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003430:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10003434:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000343c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003440:	f023 0301 	bic.w	r3, r3, #1
10003444:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003448:	f7fe f8b8 	bl	100015bc <HAL_GetTick>
1000344c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000344e:	e008      	b.n	10003462 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003450:	f7fe f8b4 	bl	100015bc <HAL_GetTick>
10003454:	4602      	mov	r2, r0
10003456:	68fb      	ldr	r3, [r7, #12]
10003458:	1ad3      	subs	r3, r2, r3
1000345a:	2b64      	cmp	r3, #100	@ 0x64
1000345c:	d901      	bls.n	10003462 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000345e:	2303      	movs	r3, #3
10003460:	e12b      	b.n	100036ba <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003462:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000346a:	f003 0302 	and.w	r3, r3, #2
1000346e:	2b02      	cmp	r3, #2
10003470:	d0ee      	beq.n	10003450 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10003472:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003476:	6a1b      	ldr	r3, [r3, #32]
10003478:	f003 0303 	and.w	r3, r3, #3
1000347c:	2b02      	cmp	r3, #2
1000347e:	d107      	bne.n	10003490 <RCCEx_PLL2_Config+0xcc>
10003480:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003484:	6a1b      	ldr	r3, [r3, #32]
10003486:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000348a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000348e:	d00e      	beq.n	100034ae <RCCEx_PLL2_Config+0xea>
10003490:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003494:	6a1b      	ldr	r3, [r3, #32]
10003496:	f003 0303 	and.w	r3, r3, #3
1000349a:	2b03      	cmp	r3, #3
1000349c:	d112      	bne.n	100034c4 <RCCEx_PLL2_Config+0x100>
1000349e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034a2:	6a1b      	ldr	r3, [r3, #32]
100034a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100034a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100034ac:	d10a      	bne.n	100034c4 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100034ae:	687b      	ldr	r3, [r7, #4]
100034b0:	685a      	ldr	r2, [r3, #4]
100034b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100034b8:	f003 0303 	and.w	r3, r3, #3
100034bc:	429a      	cmp	r2, r3
100034be:	d00c      	beq.n	100034da <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
100034c0:	2301      	movs	r3, #1
100034c2:	e0fa      	b.n	100036ba <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100034c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100034ca:	f023 0203 	bic.w	r2, r3, #3
100034ce:	687b      	ldr	r3, [r7, #4]
100034d0:	685b      	ldr	r3, [r3, #4]
100034d2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100034d6:	4313      	orrs	r3, r2
100034d8:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
100034da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034de:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
100034e2:	4b78      	ldr	r3, [pc, #480]	@ (100036c4 <RCCEx_PLL2_Config+0x300>)
100034e4:	4013      	ands	r3, r2
100034e6:	687a      	ldr	r2, [r7, #4]
100034e8:	68d2      	ldr	r2, [r2, #12]
100034ea:	1e51      	subs	r1, r2, #1
100034ec:	687a      	ldr	r2, [r7, #4]
100034ee:	6892      	ldr	r2, [r2, #8]
100034f0:	3a01      	subs	r2, #1
100034f2:	0412      	lsls	r2, r2, #16
100034f4:	430a      	orrs	r2, r1
100034f6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100034fa:	4313      	orrs	r3, r2
100034fc:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
10003500:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003504:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10003508:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
1000350c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10003510:	687a      	ldr	r2, [r7, #4]
10003512:	6912      	ldr	r2, [r2, #16]
10003514:	1e51      	subs	r1, r2, #1
10003516:	687a      	ldr	r2, [r7, #4]
10003518:	6952      	ldr	r2, [r2, #20]
1000351a:	3a01      	subs	r2, #1
1000351c:	0212      	lsls	r2, r2, #8
1000351e:	4311      	orrs	r1, r2
10003520:	687a      	ldr	r2, [r7, #4]
10003522:	6992      	ldr	r2, [r2, #24]
10003524:	3a01      	subs	r2, #1
10003526:	0412      	lsls	r2, r2, #16
10003528:	430a      	orrs	r2, r1
1000352a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000352e:	4313      	orrs	r3, r2
10003530:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10003534:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000353c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10003544:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10003548:	687b      	ldr	r3, [r7, #4]
1000354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000354c:	2b02      	cmp	r3, #2
1000354e:	d003      	beq.n	10003558 <RCCEx_PLL2_Config+0x194>
10003550:	687b      	ldr	r3, [r7, #4]
10003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003554:	2b00      	cmp	r3, #0
10003556:	d10c      	bne.n	10003572 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10003558:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000355c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003560:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003564:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003568:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000356c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
10003570:	e00f      	b.n	10003592 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10003572:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000357a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000357e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003582:	687a      	ldr	r2, [r7, #4]
10003584:	6a12      	ldr	r2, [r2, #32]
10003586:	00d2      	lsls	r2, r2, #3
10003588:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000358c:	4313      	orrs	r3, r2
1000358e:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10003592:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003596:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000359a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000359e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100035a2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100035a6:	687b      	ldr	r3, [r7, #4]
100035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100035aa:	2b02      	cmp	r3, #2
100035ac:	d124      	bne.n	100035f8 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
100035ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
100035b6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
100035ba:	687b      	ldr	r3, [r7, #4]
100035bc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100035be:	687b      	ldr	r3, [r7, #4]
100035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100035c2:	4319      	orrs	r1, r3
100035c4:	687b      	ldr	r3, [r7, #4]
100035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100035c8:	4319      	orrs	r1, r3
100035ca:	687b      	ldr	r3, [r7, #4]
100035cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100035ce:	4319      	orrs	r1, r3
100035d0:	687b      	ldr	r3, [r7, #4]
100035d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100035d4:	041b      	lsls	r3, r3, #16
100035d6:	430b      	orrs	r3, r1
100035d8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100035dc:	4313      	orrs	r3, r2
100035de:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100035e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100035ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100035ee:	f043 0304 	orr.w	r3, r3, #4
100035f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
100035f6:	e009      	b.n	1000360c <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
100035f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003604:	f023 0304 	bic.w	r3, r3, #4
10003608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
1000360c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003614:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003618:	f043 0301 	orr.w	r3, r3, #1
1000361c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003620:	f7fd ffcc 	bl	100015bc <HAL_GetTick>
10003624:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10003626:	e008      	b.n	1000363a <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003628:	f7fd ffc8 	bl	100015bc <HAL_GetTick>
1000362c:	4602      	mov	r2, r0
1000362e:	68fb      	ldr	r3, [r7, #12]
10003630:	1ad3      	subs	r3, r2, r3
10003632:	2b64      	cmp	r3, #100	@ 0x64
10003634:	d901      	bls.n	1000363a <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10003636:	2303      	movs	r3, #3
10003638:	e03f      	b.n	100036ba <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000363a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000363e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003642:	f003 0302 	and.w	r3, r3, #2
10003646:	2b02      	cmp	r3, #2
10003648:	d1ee      	bne.n	10003628 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000364a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000364e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003652:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003656:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
1000365a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000365e:	e02b      	b.n	100036b8 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003660:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003668:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000366c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003670:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10003674:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000367c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003680:	f023 0301 	bic.w	r3, r3, #1
10003684:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003688:	f7fd ff98 	bl	100015bc <HAL_GetTick>
1000368c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000368e:	e008      	b.n	100036a2 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003690:	f7fd ff94 	bl	100015bc <HAL_GetTick>
10003694:	4602      	mov	r2, r0
10003696:	68fb      	ldr	r3, [r7, #12]
10003698:	1ad3      	subs	r3, r2, r3
1000369a:	2b64      	cmp	r3, #100	@ 0x64
1000369c:	d901      	bls.n	100036a2 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000369e:	2303      	movs	r3, #3
100036a0:	e00b      	b.n	100036ba <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100036a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100036aa:	f003 0302 	and.w	r3, r3, #2
100036ae:	2b02      	cmp	r3, #2
100036b0:	d0ee      	beq.n	10003690 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100036b2:	e001      	b.n	100036b8 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100036b4:	2301      	movs	r3, #1
100036b6:	e000      	b.n	100036ba <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
100036b8:	2300      	movs	r3, #0

}
100036ba:	4618      	mov	r0, r3
100036bc:	3710      	adds	r7, #16
100036be:	46bd      	mov	sp, r7
100036c0:	bd80      	pop	{r7, pc}
100036c2:	bf00      	nop
100036c4:	ffc0fe00 	.word	0xffc0fe00

100036c8 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100036c8:	b580      	push	{r7, lr}
100036ca:	b084      	sub	sp, #16
100036cc:	af00      	add	r7, sp, #0
100036ce:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100036d0:	687b      	ldr	r3, [r7, #4]
100036d2:	681b      	ldr	r3, [r3, #0]
100036d4:	2b00      	cmp	r3, #0
100036d6:	f000 815a 	beq.w	1000398e <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100036da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100036e0:	f003 0303 	and.w	r3, r3, #3
100036e4:	2b03      	cmp	r3, #3
100036e6:	d108      	bne.n	100036fa <RCCEx_PLL3_Config+0x32>
100036e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100036ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100036f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100036f6:	f000 8148 	beq.w	1000398a <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100036fa:	687b      	ldr	r3, [r7, #4]
100036fc:	681b      	ldr	r3, [r3, #0]
100036fe:	2b02      	cmp	r3, #2
10003700:	f040 8119 	bne.w	10003936 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003704:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003708:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000370c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003714:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10003718:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000371c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003720:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003724:	f023 0301 	bic.w	r3, r3, #1
10003728:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000372c:	f7fd ff46 	bl	100015bc <HAL_GetTick>
10003730:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003732:	e008      	b.n	10003746 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003734:	f7fd ff42 	bl	100015bc <HAL_GetTick>
10003738:	4602      	mov	r2, r0
1000373a:	68fb      	ldr	r3, [r7, #12]
1000373c:	1ad3      	subs	r3, r2, r3
1000373e:	2b64      	cmp	r3, #100	@ 0x64
10003740:	d901      	bls.n	10003746 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10003742:	2303      	movs	r3, #3
10003744:	e124      	b.n	10003990 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003746:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000374a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000374e:	f003 0302 	and.w	r3, r3, #2
10003752:	2b02      	cmp	r3, #2
10003754:	d0ee      	beq.n	10003734 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10003756:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000375a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000375e:	f023 0203 	bic.w	r2, r3, #3
10003762:	687b      	ldr	r3, [r7, #4]
10003764:	685b      	ldr	r3, [r3, #4]
10003766:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000376a:	4313      	orrs	r3, r2
1000376c:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003770:	e008      	b.n	10003784 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003772:	f7fd ff23 	bl	100015bc <HAL_GetTick>
10003776:	4602      	mov	r2, r0
10003778:	68fb      	ldr	r3, [r7, #12]
1000377a:	1ad3      	subs	r3, r2, r3
1000377c:	2b64      	cmp	r3, #100	@ 0x64
1000377e:	d901      	bls.n	10003784 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10003780:	2303      	movs	r3, #3
10003782:	e105      	b.n	10003990 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003784:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003788:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000378c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003794:	d1ed      	bne.n	10003772 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10003796:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000379a:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
1000379e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
100037a2:	687b      	ldr	r3, [r7, #4]
100037a4:	69db      	ldr	r3, [r3, #28]
100037a6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100037aa:	4313      	orrs	r3, r2
100037ac:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
100037b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037b4:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
100037b8:	4b77      	ldr	r3, [pc, #476]	@ (10003998 <RCCEx_PLL3_Config+0x2d0>)
100037ba:	4013      	ands	r3, r2
100037bc:	687a      	ldr	r2, [r7, #4]
100037be:	68d2      	ldr	r2, [r2, #12]
100037c0:	1e51      	subs	r1, r2, #1
100037c2:	687a      	ldr	r2, [r7, #4]
100037c4:	6892      	ldr	r2, [r2, #8]
100037c6:	3a01      	subs	r2, #1
100037c8:	0412      	lsls	r2, r2, #16
100037ca:	430a      	orrs	r2, r1
100037cc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100037d0:	4313      	orrs	r3, r2
100037d2:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
100037d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037da:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100037de:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100037e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100037e6:	687a      	ldr	r2, [r7, #4]
100037e8:	6912      	ldr	r2, [r2, #16]
100037ea:	1e51      	subs	r1, r2, #1
100037ec:	687a      	ldr	r2, [r7, #4]
100037ee:	6952      	ldr	r2, [r2, #20]
100037f0:	3a01      	subs	r2, #1
100037f2:	0212      	lsls	r2, r2, #8
100037f4:	4311      	orrs	r1, r2
100037f6:	687a      	ldr	r2, [r7, #4]
100037f8:	6992      	ldr	r2, [r2, #24]
100037fa:	3a01      	subs	r2, #1
100037fc:	0412      	lsls	r2, r2, #16
100037fe:	430a      	orrs	r2, r1
10003800:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003804:	4313      	orrs	r3, r2
10003806:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
1000380a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000380e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003812:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
1000381a:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
1000381e:	687b      	ldr	r3, [r7, #4]
10003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003822:	2b02      	cmp	r3, #2
10003824:	d003      	beq.n	1000382e <RCCEx_PLL3_Config+0x166>
10003826:	687b      	ldr	r3, [r7, #4]
10003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000382a:	2b00      	cmp	r3, #0
1000382c:	d10c      	bne.n	10003848 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
1000382e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003832:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003836:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000383a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000383e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003842:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
10003846:	e00f      	b.n	10003868 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10003848:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000384c:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003850:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003854:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003858:	687a      	ldr	r2, [r7, #4]
1000385a:	6a12      	ldr	r2, [r2, #32]
1000385c:	00d2      	lsls	r2, r2, #3
1000385e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003862:	4313      	orrs	r3, r2
10003864:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10003868:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000386c:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003870:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10003878:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000387c:	687b      	ldr	r3, [r7, #4]
1000387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003880:	2b02      	cmp	r3, #2
10003882:	d124      	bne.n	100038ce <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10003884:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003888:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
1000388c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003890:	687b      	ldr	r3, [r7, #4]
10003892:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10003894:	687b      	ldr	r3, [r7, #4]
10003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003898:	4319      	orrs	r1, r3
1000389a:	687b      	ldr	r3, [r7, #4]
1000389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000389e:	4319      	orrs	r1, r3
100038a0:	687b      	ldr	r3, [r7, #4]
100038a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100038a4:	4319      	orrs	r1, r3
100038a6:	687b      	ldr	r3, [r7, #4]
100038a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100038aa:	041b      	lsls	r3, r3, #16
100038ac:	430b      	orrs	r3, r1
100038ae:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100038b2:	4313      	orrs	r3, r2
100038b4:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
100038b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038bc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100038c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100038c4:	f043 0304 	orr.w	r3, r3, #4
100038c8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
100038cc:	e009      	b.n	100038e2 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100038ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038d2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100038d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100038da:	f023 0304 	bic.w	r3, r3, #4
100038de:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100038e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038e6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100038ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100038ee:	f043 0301 	orr.w	r3, r3, #1
100038f2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100038f6:	f7fd fe61 	bl	100015bc <HAL_GetTick>
100038fa:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100038fc:	e008      	b.n	10003910 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100038fe:	f7fd fe5d 	bl	100015bc <HAL_GetTick>
10003902:	4602      	mov	r2, r0
10003904:	68fb      	ldr	r3, [r7, #12]
10003906:	1ad3      	subs	r3, r2, r3
10003908:	2b64      	cmp	r3, #100	@ 0x64
1000390a:	d901      	bls.n	10003910 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
1000390c:	2303      	movs	r3, #3
1000390e:	e03f      	b.n	10003990 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003910:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003914:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003918:	f003 0302 	and.w	r3, r3, #2
1000391c:	2b02      	cmp	r3, #2
1000391e:	d1ee      	bne.n	100038fe <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003920:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003924:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003928:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000392c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10003930:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10003934:	e02b      	b.n	1000398e <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003936:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000393a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000393e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003946:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
1000394a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000394e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003952:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003956:	f023 0301 	bic.w	r3, r3, #1
1000395a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000395e:	f7fd fe2d 	bl	100015bc <HAL_GetTick>
10003962:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003964:	e008      	b.n	10003978 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003966:	f7fd fe29 	bl	100015bc <HAL_GetTick>
1000396a:	4602      	mov	r2, r0
1000396c:	68fb      	ldr	r3, [r7, #12]
1000396e:	1ad3      	subs	r3, r2, r3
10003970:	2b64      	cmp	r3, #100	@ 0x64
10003972:	d901      	bls.n	10003978 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10003974:	2303      	movs	r3, #3
10003976:	e00b      	b.n	10003990 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003978:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000397c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003980:	f003 0302 	and.w	r3, r3, #2
10003984:	2b02      	cmp	r3, #2
10003986:	d0ee      	beq.n	10003966 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10003988:	e001      	b.n	1000398e <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000398a:	2301      	movs	r3, #1
1000398c:	e000      	b.n	10003990 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
1000398e:	2300      	movs	r3, #0
}
10003990:	4618      	mov	r0, r3
10003992:	3710      	adds	r7, #16
10003994:	46bd      	mov	sp, r7
10003996:	bd80      	pop	{r7, pc}
10003998:	ffc0fe00 	.word	0xffc0fe00

1000399c <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
1000399c:	b580      	push	{r7, lr}
1000399e:	b084      	sub	sp, #16
100039a0:	af00      	add	r7, sp, #0
100039a2:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
100039a4:	687b      	ldr	r3, [r7, #4]
100039a6:	681b      	ldr	r3, [r3, #0]
100039a8:	2b00      	cmp	r3, #0
100039aa:	f000 8147 	beq.w	10003c3c <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100039ae:	687b      	ldr	r3, [r7, #4]
100039b0:	681b      	ldr	r3, [r3, #0]
100039b2:	2b02      	cmp	r3, #2
100039b4:	f040 8119 	bne.w	10003bea <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100039b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039bc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100039c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100039c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100039c8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
100039cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039d0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100039d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100039d8:	f023 0301 	bic.w	r3, r3, #1
100039dc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100039e0:	f7fd fdec 	bl	100015bc <HAL_GetTick>
100039e4:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100039e6:	e008      	b.n	100039fa <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100039e8:	f7fd fde8 	bl	100015bc <HAL_GetTick>
100039ec:	4602      	mov	r2, r0
100039ee:	68fb      	ldr	r3, [r7, #12]
100039f0:	1ad3      	subs	r3, r2, r3
100039f2:	2b64      	cmp	r3, #100	@ 0x64
100039f4:	d901      	bls.n	100039fa <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
100039f6:	2303      	movs	r3, #3
100039f8:	e121      	b.n	10003c3e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100039fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039fe:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003a02:	f003 0302 	and.w	r3, r3, #2
10003a06:	2b02      	cmp	r3, #2
10003a08:	d0ee      	beq.n	100039e8 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10003a0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a0e:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10003a12:	f023 0203 	bic.w	r2, r3, #3
10003a16:	687b      	ldr	r3, [r7, #4]
10003a18:	685b      	ldr	r3, [r3, #4]
10003a1a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003a1e:	4313      	orrs	r3, r2
10003a20:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10003a24:	e008      	b.n	10003a38 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003a26:	f7fd fdc9 	bl	100015bc <HAL_GetTick>
10003a2a:	4602      	mov	r2, r0
10003a2c:	68fb      	ldr	r3, [r7, #12]
10003a2e:	1ad3      	subs	r3, r2, r3
10003a30:	2b64      	cmp	r3, #100	@ 0x64
10003a32:	d901      	bls.n	10003a38 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10003a34:	2303      	movs	r3, #3
10003a36:	e102      	b.n	10003c3e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10003a38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a3c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10003a40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003a48:	d1ed      	bne.n	10003a26 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10003a4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a4e:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10003a52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10003a56:	687b      	ldr	r3, [r7, #4]
10003a58:	69db      	ldr	r3, [r3, #28]
10003a5a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003a5e:	4313      	orrs	r3, r2
10003a60:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10003a64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a68:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
10003a6c:	4b76      	ldr	r3, [pc, #472]	@ (10003c48 <RCCEx_PLL4_Config+0x2ac>)
10003a6e:	4013      	ands	r3, r2
10003a70:	687a      	ldr	r2, [r7, #4]
10003a72:	68d2      	ldr	r2, [r2, #12]
10003a74:	1e51      	subs	r1, r2, #1
10003a76:	687a      	ldr	r2, [r7, #4]
10003a78:	6892      	ldr	r2, [r2, #8]
10003a7a:	3a01      	subs	r2, #1
10003a7c:	0412      	lsls	r2, r2, #16
10003a7e:	430a      	orrs	r2, r1
10003a80:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003a84:	4313      	orrs	r3, r2
10003a86:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
10003a8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a8e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10003a92:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10003a96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10003a9a:	687a      	ldr	r2, [r7, #4]
10003a9c:	6912      	ldr	r2, [r2, #16]
10003a9e:	1e51      	subs	r1, r2, #1
10003aa0:	687a      	ldr	r2, [r7, #4]
10003aa2:	6952      	ldr	r2, [r2, #20]
10003aa4:	3a01      	subs	r2, #1
10003aa6:	0212      	lsls	r2, r2, #8
10003aa8:	4311      	orrs	r1, r2
10003aaa:	687a      	ldr	r2, [r7, #4]
10003aac:	6992      	ldr	r2, [r2, #24]
10003aae:	3a01      	subs	r2, #1
10003ab0:	0412      	lsls	r2, r2, #16
10003ab2:	430a      	orrs	r2, r1
10003ab4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003ab8:	4313      	orrs	r3, r2
10003aba:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10003abe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ac2:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10003ac6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10003ace:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10003ad2:	687b      	ldr	r3, [r7, #4]
10003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003ad6:	2b02      	cmp	r3, #2
10003ad8:	d003      	beq.n	10003ae2 <RCCEx_PLL4_Config+0x146>
10003ada:	687b      	ldr	r3, [r7, #4]
10003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003ade:	2b00      	cmp	r3, #0
10003ae0:	d10c      	bne.n	10003afc <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10003ae2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ae6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10003aea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003aee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003af2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003af6:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
10003afa:	e00f      	b.n	10003b1c <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10003afc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b00:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10003b04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003b08:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003b0c:	687a      	ldr	r2, [r7, #4]
10003b0e:	6a12      	ldr	r2, [r2, #32]
10003b10:	00d2      	lsls	r2, r2, #3
10003b12:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003b16:	4313      	orrs	r3, r2
10003b18:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10003b1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b20:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10003b24:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10003b2c:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003b30:	687b      	ldr	r3, [r7, #4]
10003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003b34:	2b02      	cmp	r3, #2
10003b36:	d124      	bne.n	10003b82 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10003b38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b3c:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
10003b40:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003b44:	687b      	ldr	r3, [r7, #4]
10003b46:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10003b48:	687b      	ldr	r3, [r7, #4]
10003b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003b4c:	4319      	orrs	r1, r3
10003b4e:	687b      	ldr	r3, [r7, #4]
10003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003b52:	4319      	orrs	r1, r3
10003b54:	687b      	ldr	r3, [r7, #4]
10003b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10003b58:	4319      	orrs	r1, r3
10003b5a:	687b      	ldr	r3, [r7, #4]
10003b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003b5e:	041b      	lsls	r3, r3, #16
10003b60:	430b      	orrs	r3, r1
10003b62:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003b66:	4313      	orrs	r3, r2
10003b68:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10003b6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b70:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003b74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b78:	f043 0304 	orr.w	r3, r3, #4
10003b7c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10003b80:	e009      	b.n	10003b96 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10003b82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b86:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003b8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b8e:	f023 0304 	bic.w	r3, r3, #4
10003b92:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10003b96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b9a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003b9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ba2:	f043 0301 	orr.w	r3, r3, #1
10003ba6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003baa:	f7fd fd07 	bl	100015bc <HAL_GetTick>
10003bae:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003bb0:	e008      	b.n	10003bc4 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003bb2:	f7fd fd03 	bl	100015bc <HAL_GetTick>
10003bb6:	4602      	mov	r2, r0
10003bb8:	68fb      	ldr	r3, [r7, #12]
10003bba:	1ad3      	subs	r3, r2, r3
10003bbc:	2b64      	cmp	r3, #100	@ 0x64
10003bbe:	d901      	bls.n	10003bc4 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10003bc0:	2303      	movs	r3, #3
10003bc2:	e03c      	b.n	10003c3e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003bc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bc8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003bcc:	f003 0302 	and.w	r3, r3, #2
10003bd0:	2b02      	cmp	r3, #2
10003bd2:	d1ee      	bne.n	10003bb2 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003bd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bd8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003bdc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003be0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10003be4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10003be8:	e028      	b.n	10003c3c <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003bea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bee:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003bf2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003bfa:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10003bfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c02:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003c06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c0a:	f023 0301 	bic.w	r3, r3, #1
10003c0e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003c12:	f7fd fcd3 	bl	100015bc <HAL_GetTick>
10003c16:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003c18:	e008      	b.n	10003c2c <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003c1a:	f7fd fccf 	bl	100015bc <HAL_GetTick>
10003c1e:	4602      	mov	r2, r0
10003c20:	68fb      	ldr	r3, [r7, #12]
10003c22:	1ad3      	subs	r3, r2, r3
10003c24:	2b64      	cmp	r3, #100	@ 0x64
10003c26:	d901      	bls.n	10003c2c <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10003c28:	2303      	movs	r3, #3
10003c2a:	e008      	b.n	10003c3e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003c2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c30:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003c34:	f003 0302 	and.w	r3, r3, #2
10003c38:	2b02      	cmp	r3, #2
10003c3a:	d0ee      	beq.n	10003c1a <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10003c3c:	2300      	movs	r3, #0
}
10003c3e:	4618      	mov	r0, r3
10003c40:	3710      	adds	r7, #16
10003c42:	46bd      	mov	sp, r7
10003c44:	bd80      	pop	{r7, pc}
10003c46:	bf00      	nop
10003c48:	ffc0fe00 	.word	0xffc0fe00

10003c4c <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10003c50:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
10003c54:	af00      	add	r7, sp, #0
10003c56:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c5e:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10003c60:	2300      	movs	r3, #0
10003c62:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
10003c66:	2300      	movs	r3, #0
10003c68:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10003c6c:	2300      	movs	r3, #0
10003c6e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10003c72:	2300      	movs	r3, #0
10003c74:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10003c78:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c80:	681b      	ldr	r3, [r3, #0]
10003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
10003c86:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
10003c8a:	2500      	movs	r5, #0
10003c8c:	ea54 0305 	orrs.w	r3, r4, r5
10003c90:	d011      	beq.n	10003cb6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10003c92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c96:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10003c9a:	f023 0103 	bic.w	r1, r3, #3
10003c9e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ca2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ca6:	681b      	ldr	r3, [r3, #0]
10003ca8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
10003cac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003cb0:	430b      	orrs	r3, r1
10003cb2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10003cb6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003cba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003cbe:	681b      	ldr	r3, [r3, #0]
10003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
10003cc4:	f002 0810 	and.w	r8, r2, #16
10003cc8:	f04f 0900 	mov.w	r9, #0
10003ccc:	ea58 0309 	orrs.w	r3, r8, r9
10003cd0:	d038      	beq.n	10003d44 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10003cd2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003cd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003cda:	681b      	ldr	r3, [r3, #0]
10003cdc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10003ce0:	2b01      	cmp	r3, #1
10003ce2:	d11d      	bne.n	10003d20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003ce4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ce8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003cec:	681b      	ldr	r3, [r3, #0]
10003cee:	3380      	adds	r3, #128	@ 0x80
10003cf0:	4618      	mov	r0, r3
10003cf2:	f7ff fe53 	bl	1000399c <RCCEx_PLL4_Config>
10003cf6:	4603      	mov	r3, r0
10003cf8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003cfc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d00:	2b00      	cmp	r3, #0
10003d02:	d003      	beq.n	10003d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10003d04:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d08:	f001 be2a 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003d0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d10:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003d14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003d1c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10003d20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d24:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
10003d28:	f023 0107 	bic.w	r1, r3, #7
10003d2c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d34:	681b      	ldr	r3, [r3, #0]
10003d36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10003d3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d3e:	430b      	orrs	r3, r1
10003d40:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10003d44:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d4c:	681b      	ldr	r3, [r3, #0]
10003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
10003d52:	f002 0a20 	and.w	sl, r2, #32
10003d56:	f04f 0b00 	mov.w	fp, #0
10003d5a:	ea5a 030b 	orrs.w	r3, sl, fp
10003d5e:	d038      	beq.n	10003dd2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10003d60:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d68:	681b      	ldr	r3, [r3, #0]
10003d6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10003d6e:	2b01      	cmp	r3, #1
10003d70:	d11d      	bne.n	10003dae <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003d72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d7a:	681b      	ldr	r3, [r3, #0]
10003d7c:	3380      	adds	r3, #128	@ 0x80
10003d7e:	4618      	mov	r0, r3
10003d80:	f7ff fe0c 	bl	1000399c <RCCEx_PLL4_Config>
10003d84:	4603      	mov	r3, r0
10003d86:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003d8a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d8e:	2b00      	cmp	r3, #0
10003d90:	d003      	beq.n	10003d9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10003d92:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d96:	f001 bde3 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003d9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d9e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003da2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003daa:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10003dae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003db2:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
10003db6:	f023 0107 	bic.w	r1, r3, #7
10003dba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003dbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003dc2:	681b      	ldr	r3, [r3, #0]
10003dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10003dc8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003dcc:	430b      	orrs	r3, r1
10003dce:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10003dd2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003dd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003dda:	681b      	ldr	r3, [r3, #0]
10003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
10003de0:	2100      	movs	r1, #0
10003de2:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
10003de6:	f003 0320 	and.w	r3, r3, #32
10003dea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
10003dee:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
10003df2:	460b      	mov	r3, r1
10003df4:	4313      	orrs	r3, r2
10003df6:	d038      	beq.n	10003e6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10003df8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003dfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e00:	681b      	ldr	r3, [r3, #0]
10003e02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10003e06:	2b01      	cmp	r3, #1
10003e08:	d11d      	bne.n	10003e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003e0a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e12:	681b      	ldr	r3, [r3, #0]
10003e14:	3344      	adds	r3, #68	@ 0x44
10003e16:	4618      	mov	r0, r3
10003e18:	f7ff fc56 	bl	100036c8 <RCCEx_PLL3_Config>
10003e1c:	4603      	mov	r3, r0
10003e1e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003e22:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e26:	2b00      	cmp	r3, #0
10003e28:	d003      	beq.n	10003e32 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10003e2a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e2e:	f001 bd97 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003e32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e36:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003e3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e3e:	f043 0320 	orr.w	r3, r3, #32
10003e42:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10003e46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10003e4e:	f023 0107 	bic.w	r1, r3, #7
10003e52:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e5a:	681b      	ldr	r3, [r3, #0]
10003e5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10003e60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e64:	430b      	orrs	r3, r1
10003e66:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10003e6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e72:	681b      	ldr	r3, [r3, #0]
10003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
10003e78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
10003e7c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
10003e80:	2300      	movs	r3, #0
10003e82:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
10003e86:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
10003e8a:	460b      	mov	r3, r1
10003e8c:	4313      	orrs	r3, r2
10003e8e:	d07e      	beq.n	10003f8e <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10003e90:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e98:	681b      	ldr	r3, [r3, #0]
10003e9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10003e9e:	2b04      	cmp	r3, #4
10003ea0:	d044      	beq.n	10003f2c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10003ea2:	2b04      	cmp	r3, #4
10003ea4:	d861      	bhi.n	10003f6a <HAL_RCCEx_PeriphCLKConfig+0x31e>
10003ea6:	2b00      	cmp	r3, #0
10003ea8:	d002      	beq.n	10003eb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
10003eaa:	2b01      	cmp	r3, #1
10003eac:	d01f      	beq.n	10003eee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10003eae:	e05c      	b.n	10003f6a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003eb0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003eb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003eb8:	681b      	ldr	r3, [r3, #0]
10003eba:	3380      	adds	r3, #128	@ 0x80
10003ebc:	4618      	mov	r0, r3
10003ebe:	f7ff fd6d 	bl	1000399c <RCCEx_PLL4_Config>
10003ec2:	4603      	mov	r3, r0
10003ec4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003ec8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ecc:	2b00      	cmp	r3, #0
10003ece:	d003      	beq.n	10003ed8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10003ed0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ed4:	f001 bd44 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003ed8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003edc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003ee0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ee4:	f043 0320 	orr.w	r3, r3, #32
10003ee8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003eec:	e03d      	b.n	10003f6a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003eee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ef2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ef6:	681b      	ldr	r3, [r3, #0]
10003ef8:	3344      	adds	r3, #68	@ 0x44
10003efa:	4618      	mov	r0, r3
10003efc:	f7ff fbe4 	bl	100036c8 <RCCEx_PLL3_Config>
10003f00:	4603      	mov	r3, r0
10003f02:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003f06:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f0a:	2b00      	cmp	r3, #0
10003f0c:	d003      	beq.n	10003f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10003f0e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f12:	f001 bd25 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003f16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f1a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f22:	f043 0320 	orr.w	r3, r3, #32
10003f26:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003f2a:	e01e      	b.n	10003f6a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003f2c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f34:	681b      	ldr	r3, [r3, #0]
10003f36:	3344      	adds	r3, #68	@ 0x44
10003f38:	4618      	mov	r0, r3
10003f3a:	f7ff fbc5 	bl	100036c8 <RCCEx_PLL3_Config>
10003f3e:	4603      	mov	r3, r0
10003f40:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003f44:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f48:	2b00      	cmp	r3, #0
10003f4a:	d003      	beq.n	10003f54 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10003f4c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f50:	f001 bd06 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003f54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f58:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003f64:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003f68:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10003f6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f6e:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
10003f72:	f023 0107 	bic.w	r1, r3, #7
10003f76:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f7e:	681b      	ldr	r3, [r3, #0]
10003f80:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10003f84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f88:	430b      	orrs	r3, r1
10003f8a:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10003f8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f96:	681b      	ldr	r3, [r3, #0]
10003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
10003f9c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
10003fa0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
10003fa4:	2300      	movs	r3, #0
10003fa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
10003faa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
10003fae:	460b      	mov	r3, r1
10003fb0:	4313      	orrs	r3, r2
10003fb2:	d07e      	beq.n	100040b2 <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10003fb4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fbc:	681b      	ldr	r3, [r3, #0]
10003fbe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10003fc2:	2b05      	cmp	r3, #5
10003fc4:	d044      	beq.n	10004050 <HAL_RCCEx_PeriphCLKConfig+0x404>
10003fc6:	2b05      	cmp	r3, #5
10003fc8:	d861      	bhi.n	1000408e <HAL_RCCEx_PeriphCLKConfig+0x442>
10003fca:	2b00      	cmp	r3, #0
10003fcc:	d002      	beq.n	10003fd4 <HAL_RCCEx_PeriphCLKConfig+0x388>
10003fce:	2b01      	cmp	r3, #1
10003fd0:	d01f      	beq.n	10004012 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10003fd2:	e05c      	b.n	1000408e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003fd4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fdc:	681b      	ldr	r3, [r3, #0]
10003fde:	3380      	adds	r3, #128	@ 0x80
10003fe0:	4618      	mov	r0, r3
10003fe2:	f7ff fcdb 	bl	1000399c <RCCEx_PLL4_Config>
10003fe6:	4603      	mov	r3, r0
10003fe8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003fec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ff0:	2b00      	cmp	r3, #0
10003ff2:	d003      	beq.n	10003ffc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10003ff4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ff8:	f001 bcb2 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003ffc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004000:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004004:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004008:	f043 0320 	orr.w	r3, r3, #32
1000400c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004010:	e03d      	b.n	1000408e <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004012:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004016:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000401a:	681b      	ldr	r3, [r3, #0]
1000401c:	3344      	adds	r3, #68	@ 0x44
1000401e:	4618      	mov	r0, r3
10004020:	f7ff fb52 	bl	100036c8 <RCCEx_PLL3_Config>
10004024:	4603      	mov	r3, r0
10004026:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000402a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000402e:	2b00      	cmp	r3, #0
10004030:	d003      	beq.n	1000403a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10004032:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004036:	f001 bc93 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000403a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000403e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004042:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004046:	f043 0320 	orr.w	r3, r3, #32
1000404a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000404e:	e01e      	b.n	1000408e <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004050:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004054:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004058:	681b      	ldr	r3, [r3, #0]
1000405a:	3344      	adds	r3, #68	@ 0x44
1000405c:	4618      	mov	r0, r3
1000405e:	f7ff fb33 	bl	100036c8 <RCCEx_PLL3_Config>
10004062:	4603      	mov	r3, r0
10004064:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004068:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000406c:	2b00      	cmp	r3, #0
1000406e:	d003      	beq.n	10004078 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10004070:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004074:	f001 bc74 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004078:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000407c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004080:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004088:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000408c:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
1000408e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004092:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
10004096:	f023 0107 	bic.w	r1, r3, #7
1000409a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000409e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040a2:	681b      	ldr	r3, [r3, #0]
100040a4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
100040a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040ac:	430b      	orrs	r3, r1
100040ae:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
100040b2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040ba:	681b      	ldr	r3, [r3, #0]
100040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
100040c0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
100040c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
100040c8:	2300      	movs	r3, #0
100040ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
100040ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
100040d2:	460b      	mov	r3, r1
100040d4:	4313      	orrs	r3, r2
100040d6:	d07e      	beq.n	100041d6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
100040d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040e0:	681b      	ldr	r3, [r3, #0]
100040e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
100040e6:	2b04      	cmp	r3, #4
100040e8:	d044      	beq.n	10004174 <HAL_RCCEx_PeriphCLKConfig+0x528>
100040ea:	2b04      	cmp	r3, #4
100040ec:	d861      	bhi.n	100041b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
100040ee:	2b00      	cmp	r3, #0
100040f0:	d002      	beq.n	100040f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
100040f2:	2b01      	cmp	r3, #1
100040f4:	d01f      	beq.n	10004136 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
100040f6:	e05c      	b.n	100041b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100040f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004100:	681b      	ldr	r3, [r3, #0]
10004102:	3380      	adds	r3, #128	@ 0x80
10004104:	4618      	mov	r0, r3
10004106:	f7ff fc49 	bl	1000399c <RCCEx_PLL4_Config>
1000410a:	4603      	mov	r3, r0
1000410c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004110:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004114:	2b00      	cmp	r3, #0
10004116:	d003      	beq.n	10004120 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10004118:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000411c:	f001 bc20 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004120:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004124:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004128:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000412c:	f043 0320 	orr.w	r3, r3, #32
10004130:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004134:	e03d      	b.n	100041b2 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004136:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000413a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000413e:	681b      	ldr	r3, [r3, #0]
10004140:	3344      	adds	r3, #68	@ 0x44
10004142:	4618      	mov	r0, r3
10004144:	f7ff fac0 	bl	100036c8 <RCCEx_PLL3_Config>
10004148:	4603      	mov	r3, r0
1000414a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000414e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004152:	2b00      	cmp	r3, #0
10004154:	d003      	beq.n	1000415e <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10004156:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000415a:	f001 bc01 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000415e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004162:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004166:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000416a:	f043 0320 	orr.w	r3, r3, #32
1000416e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004172:	e01e      	b.n	100041b2 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004174:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004178:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000417c:	681b      	ldr	r3, [r3, #0]
1000417e:	3344      	adds	r3, #68	@ 0x44
10004180:	4618      	mov	r0, r3
10004182:	f7ff faa1 	bl	100036c8 <RCCEx_PLL3_Config>
10004186:	4603      	mov	r3, r0
10004188:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000418c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004190:	2b00      	cmp	r3, #0
10004192:	d003      	beq.n	1000419c <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10004194:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004198:	f001 bbe2 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000419c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041a0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100041a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100041ac:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100041b0:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
100041b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041b6:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
100041ba:	f023 0107 	bic.w	r1, r3, #7
100041be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041c6:	681b      	ldr	r3, [r3, #0]
100041c8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
100041cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041d0:	430b      	orrs	r3, r1
100041d2:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
100041d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041de:	681b      	ldr	r3, [r3, #0]
100041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
100041e4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
100041e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
100041ec:	2300      	movs	r3, #0
100041ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
100041f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
100041f6:	460b      	mov	r3, r1
100041f8:	4313      	orrs	r3, r2
100041fa:	d07e      	beq.n	100042fa <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
100041fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004200:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004204:	681b      	ldr	r3, [r3, #0]
10004206:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
1000420a:	2b04      	cmp	r3, #4
1000420c:	d044      	beq.n	10004298 <HAL_RCCEx_PeriphCLKConfig+0x64c>
1000420e:	2b04      	cmp	r3, #4
10004210:	d861      	bhi.n	100042d6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
10004212:	2b00      	cmp	r3, #0
10004214:	d002      	beq.n	1000421c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
10004216:	2b01      	cmp	r3, #1
10004218:	d01f      	beq.n	1000425a <HAL_RCCEx_PeriphCLKConfig+0x60e>
1000421a:	e05c      	b.n	100042d6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000421c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004220:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004224:	681b      	ldr	r3, [r3, #0]
10004226:	3380      	adds	r3, #128	@ 0x80
10004228:	4618      	mov	r0, r3
1000422a:	f7ff fbb7 	bl	1000399c <RCCEx_PLL4_Config>
1000422e:	4603      	mov	r3, r0
10004230:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004234:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004238:	2b00      	cmp	r3, #0
1000423a:	d003      	beq.n	10004244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
1000423c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004240:	f001 bb8e 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004244:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004248:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000424c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004250:	f043 0320 	orr.w	r3, r3, #32
10004254:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004258:	e03d      	b.n	100042d6 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000425a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000425e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004262:	681b      	ldr	r3, [r3, #0]
10004264:	3344      	adds	r3, #68	@ 0x44
10004266:	4618      	mov	r0, r3
10004268:	f7ff fa2e 	bl	100036c8 <RCCEx_PLL3_Config>
1000426c:	4603      	mov	r3, r0
1000426e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004272:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004276:	2b00      	cmp	r3, #0
10004278:	d003      	beq.n	10004282 <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
1000427a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000427e:	f001 bb6f 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004282:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004286:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000428a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000428e:	f043 0320 	orr.w	r3, r3, #32
10004292:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004296:	e01e      	b.n	100042d6 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004298:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000429c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042a0:	681b      	ldr	r3, [r3, #0]
100042a2:	3344      	adds	r3, #68	@ 0x44
100042a4:	4618      	mov	r0, r3
100042a6:	f7ff fa0f 	bl	100036c8 <RCCEx_PLL3_Config>
100042aa:	4603      	mov	r3, r0
100042ac:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100042b0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100042b4:	2b00      	cmp	r3, #0
100042b6:	d003      	beq.n	100042c0 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
100042b8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100042bc:	f001 bb50 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100042c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042c4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100042c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100042d0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100042d4:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
100042d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042da:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
100042de:	f023 0107 	bic.w	r1, r3, #7
100042e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042ea:	681b      	ldr	r3, [r3, #0]
100042ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
100042f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042f4:	430b      	orrs	r3, r1
100042f6:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
100042fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004302:	681b      	ldr	r3, [r3, #0]
10004304:	e9d3 2300 	ldrd	r2, r3, [r3]
10004308:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
1000430c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
10004310:	2300      	movs	r3, #0
10004312:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
10004316:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
1000431a:	460b      	mov	r3, r1
1000431c:	4313      	orrs	r3, r2
1000431e:	d07e      	beq.n	1000441e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10004320:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004328:	681b      	ldr	r3, [r3, #0]
1000432a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
1000432e:	2b04      	cmp	r3, #4
10004330:	d044      	beq.n	100043bc <HAL_RCCEx_PeriphCLKConfig+0x770>
10004332:	2b04      	cmp	r3, #4
10004334:	d861      	bhi.n	100043fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10004336:	2b00      	cmp	r3, #0
10004338:	d002      	beq.n	10004340 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
1000433a:	2b01      	cmp	r3, #1
1000433c:	d01f      	beq.n	1000437e <HAL_RCCEx_PeriphCLKConfig+0x732>
1000433e:	e05c      	b.n	100043fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004340:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004344:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004348:	681b      	ldr	r3, [r3, #0]
1000434a:	3380      	adds	r3, #128	@ 0x80
1000434c:	4618      	mov	r0, r3
1000434e:	f7ff fb25 	bl	1000399c <RCCEx_PLL4_Config>
10004352:	4603      	mov	r3, r0
10004354:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004358:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000435c:	2b00      	cmp	r3, #0
1000435e:	d003      	beq.n	10004368 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
10004360:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004364:	f001 bafc 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004368:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000436c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004370:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004374:	f043 0310 	orr.w	r3, r3, #16
10004378:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000437c:	e03d      	b.n	100043fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000437e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004382:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004386:	681b      	ldr	r3, [r3, #0]
10004388:	3344      	adds	r3, #68	@ 0x44
1000438a:	4618      	mov	r0, r3
1000438c:	f7ff f99c 	bl	100036c8 <RCCEx_PLL3_Config>
10004390:	4603      	mov	r3, r0
10004392:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004396:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000439a:	2b00      	cmp	r3, #0
1000439c:	d003      	beq.n	100043a6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
1000439e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043a2:	f001 badd 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100043a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043aa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100043ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043b2:	f043 0320 	orr.w	r3, r3, #32
100043b6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100043ba:	e01e      	b.n	100043fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100043bc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043c4:	681b      	ldr	r3, [r3, #0]
100043c6:	3344      	adds	r3, #68	@ 0x44
100043c8:	4618      	mov	r0, r3
100043ca:	f7ff f97d 	bl	100036c8 <RCCEx_PLL3_Config>
100043ce:	4603      	mov	r3, r0
100043d0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100043d4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043d8:	2b00      	cmp	r3, #0
100043da:	d003      	beq.n	100043e4 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
100043dc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043e0:	f001 babe 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100043e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043e8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100043ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100043f4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100043f8:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
100043fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043fe:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
10004402:	f023 0107 	bic.w	r1, r3, #7
10004406:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000440a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000440e:	681b      	ldr	r3, [r3, #0]
10004410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
10004414:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004418:	430b      	orrs	r3, r1
1000441a:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
1000441e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004422:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004426:	681b      	ldr	r3, [r3, #0]
10004428:	e9d3 2300 	ldrd	r2, r3, [r3]
1000442c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
10004430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
10004434:	2300      	movs	r3, #0
10004436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
1000443a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
1000443e:	460b      	mov	r3, r1
10004440:	4313      	orrs	r3, r2
10004442:	d07e      	beq.n	10004542 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10004444:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004448:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000444c:	681b      	ldr	r3, [r3, #0]
1000444e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10004452:	2b04      	cmp	r3, #4
10004454:	d044      	beq.n	100044e0 <HAL_RCCEx_PeriphCLKConfig+0x894>
10004456:	2b04      	cmp	r3, #4
10004458:	d861      	bhi.n	1000451e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
1000445a:	2b00      	cmp	r3, #0
1000445c:	d002      	beq.n	10004464 <HAL_RCCEx_PeriphCLKConfig+0x818>
1000445e:	2b01      	cmp	r3, #1
10004460:	d01f      	beq.n	100044a2 <HAL_RCCEx_PeriphCLKConfig+0x856>
10004462:	e05c      	b.n	1000451e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004464:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004468:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000446c:	681b      	ldr	r3, [r3, #0]
1000446e:	3380      	adds	r3, #128	@ 0x80
10004470:	4618      	mov	r0, r3
10004472:	f7ff fa93 	bl	1000399c <RCCEx_PLL4_Config>
10004476:	4603      	mov	r3, r0
10004478:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000447c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004480:	2b00      	cmp	r3, #0
10004482:	d003      	beq.n	1000448c <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10004484:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004488:	f001 ba6a 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000448c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004490:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004494:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004498:	f043 0310 	orr.w	r3, r3, #16
1000449c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100044a0:	e03d      	b.n	1000451e <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100044a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044aa:	681b      	ldr	r3, [r3, #0]
100044ac:	3344      	adds	r3, #68	@ 0x44
100044ae:	4618      	mov	r0, r3
100044b0:	f7ff f90a 	bl	100036c8 <RCCEx_PLL3_Config>
100044b4:	4603      	mov	r3, r0
100044b6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100044ba:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100044be:	2b00      	cmp	r3, #0
100044c0:	d003      	beq.n	100044ca <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
100044c2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100044c6:	f001 ba4b 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100044ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044ce:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100044d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044d6:	f043 0320 	orr.w	r3, r3, #32
100044da:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100044de:	e01e      	b.n	1000451e <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100044e0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044e8:	681b      	ldr	r3, [r3, #0]
100044ea:	3344      	adds	r3, #68	@ 0x44
100044ec:	4618      	mov	r0, r3
100044ee:	f7ff f8eb 	bl	100036c8 <RCCEx_PLL3_Config>
100044f2:	4603      	mov	r3, r0
100044f4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100044f8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100044fc:	2b00      	cmp	r3, #0
100044fe:	d003      	beq.n	10004508 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10004500:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004504:	f001 ba2c 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004508:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000450c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004510:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004518:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000451c:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
1000451e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004522:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
10004526:	f023 0107 	bic.w	r1, r3, #7
1000452a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000452e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004532:	681b      	ldr	r3, [r3, #0]
10004534:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10004538:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000453c:	430b      	orrs	r3, r1
1000453e:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10004542:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004546:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000454a:	681b      	ldr	r3, [r3, #0]
1000454c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004550:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
10004554:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
10004558:	2300      	movs	r3, #0
1000455a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
1000455e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
10004562:	460b      	mov	r3, r1
10004564:	4313      	orrs	r3, r2
10004566:	d038      	beq.n	100045da <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10004568:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000456c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004570:	681b      	ldr	r3, [r3, #0]
10004572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10004576:	2b01      	cmp	r3, #1
10004578:	d11d      	bne.n	100045b6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000457a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000457e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004582:	681b      	ldr	r3, [r3, #0]
10004584:	3380      	adds	r3, #128	@ 0x80
10004586:	4618      	mov	r0, r3
10004588:	f7ff fa08 	bl	1000399c <RCCEx_PLL4_Config>
1000458c:	4603      	mov	r3, r0
1000458e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004592:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004596:	2b00      	cmp	r3, #0
10004598:	d003      	beq.n	100045a2 <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
1000459a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000459e:	f001 b9df 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100045a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045a6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100045aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045ae:	f043 0320 	orr.w	r3, r3, #32
100045b2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
100045b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045ba:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
100045be:	f023 0107 	bic.w	r1, r3, #7
100045c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045ca:	681b      	ldr	r3, [r3, #0]
100045cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
100045d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045d4:	430b      	orrs	r3, r1
100045d6:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
100045da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045e2:	681b      	ldr	r3, [r3, #0]
100045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
100045e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
100045ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
100045f0:	2300      	movs	r3, #0
100045f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
100045f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
100045fa:	460b      	mov	r3, r1
100045fc:	4313      	orrs	r3, r2
100045fe:	d05b      	beq.n	100046b8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10004600:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004604:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004608:	681b      	ldr	r3, [r3, #0]
1000460a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
1000460e:	2b01      	cmp	r3, #1
10004610:	d002      	beq.n	10004618 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
10004612:	2b05      	cmp	r3, #5
10004614:	d01f      	beq.n	10004656 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
10004616:	e03d      	b.n	10004694 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004618:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000461c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004620:	681b      	ldr	r3, [r3, #0]
10004622:	3380      	adds	r3, #128	@ 0x80
10004624:	4618      	mov	r0, r3
10004626:	f7ff f9b9 	bl	1000399c <RCCEx_PLL4_Config>
1000462a:	4603      	mov	r3, r0
1000462c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004630:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004634:	2b00      	cmp	r3, #0
10004636:	d003      	beq.n	10004640 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10004638:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000463c:	f001 b990 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004640:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004644:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004648:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000464c:	f043 0320 	orr.w	r3, r3, #32
10004650:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004654:	e01e      	b.n	10004694 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004656:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000465a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000465e:	681b      	ldr	r3, [r3, #0]
10004660:	3344      	adds	r3, #68	@ 0x44
10004662:	4618      	mov	r0, r3
10004664:	f7ff f830 	bl	100036c8 <RCCEx_PLL3_Config>
10004668:	4603      	mov	r3, r0
1000466a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000466e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004672:	2b00      	cmp	r3, #0
10004674:	d003      	beq.n	1000467e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10004676:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000467a:	f001 b971 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000467e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004682:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004686:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000468a:	f043 0320 	orr.w	r3, r3, #32
1000468e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004692:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10004694:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004698:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
1000469c:	f023 0107 	bic.w	r1, r3, #7
100046a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046a8:	681b      	ldr	r3, [r3, #0]
100046aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
100046ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100046b2:	430b      	orrs	r3, r1
100046b4:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
100046b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046c0:	681b      	ldr	r3, [r3, #0]
100046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
100046c6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
100046ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
100046ce:	2300      	movs	r3, #0
100046d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
100046d4:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
100046d8:	460b      	mov	r3, r1
100046da:	4313      	orrs	r3, r2
100046dc:	d038      	beq.n	10004750 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
100046de:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046e6:	681b      	ldr	r3, [r3, #0]
100046e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
100046ec:	2b01      	cmp	r3, #1
100046ee:	d11d      	bne.n	1000472c <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100046f0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046f8:	681b      	ldr	r3, [r3, #0]
100046fa:	3380      	adds	r3, #128	@ 0x80
100046fc:	4618      	mov	r0, r3
100046fe:	f7ff f94d 	bl	1000399c <RCCEx_PLL4_Config>
10004702:	4603      	mov	r3, r0
10004704:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004708:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000470c:	2b00      	cmp	r3, #0
1000470e:	d003      	beq.n	10004718 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
10004710:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004714:	f001 b924 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004718:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000471c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004720:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004724:	f043 0320 	orr.w	r3, r3, #32
10004728:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
1000472c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004730:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
10004734:	f023 0107 	bic.w	r1, r3, #7
10004738:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000473c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004740:	681b      	ldr	r3, [r3, #0]
10004742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10004746:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000474a:	430b      	orrs	r3, r1
1000474c:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10004750:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004754:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004758:	681b      	ldr	r3, [r3, #0]
1000475a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000475e:	f002 0302 	and.w	r3, r2, #2
10004762:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
10004766:	2300      	movs	r3, #0
10004768:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
1000476c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
10004770:	460b      	mov	r3, r1
10004772:	4313      	orrs	r3, r2
10004774:	d038      	beq.n	100047e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10004776:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000477a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000477e:	681b      	ldr	r3, [r3, #0]
10004780:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10004784:	2b01      	cmp	r3, #1
10004786:	d11d      	bne.n	100047c4 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004788:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000478c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004790:	681b      	ldr	r3, [r3, #0]
10004792:	3380      	adds	r3, #128	@ 0x80
10004794:	4618      	mov	r0, r3
10004796:	f7ff f901 	bl	1000399c <RCCEx_PLL4_Config>
1000479a:	4603      	mov	r3, r0
1000479c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100047a0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047a4:	2b00      	cmp	r3, #0
100047a6:	d003      	beq.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
100047a8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047ac:	f001 b8d8 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100047b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047b4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100047b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047bc:	f043 0320 	orr.w	r3, r3, #32
100047c0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
100047c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047c8:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
100047cc:	f023 0107 	bic.w	r1, r3, #7
100047d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047d8:	681b      	ldr	r3, [r3, #0]
100047da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
100047de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047e2:	430b      	orrs	r3, r1
100047e4:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100047e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047f0:	681b      	ldr	r3, [r3, #0]
100047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
100047f6:	f002 0304 	and.w	r3, r2, #4
100047fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
100047fe:	2300      	movs	r3, #0
10004800:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
10004804:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
10004808:	460b      	mov	r3, r1
1000480a:	4313      	orrs	r3, r2
1000480c:	d038      	beq.n	10004880 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
1000480e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004812:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004816:	681b      	ldr	r3, [r3, #0]
10004818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
1000481c:	2b01      	cmp	r3, #1
1000481e:	d11d      	bne.n	1000485c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004820:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004824:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004828:	681b      	ldr	r3, [r3, #0]
1000482a:	3380      	adds	r3, #128	@ 0x80
1000482c:	4618      	mov	r0, r3
1000482e:	f7ff f8b5 	bl	1000399c <RCCEx_PLL4_Config>
10004832:	4603      	mov	r3, r0
10004834:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004838:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000483c:	2b00      	cmp	r3, #0
1000483e:	d003      	beq.n	10004848 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
10004840:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004844:	f001 b88c 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004848:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000484c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004850:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004854:	f043 0320 	orr.w	r3, r3, #32
10004858:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
1000485c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004860:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10004864:	f023 0107 	bic.w	r1, r3, #7
10004868:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000486c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004870:	681b      	ldr	r3, [r3, #0]
10004872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10004876:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000487a:	430b      	orrs	r3, r1
1000487c:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10004880:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004884:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004888:	681b      	ldr	r3, [r3, #0]
1000488a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000488e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
10004892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
10004896:	2300      	movs	r3, #0
10004898:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
1000489c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
100048a0:	460b      	mov	r3, r1
100048a2:	4313      	orrs	r3, r2
100048a4:	d038      	beq.n	10004918 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
100048a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048ae:	681b      	ldr	r3, [r3, #0]
100048b0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
100048b4:	2b01      	cmp	r3, #1
100048b6:	d11d      	bne.n	100048f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100048b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048c0:	681b      	ldr	r3, [r3, #0]
100048c2:	3380      	adds	r3, #128	@ 0x80
100048c4:	4618      	mov	r0, r3
100048c6:	f7ff f869 	bl	1000399c <RCCEx_PLL4_Config>
100048ca:	4603      	mov	r3, r0
100048cc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100048d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100048d4:	2b00      	cmp	r3, #0
100048d6:	d003      	beq.n	100048e0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
100048d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100048dc:	f001 b840 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100048e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100048e4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100048e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100048ec:	f043 0320 	orr.w	r3, r3, #32
100048f0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
100048f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100048f8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
100048fc:	f023 0107 	bic.w	r1, r3, #7
10004900:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004904:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004908:	681b      	ldr	r3, [r3, #0]
1000490a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
1000490e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004912:	430b      	orrs	r3, r1
10004914:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10004918:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000491c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004920:	681b      	ldr	r3, [r3, #0]
10004922:	e9d3 2300 	ldrd	r2, r3, [r3]
10004926:	f002 0301 	and.w	r3, r2, #1
1000492a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
1000492e:	2300      	movs	r3, #0
10004930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
10004934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
10004938:	460b      	mov	r3, r1
1000493a:	4313      	orrs	r3, r2
1000493c:	d05b      	beq.n	100049f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
1000493e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004942:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004946:	681b      	ldr	r3, [r3, #0]
10004948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
1000494c:	2b01      	cmp	r3, #1
1000494e:	d002      	beq.n	10004956 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10004950:	2b04      	cmp	r3, #4
10004952:	d01f      	beq.n	10004994 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10004954:	e03d      	b.n	100049d2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004956:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000495a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000495e:	681b      	ldr	r3, [r3, #0]
10004960:	3344      	adds	r3, #68	@ 0x44
10004962:	4618      	mov	r0, r3
10004964:	f7fe feb0 	bl	100036c8 <RCCEx_PLL3_Config>
10004968:	4603      	mov	r3, r0
1000496a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000496e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004972:	2b00      	cmp	r3, #0
10004974:	d003      	beq.n	1000497e <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10004976:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000497a:	f000 bff1 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000497e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004982:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004986:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000498a:	f043 0320 	orr.w	r3, r3, #32
1000498e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004992:	e01e      	b.n	100049d2 <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004994:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004998:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000499c:	681b      	ldr	r3, [r3, #0]
1000499e:	3380      	adds	r3, #128	@ 0x80
100049a0:	4618      	mov	r0, r3
100049a2:	f7fe fffb 	bl	1000399c <RCCEx_PLL4_Config>
100049a6:	4603      	mov	r3, r0
100049a8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100049ac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049b0:	2b00      	cmp	r3, #0
100049b2:	d003      	beq.n	100049bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
100049b4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049b8:	f000 bfd2 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100049bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049c0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100049c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049c8:	f043 0320 	orr.w	r3, r3, #32
100049cc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100049d0:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
100049d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
100049da:	f023 0107 	bic.w	r1, r3, #7
100049de:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100049e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100049e6:	681b      	ldr	r3, [r3, #0]
100049e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
100049ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049f0:	430b      	orrs	r3, r1
100049f2:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
100049f6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100049fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100049fe:	681b      	ldr	r3, [r3, #0]
10004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a04:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
10004a08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
10004a0c:	2300      	movs	r3, #0
10004a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
10004a12:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
10004a16:	460b      	mov	r3, r1
10004a18:	4313      	orrs	r3, r2
10004a1a:	d05b      	beq.n	10004ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10004a1c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a24:	681b      	ldr	r3, [r3, #0]
10004a26:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10004a2a:	2b01      	cmp	r3, #1
10004a2c:	d002      	beq.n	10004a34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
10004a2e:	2b02      	cmp	r3, #2
10004a30:	d01f      	beq.n	10004a72 <HAL_RCCEx_PeriphCLKConfig+0xe26>
10004a32:	e03d      	b.n	10004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004a34:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a3c:	681b      	ldr	r3, [r3, #0]
10004a3e:	3344      	adds	r3, #68	@ 0x44
10004a40:	4618      	mov	r0, r3
10004a42:	f7fe fe41 	bl	100036c8 <RCCEx_PLL3_Config>
10004a46:	4603      	mov	r3, r0
10004a48:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004a4c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a50:	2b00      	cmp	r3, #0
10004a52:	d003      	beq.n	10004a5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10004a54:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a58:	f000 bf82 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004a5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a60:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004a64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004a6c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004a70:	e01e      	b.n	10004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004a72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a7a:	681b      	ldr	r3, [r3, #0]
10004a7c:	3380      	adds	r3, #128	@ 0x80
10004a7e:	4618      	mov	r0, r3
10004a80:	f7fe ff8c 	bl	1000399c <RCCEx_PLL4_Config>
10004a84:	4603      	mov	r3, r0
10004a86:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004a8a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a8e:	2b00      	cmp	r3, #0
10004a90:	d003      	beq.n	10004a9a <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
10004a92:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a96:	f000 bf63 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004a9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a9e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004aa2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004aa6:	f043 0310 	orr.w	r3, r3, #16
10004aaa:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004aae:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10004ab0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ab4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
10004ab8:	f023 0107 	bic.w	r1, r3, #7
10004abc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ac0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ac4:	681b      	ldr	r3, [r3, #0]
10004ac6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10004aca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004ace:	430b      	orrs	r3, r1
10004ad0:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10004ad4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ad8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004adc:	681b      	ldr	r3, [r3, #0]
10004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
10004ae2:	2100      	movs	r1, #0
10004ae4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
10004ae8:	f003 0301 	and.w	r3, r3, #1
10004aec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
10004af0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
10004af4:	460b      	mov	r3, r1
10004af6:	4313      	orrs	r3, r2
10004af8:	d05b      	beq.n	10004bb2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10004afa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004afe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b02:	681b      	ldr	r3, [r3, #0]
10004b04:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10004b08:	2b01      	cmp	r3, #1
10004b0a:	d002      	beq.n	10004b12 <HAL_RCCEx_PeriphCLKConfig+0xec6>
10004b0c:	2b02      	cmp	r3, #2
10004b0e:	d01f      	beq.n	10004b50 <HAL_RCCEx_PeriphCLKConfig+0xf04>
10004b10:	e03d      	b.n	10004b8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004b12:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b1a:	681b      	ldr	r3, [r3, #0]
10004b1c:	3344      	adds	r3, #68	@ 0x44
10004b1e:	4618      	mov	r0, r3
10004b20:	f7fe fdd2 	bl	100036c8 <RCCEx_PLL3_Config>
10004b24:	4603      	mov	r3, r0
10004b26:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004b2a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b2e:	2b00      	cmp	r3, #0
10004b30:	d003      	beq.n	10004b3a <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10004b32:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b36:	f000 bf13 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004b3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b3e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004b42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004b4a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004b4e:	e01e      	b.n	10004b8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004b50:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b58:	681b      	ldr	r3, [r3, #0]
10004b5a:	3380      	adds	r3, #128	@ 0x80
10004b5c:	4618      	mov	r0, r3
10004b5e:	f7fe ff1d 	bl	1000399c <RCCEx_PLL4_Config>
10004b62:	4603      	mov	r3, r0
10004b64:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004b68:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b6c:	2b00      	cmp	r3, #0
10004b6e:	d003      	beq.n	10004b78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10004b70:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b74:	f000 bef4 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004b78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b7c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004b80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b84:	f043 0310 	orr.w	r3, r3, #16
10004b88:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004b8c:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10004b8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b92:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
10004b96:	f023 0107 	bic.w	r1, r3, #7
10004b9a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ba2:	681b      	ldr	r3, [r3, #0]
10004ba4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10004ba8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004bac:	430b      	orrs	r3, r1
10004bae:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10004bb2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004bba:	681b      	ldr	r3, [r3, #0]
10004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
10004bc0:	2100      	movs	r1, #0
10004bc2:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
10004bc6:	f003 0302 	and.w	r3, r3, #2
10004bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
10004bce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
10004bd2:	460b      	mov	r3, r1
10004bd4:	4313      	orrs	r3, r2
10004bd6:	d05b      	beq.n	10004c90 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10004bd8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004be0:	681b      	ldr	r3, [r3, #0]
10004be2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10004be6:	2b00      	cmp	r3, #0
10004be8:	d002      	beq.n	10004bf0 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10004bea:	2b01      	cmp	r3, #1
10004bec:	d01f      	beq.n	10004c2e <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10004bee:	e03d      	b.n	10004c6c <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004bf0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bf4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004bf8:	681b      	ldr	r3, [r3, #0]
10004bfa:	3380      	adds	r3, #128	@ 0x80
10004bfc:	4618      	mov	r0, r3
10004bfe:	f7fe fecd 	bl	1000399c <RCCEx_PLL4_Config>
10004c02:	4603      	mov	r3, r0
10004c04:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004c08:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c0c:	2b00      	cmp	r3, #0
10004c0e:	d003      	beq.n	10004c18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10004c10:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c14:	f000 bea4 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004c18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c1c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004c20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c24:	f043 0310 	orr.w	r3, r3, #16
10004c28:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004c2c:	e01e      	b.n	10004c6c <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004c2e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c36:	681b      	ldr	r3, [r3, #0]
10004c38:	3344      	adds	r3, #68	@ 0x44
10004c3a:	4618      	mov	r0, r3
10004c3c:	f7fe fd44 	bl	100036c8 <RCCEx_PLL3_Config>
10004c40:	4603      	mov	r3, r0
10004c42:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004c46:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c4a:	2b00      	cmp	r3, #0
10004c4c:	d003      	beq.n	10004c56 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10004c4e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c52:	f000 be85 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004c56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c5a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004c5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c62:	f043 0320 	orr.w	r3, r3, #32
10004c66:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004c6a:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10004c6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c70:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
10004c74:	f023 0103 	bic.w	r1, r3, #3
10004c78:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c80:	681b      	ldr	r3, [r3, #0]
10004c82:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10004c86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c8a:	430b      	orrs	r3, r1
10004c8c:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10004c90:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c98:	681b      	ldr	r3, [r3, #0]
10004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
10004c9e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
10004ca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
10004ca6:	2300      	movs	r3, #0
10004ca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
10004cac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
10004cb0:	460b      	mov	r3, r1
10004cb2:	4313      	orrs	r3, r2
10004cb4:	d05b      	beq.n	10004d6e <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10004cb6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004cbe:	681b      	ldr	r3, [r3, #0]
10004cc0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10004cc4:	2b01      	cmp	r3, #1
10004cc6:	d002      	beq.n	10004cce <HAL_RCCEx_PeriphCLKConfig+0x1082>
10004cc8:	2b02      	cmp	r3, #2
10004cca:	d01f      	beq.n	10004d0c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10004ccc:	e03d      	b.n	10004d4a <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004cce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004cd6:	681b      	ldr	r3, [r3, #0]
10004cd8:	3344      	adds	r3, #68	@ 0x44
10004cda:	4618      	mov	r0, r3
10004cdc:	f7fe fcf4 	bl	100036c8 <RCCEx_PLL3_Config>
10004ce0:	4603      	mov	r3, r0
10004ce2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004ce6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004cea:	2b00      	cmp	r3, #0
10004cec:	d003      	beq.n	10004cf6 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10004cee:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004cf2:	f000 be35 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004cf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004cfa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004cfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004d06:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004d0a:	e01e      	b.n	10004d4a <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004d0c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d14:	681b      	ldr	r3, [r3, #0]
10004d16:	3380      	adds	r3, #128	@ 0x80
10004d18:	4618      	mov	r0, r3
10004d1a:	f7fe fe3f 	bl	1000399c <RCCEx_PLL4_Config>
10004d1e:	4603      	mov	r3, r0
10004d20:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004d24:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004d28:	2b00      	cmp	r3, #0
10004d2a:	d003      	beq.n	10004d34 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10004d2c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004d30:	f000 be16 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004d34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d38:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004d3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d40:	f043 0310 	orr.w	r3, r3, #16
10004d44:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004d48:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10004d4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d4e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
10004d52:	f023 0103 	bic.w	r1, r3, #3
10004d56:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d5e:	681b      	ldr	r3, [r3, #0]
10004d60:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10004d64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d68:	430b      	orrs	r3, r1
10004d6a:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10004d6e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d76:	681b      	ldr	r3, [r3, #0]
10004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
10004d7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
10004d80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
10004d84:	2300      	movs	r3, #0
10004d86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
10004d8a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
10004d8e:	460b      	mov	r3, r1
10004d90:	4313      	orrs	r3, r2
10004d92:	d05b      	beq.n	10004e4c <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10004d94:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d9c:	681b      	ldr	r3, [r3, #0]
10004d9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10004da2:	2b01      	cmp	r3, #1
10004da4:	d002      	beq.n	10004dac <HAL_RCCEx_PeriphCLKConfig+0x1160>
10004da6:	2b02      	cmp	r3, #2
10004da8:	d01f      	beq.n	10004dea <HAL_RCCEx_PeriphCLKConfig+0x119e>
10004daa:	e03d      	b.n	10004e28 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004dac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004db0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004db4:	681b      	ldr	r3, [r3, #0]
10004db6:	3344      	adds	r3, #68	@ 0x44
10004db8:	4618      	mov	r0, r3
10004dba:	f7fe fc85 	bl	100036c8 <RCCEx_PLL3_Config>
10004dbe:	4603      	mov	r3, r0
10004dc0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004dc4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004dc8:	2b00      	cmp	r3, #0
10004dca:	d003      	beq.n	10004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10004dcc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004dd0:	f000 bdc6 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004dd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004dd8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004ddc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004de4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004de8:	e01e      	b.n	10004e28 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004dea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004dee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004df2:	681b      	ldr	r3, [r3, #0]
10004df4:	3380      	adds	r3, #128	@ 0x80
10004df6:	4618      	mov	r0, r3
10004df8:	f7fe fdd0 	bl	1000399c <RCCEx_PLL4_Config>
10004dfc:	4603      	mov	r3, r0
10004dfe:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004e02:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004e06:	2b00      	cmp	r3, #0
10004e08:	d003      	beq.n	10004e12 <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10004e0a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004e0e:	f000 bda7 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004e12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e16:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004e1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004e1e:	f043 0310 	orr.w	r3, r3, #16
10004e22:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004e26:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10004e28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e2c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
10004e30:	f023 0103 	bic.w	r1, r3, #3
10004e34:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e3c:	681b      	ldr	r3, [r3, #0]
10004e3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10004e42:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004e46:	430b      	orrs	r3, r1
10004e48:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10004e4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e54:	681b      	ldr	r3, [r3, #0]
10004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
10004e5a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
10004e5e:	67bb      	str	r3, [r7, #120]	@ 0x78
10004e60:	2300      	movs	r3, #0
10004e62:	67fb      	str	r3, [r7, #124]	@ 0x7c
10004e64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
10004e68:	460b      	mov	r3, r1
10004e6a:	4313      	orrs	r3, r2
10004e6c:	d07e      	beq.n	10004f6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10004e6e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e76:	681b      	ldr	r3, [r3, #0]
10004e78:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10004e7c:	2b03      	cmp	r3, #3
10004e7e:	d044      	beq.n	10004f0a <HAL_RCCEx_PeriphCLKConfig+0x12be>
10004e80:	2b03      	cmp	r3, #3
10004e82:	d861      	bhi.n	10004f48 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10004e84:	2b01      	cmp	r3, #1
10004e86:	d002      	beq.n	10004e8e <HAL_RCCEx_PeriphCLKConfig+0x1242>
10004e88:	2b02      	cmp	r3, #2
10004e8a:	d01f      	beq.n	10004ecc <HAL_RCCEx_PeriphCLKConfig+0x1280>
10004e8c:	e05c      	b.n	10004f48 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004e8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e96:	681b      	ldr	r3, [r3, #0]
10004e98:	3344      	adds	r3, #68	@ 0x44
10004e9a:	4618      	mov	r0, r3
10004e9c:	f7fe fc14 	bl	100036c8 <RCCEx_PLL3_Config>
10004ea0:	4603      	mov	r3, r0
10004ea2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004ea6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004eaa:	2b00      	cmp	r3, #0
10004eac:	d003      	beq.n	10004eb6 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10004eae:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004eb2:	f000 bd55 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004eb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004eba:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004ebe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004ec2:	f043 0320 	orr.w	r3, r3, #32
10004ec6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004eca:	e03d      	b.n	10004f48 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004ecc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ed0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ed4:	681b      	ldr	r3, [r3, #0]
10004ed6:	3380      	adds	r3, #128	@ 0x80
10004ed8:	4618      	mov	r0, r3
10004eda:	f7fe fd5f 	bl	1000399c <RCCEx_PLL4_Config>
10004ede:	4603      	mov	r3, r0
10004ee0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004ee4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ee8:	2b00      	cmp	r3, #0
10004eea:	d003      	beq.n	10004ef4 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10004eec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ef0:	f000 bd36 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004ef4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ef8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004efc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f00:	f043 0320 	orr.w	r3, r3, #32
10004f04:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004f08:	e01e      	b.n	10004f48 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004f0a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f12:	681b      	ldr	r3, [r3, #0]
10004f14:	3380      	adds	r3, #128	@ 0x80
10004f16:	4618      	mov	r0, r3
10004f18:	f7fe fd40 	bl	1000399c <RCCEx_PLL4_Config>
10004f1c:	4603      	mov	r3, r0
10004f1e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004f22:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004f26:	2b00      	cmp	r3, #0
10004f28:	d003      	beq.n	10004f32 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10004f2a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004f2e:	f000 bd17 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004f32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f36:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004f3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004f42:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004f46:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10004f48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f4c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
10004f50:	f023 0103 	bic.w	r1, r3, #3
10004f54:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f5c:	681b      	ldr	r3, [r3, #0]
10004f5e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10004f62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f66:	430b      	orrs	r3, r1
10004f68:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10004f6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f74:	681b      	ldr	r3, [r3, #0]
10004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
10004f7a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
10004f7e:	673b      	str	r3, [r7, #112]	@ 0x70
10004f80:	2300      	movs	r3, #0
10004f82:	677b      	str	r3, [r7, #116]	@ 0x74
10004f84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
10004f88:	460b      	mov	r3, r1
10004f8a:	4313      	orrs	r3, r2
10004f8c:	d05b      	beq.n	10005046 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10004f8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f96:	681b      	ldr	r3, [r3, #0]
10004f98:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10004f9c:	2b00      	cmp	r3, #0
10004f9e:	d002      	beq.n	10004fa6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
10004fa0:	2b01      	cmp	r3, #1
10004fa2:	d01f      	beq.n	10004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1398>
10004fa4:	e03d      	b.n	10005022 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004fa6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004faa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004fae:	681b      	ldr	r3, [r3, #0]
10004fb0:	3380      	adds	r3, #128	@ 0x80
10004fb2:	4618      	mov	r0, r3
10004fb4:	f7fe fcf2 	bl	1000399c <RCCEx_PLL4_Config>
10004fb8:	4603      	mov	r3, r0
10004fba:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004fbe:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004fc2:	2b00      	cmp	r3, #0
10004fc4:	d003      	beq.n	10004fce <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10004fc6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004fca:	f000 bcc9 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004fce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004fd2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004fd6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004fda:	f043 0310 	orr.w	r3, r3, #16
10004fde:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004fe2:	e01e      	b.n	10005022 <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004fe4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004fe8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004fec:	681b      	ldr	r3, [r3, #0]
10004fee:	3344      	adds	r3, #68	@ 0x44
10004ff0:	4618      	mov	r0, r3
10004ff2:	f7fe fb69 	bl	100036c8 <RCCEx_PLL3_Config>
10004ff6:	4603      	mov	r3, r0
10004ff8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004ffc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005000:	2b00      	cmp	r3, #0
10005002:	d003      	beq.n	1000500c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10005004:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005008:	f000 bcaa 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000500c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005010:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005014:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005018:	f043 0320 	orr.w	r3, r3, #32
1000501c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005020:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10005022:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005026:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
1000502a:	f023 0103 	bic.w	r1, r3, #3
1000502e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005032:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005036:	681b      	ldr	r3, [r3, #0]
10005038:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
1000503c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005040:	430b      	orrs	r3, r1
10005042:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10005046:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000504a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000504e:	681b      	ldr	r3, [r3, #0]
10005050:	e9d3 2300 	ldrd	r2, r3, [r3]
10005054:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
10005058:	66bb      	str	r3, [r7, #104]	@ 0x68
1000505a:	2300      	movs	r3, #0
1000505c:	66fb      	str	r3, [r7, #108]	@ 0x6c
1000505e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
10005062:	460b      	mov	r3, r1
10005064:	4313      	orrs	r3, r2
10005066:	d011      	beq.n	1000508c <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10005068:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000506c:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
10005070:	f023 0103 	bic.w	r1, r3, #3
10005074:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005078:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000507c:	681b      	ldr	r3, [r3, #0]
1000507e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
10005082:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005086:	430b      	orrs	r3, r1
10005088:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
1000508c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005090:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005094:	681b      	ldr	r3, [r3, #0]
10005096:	e9d3 2300 	ldrd	r2, r3, [r3]
1000509a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
1000509e:	663b      	str	r3, [r7, #96]	@ 0x60
100050a0:	2300      	movs	r3, #0
100050a2:	667b      	str	r3, [r7, #100]	@ 0x64
100050a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
100050a8:	460b      	mov	r3, r1
100050aa:	4313      	orrs	r3, r2
100050ac:	d038      	beq.n	10005120 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
100050ae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100050b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100050b6:	681b      	ldr	r3, [r3, #0]
100050b8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
100050bc:	2b01      	cmp	r3, #1
100050be:	d11d      	bne.n	100050fc <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100050c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100050c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100050c8:	681b      	ldr	r3, [r3, #0]
100050ca:	3380      	adds	r3, #128	@ 0x80
100050cc:	4618      	mov	r0, r3
100050ce:	f7fe fc65 	bl	1000399c <RCCEx_PLL4_Config>
100050d2:	4603      	mov	r3, r0
100050d4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100050d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100050dc:	2b00      	cmp	r3, #0
100050de:	d003      	beq.n	100050e8 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
100050e0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100050e4:	f000 bc3c 	b.w	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100050e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050ec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100050f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100050f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100050f8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
100050fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005100:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10005104:	f023 0103 	bic.w	r1, r3, #3
10005108:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000510c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005110:	681b      	ldr	r3, [r3, #0]
10005112:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10005116:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000511a:	430b      	orrs	r3, r1
1000511c:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10005120:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005124:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005128:	681b      	ldr	r3, [r3, #0]
1000512a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000512e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
10005132:	65bb      	str	r3, [r7, #88]	@ 0x58
10005134:	2300      	movs	r3, #0
10005136:	65fb      	str	r3, [r7, #92]	@ 0x5c
10005138:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
1000513c:	460b      	mov	r3, r1
1000513e:	4313      	orrs	r3, r2
10005140:	d037      	beq.n	100051b2 <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10005142:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005146:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000514a:	681b      	ldr	r3, [r3, #0]
1000514c:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10005150:	2b00      	cmp	r3, #0
10005152:	d11c      	bne.n	1000518e <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005154:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005158:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000515c:	681b      	ldr	r3, [r3, #0]
1000515e:	3380      	adds	r3, #128	@ 0x80
10005160:	4618      	mov	r0, r3
10005162:	f7fe fc1b 	bl	1000399c <RCCEx_PLL4_Config>
10005166:	4603      	mov	r3, r0
10005168:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000516c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005170:	2b00      	cmp	r3, #0
10005172:	d002      	beq.n	1000517a <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10005174:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005178:	e3f2      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000517a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000517e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005182:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000518a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
1000518e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005192:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10005196:	f023 0110 	bic.w	r1, r3, #16
1000519a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000519e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051a2:	681b      	ldr	r3, [r3, #0]
100051a4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
100051a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100051ac:	430b      	orrs	r3, r1
100051ae:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
100051b2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051ba:	681b      	ldr	r3, [r3, #0]
100051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
100051c0:	2100      	movs	r1, #0
100051c2:	6539      	str	r1, [r7, #80]	@ 0x50
100051c4:	f003 0304 	and.w	r3, r3, #4
100051c8:	657b      	str	r3, [r7, #84]	@ 0x54
100051ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
100051ce:	460b      	mov	r3, r1
100051d0:	4313      	orrs	r3, r2
100051d2:	d037      	beq.n	10005244 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
100051d4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051dc:	681b      	ldr	r3, [r3, #0]
100051de:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
100051e2:	2b01      	cmp	r3, #1
100051e4:	d11c      	bne.n	10005220 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100051e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051ee:	681b      	ldr	r3, [r3, #0]
100051f0:	3380      	adds	r3, #128	@ 0x80
100051f2:	4618      	mov	r0, r3
100051f4:	f7fe fbd2 	bl	1000399c <RCCEx_PLL4_Config>
100051f8:	4603      	mov	r3, r0
100051fa:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100051fe:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005202:	2b00      	cmp	r3, #0
10005204:	d002      	beq.n	1000520c <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
10005206:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000520a:	e3a9      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000520c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005210:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005214:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000521c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10005220:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005224:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10005228:	f023 0103 	bic.w	r1, r3, #3
1000522c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005230:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005234:	681b      	ldr	r3, [r3, #0]
10005236:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
1000523a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000523e:	430b      	orrs	r3, r1
10005240:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10005244:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005248:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000524c:	681b      	ldr	r3, [r3, #0]
1000524e:	e9d3 2300 	ldrd	r2, r3, [r3]
10005252:	2100      	movs	r1, #0
10005254:	64b9      	str	r1, [r7, #72]	@ 0x48
10005256:	f003 0308 	and.w	r3, r3, #8
1000525a:	64fb      	str	r3, [r7, #76]	@ 0x4c
1000525c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
10005260:	460b      	mov	r3, r1
10005262:	4313      	orrs	r3, r2
10005264:	d037      	beq.n	100052d6 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10005266:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000526a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000526e:	681b      	ldr	r3, [r3, #0]
10005270:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10005274:	2b01      	cmp	r3, #1
10005276:	d11c      	bne.n	100052b2 <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005278:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000527c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005280:	681b      	ldr	r3, [r3, #0]
10005282:	3380      	adds	r3, #128	@ 0x80
10005284:	4618      	mov	r0, r3
10005286:	f7fe fb89 	bl	1000399c <RCCEx_PLL4_Config>
1000528a:	4603      	mov	r3, r0
1000528c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10005290:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005294:	2b00      	cmp	r3, #0
10005296:	d002      	beq.n	1000529e <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10005298:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000529c:	e360      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000529e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052a2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100052a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100052aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100052ae:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
100052b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052b6:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
100052ba:	f023 0103 	bic.w	r1, r3, #3
100052be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100052c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100052c6:	681b      	ldr	r3, [r3, #0]
100052c8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
100052cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100052d0:	430b      	orrs	r3, r1
100052d2:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
100052d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100052da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100052de:	681b      	ldr	r3, [r3, #0]
100052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
100052e4:	2100      	movs	r1, #0
100052e6:	6439      	str	r1, [r7, #64]	@ 0x40
100052e8:	f003 0310 	and.w	r3, r3, #16
100052ec:	647b      	str	r3, [r7, #68]	@ 0x44
100052ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
100052f2:	460b      	mov	r3, r1
100052f4:	4313      	orrs	r3, r2
100052f6:	d011      	beq.n	1000531c <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
100052f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10005300:	f023 0103 	bic.w	r1, r3, #3
10005304:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005308:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000530c:	681b      	ldr	r3, [r3, #0]
1000530e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
10005312:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005316:	430b      	orrs	r3, r1
10005318:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
1000531c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005320:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005324:	681b      	ldr	r3, [r3, #0]
10005326:	e9d3 2300 	ldrd	r2, r3, [r3]
1000532a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
1000532e:	63bb      	str	r3, [r7, #56]	@ 0x38
10005330:	2300      	movs	r3, #0
10005332:	63fb      	str	r3, [r7, #60]	@ 0x3c
10005334:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
10005338:	460b      	mov	r3, r1
1000533a:	4313      	orrs	r3, r2
1000533c:	d037      	beq.n	100053ae <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
1000533e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005342:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005346:	681b      	ldr	r3, [r3, #0]
10005348:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
1000534c:	2b01      	cmp	r3, #1
1000534e:	d11c      	bne.n	1000538a <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005350:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005354:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005358:	681b      	ldr	r3, [r3, #0]
1000535a:	3380      	adds	r3, #128	@ 0x80
1000535c:	4618      	mov	r0, r3
1000535e:	f7fe fb1d 	bl	1000399c <RCCEx_PLL4_Config>
10005362:	4603      	mov	r3, r0
10005364:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10005368:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000536c:	2b00      	cmp	r3, #0
1000536e:	d002      	beq.n	10005376 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
10005370:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005374:	e2f4      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005376:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000537a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000537e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005382:	f043 0310 	orr.w	r3, r3, #16
10005386:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
1000538a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000538e:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
10005392:	f023 0101 	bic.w	r1, r3, #1
10005396:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000539a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000539e:	681b      	ldr	r3, [r3, #0]
100053a0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
100053a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100053a8:	430b      	orrs	r3, r1
100053aa:	f8c2 3924 	str.w	r3, [r2, #2340]	@ 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
100053ae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100053b6:	681b      	ldr	r3, [r3, #0]
100053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
100053bc:	f002 0308 	and.w	r3, r2, #8
100053c0:	633b      	str	r3, [r7, #48]	@ 0x30
100053c2:	2300      	movs	r3, #0
100053c4:	637b      	str	r3, [r7, #52]	@ 0x34
100053c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
100053ca:	460b      	mov	r3, r1
100053cc:	4313      	orrs	r3, r2
100053ce:	d059      	beq.n	10005484 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
100053d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100053d8:	681b      	ldr	r3, [r3, #0]
100053da:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100053de:	2b00      	cmp	r3, #0
100053e0:	d002      	beq.n	100053e8 <HAL_RCCEx_PeriphCLKConfig+0x179c>
100053e2:	2b02      	cmp	r3, #2
100053e4:	d01e      	beq.n	10005424 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
100053e6:	e03b      	b.n	10005460 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100053e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100053f0:	681b      	ldr	r3, [r3, #0]
100053f2:	3380      	adds	r3, #128	@ 0x80
100053f4:	4618      	mov	r0, r3
100053f6:	f7fe fad1 	bl	1000399c <RCCEx_PLL4_Config>
100053fa:	4603      	mov	r3, r0
100053fc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005400:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005404:	2b00      	cmp	r3, #0
10005406:	d002      	beq.n	1000540e <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10005408:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000540c:	e2a8      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000540e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005412:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005416:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000541a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000541e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
10005422:	e01d      	b.n	10005460 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005424:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005428:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000542c:	681b      	ldr	r3, [r3, #0]
1000542e:	3344      	adds	r3, #68	@ 0x44
10005430:	4618      	mov	r0, r3
10005432:	f7fe f949 	bl	100036c8 <RCCEx_PLL3_Config>
10005436:	4603      	mov	r3, r0
10005438:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000543c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005440:	2b00      	cmp	r3, #0
10005442:	d002      	beq.n	1000544a <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10005444:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005448:	e28a      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000544a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000544e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005452:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005456:	f043 0320 	orr.w	r3, r3, #32
1000545a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000545e:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
10005460:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005464:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
10005468:	f023 0103 	bic.w	r1, r3, #3
1000546c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005470:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005474:	681b      	ldr	r3, [r3, #0]
10005476:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000547a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000547e:	430b      	orrs	r3, r1
10005480:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10005484:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005488:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000548c:	681b      	ldr	r3, [r3, #0]
1000548e:	e9d3 2300 	ldrd	r2, r3, [r3]
10005492:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
10005496:	62bb      	str	r3, [r7, #40]	@ 0x28
10005498:	2300      	movs	r3, #0
1000549a:	62fb      	str	r3, [r7, #44]	@ 0x2c
1000549c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
100054a0:	460b      	mov	r3, r1
100054a2:	4313      	orrs	r3, r2
100054a4:	d058      	beq.n	10005558 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
100054a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100054aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100054ae:	681b      	ldr	r3, [r3, #0]
100054b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100054b4:	2b01      	cmp	r3, #1
100054b6:	d01f      	beq.n	100054f8 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
100054b8:	2b02      	cmp	r3, #2
100054ba:	d13b      	bne.n	10005534 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100054bc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100054c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100054c4:	681b      	ldr	r3, [r3, #0]
100054c6:	3344      	adds	r3, #68	@ 0x44
100054c8:	4618      	mov	r0, r3
100054ca:	f7fe f8fd 	bl	100036c8 <RCCEx_PLL3_Config>
100054ce:	4603      	mov	r3, r0
100054d0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100054d4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100054d8:	2b00      	cmp	r3, #0
100054da:	d002      	beq.n	100054e2 <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
100054dc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100054e0:	e23e      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100054e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100054e6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100054ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100054ee:	f043 0320 	orr.w	r3, r3, #32
100054f2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100054f6:	e01d      	b.n	10005534 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100054f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100054fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005500:	681b      	ldr	r3, [r3, #0]
10005502:	3380      	adds	r3, #128	@ 0x80
10005504:	4618      	mov	r0, r3
10005506:	f7fe fa49 	bl	1000399c <RCCEx_PLL4_Config>
1000550a:	4603      	mov	r3, r0
1000550c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005510:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005514:	2b00      	cmp	r3, #0
10005516:	d002      	beq.n	1000551e <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
10005518:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000551c:	e220      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000551e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005522:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005526:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000552a:	f043 0310 	orr.w	r3, r3, #16
1000552e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005532:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10005534:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005538:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
1000553c:	f023 0207 	bic.w	r2, r3, #7
10005540:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005544:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005548:	681b      	ldr	r3, [r3, #0]
1000554a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000554e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005552:	4313      	orrs	r3, r2
10005554:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10005558:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000555c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005560:	681b      	ldr	r3, [r3, #0]
10005562:	e9d3 2300 	ldrd	r2, r3, [r3]
10005566:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
1000556a:	623b      	str	r3, [r7, #32]
1000556c:	2300      	movs	r3, #0
1000556e:	627b      	str	r3, [r7, #36]	@ 0x24
10005570:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10005574:	460b      	mov	r3, r1
10005576:	4313      	orrs	r3, r2
10005578:	d037      	beq.n	100055ea <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
1000557a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000557e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005582:	681b      	ldr	r3, [r3, #0]
10005584:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10005588:	2b01      	cmp	r3, #1
1000558a:	d11c      	bne.n	100055c6 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000558c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005590:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005594:	681b      	ldr	r3, [r3, #0]
10005596:	3380      	adds	r3, #128	@ 0x80
10005598:	4618      	mov	r0, r3
1000559a:	f7fe f9ff 	bl	1000399c <RCCEx_PLL4_Config>
1000559e:	4603      	mov	r3, r0
100055a0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100055a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100055a8:	2b00      	cmp	r3, #0
100055aa:	d002      	beq.n	100055b2 <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
100055ac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100055b0:	e1d6      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100055b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100055b6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100055ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100055be:	f043 0320 	orr.w	r3, r3, #32
100055c2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
100055c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100055ca:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
100055ce:	f023 0207 	bic.w	r2, r3, #7
100055d2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100055d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100055da:	681b      	ldr	r3, [r3, #0]
100055dc:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
100055e0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100055e4:	4313      	orrs	r3, r2
100055e6:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
100055ea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100055ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100055f2:	681b      	ldr	r3, [r3, #0]
100055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
100055f8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
100055fc:	61bb      	str	r3, [r7, #24]
100055fe:	2300      	movs	r3, #0
10005600:	61fb      	str	r3, [r7, #28]
10005602:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
10005606:	460b      	mov	r3, r1
10005608:	4313      	orrs	r3, r2
1000560a:	d058      	beq.n	100056be <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
1000560c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005610:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005614:	681b      	ldr	r3, [r3, #0]
10005616:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1000561a:	2b01      	cmp	r3, #1
1000561c:	d01f      	beq.n	1000565e <HAL_RCCEx_PeriphCLKConfig+0x1a12>
1000561e:	2b02      	cmp	r3, #2
10005620:	d13b      	bne.n	1000569a <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005622:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005626:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000562a:	681b      	ldr	r3, [r3, #0]
1000562c:	3344      	adds	r3, #68	@ 0x44
1000562e:	4618      	mov	r0, r3
10005630:	f7fe f84a 	bl	100036c8 <RCCEx_PLL3_Config>
10005634:	4603      	mov	r3, r0
10005636:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000563a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000563e:	2b00      	cmp	r3, #0
10005640:	d002      	beq.n	10005648 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
10005642:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005646:	e18b      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005648:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000564c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005650:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005654:	f043 0320 	orr.w	r3, r3, #32
10005658:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000565c:	e01d      	b.n	1000569a <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000565e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005662:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005666:	681b      	ldr	r3, [r3, #0]
10005668:	3380      	adds	r3, #128	@ 0x80
1000566a:	4618      	mov	r0, r3
1000566c:	f7fe f996 	bl	1000399c <RCCEx_PLL4_Config>
10005670:	4603      	mov	r3, r0
10005672:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005676:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000567a:	2b00      	cmp	r3, #0
1000567c:	d002      	beq.n	10005684 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
1000567e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005682:	e16d      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005684:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005688:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000568c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005690:	f043 0310 	orr.w	r3, r3, #16
10005694:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005698:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
1000569a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000569e:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
100056a2:	f023 0207 	bic.w	r2, r3, #7
100056a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100056aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100056ae:	681b      	ldr	r3, [r3, #0]
100056b0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
100056b4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100056b8:	4313      	orrs	r3, r2
100056ba:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
100056be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100056c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100056c6:	681b      	ldr	r3, [r3, #0]
100056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
100056cc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
100056d0:	613b      	str	r3, [r7, #16]
100056d2:	2300      	movs	r3, #0
100056d4:	617b      	str	r3, [r7, #20]
100056d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
100056da:	460b      	mov	r3, r1
100056dc:	4313      	orrs	r3, r2
100056de:	f000 80c6 	beq.w	1000586e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100056e2:	4ba2      	ldr	r3, [pc, #648]	@ (1000596c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100056e4:	681b      	ldr	r3, [r3, #0]
100056e6:	4aa1      	ldr	r2, [pc, #644]	@ (1000596c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100056e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
100056ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100056ee:	f7fb ff65 	bl	100015bc <HAL_GetTick>
100056f2:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100056f6:	e00a      	b.n	1000570e <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100056f8:	f7fb ff60 	bl	100015bc <HAL_GetTick>
100056fc:	4602      	mov	r2, r0
100056fe:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10005702:	1ad3      	subs	r3, r2, r3
10005704:	2b64      	cmp	r3, #100	@ 0x64
10005706:	d902      	bls.n	1000570e <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
10005708:	2303      	movs	r3, #3
1000570a:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000570e:	4b97      	ldr	r3, [pc, #604]	@ (1000596c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10005710:	681b      	ldr	r3, [r3, #0]
10005712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10005716:	2b00      	cmp	r3, #0
10005718:	d0ee      	beq.n	100056f8 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
1000571a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
1000571e:	2b00      	cmp	r3, #0
10005720:	f040 80a2 	bne.w	10005868 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10005724:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005728:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
1000572c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005730:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005734:	681b      	ldr	r3, [r3, #0]
10005736:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
1000573a:	4053      	eors	r3, r2
1000573c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10005740:	2b00      	cmp	r3, #0
10005742:	f000 8086 	beq.w	10005852 <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10005746:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000574a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000574e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
10005752:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
10005756:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000575a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000575e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005762:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10005766:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
1000576a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000576e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005772:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005776:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
1000577a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
1000577e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005782:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005786:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
1000578a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
1000578e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
10005792:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005796:	4313      	orrs	r3, r2
10005798:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
1000579c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
100057a4:	2204      	movs	r2, #4
100057a6:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
100057a8:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
100057ac:	f003 020b 	and.w	r2, r3, #11
100057b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
100057b8:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
100057ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
100057c2:	2200      	movs	r2, #0
100057c4:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
100057c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
100057ce:	2200      	movs	r2, #0
100057d0:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
100057d2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
100057da:	2200      	movs	r2, #0
100057dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
100057e0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057e4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
100057e8:	2200      	movs	r2, #0
100057ea:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
100057ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
100057f2:	4618      	mov	r0, r3
100057f4:	f7fc fc0e 	bl	10002014 <HAL_RCC_OscConfig>
100057f8:	4603      	mov	r3, r0
100057fa:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        if (ret != HAL_OK)
100057fe:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005802:	2b00      	cmp	r3, #0
10005804:	d002      	beq.n	1000580c <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
10005806:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
1000580a:	e0a9      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
1000580c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005810:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005814:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
10005818:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000581c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005820:	681b      	ldr	r3, [r3, #0]
10005822:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
10005826:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000582a:	4313      	orrs	r3, r2
1000582c:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10005830:	4b4f      	ldr	r3, [pc, #316]	@ (10005970 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
10005832:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
10005836:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000583a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
1000583e:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
10005842:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
10005846:	400b      	ands	r3, r1
10005848:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000584c:	4313      	orrs	r3, r2
1000584e:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
10005852:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005856:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000585a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000585e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
10005862:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10005866:	e002      	b.n	1000586e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10005868:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
1000586c:	e078      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
1000586e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005872:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005876:	681b      	ldr	r3, [r3, #0]
10005878:	e9d3 2300 	ldrd	r2, r3, [r3]
1000587c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
10005880:	60bb      	str	r3, [r7, #8]
10005882:	2300      	movs	r3, #0
10005884:	60fb      	str	r3, [r7, #12]
10005886:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
1000588a:	460b      	mov	r3, r1
1000588c:	4313      	orrs	r3, r2
1000588e:	d02a      	beq.n	100058e6 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10005890:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005894:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10005898:	f023 0201 	bic.w	r2, r3, #1
1000589c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100058a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100058a4:	681b      	ldr	r3, [r3, #0]
100058a6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
100058aa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100058ae:	4313      	orrs	r3, r2
100058b0:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100058b4:	f7fb fe82 	bl	100015bc <HAL_GetTick>
100058b8:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
100058bc:	e00a      	b.n	100058d4 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100058be:	f7fb fe7d 	bl	100015bc <HAL_GetTick>
100058c2:	4602      	mov	r2, r0
100058c4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
100058c8:	1ad3      	subs	r3, r2, r3
100058ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100058ce:	d901      	bls.n	100058d4 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
100058d0:	2303      	movs	r3, #3
100058d2:	e045      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
100058d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100058d8:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
100058dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100058e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100058e4:	d1eb      	bne.n	100058be <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
100058e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100058ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100058ee:	681b      	ldr	r3, [r3, #0]
100058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
100058f4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
100058f8:	603b      	str	r3, [r7, #0]
100058fa:	2300      	movs	r3, #0
100058fc:	607b      	str	r3, [r7, #4]
100058fe:	e9d7 1200 	ldrd	r1, r2, [r7]
10005902:	460b      	mov	r3, r1
10005904:	4313      	orrs	r3, r2
10005906:	d02a      	beq.n	1000595e <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10005908:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000590c:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10005910:	f023 0201 	bic.w	r2, r3, #1
10005914:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005918:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000591c:	681b      	ldr	r3, [r3, #0]
1000591e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
10005922:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005926:	4313      	orrs	r3, r2
10005928:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000592c:	f7fb fe46 	bl	100015bc <HAL_GetTick>
10005930:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10005934:	e00a      	b.n	1000594c <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005936:	f7fb fe41 	bl	100015bc <HAL_GetTick>
1000593a:	4602      	mov	r2, r0
1000593c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10005940:	1ad3      	subs	r3, r2, r3
10005942:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10005946:	d901      	bls.n	1000594c <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10005948:	2303      	movs	r3, #3
1000594a:	e009      	b.n	10005960 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
1000594c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005950:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10005954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000595c:	d1eb      	bne.n	10005936 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
1000595e:	2300      	movs	r3, #0
}
10005960:	4618      	mov	r0, r3
10005962:	f507 7712 	add.w	r7, r7, #584	@ 0x248
10005966:	46bd      	mov	sp, r7
10005968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
1000596c:	50001000 	.word	0x50001000
10005970:	7fecfdc0 	.word	0x7fecfdc0

10005974 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
10005974:	b580      	push	{r7, lr}
10005976:	b084      	sub	sp, #16
10005978:	af00      	add	r7, sp, #0
1000597a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
1000597c:	687b      	ldr	r3, [r7, #4]
1000597e:	2b00      	cmp	r3, #0
10005980:	d101      	bne.n	10005986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
10005982:	2301      	movs	r3, #1
10005984:	e10f      	b.n	10005ba6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10005986:	687b      	ldr	r3, [r7, #4]
10005988:	2200      	movs	r2, #0
1000598a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
1000598c:	687b      	ldr	r3, [r7, #4]
1000598e:	681b      	ldr	r3, [r3, #0]
10005990:	4a87      	ldr	r2, [pc, #540]	@ (10005bb0 <HAL_SPI_Init+0x23c>)
10005992:	4293      	cmp	r3, r2
10005994:	d00f      	beq.n	100059b6 <HAL_SPI_Init+0x42>
10005996:	687b      	ldr	r3, [r7, #4]
10005998:	681b      	ldr	r3, [r3, #0]
1000599a:	4a86      	ldr	r2, [pc, #536]	@ (10005bb4 <HAL_SPI_Init+0x240>)
1000599c:	4293      	cmp	r3, r2
1000599e:	d00a      	beq.n	100059b6 <HAL_SPI_Init+0x42>
100059a0:	687b      	ldr	r3, [r7, #4]
100059a2:	681b      	ldr	r3, [r3, #0]
100059a4:	4a84      	ldr	r2, [pc, #528]	@ (10005bb8 <HAL_SPI_Init+0x244>)
100059a6:	4293      	cmp	r3, r2
100059a8:	d005      	beq.n	100059b6 <HAL_SPI_Init+0x42>
100059aa:	687b      	ldr	r3, [r7, #4]
100059ac:	68db      	ldr	r3, [r3, #12]
100059ae:	2b0f      	cmp	r3, #15
100059b0:	d901      	bls.n	100059b6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
100059b2:	2301      	movs	r3, #1
100059b4:	e0f7      	b.n	10005ba6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
100059b6:	6878      	ldr	r0, [r7, #4]
100059b8:	f000 fd54 	bl	10006464 <SPI_GetPacketSize>
100059bc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
100059be:	687b      	ldr	r3, [r7, #4]
100059c0:	681b      	ldr	r3, [r3, #0]
100059c2:	4a7b      	ldr	r2, [pc, #492]	@ (10005bb0 <HAL_SPI_Init+0x23c>)
100059c4:	4293      	cmp	r3, r2
100059c6:	d00c      	beq.n	100059e2 <HAL_SPI_Init+0x6e>
100059c8:	687b      	ldr	r3, [r7, #4]
100059ca:	681b      	ldr	r3, [r3, #0]
100059cc:	4a79      	ldr	r2, [pc, #484]	@ (10005bb4 <HAL_SPI_Init+0x240>)
100059ce:	4293      	cmp	r3, r2
100059d0:	d007      	beq.n	100059e2 <HAL_SPI_Init+0x6e>
100059d2:	687b      	ldr	r3, [r7, #4]
100059d4:	681b      	ldr	r3, [r3, #0]
100059d6:	4a78      	ldr	r2, [pc, #480]	@ (10005bb8 <HAL_SPI_Init+0x244>)
100059d8:	4293      	cmp	r3, r2
100059da:	d002      	beq.n	100059e2 <HAL_SPI_Init+0x6e>
100059dc:	68fb      	ldr	r3, [r7, #12]
100059de:	2b08      	cmp	r3, #8
100059e0:	d811      	bhi.n	10005a06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
100059e2:	687b      	ldr	r3, [r7, #4]
100059e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
100059e6:	4a72      	ldr	r2, [pc, #456]	@ (10005bb0 <HAL_SPI_Init+0x23c>)
100059e8:	4293      	cmp	r3, r2
100059ea:	d009      	beq.n	10005a00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
100059ec:	687b      	ldr	r3, [r7, #4]
100059ee:	681b      	ldr	r3, [r3, #0]
100059f0:	4a70      	ldr	r2, [pc, #448]	@ (10005bb4 <HAL_SPI_Init+0x240>)
100059f2:	4293      	cmp	r3, r2
100059f4:	d004      	beq.n	10005a00 <HAL_SPI_Init+0x8c>
100059f6:	687b      	ldr	r3, [r7, #4]
100059f8:	681b      	ldr	r3, [r3, #0]
100059fa:	4a6f      	ldr	r2, [pc, #444]	@ (10005bb8 <HAL_SPI_Init+0x244>)
100059fc:	4293      	cmp	r3, r2
100059fe:	d104      	bne.n	10005a0a <HAL_SPI_Init+0x96>
10005a00:	68fb      	ldr	r3, [r7, #12]
10005a02:	2b10      	cmp	r3, #16
10005a04:	d901      	bls.n	10005a0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
10005a06:	2301      	movs	r3, #1
10005a08:	e0cd      	b.n	10005ba6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
10005a0a:	687b      	ldr	r3, [r7, #4]
10005a0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10005a10:	b2db      	uxtb	r3, r3
10005a12:	2b00      	cmp	r3, #0
10005a14:	d106      	bne.n	10005a24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
10005a16:	687b      	ldr	r3, [r7, #4]
10005a18:	2200      	movs	r2, #0
10005a1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
10005a1e:	6878      	ldr	r0, [r7, #4]
10005a20:	f7fb fbc8 	bl	100011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
10005a24:	687b      	ldr	r3, [r7, #4]
10005a26:	2202      	movs	r2, #2
10005a28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
10005a2c:	687b      	ldr	r3, [r7, #4]
10005a2e:	681b      	ldr	r3, [r3, #0]
10005a30:	681a      	ldr	r2, [r3, #0]
10005a32:	687b      	ldr	r3, [r7, #4]
10005a34:	681b      	ldr	r3, [r3, #0]
10005a36:	f022 0201 	bic.w	r2, r2, #1
10005a3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
10005a3c:	687b      	ldr	r3, [r7, #4]
10005a3e:	681b      	ldr	r3, [r3, #0]
10005a40:	689b      	ldr	r3, [r3, #8]
10005a42:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
10005a46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
10005a48:	687b      	ldr	r3, [r7, #4]
10005a4a:	699b      	ldr	r3, [r3, #24]
10005a4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
10005a50:	d119      	bne.n	10005a86 <HAL_SPI_Init+0x112>
10005a52:	687b      	ldr	r3, [r7, #4]
10005a54:	685b      	ldr	r3, [r3, #4]
10005a56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
10005a5a:	d103      	bne.n	10005a64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
10005a5c:	687b      	ldr	r3, [r7, #4]
10005a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
10005a60:	2b00      	cmp	r3, #0
10005a62:	d008      	beq.n	10005a76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
10005a64:	687b      	ldr	r3, [r7, #4]
10005a66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
10005a68:	2b00      	cmp	r3, #0
10005a6a:	d10c      	bne.n	10005a86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
10005a6c:	687b      	ldr	r3, [r7, #4]
10005a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
10005a70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
10005a74:	d107      	bne.n	10005a86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
10005a76:	687b      	ldr	r3, [r7, #4]
10005a78:	681b      	ldr	r3, [r3, #0]
10005a7a:	681a      	ldr	r2, [r3, #0]
10005a7c:	687b      	ldr	r3, [r7, #4]
10005a7e:	681b      	ldr	r3, [r3, #0]
10005a80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
10005a84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
10005a86:	687b      	ldr	r3, [r7, #4]
10005a88:	685b      	ldr	r3, [r3, #4]
10005a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
10005a8e:	2b00      	cmp	r3, #0
10005a90:	d00f      	beq.n	10005ab2 <HAL_SPI_Init+0x13e>
10005a92:	687b      	ldr	r3, [r7, #4]
10005a94:	68db      	ldr	r3, [r3, #12]
10005a96:	2b06      	cmp	r3, #6
10005a98:	d90b      	bls.n	10005ab2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
10005a9a:	687b      	ldr	r3, [r7, #4]
10005a9c:	681b      	ldr	r3, [r3, #0]
10005a9e:	681b      	ldr	r3, [r3, #0]
10005aa0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
10005aa4:	687b      	ldr	r3, [r7, #4]
10005aa6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
10005aa8:	687b      	ldr	r3, [r7, #4]
10005aaa:	681b      	ldr	r3, [r3, #0]
10005aac:	430a      	orrs	r2, r1
10005aae:	601a      	str	r2, [r3, #0]
10005ab0:	e007      	b.n	10005ac2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
10005ab2:	687b      	ldr	r3, [r7, #4]
10005ab4:	681b      	ldr	r3, [r3, #0]
10005ab6:	681a      	ldr	r2, [r3, #0]
10005ab8:	687b      	ldr	r3, [r7, #4]
10005aba:	681b      	ldr	r3, [r3, #0]
10005abc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
10005ac0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
10005ac2:	687b      	ldr	r3, [r7, #4]
10005ac4:	69da      	ldr	r2, [r3, #28]
10005ac6:	687b      	ldr	r3, [r7, #4]
10005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005aca:	431a      	orrs	r2, r3
10005acc:	68bb      	ldr	r3, [r7, #8]
10005ace:	431a      	orrs	r2, r3
10005ad0:	687b      	ldr	r3, [r7, #4]
10005ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005ad4:	ea42 0103 	orr.w	r1, r2, r3
10005ad8:	687b      	ldr	r3, [r7, #4]
10005ada:	68da      	ldr	r2, [r3, #12]
10005adc:	687b      	ldr	r3, [r7, #4]
10005ade:	681b      	ldr	r3, [r3, #0]
10005ae0:	430a      	orrs	r2, r1
10005ae2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
10005ae4:	687b      	ldr	r3, [r7, #4]
10005ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10005ae8:	687b      	ldr	r3, [r7, #4]
10005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005aec:	431a      	orrs	r2, r3
10005aee:	687b      	ldr	r3, [r7, #4]
10005af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005af2:	431a      	orrs	r2, r3
10005af4:	687b      	ldr	r3, [r7, #4]
10005af6:	699b      	ldr	r3, [r3, #24]
10005af8:	431a      	orrs	r2, r3
10005afa:	687b      	ldr	r3, [r7, #4]
10005afc:	691b      	ldr	r3, [r3, #16]
10005afe:	431a      	orrs	r2, r3
10005b00:	687b      	ldr	r3, [r7, #4]
10005b02:	695b      	ldr	r3, [r3, #20]
10005b04:	431a      	orrs	r2, r3
10005b06:	687b      	ldr	r3, [r7, #4]
10005b08:	6a1b      	ldr	r3, [r3, #32]
10005b0a:	431a      	orrs	r2, r3
10005b0c:	687b      	ldr	r3, [r7, #4]
10005b0e:	685b      	ldr	r3, [r3, #4]
10005b10:	431a      	orrs	r2, r3
10005b12:	687b      	ldr	r3, [r7, #4]
10005b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10005b16:	431a      	orrs	r2, r3
10005b18:	687b      	ldr	r3, [r7, #4]
10005b1a:	689b      	ldr	r3, [r3, #8]
10005b1c:	431a      	orrs	r2, r3
10005b1e:	687b      	ldr	r3, [r7, #4]
10005b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10005b22:	ea42 0103 	orr.w	r1, r2, r3
10005b26:	687b      	ldr	r3, [r7, #4]
10005b28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10005b2a:	687b      	ldr	r3, [r7, #4]
10005b2c:	681b      	ldr	r3, [r3, #0]
10005b2e:	430a      	orrs	r2, r1
10005b30:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
10005b32:	687b      	ldr	r3, [r7, #4]
10005b34:	685b      	ldr	r3, [r3, #4]
10005b36:	2b00      	cmp	r3, #0
10005b38:	d113      	bne.n	10005b62 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
10005b3a:	687b      	ldr	r3, [r7, #4]
10005b3c:	681b      	ldr	r3, [r3, #0]
10005b3e:	689b      	ldr	r3, [r3, #8]
10005b40:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
10005b44:	687b      	ldr	r3, [r7, #4]
10005b46:	681b      	ldr	r3, [r3, #0]
10005b48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
10005b4c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
10005b4e:	687b      	ldr	r3, [r7, #4]
10005b50:	681b      	ldr	r3, [r3, #0]
10005b52:	689b      	ldr	r3, [r3, #8]
10005b54:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
10005b58:	687b      	ldr	r3, [r7, #4]
10005b5a:	681b      	ldr	r3, [r3, #0]
10005b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
10005b60:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
10005b62:	687b      	ldr	r3, [r7, #4]
10005b64:	681b      	ldr	r3, [r3, #0]
10005b66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
10005b68:	687b      	ldr	r3, [r7, #4]
10005b6a:	681b      	ldr	r3, [r3, #0]
10005b6c:	f022 0201 	bic.w	r2, r2, #1
10005b70:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
10005b72:	687b      	ldr	r3, [r7, #4]
10005b74:	685b      	ldr	r3, [r3, #4]
10005b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
10005b7a:	2b00      	cmp	r3, #0
10005b7c:	d00a      	beq.n	10005b94 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
10005b7e:	687b      	ldr	r3, [r7, #4]
10005b80:	681b      	ldr	r3, [r3, #0]
10005b82:	68db      	ldr	r3, [r3, #12]
10005b84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
10005b88:	687b      	ldr	r3, [r7, #4]
10005b8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
10005b8c:	687b      	ldr	r3, [r7, #4]
10005b8e:	681b      	ldr	r3, [r3, #0]
10005b90:	430a      	orrs	r2, r1
10005b92:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
10005b94:	687b      	ldr	r3, [r7, #4]
10005b96:	2200      	movs	r2, #0
10005b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
10005b9c:	687b      	ldr	r3, [r7, #4]
10005b9e:	2201      	movs	r2, #1
10005ba0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
10005ba4:	2300      	movs	r3, #0
}
10005ba6:	4618      	mov	r0, r3
10005ba8:	3710      	adds	r7, #16
10005baa:	46bd      	mov	sp, r7
10005bac:	bd80      	pop	{r7, pc}
10005bae:	bf00      	nop
10005bb0:	44004000 	.word	0x44004000
10005bb4:	4000b000 	.word	0x4000b000
10005bb8:	4000c000 	.word	0x4000c000

10005bbc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10005bbc:	b580      	push	{r7, lr}
10005bbe:	b08a      	sub	sp, #40	@ 0x28
10005bc0:	af02      	add	r7, sp, #8
10005bc2:	60f8      	str	r0, [r7, #12]
10005bc4:	60b9      	str	r1, [r7, #8]
10005bc6:	603b      	str	r3, [r7, #0]
10005bc8:	4613      	mov	r3, r2
10005bca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
10005bcc:	68fb      	ldr	r3, [r7, #12]
10005bce:	681b      	ldr	r3, [r3, #0]
10005bd0:	3320      	adds	r3, #32
10005bd2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
10005bd4:	2300      	movs	r3, #0
10005bd6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
10005bd8:	68fb      	ldr	r3, [r7, #12]
10005bda:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
10005bde:	2b01      	cmp	r3, #1
10005be0:	d101      	bne.n	10005be6 <HAL_SPI_Transmit+0x2a>
10005be2:	2302      	movs	r3, #2
10005be4:	e1df      	b.n	10005fa6 <HAL_SPI_Transmit+0x3ea>
10005be6:	68fb      	ldr	r3, [r7, #12]
10005be8:	2201      	movs	r2, #1
10005bea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
10005bee:	f7fb fce5 	bl	100015bc <HAL_GetTick>
10005bf2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
10005bf4:	68fb      	ldr	r3, [r7, #12]
10005bf6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10005bfa:	b2db      	uxtb	r3, r3
10005bfc:	2b01      	cmp	r3, #1
10005bfe:	d007      	beq.n	10005c10 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
10005c00:	2302      	movs	r3, #2
10005c02:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
10005c04:	68fb      	ldr	r3, [r7, #12]
10005c06:	2200      	movs	r2, #0
10005c08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
10005c0c:	7efb      	ldrb	r3, [r7, #27]
10005c0e:	e1ca      	b.n	10005fa6 <HAL_SPI_Transmit+0x3ea>
  }

  if ((pData == NULL) || (Size == 0UL))
10005c10:	68bb      	ldr	r3, [r7, #8]
10005c12:	2b00      	cmp	r3, #0
10005c14:	d002      	beq.n	10005c1c <HAL_SPI_Transmit+0x60>
10005c16:	88fb      	ldrh	r3, [r7, #6]
10005c18:	2b00      	cmp	r3, #0
10005c1a:	d107      	bne.n	10005c2c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
10005c1c:	2301      	movs	r3, #1
10005c1e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
10005c20:	68fb      	ldr	r3, [r7, #12]
10005c22:	2200      	movs	r2, #0
10005c24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
10005c28:	7efb      	ldrb	r3, [r7, #27]
10005c2a:	e1bc      	b.n	10005fa6 <HAL_SPI_Transmit+0x3ea>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
10005c2c:	68fb      	ldr	r3, [r7, #12]
10005c2e:	2203      	movs	r2, #3
10005c30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
10005c34:	68fb      	ldr	r3, [r7, #12]
10005c36:	2200      	movs	r2, #0
10005c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
10005c3c:	68fb      	ldr	r3, [r7, #12]
10005c3e:	68ba      	ldr	r2, [r7, #8]
10005c40:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
10005c42:	68fb      	ldr	r3, [r7, #12]
10005c44:	88fa      	ldrh	r2, [r7, #6]
10005c46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
10005c4a:	68fb      	ldr	r3, [r7, #12]
10005c4c:	88fa      	ldrh	r2, [r7, #6]
10005c4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
10005c52:	68fb      	ldr	r3, [r7, #12]
10005c54:	2200      	movs	r2, #0
10005c56:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
10005c58:	68fb      	ldr	r3, [r7, #12]
10005c5a:	2200      	movs	r2, #0
10005c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
10005c60:	68fb      	ldr	r3, [r7, #12]
10005c62:	2200      	movs	r2, #0
10005c64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
10005c68:	68fb      	ldr	r3, [r7, #12]
10005c6a:	2200      	movs	r2, #0
10005c6c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
10005c6e:	68fb      	ldr	r3, [r7, #12]
10005c70:	2200      	movs	r2, #0
10005c72:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
10005c74:	68fb      	ldr	r3, [r7, #12]
10005c76:	689b      	ldr	r3, [r3, #8]
10005c78:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
10005c7c:	d108      	bne.n	10005c90 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
10005c7e:	68fb      	ldr	r3, [r7, #12]
10005c80:	681b      	ldr	r3, [r3, #0]
10005c82:	681a      	ldr	r2, [r3, #0]
10005c84:	68fb      	ldr	r3, [r7, #12]
10005c86:	681b      	ldr	r3, [r3, #0]
10005c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
10005c8c:	601a      	str	r2, [r3, #0]
10005c8e:	e009      	b.n	10005ca4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
10005c90:	68fb      	ldr	r3, [r7, #12]
10005c92:	681b      	ldr	r3, [r3, #0]
10005c94:	68db      	ldr	r3, [r3, #12]
10005c96:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
10005c9a:	68fb      	ldr	r3, [r7, #12]
10005c9c:	681b      	ldr	r3, [r3, #0]
10005c9e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
10005ca2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
10005ca4:	68fb      	ldr	r3, [r7, #12]
10005ca6:	681b      	ldr	r3, [r3, #0]
10005ca8:	685b      	ldr	r3, [r3, #4]
10005caa:	0c1b      	lsrs	r3, r3, #16
10005cac:	041b      	lsls	r3, r3, #16
10005cae:	88f9      	ldrh	r1, [r7, #6]
10005cb0:	68fa      	ldr	r2, [r7, #12]
10005cb2:	6812      	ldr	r2, [r2, #0]
10005cb4:	430b      	orrs	r3, r1
10005cb6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
10005cb8:	68fb      	ldr	r3, [r7, #12]
10005cba:	681b      	ldr	r3, [r3, #0]
10005cbc:	681a      	ldr	r2, [r3, #0]
10005cbe:	68fb      	ldr	r3, [r7, #12]
10005cc0:	681b      	ldr	r3, [r3, #0]
10005cc2:	f042 0201 	orr.w	r2, r2, #1
10005cc6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
10005cc8:	68fb      	ldr	r3, [r7, #12]
10005cca:	685b      	ldr	r3, [r3, #4]
10005ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
10005cd0:	d107      	bne.n	10005ce2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
10005cd2:	68fb      	ldr	r3, [r7, #12]
10005cd4:	681b      	ldr	r3, [r3, #0]
10005cd6:	681a      	ldr	r2, [r3, #0]
10005cd8:	68fb      	ldr	r3, [r7, #12]
10005cda:	681b      	ldr	r3, [r3, #0]
10005cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
10005ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
10005ce2:	68fb      	ldr	r3, [r7, #12]
10005ce4:	68db      	ldr	r3, [r3, #12]
10005ce6:	2b0f      	cmp	r3, #15
10005ce8:	d947      	bls.n	10005d7a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
10005cea:	e03f      	b.n	10005d6c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
10005cec:	68fb      	ldr	r3, [r7, #12]
10005cee:	681b      	ldr	r3, [r3, #0]
10005cf0:	695b      	ldr	r3, [r3, #20]
10005cf2:	f003 0302 	and.w	r3, r3, #2
10005cf6:	2b02      	cmp	r3, #2
10005cf8:	d114      	bne.n	10005d24 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
10005cfa:	68fb      	ldr	r3, [r7, #12]
10005cfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
10005cfe:	68fb      	ldr	r3, [r7, #12]
10005d00:	681b      	ldr	r3, [r3, #0]
10005d02:	6812      	ldr	r2, [r2, #0]
10005d04:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
10005d06:	68fb      	ldr	r3, [r7, #12]
10005d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005d0a:	1d1a      	adds	r2, r3, #4
10005d0c:	68fb      	ldr	r3, [r7, #12]
10005d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
10005d10:	68fb      	ldr	r3, [r7, #12]
10005d12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005d16:	b29b      	uxth	r3, r3
10005d18:	3b01      	subs	r3, #1
10005d1a:	b29a      	uxth	r2, r3
10005d1c:	68fb      	ldr	r3, [r7, #12]
10005d1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10005d22:	e023      	b.n	10005d6c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10005d24:	f7fb fc4a 	bl	100015bc <HAL_GetTick>
10005d28:	4602      	mov	r2, r0
10005d2a:	697b      	ldr	r3, [r7, #20]
10005d2c:	1ad3      	subs	r3, r2, r3
10005d2e:	683a      	ldr	r2, [r7, #0]
10005d30:	429a      	cmp	r2, r3
10005d32:	d803      	bhi.n	10005d3c <HAL_SPI_Transmit+0x180>
10005d34:	683b      	ldr	r3, [r7, #0]
10005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
10005d3a:	d102      	bne.n	10005d42 <HAL_SPI_Transmit+0x186>
10005d3c:	683b      	ldr	r3, [r7, #0]
10005d3e:	2b00      	cmp	r3, #0
10005d40:	d114      	bne.n	10005d6c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10005d42:	68f8      	ldr	r0, [r7, #12]
10005d44:	f000 fac0 	bl	100062c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
10005d48:	68fb      	ldr	r3, [r7, #12]
10005d4a:	2200      	movs	r2, #0
10005d4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10005d50:	68fb      	ldr	r3, [r7, #12]
10005d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10005d56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
10005d5a:	68fb      	ldr	r3, [r7, #12]
10005d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10005d60:	68fb      	ldr	r3, [r7, #12]
10005d62:	2201      	movs	r2, #1
10005d64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
10005d68:	2303      	movs	r3, #3
10005d6a:	e11c      	b.n	10005fa6 <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
10005d6c:	68fb      	ldr	r3, [r7, #12]
10005d6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005d72:	b29b      	uxth	r3, r3
10005d74:	2b00      	cmp	r3, #0
10005d76:	d1b9      	bne.n	10005cec <HAL_SPI_Transmit+0x130>
10005d78:	e0ef      	b.n	10005f5a <HAL_SPI_Transmit+0x39e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
10005d7a:	68fb      	ldr	r3, [r7, #12]
10005d7c:	68db      	ldr	r3, [r3, #12]
10005d7e:	2b07      	cmp	r3, #7
10005d80:	f240 80e4 	bls.w	10005f4c <HAL_SPI_Transmit+0x390>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
10005d84:	e05d      	b.n	10005e42 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
10005d86:	68fb      	ldr	r3, [r7, #12]
10005d88:	681b      	ldr	r3, [r3, #0]
10005d8a:	695b      	ldr	r3, [r3, #20]
10005d8c:	f003 0302 	and.w	r3, r3, #2
10005d90:	2b02      	cmp	r3, #2
10005d92:	d132      	bne.n	10005dfa <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
10005d94:	68fb      	ldr	r3, [r7, #12]
10005d96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005d9a:	b29b      	uxth	r3, r3
10005d9c:	2b01      	cmp	r3, #1
10005d9e:	d918      	bls.n	10005dd2 <HAL_SPI_Transmit+0x216>
10005da0:	68fb      	ldr	r3, [r7, #12]
10005da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005da4:	2b00      	cmp	r3, #0
10005da6:	d014      	beq.n	10005dd2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
10005da8:	68fb      	ldr	r3, [r7, #12]
10005daa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
10005dac:	68fb      	ldr	r3, [r7, #12]
10005dae:	681b      	ldr	r3, [r3, #0]
10005db0:	6812      	ldr	r2, [r2, #0]
10005db2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
10005db4:	68fb      	ldr	r3, [r7, #12]
10005db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005db8:	1d1a      	adds	r2, r3, #4
10005dba:	68fb      	ldr	r3, [r7, #12]
10005dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
10005dbe:	68fb      	ldr	r3, [r7, #12]
10005dc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005dc4:	b29b      	uxth	r3, r3
10005dc6:	3b02      	subs	r3, #2
10005dc8:	b29a      	uxth	r2, r3
10005dca:	68fb      	ldr	r3, [r7, #12]
10005dcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10005dd0:	e037      	b.n	10005e42 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
10005dd2:	68fb      	ldr	r3, [r7, #12]
10005dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005dd6:	881a      	ldrh	r2, [r3, #0]
10005dd8:	69fb      	ldr	r3, [r7, #28]
10005dda:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
10005ddc:	68fb      	ldr	r3, [r7, #12]
10005dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005de0:	1c9a      	adds	r2, r3, #2
10005de2:	68fb      	ldr	r3, [r7, #12]
10005de4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
10005de6:	68fb      	ldr	r3, [r7, #12]
10005de8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005dec:	b29b      	uxth	r3, r3
10005dee:	3b01      	subs	r3, #1
10005df0:	b29a      	uxth	r2, r3
10005df2:	68fb      	ldr	r3, [r7, #12]
10005df4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10005df8:	e023      	b.n	10005e42 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10005dfa:	f7fb fbdf 	bl	100015bc <HAL_GetTick>
10005dfe:	4602      	mov	r2, r0
10005e00:	697b      	ldr	r3, [r7, #20]
10005e02:	1ad3      	subs	r3, r2, r3
10005e04:	683a      	ldr	r2, [r7, #0]
10005e06:	429a      	cmp	r2, r3
10005e08:	d803      	bhi.n	10005e12 <HAL_SPI_Transmit+0x256>
10005e0a:	683b      	ldr	r3, [r7, #0]
10005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
10005e10:	d102      	bne.n	10005e18 <HAL_SPI_Transmit+0x25c>
10005e12:	683b      	ldr	r3, [r7, #0]
10005e14:	2b00      	cmp	r3, #0
10005e16:	d114      	bne.n	10005e42 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10005e18:	68f8      	ldr	r0, [r7, #12]
10005e1a:	f000 fa55 	bl	100062c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
10005e1e:	68fb      	ldr	r3, [r7, #12]
10005e20:	2200      	movs	r2, #0
10005e22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10005e26:	68fb      	ldr	r3, [r7, #12]
10005e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10005e2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
10005e30:	68fb      	ldr	r3, [r7, #12]
10005e32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10005e36:	68fb      	ldr	r3, [r7, #12]
10005e38:	2201      	movs	r2, #1
10005e3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
10005e3e:	2303      	movs	r3, #3
10005e40:	e0b1      	b.n	10005fa6 <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
10005e42:	68fb      	ldr	r3, [r7, #12]
10005e44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005e48:	b29b      	uxth	r3, r3
10005e4a:	2b00      	cmp	r3, #0
10005e4c:	d19b      	bne.n	10005d86 <HAL_SPI_Transmit+0x1ca>
10005e4e:	e084      	b.n	10005f5a <HAL_SPI_Transmit+0x39e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
10005e50:	68fb      	ldr	r3, [r7, #12]
10005e52:	681b      	ldr	r3, [r3, #0]
10005e54:	695b      	ldr	r3, [r3, #20]
10005e56:	f003 0302 	and.w	r3, r3, #2
10005e5a:	2b02      	cmp	r3, #2
10005e5c:	d152      	bne.n	10005f04 <HAL_SPI_Transmit+0x348>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
10005e5e:	68fb      	ldr	r3, [r7, #12]
10005e60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005e64:	b29b      	uxth	r3, r3
10005e66:	2b03      	cmp	r3, #3
10005e68:	d918      	bls.n	10005e9c <HAL_SPI_Transmit+0x2e0>
10005e6a:	68fb      	ldr	r3, [r7, #12]
10005e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005e6e:	2b40      	cmp	r3, #64	@ 0x40
10005e70:	d914      	bls.n	10005e9c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
10005e72:	68fb      	ldr	r3, [r7, #12]
10005e74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
10005e76:	68fb      	ldr	r3, [r7, #12]
10005e78:	681b      	ldr	r3, [r3, #0]
10005e7a:	6812      	ldr	r2, [r2, #0]
10005e7c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
10005e7e:	68fb      	ldr	r3, [r7, #12]
10005e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005e82:	1d1a      	adds	r2, r3, #4
10005e84:	68fb      	ldr	r3, [r7, #12]
10005e86:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
10005e88:	68fb      	ldr	r3, [r7, #12]
10005e8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005e8e:	b29b      	uxth	r3, r3
10005e90:	3b04      	subs	r3, #4
10005e92:	b29a      	uxth	r2, r3
10005e94:	68fb      	ldr	r3, [r7, #12]
10005e96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10005e9a:	e057      	b.n	10005f4c <HAL_SPI_Transmit+0x390>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
10005e9c:	68fb      	ldr	r3, [r7, #12]
10005e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005ea2:	b29b      	uxth	r3, r3
10005ea4:	2b01      	cmp	r3, #1
10005ea6:	d917      	bls.n	10005ed8 <HAL_SPI_Transmit+0x31c>
10005ea8:	68fb      	ldr	r3, [r7, #12]
10005eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005eac:	2b00      	cmp	r3, #0
10005eae:	d013      	beq.n	10005ed8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
10005eb0:	68fb      	ldr	r3, [r7, #12]
10005eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005eb4:	881a      	ldrh	r2, [r3, #0]
10005eb6:	69fb      	ldr	r3, [r7, #28]
10005eb8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
10005eba:	68fb      	ldr	r3, [r7, #12]
10005ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005ebe:	1c9a      	adds	r2, r3, #2
10005ec0:	68fb      	ldr	r3, [r7, #12]
10005ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
10005ec4:	68fb      	ldr	r3, [r7, #12]
10005ec6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005eca:	b29b      	uxth	r3, r3
10005ecc:	3b02      	subs	r3, #2
10005ece:	b29a      	uxth	r2, r3
10005ed0:	68fb      	ldr	r3, [r7, #12]
10005ed2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10005ed6:	e039      	b.n	10005f4c <HAL_SPI_Transmit+0x390>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
10005ed8:	68fb      	ldr	r3, [r7, #12]
10005eda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
10005edc:	68fb      	ldr	r3, [r7, #12]
10005ede:	681b      	ldr	r3, [r3, #0]
10005ee0:	3320      	adds	r3, #32
10005ee2:	7812      	ldrb	r2, [r2, #0]
10005ee4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
10005ee6:	68fb      	ldr	r3, [r7, #12]
10005ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10005eea:	1c5a      	adds	r2, r3, #1
10005eec:	68fb      	ldr	r3, [r7, #12]
10005eee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
10005ef0:	68fb      	ldr	r3, [r7, #12]
10005ef2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005ef6:	b29b      	uxth	r3, r3
10005ef8:	3b01      	subs	r3, #1
10005efa:	b29a      	uxth	r2, r3
10005efc:	68fb      	ldr	r3, [r7, #12]
10005efe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10005f02:	e023      	b.n	10005f4c <HAL_SPI_Transmit+0x390>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10005f04:	f7fb fb5a 	bl	100015bc <HAL_GetTick>
10005f08:	4602      	mov	r2, r0
10005f0a:	697b      	ldr	r3, [r7, #20]
10005f0c:	1ad3      	subs	r3, r2, r3
10005f0e:	683a      	ldr	r2, [r7, #0]
10005f10:	429a      	cmp	r2, r3
10005f12:	d803      	bhi.n	10005f1c <HAL_SPI_Transmit+0x360>
10005f14:	683b      	ldr	r3, [r7, #0]
10005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
10005f1a:	d102      	bne.n	10005f22 <HAL_SPI_Transmit+0x366>
10005f1c:	683b      	ldr	r3, [r7, #0]
10005f1e:	2b00      	cmp	r3, #0
10005f20:	d114      	bne.n	10005f4c <HAL_SPI_Transmit+0x390>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10005f22:	68f8      	ldr	r0, [r7, #12]
10005f24:	f000 f9d0 	bl	100062c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
10005f28:	68fb      	ldr	r3, [r7, #12]
10005f2a:	2200      	movs	r2, #0
10005f2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10005f30:	68fb      	ldr	r3, [r7, #12]
10005f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10005f36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
10005f3a:	68fb      	ldr	r3, [r7, #12]
10005f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10005f40:	68fb      	ldr	r3, [r7, #12]
10005f42:	2201      	movs	r2, #1
10005f44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
10005f48:	2303      	movs	r3, #3
10005f4a:	e02c      	b.n	10005fa6 <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
10005f4c:	68fb      	ldr	r3, [r7, #12]
10005f4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10005f52:	b29b      	uxth	r3, r3
10005f54:	2b00      	cmp	r3, #0
10005f56:	f47f af7b 	bne.w	10005e50 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
10005f5a:	683b      	ldr	r3, [r7, #0]
10005f5c:	9300      	str	r3, [sp, #0]
10005f5e:	697b      	ldr	r3, [r7, #20]
10005f60:	2200      	movs	r2, #0
10005f62:	2108      	movs	r1, #8
10005f64:	68f8      	ldr	r0, [r7, #12]
10005f66:	f000 fa4f 	bl	10006408 <SPI_WaitOnFlagUntilTimeout>
10005f6a:	4603      	mov	r3, r0
10005f6c:	2b00      	cmp	r3, #0
10005f6e:	d007      	beq.n	10005f80 <HAL_SPI_Transmit+0x3c4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
10005f70:	68fb      	ldr	r3, [r7, #12]
10005f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10005f76:	f043 0220 	orr.w	r2, r3, #32
10005f7a:	68fb      	ldr	r3, [r7, #12]
10005f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
10005f80:	68f8      	ldr	r0, [r7, #12]
10005f82:	f000 f9a1 	bl	100062c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
10005f86:	68fb      	ldr	r3, [r7, #12]
10005f88:	2200      	movs	r2, #0
10005f8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
10005f8e:	68fb      	ldr	r3, [r7, #12]
10005f90:	2201      	movs	r2, #1
10005f92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
10005f96:	68fb      	ldr	r3, [r7, #12]
10005f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10005f9c:	2b00      	cmp	r3, #0
10005f9e:	d001      	beq.n	10005fa4 <HAL_SPI_Transmit+0x3e8>
  {
    return HAL_ERROR;
10005fa0:	2301      	movs	r3, #1
10005fa2:	e000      	b.n	10005fa6 <HAL_SPI_Transmit+0x3ea>
  }
  return errorcode;
10005fa4:	7efb      	ldrb	r3, [r7, #27]
}
10005fa6:	4618      	mov	r0, r3
10005fa8:	3720      	adds	r7, #32
10005faa:	46bd      	mov	sp, r7
10005fac:	bd80      	pop	{r7, pc}

10005fae <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10005fae:	b580      	push	{r7, lr}
10005fb0:	b088      	sub	sp, #32
10005fb2:	af00      	add	r7, sp, #0
10005fb4:	60f8      	str	r0, [r7, #12]
10005fb6:	60b9      	str	r1, [r7, #8]
10005fb8:	603b      	str	r3, [r7, #0]
10005fba:	4613      	mov	r3, r2
10005fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
10005fbe:	2300      	movs	r3, #0
10005fc0:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
10005fc2:	68fb      	ldr	r3, [r7, #12]
10005fc4:	681b      	ldr	r3, [r3, #0]
10005fc6:	3330      	adds	r3, #48	@ 0x30
10005fc8:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
10005fca:	68fb      	ldr	r3, [r7, #12]
10005fcc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
10005fd0:	2b01      	cmp	r3, #1
10005fd2:	d101      	bne.n	10005fd8 <HAL_SPI_Receive+0x2a>
10005fd4:	2302      	movs	r3, #2
10005fd6:	e173      	b.n	100062c0 <HAL_SPI_Receive+0x312>
10005fd8:	68fb      	ldr	r3, [r7, #12]
10005fda:	2201      	movs	r2, #1
10005fdc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
10005fe0:	f7fb faec 	bl	100015bc <HAL_GetTick>
10005fe4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
10005fe6:	68fb      	ldr	r3, [r7, #12]
10005fe8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10005fec:	b2db      	uxtb	r3, r3
10005fee:	2b01      	cmp	r3, #1
10005ff0:	d007      	beq.n	10006002 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
10005ff2:	2302      	movs	r3, #2
10005ff4:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
10005ff6:	68fb      	ldr	r3, [r7, #12]
10005ff8:	2200      	movs	r2, #0
10005ffa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
10005ffe:	7ffb      	ldrb	r3, [r7, #31]
10006000:	e15e      	b.n	100062c0 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
10006002:	68bb      	ldr	r3, [r7, #8]
10006004:	2b00      	cmp	r3, #0
10006006:	d002      	beq.n	1000600e <HAL_SPI_Receive+0x60>
10006008:	88fb      	ldrh	r3, [r7, #6]
1000600a:	2b00      	cmp	r3, #0
1000600c:	d107      	bne.n	1000601e <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
1000600e:	2301      	movs	r3, #1
10006010:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
10006012:	68fb      	ldr	r3, [r7, #12]
10006014:	2200      	movs	r2, #0
10006016:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
1000601a:	7ffb      	ldrb	r3, [r7, #31]
1000601c:	e150      	b.n	100062c0 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
1000601e:	68fb      	ldr	r3, [r7, #12]
10006020:	2204      	movs	r2, #4
10006022:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
10006026:	68fb      	ldr	r3, [r7, #12]
10006028:	2200      	movs	r2, #0
1000602a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
1000602e:	68fb      	ldr	r3, [r7, #12]
10006030:	68ba      	ldr	r2, [r7, #8]
10006032:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
10006034:	68fb      	ldr	r3, [r7, #12]
10006036:	88fa      	ldrh	r2, [r7, #6]
10006038:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
1000603c:	68fb      	ldr	r3, [r7, #12]
1000603e:	88fa      	ldrh	r2, [r7, #6]
10006040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
10006044:	68fb      	ldr	r3, [r7, #12]
10006046:	2200      	movs	r2, #0
10006048:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
1000604a:	68fb      	ldr	r3, [r7, #12]
1000604c:	2200      	movs	r2, #0
1000604e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
10006052:	68fb      	ldr	r3, [r7, #12]
10006054:	2200      	movs	r2, #0
10006056:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
1000605a:	68fb      	ldr	r3, [r7, #12]
1000605c:	2200      	movs	r2, #0
1000605e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
10006060:	68fb      	ldr	r3, [r7, #12]
10006062:	2200      	movs	r2, #0
10006064:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
10006066:	68fb      	ldr	r3, [r7, #12]
10006068:	689b      	ldr	r3, [r3, #8]
1000606a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
1000606e:	d108      	bne.n	10006082 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
10006070:	68fb      	ldr	r3, [r7, #12]
10006072:	681b      	ldr	r3, [r3, #0]
10006074:	681a      	ldr	r2, [r3, #0]
10006076:	68fb      	ldr	r3, [r7, #12]
10006078:	681b      	ldr	r3, [r3, #0]
1000607a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
1000607e:	601a      	str	r2, [r3, #0]
10006080:	e009      	b.n	10006096 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
10006082:	68fb      	ldr	r3, [r7, #12]
10006084:	681b      	ldr	r3, [r3, #0]
10006086:	68db      	ldr	r3, [r3, #12]
10006088:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
1000608c:	68fb      	ldr	r3, [r7, #12]
1000608e:	681b      	ldr	r3, [r3, #0]
10006090:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
10006094:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
10006096:	68fb      	ldr	r3, [r7, #12]
10006098:	681b      	ldr	r3, [r3, #0]
1000609a:	685b      	ldr	r3, [r3, #4]
1000609c:	0c1b      	lsrs	r3, r3, #16
1000609e:	041b      	lsls	r3, r3, #16
100060a0:	88f9      	ldrh	r1, [r7, #6]
100060a2:	68fa      	ldr	r2, [r7, #12]
100060a4:	6812      	ldr	r2, [r2, #0]
100060a6:	430b      	orrs	r3, r1
100060a8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
100060aa:	68fb      	ldr	r3, [r7, #12]
100060ac:	681b      	ldr	r3, [r3, #0]
100060ae:	681a      	ldr	r2, [r3, #0]
100060b0:	68fb      	ldr	r3, [r7, #12]
100060b2:	681b      	ldr	r3, [r3, #0]
100060b4:	f042 0201 	orr.w	r2, r2, #1
100060b8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
100060ba:	68fb      	ldr	r3, [r7, #12]
100060bc:	685b      	ldr	r3, [r3, #4]
100060be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
100060c2:	d107      	bne.n	100060d4 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
100060c4:	68fb      	ldr	r3, [r7, #12]
100060c6:	681b      	ldr	r3, [r3, #0]
100060c8:	681a      	ldr	r2, [r3, #0]
100060ca:	68fb      	ldr	r3, [r7, #12]
100060cc:	681b      	ldr	r3, [r3, #0]
100060ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
100060d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
100060d4:	68fb      	ldr	r3, [r7, #12]
100060d6:	68db      	ldr	r3, [r3, #12]
100060d8:	2b0f      	cmp	r3, #15
100060da:	d948      	bls.n	1000616e <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
100060dc:	e040      	b.n	10006160 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
100060de:	68fb      	ldr	r3, [r7, #12]
100060e0:	681b      	ldr	r3, [r3, #0]
100060e2:	695a      	ldr	r2, [r3, #20]
100060e4:	f248 0308 	movw	r3, #32776	@ 0x8008
100060e8:	4013      	ands	r3, r2
100060ea:	2b00      	cmp	r3, #0
100060ec:	d014      	beq.n	10006118 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
100060ee:	68fb      	ldr	r3, [r7, #12]
100060f0:	681a      	ldr	r2, [r3, #0]
100060f2:	68fb      	ldr	r3, [r7, #12]
100060f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100060f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
100060f8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
100060fa:	68fb      	ldr	r3, [r7, #12]
100060fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100060fe:	1d1a      	adds	r2, r3, #4
10006100:	68fb      	ldr	r3, [r7, #12]
10006102:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
10006104:	68fb      	ldr	r3, [r7, #12]
10006106:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
1000610a:	b29b      	uxth	r3, r3
1000610c:	3b01      	subs	r3, #1
1000610e:	b29a      	uxth	r2, r3
10006110:	68fb      	ldr	r3, [r7, #12]
10006112:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
10006116:	e023      	b.n	10006160 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006118:	f7fb fa50 	bl	100015bc <HAL_GetTick>
1000611c:	4602      	mov	r2, r0
1000611e:	697b      	ldr	r3, [r7, #20]
10006120:	1ad3      	subs	r3, r2, r3
10006122:	683a      	ldr	r2, [r7, #0]
10006124:	429a      	cmp	r2, r3
10006126:	d803      	bhi.n	10006130 <HAL_SPI_Receive+0x182>
10006128:	683b      	ldr	r3, [r7, #0]
1000612a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000612e:	d102      	bne.n	10006136 <HAL_SPI_Receive+0x188>
10006130:	683b      	ldr	r3, [r7, #0]
10006132:	2b00      	cmp	r3, #0
10006134:	d114      	bne.n	10006160 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10006136:	68f8      	ldr	r0, [r7, #12]
10006138:	f000 f8c6 	bl	100062c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
1000613c:	68fb      	ldr	r3, [r7, #12]
1000613e:	2200      	movs	r2, #0
10006140:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10006144:	68fb      	ldr	r3, [r7, #12]
10006146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000614a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
1000614e:	68fb      	ldr	r3, [r7, #12]
10006150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10006154:	68fb      	ldr	r3, [r7, #12]
10006156:	2201      	movs	r2, #1
10006158:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
1000615c:	2303      	movs	r3, #3
1000615e:	e0af      	b.n	100062c0 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
10006160:	68fb      	ldr	r3, [r7, #12]
10006162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
10006166:	b29b      	uxth	r3, r3
10006168:	2b00      	cmp	r3, #0
1000616a:	d1b8      	bne.n	100060de <HAL_SPI_Receive+0x130>
1000616c:	e095      	b.n	1000629a <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1000616e:	68fb      	ldr	r3, [r7, #12]
10006170:	68db      	ldr	r3, [r3, #12]
10006172:	2b07      	cmp	r3, #7
10006174:	f240 808b 	bls.w	1000628e <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
10006178:	e03f      	b.n	100061fa <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
1000617a:	68fb      	ldr	r3, [r7, #12]
1000617c:	681b      	ldr	r3, [r3, #0]
1000617e:	695b      	ldr	r3, [r3, #20]
10006180:	f003 0301 	and.w	r3, r3, #1
10006184:	2b01      	cmp	r3, #1
10006186:	d114      	bne.n	100061b2 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
10006188:	68fb      	ldr	r3, [r7, #12]
1000618a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1000618c:	69ba      	ldr	r2, [r7, #24]
1000618e:	8812      	ldrh	r2, [r2, #0]
10006190:	b292      	uxth	r2, r2
10006192:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
10006194:	68fb      	ldr	r3, [r7, #12]
10006196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10006198:	1c9a      	adds	r2, r3, #2
1000619a:	68fb      	ldr	r3, [r7, #12]
1000619c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
1000619e:	68fb      	ldr	r3, [r7, #12]
100061a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
100061a4:	b29b      	uxth	r3, r3
100061a6:	3b01      	subs	r3, #1
100061a8:	b29a      	uxth	r2, r3
100061aa:	68fb      	ldr	r3, [r7, #12]
100061ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
100061b0:	e023      	b.n	100061fa <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
100061b2:	f7fb fa03 	bl	100015bc <HAL_GetTick>
100061b6:	4602      	mov	r2, r0
100061b8:	697b      	ldr	r3, [r7, #20]
100061ba:	1ad3      	subs	r3, r2, r3
100061bc:	683a      	ldr	r2, [r7, #0]
100061be:	429a      	cmp	r2, r3
100061c0:	d803      	bhi.n	100061ca <HAL_SPI_Receive+0x21c>
100061c2:	683b      	ldr	r3, [r7, #0]
100061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
100061c8:	d102      	bne.n	100061d0 <HAL_SPI_Receive+0x222>
100061ca:	683b      	ldr	r3, [r7, #0]
100061cc:	2b00      	cmp	r3, #0
100061ce:	d114      	bne.n	100061fa <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
100061d0:	68f8      	ldr	r0, [r7, #12]
100061d2:	f000 f879 	bl	100062c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
100061d6:	68fb      	ldr	r3, [r7, #12]
100061d8:	2200      	movs	r2, #0
100061da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
100061de:	68fb      	ldr	r3, [r7, #12]
100061e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100061e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
100061e8:	68fb      	ldr	r3, [r7, #12]
100061ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
100061ee:	68fb      	ldr	r3, [r7, #12]
100061f0:	2201      	movs	r2, #1
100061f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
100061f6:	2303      	movs	r3, #3
100061f8:	e062      	b.n	100062c0 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
100061fa:	68fb      	ldr	r3, [r7, #12]
100061fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
10006200:	b29b      	uxth	r3, r3
10006202:	2b00      	cmp	r3, #0
10006204:	d1b9      	bne.n	1000617a <HAL_SPI_Receive+0x1cc>
10006206:	e048      	b.n	1000629a <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
10006208:	68fb      	ldr	r3, [r7, #12]
1000620a:	681b      	ldr	r3, [r3, #0]
1000620c:	695b      	ldr	r3, [r3, #20]
1000620e:	f003 0301 	and.w	r3, r3, #1
10006212:	2b01      	cmp	r3, #1
10006214:	d117      	bne.n	10006246 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
10006216:	68fb      	ldr	r3, [r7, #12]
10006218:	681b      	ldr	r3, [r3, #0]
1000621a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
1000621e:	68fb      	ldr	r3, [r7, #12]
10006220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10006222:	7812      	ldrb	r2, [r2, #0]
10006224:	b2d2      	uxtb	r2, r2
10006226:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
10006228:	68fb      	ldr	r3, [r7, #12]
1000622a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1000622c:	1c5a      	adds	r2, r3, #1
1000622e:	68fb      	ldr	r3, [r7, #12]
10006230:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
10006232:	68fb      	ldr	r3, [r7, #12]
10006234:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
10006238:	b29b      	uxth	r3, r3
1000623a:	3b01      	subs	r3, #1
1000623c:	b29a      	uxth	r2, r3
1000623e:	68fb      	ldr	r3, [r7, #12]
10006240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
10006244:	e023      	b.n	1000628e <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006246:	f7fb f9b9 	bl	100015bc <HAL_GetTick>
1000624a:	4602      	mov	r2, r0
1000624c:	697b      	ldr	r3, [r7, #20]
1000624e:	1ad3      	subs	r3, r2, r3
10006250:	683a      	ldr	r2, [r7, #0]
10006252:	429a      	cmp	r2, r3
10006254:	d803      	bhi.n	1000625e <HAL_SPI_Receive+0x2b0>
10006256:	683b      	ldr	r3, [r7, #0]
10006258:	f1b3 3fff 	cmp.w	r3, #4294967295
1000625c:	d102      	bne.n	10006264 <HAL_SPI_Receive+0x2b6>
1000625e:	683b      	ldr	r3, [r7, #0]
10006260:	2b00      	cmp	r3, #0
10006262:	d114      	bne.n	1000628e <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10006264:	68f8      	ldr	r0, [r7, #12]
10006266:	f000 f82f 	bl	100062c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
1000626a:	68fb      	ldr	r3, [r7, #12]
1000626c:	2200      	movs	r2, #0
1000626e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10006272:	68fb      	ldr	r3, [r7, #12]
10006274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006278:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
1000627c:	68fb      	ldr	r3, [r7, #12]
1000627e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10006282:	68fb      	ldr	r3, [r7, #12]
10006284:	2201      	movs	r2, #1
10006286:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
1000628a:	2303      	movs	r3, #3
1000628c:	e018      	b.n	100062c0 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
1000628e:	68fb      	ldr	r3, [r7, #12]
10006290:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
10006294:	b29b      	uxth	r3, r3
10006296:	2b00      	cmp	r3, #0
10006298:	d1b6      	bne.n	10006208 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
1000629a:	68f8      	ldr	r0, [r7, #12]
1000629c:	f000 f814 	bl	100062c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
100062a0:	68fb      	ldr	r3, [r7, #12]
100062a2:	2200      	movs	r2, #0
100062a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
100062a8:	68fb      	ldr	r3, [r7, #12]
100062aa:	2201      	movs	r2, #1
100062ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
100062b0:	68fb      	ldr	r3, [r7, #12]
100062b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100062b6:	2b00      	cmp	r3, #0
100062b8:	d001      	beq.n	100062be <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
100062ba:	2301      	movs	r3, #1
100062bc:	e000      	b.n	100062c0 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
100062be:	7ffb      	ldrb	r3, [r7, #31]
}
100062c0:	4618      	mov	r0, r3
100062c2:	3720      	adds	r7, #32
100062c4:	46bd      	mov	sp, r7
100062c6:	bd80      	pop	{r7, pc}

100062c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
100062c8:	b480      	push	{r7}
100062ca:	b085      	sub	sp, #20
100062cc:	af00      	add	r7, sp, #0
100062ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
100062d0:	687b      	ldr	r3, [r7, #4]
100062d2:	681b      	ldr	r3, [r3, #0]
100062d4:	695b      	ldr	r3, [r3, #20]
100062d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
100062d8:	687b      	ldr	r3, [r7, #4]
100062da:	681b      	ldr	r3, [r3, #0]
100062dc:	699a      	ldr	r2, [r3, #24]
100062de:	687b      	ldr	r3, [r7, #4]
100062e0:	681b      	ldr	r3, [r3, #0]
100062e2:	f042 0208 	orr.w	r2, r2, #8
100062e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
100062e8:	687b      	ldr	r3, [r7, #4]
100062ea:	681b      	ldr	r3, [r3, #0]
100062ec:	699a      	ldr	r2, [r3, #24]
100062ee:	687b      	ldr	r3, [r7, #4]
100062f0:	681b      	ldr	r3, [r3, #0]
100062f2:	f042 0210 	orr.w	r2, r2, #16
100062f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
100062f8:	687b      	ldr	r3, [r7, #4]
100062fa:	681b      	ldr	r3, [r3, #0]
100062fc:	681a      	ldr	r2, [r3, #0]
100062fe:	687b      	ldr	r3, [r7, #4]
10006300:	681b      	ldr	r3, [r3, #0]
10006302:	f022 0201 	bic.w	r2, r2, #1
10006306:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
10006308:	687b      	ldr	r3, [r7, #4]
1000630a:	681b      	ldr	r3, [r3, #0]
1000630c:	691b      	ldr	r3, [r3, #16]
1000630e:	687a      	ldr	r2, [r7, #4]
10006310:	6812      	ldr	r2, [r2, #0]
10006312:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
10006316:	f023 0303 	bic.w	r3, r3, #3
1000631a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
1000631c:	687b      	ldr	r3, [r7, #4]
1000631e:	681b      	ldr	r3, [r3, #0]
10006320:	689a      	ldr	r2, [r3, #8]
10006322:	687b      	ldr	r3, [r7, #4]
10006324:	681b      	ldr	r3, [r3, #0]
10006326:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
1000632a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
1000632c:	687b      	ldr	r3, [r7, #4]
1000632e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10006332:	b2db      	uxtb	r3, r3
10006334:	2b04      	cmp	r3, #4
10006336:	d014      	beq.n	10006362 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
10006338:	68fb      	ldr	r3, [r7, #12]
1000633a:	f003 0320 	and.w	r3, r3, #32
1000633e:	2b00      	cmp	r3, #0
10006340:	d00f      	beq.n	10006362 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
10006342:	687b      	ldr	r3, [r7, #4]
10006344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006348:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
1000634c:	687b      	ldr	r3, [r7, #4]
1000634e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
10006352:	687b      	ldr	r3, [r7, #4]
10006354:	681b      	ldr	r3, [r3, #0]
10006356:	699a      	ldr	r2, [r3, #24]
10006358:	687b      	ldr	r3, [r7, #4]
1000635a:	681b      	ldr	r3, [r3, #0]
1000635c:	f042 0220 	orr.w	r2, r2, #32
10006360:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
10006362:	687b      	ldr	r3, [r7, #4]
10006364:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10006368:	b2db      	uxtb	r3, r3
1000636a:	2b03      	cmp	r3, #3
1000636c:	d014      	beq.n	10006398 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
1000636e:	68fb      	ldr	r3, [r7, #12]
10006370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10006374:	2b00      	cmp	r3, #0
10006376:	d00f      	beq.n	10006398 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
10006378:	687b      	ldr	r3, [r7, #4]
1000637a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000637e:	f043 0204 	orr.w	r2, r3, #4
10006382:	687b      	ldr	r3, [r7, #4]
10006384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
10006388:	687b      	ldr	r3, [r7, #4]
1000638a:	681b      	ldr	r3, [r3, #0]
1000638c:	699a      	ldr	r2, [r3, #24]
1000638e:	687b      	ldr	r3, [r7, #4]
10006390:	681b      	ldr	r3, [r3, #0]
10006392:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
10006396:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
10006398:	68fb      	ldr	r3, [r7, #12]
1000639a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
1000639e:	2b00      	cmp	r3, #0
100063a0:	d00f      	beq.n	100063c2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
100063a2:	687b      	ldr	r3, [r7, #4]
100063a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100063a8:	f043 0201 	orr.w	r2, r3, #1
100063ac:	687b      	ldr	r3, [r7, #4]
100063ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
100063b2:	687b      	ldr	r3, [r7, #4]
100063b4:	681b      	ldr	r3, [r3, #0]
100063b6:	699a      	ldr	r2, [r3, #24]
100063b8:	687b      	ldr	r3, [r7, #4]
100063ba:	681b      	ldr	r3, [r3, #0]
100063bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
100063c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
100063c2:	68fb      	ldr	r3, [r7, #12]
100063c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100063c8:	2b00      	cmp	r3, #0
100063ca:	d00f      	beq.n	100063ec <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
100063cc:	687b      	ldr	r3, [r7, #4]
100063ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100063d2:	f043 0208 	orr.w	r2, r3, #8
100063d6:	687b      	ldr	r3, [r7, #4]
100063d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
100063dc:	687b      	ldr	r3, [r7, #4]
100063de:	681b      	ldr	r3, [r3, #0]
100063e0:	699a      	ldr	r2, [r3, #24]
100063e2:	687b      	ldr	r3, [r7, #4]
100063e4:	681b      	ldr	r3, [r3, #0]
100063e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
100063ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
100063ec:	687b      	ldr	r3, [r7, #4]
100063ee:	2200      	movs	r2, #0
100063f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
100063f4:	687b      	ldr	r3, [r7, #4]
100063f6:	2200      	movs	r2, #0
100063f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
100063fc:	bf00      	nop
100063fe:	3714      	adds	r7, #20
10006400:	46bd      	mov	sp, r7
10006402:	f85d 7b04 	ldr.w	r7, [sp], #4
10006406:	4770      	bx	lr

10006408 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
10006408:	b580      	push	{r7, lr}
1000640a:	b084      	sub	sp, #16
1000640c:	af00      	add	r7, sp, #0
1000640e:	60f8      	str	r0, [r7, #12]
10006410:	60b9      	str	r1, [r7, #8]
10006412:	603b      	str	r3, [r7, #0]
10006414:	4613      	mov	r3, r2
10006416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
10006418:	e010      	b.n	1000643c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
1000641a:	f7fb f8cf 	bl	100015bc <HAL_GetTick>
1000641e:	4602      	mov	r2, r0
10006420:	683b      	ldr	r3, [r7, #0]
10006422:	1ad3      	subs	r3, r2, r3
10006424:	69ba      	ldr	r2, [r7, #24]
10006426:	429a      	cmp	r2, r3
10006428:	d803      	bhi.n	10006432 <SPI_WaitOnFlagUntilTimeout+0x2a>
1000642a:	69bb      	ldr	r3, [r7, #24]
1000642c:	f1b3 3fff 	cmp.w	r3, #4294967295
10006430:	d102      	bne.n	10006438 <SPI_WaitOnFlagUntilTimeout+0x30>
10006432:	69bb      	ldr	r3, [r7, #24]
10006434:	2b00      	cmp	r3, #0
10006436:	d101      	bne.n	1000643c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
10006438:	2303      	movs	r3, #3
1000643a:	e00f      	b.n	1000645c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
1000643c:	68fb      	ldr	r3, [r7, #12]
1000643e:	681b      	ldr	r3, [r3, #0]
10006440:	695a      	ldr	r2, [r3, #20]
10006442:	68bb      	ldr	r3, [r7, #8]
10006444:	4013      	ands	r3, r2
10006446:	68ba      	ldr	r2, [r7, #8]
10006448:	429a      	cmp	r2, r3
1000644a:	bf0c      	ite	eq
1000644c:	2301      	moveq	r3, #1
1000644e:	2300      	movne	r3, #0
10006450:	b2db      	uxtb	r3, r3
10006452:	461a      	mov	r2, r3
10006454:	79fb      	ldrb	r3, [r7, #7]
10006456:	429a      	cmp	r2, r3
10006458:	d0df      	beq.n	1000641a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
1000645a:	2300      	movs	r3, #0
}
1000645c:	4618      	mov	r0, r3
1000645e:	3710      	adds	r7, #16
10006460:	46bd      	mov	sp, r7
10006462:	bd80      	pop	{r7, pc}

10006464 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
10006464:	b480      	push	{r7}
10006466:	b085      	sub	sp, #20
10006468:	af00      	add	r7, sp, #0
1000646a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
1000646c:	687b      	ldr	r3, [r7, #4]
1000646e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10006470:	095b      	lsrs	r3, r3, #5
10006472:	3301      	adds	r3, #1
10006474:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
10006476:	687b      	ldr	r3, [r7, #4]
10006478:	68db      	ldr	r3, [r3, #12]
1000647a:	3301      	adds	r3, #1
1000647c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
1000647e:	68bb      	ldr	r3, [r7, #8]
10006480:	3307      	adds	r3, #7
10006482:	08db      	lsrs	r3, r3, #3
10006484:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
10006486:	68bb      	ldr	r3, [r7, #8]
10006488:	68fa      	ldr	r2, [r7, #12]
1000648a:	fb02 f303 	mul.w	r3, r2, r3
}
1000648e:	4618      	mov	r0, r3
10006490:	3714      	adds	r7, #20
10006492:	46bd      	mov	sp, r7
10006494:	f85d 7b04 	ldr.w	r7, [sp], #4
10006498:	4770      	bx	lr

1000649a <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
1000649a:	b480      	push	{r7}
1000649c:	b083      	sub	sp, #12
1000649e:	af00      	add	r7, sp, #0
100064a0:	6078      	str	r0, [r7, #4]
	list->prev = list;
100064a2:	687b      	ldr	r3, [r7, #4]
100064a4:	687a      	ldr	r2, [r7, #4]
100064a6:	605a      	str	r2, [r3, #4]
	list->next = list;
100064a8:	687b      	ldr	r3, [r7, #4]
100064aa:	687a      	ldr	r2, [r7, #4]
100064ac:	601a      	str	r2, [r3, #0]
}
100064ae:	bf00      	nop
100064b0:	370c      	adds	r7, #12
100064b2:	46bd      	mov	sp, r7
100064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
100064b8:	4770      	bx	lr

100064ba <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
100064ba:	b480      	push	{r7}
100064bc:	b083      	sub	sp, #12
100064be:	af00      	add	r7, sp, #0
100064c0:	6078      	str	r0, [r7, #4]
100064c2:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
100064c4:	687b      	ldr	r3, [r7, #4]
100064c6:	685a      	ldr	r2, [r3, #4]
100064c8:	683b      	ldr	r3, [r7, #0]
100064ca:	605a      	str	r2, [r3, #4]
	new_node->next = node;
100064cc:	683b      	ldr	r3, [r7, #0]
100064ce:	687a      	ldr	r2, [r7, #4]
100064d0:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
100064d2:	683b      	ldr	r3, [r7, #0]
100064d4:	681b      	ldr	r3, [r3, #0]
100064d6:	683a      	ldr	r2, [r7, #0]
100064d8:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
100064da:	683b      	ldr	r3, [r7, #0]
100064dc:	685b      	ldr	r3, [r3, #4]
100064de:	683a      	ldr	r2, [r7, #0]
100064e0:	601a      	str	r2, [r3, #0]
}
100064e2:	bf00      	nop
100064e4:	370c      	adds	r7, #12
100064e6:	46bd      	mov	sp, r7
100064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100064ec:	4770      	bx	lr

100064ee <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
100064ee:	b580      	push	{r7, lr}
100064f0:	b082      	sub	sp, #8
100064f2:	af00      	add	r7, sp, #0
100064f4:	6078      	str	r0, [r7, #4]
100064f6:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
100064f8:	6839      	ldr	r1, [r7, #0]
100064fa:	6878      	ldr	r0, [r7, #4]
100064fc:	f7ff ffdd 	bl	100064ba <metal_list_add_before>
}
10006500:	bf00      	nop
10006502:	3708      	adds	r7, #8
10006504:	46bd      	mov	sp, r7
10006506:	bd80      	pop	{r7, pc}

10006508 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
10006508:	b580      	push	{r7, lr}
1000650a:	b082      	sub	sp, #8
1000650c:	af00      	add	r7, sp, #0
1000650e:	6078      	str	r0, [r7, #4]
10006510:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
10006512:	6839      	ldr	r1, [r7, #0]
10006514:	6878      	ldr	r0, [r7, #4]
10006516:	f001 fefb 	bl	10008310 <metal_machine_cache_flush>
}
1000651a:	bf00      	nop
1000651c:	3708      	adds	r7, #8
1000651e:	46bd      	mov	sp, r7
10006520:	bd80      	pop	{r7, pc}

10006522 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10006522:	b580      	push	{r7, lr}
10006524:	b082      	sub	sp, #8
10006526:	af00      	add	r7, sp, #0
10006528:	6078      	str	r0, [r7, #4]
1000652a:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
1000652c:	6839      	ldr	r1, [r7, #0]
1000652e:	6878      	ldr	r0, [r7, #4]
10006530:	f001 fef9 	bl	10008326 <metal_machine_cache_invalidate>
}
10006534:	bf00      	nop
10006536:	3708      	adds	r7, #8
10006538:	46bd      	mov	sp, r7
1000653a:	bd80      	pop	{r7, pc}

1000653c <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
1000653c:	b580      	push	{r7, lr}
1000653e:	b082      	sub	sp, #8
10006540:	af00      	add	r7, sp, #0
10006542:	6078      	str	r0, [r7, #4]
10006544:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
10006546:	6839      	ldr	r1, [r7, #0]
10006548:	6878      	ldr	r0, [r7, #4]
1000654a:	f7ff ffdd 	bl	10006508 <__metal_cache_flush>
}
1000654e:	bf00      	nop
10006550:	3708      	adds	r7, #8
10006552:	46bd      	mov	sp, r7
10006554:	bd80      	pop	{r7, pc}

10006556 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
10006556:	b580      	push	{r7, lr}
10006558:	b082      	sub	sp, #8
1000655a:	af00      	add	r7, sp, #0
1000655c:	6078      	str	r0, [r7, #4]
1000655e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
10006560:	6839      	ldr	r1, [r7, #0]
10006562:	6878      	ldr	r0, [r7, #4]
10006564:	f7ff ffdd 	bl	10006522 <__metal_cache_invalidate>
}
10006568:	bf00      	nop
1000656a:	3708      	adds	r7, #8
1000656c:	46bd      	mov	sp, r7
1000656e:	bd80      	pop	{r7, pc}

10006570 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
10006570:	b580      	push	{r7, lr}
10006572:	b082      	sub	sp, #8
10006574:	af00      	add	r7, sp, #0
10006576:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
10006578:	687b      	ldr	r3, [r7, #4]
1000657a:	2b00      	cmp	r3, #0
1000657c:	d008      	beq.n	10006590 <metal_bus_register+0x20>
1000657e:	687b      	ldr	r3, [r7, #4]
10006580:	681b      	ldr	r3, [r3, #0]
10006582:	2b00      	cmp	r3, #0
10006584:	d004      	beq.n	10006590 <metal_bus_register+0x20>
10006586:	687b      	ldr	r3, [r7, #4]
10006588:	681b      	ldr	r3, [r3, #0]
1000658a:	781b      	ldrb	r3, [r3, #0]
1000658c:	2b00      	cmp	r3, #0
1000658e:	d102      	bne.n	10006596 <metal_bus_register+0x26>
		return -EINVAL;
10006590:	f06f 0315 	mvn.w	r3, #21
10006594:	e026      	b.n	100065e4 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
10006596:	687b      	ldr	r3, [r7, #4]
10006598:	681b      	ldr	r3, [r3, #0]
1000659a:	2100      	movs	r1, #0
1000659c:	4618      	mov	r0, r3
1000659e:	f000 f82b 	bl	100065f8 <metal_bus_find>
100065a2:	4603      	mov	r3, r0
100065a4:	2b00      	cmp	r3, #0
100065a6:	d102      	bne.n	100065ae <metal_bus_register+0x3e>
		return -EEXIST;
100065a8:	f06f 0310 	mvn.w	r3, #16
100065ac:	e01a      	b.n	100065e4 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
100065ae:	687b      	ldr	r3, [r7, #4]
100065b0:	331c      	adds	r3, #28
100065b2:	4618      	mov	r0, r3
100065b4:	f7ff ff71 	bl	1000649a <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
100065b8:	687b      	ldr	r3, [r7, #4]
100065ba:	3324      	adds	r3, #36	@ 0x24
100065bc:	4619      	mov	r1, r3
100065be:	480b      	ldr	r0, [pc, #44]	@ (100065ec <metal_bus_register+0x7c>)
100065c0:	f7ff ff95 	bl	100064ee <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
100065c4:	4b0a      	ldr	r3, [pc, #40]	@ (100065f0 <metal_bus_register+0x80>)
100065c6:	781b      	ldrb	r3, [r3, #0]
100065c8:	2b06      	cmp	r3, #6
100065ca:	d90a      	bls.n	100065e2 <metal_bus_register+0x72>
100065cc:	4b08      	ldr	r3, [pc, #32]	@ (100065f0 <metal_bus_register+0x80>)
100065ce:	685b      	ldr	r3, [r3, #4]
100065d0:	2b00      	cmp	r3, #0
100065d2:	d006      	beq.n	100065e2 <metal_bus_register+0x72>
100065d4:	4b06      	ldr	r3, [pc, #24]	@ (100065f0 <metal_bus_register+0x80>)
100065d6:	685b      	ldr	r3, [r3, #4]
100065d8:	687a      	ldr	r2, [r7, #4]
100065da:	6812      	ldr	r2, [r2, #0]
100065dc:	4905      	ldr	r1, [pc, #20]	@ (100065f4 <metal_bus_register+0x84>)
100065de:	2007      	movs	r0, #7
100065e0:	4798      	blx	r3
	return 0;
100065e2:	2300      	movs	r3, #0
}
100065e4:	4618      	mov	r0, r3
100065e6:	3708      	adds	r7, #8
100065e8:	46bd      	mov	sp, r7
100065ea:	bd80      	pop	{r7, pc}
100065ec:	1002033c 	.word	0x1002033c
100065f0:	10020334 	.word	0x10020334
100065f4:	1000a3dc 	.word	0x1000a3dc

100065f8 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
100065f8:	b580      	push	{r7, lr}
100065fa:	b084      	sub	sp, #16
100065fc:	af00      	add	r7, sp, #0
100065fe:	6078      	str	r0, [r7, #4]
10006600:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
10006602:	4b12      	ldr	r3, [pc, #72]	@ (1000664c <metal_bus_find+0x54>)
10006604:	689b      	ldr	r3, [r3, #8]
10006606:	60fb      	str	r3, [r7, #12]
10006608:	e016      	b.n	10006638 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
1000660a:	68fb      	ldr	r3, [r7, #12]
1000660c:	3b24      	subs	r3, #36	@ 0x24
1000660e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
10006610:	68bb      	ldr	r3, [r7, #8]
10006612:	681b      	ldr	r3, [r3, #0]
10006614:	6879      	ldr	r1, [r7, #4]
10006616:	4618      	mov	r0, r3
10006618:	f7f9 fd12 	bl	10000040 <strcmp>
1000661c:	4603      	mov	r3, r0
1000661e:	2b00      	cmp	r3, #0
10006620:	d107      	bne.n	10006632 <metal_bus_find+0x3a>
10006622:	683b      	ldr	r3, [r7, #0]
10006624:	2b00      	cmp	r3, #0
10006626:	d004      	beq.n	10006632 <metal_bus_find+0x3a>
			*result = bus;
10006628:	683b      	ldr	r3, [r7, #0]
1000662a:	68ba      	ldr	r2, [r7, #8]
1000662c:	601a      	str	r2, [r3, #0]
			return 0;
1000662e:	2300      	movs	r3, #0
10006630:	e008      	b.n	10006644 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10006632:	68fb      	ldr	r3, [r7, #12]
10006634:	681b      	ldr	r3, [r3, #0]
10006636:	60fb      	str	r3, [r7, #12]
10006638:	68fb      	ldr	r3, [r7, #12]
1000663a:	4a05      	ldr	r2, [pc, #20]	@ (10006650 <metal_bus_find+0x58>)
1000663c:	4293      	cmp	r3, r2
1000663e:	d1e4      	bne.n	1000660a <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10006640:	f06f 0301 	mvn.w	r3, #1
}
10006644:	4618      	mov	r0, r3
10006646:	3710      	adds	r7, #16
10006648:	46bd      	mov	sp, r7
1000664a:	bd80      	pop	{r7, pc}
1000664c:	10020334 	.word	0x10020334
10006650:	1002033c 	.word	0x1002033c

10006654 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10006654:	b580      	push	{r7, lr}
10006656:	b086      	sub	sp, #24
10006658:	af00      	add	r7, sp, #0
1000665a:	60f8      	str	r0, [r7, #12]
1000665c:	60b9      	str	r1, [r7, #8]
1000665e:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10006660:	68fb      	ldr	r3, [r7, #12]
10006662:	2b00      	cmp	r3, #0
10006664:	d00d      	beq.n	10006682 <metal_device_open+0x2e>
10006666:	68fb      	ldr	r3, [r7, #12]
10006668:	781b      	ldrb	r3, [r3, #0]
1000666a:	2b00      	cmp	r3, #0
1000666c:	d009      	beq.n	10006682 <metal_device_open+0x2e>
1000666e:	68bb      	ldr	r3, [r7, #8]
10006670:	2b00      	cmp	r3, #0
10006672:	d006      	beq.n	10006682 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10006674:	68bb      	ldr	r3, [r7, #8]
10006676:	781b      	ldrb	r3, [r3, #0]
10006678:	2b00      	cmp	r3, #0
1000667a:	d002      	beq.n	10006682 <metal_device_open+0x2e>
1000667c:	687b      	ldr	r3, [r7, #4]
1000667e:	2b00      	cmp	r3, #0
10006680:	d102      	bne.n	10006688 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10006682:	f06f 0315 	mvn.w	r3, #21
10006686:	e01f      	b.n	100066c8 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
10006688:	f107 0310 	add.w	r3, r7, #16
1000668c:	4619      	mov	r1, r3
1000668e:	68f8      	ldr	r0, [r7, #12]
10006690:	f7ff ffb2 	bl	100065f8 <metal_bus_find>
10006694:	6178      	str	r0, [r7, #20]
	if (error)
10006696:	697b      	ldr	r3, [r7, #20]
10006698:	2b00      	cmp	r3, #0
1000669a:	d001      	beq.n	100066a0 <metal_device_open+0x4c>
		return error;
1000669c:	697b      	ldr	r3, [r7, #20]
1000669e:	e013      	b.n	100066c8 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
100066a0:	693b      	ldr	r3, [r7, #16]
100066a2:	689b      	ldr	r3, [r3, #8]
100066a4:	2b00      	cmp	r3, #0
100066a6:	d102      	bne.n	100066ae <metal_device_open+0x5a>
		return -ENODEV;
100066a8:	f06f 0312 	mvn.w	r3, #18
100066ac:	e00c      	b.n	100066c8 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
100066ae:	693b      	ldr	r3, [r7, #16]
100066b0:	689b      	ldr	r3, [r3, #8]
100066b2:	6938      	ldr	r0, [r7, #16]
100066b4:	687a      	ldr	r2, [r7, #4]
100066b6:	68b9      	ldr	r1, [r7, #8]
100066b8:	4798      	blx	r3
100066ba:	6178      	str	r0, [r7, #20]
	if (error)
100066bc:	697b      	ldr	r3, [r7, #20]
100066be:	2b00      	cmp	r3, #0
100066c0:	d001      	beq.n	100066c6 <metal_device_open+0x72>
		return error;
100066c2:	697b      	ldr	r3, [r7, #20]
100066c4:	e000      	b.n	100066c8 <metal_device_open+0x74>

	return 0;
100066c6:	2300      	movs	r3, #0
}
100066c8:	4618      	mov	r0, r3
100066ca:	3718      	adds	r7, #24
100066cc:	46bd      	mov	sp, r7
100066ce:	bd80      	pop	{r7, pc}

100066d0 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
100066d0:	b580      	push	{r7, lr}
100066d2:	b082      	sub	sp, #8
100066d4:	af00      	add	r7, sp, #0
100066d6:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
100066d8:	687b      	ldr	r3, [r7, #4]
100066da:	681b      	ldr	r3, [r3, #0]
100066dc:	2b00      	cmp	r3, #0
100066de:	d008      	beq.n	100066f2 <metal_register_generic_device+0x22>
100066e0:	687b      	ldr	r3, [r7, #4]
100066e2:	681b      	ldr	r3, [r3, #0]
100066e4:	781b      	ldrb	r3, [r3, #0]
100066e6:	2b00      	cmp	r3, #0
100066e8:	d003      	beq.n	100066f2 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
100066ea:	687b      	ldr	r3, [r7, #4]
100066ec:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
100066ee:	2b02      	cmp	r3, #2
100066f0:	d902      	bls.n	100066f8 <metal_register_generic_device+0x28>
		return -EINVAL;
100066f2:	f06f 0315 	mvn.w	r3, #21
100066f6:	e009      	b.n	1000670c <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
100066f8:	687b      	ldr	r3, [r7, #4]
100066fa:	4a06      	ldr	r2, [pc, #24]	@ (10006714 <metal_register_generic_device+0x44>)
100066fc:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
100066fe:	687b      	ldr	r3, [r7, #4]
10006700:	337c      	adds	r3, #124	@ 0x7c
10006702:	4619      	mov	r1, r3
10006704:	4804      	ldr	r0, [pc, #16]	@ (10006718 <metal_register_generic_device+0x48>)
10006706:	f7ff fef2 	bl	100064ee <metal_list_add_tail>
			    &device->node);
	return 0;
1000670a:	2300      	movs	r3, #0
}
1000670c:	4618      	mov	r0, r3
1000670e:	3708      	adds	r7, #8
10006710:	46bd      	mov	sp, r7
10006712:	bd80      	pop	{r7, pc}
10006714:	10020014 	.word	0x10020014
10006718:	1002034c 	.word	0x1002034c

1000671c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
1000671c:	b580      	push	{r7, lr}
1000671e:	b086      	sub	sp, #24
10006720:	af00      	add	r7, sp, #0
10006722:	60f8      	str	r0, [r7, #12]
10006724:	60b9      	str	r1, [r7, #8]
10006726:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
10006728:	4b12      	ldr	r3, [pc, #72]	@ (10006774 <metal_generic_dev_open+0x58>)
1000672a:	699b      	ldr	r3, [r3, #24]
1000672c:	617b      	str	r3, [r7, #20]
1000672e:	e016      	b.n	1000675e <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10006730:	697b      	ldr	r3, [r7, #20]
10006732:	3b7c      	subs	r3, #124	@ 0x7c
10006734:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
10006736:	693b      	ldr	r3, [r7, #16]
10006738:	681b      	ldr	r3, [r3, #0]
1000673a:	68b9      	ldr	r1, [r7, #8]
1000673c:	4618      	mov	r0, r3
1000673e:	f7f9 fc7f 	bl	10000040 <strcmp>
10006742:	4603      	mov	r3, r0
10006744:	2b00      	cmp	r3, #0
10006746:	d107      	bne.n	10006758 <metal_generic_dev_open+0x3c>
			*device = dev;
10006748:	687b      	ldr	r3, [r7, #4]
1000674a:	693a      	ldr	r2, [r7, #16]
1000674c:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
1000674e:	6938      	ldr	r0, [r7, #16]
10006750:	f000 f890 	bl	10006874 <metal_generic_dev_sys_open>
10006754:	4603      	mov	r3, r0
10006756:	e008      	b.n	1000676a <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
10006758:	697b      	ldr	r3, [r7, #20]
1000675a:	681b      	ldr	r3, [r3, #0]
1000675c:	617b      	str	r3, [r7, #20]
1000675e:	697b      	ldr	r3, [r7, #20]
10006760:	4a05      	ldr	r2, [pc, #20]	@ (10006778 <metal_generic_dev_open+0x5c>)
10006762:	4293      	cmp	r3, r2
10006764:	d1e4      	bne.n	10006730 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
10006766:	f06f 0312 	mvn.w	r3, #18
}
1000676a:	4618      	mov	r0, r3
1000676c:	3718      	adds	r7, #24
1000676e:	46bd      	mov	sp, r7
10006770:	bd80      	pop	{r7, pc}
10006772:	bf00      	nop
10006774:	10020334 	.word	0x10020334
10006778:	1002034c 	.word	0x1002034c

1000677c <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
1000677c:	b580      	push	{r7, lr}
1000677e:	b086      	sub	sp, #24
10006780:	af00      	add	r7, sp, #0
10006782:	60f8      	str	r0, [r7, #12]
10006784:	60b9      	str	r1, [r7, #8]
10006786:	607a      	str	r2, [r7, #4]
10006788:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
1000678a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000678c:	683b      	ldr	r3, [r7, #0]
1000678e:	429a      	cmp	r2, r3
10006790:	d009      	beq.n	100067a6 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10006792:	6a3a      	ldr	r2, [r7, #32]
10006794:	4613      	mov	r3, r2
10006796:	005b      	lsls	r3, r3, #1
10006798:	4413      	add	r3, r2
1000679a:	009b      	lsls	r3, r3, #2
1000679c:	461a      	mov	r2, r3
1000679e:	6839      	ldr	r1, [r7, #0]
100067a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100067a2:	f002 fe66 	bl	10009472 <memcpy>
	for (i = 0; i < nents_in; i++) {
100067a6:	2300      	movs	r3, #0
100067a8:	617b      	str	r3, [r7, #20]
100067aa:	e02f      	b.n	1000680c <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
100067ac:	687b      	ldr	r3, [r7, #4]
100067ae:	2b02      	cmp	r3, #2
100067b0:	d114      	bne.n	100067dc <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
100067b2:	697a      	ldr	r2, [r7, #20]
100067b4:	4613      	mov	r3, r2
100067b6:	005b      	lsls	r3, r3, #1
100067b8:	4413      	add	r3, r2
100067ba:	009b      	lsls	r3, r3, #2
100067bc:	461a      	mov	r2, r3
100067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100067c0:	4413      	add	r3, r2
100067c2:	6818      	ldr	r0, [r3, #0]
100067c4:	697a      	ldr	r2, [r7, #20]
100067c6:	4613      	mov	r3, r2
100067c8:	005b      	lsls	r3, r3, #1
100067ca:	4413      	add	r3, r2
100067cc:	009b      	lsls	r3, r3, #2
100067ce:	461a      	mov	r2, r3
100067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100067d2:	4413      	add	r3, r2
100067d4:	689b      	ldr	r3, [r3, #8]
100067d6:	4619      	mov	r1, r3
100067d8:	f7ff feb0 	bl	1000653c <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
100067dc:	697a      	ldr	r2, [r7, #20]
100067de:	4613      	mov	r3, r2
100067e0:	005b      	lsls	r3, r3, #1
100067e2:	4413      	add	r3, r2
100067e4:	009b      	lsls	r3, r3, #2
100067e6:	461a      	mov	r2, r3
100067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100067ea:	4413      	add	r3, r2
100067ec:	6818      	ldr	r0, [r3, #0]
100067ee:	697a      	ldr	r2, [r7, #20]
100067f0:	4613      	mov	r3, r2
100067f2:	005b      	lsls	r3, r3, #1
100067f4:	4413      	add	r3, r2
100067f6:	009b      	lsls	r3, r3, #2
100067f8:	461a      	mov	r2, r3
100067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100067fc:	4413      	add	r3, r2
100067fe:	689b      	ldr	r3, [r3, #8]
10006800:	4619      	mov	r1, r3
10006802:	f7ff fea8 	bl	10006556 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10006806:	697b      	ldr	r3, [r7, #20]
10006808:	3301      	adds	r3, #1
1000680a:	617b      	str	r3, [r7, #20]
1000680c:	697a      	ldr	r2, [r7, #20]
1000680e:	6a3b      	ldr	r3, [r7, #32]
10006810:	429a      	cmp	r2, r3
10006812:	dbcb      	blt.n	100067ac <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
10006814:	6a3b      	ldr	r3, [r7, #32]
}
10006816:	4618      	mov	r0, r3
10006818:	3718      	adds	r7, #24
1000681a:	46bd      	mov	sp, r7
1000681c:	bd80      	pop	{r7, pc}

1000681e <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
1000681e:	b580      	push	{r7, lr}
10006820:	b086      	sub	sp, #24
10006822:	af00      	add	r7, sp, #0
10006824:	60f8      	str	r0, [r7, #12]
10006826:	60b9      	str	r1, [r7, #8]
10006828:	607a      	str	r2, [r7, #4]
1000682a:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
1000682c:	2300      	movs	r3, #0
1000682e:	617b      	str	r3, [r7, #20]
10006830:	e017      	b.n	10006862 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10006832:	697a      	ldr	r2, [r7, #20]
10006834:	4613      	mov	r3, r2
10006836:	005b      	lsls	r3, r3, #1
10006838:	4413      	add	r3, r2
1000683a:	009b      	lsls	r3, r3, #2
1000683c:	461a      	mov	r2, r3
1000683e:	683b      	ldr	r3, [r7, #0]
10006840:	4413      	add	r3, r2
10006842:	6818      	ldr	r0, [r3, #0]
10006844:	697a      	ldr	r2, [r7, #20]
10006846:	4613      	mov	r3, r2
10006848:	005b      	lsls	r3, r3, #1
1000684a:	4413      	add	r3, r2
1000684c:	009b      	lsls	r3, r3, #2
1000684e:	461a      	mov	r2, r3
10006850:	683b      	ldr	r3, [r7, #0]
10006852:	4413      	add	r3, r2
10006854:	689b      	ldr	r3, [r3, #8]
10006856:	4619      	mov	r1, r3
10006858:	f7ff fe7d 	bl	10006556 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
1000685c:	697b      	ldr	r3, [r7, #20]
1000685e:	3301      	adds	r3, #1
10006860:	617b      	str	r3, [r7, #20]
10006862:	697a      	ldr	r2, [r7, #20]
10006864:	6a3b      	ldr	r3, [r7, #32]
10006866:	429a      	cmp	r2, r3
10006868:	dbe3      	blt.n	10006832 <metal_generic_dev_dma_unmap+0x14>
	}
}
1000686a:	bf00      	nop
1000686c:	bf00      	nop
1000686e:	3718      	adds	r7, #24
10006870:	46bd      	mov	sp, r7
10006872:	bd80      	pop	{r7, pc}

10006874 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
10006874:	b580      	push	{r7, lr}
10006876:	b084      	sub	sp, #16
10006878:	af00      	add	r7, sp, #0
1000687a:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
1000687c:	2300      	movs	r3, #0
1000687e:	60fb      	str	r3, [r7, #12]
10006880:	e013      	b.n	100068aa <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
10006882:	68fa      	ldr	r2, [r7, #12]
10006884:	4613      	mov	r3, r2
10006886:	00db      	lsls	r3, r3, #3
10006888:	1a9b      	subs	r3, r3, r2
1000688a:	00db      	lsls	r3, r3, #3
1000688c:	3308      	adds	r3, #8
1000688e:	687a      	ldr	r2, [r7, #4]
10006890:	4413      	add	r3, r2
10006892:	3304      	adds	r3, #4
10006894:	60bb      	str	r3, [r7, #8]
		if (!io->size)
10006896:	68bb      	ldr	r3, [r7, #8]
10006898:	689b      	ldr	r3, [r3, #8]
1000689a:	2b00      	cmp	r3, #0
1000689c:	d00b      	beq.n	100068b6 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
1000689e:	68b8      	ldr	r0, [r7, #8]
100068a0:	f000 f81e 	bl	100068e0 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
100068a4:	68fb      	ldr	r3, [r7, #12]
100068a6:	3301      	adds	r3, #1
100068a8:	60fb      	str	r3, [r7, #12]
100068aa:	687b      	ldr	r3, [r7, #4]
100068ac:	689b      	ldr	r3, [r3, #8]
100068ae:	68fa      	ldr	r2, [r7, #12]
100068b0:	429a      	cmp	r2, r3
100068b2:	d3e6      	bcc.n	10006882 <metal_generic_dev_sys_open+0xe>
100068b4:	e000      	b.n	100068b8 <metal_generic_dev_sys_open+0x44>
			break;
100068b6:	bf00      	nop
	}

	return 0;
100068b8:	2300      	movs	r3, #0
}
100068ba:	4618      	mov	r0, r3
100068bc:	3710      	adds	r7, #16
100068be:	46bd      	mov	sp, r7
100068c0:	bd80      	pop	{r7, pc}
	...

100068c4 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
100068c4:	b580      	push	{r7, lr}
100068c6:	b082      	sub	sp, #8
100068c8:	af00      	add	r7, sp, #0
100068ca:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
100068cc:	4803      	ldr	r0, [pc, #12]	@ (100068dc <metal_sys_init+0x18>)
100068ce:	f7ff fe4f 	bl	10006570 <metal_bus_register>
	return 0;
100068d2:	2300      	movs	r3, #0
}
100068d4:	4618      	mov	r0, r3
100068d6:	3708      	adds	r7, #8
100068d8:	46bd      	mov	sp, r7
100068da:	bd80      	pop	{r7, pc}
100068dc:	10020014 	.word	0x10020014

100068e0 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
100068e0:	b580      	push	{r7, lr}
100068e2:	b086      	sub	sp, #24
100068e4:	af00      	add	r7, sp, #0
100068e6:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
100068e8:	687b      	ldr	r3, [r7, #4]
100068ea:	681b      	ldr	r3, [r3, #0]
100068ec:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
100068ee:	687b      	ldr	r3, [r7, #4]
100068f0:	689b      	ldr	r3, [r3, #8]
100068f2:	613b      	str	r3, [r7, #16]
	if (psize) {
100068f4:	693b      	ldr	r3, [r7, #16]
100068f6:	2b00      	cmp	r3, #0
100068f8:	d02c      	beq.n	10006954 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
100068fa:	687b      	ldr	r3, [r7, #4]
100068fc:	68db      	ldr	r3, [r3, #12]
100068fe:	693a      	ldr	r2, [r7, #16]
10006900:	fa22 f303 	lsr.w	r3, r2, r3
10006904:	2b00      	cmp	r3, #0
10006906:	d005      	beq.n	10006914 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
10006908:	687b      	ldr	r3, [r7, #4]
1000690a:	68db      	ldr	r3, [r3, #12]
1000690c:	2201      	movs	r2, #1
1000690e:	fa02 f303 	lsl.w	r3, r2, r3
10006912:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10006914:	2300      	movs	r3, #0
10006916:	617b      	str	r3, [r7, #20]
10006918:	e013      	b.n	10006942 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
1000691a:	687b      	ldr	r3, [r7, #4]
1000691c:	685a      	ldr	r2, [r3, #4]
1000691e:	697b      	ldr	r3, [r7, #20]
10006920:	009b      	lsls	r3, r3, #2
10006922:	4413      	add	r3, r2
10006924:	6819      	ldr	r1, [r3, #0]
10006926:	687b      	ldr	r3, [r7, #4]
10006928:	695b      	ldr	r3, [r3, #20]
1000692a:	693a      	ldr	r2, [r7, #16]
1000692c:	68f8      	ldr	r0, [r7, #12]
1000692e:	f001 fd05 	bl	1000833c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
10006932:	693b      	ldr	r3, [r7, #16]
10006934:	009b      	lsls	r3, r3, #2
10006936:	68fa      	ldr	r2, [r7, #12]
10006938:	4413      	add	r3, r2
1000693a:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000693c:	697b      	ldr	r3, [r7, #20]
1000693e:	3301      	adds	r3, #1
10006940:	617b      	str	r3, [r7, #20]
10006942:	687b      	ldr	r3, [r7, #4]
10006944:	689a      	ldr	r2, [r3, #8]
10006946:	687b      	ldr	r3, [r7, #4]
10006948:	68db      	ldr	r3, [r3, #12]
1000694a:	fa22 f303 	lsr.w	r3, r2, r3
1000694e:	697a      	ldr	r2, [r7, #20]
10006950:	429a      	cmp	r2, r3
10006952:	d9e2      	bls.n	1000691a <metal_sys_io_mem_map+0x3a>
		}
	}
}
10006954:	bf00      	nop
10006956:	3718      	adds	r7, #24
10006958:	46bd      	mov	sp, r7
1000695a:	bd80      	pop	{r7, pc}

1000695c <metal_list_init>:
{
1000695c:	b480      	push	{r7}
1000695e:	b083      	sub	sp, #12
10006960:	af00      	add	r7, sp, #0
10006962:	6078      	str	r0, [r7, #4]
	list->prev = list;
10006964:	687b      	ldr	r3, [r7, #4]
10006966:	687a      	ldr	r2, [r7, #4]
10006968:	605a      	str	r2, [r3, #4]
	list->next = list;
1000696a:	687b      	ldr	r3, [r7, #4]
1000696c:	687a      	ldr	r2, [r7, #4]
1000696e:	601a      	str	r2, [r3, #0]
}
10006970:	bf00      	nop
10006972:	370c      	adds	r7, #12
10006974:	46bd      	mov	sp, r7
10006976:	f85d 7b04 	ldr.w	r7, [sp], #4
1000697a:	4770      	bx	lr

1000697c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
1000697c:	b580      	push	{r7, lr}
1000697e:	b084      	sub	sp, #16
10006980:	af00      	add	r7, sp, #0
10006982:	6078      	str	r0, [r7, #4]
	int error = 0;
10006984:	2300      	movs	r3, #0
10006986:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
10006988:	2220      	movs	r2, #32
1000698a:	2100      	movs	r1, #0
1000698c:	4810      	ldr	r0, [pc, #64]	@ (100069d0 <metal_init+0x54>)
1000698e:	f002 fcbf 	bl	10009310 <memset>

	_metal.common.log_handler   = params->log_handler;
10006992:	687b      	ldr	r3, [r7, #4]
10006994:	681b      	ldr	r3, [r3, #0]
10006996:	4a0e      	ldr	r2, [pc, #56]	@ (100069d0 <metal_init+0x54>)
10006998:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
1000699a:	687b      	ldr	r3, [r7, #4]
1000699c:	791a      	ldrb	r2, [r3, #4]
1000699e:	4b0c      	ldr	r3, [pc, #48]	@ (100069d0 <metal_init+0x54>)
100069a0:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
100069a2:	480c      	ldr	r0, [pc, #48]	@ (100069d4 <metal_init+0x58>)
100069a4:	f7ff ffda 	bl	1000695c <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
100069a8:	480b      	ldr	r0, [pc, #44]	@ (100069d8 <metal_init+0x5c>)
100069aa:	f7ff ffd7 	bl	1000695c <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
100069ae:	480b      	ldr	r0, [pc, #44]	@ (100069dc <metal_init+0x60>)
100069b0:	f7ff ffd4 	bl	1000695c <metal_list_init>

	error = metal_sys_init(params);
100069b4:	6878      	ldr	r0, [r7, #4]
100069b6:	f7ff ff85 	bl	100068c4 <metal_sys_init>
100069ba:	60f8      	str	r0, [r7, #12]
	if (error)
100069bc:	68fb      	ldr	r3, [r7, #12]
100069be:	2b00      	cmp	r3, #0
100069c0:	d001      	beq.n	100069c6 <metal_init+0x4a>
		return error;
100069c2:	68fb      	ldr	r3, [r7, #12]
100069c4:	e000      	b.n	100069c8 <metal_init+0x4c>

	return error;
100069c6:	68fb      	ldr	r3, [r7, #12]
}
100069c8:	4618      	mov	r0, r3
100069ca:	3710      	adds	r7, #16
100069cc:	46bd      	mov	sp, r7
100069ce:	bd80      	pop	{r7, pc}
100069d0:	10020334 	.word	0x10020334
100069d4:	1002033c 	.word	0x1002033c
100069d8:	10020344 	.word	0x10020344
100069dc:	1002034c 	.word	0x1002034c

100069e0 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
100069e0:	b480      	push	{r7}
100069e2:	b083      	sub	sp, #12
100069e4:	af00      	add	r7, sp, #0
100069e6:	6078      	str	r0, [r7, #4]
100069e8:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
100069ea:	687b      	ldr	r3, [r7, #4]
100069ec:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
100069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
100069f2:	d00a      	beq.n	10006a0a <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
100069f4:	687b      	ldr	r3, [r7, #4]
100069f6:	689b      	ldr	r3, [r3, #8]
100069f8:	683a      	ldr	r2, [r7, #0]
100069fa:	429a      	cmp	r2, r3
100069fc:	d205      	bcs.n	10006a0a <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
100069fe:	687b      	ldr	r3, [r7, #4]
10006a00:	681b      	ldr	r3, [r3, #0]
10006a02:	461a      	mov	r2, r3
10006a04:	683b      	ldr	r3, [r7, #0]
10006a06:	4413      	add	r3, r2
		: NULL);
10006a08:	e000      	b.n	10006a0c <metal_io_virt+0x2c>
10006a0a:	2300      	movs	r3, #0
}
10006a0c:	4618      	mov	r0, r3
10006a0e:	370c      	adds	r7, #12
10006a10:	46bd      	mov	sp, r7
10006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
10006a16:	4770      	bx	lr

10006a18 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
10006a18:	b5b0      	push	{r4, r5, r7, lr}
10006a1a:	b08c      	sub	sp, #48	@ 0x30
10006a1c:	af00      	add	r7, sp, #0
10006a1e:	60f8      	str	r0, [r7, #12]
10006a20:	60b9      	str	r1, [r7, #8]
10006a22:	607a      	str	r2, [r7, #4]
10006a24:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
10006a26:	f107 0310 	add.w	r3, r7, #16
10006a2a:	2220      	movs	r2, #32
10006a2c:	2100      	movs	r1, #0
10006a2e:	4618      	mov	r0, r3
10006a30:	f002 fc6e 	bl	10009310 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
10006a34:	68fb      	ldr	r3, [r7, #12]
10006a36:	68ba      	ldr	r2, [r7, #8]
10006a38:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
10006a3a:	68fb      	ldr	r3, [r7, #12]
10006a3c:	687a      	ldr	r2, [r7, #4]
10006a3e:	605a      	str	r2, [r3, #4]
	io->size = size;
10006a40:	68fb      	ldr	r3, [r7, #12]
10006a42:	683a      	ldr	r2, [r7, #0]
10006a44:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
10006a46:	68fb      	ldr	r3, [r7, #12]
10006a48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10006a4a:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
10006a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10006a4e:	2b1f      	cmp	r3, #31
10006a50:	d904      	bls.n	10006a5c <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
10006a52:	68fb      	ldr	r3, [r7, #12]
10006a54:	f04f 32ff 	mov.w	r2, #4294967295
10006a58:	611a      	str	r2, [r3, #16]
10006a5a:	e006      	b.n	10006a6a <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
10006a5c:	2201      	movs	r2, #1
10006a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10006a60:	fa02 f303 	lsl.w	r3, r2, r3
10006a64:	1e5a      	subs	r2, r3, #1
10006a66:	68fb      	ldr	r3, [r7, #12]
10006a68:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
10006a6a:	68fb      	ldr	r3, [r7, #12]
10006a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10006a6e:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
10006a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10006a72:	2b00      	cmp	r3, #0
10006a74:	d00b      	beq.n	10006a8e <metal_io_init+0x76>
10006a76:	68fb      	ldr	r3, [r7, #12]
10006a78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10006a7a:	f103 0418 	add.w	r4, r3, #24
10006a7e:	4615      	mov	r5, r2
10006a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10006a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10006a84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10006a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
10006a8c:	e00a      	b.n	10006aa4 <metal_io_init+0x8c>
10006a8e:	68fb      	ldr	r3, [r7, #12]
10006a90:	f103 0418 	add.w	r4, r3, #24
10006a94:	f107 0510 	add.w	r5, r7, #16
10006a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10006a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10006a9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10006aa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
10006aa4:	68f8      	ldr	r0, [r7, #12]
10006aa6:	f7ff ff1b 	bl	100068e0 <metal_sys_io_mem_map>
}
10006aaa:	bf00      	nop
10006aac:	3730      	adds	r7, #48	@ 0x30
10006aae:	46bd      	mov	sp, r7
10006ab0:	bdb0      	pop	{r4, r5, r7, pc}

10006ab2 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
10006ab2:	b590      	push	{r4, r7, lr}
10006ab4:	b08b      	sub	sp, #44	@ 0x2c
10006ab6:	af02      	add	r7, sp, #8
10006ab8:	60f8      	str	r0, [r7, #12]
10006aba:	60b9      	str	r1, [r7, #8]
10006abc:	607a      	str	r2, [r7, #4]
10006abe:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10006ac0:	68b9      	ldr	r1, [r7, #8]
10006ac2:	68f8      	ldr	r0, [r7, #12]
10006ac4:	f7ff ff8c 	bl	100069e0 <metal_io_virt>
10006ac8:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
10006aca:	687b      	ldr	r3, [r7, #4]
10006acc:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10006ace:	69fb      	ldr	r3, [r7, #28]
10006ad0:	2b00      	cmp	r3, #0
10006ad2:	d102      	bne.n	10006ada <metal_io_block_read+0x28>
		return -ERANGE;
10006ad4:	f06f 0321 	mvn.w	r3, #33	@ 0x21
10006ad8:	e05c      	b.n	10006b94 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
10006ada:	683a      	ldr	r2, [r7, #0]
10006adc:	68bb      	ldr	r3, [r7, #8]
10006ade:	441a      	add	r2, r3
10006ae0:	68fb      	ldr	r3, [r7, #12]
10006ae2:	689b      	ldr	r3, [r3, #8]
10006ae4:	429a      	cmp	r2, r3
10006ae6:	d904      	bls.n	10006af2 <metal_io_block_read+0x40>
		len = io->size - offset;
10006ae8:	68fb      	ldr	r3, [r7, #12]
10006aea:	689a      	ldr	r2, [r3, #8]
10006aec:	68bb      	ldr	r3, [r7, #8]
10006aee:	1ad3      	subs	r3, r2, r3
10006af0:	603b      	str	r3, [r7, #0]
	retlen = len;
10006af2:	683b      	ldr	r3, [r7, #0]
10006af4:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
10006af6:	68fb      	ldr	r3, [r7, #12]
10006af8:	6a1b      	ldr	r3, [r3, #32]
10006afa:	2b00      	cmp	r3, #0
10006afc:	d00a      	beq.n	10006b14 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
10006afe:	68fb      	ldr	r3, [r7, #12]
10006b00:	6a1c      	ldr	r4, [r3, #32]
10006b02:	683b      	ldr	r3, [r7, #0]
10006b04:	9300      	str	r3, [sp, #0]
10006b06:	2305      	movs	r3, #5
10006b08:	687a      	ldr	r2, [r7, #4]
10006b0a:	68b9      	ldr	r1, [r7, #8]
10006b0c:	68f8      	ldr	r0, [r7, #12]
10006b0e:	47a0      	blx	r4
10006b10:	6178      	str	r0, [r7, #20]
10006b12:	e03e      	b.n	10006b92 <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
10006b14:	f3bf 8f5b 	dmb	ish
		while ( len && (
10006b18:	e00c      	b.n	10006b34 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10006b1a:	69fb      	ldr	r3, [r7, #28]
10006b1c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
10006b1e:	69bb      	ldr	r3, [r7, #24]
10006b20:	701a      	strb	r2, [r3, #0]
			dest++;
10006b22:	69bb      	ldr	r3, [r7, #24]
10006b24:	3301      	adds	r3, #1
10006b26:	61bb      	str	r3, [r7, #24]
			ptr++;
10006b28:	69fb      	ldr	r3, [r7, #28]
10006b2a:	3301      	adds	r3, #1
10006b2c:	61fb      	str	r3, [r7, #28]
			len--;
10006b2e:	683b      	ldr	r3, [r7, #0]
10006b30:	3b01      	subs	r3, #1
10006b32:	603b      	str	r3, [r7, #0]
		while ( len && (
10006b34:	683b      	ldr	r3, [r7, #0]
10006b36:	2b00      	cmp	r3, #0
10006b38:	d017      	beq.n	10006b6a <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
10006b3a:	69bb      	ldr	r3, [r7, #24]
10006b3c:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10006b40:	2b00      	cmp	r3, #0
10006b42:	d1ea      	bne.n	10006b1a <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
10006b44:	69fb      	ldr	r3, [r7, #28]
10006b46:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
10006b4a:	2b00      	cmp	r3, #0
10006b4c:	d1e5      	bne.n	10006b1a <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10006b4e:	e00c      	b.n	10006b6a <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
10006b50:	69fb      	ldr	r3, [r7, #28]
10006b52:	681a      	ldr	r2, [r3, #0]
10006b54:	69bb      	ldr	r3, [r7, #24]
10006b56:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10006b58:	69bb      	ldr	r3, [r7, #24]
10006b5a:	3304      	adds	r3, #4
10006b5c:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
10006b5e:	69fb      	ldr	r3, [r7, #28]
10006b60:	3304      	adds	r3, #4
10006b62:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
10006b64:	683b      	ldr	r3, [r7, #0]
10006b66:	3b04      	subs	r3, #4
10006b68:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10006b6a:	683b      	ldr	r3, [r7, #0]
10006b6c:	2b03      	cmp	r3, #3
10006b6e:	dcef      	bgt.n	10006b50 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
10006b70:	e00c      	b.n	10006b8c <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10006b72:	69fb      	ldr	r3, [r7, #28]
10006b74:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
10006b76:	69bb      	ldr	r3, [r7, #24]
10006b78:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
10006b7a:	69bb      	ldr	r3, [r7, #24]
10006b7c:	3301      	adds	r3, #1
10006b7e:	61bb      	str	r3, [r7, #24]
10006b80:	69fb      	ldr	r3, [r7, #28]
10006b82:	3301      	adds	r3, #1
10006b84:	61fb      	str	r3, [r7, #28]
10006b86:	683b      	ldr	r3, [r7, #0]
10006b88:	3b01      	subs	r3, #1
10006b8a:	603b      	str	r3, [r7, #0]
10006b8c:	683b      	ldr	r3, [r7, #0]
10006b8e:	2b00      	cmp	r3, #0
10006b90:	d1ef      	bne.n	10006b72 <metal_io_block_read+0xc0>
	}
	return retlen;
10006b92:	697b      	ldr	r3, [r7, #20]
}
10006b94:	4618      	mov	r0, r3
10006b96:	3724      	adds	r7, #36	@ 0x24
10006b98:	46bd      	mov	sp, r7
10006b9a:	bd90      	pop	{r4, r7, pc}

10006b9c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
10006b9c:	b590      	push	{r4, r7, lr}
10006b9e:	b08b      	sub	sp, #44	@ 0x2c
10006ba0:	af02      	add	r7, sp, #8
10006ba2:	60f8      	str	r0, [r7, #12]
10006ba4:	60b9      	str	r1, [r7, #8]
10006ba6:	607a      	str	r2, [r7, #4]
10006ba8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10006baa:	68b9      	ldr	r1, [r7, #8]
10006bac:	68f8      	ldr	r0, [r7, #12]
10006bae:	f7ff ff17 	bl	100069e0 <metal_io_virt>
10006bb2:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
10006bb4:	687b      	ldr	r3, [r7, #4]
10006bb6:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10006bb8:	69fb      	ldr	r3, [r7, #28]
10006bba:	2b00      	cmp	r3, #0
10006bbc:	d102      	bne.n	10006bc4 <metal_io_block_write+0x28>
		return -ERANGE;
10006bbe:	f06f 0321 	mvn.w	r3, #33	@ 0x21
10006bc2:	e05b      	b.n	10006c7c <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
10006bc4:	683a      	ldr	r2, [r7, #0]
10006bc6:	68bb      	ldr	r3, [r7, #8]
10006bc8:	441a      	add	r2, r3
10006bca:	68fb      	ldr	r3, [r7, #12]
10006bcc:	689b      	ldr	r3, [r3, #8]
10006bce:	429a      	cmp	r2, r3
10006bd0:	d904      	bls.n	10006bdc <metal_io_block_write+0x40>
		len = io->size - offset;
10006bd2:	68fb      	ldr	r3, [r7, #12]
10006bd4:	689a      	ldr	r2, [r3, #8]
10006bd6:	68bb      	ldr	r3, [r7, #8]
10006bd8:	1ad3      	subs	r3, r2, r3
10006bda:	603b      	str	r3, [r7, #0]
	retlen = len;
10006bdc:	683b      	ldr	r3, [r7, #0]
10006bde:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
10006be0:	68fb      	ldr	r3, [r7, #12]
10006be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006be4:	2b00      	cmp	r3, #0
10006be6:	d017      	beq.n	10006c18 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
10006be8:	68fb      	ldr	r3, [r7, #12]
10006bea:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
10006bec:	683b      	ldr	r3, [r7, #0]
10006bee:	9300      	str	r3, [sp, #0]
10006bf0:	2305      	movs	r3, #5
10006bf2:	687a      	ldr	r2, [r7, #4]
10006bf4:	68b9      	ldr	r1, [r7, #8]
10006bf6:	68f8      	ldr	r0, [r7, #12]
10006bf8:	47a0      	blx	r4
10006bfa:	6178      	str	r0, [r7, #20]
10006bfc:	e03d      	b.n	10006c7a <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
10006bfe:	69bb      	ldr	r3, [r7, #24]
10006c00:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
10006c02:	69fb      	ldr	r3, [r7, #28]
10006c04:	701a      	strb	r2, [r3, #0]
			ptr++;
10006c06:	69fb      	ldr	r3, [r7, #28]
10006c08:	3301      	adds	r3, #1
10006c0a:	61fb      	str	r3, [r7, #28]
			source++;
10006c0c:	69bb      	ldr	r3, [r7, #24]
10006c0e:	3301      	adds	r3, #1
10006c10:	61bb      	str	r3, [r7, #24]
			len--;
10006c12:	683b      	ldr	r3, [r7, #0]
10006c14:	3b01      	subs	r3, #1
10006c16:	603b      	str	r3, [r7, #0]
		while ( len && (
10006c18:	683b      	ldr	r3, [r7, #0]
10006c1a:	2b00      	cmp	r3, #0
10006c1c:	d017      	beq.n	10006c4e <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
10006c1e:	69fb      	ldr	r3, [r7, #28]
10006c20:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10006c24:	2b00      	cmp	r3, #0
10006c26:	d1ea      	bne.n	10006bfe <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
10006c28:	69bb      	ldr	r3, [r7, #24]
10006c2a:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
10006c2e:	2b00      	cmp	r3, #0
10006c30:	d1e5      	bne.n	10006bfe <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10006c32:	e00c      	b.n	10006c4e <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
10006c34:	69bb      	ldr	r3, [r7, #24]
10006c36:	681a      	ldr	r2, [r3, #0]
10006c38:	69fb      	ldr	r3, [r7, #28]
10006c3a:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10006c3c:	69fb      	ldr	r3, [r7, #28]
10006c3e:	3304      	adds	r3, #4
10006c40:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
10006c42:	69bb      	ldr	r3, [r7, #24]
10006c44:	3304      	adds	r3, #4
10006c46:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
10006c48:	683b      	ldr	r3, [r7, #0]
10006c4a:	3b04      	subs	r3, #4
10006c4c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10006c4e:	683b      	ldr	r3, [r7, #0]
10006c50:	2b03      	cmp	r3, #3
10006c52:	dcef      	bgt.n	10006c34 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
10006c54:	e00c      	b.n	10006c70 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
10006c56:	69bb      	ldr	r3, [r7, #24]
10006c58:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
10006c5a:	69fb      	ldr	r3, [r7, #28]
10006c5c:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
10006c5e:	69fb      	ldr	r3, [r7, #28]
10006c60:	3301      	adds	r3, #1
10006c62:	61fb      	str	r3, [r7, #28]
10006c64:	69bb      	ldr	r3, [r7, #24]
10006c66:	3301      	adds	r3, #1
10006c68:	61bb      	str	r3, [r7, #24]
10006c6a:	683b      	ldr	r3, [r7, #0]
10006c6c:	3b01      	subs	r3, #1
10006c6e:	603b      	str	r3, [r7, #0]
10006c70:	683b      	ldr	r3, [r7, #0]
10006c72:	2b00      	cmp	r3, #0
10006c74:	d1ef      	bne.n	10006c56 <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
10006c76:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
10006c7a:	697b      	ldr	r3, [r7, #20]
}
10006c7c:	4618      	mov	r0, r3
10006c7e:	3724      	adds	r7, #36	@ 0x24
10006c80:	46bd      	mov	sp, r7
10006c82:	bd90      	pop	{r4, r7, pc}

10006c84 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
10006c84:	b40e      	push	{r1, r2, r3}
10006c86:	b480      	push	{r7}
10006c88:	b082      	sub	sp, #8
10006c8a:	af00      	add	r7, sp, #0
10006c8c:	4603      	mov	r3, r0
10006c8e:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
10006c90:	bf00      	nop
10006c92:	3708      	adds	r7, #8
10006c94:	46bd      	mov	sp, r7
10006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
10006c9a:	b003      	add	sp, #12
10006c9c:	4770      	bx	lr

10006c9e <metal_io_virt>:
{
10006c9e:	b480      	push	{r7}
10006ca0:	b083      	sub	sp, #12
10006ca2:	af00      	add	r7, sp, #0
10006ca4:	6078      	str	r0, [r7, #4]
10006ca6:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10006ca8:	687b      	ldr	r3, [r7, #4]
10006caa:	681b      	ldr	r3, [r3, #0]
		: NULL);
10006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
10006cb0:	d00a      	beq.n	10006cc8 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10006cb2:	687b      	ldr	r3, [r7, #4]
10006cb4:	689b      	ldr	r3, [r3, #8]
10006cb6:	683a      	ldr	r2, [r7, #0]
10006cb8:	429a      	cmp	r2, r3
10006cba:	d205      	bcs.n	10006cc8 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10006cbc:	687b      	ldr	r3, [r7, #4]
10006cbe:	681b      	ldr	r3, [r3, #0]
10006cc0:	461a      	mov	r2, r3
10006cc2:	683b      	ldr	r3, [r7, #0]
10006cc4:	4413      	add	r3, r2
		: NULL);
10006cc6:	e000      	b.n	10006cca <metal_io_virt+0x2c>
10006cc8:	2300      	movs	r3, #0
}
10006cca:	4618      	mov	r0, r3
10006ccc:	370c      	adds	r7, #12
10006cce:	46bd      	mov	sp, r7
10006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
10006cd4:	4770      	bx	lr

10006cd6 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
10006cd6:	b480      	push	{r7}
10006cd8:	b085      	sub	sp, #20
10006cda:	af00      	add	r7, sp, #0
10006cdc:	6078      	str	r0, [r7, #4]
10006cde:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10006ce0:	683b      	ldr	r3, [r7, #0]
10006ce2:	687a      	ldr	r2, [r7, #4]
10006ce4:	6812      	ldr	r2, [r2, #0]
10006ce6:	1a9b      	subs	r3, r3, r2
10006ce8:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10006cea:	687b      	ldr	r3, [r7, #4]
10006cec:	689b      	ldr	r3, [r3, #8]
10006cee:	68fa      	ldr	r2, [r7, #12]
10006cf0:	429a      	cmp	r2, r3
10006cf2:	d201      	bcs.n	10006cf8 <metal_io_virt_to_offset+0x22>
10006cf4:	68fb      	ldr	r3, [r7, #12]
10006cf6:	e001      	b.n	10006cfc <metal_io_virt_to_offset+0x26>
10006cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
10006cfc:	4618      	mov	r0, r3
10006cfe:	3714      	adds	r7, #20
10006d00:	46bd      	mov	sp, r7
10006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
10006d06:	4770      	bx	lr

10006d08 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
10006d08:	b5b0      	push	{r4, r5, r7, lr}
10006d0a:	b08c      	sub	sp, #48	@ 0x30
10006d0c:	af00      	add	r7, sp, #0
10006d0e:	60f8      	str	r0, [r7, #12]
10006d10:	60b9      	str	r1, [r7, #8]
10006d12:	603b      	str	r3, [r7, #0]
10006d14:	4613      	mov	r3, r2
10006d16:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
10006d18:	68b9      	ldr	r1, [r7, #8]
10006d1a:	68f8      	ldr	r0, [r7, #12]
10006d1c:	f7ff ffbf 	bl	10006c9e <metal_io_virt>
10006d20:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
10006d22:	68fb      	ldr	r3, [r7, #12]
10006d24:	699b      	ldr	r3, [r3, #24]
10006d26:	2b00      	cmp	r3, #0
10006d28:	d009      	beq.n	10006d3e <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
10006d2a:	68fb      	ldr	r3, [r7, #12]
10006d2c:	699c      	ldr	r4, [r3, #24]
10006d2e:	79fa      	ldrb	r2, [r7, #7]
10006d30:	683b      	ldr	r3, [r7, #0]
10006d32:	68b9      	ldr	r1, [r7, #8]
10006d34:	68f8      	ldr	r0, [r7, #12]
10006d36:	47a0      	blx	r4
10006d38:	4604      	mov	r4, r0
10006d3a:	460d      	mov	r5, r1
10006d3c:	e059      	b.n	10006df2 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
10006d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006d40:	2b00      	cmp	r3, #0
10006d42:	d012      	beq.n	10006d6a <metal_io_read+0x62>
10006d44:	683b      	ldr	r3, [r7, #0]
10006d46:	2b01      	cmp	r3, #1
10006d48:	d10f      	bne.n	10006d6a <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
10006d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
10006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10006d50:	f3bf 8f5b 	dmb	ish
10006d54:	781b      	ldrb	r3, [r3, #0]
10006d56:	f3bf 8f5b 	dmb	ish
10006d5a:	b2db      	uxtb	r3, r3
10006d5c:	76fb      	strb	r3, [r7, #27]
10006d5e:	7efb      	ldrb	r3, [r7, #27]
10006d60:	b2db      	uxtb	r3, r3
10006d62:	2200      	movs	r2, #0
10006d64:	461c      	mov	r4, r3
10006d66:	4615      	mov	r5, r2
10006d68:	e043      	b.n	10006df2 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
10006d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006d6c:	2b00      	cmp	r3, #0
10006d6e:	d012      	beq.n	10006d96 <metal_io_read+0x8e>
10006d70:	683b      	ldr	r3, [r7, #0]
10006d72:	2b02      	cmp	r3, #2
10006d74:	d10f      	bne.n	10006d96 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
10006d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006d78:	627b      	str	r3, [r7, #36]	@ 0x24
10006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006d7c:	f3bf 8f5b 	dmb	ish
10006d80:	881b      	ldrh	r3, [r3, #0]
10006d82:	f3bf 8f5b 	dmb	ish
10006d86:	b29b      	uxth	r3, r3
10006d88:	833b      	strh	r3, [r7, #24]
10006d8a:	8b3b      	ldrh	r3, [r7, #24]
10006d8c:	b29b      	uxth	r3, r3
10006d8e:	2200      	movs	r2, #0
10006d90:	461c      	mov	r4, r3
10006d92:	4615      	mov	r5, r2
10006d94:	e02d      	b.n	10006df2 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
10006d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006d98:	2b00      	cmp	r3, #0
10006d9a:	d010      	beq.n	10006dbe <metal_io_read+0xb6>
10006d9c:	683b      	ldr	r3, [r7, #0]
10006d9e:	2b04      	cmp	r3, #4
10006da0:	d10d      	bne.n	10006dbe <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
10006da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006da4:	623b      	str	r3, [r7, #32]
10006da6:	6a3b      	ldr	r3, [r7, #32]
10006da8:	f3bf 8f5b 	dmb	ish
10006dac:	681b      	ldr	r3, [r3, #0]
10006dae:	f3bf 8f5b 	dmb	ish
10006db2:	617b      	str	r3, [r7, #20]
10006db4:	697b      	ldr	r3, [r7, #20]
10006db6:	2200      	movs	r2, #0
10006db8:	461c      	mov	r4, r3
10006dba:	4615      	mov	r5, r2
10006dbc:	e019      	b.n	10006df2 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
10006dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006dc0:	2b00      	cmp	r3, #0
10006dc2:	d010      	beq.n	10006de6 <metal_io_read+0xde>
10006dc4:	683b      	ldr	r3, [r7, #0]
10006dc6:	2b04      	cmp	r3, #4
10006dc8:	d10d      	bne.n	10006de6 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
10006dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006dcc:	61fb      	str	r3, [r7, #28]
10006dce:	69fb      	ldr	r3, [r7, #28]
10006dd0:	f3bf 8f5b 	dmb	ish
10006dd4:	681b      	ldr	r3, [r3, #0]
10006dd6:	f3bf 8f5b 	dmb	ish
10006dda:	613b      	str	r3, [r7, #16]
10006ddc:	693b      	ldr	r3, [r7, #16]
10006dde:	2200      	movs	r2, #0
10006de0:	461c      	mov	r4, r3
10006de2:	4615      	mov	r5, r2
10006de4:	e005      	b.n	10006df2 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
10006de6:	4b06      	ldr	r3, [pc, #24]	@ (10006e00 <metal_io_read+0xf8>)
10006de8:	4a06      	ldr	r2, [pc, #24]	@ (10006e04 <metal_io_read+0xfc>)
10006dea:	21fe      	movs	r1, #254	@ 0xfe
10006dec:	4806      	ldr	r0, [pc, #24]	@ (10006e08 <metal_io_read+0x100>)
10006dee:	f002 f85f 	bl	10008eb0 <__assert_func>
	return 0; /* quiet compiler */
}
10006df2:	4622      	mov	r2, r4
10006df4:	462b      	mov	r3, r5
10006df6:	4610      	mov	r0, r2
10006df8:	4619      	mov	r1, r3
10006dfa:	3730      	adds	r7, #48	@ 0x30
10006dfc:	46bd      	mov	sp, r7
10006dfe:	bdb0      	pop	{r4, r5, r7, pc}
10006e00:	1000a49c 	.word	0x1000a49c
10006e04:	1000a70c 	.word	0x1000a70c
10006e08:	1000a4a0 	.word	0x1000a4a0

10006e0c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
10006e0c:	b580      	push	{r7, lr}
10006e0e:	b082      	sub	sp, #8
10006e10:	af00      	add	r7, sp, #0
10006e12:	6078      	str	r0, [r7, #4]
	return malloc(size);
10006e14:	6878      	ldr	r0, [r7, #4]
10006e16:	f002 f869 	bl	10008eec <malloc>
10006e1a:	4603      	mov	r3, r0
}
10006e1c:	4618      	mov	r0, r3
10006e1e:	3708      	adds	r7, #8
10006e20:	46bd      	mov	sp, r7
10006e22:	bd80      	pop	{r7, pc}

10006e24 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
10006e24:	b580      	push	{r7, lr}
10006e26:	b082      	sub	sp, #8
10006e28:	af00      	add	r7, sp, #0
10006e2a:	6078      	str	r0, [r7, #4]
	free(ptr);
10006e2c:	6878      	ldr	r0, [r7, #4]
10006e2e:	f002 f865 	bl	10008efc <free>
}
10006e32:	bf00      	nop
10006e34:	3708      	adds	r7, #8
10006e36:	46bd      	mov	sp, r7
10006e38:	bd80      	pop	{r7, pc}

10006e3a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
10006e3a:	b580      	push	{r7, lr}
10006e3c:	b084      	sub	sp, #16
10006e3e:	af00      	add	r7, sp, #0
10006e40:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
10006e42:	687b      	ldr	r3, [r7, #4]
10006e44:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
10006e46:	3334      	adds	r3, #52	@ 0x34
10006e48:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
10006e4a:	68f8      	ldr	r0, [r7, #12]
10006e4c:	f7ff ffde 	bl	10006e0c <metal_allocate_memory>
10006e50:	60b8      	str	r0, [r7, #8]
	if (vqs) {
10006e52:	68bb      	ldr	r3, [r7, #8]
10006e54:	2b00      	cmp	r3, #0
10006e56:	d004      	beq.n	10006e62 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
10006e58:	68fa      	ldr	r2, [r7, #12]
10006e5a:	2100      	movs	r1, #0
10006e5c:	68b8      	ldr	r0, [r7, #8]
10006e5e:	f002 fa57 	bl	10009310 <memset>
	}

	return vqs;
10006e62:	68bb      	ldr	r3, [r7, #8]
}
10006e64:	4618      	mov	r0, r3
10006e66:	3710      	adds	r7, #16
10006e68:	46bd      	mov	sp, r7
10006e6a:	bd80      	pop	{r7, pc}

10006e6c <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
10006e6c:	b580      	push	{r7, lr}
10006e6e:	b086      	sub	sp, #24
10006e70:	af00      	add	r7, sp, #0
10006e72:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
10006e74:	687b      	ldr	r3, [r7, #4]
10006e76:	891b      	ldrh	r3, [r3, #8]
10006e78:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
10006e7a:	687b      	ldr	r3, [r7, #4]
10006e7c:	681b      	ldr	r3, [r3, #0]
10006e7e:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10006e80:	693b      	ldr	r3, [r7, #16]
10006e82:	3b10      	subs	r3, #16
10006e84:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
10006e86:	693b      	ldr	r3, [r7, #16]
10006e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006e8a:	697a      	ldr	r2, [r7, #20]
10006e8c:	429a      	cmp	r2, r3
10006e8e:	d305      	bcc.n	10006e9c <rproc_virtio_virtqueue_notify+0x30>
10006e90:	4b0d      	ldr	r3, [pc, #52]	@ (10006ec8 <rproc_virtio_virtqueue_notify+0x5c>)
10006e92:	4a0e      	ldr	r2, [pc, #56]	@ (10006ecc <rproc_virtio_virtqueue_notify+0x60>)
10006e94:	211c      	movs	r1, #28
10006e96:	480e      	ldr	r0, [pc, #56]	@ (10006ed0 <rproc_virtio_virtqueue_notify+0x64>)
10006e98:	f002 f80a 	bl	10008eb0 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
10006e9c:	693b      	ldr	r3, [r7, #16]
10006e9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10006ea0:	697a      	ldr	r2, [r7, #20]
10006ea2:	4613      	mov	r3, r2
10006ea4:	005b      	lsls	r3, r3, #1
10006ea6:	4413      	add	r3, r2
10006ea8:	00db      	lsls	r3, r3, #3
10006eaa:	440b      	add	r3, r1
10006eac:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
10006eae:	68fb      	ldr	r3, [r7, #12]
10006eb0:	68db      	ldr	r3, [r3, #12]
10006eb2:	68fa      	ldr	r2, [r7, #12]
10006eb4:	6810      	ldr	r0, [r2, #0]
10006eb6:	68ba      	ldr	r2, [r7, #8]
10006eb8:	6912      	ldr	r2, [r2, #16]
10006eba:	4611      	mov	r1, r2
10006ebc:	4798      	blx	r3
}
10006ebe:	bf00      	nop
10006ec0:	3718      	adds	r7, #24
10006ec2:	46bd      	mov	sp, r7
10006ec4:	bd80      	pop	{r7, pc}
10006ec6:	bf00      	nop
10006ec8:	1000a51c 	.word	0x1000a51c
10006ecc:	1000a6ec 	.word	0x1000a6ec
10006ed0:	1000a538 	.word	0x1000a538

10006ed4 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
10006ed4:	b580      	push	{r7, lr}
10006ed6:	b086      	sub	sp, #24
10006ed8:	af00      	add	r7, sp, #0
10006eda:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10006edc:	687b      	ldr	r3, [r7, #4]
10006ede:	3b10      	subs	r3, #16
10006ee0:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
10006ee2:	697b      	ldr	r3, [r7, #20]
10006ee4:	685b      	ldr	r3, [r3, #4]
10006ee6:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10006ee8:	697b      	ldr	r3, [r7, #20]
10006eea:	689b      	ldr	r3, [r3, #8]
10006eec:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
10006eee:	693b      	ldr	r3, [r7, #16]
10006ef0:	3318      	adds	r3, #24
10006ef2:	4619      	mov	r1, r3
10006ef4:	68f8      	ldr	r0, [r7, #12]
10006ef6:	f7ff feee 	bl	10006cd6 <metal_io_virt_to_offset>
10006efa:	4601      	mov	r1, r0
10006efc:	2301      	movs	r3, #1
10006efe:	2205      	movs	r2, #5
10006f00:	68f8      	ldr	r0, [r7, #12]
10006f02:	f7ff ff01 	bl	10006d08 <metal_io_read>
10006f06:	4602      	mov	r2, r0
10006f08:	460b      	mov	r3, r1
10006f0a:	4613      	mov	r3, r2
10006f0c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
10006f0e:	7afb      	ldrb	r3, [r7, #11]
}
10006f10:	4618      	mov	r0, r3
10006f12:	3718      	adds	r7, #24
10006f14:	46bd      	mov	sp, r7
10006f16:	bd80      	pop	{r7, pc}

10006f18 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
10006f18:	b580      	push	{r7, lr}
10006f1a:	b086      	sub	sp, #24
10006f1c:	af00      	add	r7, sp, #0
10006f1e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10006f20:	687b      	ldr	r3, [r7, #4]
10006f22:	3b10      	subs	r3, #16
10006f24:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
10006f26:	697b      	ldr	r3, [r7, #20]
10006f28:	685b      	ldr	r3, [r3, #4]
10006f2a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10006f2c:	697b      	ldr	r3, [r7, #20]
10006f2e:	689b      	ldr	r3, [r3, #8]
10006f30:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
10006f32:	693b      	ldr	r3, [r7, #16]
10006f34:	330c      	adds	r3, #12
10006f36:	4619      	mov	r1, r3
10006f38:	68f8      	ldr	r0, [r7, #12]
10006f3a:	f7ff fecc 	bl	10006cd6 <metal_io_virt_to_offset>
10006f3e:	4601      	mov	r1, r0
10006f40:	2304      	movs	r3, #4
10006f42:	2205      	movs	r2, #5
10006f44:	68f8      	ldr	r0, [r7, #12]
10006f46:	f7ff fedf 	bl	10006d08 <metal_io_read>
10006f4a:	4602      	mov	r2, r0
10006f4c:	460b      	mov	r3, r1
10006f4e:	4613      	mov	r3, r2
10006f50:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
10006f52:	68bb      	ldr	r3, [r7, #8]
}
10006f54:	4618      	mov	r0, r3
10006f56:	3718      	adds	r7, #24
10006f58:	46bd      	mov	sp, r7
10006f5a:	bd80      	pop	{r7, pc}

10006f5c <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
10006f5c:	b580      	push	{r7, lr}
10006f5e:	b088      	sub	sp, #32
10006f60:	af00      	add	r7, sp, #0
10006f62:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10006f64:	687b      	ldr	r3, [r7, #4]
10006f66:	3b10      	subs	r3, #16
10006f68:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10006f6a:	69fb      	ldr	r3, [r7, #28]
10006f6c:	685b      	ldr	r3, [r3, #4]
10006f6e:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
10006f70:	69fb      	ldr	r3, [r7, #28]
10006f72:	689b      	ldr	r3, [r3, #8]
10006f74:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
10006f76:	69bb      	ldr	r3, [r7, #24]
10006f78:	3310      	adds	r3, #16
10006f7a:	4619      	mov	r1, r3
10006f7c:	6978      	ldr	r0, [r7, #20]
10006f7e:	f7ff feaa 	bl	10006cd6 <metal_io_virt_to_offset>
10006f82:	4601      	mov	r1, r0
10006f84:	2304      	movs	r3, #4
10006f86:	2205      	movs	r2, #5
10006f88:	6978      	ldr	r0, [r7, #20]
10006f8a:	f7ff febd 	bl	10006d08 <metal_io_read>
10006f8e:	4602      	mov	r2, r0
10006f90:	460b      	mov	r3, r1
10006f92:	4613      	mov	r3, r2
10006f94:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
10006f96:	6878      	ldr	r0, [r7, #4]
10006f98:	f7ff ffbe 	bl	10006f18 <rproc_virtio_get_dfeatures>
10006f9c:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
10006f9e:	68fa      	ldr	r2, [r7, #12]
10006fa0:	693b      	ldr	r3, [r7, #16]
10006fa2:	4013      	ands	r3, r2
}
10006fa4:	4618      	mov	r0, r3
10006fa6:	3720      	adds	r7, #32
10006fa8:	46bd      	mov	sp, r7
10006faa:	bd80      	pop	{r7, pc}

10006fac <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
10006fac:	b580      	push	{r7, lr}
10006fae:	b088      	sub	sp, #32
10006fb0:	af00      	add	r7, sp, #0
10006fb2:	60f8      	str	r0, [r7, #12]
10006fb4:	60b9      	str	r1, [r7, #8]
10006fb6:	607a      	str	r2, [r7, #4]
10006fb8:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10006fba:	68fb      	ldr	r3, [r7, #12]
10006fbc:	3b10      	subs	r3, #16
10006fbe:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10006fc0:	69fb      	ldr	r3, [r7, #28]
10006fc2:	685b      	ldr	r3, [r3, #4]
10006fc4:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
10006fc6:	68fb      	ldr	r3, [r7, #12]
10006fc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10006fca:	4613      	mov	r3, r2
10006fcc:	009b      	lsls	r3, r3, #2
10006fce:	4413      	add	r3, r2
10006fd0:	009b      	lsls	r3, r3, #2
10006fd2:	3318      	adds	r3, #24
10006fd4:	69ba      	ldr	r2, [r7, #24]
10006fd6:	4413      	add	r3, r2
10006fd8:	3304      	adds	r3, #4
10006fda:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
10006fdc:	69fb      	ldr	r3, [r7, #28]
10006fde:	689b      	ldr	r3, [r3, #8]
10006fe0:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
10006fe2:	683a      	ldr	r2, [r7, #0]
10006fe4:	68bb      	ldr	r3, [r7, #8]
10006fe6:	441a      	add	r2, r3
10006fe8:	69bb      	ldr	r3, [r7, #24]
10006fea:	695b      	ldr	r3, [r3, #20]
10006fec:	429a      	cmp	r2, r3
10006fee:	d80c      	bhi.n	1000700a <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
10006ff0:	697a      	ldr	r2, [r7, #20]
10006ff2:	68bb      	ldr	r3, [r7, #8]
10006ff4:	4413      	add	r3, r2
		metal_io_block_read(io,
10006ff6:	4619      	mov	r1, r3
10006ff8:	6938      	ldr	r0, [r7, #16]
10006ffa:	f7ff fe6c 	bl	10006cd6 <metal_io_virt_to_offset>
10006ffe:	4601      	mov	r1, r0
10007000:	683b      	ldr	r3, [r7, #0]
10007002:	687a      	ldr	r2, [r7, #4]
10007004:	6938      	ldr	r0, [r7, #16]
10007006:	f7ff fd54 	bl	10006ab2 <metal_io_block_read>
				dst, length);
}
1000700a:	bf00      	nop
1000700c:	3720      	adds	r7, #32
1000700e:	46bd      	mov	sp, r7
10007010:	bd80      	pop	{r7, pc}
	...

10007014 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
10007014:	b580      	push	{r7, lr}
10007016:	b08e      	sub	sp, #56	@ 0x38
10007018:	af00      	add	r7, sp, #0
1000701a:	60f8      	str	r0, [r7, #12]
1000701c:	60b9      	str	r1, [r7, #8]
1000701e:	607a      	str	r2, [r7, #4]
10007020:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
10007022:	687b      	ldr	r3, [r7, #4]
10007024:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
10007026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007028:	7e5b      	ldrb	r3, [r3, #25]
1000702a:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
1000702c:	2048      	movs	r0, #72	@ 0x48
1000702e:	f7ff feed 	bl	10006e0c <metal_allocate_memory>
10007032:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
10007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007036:	2b00      	cmp	r3, #0
10007038:	d101      	bne.n	1000703e <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000703a:	2300      	movs	r3, #0
1000703c:	e092      	b.n	10007164 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000703e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10007040:	4613      	mov	r3, r2
10007042:	005b      	lsls	r3, r3, #1
10007044:	4413      	add	r3, r2
10007046:	00db      	lsls	r3, r3, #3
10007048:	4618      	mov	r0, r3
1000704a:	f7ff fedf 	bl	10006e0c <metal_allocate_memory>
1000704e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
10007050:	6a3b      	ldr	r3, [r7, #32]
10007052:	2b00      	cmp	r3, #0
10007054:	f000 8081 	beq.w	1000715a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
10007058:	2248      	movs	r2, #72	@ 0x48
1000705a:	2100      	movs	r1, #0
1000705c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
1000705e:	f002 f957 	bl	10009310 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
10007062:	2218      	movs	r2, #24
10007064:	2100      	movs	r1, #0
10007066:	6a38      	ldr	r0, [r7, #32]
10007068:	f002 f952 	bl	10009310 <memset>
	vdev = &rpvdev->vdev;
1000706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000706e:	3310      	adds	r3, #16
10007070:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
10007072:	2300      	movs	r3, #0
10007074:	637b      	str	r3, [r7, #52]	@ 0x34
10007076:	e025      	b.n	100070c4 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
10007078:	2300      	movs	r3, #0
1000707a:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
1000707c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000707e:	4613      	mov	r3, r2
10007080:	009b      	lsls	r3, r3, #2
10007082:	4413      	add	r3, r2
10007084:	009b      	lsls	r3, r3, #2
10007086:	3318      	adds	r3, #24
10007088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000708a:	4413      	add	r3, r2
1000708c:	3304      	adds	r3, #4
1000708e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
10007090:	68fb      	ldr	r3, [r7, #12]
10007092:	2b00      	cmp	r3, #0
10007094:	d102      	bne.n	1000709c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
10007096:	69bb      	ldr	r3, [r7, #24]
10007098:	689b      	ldr	r3, [r3, #8]
1000709a:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
1000709c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000709e:	f7ff fecc 	bl	10006e3a <virtqueue_allocate>
100070a2:	6178      	str	r0, [r7, #20]
		if (!vq)
100070a4:	697b      	ldr	r3, [r7, #20]
100070a6:	2b00      	cmp	r3, #0
100070a8:	d031      	beq.n	1000710e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
100070aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100070ac:	4613      	mov	r3, r2
100070ae:	005b      	lsls	r3, r3, #1
100070b0:	4413      	add	r3, r2
100070b2:	00db      	lsls	r3, r3, #3
100070b4:	461a      	mov	r2, r3
100070b6:	6a3b      	ldr	r3, [r7, #32]
100070b8:	4413      	add	r3, r2
100070ba:	697a      	ldr	r2, [r7, #20]
100070bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
100070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100070c0:	3301      	adds	r3, #1
100070c2:	637b      	str	r3, [r7, #52]	@ 0x34
100070c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100070c8:	429a      	cmp	r2, r3
100070ca:	d3d5      	bcc.n	10007078 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
100070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100070ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
100070d0:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
100070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100070d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
100070d6:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
100070d8:	69fb      	ldr	r3, [r7, #28]
100070da:	6a3a      	ldr	r2, [r7, #32]
100070dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
100070de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100070e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100070e2:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
100070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100070e6:	683a      	ldr	r2, [r7, #0]
100070e8:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
100070ea:	69fb      	ldr	r3, [r7, #28]
100070ec:	68ba      	ldr	r2, [r7, #8]
100070ee:	601a      	str	r2, [r3, #0]
	vdev->role = role;
100070f0:	69fb      	ldr	r3, [r7, #28]
100070f2:	68fa      	ldr	r2, [r7, #12]
100070f4:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
100070f6:	69fb      	ldr	r3, [r7, #28]
100070f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
100070fa:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
100070fc:	69fb      	ldr	r3, [r7, #28]
100070fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10007100:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
10007102:	69fb      	ldr	r3, [r7, #28]
10007104:	4a19      	ldr	r2, [pc, #100]	@ (1000716c <rproc_virtio_create_vdev+0x158>)
10007106:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
10007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000710a:	3310      	adds	r3, #16
1000710c:	e02a      	b.n	10007164 <rproc_virtio_create_vdev+0x150>
			goto err1;
1000710e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
10007110:	2300      	movs	r3, #0
10007112:	637b      	str	r3, [r7, #52]	@ 0x34
10007114:	e019      	b.n	1000714a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
10007116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007118:	4613      	mov	r3, r2
1000711a:	005b      	lsls	r3, r3, #1
1000711c:	4413      	add	r3, r2
1000711e:	00db      	lsls	r3, r3, #3
10007120:	461a      	mov	r2, r3
10007122:	6a3b      	ldr	r3, [r7, #32]
10007124:	4413      	add	r3, r2
10007126:	681b      	ldr	r3, [r3, #0]
10007128:	2b00      	cmp	r3, #0
1000712a:	d00b      	beq.n	10007144 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
1000712c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000712e:	4613      	mov	r3, r2
10007130:	005b      	lsls	r3, r3, #1
10007132:	4413      	add	r3, r2
10007134:	00db      	lsls	r3, r3, #3
10007136:	461a      	mov	r2, r3
10007138:	6a3b      	ldr	r3, [r7, #32]
1000713a:	4413      	add	r3, r2
1000713c:	681b      	ldr	r3, [r3, #0]
1000713e:	4618      	mov	r0, r3
10007140:	f7ff fe70 	bl	10006e24 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
10007144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007146:	3301      	adds	r3, #1
10007148:	637b      	str	r3, [r7, #52]	@ 0x34
1000714a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000714c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000714e:	429a      	cmp	r2, r3
10007150:	d3e1      	bcc.n	10007116 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
10007152:	6a38      	ldr	r0, [r7, #32]
10007154:	f7ff fe66 	bl	10006e24 <metal_free_memory>
10007158:	e000      	b.n	1000715c <rproc_virtio_create_vdev+0x148>
		goto err0;
1000715a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
1000715c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
1000715e:	f7ff fe61 	bl	10006e24 <metal_free_memory>
	return NULL;
10007162:	2300      	movs	r3, #0
}
10007164:	4618      	mov	r0, r3
10007166:	3738      	adds	r7, #56	@ 0x38
10007168:	46bd      	mov	sp, r7
1000716a:	bd80      	pop	{r7, pc}
1000716c:	1000a6c8 	.word	0x1000a6c8

10007170 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
10007170:	b480      	push	{r7}
10007172:	b087      	sub	sp, #28
10007174:	af00      	add	r7, sp, #0
10007176:	60f8      	str	r0, [r7, #12]
10007178:	60b9      	str	r1, [r7, #8]
1000717a:	607a      	str	r2, [r7, #4]
1000717c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
1000717e:	68fb      	ldr	r3, [r7, #12]
10007180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007182:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
10007184:	68ba      	ldr	r2, [r7, #8]
10007186:	697b      	ldr	r3, [r7, #20]
10007188:	429a      	cmp	r2, r3
1000718a:	d302      	bcc.n	10007192 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
1000718c:	f06f 0301 	mvn.w	r3, #1
10007190:	e019      	b.n	100071c6 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
10007192:	68fb      	ldr	r3, [r7, #12]
10007194:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10007196:	68ba      	ldr	r2, [r7, #8]
10007198:	4613      	mov	r3, r2
1000719a:	005b      	lsls	r3, r3, #1
1000719c:	4413      	add	r3, r2
1000719e:	00db      	lsls	r3, r3, #3
100071a0:	440b      	add	r3, r1
100071a2:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
100071a4:	693b      	ldr	r3, [r7, #16]
100071a6:	6a3a      	ldr	r2, [r7, #32]
100071a8:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
100071aa:	693b      	ldr	r3, [r7, #16]
100071ac:	687a      	ldr	r2, [r7, #4]
100071ae:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
100071b0:	693b      	ldr	r3, [r7, #16]
100071b2:	683a      	ldr	r2, [r7, #0]
100071b4:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
100071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100071b8:	b29a      	uxth	r2, r3
100071ba:	693b      	ldr	r3, [r7, #16]
100071bc:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
100071be:	693b      	ldr	r3, [r7, #16]
100071c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100071c2:	609a      	str	r2, [r3, #8]

	return 0;
100071c4:	2300      	movs	r3, #0
}
100071c6:	4618      	mov	r0, r3
100071c8:	371c      	adds	r7, #28
100071ca:	46bd      	mov	sp, r7
100071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
100071d0:	4770      	bx	lr

100071d2 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
100071d2:	b580      	push	{r7, lr}
100071d4:	b086      	sub	sp, #24
100071d6:	af00      	add	r7, sp, #0
100071d8:	6078      	str	r0, [r7, #4]
100071da:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
100071dc:	687b      	ldr	r3, [r7, #4]
100071de:	2b00      	cmp	r3, #0
100071e0:	d102      	bne.n	100071e8 <rproc_virtio_notified+0x16>
		return -RPROC_EINVAL;
100071e2:	f06f 0301 	mvn.w	r3, #1
100071e6:	e02c      	b.n	10007242 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
100071e8:	687b      	ldr	r3, [r7, #4]
100071ea:	681b      	ldr	r3, [r3, #0]
100071ec:	683a      	ldr	r2, [r7, #0]
100071ee:	429a      	cmp	r2, r3
100071f0:	d101      	bne.n	100071f6 <rproc_virtio_notified+0x24>
		return 0;
100071f2:	2300      	movs	r3, #0
100071f4:	e025      	b.n	10007242 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
100071f6:	687b      	ldr	r3, [r7, #4]
100071f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100071fa:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
100071fc:	2300      	movs	r3, #0
100071fe:	617b      	str	r3, [r7, #20]
10007200:	e01a      	b.n	10007238 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
10007202:	687b      	ldr	r3, [r7, #4]
10007204:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10007206:	697a      	ldr	r2, [r7, #20]
10007208:	4613      	mov	r3, r2
1000720a:	005b      	lsls	r3, r3, #1
1000720c:	4413      	add	r3, r2
1000720e:	00db      	lsls	r3, r3, #3
10007210:	440b      	add	r3, r1
10007212:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
10007214:	68fb      	ldr	r3, [r7, #12]
10007216:	691b      	ldr	r3, [r3, #16]
10007218:	683a      	ldr	r2, [r7, #0]
1000721a:	429a      	cmp	r2, r3
1000721c:	d003      	beq.n	10007226 <rproc_virtio_notified+0x54>
1000721e:	683b      	ldr	r3, [r7, #0]
10007220:	f1b3 3fff 	cmp.w	r3, #4294967295
10007224:	d105      	bne.n	10007232 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
10007226:	68fb      	ldr	r3, [r7, #12]
10007228:	681b      	ldr	r3, [r3, #0]
1000722a:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
1000722c:	68b8      	ldr	r0, [r7, #8]
1000722e:	f001 fb95 	bl	1000895c <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
10007232:	697b      	ldr	r3, [r7, #20]
10007234:	3301      	adds	r3, #1
10007236:	617b      	str	r3, [r7, #20]
10007238:	697a      	ldr	r2, [r7, #20]
1000723a:	693b      	ldr	r3, [r7, #16]
1000723c:	429a      	cmp	r2, r3
1000723e:	d3e0      	bcc.n	10007202 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
10007240:	2300      	movs	r3, #0
}
10007242:	4618      	mov	r0, r3
10007244:	3718      	adds	r7, #24
10007246:	46bd      	mov	sp, r7
10007248:	bd80      	pop	{r7, pc}

1000724a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000724a:	b580      	push	{r7, lr}
1000724c:	b084      	sub	sp, #16
1000724e:	af00      	add	r7, sp, #0
10007250:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
10007252:	687b      	ldr	r3, [r7, #4]
10007254:	699b      	ldr	r3, [r3, #24]
10007256:	2b00      	cmp	r3, #0
10007258:	d00a      	beq.n	10007270 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000725a:	6878      	ldr	r0, [r7, #4]
1000725c:	f7ff fe3a 	bl	10006ed4 <rproc_virtio_get_status>
10007260:	4603      	mov	r3, r0
10007262:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
10007264:	7bfb      	ldrb	r3, [r7, #15]
10007266:	f003 0304 	and.w	r3, r3, #4
1000726a:	2b00      	cmp	r3, #0
1000726c:	d102      	bne.n	10007274 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000726e:	e7f4      	b.n	1000725a <rproc_virtio_wait_remote_ready+0x10>
		return;
10007270:	bf00      	nop
10007272:	e000      	b.n	10007276 <rproc_virtio_wait_remote_ready+0x2c>
			return;
10007274:	bf00      	nop
		metal_cpu_yield();
	}
}
10007276:	3710      	adds	r7, #16
10007278:	46bd      	mov	sp, r7
1000727a:	bd80      	pop	{r7, pc}

1000727c <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
1000727c:	b490      	push	{r4, r7}
1000727e:	b086      	sub	sp, #24
10007280:	af00      	add	r7, sp, #0
10007282:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10007284:	2300      	movs	r3, #0
10007286:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10007288:	bf00      	nop
1000728a:	687b      	ldr	r3, [r7, #4]
1000728c:	617b      	str	r3, [r7, #20]
1000728e:	2301      	movs	r3, #1
10007290:	60fb      	str	r3, [r7, #12]
10007292:	68fb      	ldr	r3, [r7, #12]
10007294:	461c      	mov	r4, r3
10007296:	697a      	ldr	r2, [r7, #20]
10007298:	f107 0310 	add.w	r3, r7, #16
1000729c:	6818      	ldr	r0, [r3, #0]
1000729e:	f3bf 8f5b 	dmb	ish
100072a2:	e852 1f00 	ldrex	r1, [r2]
100072a6:	4281      	cmp	r1, r0
100072a8:	d103      	bne.n	100072b2 <__metal_mutex_acquire+0x36>
100072aa:	e842 4c00 	strex	ip, r4, [r2]
100072ae:	f1bc 0f00 	cmp.w	ip, #0
100072b2:	f3bf 8f5b 	dmb	ish
100072b6:	bf0c      	ite	eq
100072b8:	2201      	moveq	r2, #1
100072ba:	2200      	movne	r2, #0
100072bc:	2a00      	cmp	r2, #0
100072be:	d100      	bne.n	100072c2 <__metal_mutex_acquire+0x46>
100072c0:	6019      	str	r1, [r3, #0]
100072c2:	4613      	mov	r3, r2
100072c4:	f083 0301 	eor.w	r3, r3, #1
100072c8:	b2db      	uxtb	r3, r3
100072ca:	2b00      	cmp	r3, #0
100072cc:	d1dd      	bne.n	1000728a <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
100072ce:	bf00      	nop
100072d0:	bf00      	nop
100072d2:	3718      	adds	r7, #24
100072d4:	46bd      	mov	sp, r7
100072d6:	bc90      	pop	{r4, r7}
100072d8:	4770      	bx	lr

100072da <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
100072da:	b480      	push	{r7}
100072dc:	b085      	sub	sp, #20
100072de:	af00      	add	r7, sp, #0
100072e0:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100072e2:	687b      	ldr	r3, [r7, #4]
100072e4:	60fb      	str	r3, [r7, #12]
100072e6:	2300      	movs	r3, #0
100072e8:	60bb      	str	r3, [r7, #8]
100072ea:	68bb      	ldr	r3, [r7, #8]
100072ec:	461a      	mov	r2, r3
100072ee:	68fb      	ldr	r3, [r7, #12]
100072f0:	f3bf 8f5b 	dmb	ish
100072f4:	601a      	str	r2, [r3, #0]
100072f6:	f3bf 8f5b 	dmb	ish
}
100072fa:	bf00      	nop
100072fc:	3714      	adds	r7, #20
100072fe:	46bd      	mov	sp, r7
10007300:	f85d 7b04 	ldr.w	r7, [sp], #4
10007304:	4770      	bx	lr

10007306 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
10007306:	b580      	push	{r7, lr}
10007308:	b082      	sub	sp, #8
1000730a:	af00      	add	r7, sp, #0
1000730c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000730e:	6878      	ldr	r0, [r7, #4]
10007310:	f7ff ffb4 	bl	1000727c <__metal_mutex_acquire>
}
10007314:	bf00      	nop
10007316:	3708      	adds	r7, #8
10007318:	46bd      	mov	sp, r7
1000731a:	bd80      	pop	{r7, pc}

1000731c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000731c:	b580      	push	{r7, lr}
1000731e:	b082      	sub	sp, #8
10007320:	af00      	add	r7, sp, #0
10007322:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10007324:	6878      	ldr	r0, [r7, #4]
10007326:	f7ff ffd8 	bl	100072da <__metal_mutex_release>
}
1000732a:	bf00      	nop
1000732c:	3708      	adds	r7, #8
1000732e:	46bd      	mov	sp, r7
10007330:	bd80      	pop	{r7, pc}

10007332 <metal_list_add_before>:
{
10007332:	b480      	push	{r7}
10007334:	b083      	sub	sp, #12
10007336:	af00      	add	r7, sp, #0
10007338:	6078      	str	r0, [r7, #4]
1000733a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000733c:	687b      	ldr	r3, [r7, #4]
1000733e:	685a      	ldr	r2, [r3, #4]
10007340:	683b      	ldr	r3, [r7, #0]
10007342:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10007344:	683b      	ldr	r3, [r7, #0]
10007346:	687a      	ldr	r2, [r7, #4]
10007348:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000734a:	683b      	ldr	r3, [r7, #0]
1000734c:	681b      	ldr	r3, [r3, #0]
1000734e:	683a      	ldr	r2, [r7, #0]
10007350:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10007352:	683b      	ldr	r3, [r7, #0]
10007354:	685b      	ldr	r3, [r3, #4]
10007356:	683a      	ldr	r2, [r7, #0]
10007358:	601a      	str	r2, [r3, #0]
}
1000735a:	bf00      	nop
1000735c:	370c      	adds	r7, #12
1000735e:	46bd      	mov	sp, r7
10007360:	f85d 7b04 	ldr.w	r7, [sp], #4
10007364:	4770      	bx	lr

10007366 <metal_list_add_tail>:
{
10007366:	b580      	push	{r7, lr}
10007368:	b082      	sub	sp, #8
1000736a:	af00      	add	r7, sp, #0
1000736c:	6078      	str	r0, [r7, #4]
1000736e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10007370:	6839      	ldr	r1, [r7, #0]
10007372:	6878      	ldr	r0, [r7, #4]
10007374:	f7ff ffdd 	bl	10007332 <metal_list_add_before>
}
10007378:	bf00      	nop
1000737a:	3708      	adds	r7, #8
1000737c:	46bd      	mov	sp, r7
1000737e:	bd80      	pop	{r7, pc}

10007380 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
10007380:	b480      	push	{r7}
10007382:	b083      	sub	sp, #12
10007384:	af00      	add	r7, sp, #0
10007386:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
10007388:	687b      	ldr	r3, [r7, #4]
1000738a:	681b      	ldr	r3, [r3, #0]
1000738c:	687a      	ldr	r2, [r7, #4]
1000738e:	6852      	ldr	r2, [r2, #4]
10007390:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
10007392:	687b      	ldr	r3, [r7, #4]
10007394:	685b      	ldr	r3, [r3, #4]
10007396:	687a      	ldr	r2, [r7, #4]
10007398:	6812      	ldr	r2, [r2, #0]
1000739a:	601a      	str	r2, [r3, #0]
	node->prev = node;
1000739c:	687b      	ldr	r3, [r7, #4]
1000739e:	687a      	ldr	r2, [r7, #4]
100073a0:	605a      	str	r2, [r3, #4]
	node->next = node;
100073a2:	687b      	ldr	r3, [r7, #4]
100073a4:	687a      	ldr	r2, [r7, #4]
100073a6:	601a      	str	r2, [r3, #0]
}
100073a8:	bf00      	nop
100073aa:	370c      	adds	r7, #12
100073ac:	46bd      	mov	sp, r7
100073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
100073b2:	4770      	bx	lr

100073b4 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
100073b4:	b480      	push	{r7}
100073b6:	b083      	sub	sp, #12
100073b8:	af00      	add	r7, sp, #0
100073ba:	6078      	str	r0, [r7, #4]
100073bc:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
100073be:	683b      	ldr	r3, [r7, #0]
100073c0:	095b      	lsrs	r3, r3, #5
100073c2:	009a      	lsls	r2, r3, #2
100073c4:	6879      	ldr	r1, [r7, #4]
100073c6:	440a      	add	r2, r1
100073c8:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
100073ca:	683a      	ldr	r2, [r7, #0]
100073cc:	f002 021f 	and.w	r2, r2, #31
100073d0:	2001      	movs	r0, #1
100073d2:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
100073d6:	009b      	lsls	r3, r3, #2
100073d8:	6878      	ldr	r0, [r7, #4]
100073da:	4403      	add	r3, r0
100073dc:	430a      	orrs	r2, r1
100073de:	601a      	str	r2, [r3, #0]
}
100073e0:	bf00      	nop
100073e2:	370c      	adds	r7, #12
100073e4:	46bd      	mov	sp, r7
100073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
100073ea:	4770      	bx	lr

100073ec <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
100073ec:	b480      	push	{r7}
100073ee:	b083      	sub	sp, #12
100073f0:	af00      	add	r7, sp, #0
100073f2:	6078      	str	r0, [r7, #4]
100073f4:	6039      	str	r1, [r7, #0]
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
100073f6:	683b      	ldr	r3, [r7, #0]
100073f8:	095b      	lsrs	r3, r3, #5
100073fa:	009b      	lsls	r3, r3, #2
100073fc:	687a      	ldr	r2, [r7, #4]
100073fe:	4413      	add	r3, r2
10007400:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
10007402:	683b      	ldr	r3, [r7, #0]
10007404:	f003 031f 	and.w	r3, r3, #31
10007408:	fa22 f303 	lsr.w	r3, r2, r3
1000740c:	f003 0301 	and.w	r3, r3, #1
10007410:	2b00      	cmp	r3, #0
10007412:	bf14      	ite	ne
10007414:	2301      	movne	r3, #1
10007416:	2300      	moveq	r3, #0
10007418:	b2db      	uxtb	r3, r3
}
1000741a:	4618      	mov	r0, r3
1000741c:	370c      	adds	r7, #12
1000741e:	46bd      	mov	sp, r7
10007420:	f85d 7b04 	ldr.w	r7, [sp], #4
10007424:	4770      	bx	lr

10007426 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
10007426:	b480      	push	{r7}
10007428:	b083      	sub	sp, #12
1000742a:	af00      	add	r7, sp, #0
1000742c:	6078      	str	r0, [r7, #4]
1000742e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10007430:	683b      	ldr	r3, [r7, #0]
10007432:	095b      	lsrs	r3, r3, #5
10007434:	009a      	lsls	r2, r3, #2
10007436:	6879      	ldr	r1, [r7, #4]
10007438:	440a      	add	r2, r1
1000743a:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
1000743c:	683a      	ldr	r2, [r7, #0]
1000743e:	f002 021f 	and.w	r2, r2, #31
10007442:	2001      	movs	r0, #1
10007444:	fa00 f202 	lsl.w	r2, r0, r2
10007448:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
1000744a:	009b      	lsls	r3, r3, #2
1000744c:	6878      	ldr	r0, [r7, #4]
1000744e:	4403      	add	r3, r0
10007450:	400a      	ands	r2, r1
10007452:	601a      	str	r2, [r3, #0]
}
10007454:	bf00      	nop
10007456:	370c      	adds	r7, #12
10007458:	46bd      	mov	sp, r7
1000745a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000745e:	4770      	bx	lr

10007460 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
10007460:	b580      	push	{r7, lr}
10007462:	b082      	sub	sp, #8
10007464:	af00      	add	r7, sp, #0
10007466:	6078      	str	r0, [r7, #4]
10007468:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
1000746a:	6839      	ldr	r1, [r7, #0]
1000746c:	6878      	ldr	r0, [r7, #4]
1000746e:	f7ff ffbd 	bl	100073ec <metal_bitmap_is_bit_set>
10007472:	4603      	mov	r3, r0
10007474:	2b00      	cmp	r3, #0
10007476:	bf0c      	ite	eq
10007478:	2301      	moveq	r3, #1
1000747a:	2300      	movne	r3, #0
1000747c:	b2db      	uxtb	r3, r3
}
1000747e:	4618      	mov	r0, r3
10007480:	3708      	adds	r7, #8
10007482:	46bd      	mov	sp, r7
10007484:	bd80      	pop	{r7, pc}

10007486 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
10007486:	b580      	push	{r7, lr}
10007488:	b086      	sub	sp, #24
1000748a:	af00      	add	r7, sp, #0
1000748c:	60f8      	str	r0, [r7, #12]
1000748e:	60b9      	str	r1, [r7, #8]
10007490:	607a      	str	r2, [r7, #4]
	unsigned int bit;

	for (bit = start;
10007492:	68bb      	ldr	r3, [r7, #8]
10007494:	617b      	str	r3, [r7, #20]
10007496:	e002      	b.n	1000749e <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
10007498:	697b      	ldr	r3, [r7, #20]
1000749a:	3301      	adds	r3, #1
1000749c:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
1000749e:	697a      	ldr	r2, [r7, #20]
100074a0:	687b      	ldr	r3, [r7, #4]
100074a2:	429a      	cmp	r2, r3
100074a4:	d207      	bcs.n	100074b6 <metal_bitmap_next_clear_bit+0x30>
100074a6:	697b      	ldr	r3, [r7, #20]
100074a8:	4619      	mov	r1, r3
100074aa:	68f8      	ldr	r0, [r7, #12]
100074ac:	f7ff ffd8 	bl	10007460 <metal_bitmap_is_bit_clear>
100074b0:	4603      	mov	r3, r0
100074b2:	2b00      	cmp	r3, #0
100074b4:	d0f0      	beq.n	10007498 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
100074b6:	697b      	ldr	r3, [r7, #20]
}
100074b8:	4618      	mov	r0, r3
100074ba:	3718      	adds	r7, #24
100074bc:	46bd      	mov	sp, r7
100074be:	bd80      	pop	{r7, pc}

100074c0 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
100074c0:	b580      	push	{r7, lr}
100074c2:	b084      	sub	sp, #16
100074c4:	af00      	add	r7, sp, #0
100074c6:	60f8      	str	r0, [r7, #12]
100074c8:	60b9      	str	r1, [r7, #8]
100074ca:	607a      	str	r2, [r7, #4]
100074cc:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
100074ce:	68f8      	ldr	r0, [r7, #12]
100074d0:	68bb      	ldr	r3, [r7, #8]
100074d2:	2b00      	cmp	r3, #0
100074d4:	d001      	beq.n	100074da <rpmsg_initialize_ept+0x1a>
100074d6:	68bb      	ldr	r3, [r7, #8]
100074d8:	e000      	b.n	100074dc <rpmsg_initialize_ept+0x1c>
100074da:	4b0a      	ldr	r3, [pc, #40]	@ (10007504 <rpmsg_initialize_ept+0x44>)
100074dc:	2220      	movs	r2, #32
100074de:	4619      	mov	r1, r3
100074e0:	f001 ff30 	bl	10009344 <strncpy>
	ept->addr = src;
100074e4:	68fb      	ldr	r3, [r7, #12]
100074e6:	687a      	ldr	r2, [r7, #4]
100074e8:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
100074ea:	68fb      	ldr	r3, [r7, #12]
100074ec:	683a      	ldr	r2, [r7, #0]
100074ee:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
100074f0:	68fb      	ldr	r3, [r7, #12]
100074f2:	69ba      	ldr	r2, [r7, #24]
100074f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
100074f6:	68fb      	ldr	r3, [r7, #12]
100074f8:	69fa      	ldr	r2, [r7, #28]
100074fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
100074fc:	bf00      	nop
100074fe:	3710      	adds	r7, #16
10007500:	46bd      	mov	sp, r7
10007502:	bd80      	pop	{r7, pc}
10007504:	1000a5c0 	.word	0x1000a5c0

10007508 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
10007508:	b580      	push	{r7, lr}
1000750a:	b084      	sub	sp, #16
1000750c:	af00      	add	r7, sp, #0
1000750e:	6078      	str	r0, [r7, #4]
10007510:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
10007512:	f04f 33ff 	mov.w	r3, #4294967295
10007516:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
10007518:	683b      	ldr	r3, [r7, #0]
1000751a:	461a      	mov	r2, r3
1000751c:	2100      	movs	r1, #0
1000751e:	6878      	ldr	r0, [r7, #4]
10007520:	f7ff ffb1 	bl	10007486 <metal_bitmap_next_clear_bit>
10007524:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
10007526:	683b      	ldr	r3, [r7, #0]
10007528:	68ba      	ldr	r2, [r7, #8]
1000752a:	429a      	cmp	r2, r3
1000752c:	d208      	bcs.n	10007540 <rpmsg_get_address+0x38>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
1000752e:	68bb      	ldr	r3, [r7, #8]
10007530:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
10007534:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
10007536:	68bb      	ldr	r3, [r7, #8]
10007538:	4619      	mov	r1, r3
1000753a:	6878      	ldr	r0, [r7, #4]
1000753c:	f7ff ff3a 	bl	100073b4 <metal_bitmap_set_bit>
	}

	return addr;
10007540:	68fb      	ldr	r3, [r7, #12]
}
10007542:	4618      	mov	r0, r3
10007544:	3710      	adds	r7, #16
10007546:	46bd      	mov	sp, r7
10007548:	bd80      	pop	{r7, pc}

1000754a <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
1000754a:	b580      	push	{r7, lr}
1000754c:	b084      	sub	sp, #16
1000754e:	af00      	add	r7, sp, #0
10007550:	60f8      	str	r0, [r7, #12]
10007552:	60b9      	str	r1, [r7, #8]
10007554:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007556:	687b      	ldr	r3, [r7, #4]
10007558:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
1000755c:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
1000755e:	687b      	ldr	r3, [r7, #4]
10007560:	2b00      	cmp	r3, #0
10007562:	db07      	blt.n	10007574 <rpmsg_release_address+0x2a>
10007564:	687a      	ldr	r2, [r7, #4]
10007566:	68bb      	ldr	r3, [r7, #8]
10007568:	429a      	cmp	r2, r3
1000756a:	da03      	bge.n	10007574 <rpmsg_release_address+0x2a>
		metal_bitmap_clear_bit(bitmap, addr);
1000756c:	6879      	ldr	r1, [r7, #4]
1000756e:	68f8      	ldr	r0, [r7, #12]
10007570:	f7ff ff59 	bl	10007426 <metal_bitmap_clear_bit>
}
10007574:	bf00      	nop
10007576:	3710      	adds	r7, #16
10007578:	46bd      	mov	sp, r7
1000757a:	bd80      	pop	{r7, pc}

1000757c <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
1000757c:	b580      	push	{r7, lr}
1000757e:	b084      	sub	sp, #16
10007580:	af00      	add	r7, sp, #0
10007582:	60f8      	str	r0, [r7, #12]
10007584:	60b9      	str	r1, [r7, #8]
10007586:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007588:	687b      	ldr	r3, [r7, #4]
1000758a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
1000758e:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10007590:	687b      	ldr	r3, [r7, #4]
10007592:	2b00      	cmp	r3, #0
10007594:	db09      	blt.n	100075aa <rpmsg_is_address_set+0x2e>
10007596:	687a      	ldr	r2, [r7, #4]
10007598:	68bb      	ldr	r3, [r7, #8]
1000759a:	429a      	cmp	r2, r3
1000759c:	da05      	bge.n	100075aa <rpmsg_is_address_set+0x2e>
		return metal_bitmap_is_bit_set(bitmap, addr);
1000759e:	6879      	ldr	r1, [r7, #4]
100075a0:	68f8      	ldr	r0, [r7, #12]
100075a2:	f7ff ff23 	bl	100073ec <metal_bitmap_is_bit_set>
100075a6:	4603      	mov	r3, r0
100075a8:	e000      	b.n	100075ac <rpmsg_is_address_set+0x30>
	else
		return RPMSG_ERR_PARAM;
100075aa:	4b02      	ldr	r3, [pc, #8]	@ (100075b4 <rpmsg_is_address_set+0x38>)
}
100075ac:	4618      	mov	r0, r3
100075ae:	3710      	adds	r7, #16
100075b0:	46bd      	mov	sp, r7
100075b2:	bd80      	pop	{r7, pc}
100075b4:	fffff82d 	.word	0xfffff82d

100075b8 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
100075b8:	b580      	push	{r7, lr}
100075ba:	b084      	sub	sp, #16
100075bc:	af00      	add	r7, sp, #0
100075be:	60f8      	str	r0, [r7, #12]
100075c0:	60b9      	str	r1, [r7, #8]
100075c2:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
100075c4:	687b      	ldr	r3, [r7, #4]
100075c6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
100075ca:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size) {
100075cc:	687b      	ldr	r3, [r7, #4]
100075ce:	2b00      	cmp	r3, #0
100075d0:	db09      	blt.n	100075e6 <rpmsg_set_address+0x2e>
100075d2:	687a      	ldr	r2, [r7, #4]
100075d4:	68bb      	ldr	r3, [r7, #8]
100075d6:	429a      	cmp	r2, r3
100075d8:	da05      	bge.n	100075e6 <rpmsg_set_address+0x2e>
		metal_bitmap_set_bit(bitmap, addr);
100075da:	6879      	ldr	r1, [r7, #4]
100075dc:	68f8      	ldr	r0, [r7, #12]
100075de:	f7ff fee9 	bl	100073b4 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
100075e2:	2300      	movs	r3, #0
100075e4:	e000      	b.n	100075e8 <rpmsg_set_address+0x30>
	} else {
		return RPMSG_ERR_PARAM;
100075e6:	4b02      	ldr	r3, [pc, #8]	@ (100075f0 <rpmsg_set_address+0x38>)
	}
}
100075e8:	4618      	mov	r0, r3
100075ea:	3710      	adds	r7, #16
100075ec:	46bd      	mov	sp, r7
100075ee:	bd80      	pop	{r7, pc}
100075f0:	fffff82d 	.word	0xfffff82d

100075f4 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
100075f4:	b590      	push	{r4, r7, lr}
100075f6:	b089      	sub	sp, #36	@ 0x24
100075f8:	af02      	add	r7, sp, #8
100075fa:	60f8      	str	r0, [r7, #12]
100075fc:	60b9      	str	r1, [r7, #8]
100075fe:	607a      	str	r2, [r7, #4]
10007600:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
10007602:	68fb      	ldr	r3, [r7, #12]
10007604:	2b00      	cmp	r3, #0
10007606:	d00a      	beq.n	1000761e <rpmsg_send_offchannel_raw+0x2a>
10007608:	68fb      	ldr	r3, [r7, #12]
1000760a:	6a1b      	ldr	r3, [r3, #32]
1000760c:	2b00      	cmp	r3, #0
1000760e:	d006      	beq.n	1000761e <rpmsg_send_offchannel_raw+0x2a>
10007610:	683b      	ldr	r3, [r7, #0]
10007612:	2b00      	cmp	r3, #0
10007614:	d003      	beq.n	1000761e <rpmsg_send_offchannel_raw+0x2a>
10007616:	687b      	ldr	r3, [r7, #4]
10007618:	f1b3 3fff 	cmp.w	r3, #4294967295
1000761c:	d101      	bne.n	10007622 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
1000761e:	4b0d      	ldr	r3, [pc, #52]	@ (10007654 <rpmsg_send_offchannel_raw+0x60>)
10007620:	e014      	b.n	1000764c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
10007622:	68fb      	ldr	r3, [r7, #12]
10007624:	6a1b      	ldr	r3, [r3, #32]
10007626:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
10007628:	697b      	ldr	r3, [r7, #20]
1000762a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1000762c:	2b00      	cmp	r3, #0
1000762e:	d00c      	beq.n	1000764a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
10007630:	697b      	ldr	r3, [r7, #20]
10007632:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
10007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007636:	9301      	str	r3, [sp, #4]
10007638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000763a:	9300      	str	r3, [sp, #0]
1000763c:	683b      	ldr	r3, [r7, #0]
1000763e:	687a      	ldr	r2, [r7, #4]
10007640:	68b9      	ldr	r1, [r7, #8]
10007642:	6978      	ldr	r0, [r7, #20]
10007644:	47a0      	blx	r4
10007646:	4603      	mov	r3, r0
10007648:	e000      	b.n	1000764c <rpmsg_send_offchannel_raw+0x58>
						     len, wait);

	return RPMSG_ERR_PARAM;
1000764a:	4b02      	ldr	r3, [pc, #8]	@ (10007654 <rpmsg_send_offchannel_raw+0x60>)
}
1000764c:	4618      	mov	r0, r3
1000764e:	371c      	adds	r7, #28
10007650:	46bd      	mov	sp, r7
10007652:	bd90      	pop	{r4, r7, pc}
10007654:	fffff82d 	.word	0xfffff82d

10007658 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
10007658:	b580      	push	{r7, lr}
1000765a:	b090      	sub	sp, #64	@ 0x40
1000765c:	af02      	add	r7, sp, #8
1000765e:	6078      	str	r0, [r7, #4]
10007660:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
10007662:	683b      	ldr	r3, [r7, #0]
10007664:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
10007666:	687b      	ldr	r3, [r7, #4]
10007668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000766a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
1000766c:	6879      	ldr	r1, [r7, #4]
1000766e:	f107 030c 	add.w	r3, r7, #12
10007672:	2220      	movs	r2, #32
10007674:	4618      	mov	r0, r3
10007676:	f001 fe65 	bl	10009344 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
1000767a:	687b      	ldr	r3, [r7, #4]
1000767c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1000767e:	f107 030c 	add.w	r3, r7, #12
10007682:	2201      	movs	r2, #1
10007684:	9201      	str	r2, [sp, #4]
10007686:	2228      	movs	r2, #40	@ 0x28
10007688:	9200      	str	r2, [sp, #0]
1000768a:	2235      	movs	r2, #53	@ 0x35
1000768c:	6878      	ldr	r0, [r7, #4]
1000768e:	f7ff ffb1 	bl	100075f4 <rpmsg_send_offchannel_raw>
10007692:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
10007694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007696:	2b00      	cmp	r3, #0
10007698:	da01      	bge.n	1000769e <rpmsg_send_ns_message+0x46>
		return ret;
1000769a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000769c:	e000      	b.n	100076a0 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
1000769e:	2300      	movs	r3, #0
}
100076a0:	4618      	mov	r0, r3
100076a2:	3738      	adds	r7, #56	@ 0x38
100076a4:	46bd      	mov	sp, r7
100076a6:	bd80      	pop	{r7, pc}

100076a8 <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
100076a8:	b580      	push	{r7, lr}
100076aa:	b088      	sub	sp, #32
100076ac:	af00      	add	r7, sp, #0
100076ae:	60f8      	str	r0, [r7, #12]
100076b0:	60b9      	str	r1, [r7, #8]
100076b2:	607a      	str	r2, [r7, #4]
100076b4:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
100076b6:	68fb      	ldr	r3, [r7, #12]
100076b8:	681b      	ldr	r3, [r3, #0]
100076ba:	61fb      	str	r3, [r7, #28]
100076bc:	e04b      	b.n	10007756 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
100076be:	2300      	movs	r3, #0
100076c0:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
100076c2:	69fb      	ldr	r3, [r7, #28]
100076c4:	3b34      	subs	r3, #52	@ 0x34
100076c6:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
100076c8:	687b      	ldr	r3, [r7, #4]
100076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
100076ce:	d006      	beq.n	100076de <rpmsg_get_endpoint+0x36>
100076d0:	697b      	ldr	r3, [r7, #20]
100076d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100076d4:	687a      	ldr	r2, [r7, #4]
100076d6:	429a      	cmp	r2, r3
100076d8:	d101      	bne.n	100076de <rpmsg_get_endpoint+0x36>
			return ept;
100076da:	697b      	ldr	r3, [r7, #20]
100076dc:	e040      	b.n	10007760 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
100076de:	697b      	ldr	r3, [r7, #20]
100076e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100076e2:	687a      	ldr	r2, [r7, #4]
100076e4:	429a      	cmp	r2, r3
100076e6:	d106      	bne.n	100076f6 <rpmsg_get_endpoint+0x4e>
100076e8:	697b      	ldr	r3, [r7, #20]
100076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100076ec:	683a      	ldr	r2, [r7, #0]
100076ee:	429a      	cmp	r2, r3
100076f0:	d101      	bne.n	100076f6 <rpmsg_get_endpoint+0x4e>
			return ept;
100076f2:	697b      	ldr	r3, [r7, #20]
100076f4:	e034      	b.n	10007760 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
100076f6:	68bb      	ldr	r3, [r7, #8]
100076f8:	2b00      	cmp	r3, #0
100076fa:	d00c      	beq.n	10007716 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
100076fc:	697b      	ldr	r3, [r7, #20]
100076fe:	2220      	movs	r2, #32
10007700:	68b9      	ldr	r1, [r7, #8]
10007702:	4618      	mov	r0, r3
10007704:	f001 fe0c 	bl	10009320 <strncmp>
10007708:	4603      	mov	r3, r0
1000770a:	2b00      	cmp	r3, #0
1000770c:	bf0c      	ite	eq
1000770e:	2301      	moveq	r3, #1
10007710:	2300      	movne	r3, #0
10007712:	b2db      	uxtb	r3, r3
10007714:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
10007716:	68bb      	ldr	r3, [r7, #8]
10007718:	2b00      	cmp	r3, #0
1000771a:	d018      	beq.n	1000774e <rpmsg_get_endpoint+0xa6>
1000771c:	69bb      	ldr	r3, [r7, #24]
1000771e:	2b00      	cmp	r3, #0
10007720:	d015      	beq.n	1000774e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10007722:	683b      	ldr	r3, [r7, #0]
10007724:	f1b3 3fff 	cmp.w	r3, #4294967295
10007728:	d006      	beq.n	10007738 <rpmsg_get_endpoint+0x90>
1000772a:	697b      	ldr	r3, [r7, #20]
1000772c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000772e:	683a      	ldr	r2, [r7, #0]
10007730:	429a      	cmp	r2, r3
10007732:	d101      	bne.n	10007738 <rpmsg_get_endpoint+0x90>
			return ept;
10007734:	697b      	ldr	r3, [r7, #20]
10007736:	e013      	b.n	10007760 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
10007738:	687b      	ldr	r3, [r7, #4]
1000773a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000773e:	d107      	bne.n	10007750 <rpmsg_get_endpoint+0xa8>
10007740:	697b      	ldr	r3, [r7, #20]
10007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007744:	f1b3 3fff 	cmp.w	r3, #4294967295
10007748:	d102      	bne.n	10007750 <rpmsg_get_endpoint+0xa8>
			return ept;
1000774a:	697b      	ldr	r3, [r7, #20]
1000774c:	e008      	b.n	10007760 <rpmsg_get_endpoint+0xb8>
			continue;
1000774e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
10007750:	69fb      	ldr	r3, [r7, #28]
10007752:	681b      	ldr	r3, [r3, #0]
10007754:	61fb      	str	r3, [r7, #28]
10007756:	68fb      	ldr	r3, [r7, #12]
10007758:	69fa      	ldr	r2, [r7, #28]
1000775a:	429a      	cmp	r2, r3
1000775c:	d1af      	bne.n	100076be <rpmsg_get_endpoint+0x16>
	}
	return NULL;
1000775e:	2300      	movs	r3, #0
}
10007760:	4618      	mov	r0, r3
10007762:	3720      	adds	r7, #32
10007764:	46bd      	mov	sp, r7
10007766:	bd80      	pop	{r7, pc}

10007768 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
10007768:	b580      	push	{r7, lr}
1000776a:	b084      	sub	sp, #16
1000776c:	af00      	add	r7, sp, #0
1000776e:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev = ept->rdev;
10007770:	687b      	ldr	r3, [r7, #4]
10007772:	6a1b      	ldr	r3, [r3, #32]
10007774:	60fb      	str	r3, [r7, #12]

	metal_mutex_acquire(&rdev->lock);
10007776:	68fb      	ldr	r3, [r7, #12]
10007778:	3358      	adds	r3, #88	@ 0x58
1000777a:	4618      	mov	r0, r3
1000777c:	f7ff fdc3 	bl	10007306 <metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
10007780:	687b      	ldr	r3, [r7, #4]
10007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007784:	f1b3 3fff 	cmp.w	r3, #4294967295
10007788:	d008      	beq.n	1000779c <rpmsg_unregister_endpoint+0x34>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
1000778a:	68fb      	ldr	r3, [r7, #12]
1000778c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
10007790:	687b      	ldr	r3, [r7, #4]
10007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007794:	461a      	mov	r2, r3
10007796:	2180      	movs	r1, #128	@ 0x80
10007798:	f7ff fed7 	bl	1000754a <rpmsg_release_address>
	metal_list_del(&ept->node);
1000779c:	687b      	ldr	r3, [r7, #4]
1000779e:	3334      	adds	r3, #52	@ 0x34
100077a0:	4618      	mov	r0, r3
100077a2:	f7ff fded 	bl	10007380 <metal_list_del>
	ept->rdev = NULL;
100077a6:	687b      	ldr	r3, [r7, #4]
100077a8:	2200      	movs	r2, #0
100077aa:	621a      	str	r2, [r3, #32]
	metal_mutex_release(&rdev->lock);
100077ac:	68fb      	ldr	r3, [r7, #12]
100077ae:	3358      	adds	r3, #88	@ 0x58
100077b0:	4618      	mov	r0, r3
100077b2:	f7ff fdb3 	bl	1000731c <metal_mutex_release>
}
100077b6:	bf00      	nop
100077b8:	3710      	adds	r7, #16
100077ba:	46bd      	mov	sp, r7
100077bc:	bd80      	pop	{r7, pc}

100077be <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
100077be:	b580      	push	{r7, lr}
100077c0:	b082      	sub	sp, #8
100077c2:	af00      	add	r7, sp, #0
100077c4:	6078      	str	r0, [r7, #4]
100077c6:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
100077c8:	683b      	ldr	r3, [r7, #0]
100077ca:	687a      	ldr	r2, [r7, #4]
100077cc:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
100077ce:	687a      	ldr	r2, [r7, #4]
100077d0:	683b      	ldr	r3, [r7, #0]
100077d2:	3334      	adds	r3, #52	@ 0x34
100077d4:	4619      	mov	r1, r3
100077d6:	4610      	mov	r0, r2
100077d8:	f7ff fdc5 	bl	10007366 <metal_list_add_tail>
}
100077dc:	bf00      	nop
100077de:	3708      	adds	r7, #8
100077e0:	46bd      	mov	sp, r7
100077e2:	bd80      	pop	{r7, pc}

100077e4 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
100077e4:	b580      	push	{r7, lr}
100077e6:	b088      	sub	sp, #32
100077e8:	af02      	add	r7, sp, #8
100077ea:	60f8      	str	r0, [r7, #12]
100077ec:	60b9      	str	r1, [r7, #8]
100077ee:	607a      	str	r2, [r7, #4]
100077f0:	603b      	str	r3, [r7, #0]
	int status = RPMSG_SUCCESS;
100077f2:	2300      	movs	r3, #0
100077f4:	617b      	str	r3, [r7, #20]
	uint32_t addr = src;
100077f6:	683b      	ldr	r3, [r7, #0]
100077f8:	613b      	str	r3, [r7, #16]

	if (!ept)
100077fa:	68fb      	ldr	r3, [r7, #12]
100077fc:	2b00      	cmp	r3, #0
100077fe:	d101      	bne.n	10007804 <rpmsg_create_ept+0x20>
		return RPMSG_ERR_PARAM;
10007800:	4b37      	ldr	r3, [pc, #220]	@ (100078e0 <rpmsg_create_ept+0xfc>)
10007802:	e068      	b.n	100078d6 <rpmsg_create_ept+0xf2>

	metal_mutex_acquire(&rdev->lock);
10007804:	68bb      	ldr	r3, [r7, #8]
10007806:	3358      	adds	r3, #88	@ 0x58
10007808:	4618      	mov	r0, r3
1000780a:	f7ff fd7c 	bl	10007306 <metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
1000780e:	683b      	ldr	r3, [r7, #0]
10007810:	f1b3 3fff 	cmp.w	r3, #4294967295
10007814:	d10d      	bne.n	10007832 <rpmsg_create_ept+0x4e>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
10007816:	68bb      	ldr	r3, [r7, #8]
10007818:	3348      	adds	r3, #72	@ 0x48
1000781a:	2180      	movs	r1, #128	@ 0x80
1000781c:	4618      	mov	r0, r3
1000781e:	f7ff fe73 	bl	10007508 <rpmsg_get_address>
10007822:	6138      	str	r0, [r7, #16]
		if (addr == RPMSG_ADDR_ANY) {
10007824:	693b      	ldr	r3, [r7, #16]
10007826:	f1b3 3fff 	cmp.w	r3, #4294967295
1000782a:	d11f      	bne.n	1000786c <rpmsg_create_ept+0x88>
			status = RPMSG_ERR_ADDR;
1000782c:	4b2d      	ldr	r3, [pc, #180]	@ (100078e4 <rpmsg_create_ept+0x100>)
1000782e:	617b      	str	r3, [r7, #20]
			goto ret_status;
10007830:	e04b      	b.n	100078ca <rpmsg_create_ept+0xe6>
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
10007832:	683b      	ldr	r3, [r7, #0]
10007834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
10007838:	d318      	bcc.n	1000786c <rpmsg_create_ept+0x88>
		status = rpmsg_is_address_set(rdev->bitmap,
1000783a:	68bb      	ldr	r3, [r7, #8]
1000783c:	3348      	adds	r3, #72	@ 0x48
1000783e:	683a      	ldr	r2, [r7, #0]
10007840:	2180      	movs	r1, #128	@ 0x80
10007842:	4618      	mov	r0, r3
10007844:	f7ff fe9a 	bl	1000757c <rpmsg_is_address_set>
10007848:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
1000784a:	697b      	ldr	r3, [r7, #20]
1000784c:	2b00      	cmp	r3, #0
1000784e:	d107      	bne.n	10007860 <rpmsg_create_ept+0x7c>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007850:	68bb      	ldr	r3, [r7, #8]
10007852:	3348      	adds	r3, #72	@ 0x48
10007854:	683a      	ldr	r2, [r7, #0]
10007856:	2180      	movs	r1, #128	@ 0x80
10007858:	4618      	mov	r0, r3
1000785a:	f7ff fead 	bl	100075b8 <rpmsg_set_address>
1000785e:	e005      	b.n	1000786c <rpmsg_create_ept+0x88>
					  src);
		} else if (status > 0) {
10007860:	697b      	ldr	r3, [r7, #20]
10007862:	2b00      	cmp	r3, #0
10007864:	dd30      	ble.n	100078c8 <rpmsg_create_ept+0xe4>
			status = RPMSG_ERR_ADDR;
10007866:	4b1f      	ldr	r3, [pc, #124]	@ (100078e4 <rpmsg_create_ept+0x100>)
10007868:	617b      	str	r3, [r7, #20]
			goto ret_status;
1000786a:	e02e      	b.n	100078ca <rpmsg_create_ept+0xe6>
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
1000786c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000786e:	9301      	str	r3, [sp, #4]
10007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007872:	9300      	str	r3, [sp, #0]
10007874:	6a3b      	ldr	r3, [r7, #32]
10007876:	693a      	ldr	r2, [r7, #16]
10007878:	6879      	ldr	r1, [r7, #4]
1000787a:	68f8      	ldr	r0, [r7, #12]
1000787c:	f7ff fe20 	bl	100074c0 <rpmsg_initialize_ept>
	rpmsg_register_endpoint(rdev, ept);
10007880:	68f9      	ldr	r1, [r7, #12]
10007882:	68b8      	ldr	r0, [r7, #8]
10007884:	f7ff ff9b 	bl	100077be <rpmsg_register_endpoint>
	metal_mutex_release(&rdev->lock);
10007888:	68bb      	ldr	r3, [r7, #8]
1000788a:	3358      	adds	r3, #88	@ 0x58
1000788c:	4618      	mov	r0, r3
1000788e:	f7ff fd45 	bl	1000731c <metal_mutex_release>

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
10007892:	68fb      	ldr	r3, [r7, #12]
10007894:	781b      	ldrb	r3, [r3, #0]
10007896:	2b00      	cmp	r3, #0
10007898:	d00e      	beq.n	100078b8 <rpmsg_create_ept+0xd4>
1000789a:	68bb      	ldr	r3, [r7, #8]
1000789c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
100078a0:	2b00      	cmp	r3, #0
100078a2:	d009      	beq.n	100078b8 <rpmsg_create_ept+0xd4>
	    ept->dest_addr == RPMSG_ADDR_ANY)
100078a4:	68fb      	ldr	r3, [r7, #12]
100078a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	if (ept->name[0] && rdev->support_ns &&
100078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
100078ac:	d104      	bne.n	100078b8 <rpmsg_create_ept+0xd4>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
100078ae:	2100      	movs	r1, #0
100078b0:	68f8      	ldr	r0, [r7, #12]
100078b2:	f7ff fed1 	bl	10007658 <rpmsg_send_ns_message>
100078b6:	6178      	str	r0, [r7, #20]

	if (status)
100078b8:	697b      	ldr	r3, [r7, #20]
100078ba:	2b00      	cmp	r3, #0
100078bc:	d002      	beq.n	100078c4 <rpmsg_create_ept+0xe0>
		rpmsg_unregister_endpoint(ept);
100078be:	68f8      	ldr	r0, [r7, #12]
100078c0:	f7ff ff52 	bl	10007768 <rpmsg_unregister_endpoint>
	return status;
100078c4:	697b      	ldr	r3, [r7, #20]
100078c6:	e006      	b.n	100078d6 <rpmsg_create_ept+0xf2>
			goto ret_status;
100078c8:	bf00      	nop

ret_status:
	metal_mutex_release(&rdev->lock);
100078ca:	68bb      	ldr	r3, [r7, #8]
100078cc:	3358      	adds	r3, #88	@ 0x58
100078ce:	4618      	mov	r0, r3
100078d0:	f7ff fd24 	bl	1000731c <metal_mutex_release>
	return status;
100078d4:	697b      	ldr	r3, [r7, #20]
}
100078d6:	4618      	mov	r0, r3
100078d8:	3718      	adds	r7, #24
100078da:	46bd      	mov	sp, r7
100078dc:	bd80      	pop	{r7, pc}
100078de:	bf00      	nop
100078e0:	fffff82d 	.word	0xfffff82d
100078e4:	fffff829 	.word	0xfffff829

100078e8 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
100078e8:	b480      	push	{r7}
100078ea:	b083      	sub	sp, #12
100078ec:	af00      	add	r7, sp, #0
100078ee:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
100078f0:	2300      	movs	r3, #0
}
100078f2:	4618      	mov	r0, r3
100078f4:	370c      	adds	r7, #12
100078f6:	46bd      	mov	sp, r7
100078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
100078fc:	4770      	bx	lr

100078fe <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
100078fe:	b580      	push	{r7, lr}
10007900:	b082      	sub	sp, #8
10007902:	af00      	add	r7, sp, #0
10007904:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
10007906:	6878      	ldr	r0, [r7, #4]
10007908:	f7ff ffee 	bl	100078e8 <__metal_sleep_usec>
1000790c:	4603      	mov	r3, r0
}
1000790e:	4618      	mov	r0, r3
10007910:	3708      	adds	r7, #8
10007912:	46bd      	mov	sp, r7
10007914:	bd80      	pop	{r7, pc}

10007916 <metal_list_init>:
{
10007916:	b480      	push	{r7}
10007918:	b083      	sub	sp, #12
1000791a:	af00      	add	r7, sp, #0
1000791c:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000791e:	687b      	ldr	r3, [r7, #4]
10007920:	687a      	ldr	r2, [r7, #4]
10007922:	605a      	str	r2, [r3, #4]
	list->next = list;
10007924:	687b      	ldr	r3, [r7, #4]
10007926:	687a      	ldr	r2, [r7, #4]
10007928:	601a      	str	r2, [r3, #0]
}
1000792a:	bf00      	nop
1000792c:	370c      	adds	r7, #12
1000792e:	46bd      	mov	sp, r7
10007930:	f85d 7b04 	ldr.w	r7, [sp], #4
10007934:	4770      	bx	lr

10007936 <metal_io_virt_to_offset>:
{
10007936:	b480      	push	{r7}
10007938:	b085      	sub	sp, #20
1000793a:	af00      	add	r7, sp, #0
1000793c:	6078      	str	r0, [r7, #4]
1000793e:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10007940:	683b      	ldr	r3, [r7, #0]
10007942:	687a      	ldr	r2, [r7, #4]
10007944:	6812      	ldr	r2, [r2, #0]
10007946:	1a9b      	subs	r3, r3, r2
10007948:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000794a:	687b      	ldr	r3, [r7, #4]
1000794c:	689b      	ldr	r3, [r3, #8]
1000794e:	68fa      	ldr	r2, [r7, #12]
10007950:	429a      	cmp	r2, r3
10007952:	d201      	bcs.n	10007958 <metal_io_virt_to_offset+0x22>
10007954:	68fb      	ldr	r3, [r7, #12]
10007956:	e001      	b.n	1000795c <metal_io_virt_to_offset+0x26>
10007958:	f04f 33ff 	mov.w	r3, #4294967295
}
1000795c:	4618      	mov	r0, r3
1000795e:	3714      	adds	r7, #20
10007960:	46bd      	mov	sp, r7
10007962:	f85d 7b04 	ldr.w	r7, [sp], #4
10007966:	4770      	bx	lr

10007968 <__metal_mutex_init>:
{
10007968:	b480      	push	{r7}
1000796a:	b085      	sub	sp, #20
1000796c:	af00      	add	r7, sp, #0
1000796e:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10007970:	687b      	ldr	r3, [r7, #4]
10007972:	60fb      	str	r3, [r7, #12]
10007974:	2300      	movs	r3, #0
10007976:	60bb      	str	r3, [r7, #8]
10007978:	68bb      	ldr	r3, [r7, #8]
1000797a:	461a      	mov	r2, r3
1000797c:	68fb      	ldr	r3, [r7, #12]
1000797e:	f3bf 8f5b 	dmb	ish
10007982:	601a      	str	r2, [r3, #0]
10007984:	f3bf 8f5b 	dmb	ish
}
10007988:	bf00      	nop
1000798a:	3714      	adds	r7, #20
1000798c:	46bd      	mov	sp, r7
1000798e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007992:	4770      	bx	lr

10007994 <__metal_mutex_acquire>:
{
10007994:	b490      	push	{r4, r7}
10007996:	b086      	sub	sp, #24
10007998:	af00      	add	r7, sp, #0
1000799a:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000799c:	2300      	movs	r3, #0
1000799e:	613b      	str	r3, [r7, #16]
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
100079a0:	bf00      	nop
100079a2:	687b      	ldr	r3, [r7, #4]
100079a4:	617b      	str	r3, [r7, #20]
100079a6:	2301      	movs	r3, #1
100079a8:	60fb      	str	r3, [r7, #12]
100079aa:	68fb      	ldr	r3, [r7, #12]
100079ac:	461c      	mov	r4, r3
100079ae:	697a      	ldr	r2, [r7, #20]
100079b0:	f107 0310 	add.w	r3, r7, #16
100079b4:	6818      	ldr	r0, [r3, #0]
100079b6:	f3bf 8f5b 	dmb	ish
100079ba:	e852 1f00 	ldrex	r1, [r2]
100079be:	4281      	cmp	r1, r0
100079c0:	d103      	bne.n	100079ca <__metal_mutex_acquire+0x36>
100079c2:	e842 4c00 	strex	ip, r4, [r2]
100079c6:	f1bc 0f00 	cmp.w	ip, #0
100079ca:	f3bf 8f5b 	dmb	ish
100079ce:	bf0c      	ite	eq
100079d0:	2201      	moveq	r2, #1
100079d2:	2200      	movne	r2, #0
100079d4:	2a00      	cmp	r2, #0
100079d6:	d100      	bne.n	100079da <__metal_mutex_acquire+0x46>
100079d8:	6019      	str	r1, [r3, #0]
100079da:	4613      	mov	r3, r2
100079dc:	f083 0301 	eor.w	r3, r3, #1
100079e0:	b2db      	uxtb	r3, r3
100079e2:	2b00      	cmp	r3, #0
100079e4:	d1dd      	bne.n	100079a2 <__metal_mutex_acquire+0xe>
}
100079e6:	bf00      	nop
100079e8:	bf00      	nop
100079ea:	3718      	adds	r7, #24
100079ec:	46bd      	mov	sp, r7
100079ee:	bc90      	pop	{r4, r7}
100079f0:	4770      	bx	lr

100079f2 <__metal_mutex_release>:
{
100079f2:	b480      	push	{r7}
100079f4:	b085      	sub	sp, #20
100079f6:	af00      	add	r7, sp, #0
100079f8:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100079fa:	687b      	ldr	r3, [r7, #4]
100079fc:	60fb      	str	r3, [r7, #12]
100079fe:	2300      	movs	r3, #0
10007a00:	60bb      	str	r3, [r7, #8]
10007a02:	68bb      	ldr	r3, [r7, #8]
10007a04:	461a      	mov	r2, r3
10007a06:	68fb      	ldr	r3, [r7, #12]
10007a08:	f3bf 8f5b 	dmb	ish
10007a0c:	601a      	str	r2, [r3, #0]
10007a0e:	f3bf 8f5b 	dmb	ish
}
10007a12:	bf00      	nop
10007a14:	3714      	adds	r7, #20
10007a16:	46bd      	mov	sp, r7
10007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
10007a1c:	4770      	bx	lr

10007a1e <metal_mutex_init>:
{
10007a1e:	b580      	push	{r7, lr}
10007a20:	b082      	sub	sp, #8
10007a22:	af00      	add	r7, sp, #0
10007a24:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
10007a26:	6878      	ldr	r0, [r7, #4]
10007a28:	f7ff ff9e 	bl	10007968 <__metal_mutex_init>
}
10007a2c:	bf00      	nop
10007a2e:	3708      	adds	r7, #8
10007a30:	46bd      	mov	sp, r7
10007a32:	bd80      	pop	{r7, pc}

10007a34 <metal_mutex_acquire>:
{
10007a34:	b580      	push	{r7, lr}
10007a36:	b082      	sub	sp, #8
10007a38:	af00      	add	r7, sp, #0
10007a3a:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
10007a3c:	6878      	ldr	r0, [r7, #4]
10007a3e:	f7ff ffa9 	bl	10007994 <__metal_mutex_acquire>
}
10007a42:	bf00      	nop
10007a44:	3708      	adds	r7, #8
10007a46:	46bd      	mov	sp, r7
10007a48:	bd80      	pop	{r7, pc}

10007a4a <metal_mutex_release>:
{
10007a4a:	b580      	push	{r7, lr}
10007a4c:	b082      	sub	sp, #8
10007a4e:	af00      	add	r7, sp, #0
10007a50:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10007a52:	6878      	ldr	r0, [r7, #4]
10007a54:	f7ff ffcd 	bl	100079f2 <__metal_mutex_release>
}
10007a58:	bf00      	nop
10007a5a:	3708      	adds	r7, #8
10007a5c:	46bd      	mov	sp, r7
10007a5e:	bd80      	pop	{r7, pc}

10007a60 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
10007a60:	b480      	push	{r7}
10007a62:	b083      	sub	sp, #12
10007a64:	af00      	add	r7, sp, #0
10007a66:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
10007a68:	687b      	ldr	r3, [r7, #4]
10007a6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10007a6c:	699b      	ldr	r3, [r3, #24]
}
10007a6e:	4618      	mov	r0, r3
10007a70:	370c      	adds	r7, #12
10007a72:	46bd      	mov	sp, r7
10007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
10007a78:	4770      	bx	lr

10007a7a <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
10007a7a:	b580      	push	{r7, lr}
10007a7c:	b082      	sub	sp, #8
10007a7e:	af00      	add	r7, sp, #0
10007a80:	6078      	str	r0, [r7, #4]
10007a82:	460b      	mov	r3, r1
10007a84:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
10007a86:	687b      	ldr	r3, [r7, #4]
10007a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10007a8a:	6a1b      	ldr	r3, [r3, #32]
10007a8c:	685b      	ldr	r3, [r3, #4]
10007a8e:	687a      	ldr	r2, [r7, #4]
10007a90:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10007a92:	78f9      	ldrb	r1, [r7, #3]
10007a94:	4610      	mov	r0, r2
10007a96:	4798      	blx	r3
}
10007a98:	bf00      	nop
10007a9a:	3708      	adds	r7, #8
10007a9c:	46bd      	mov	sp, r7
10007a9e:	bd80      	pop	{r7, pc}

10007aa0 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
10007aa0:	b580      	push	{r7, lr}
10007aa2:	b082      	sub	sp, #8
10007aa4:	af00      	add	r7, sp, #0
10007aa6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
10007aa8:	687b      	ldr	r3, [r7, #4]
10007aaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10007aac:	6a1b      	ldr	r3, [r3, #32]
10007aae:	681b      	ldr	r3, [r3, #0]
10007ab0:	687a      	ldr	r2, [r7, #4]
10007ab2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10007ab4:	4610      	mov	r0, r2
10007ab6:	4798      	blx	r3
10007ab8:	4603      	mov	r3, r0
}
10007aba:	4618      	mov	r0, r3
10007abc:	3708      	adds	r7, #8
10007abe:	46bd      	mov	sp, r7
10007ac0:	bd80      	pop	{r7, pc}

10007ac2 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
10007ac2:	b580      	push	{r7, lr}
10007ac4:	b082      	sub	sp, #8
10007ac6:	af00      	add	r7, sp, #0
10007ac8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
10007aca:	687b      	ldr	r3, [r7, #4]
10007acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10007ace:	6a1b      	ldr	r3, [r3, #32]
10007ad0:	689b      	ldr	r3, [r3, #8]
10007ad2:	687a      	ldr	r2, [r7, #4]
10007ad4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10007ad6:	4610      	mov	r0, r2
10007ad8:	4798      	blx	r3
10007ada:	4603      	mov	r3, r0
}
10007adc:	4618      	mov	r0, r3
10007ade:	3708      	adds	r7, #8
10007ae0:	46bd      	mov	sp, r7
10007ae2:	bd80      	pop	{r7, pc}

10007ae4 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
10007ae4:	b580      	push	{r7, lr}
10007ae6:	b086      	sub	sp, #24
10007ae8:	af02      	add	r7, sp, #8
10007aea:	60f8      	str	r0, [r7, #12]
10007aec:	60b9      	str	r1, [r7, #8]
10007aee:	607a      	str	r2, [r7, #4]
10007af0:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
10007af2:	68fb      	ldr	r3, [r7, #12]
10007af4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
10007af6:	68b9      	ldr	r1, [r7, #8]
10007af8:	69bb      	ldr	r3, [r7, #24]
10007afa:	9300      	str	r3, [sp, #0]
10007afc:	683b      	ldr	r3, [r7, #0]
10007afe:	687a      	ldr	r2, [r7, #4]
10007b00:	f000 fcb4 	bl	1000846c <virtio_create_virtqueues>
10007b04:	4603      	mov	r3, r0
					callbacks);
}
10007b06:	4618      	mov	r0, r3
10007b08:	3710      	adds	r7, #16
10007b0a:	46bd      	mov	sp, r7
10007b0c:	bd80      	pop	{r7, pc}
	...

10007b10 <rpmsg_initialize_ept>:
{
10007b10:	b580      	push	{r7, lr}
10007b12:	b084      	sub	sp, #16
10007b14:	af00      	add	r7, sp, #0
10007b16:	60f8      	str	r0, [r7, #12]
10007b18:	60b9      	str	r1, [r7, #8]
10007b1a:	607a      	str	r2, [r7, #4]
10007b1c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10007b1e:	68f8      	ldr	r0, [r7, #12]
10007b20:	68bb      	ldr	r3, [r7, #8]
10007b22:	2b00      	cmp	r3, #0
10007b24:	d001      	beq.n	10007b2a <rpmsg_initialize_ept+0x1a>
10007b26:	68bb      	ldr	r3, [r7, #8]
10007b28:	e000      	b.n	10007b2c <rpmsg_initialize_ept+0x1c>
10007b2a:	4b0a      	ldr	r3, [pc, #40]	@ (10007b54 <rpmsg_initialize_ept+0x44>)
10007b2c:	2220      	movs	r2, #32
10007b2e:	4619      	mov	r1, r3
10007b30:	f001 fc08 	bl	10009344 <strncpy>
	ept->addr = src;
10007b34:	68fb      	ldr	r3, [r7, #12]
10007b36:	687a      	ldr	r2, [r7, #4]
10007b38:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
10007b3a:	68fb      	ldr	r3, [r7, #12]
10007b3c:	683a      	ldr	r2, [r7, #0]
10007b3e:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
10007b40:	68fb      	ldr	r3, [r7, #12]
10007b42:	69ba      	ldr	r2, [r7, #24]
10007b44:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10007b46:	68fb      	ldr	r3, [r7, #12]
10007b48:	69fa      	ldr	r2, [r7, #28]
10007b4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
10007b4c:	bf00      	nop
10007b4e:	3710      	adds	r7, #16
10007b50:	46bd      	mov	sp, r7
10007b52:	bd80      	pop	{r7, pc}
10007b54:	1000a5c4 	.word	0x1000a5c4

10007b58 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
10007b58:	b580      	push	{r7, lr}
10007b5a:	b082      	sub	sp, #8
10007b5c:	af00      	add	r7, sp, #0
10007b5e:	6078      	str	r0, [r7, #4]
10007b60:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
10007b62:	f04f 33ff 	mov.w	r3, #4294967295
10007b66:	683a      	ldr	r2, [r7, #0]
10007b68:	2100      	movs	r1, #0
10007b6a:	6878      	ldr	r0, [r7, #4]
10007b6c:	f7ff fd9c 	bl	100076a8 <rpmsg_get_endpoint>
10007b70:	4603      	mov	r3, r0
}
10007b72:	4618      	mov	r0, r3
10007b74:	3708      	adds	r7, #8
10007b76:	46bd      	mov	sp, r7
10007b78:	bd80      	pop	{r7, pc}

10007b7a <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
10007b7a:	b480      	push	{r7}
10007b7c:	b085      	sub	sp, #20
10007b7e:	af00      	add	r7, sp, #0
10007b80:	60f8      	str	r0, [r7, #12]
10007b82:	60b9      	str	r1, [r7, #8]
10007b84:	607a      	str	r2, [r7, #4]
	if (!shpool)
10007b86:	68fb      	ldr	r3, [r7, #12]
10007b88:	2b00      	cmp	r3, #0
10007b8a:	d009      	beq.n	10007ba0 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
10007b8c:	68fb      	ldr	r3, [r7, #12]
10007b8e:	68ba      	ldr	r2, [r7, #8]
10007b90:	601a      	str	r2, [r3, #0]
	shpool->size = size;
10007b92:	68fb      	ldr	r3, [r7, #12]
10007b94:	687a      	ldr	r2, [r7, #4]
10007b96:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
10007b98:	68fb      	ldr	r3, [r7, #12]
10007b9a:	687a      	ldr	r2, [r7, #4]
10007b9c:	605a      	str	r2, [r3, #4]
10007b9e:	e000      	b.n	10007ba2 <rpmsg_virtio_init_shm_pool+0x28>
		return;
10007ba0:	bf00      	nop
}
10007ba2:	3714      	adds	r7, #20
10007ba4:	46bd      	mov	sp, r7
10007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
10007baa:	4770      	bx	lr

10007bac <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10007bac:	b580      	push	{r7, lr}
10007bae:	b086      	sub	sp, #24
10007bb0:	af00      	add	r7, sp, #0
10007bb2:	60f8      	str	r0, [r7, #12]
10007bb4:	60b9      	str	r1, [r7, #8]
10007bb6:	607a      	str	r2, [r7, #4]
10007bb8:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10007bba:	68f8      	ldr	r0, [r7, #12]
10007bbc:	f7ff ff50 	bl	10007a60 <rpmsg_virtio_get_role>
10007bc0:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10007bc2:	697b      	ldr	r3, [r7, #20]
10007bc4:	2b01      	cmp	r3, #1
10007bc6:	d106      	bne.n	10007bd6 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
10007bc8:	68fb      	ldr	r3, [r7, #12]
10007bca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10007bcc:	8879      	ldrh	r1, [r7, #2]
10007bce:	687a      	ldr	r2, [r7, #4]
10007bd0:	4618      	mov	r0, r3
10007bd2:	f000 fe1d 	bl	10008810 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
10007bd6:	bf00      	nop
10007bd8:	3718      	adds	r7, #24
10007bda:	46bd      	mov	sp, r7
10007bdc:	bd80      	pop	{r7, pc}

10007bde <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10007bde:	b580      	push	{r7, lr}
10007be0:	b086      	sub	sp, #24
10007be2:	af00      	add	r7, sp, #0
10007be4:	60f8      	str	r0, [r7, #12]
10007be6:	60b9      	str	r1, [r7, #8]
10007be8:	607a      	str	r2, [r7, #4]
10007bea:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10007bec:	68f8      	ldr	r0, [r7, #12]
10007bee:	f7ff ff37 	bl	10007a60 <rpmsg_virtio_get_role>
10007bf2:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10007bf4:	697b      	ldr	r3, [r7, #20]
10007bf6:	2b01      	cmp	r3, #1
10007bf8:	d109      	bne.n	10007c0e <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
10007bfa:	68fb      	ldr	r3, [r7, #12]
10007bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10007c00:	8879      	ldrh	r1, [r7, #2]
10007c02:	687a      	ldr	r2, [r7, #4]
10007c04:	4618      	mov	r0, r3
10007c06:	f000 fe03 	bl	10008810 <virtqueue_add_consumed_buffer>
10007c0a:	4603      	mov	r3, r0
10007c0c:	e000      	b.n	10007c10 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
10007c0e:	2300      	movs	r3, #0
}
10007c10:	4618      	mov	r0, r3
10007c12:	3718      	adds	r7, #24
10007c14:	46bd      	mov	sp, r7
10007c16:	bd80      	pop	{r7, pc}

10007c18 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10007c18:	b580      	push	{r7, lr}
10007c1a:	b086      	sub	sp, #24
10007c1c:	af00      	add	r7, sp, #0
10007c1e:	60f8      	str	r0, [r7, #12]
10007c20:	60b9      	str	r1, [r7, #8]
10007c22:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10007c24:	68f8      	ldr	r0, [r7, #12]
10007c26:	f7ff ff1b 	bl	10007a60 <rpmsg_virtio_get_role>
10007c2a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10007c2c:	2300      	movs	r3, #0
10007c2e:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10007c30:	693b      	ldr	r3, [r7, #16]
10007c32:	2b01      	cmp	r3, #1
10007c34:	d108      	bne.n	10007c48 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
10007c36:	68fb      	ldr	r3, [r7, #12]
10007c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10007c3c:	68ba      	ldr	r2, [r7, #8]
10007c3e:	6879      	ldr	r1, [r7, #4]
10007c40:	4618      	mov	r0, r3
10007c42:	f000 fd9d 	bl	10008780 <virtqueue_get_available_buffer>
10007c46:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
10007c48:	697b      	ldr	r3, [r7, #20]
}
10007c4a:	4618      	mov	r0, r3
10007c4c:	3718      	adds	r7, #24
10007c4e:	46bd      	mov	sp, r7
10007c50:	bd80      	pop	{r7, pc}

10007c52 <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10007c52:	b580      	push	{r7, lr}
10007c54:	b086      	sub	sp, #24
10007c56:	af00      	add	r7, sp, #0
10007c58:	60f8      	str	r0, [r7, #12]
10007c5a:	60b9      	str	r1, [r7, #8]
10007c5c:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10007c5e:	68f8      	ldr	r0, [r7, #12]
10007c60:	f7ff fefe 	bl	10007a60 <rpmsg_virtio_get_role>
10007c64:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10007c66:	2300      	movs	r3, #0
10007c68:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10007c6a:	693b      	ldr	r3, [r7, #16]
10007c6c:	2b01      	cmp	r3, #1
10007c6e:	d107      	bne.n	10007c80 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
10007c70:	68fb      	ldr	r3, [r7, #12]
10007c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10007c74:	68ba      	ldr	r2, [r7, #8]
10007c76:	6879      	ldr	r1, [r7, #4]
10007c78:	4618      	mov	r0, r3
10007c7a:	f000 fd81 	bl	10008780 <virtqueue_get_available_buffer>
10007c7e:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
10007c80:	697b      	ldr	r3, [r7, #20]
}
10007c82:	4618      	mov	r0, r3
10007c84:	3718      	adds	r7, #24
10007c86:	46bd      	mov	sp, r7
10007c88:	bd80      	pop	{r7, pc}

10007c8a <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
10007c8a:	b580      	push	{r7, lr}
10007c8c:	b084      	sub	sp, #16
10007c8e:	af00      	add	r7, sp, #0
10007c90:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
10007c92:	6878      	ldr	r0, [r7, #4]
10007c94:	f7ff ff04 	bl	10007aa0 <rpmsg_virtio_get_status>
10007c98:	4603      	mov	r3, r0
10007c9a:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
10007c9c:	7bfb      	ldrb	r3, [r7, #15]
10007c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10007ca2:	2b00      	cmp	r3, #0
10007ca4:	d004      	beq.n	10007cb0 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
10007ca6:	2100      	movs	r1, #0
10007ca8:	6878      	ldr	r0, [r7, #4]
10007caa:	f7ff fee6 	bl	10007a7a <rpmsg_virtio_set_status>
10007cae:	e7f0      	b.n	10007c92 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
10007cb0:	7bfb      	ldrb	r3, [r7, #15]
10007cb2:	f003 0304 	and.w	r3, r3, #4
10007cb6:	2b00      	cmp	r3, #0
10007cb8:	d0eb      	beq.n	10007c92 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
10007cba:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
10007cbc:	4618      	mov	r0, r3
10007cbe:	3710      	adds	r7, #16
10007cc0:	46bd      	mov	sp, r7
10007cc2:	bd80      	pop	{r7, pc}

10007cc4 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
10007cc4:	b480      	push	{r7}
10007cc6:	b085      	sub	sp, #20
10007cc8:	af00      	add	r7, sp, #0
10007cca:	6078      	str	r0, [r7, #4]
10007ccc:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10007cce:	683b      	ldr	r3, [r7, #0]
10007cd0:	3b10      	subs	r3, #16
10007cd2:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
10007cd4:	68fb      	ldr	r3, [r7, #12]
10007cd6:	689b      	ldr	r3, [r3, #8]
10007cd8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
10007cdc:	68fb      	ldr	r3, [r7, #12]
10007cde:	609a      	str	r2, [r3, #8]
}
10007ce0:	bf00      	nop
10007ce2:	3714      	adds	r7, #20
10007ce4:	46bd      	mov	sp, r7
10007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
10007cea:	4770      	bx	lr

10007cec <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
10007cec:	b580      	push	{r7, lr}
10007cee:	b086      	sub	sp, #24
10007cf0:	af00      	add	r7, sp, #0
10007cf2:	6078      	str	r0, [r7, #4]
10007cf4:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10007cf6:	687b      	ldr	r3, [r7, #4]
10007cf8:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10007cfa:	683b      	ldr	r3, [r7, #0]
10007cfc:	3b10      	subs	r3, #16
10007cfe:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
10007d00:	693b      	ldr	r3, [r7, #16]
10007d02:	689b      	ldr	r3, [r3, #8]
10007d04:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
10007d06:	687b      	ldr	r3, [r7, #4]
10007d08:	3358      	adds	r3, #88	@ 0x58
10007d0a:	4618      	mov	r0, r3
10007d0c:	f7ff fe92 	bl	10007a34 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
10007d10:	697b      	ldr	r3, [r7, #20]
10007d12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10007d14:	89fa      	ldrh	r2, [r7, #14]
10007d16:	4611      	mov	r1, r2
10007d18:	4618      	mov	r0, r3
10007d1a:	f000 fd1f 	bl	1000875c <virtqueue_get_buffer_length>
10007d1e:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10007d20:	89fb      	ldrh	r3, [r7, #14]
10007d22:	68ba      	ldr	r2, [r7, #8]
10007d24:	6939      	ldr	r1, [r7, #16]
10007d26:	6978      	ldr	r0, [r7, #20]
10007d28:	f7ff ff40 	bl	10007bac <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
10007d2c:	687b      	ldr	r3, [r7, #4]
10007d2e:	3358      	adds	r3, #88	@ 0x58
10007d30:	4618      	mov	r0, r3
10007d32:	f7ff fe8a 	bl	10007a4a <metal_mutex_release>
}
10007d36:	bf00      	nop
10007d38:	3718      	adds	r7, #24
10007d3a:	46bd      	mov	sp, r7
10007d3c:	bd80      	pop	{r7, pc}

10007d3e <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
10007d3e:	b580      	push	{r7, lr}
10007d40:	b08a      	sub	sp, #40	@ 0x28
10007d42:	af00      	add	r7, sp, #0
10007d44:	60f8      	str	r0, [r7, #12]
10007d46:	60b9      	str	r1, [r7, #8]
10007d48:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10007d4a:	68fb      	ldr	r3, [r7, #12]
10007d4c:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
10007d4e:	6a38      	ldr	r0, [r7, #32]
10007d50:	f7ff fea6 	bl	10007aa0 <rpmsg_virtio_get_status>
10007d54:	4603      	mov	r3, r0
10007d56:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
10007d58:	69fb      	ldr	r3, [r7, #28]
10007d5a:	f003 0304 	and.w	r3, r3, #4
10007d5e:	2b00      	cmp	r3, #0
10007d60:	d101      	bne.n	10007d66 <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
10007d62:	2300      	movs	r3, #0
10007d64:	e039      	b.n	10007dda <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
10007d66:	687b      	ldr	r3, [r7, #4]
10007d68:	2b00      	cmp	r3, #0
10007d6a:	d003      	beq.n	10007d74 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
10007d6c:	f643 2398 	movw	r3, #15000	@ 0x3a98
10007d70:	627b      	str	r3, [r7, #36]	@ 0x24
10007d72:	e001      	b.n	10007d78 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
10007d74:	2300      	movs	r3, #0
10007d76:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
10007d78:	68fb      	ldr	r3, [r7, #12]
10007d7a:	3358      	adds	r3, #88	@ 0x58
10007d7c:	4618      	mov	r0, r3
10007d7e:	f7ff fe59 	bl	10007a34 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
10007d82:	f107 0316 	add.w	r3, r7, #22
10007d86:	461a      	mov	r2, r3
10007d88:	68b9      	ldr	r1, [r7, #8]
10007d8a:	6a38      	ldr	r0, [r7, #32]
10007d8c:	f7ff ff44 	bl	10007c18 <rpmsg_virtio_get_tx_buffer>
10007d90:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
10007d92:	68fb      	ldr	r3, [r7, #12]
10007d94:	3358      	adds	r3, #88	@ 0x58
10007d96:	4618      	mov	r0, r3
10007d98:	f7ff fe57 	bl	10007a4a <metal_mutex_release>
		if (rp_hdr || !tick_count)
10007d9c:	69bb      	ldr	r3, [r7, #24]
10007d9e:	2b00      	cmp	r3, #0
10007da0:	d10a      	bne.n	10007db8 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
10007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007da4:	2b00      	cmp	r3, #0
10007da6:	d007      	beq.n	10007db8 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
10007da8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10007dac:	f7ff fda7 	bl	100078fe <metal_sleep_usec>
		tick_count--;
10007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007db2:	3b01      	subs	r3, #1
10007db4:	627b      	str	r3, [r7, #36]	@ 0x24
		metal_mutex_acquire(&rdev->lock);
10007db6:	e7df      	b.n	10007d78 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
10007db8:	69bb      	ldr	r3, [r7, #24]
10007dba:	2b00      	cmp	r3, #0
10007dbc:	d101      	bne.n	10007dc2 <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
10007dbe:	2300      	movs	r3, #0
10007dc0:	e00b      	b.n	10007dda <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
10007dc2:	8afb      	ldrh	r3, [r7, #22]
10007dc4:	461a      	mov	r2, r3
10007dc6:	69bb      	ldr	r3, [r7, #24]
10007dc8:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
10007dca:	68bb      	ldr	r3, [r7, #8]
10007dcc:	681b      	ldr	r3, [r3, #0]
10007dce:	f1a3 0210 	sub.w	r2, r3, #16
10007dd2:	68bb      	ldr	r3, [r7, #8]
10007dd4:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
10007dd6:	69bb      	ldr	r3, [r7, #24]
10007dd8:	3310      	adds	r3, #16
}
10007dda:	4618      	mov	r0, r3
10007ddc:	3728      	adds	r7, #40	@ 0x28
10007dde:	46bd      	mov	sp, r7
10007de0:	bd80      	pop	{r7, pc}
	...

10007de4 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
10007de4:	b580      	push	{r7, lr}
10007de6:	b08e      	sub	sp, #56	@ 0x38
10007de8:	af00      	add	r7, sp, #0
10007dea:	60f8      	str	r0, [r7, #12]
10007dec:	60b9      	str	r1, [r7, #8]
10007dee:	607a      	str	r2, [r7, #4]
10007df0:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10007df2:	68fb      	ldr	r3, [r7, #12]
10007df4:	637b      	str	r3, [r7, #52]	@ 0x34

	hdr = RPMSG_LOCATE_HDR(data);
10007df6:	683b      	ldr	r3, [r7, #0]
10007df8:	3b10      	subs	r3, #16
10007dfa:	633b      	str	r3, [r7, #48]	@ 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
10007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10007dfe:	689b      	ldr	r3, [r3, #8]
10007e00:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
10007e02:	687b      	ldr	r3, [r7, #4]
10007e04:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
10007e06:	68bb      	ldr	r3, [r7, #8]
10007e08:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
10007e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10007e0c:	b29b      	uxth	r3, r3
10007e0e:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
10007e10:	2300      	movs	r3, #0
10007e12:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
10007e14:	2300      	movs	r3, #0
10007e16:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
10007e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10007e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
10007e20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10007e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10007e24:	f7ff fd87 	bl	10007936 <metal_io_virt_to_offset>
10007e28:	4601      	mov	r1, r0
10007e2a:	f107 0210 	add.w	r2, r7, #16
10007e2e:	2310      	movs	r3, #16
10007e30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10007e32:	f7fe feb3 	bl	10006b9c <metal_io_block_write>
10007e36:	6278      	str	r0, [r7, #36]	@ 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
10007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007e3a:	2b10      	cmp	r3, #16
10007e3c:	d006      	beq.n	10007e4c <rpmsg_virtio_send_offchannel_nocopy+0x68>
10007e3e:	4b1b      	ldr	r3, [pc, #108]	@ (10007eac <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
10007e40:	4a1b      	ldr	r2, [pc, #108]	@ (10007eb0 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10007e42:	f240 117d 	movw	r1, #381	@ 0x17d
10007e46:	481b      	ldr	r0, [pc, #108]	@ (10007eb4 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10007e48:	f001 f832 	bl	10008eb0 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
10007e4c:	68fb      	ldr	r3, [r7, #12]
10007e4e:	3358      	adds	r3, #88	@ 0x58
10007e50:	4618      	mov	r0, r3
10007e52:	f7ff fdef 	bl	10007a34 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
10007e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10007e5c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
10007e5e:	4611      	mov	r1, r2
10007e60:	4618      	mov	r0, r3
10007e62:	f000 fc7b 	bl	1000875c <virtqueue_get_buffer_length>
10007e66:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
10007e68:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
10007e6a:	6a3a      	ldr	r2, [r7, #32]
10007e6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10007e6e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10007e70:	f7ff feb5 	bl	10007bde <rpmsg_virtio_enqueue_buffer>
10007e74:	6278      	str	r0, [r7, #36]	@ 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
10007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007e78:	2b00      	cmp	r3, #0
10007e7a:	d006      	beq.n	10007e8a <rpmsg_virtio_send_offchannel_nocopy+0xa6>
10007e7c:	4b0e      	ldr	r3, [pc, #56]	@ (10007eb8 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
10007e7e:	4a0c      	ldr	r2, [pc, #48]	@ (10007eb0 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10007e80:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
10007e84:	480b      	ldr	r0, [pc, #44]	@ (10007eb4 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10007e86:	f001 f813 	bl	10008eb0 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
10007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10007e90:	4618      	mov	r0, r3
10007e92:	f000 fd37 	bl	10008904 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
10007e96:	68fb      	ldr	r3, [r7, #12]
10007e98:	3358      	adds	r3, #88	@ 0x58
10007e9a:	4618      	mov	r0, r3
10007e9c:	f7ff fdd5 	bl	10007a4a <metal_mutex_release>

	return len;
10007ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
10007ea2:	4618      	mov	r0, r3
10007ea4:	3738      	adds	r7, #56	@ 0x38
10007ea6:	46bd      	mov	sp, r7
10007ea8:	bd80      	pop	{r7, pc}
10007eaa:	bf00      	nop
10007eac:	1000a5c8 	.word	0x1000a5c8
10007eb0:	1000a71c 	.word	0x1000a71c
10007eb4:	1000a5e4 	.word	0x1000a5e4
10007eb8:	1000a664 	.word	0x1000a664

10007ebc <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
10007ebc:	b580      	push	{r7, lr}
10007ebe:	b08c      	sub	sp, #48	@ 0x30
10007ec0:	af02      	add	r7, sp, #8
10007ec2:	60f8      	str	r0, [r7, #12]
10007ec4:	60b9      	str	r1, [r7, #8]
10007ec6:	607a      	str	r2, [r7, #4]
10007ec8:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10007eca:	68fb      	ldr	r3, [r7, #12]
10007ecc:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
10007ece:	f107 0314 	add.w	r3, r7, #20
10007ed2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007ed4:	4619      	mov	r1, r3
10007ed6:	68f8      	ldr	r0, [r7, #12]
10007ed8:	f7ff ff31 	bl	10007d3e <rpmsg_virtio_get_tx_payload_buffer>
10007edc:	6238      	str	r0, [r7, #32]
	if (!buffer)
10007ede:	6a3b      	ldr	r3, [r7, #32]
10007ee0:	2b00      	cmp	r3, #0
10007ee2:	d101      	bne.n	10007ee8 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
10007ee4:	4b17      	ldr	r3, [pc, #92]	@ (10007f44 <rpmsg_virtio_send_offchannel_raw+0x88>)
10007ee6:	e029      	b.n	10007f3c <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
10007ee8:	697b      	ldr	r3, [r7, #20]
10007eea:	461a      	mov	r2, r3
10007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10007eee:	4293      	cmp	r3, r2
10007ef0:	dd01      	ble.n	10007ef6 <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
10007ef2:	697b      	ldr	r3, [r7, #20]
10007ef4:	633b      	str	r3, [r7, #48]	@ 0x30
	io = rvdev->shbuf_io;
10007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10007efc:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
10007efe:	6a39      	ldr	r1, [r7, #32]
10007f00:	69f8      	ldr	r0, [r7, #28]
10007f02:	f7ff fd18 	bl	10007936 <metal_io_virt_to_offset>
10007f06:	4601      	mov	r1, r0
10007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10007f0a:	683a      	ldr	r2, [r7, #0]
10007f0c:	69f8      	ldr	r0, [r7, #28]
10007f0e:	f7fe fe45 	bl	10006b9c <metal_io_block_write>
10007f12:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10007f14:	69ba      	ldr	r2, [r7, #24]
10007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10007f18:	429a      	cmp	r2, r3
10007f1a:	d006      	beq.n	10007f2a <rpmsg_virtio_send_offchannel_raw+0x6e>
10007f1c:	4b0a      	ldr	r3, [pc, #40]	@ (10007f48 <rpmsg_virtio_send_offchannel_raw+0x8c>)
10007f1e:	4a0b      	ldr	r2, [pc, #44]	@ (10007f4c <rpmsg_virtio_send_offchannel_raw+0x90>)
10007f20:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
10007f24:	480a      	ldr	r0, [pc, #40]	@ (10007f50 <rpmsg_virtio_send_offchannel_raw+0x94>)
10007f26:	f000 ffc3 	bl	10008eb0 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
10007f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10007f2c:	9300      	str	r3, [sp, #0]
10007f2e:	6a3b      	ldr	r3, [r7, #32]
10007f30:	687a      	ldr	r2, [r7, #4]
10007f32:	68b9      	ldr	r1, [r7, #8]
10007f34:	68f8      	ldr	r0, [r7, #12]
10007f36:	f7ff ff55 	bl	10007de4 <rpmsg_virtio_send_offchannel_nocopy>
10007f3a:	4603      	mov	r3, r0
}
10007f3c:	4618      	mov	r0, r3
10007f3e:	3728      	adds	r7, #40	@ 0x28
10007f40:	46bd      	mov	sp, r7
10007f42:	bd80      	pop	{r7, pc}
10007f44:	fffff82e 	.word	0xfffff82e
10007f48:	1000a670 	.word	0x1000a670
10007f4c:	1000a740 	.word	0x1000a740
10007f50:	1000a5e4 	.word	0x1000a5e4

10007f54 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
10007f54:	b480      	push	{r7}
10007f56:	b083      	sub	sp, #12
10007f58:	af00      	add	r7, sp, #0
10007f5a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
10007f5c:	bf00      	nop
10007f5e:	370c      	adds	r7, #12
10007f60:	46bd      	mov	sp, r7
10007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
10007f66:	4770      	bx	lr

10007f68 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
10007f68:	b590      	push	{r4, r7, lr}
10007f6a:	b08d      	sub	sp, #52	@ 0x34
10007f6c:	af02      	add	r7, sp, #8
10007f6e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
10007f70:	687b      	ldr	r3, [r7, #4]
10007f72:	681b      	ldr	r3, [r3, #0]
10007f74:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
10007f76:	6a3b      	ldr	r3, [r7, #32]
10007f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007f7a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
10007f7c:	69fb      	ldr	r3, [r7, #28]
10007f7e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
10007f80:	69bb      	ldr	r3, [r7, #24]
10007f82:	3358      	adds	r3, #88	@ 0x58
10007f84:	4618      	mov	r0, r3
10007f86:	f7ff fd55 	bl	10007a34 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10007f8a:	f107 020a 	add.w	r2, r7, #10
10007f8e:	f107 030c 	add.w	r3, r7, #12
10007f92:	4619      	mov	r1, r3
10007f94:	69f8      	ldr	r0, [r7, #28]
10007f96:	f7ff fe5c 	bl	10007c52 <rpmsg_virtio_get_rx_buffer>
10007f9a:	6278      	str	r0, [r7, #36]	@ 0x24

	metal_mutex_release(&rdev->lock);
10007f9c:	69bb      	ldr	r3, [r7, #24]
10007f9e:	3358      	adds	r3, #88	@ 0x58
10007fa0:	4618      	mov	r0, r3
10007fa2:	f7ff fd52 	bl	10007a4a <metal_mutex_release>

	while (rp_hdr) {
10007fa6:	e062      	b.n	1000806e <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
10007fa8:	897b      	ldrh	r3, [r7, #10]
10007faa:	461a      	mov	r2, r3
10007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007fae:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
10007fb0:	69bb      	ldr	r3, [r7, #24]
10007fb2:	3358      	adds	r3, #88	@ 0x58
10007fb4:	4618      	mov	r0, r3
10007fb6:	f7ff fd3d 	bl	10007a34 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
10007fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007fbc:	685b      	ldr	r3, [r3, #4]
10007fbe:	4619      	mov	r1, r3
10007fc0:	69b8      	ldr	r0, [r7, #24]
10007fc2:	f7ff fdc9 	bl	10007b58 <rpmsg_get_ept_from_addr>
10007fc6:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
10007fc8:	69bb      	ldr	r3, [r7, #24]
10007fca:	3358      	adds	r3, #88	@ 0x58
10007fcc:	4618      	mov	r0, r3
10007fce:	f7ff fd3c 	bl	10007a4a <metal_mutex_release>

		if (ept) {
10007fd2:	697b      	ldr	r3, [r7, #20]
10007fd4:	2b00      	cmp	r3, #0
10007fd6:	d025      	beq.n	10008024 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
10007fd8:	697b      	ldr	r3, [r7, #20]
10007fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
10007fe0:	d103      	bne.n	10007fea <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
10007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007fe4:	681a      	ldr	r2, [r3, #0]
10007fe6:	697b      	ldr	r3, [r7, #20]
10007fe8:	629a      	str	r2, [r3, #40]	@ 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10007fea:	697b      	ldr	r3, [r7, #20]
10007fec:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
10007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007ff0:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
10007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007ff6:	899b      	ldrh	r3, [r3, #12]
10007ff8:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10007ffa:	4618      	mov	r0, r3
10007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007ffe:	681a      	ldr	r2, [r3, #0]
10008000:	697b      	ldr	r3, [r7, #20]
10008002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10008004:	9300      	str	r3, [sp, #0]
10008006:	4613      	mov	r3, r2
10008008:	4602      	mov	r2, r0
1000800a:	6978      	ldr	r0, [r7, #20]
1000800c:	47a0      	blx	r4
1000800e:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
10008010:	693b      	ldr	r3, [r7, #16]
10008012:	2b00      	cmp	r3, #0
10008014:	da06      	bge.n	10008024 <rpmsg_virtio_rx_callback+0xbc>
10008016:	4b1a      	ldr	r3, [pc, #104]	@ (10008080 <rpmsg_virtio_rx_callback+0x118>)
10008018:	4a1a      	ldr	r2, [pc, #104]	@ (10008084 <rpmsg_virtio_rx_callback+0x11c>)
1000801a:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
1000801e:	481a      	ldr	r0, [pc, #104]	@ (10008088 <rpmsg_virtio_rx_callback+0x120>)
10008020:	f000 ff46 	bl	10008eb0 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
10008024:	69bb      	ldr	r3, [r7, #24]
10008026:	3358      	adds	r3, #88	@ 0x58
10008028:	4618      	mov	r0, r3
1000802a:	f7ff fd03 	bl	10007a34 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008030:	689b      	ldr	r3, [r3, #8]
10008032:	2b00      	cmp	r3, #0
10008034:	db05      	blt.n	10008042 <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10008036:	68fa      	ldr	r2, [r7, #12]
10008038:	897b      	ldrh	r3, [r7, #10]
1000803a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1000803c:	69f8      	ldr	r0, [r7, #28]
1000803e:	f7ff fdb5 	bl	10007bac <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10008042:	f107 020a 	add.w	r2, r7, #10
10008046:	f107 030c 	add.w	r3, r7, #12
1000804a:	4619      	mov	r1, r3
1000804c:	69f8      	ldr	r0, [r7, #28]
1000804e:	f7ff fe00 	bl	10007c52 <rpmsg_virtio_get_rx_buffer>
10008052:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!rp_hdr) {
10008054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008056:	2b00      	cmp	r3, #0
10008058:	d104      	bne.n	10008064 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000805a:	69fb      	ldr	r3, [r7, #28]
1000805c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1000805e:	4618      	mov	r0, r3
10008060:	f000 fc50 	bl	10008904 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
10008064:	69bb      	ldr	r3, [r7, #24]
10008066:	3358      	adds	r3, #88	@ 0x58
10008068:	4618      	mov	r0, r3
1000806a:	f7ff fcee 	bl	10007a4a <metal_mutex_release>
	while (rp_hdr) {
1000806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008070:	2b00      	cmp	r3, #0
10008072:	d199      	bne.n	10007fa8 <rpmsg_virtio_rx_callback+0x40>
	}
}
10008074:	bf00      	nop
10008076:	bf00      	nop
10008078:	372c      	adds	r7, #44	@ 0x2c
1000807a:	46bd      	mov	sp, r7
1000807c:	bd90      	pop	{r4, r7, pc}
1000807e:	bf00      	nop
10008080:	1000a680 	.word	0x1000a680
10008084:	1000a764 	.word	0x1000a764
10008088:	1000a5e4 	.word	0x1000a5e4

1000808c <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
1000808c:	b580      	push	{r7, lr}
1000808e:	b092      	sub	sp, #72	@ 0x48
10008090:	af00      	add	r7, sp, #0
10008092:	60f8      	str	r0, [r7, #12]
10008094:	60b9      	str	r1, [r7, #8]
10008096:	607a      	str	r2, [r7, #4]
10008098:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
1000809a:	68fb      	ldr	r3, [r7, #12]
1000809c:	6a1b      	ldr	r3, [r3, #32]
1000809e:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
100080a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100080a2:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
100080a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100080a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100080aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
100080ac:	68bb      	ldr	r3, [r7, #8]
100080ae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
100080b0:	687b      	ldr	r3, [r7, #4]
100080b2:	2b28      	cmp	r3, #40	@ 0x28
100080b4:	d001      	beq.n	100080ba <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
100080b6:	2300      	movs	r3, #0
100080b8:	e057      	b.n	1000816a <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
100080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
100080bc:	4619      	mov	r1, r3
100080be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
100080c0:	f7ff fc39 	bl	10007936 <metal_io_virt_to_offset>
100080c4:	4601      	mov	r1, r0
100080c6:	f107 0210 	add.w	r2, r7, #16
100080ca:	2320      	movs	r3, #32
100080cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
100080ce:	f7fe fcf0 	bl	10006ab2 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
100080d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100080d4:	6a1b      	ldr	r3, [r3, #32]
100080d6:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
100080d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100080da:	3358      	adds	r3, #88	@ 0x58
100080dc:	4618      	mov	r0, r3
100080de:	f7ff fca9 	bl	10007a34 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
100080e2:	f107 0110 	add.w	r1, r7, #16
100080e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100080e8:	f04f 32ff 	mov.w	r2, #4294967295
100080ec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
100080ee:	f7ff fadb 	bl	100076a8 <rpmsg_get_endpoint>
100080f2:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
100080f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100080f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100080f8:	f003 0301 	and.w	r3, r3, #1
100080fc:	2b00      	cmp	r3, #0
100080fe:	d017      	beq.n	10008130 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
10008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008102:	2b00      	cmp	r3, #0
10008104:	d003      	beq.n	1000810e <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
10008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008108:	f04f 32ff 	mov.w	r2, #4294967295
1000810c:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
1000810e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008110:	3358      	adds	r3, #88	@ 0x58
10008112:	4618      	mov	r0, r3
10008114:	f7ff fc99 	bl	10007a4a <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
10008118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000811a:	2b00      	cmp	r3, #0
1000811c:	d024      	beq.n	10008168 <rpmsg_virtio_ns_callback+0xdc>
1000811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008122:	2b00      	cmp	r3, #0
10008124:	d020      	beq.n	10008168 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
10008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000812a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000812c:	4798      	blx	r3
1000812e:	e01b      	b.n	10008168 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
10008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008132:	2b00      	cmp	r3, #0
10008134:	d110      	bne.n	10008158 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
10008136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008138:	3358      	adds	r3, #88	@ 0x58
1000813a:	4618      	mov	r0, r3
1000813c:	f7ff fc85 	bl	10007a4a <metal_mutex_release>
			if (rdev->ns_bind_cb)
10008140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10008144:	2b00      	cmp	r3, #0
10008146:	d00f      	beq.n	10008168 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
10008148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000814a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1000814c:	f107 0110 	add.w	r1, r7, #16
10008150:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008152:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10008154:	4798      	blx	r3
10008156:	e007      	b.n	10008168 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
10008158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000815a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000815c:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
1000815e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008160:	3358      	adds	r3, #88	@ 0x58
10008162:	4618      	mov	r0, r3
10008164:	f7ff fc71 	bl	10007a4a <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
10008168:	2300      	movs	r3, #0
}
1000816a:	4618      	mov	r0, r3
1000816c:	3748      	adds	r7, #72	@ 0x48
1000816e:	46bd      	mov	sp, r7
10008170:	bd80      	pop	{r7, pc}
	...

10008174 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
10008174:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
10008178:	b090      	sub	sp, #64	@ 0x40
1000817a:	af02      	add	r7, sp, #8
1000817c:	60f8      	str	r0, [r7, #12]
1000817e:	60b9      	str	r1, [r7, #8]
10008180:	607a      	str	r2, [r7, #4]
10008182:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
10008184:	68fb      	ldr	r3, [r7, #12]
10008186:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
10008188:	2278      	movs	r2, #120	@ 0x78
1000818a:	2100      	movs	r1, #0
1000818c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000818e:	f001 f8bf 	bl	10009310 <memset>
	metal_mutex_init(&rdev->lock);
10008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008194:	3358      	adds	r3, #88	@ 0x58
10008196:	4618      	mov	r0, r3
10008198:	f7ff fc41 	bl	10007a1e <metal_mutex_init>
	rvdev->vdev = vdev;
1000819c:	68fb      	ldr	r3, [r7, #12]
1000819e:	68ba      	ldr	r2, [r7, #8]
100081a0:	679a      	str	r2, [r3, #120]	@ 0x78
	rdev->ns_bind_cb = ns_bind_cb;
100081a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100081a4:	687a      	ldr	r2, [r7, #4]
100081a6:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
100081a8:	68bb      	ldr	r3, [r7, #8]
100081aa:	68fa      	ldr	r2, [r7, #12]
100081ac:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
100081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100081b0:	4a4c      	ldr	r2, [pc, #304]	@ (100082e4 <rpmsg_init_vdev+0x170>)
100081b2:	661a      	str	r2, [r3, #96]	@ 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
100081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100081b6:	4a4c      	ldr	r2, [pc, #304]	@ (100082e8 <rpmsg_init_vdev+0x174>)
100081b8:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
100081ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100081bc:	4a4b      	ldr	r2, [pc, #300]	@ (100082ec <rpmsg_init_vdev+0x178>)
100081be:	669a      	str	r2, [r3, #104]	@ 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
100081c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100081c2:	4a4b      	ldr	r2, [pc, #300]	@ (100082f0 <rpmsg_init_vdev+0x17c>)
100081c4:	66da      	str	r2, [r3, #108]	@ 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
100081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100081c8:	4a4a      	ldr	r2, [pc, #296]	@ (100082f4 <rpmsg_init_vdev+0x180>)
100081ca:	671a      	str	r2, [r3, #112]	@ 0x70
	role = rpmsg_virtio_get_role(rvdev);
100081cc:	68f8      	ldr	r0, [r7, #12]
100081ce:	f7ff fc47 	bl	10007a60 <rpmsg_virtio_get_role>
100081d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100081d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100081d6:	2b01      	cmp	r3, #1
100081d8:	d102      	bne.n	100081e0 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
100081da:	68f8      	ldr	r0, [r7, #12]
100081dc:	f7ff fd55 	bl	10007c8a <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
100081e0:	68f8      	ldr	r0, [r7, #12]
100081e2:	f7ff fc6e 	bl	10007ac2 <rpmsg_virtio_get_features>
100081e6:	4603      	mov	r3, r0
100081e8:	2200      	movs	r2, #0
100081ea:	4698      	mov	r8, r3
100081ec:	4691      	mov	r9, r2
100081ee:	68bb      	ldr	r3, [r7, #8]
100081f0:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
100081f4:	68bb      	ldr	r3, [r7, #8]
100081f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
100081fa:	f002 0401 	and.w	r4, r2, #1
100081fe:	2500      	movs	r5, #0
10008200:	ea54 0305 	orrs.w	r3, r4, r5
10008204:	bf14      	ite	ne
10008206:	2301      	movne	r3, #1
10008208:	2300      	moveq	r3, #0
1000820a:	b2da      	uxtb	r2, r3
1000820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000820e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
10008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008214:	2b01      	cmp	r3, #1
10008216:	d113      	bne.n	10008240 <rpmsg_init_vdev+0xcc>
		vq_names[0] = "tx_vq";
10008218:	4b37      	ldr	r3, [pc, #220]	@ (100082f8 <rpmsg_init_vdev+0x184>)
1000821a:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000821c:	4b37      	ldr	r3, [pc, #220]	@ (100082fc <rpmsg_init_vdev+0x188>)
1000821e:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
10008220:	4b37      	ldr	r3, [pc, #220]	@ (10008300 <rpmsg_init_vdev+0x18c>)
10008222:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
10008224:	4b37      	ldr	r3, [pc, #220]	@ (10008304 <rpmsg_init_vdev+0x190>)
10008226:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
10008228:	68bb      	ldr	r3, [r7, #8]
1000822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000822c:	3318      	adds	r3, #24
1000822e:	681a      	ldr	r2, [r3, #0]
10008230:	68fb      	ldr	r3, [r7, #12]
10008232:	67da      	str	r2, [r3, #124]	@ 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
10008234:	68bb      	ldr	r3, [r7, #8]
10008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10008238:	681a      	ldr	r2, [r3, #0]
1000823a:	68fb      	ldr	r3, [r7, #12]
1000823c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
10008240:	68fb      	ldr	r3, [r7, #12]
10008242:	683a      	ldr	r2, [r7, #0]
10008244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
10008248:	f107 021c 	add.w	r2, r7, #28
1000824c:	f107 0314 	add.w	r3, r7, #20
10008250:	9300      	str	r3, [sp, #0]
10008252:	4613      	mov	r3, r2
10008254:	2202      	movs	r2, #2
10008256:	2100      	movs	r1, #0
10008258:	68f8      	ldr	r0, [r7, #12]
1000825a:	f7ff fc43 	bl	10007ae4 <rpmsg_virtio_create_virtqueues>
1000825e:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
10008260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008262:	2b00      	cmp	r3, #0
10008264:	d001      	beq.n	1000826a <rpmsg_init_vdev+0xf6>
		return status;
10008266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008268:	e037      	b.n	100082da <rpmsg_init_vdev+0x166>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000826a:	68fb      	ldr	r3, [r7, #12]
1000826c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008270:	4618      	mov	r0, r3
10008272:	f000 fb0f 	bl	10008894 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10008276:	2300      	movs	r3, #0
10008278:	637b      	str	r3, [r7, #52]	@ 0x34
1000827a:	e00f      	b.n	1000829c <rpmsg_init_vdev+0x128>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
1000827c:	68bb      	ldr	r3, [r7, #8]
1000827e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10008280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008282:	4613      	mov	r3, r2
10008284:	005b      	lsls	r3, r3, #1
10008286:	4413      	add	r3, r2
10008288:	00db      	lsls	r3, r3, #3
1000828a:	440b      	add	r3, r1
1000828c:	681b      	ldr	r3, [r3, #0]
1000828e:	627b      	str	r3, [r7, #36]	@ 0x24
		vq->shm_io = shm_io;
10008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008292:	683a      	ldr	r2, [r7, #0]
10008294:	629a      	str	r2, [r3, #40]	@ 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10008296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008298:	3301      	adds	r3, #1
1000829a:	637b      	str	r3, [r7, #52]	@ 0x34
1000829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000829e:	2b01      	cmp	r3, #1
100082a0:	d9ec      	bls.n	1000827c <rpmsg_init_vdev+0x108>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
100082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100082a4:	4618      	mov	r0, r3
100082a6:	f7ff fb36 	bl	10007916 <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
100082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100082ac:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
100082b0:	2b00      	cmp	r3, #0
100082b2:	d011      	beq.n	100082d8 <rpmsg_init_vdev+0x164>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
100082b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100082b6:	f103 0008 	add.w	r0, r3, #8
100082ba:	2300      	movs	r3, #0
100082bc:	9301      	str	r3, [sp, #4]
100082be:	4b12      	ldr	r3, [pc, #72]	@ (10008308 <rpmsg_init_vdev+0x194>)
100082c0:	9300      	str	r3, [sp, #0]
100082c2:	2335      	movs	r3, #53	@ 0x35
100082c4:	2235      	movs	r2, #53	@ 0x35
100082c6:	4911      	ldr	r1, [pc, #68]	@ (1000830c <rpmsg_init_vdev+0x198>)
100082c8:	f7ff fc22 	bl	10007b10 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
100082cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100082ce:	3308      	adds	r3, #8
100082d0:	4619      	mov	r1, r3
100082d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100082d4:	f7ff fa73 	bl	100077be <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
100082d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
100082da:	4618      	mov	r0, r3
100082dc:	3738      	adds	r7, #56	@ 0x38
100082de:	46bd      	mov	sp, r7
100082e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
100082e4:	10007ebd 	.word	0x10007ebd
100082e8:	10007cc5 	.word	0x10007cc5
100082ec:	10007ced 	.word	0x10007ced
100082f0:	10007d3f 	.word	0x10007d3f
100082f4:	10007de5 	.word	0x10007de5
100082f8:	1000a68c 	.word	0x1000a68c
100082fc:	1000a694 	.word	0x1000a694
10008300:	10007f55 	.word	0x10007f55
10008304:	10007f69 	.word	0x10007f69
10008308:	1000808d 	.word	0x1000808d
1000830c:	1000a69c 	.word	0x1000a69c

10008310 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
10008310:	b480      	push	{r7}
10008312:	b083      	sub	sp, #12
10008314:	af00      	add	r7, sp, #0
10008316:	6078      	str	r0, [r7, #4]
10008318:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000831a:	bf00      	nop
1000831c:	370c      	adds	r7, #12
1000831e:	46bd      	mov	sp, r7
10008320:	f85d 7b04 	ldr.w	r7, [sp], #4
10008324:	4770      	bx	lr

10008326 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
10008326:	b480      	push	{r7}
10008328:	b083      	sub	sp, #12
1000832a:	af00      	add	r7, sp, #0
1000832c:	6078      	str	r0, [r7, #4]
1000832e:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10008330:	bf00      	nop
10008332:	370c      	adds	r7, #12
10008334:	46bd      	mov	sp, r7
10008336:	f85d 7b04 	ldr.w	r7, [sp], #4
1000833a:	4770      	bx	lr

1000833c <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
1000833c:	b480      	push	{r7}
1000833e:	b085      	sub	sp, #20
10008340:	af00      	add	r7, sp, #0
10008342:	60f8      	str	r0, [r7, #12]
10008344:	60b9      	str	r1, [r7, #8]
10008346:	607a      	str	r2, [r7, #4]
10008348:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000834a:	68fb      	ldr	r3, [r7, #12]
}
1000834c:	4618      	mov	r0, r3
1000834e:	3714      	adds	r7, #20
10008350:	46bd      	mov	sp, r7
10008352:	f85d 7b04 	ldr.w	r7, [sp], #4
10008356:	4770      	bx	lr

10008358 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
10008358:	b580      	push	{r7, lr}
1000835a:	b086      	sub	sp, #24
1000835c:	af02      	add	r7, sp, #8
1000835e:	60f8      	str	r0, [r7, #12]
10008360:	60b9      	str	r1, [r7, #8]
10008362:	607a      	str	r2, [r7, #4]
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
10008364:	68fb      	ldr	r3, [r7, #12]
10008366:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10008368:	68fb      	ldr	r3, [r7, #12]
1000836a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1000836c:	2301      	movs	r3, #1
1000836e:	9301      	str	r3, [sp, #4]
10008370:	687b      	ldr	r3, [r7, #4]
10008372:	9300      	str	r3, [sp, #0]
10008374:	68bb      	ldr	r3, [r7, #8]
10008376:	68f8      	ldr	r0, [r7, #12]
10008378:	f7ff f93c 	bl	100075f4 <rpmsg_send_offchannel_raw>
1000837c:	4603      	mov	r3, r0
					 len, true);
}
1000837e:	4618      	mov	r0, r3
10008380:	3710      	adds	r7, #16
10008382:	46bd      	mov	sp, r7
10008384:	bd80      	pop	{r7, pc}

10008386 <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
10008386:	b580      	push	{r7, lr}
10008388:	b086      	sub	sp, #24
1000838a:	af00      	add	r7, sp, #0
1000838c:	60f8      	str	r0, [r7, #12]
1000838e:	60b9      	str	r1, [r7, #8]
10008390:	607a      	str	r2, [r7, #4]
10008392:	603b      	str	r3, [r7, #0]
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
10008394:	68fb      	ldr	r3, [r7, #12]
10008396:	617b      	str	r3, [r7, #20]
  (void)src;

  huart->pRxBuffPtr = data;
10008398:	697b      	ldr	r3, [r7, #20]
1000839a:	68ba      	ldr	r2, [r7, #8]
1000839c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxXferSize = len;
1000839e:	687b      	ldr	r3, [r7, #4]
100083a0:	b29a      	uxth	r2, r3
100083a2:	697b      	ldr	r3, [r7, #20]
100083a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  if (huart->RxCpltCallback != NULL) {
100083a8:	697b      	ldr	r3, [r7, #20]
100083aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100083ac:	2b00      	cmp	r3, #0
100083ae:	d003      	beq.n	100083b8 <VIRT_UART_read_cb+0x32>
    huart->RxCpltCallback(huart);
100083b0:	697b      	ldr	r3, [r7, #20]
100083b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100083b4:	6978      	ldr	r0, [r7, #20]
100083b6:	4798      	blx	r3
  }

  return 0;
100083b8:	2300      	movs	r3, #0
}
100083ba:	4618      	mov	r0, r3
100083bc:	3718      	adds	r7, #24
100083be:	46bd      	mov	sp, r7
100083c0:	bd80      	pop	{r7, pc}
	...

100083c4 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
100083c4:	b580      	push	{r7, lr}
100083c6:	b086      	sub	sp, #24
100083c8:	af02      	add	r7, sp, #8
100083ca:	6078      	str	r0, [r7, #4]

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
100083cc:	6878      	ldr	r0, [r7, #4]
100083ce:	2300      	movs	r3, #0
100083d0:	9300      	str	r3, [sp, #0]
100083d2:	4b08      	ldr	r3, [pc, #32]	@ (100083f4 <VIRT_UART_Init+0x30>)
100083d4:	f04f 32ff 	mov.w	r2, #4294967295
100083d8:	4907      	ldr	r1, [pc, #28]	@ (100083f8 <VIRT_UART_Init+0x34>)
100083da:	f000 fd2b 	bl	10008e34 <OPENAMP_create_endpoint>
100083de:	60f8      	str	r0, [r7, #12]
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
100083e0:	68fb      	ldr	r3, [r7, #12]
100083e2:	2b00      	cmp	r3, #0
100083e4:	da01      	bge.n	100083ea <VIRT_UART_Init+0x26>
    return VIRT_UART_ERROR;
100083e6:	2301      	movs	r3, #1
100083e8:	e000      	b.n	100083ec <VIRT_UART_Init+0x28>
  }

  return VIRT_UART_OK;
100083ea:	2300      	movs	r3, #0
}
100083ec:	4618      	mov	r0, r3
100083ee:	3710      	adds	r7, #16
100083f0:	46bd      	mov	sp, r7
100083f2:	bd80      	pop	{r7, pc}
100083f4:	10008387 	.word	0x10008387
100083f8:	1000a6a0 	.word	0x1000a6a0

100083fc <VIRT_UART_RegisterCallback>:
}

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
100083fc:	b480      	push	{r7}
100083fe:	b087      	sub	sp, #28
10008400:	af00      	add	r7, sp, #0
10008402:	60f8      	str	r0, [r7, #12]
10008404:	460b      	mov	r3, r1
10008406:	607a      	str	r2, [r7, #4]
10008408:	72fb      	strb	r3, [r7, #11]
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;
1000840a:	2300      	movs	r3, #0
1000840c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
1000840e:	7afb      	ldrb	r3, [r7, #11]
10008410:	2b00      	cmp	r3, #0
10008412:	d103      	bne.n	1000841c <VIRT_UART_RegisterCallback+0x20>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
10008414:	68fb      	ldr	r3, [r7, #12]
10008416:	687a      	ldr	r2, [r7, #4]
10008418:	64da      	str	r2, [r3, #76]	@ 0x4c
    break;
1000841a:	e002      	b.n	10008422 <VIRT_UART_RegisterCallback+0x26>

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
1000841c:	2301      	movs	r3, #1
1000841e:	75fb      	strb	r3, [r7, #23]
    break;
10008420:	bf00      	nop
  }
  return status;
10008422:	7dfb      	ldrb	r3, [r7, #23]
}
10008424:	4618      	mov	r0, r3
10008426:	371c      	adds	r7, #28
10008428:	46bd      	mov	sp, r7
1000842a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000842e:	4770      	bx	lr

10008430 <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
10008430:	b580      	push	{r7, lr}
10008432:	b086      	sub	sp, #24
10008434:	af00      	add	r7, sp, #0
10008436:	60f8      	str	r0, [r7, #12]
10008438:	60b9      	str	r1, [r7, #8]
1000843a:	4613      	mov	r3, r2
1000843c:	80fb      	strh	r3, [r7, #6]
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
1000843e:	88fb      	ldrh	r3, [r7, #6]
10008440:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
10008444:	d901      	bls.n	1000844a <VIRT_UART_Transmit+0x1a>
	  return VIRT_UART_ERROR;
10008446:	2301      	movs	r3, #1
10008448:	e00c      	b.n	10008464 <VIRT_UART_Transmit+0x34>

	res = OPENAMP_send(&huart->ept, pData, Size);
1000844a:	68fb      	ldr	r3, [r7, #12]
1000844c:	88fa      	ldrh	r2, [r7, #6]
1000844e:	68b9      	ldr	r1, [r7, #8]
10008450:	4618      	mov	r0, r3
10008452:	f7ff ff81 	bl	10008358 <rpmsg_send>
10008456:	6178      	str	r0, [r7, #20]
	if (res <0) {
10008458:	697b      	ldr	r3, [r7, #20]
1000845a:	2b00      	cmp	r3, #0
1000845c:	da01      	bge.n	10008462 <VIRT_UART_Transmit+0x32>
		return VIRT_UART_ERROR;
1000845e:	2301      	movs	r3, #1
10008460:	e000      	b.n	10008464 <VIRT_UART_Transmit+0x34>
	}

	return VIRT_UART_OK;
10008462:	2300      	movs	r3, #0
}
10008464:	4618      	mov	r0, r3
10008466:	3718      	adds	r7, #24
10008468:	46bd      	mov	sp, r7
1000846a:	bd80      	pop	{r7, pc}

1000846c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
1000846c:	b590      	push	{r4, r7, lr}
1000846e:	b08f      	sub	sp, #60	@ 0x3c
10008470:	af04      	add	r7, sp, #16
10008472:	60f8      	str	r0, [r7, #12]
10008474:	60b9      	str	r1, [r7, #8]
10008476:	607a      	str	r2, [r7, #4]
10008478:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
1000847a:	68fb      	ldr	r3, [r7, #12]
1000847c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000847e:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
10008480:	687a      	ldr	r2, [r7, #4]
10008482:	6a3b      	ldr	r3, [r7, #32]
10008484:	429a      	cmp	r2, r3
10008486:	d901      	bls.n	1000848c <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
10008488:	4b1e      	ldr	r3, [pc, #120]	@ (10008504 <virtio_create_virtqueues+0x98>)
1000848a:	e036      	b.n	100084fa <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
1000848c:	2300      	movs	r3, #0
1000848e:	627b      	str	r3, [r7, #36]	@ 0x24
10008490:	e02e      	b.n	100084f0 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
10008492:	68fb      	ldr	r3, [r7, #12]
10008494:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10008496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008498:	4613      	mov	r3, r2
1000849a:	005b      	lsls	r3, r3, #1
1000849c:	4413      	add	r3, r2
1000849e:	00db      	lsls	r3, r3, #3
100084a0:	440b      	add	r3, r1
100084a2:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
100084a4:	69fb      	ldr	r3, [r7, #28]
100084a6:	3304      	adds	r3, #4
100084a8:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100084ac:	b298      	uxth	r0, r3
100084ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100084b0:	009b      	lsls	r3, r3, #2
100084b2:	683a      	ldr	r2, [r7, #0]
100084b4:	4413      	add	r3, r2
100084b6:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
100084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100084ba:	009b      	lsls	r3, r3, #2
100084bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
100084be:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100084c0:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
100084c2:	68fa      	ldr	r2, [r7, #12]
100084c4:	6a12      	ldr	r2, [r2, #32]
100084c6:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100084c8:	69f9      	ldr	r1, [r7, #28]
100084ca:	6809      	ldr	r1, [r1, #0]
100084cc:	9102      	str	r1, [sp, #8]
100084ce:	9201      	str	r2, [sp, #4]
100084d0:	9300      	str	r3, [sp, #0]
100084d2:	69bb      	ldr	r3, [r7, #24]
100084d4:	4622      	mov	r2, r4
100084d6:	4601      	mov	r1, r0
100084d8:	68f8      	ldr	r0, [r7, #12]
100084da:	f000 f90e 	bl	100086fa <virtqueue_create>
100084de:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
100084e0:	697b      	ldr	r3, [r7, #20]
100084e2:	2b00      	cmp	r3, #0
100084e4:	d001      	beq.n	100084ea <virtio_create_virtqueues+0x7e>
			return ret;
100084e6:	697b      	ldr	r3, [r7, #20]
100084e8:	e007      	b.n	100084fa <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
100084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100084ec:	3301      	adds	r3, #1
100084ee:	627b      	str	r3, [r7, #36]	@ 0x24
100084f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100084f2:	687b      	ldr	r3, [r7, #4]
100084f4:	429a      	cmp	r2, r3
100084f6:	d3cc      	bcc.n	10008492 <virtio_create_virtqueues+0x26>
	}
	return 0;
100084f8:	2300      	movs	r3, #0
}
100084fa:	4618      	mov	r0, r3
100084fc:	372c      	adds	r7, #44	@ 0x2c
100084fe:	46bd      	mov	sp, r7
10008500:	bd90      	pop	{r4, r7, pc}
10008502:	bf00      	nop
10008504:	fffff440 	.word	0xfffff440

10008508 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
10008508:	b480      	push	{r7}
1000850a:	b085      	sub	sp, #20
1000850c:	af00      	add	r7, sp, #0
1000850e:	60f8      	str	r0, [r7, #12]
10008510:	60b9      	str	r1, [r7, #8]
10008512:	607a      	str	r2, [r7, #4]
10008514:	603b      	str	r3, [r7, #0]
	vr->num = num;
10008516:	68fb      	ldr	r3, [r7, #12]
10008518:	68ba      	ldr	r2, [r7, #8]
1000851a:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
1000851c:	68fb      	ldr	r3, [r7, #12]
1000851e:	687a      	ldr	r2, [r7, #4]
10008520:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
10008522:	68bb      	ldr	r3, [r7, #8]
10008524:	011b      	lsls	r3, r3, #4
10008526:	687a      	ldr	r2, [r7, #4]
10008528:	441a      	add	r2, r3
1000852a:	68fb      	ldr	r3, [r7, #12]
1000852c:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
1000852e:	68fb      	ldr	r3, [r7, #12]
10008530:	689a      	ldr	r2, [r3, #8]
10008532:	68bb      	ldr	r3, [r7, #8]
10008534:	005b      	lsls	r3, r3, #1
10008536:	4413      	add	r3, r2
10008538:	3304      	adds	r3, #4
1000853a:	461a      	mov	r2, r3
1000853c:	683b      	ldr	r3, [r7, #0]
1000853e:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
10008540:	1c5a      	adds	r2, r3, #1
10008542:	683b      	ldr	r3, [r7, #0]
10008544:	425b      	negs	r3, r3
10008546:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
10008548:	461a      	mov	r2, r3
1000854a:	68fb      	ldr	r3, [r7, #12]
1000854c:	60da      	str	r2, [r3, #12]
}
1000854e:	bf00      	nop
10008550:	3714      	adds	r7, #20
10008552:	46bd      	mov	sp, r7
10008554:	f85d 7b04 	ldr.w	r7, [sp], #4
10008558:	4770      	bx	lr

1000855a <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
1000855a:	b480      	push	{r7}
1000855c:	b083      	sub	sp, #12
1000855e:	af00      	add	r7, sp, #0
10008560:	4603      	mov	r3, r0
10008562:	80fb      	strh	r3, [r7, #6]
10008564:	460b      	mov	r3, r1
10008566:	80bb      	strh	r3, [r7, #4]
10008568:	4613      	mov	r3, r2
1000856a:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
1000856c:	88ba      	ldrh	r2, [r7, #4]
1000856e:	88fb      	ldrh	r3, [r7, #6]
10008570:	1ad3      	subs	r3, r2, r3
10008572:	b29b      	uxth	r3, r3
10008574:	3b01      	subs	r3, #1
10008576:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
10008578:	88b9      	ldrh	r1, [r7, #4]
1000857a:	887b      	ldrh	r3, [r7, #2]
1000857c:	1acb      	subs	r3, r1, r3
1000857e:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
10008580:	429a      	cmp	r2, r3
10008582:	bf34      	ite	cc
10008584:	2301      	movcc	r3, #1
10008586:	2300      	movcs	r3, #0
10008588:	b2db      	uxtb	r3, r3
}
1000858a:	4618      	mov	r0, r3
1000858c:	370c      	adds	r7, #12
1000858e:	46bd      	mov	sp, r7
10008590:	f85d 7b04 	ldr.w	r7, [sp], #4
10008594:	4770      	bx	lr

10008596 <metal_io_virt>:
{
10008596:	b480      	push	{r7}
10008598:	b083      	sub	sp, #12
1000859a:	af00      	add	r7, sp, #0
1000859c:	6078      	str	r0, [r7, #4]
1000859e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
100085a0:	687b      	ldr	r3, [r7, #4]
100085a2:	681b      	ldr	r3, [r3, #0]
		: NULL);
100085a4:	f1b3 3fff 	cmp.w	r3, #4294967295
100085a8:	d00a      	beq.n	100085c0 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
100085aa:	687b      	ldr	r3, [r7, #4]
100085ac:	689b      	ldr	r3, [r3, #8]
100085ae:	683a      	ldr	r2, [r7, #0]
100085b0:	429a      	cmp	r2, r3
100085b2:	d205      	bcs.n	100085c0 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
100085b4:	687b      	ldr	r3, [r7, #4]
100085b6:	681b      	ldr	r3, [r3, #0]
100085b8:	461a      	mov	r2, r3
100085ba:	683b      	ldr	r3, [r7, #0]
100085bc:	4413      	add	r3, r2
		: NULL);
100085be:	e000      	b.n	100085c2 <metal_io_virt+0x2c>
100085c0:	2300      	movs	r3, #0
}
100085c2:	4618      	mov	r0, r3
100085c4:	370c      	adds	r7, #12
100085c6:	46bd      	mov	sp, r7
100085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
100085cc:	4770      	bx	lr

100085ce <metal_io_phys>:
{
100085ce:	b580      	push	{r7, lr}
100085d0:	b084      	sub	sp, #16
100085d2:	af00      	add	r7, sp, #0
100085d4:	6078      	str	r0, [r7, #4]
100085d6:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
100085d8:	687b      	ldr	r3, [r7, #4]
100085da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100085dc:	2b00      	cmp	r3, #0
100085de:	d123      	bne.n	10008628 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
100085e0:	687b      	ldr	r3, [r7, #4]
100085e2:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
100085e4:	2b1f      	cmp	r3, #31
100085e6:	d805      	bhi.n	100085f4 <metal_io_phys+0x26>
100085e8:	687b      	ldr	r3, [r7, #4]
100085ea:	68db      	ldr	r3, [r3, #12]
100085ec:	683a      	ldr	r2, [r7, #0]
100085ee:	fa22 f303 	lsr.w	r3, r2, r3
100085f2:	e000      	b.n	100085f6 <metal_io_phys+0x28>
100085f4:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
100085f6:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
100085f8:	687b      	ldr	r3, [r7, #4]
100085fa:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
100085fc:	2b00      	cmp	r3, #0
100085fe:	d010      	beq.n	10008622 <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
10008600:	687b      	ldr	r3, [r7, #4]
10008602:	689b      	ldr	r3, [r3, #8]
10008604:	683a      	ldr	r2, [r7, #0]
10008606:	429a      	cmp	r2, r3
10008608:	d20b      	bcs.n	10008622 <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
1000860a:	687b      	ldr	r3, [r7, #4]
1000860c:	685a      	ldr	r2, [r3, #4]
1000860e:	68fb      	ldr	r3, [r7, #12]
10008610:	009b      	lsls	r3, r3, #2
10008612:	4413      	add	r3, r2
10008614:	681a      	ldr	r2, [r3, #0]
10008616:	687b      	ldr	r3, [r7, #4]
10008618:	6919      	ldr	r1, [r3, #16]
1000861a:	683b      	ldr	r3, [r7, #0]
1000861c:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
1000861e:	4413      	add	r3, r2
10008620:	e008      	b.n	10008634 <metal_io_phys+0x66>
10008622:	f04f 33ff 	mov.w	r3, #4294967295
10008626:	e005      	b.n	10008634 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
10008628:	687b      	ldr	r3, [r7, #4]
1000862a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000862c:	6839      	ldr	r1, [r7, #0]
1000862e:	6878      	ldr	r0, [r7, #4]
10008630:	4798      	blx	r3
10008632:	4603      	mov	r3, r0
}
10008634:	4618      	mov	r0, r3
10008636:	3710      	adds	r7, #16
10008638:	46bd      	mov	sp, r7
1000863a:	bd80      	pop	{r7, pc}

1000863c <metal_io_phys_to_offset>:
{
1000863c:	b580      	push	{r7, lr}
1000863e:	b084      	sub	sp, #16
10008640:	af00      	add	r7, sp, #0
10008642:	6078      	str	r0, [r7, #4]
10008644:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
10008646:	687b      	ldr	r3, [r7, #4]
10008648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000864a:	2b00      	cmp	r3, #0
1000864c:	d127      	bne.n	1000869e <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
1000864e:	687b      	ldr	r3, [r7, #4]
10008650:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
10008652:	f1b3 3fff 	cmp.w	r3, #4294967295
10008656:	d105      	bne.n	10008664 <metal_io_phys_to_offset+0x28>
10008658:	687b      	ldr	r3, [r7, #4]
1000865a:	685b      	ldr	r3, [r3, #4]
1000865c:	681b      	ldr	r3, [r3, #0]
1000865e:	683a      	ldr	r2, [r7, #0]
10008660:	1ad3      	subs	r3, r2, r3
10008662:	e003      	b.n	1000866c <metal_io_phys_to_offset+0x30>
10008664:	687b      	ldr	r3, [r7, #4]
10008666:	691a      	ldr	r2, [r3, #16]
10008668:	683b      	ldr	r3, [r7, #0]
1000866a:	4013      	ands	r3, r2
		unsigned long offset =
1000866c:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
1000866e:	68f9      	ldr	r1, [r7, #12]
10008670:	6878      	ldr	r0, [r7, #4]
10008672:	f7ff ffac 	bl	100085ce <metal_io_phys>
10008676:	4602      	mov	r2, r0
10008678:	683b      	ldr	r3, [r7, #0]
1000867a:	4293      	cmp	r3, r2
1000867c:	d101      	bne.n	10008682 <metal_io_phys_to_offset+0x46>
				return offset;
1000867e:	68fb      	ldr	r3, [r7, #12]
10008680:	e013      	b.n	100086aa <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
10008682:	687b      	ldr	r3, [r7, #4]
10008684:	691a      	ldr	r2, [r3, #16]
10008686:	68fb      	ldr	r3, [r7, #12]
10008688:	4413      	add	r3, r2
1000868a:	3301      	adds	r3, #1
1000868c:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
1000868e:	687b      	ldr	r3, [r7, #4]
10008690:	689b      	ldr	r3, [r3, #8]
10008692:	68fa      	ldr	r2, [r7, #12]
10008694:	429a      	cmp	r2, r3
10008696:	d3ea      	bcc.n	1000866e <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
10008698:	f04f 33ff 	mov.w	r3, #4294967295
1000869c:	e005      	b.n	100086aa <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
1000869e:	687b      	ldr	r3, [r7, #4]
100086a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100086a2:	6839      	ldr	r1, [r7, #0]
100086a4:	6878      	ldr	r0, [r7, #4]
100086a6:	4798      	blx	r3
100086a8:	4603      	mov	r3, r0
}
100086aa:	4618      	mov	r0, r3
100086ac:	3710      	adds	r7, #16
100086ae:	46bd      	mov	sp, r7
100086b0:	bd80      	pop	{r7, pc}

100086b2 <metal_io_phys_to_virt>:
{
100086b2:	b580      	push	{r7, lr}
100086b4:	b082      	sub	sp, #8
100086b6:	af00      	add	r7, sp, #0
100086b8:	6078      	str	r0, [r7, #4]
100086ba:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
100086bc:	6839      	ldr	r1, [r7, #0]
100086be:	6878      	ldr	r0, [r7, #4]
100086c0:	f7ff ffbc 	bl	1000863c <metal_io_phys_to_offset>
100086c4:	4603      	mov	r3, r0
100086c6:	4619      	mov	r1, r3
100086c8:	6878      	ldr	r0, [r7, #4]
100086ca:	f7ff ff64 	bl	10008596 <metal_io_virt>
100086ce:	4603      	mov	r3, r0
}
100086d0:	4618      	mov	r0, r3
100086d2:	3708      	adds	r7, #8
100086d4:	46bd      	mov	sp, r7
100086d6:	bd80      	pop	{r7, pc}

100086d8 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
100086d8:	b580      	push	{r7, lr}
100086da:	b084      	sub	sp, #16
100086dc:	af00      	add	r7, sp, #0
100086de:	6078      	str	r0, [r7, #4]
100086e0:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
100086e2:	687b      	ldr	r3, [r7, #4]
100086e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100086e6:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
100086e8:	6839      	ldr	r1, [r7, #0]
100086ea:	68f8      	ldr	r0, [r7, #12]
100086ec:	f7ff ffe1 	bl	100086b2 <metal_io_phys_to_virt>
100086f0:	4603      	mov	r3, r0
}
100086f2:	4618      	mov	r0, r3
100086f4:	3710      	adds	r7, #16
100086f6:	46bd      	mov	sp, r7
100086f8:	bd80      	pop	{r7, pc}

100086fa <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
100086fa:	b580      	push	{r7, lr}
100086fc:	b086      	sub	sp, #24
100086fe:	af00      	add	r7, sp, #0
10008700:	60f8      	str	r0, [r7, #12]
10008702:	607a      	str	r2, [r7, #4]
10008704:	603b      	str	r3, [r7, #0]
10008706:	460b      	mov	r3, r1
10008708:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
1000870a:	2300      	movs	r3, #0
1000870c:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
1000870e:	697b      	ldr	r3, [r7, #20]
10008710:	2b00      	cmp	r3, #0
10008712:	d11e      	bne.n	10008752 <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
10008714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008716:	68fa      	ldr	r2, [r7, #12]
10008718:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
1000871a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000871c:	687a      	ldr	r2, [r7, #4]
1000871e:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
10008720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008722:	897a      	ldrh	r2, [r7, #10]
10008724:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
10008726:	683b      	ldr	r3, [r7, #0]
10008728:	891a      	ldrh	r2, [r3, #8]
1000872a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000872c:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
1000872e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008730:	895a      	ldrh	r2, [r3, #10]
10008732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008734:	849a      	strh	r2, [r3, #36]	@ 0x24
		vq->callback = callback;
10008736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008738:	6a3a      	ldr	r2, [r7, #32]
1000873a:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
1000873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000873e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008740:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
10008742:	683b      	ldr	r3, [r7, #0]
10008744:	6819      	ldr	r1, [r3, #0]
10008746:	683b      	ldr	r3, [r7, #0]
10008748:	685b      	ldr	r3, [r3, #4]
1000874a:	461a      	mov	r2, r3
1000874c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000874e:	f000 f8ef 	bl	10008930 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
10008752:	697b      	ldr	r3, [r7, #20]
}
10008754:	4618      	mov	r0, r3
10008756:	3718      	adds	r7, #24
10008758:	46bd      	mov	sp, r7
1000875a:	bd80      	pop	{r7, pc}

1000875c <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
1000875c:	b480      	push	{r7}
1000875e:	b083      	sub	sp, #12
10008760:	af00      	add	r7, sp, #0
10008762:	6078      	str	r0, [r7, #4]
10008764:	460b      	mov	r3, r1
10008766:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
10008768:	687b      	ldr	r3, [r7, #4]
1000876a:	699a      	ldr	r2, [r3, #24]
1000876c:	887b      	ldrh	r3, [r7, #2]
1000876e:	011b      	lsls	r3, r3, #4
10008770:	4413      	add	r3, r2
10008772:	689b      	ldr	r3, [r3, #8]
}
10008774:	4618      	mov	r0, r3
10008776:	370c      	adds	r7, #12
10008778:	46bd      	mov	sp, r7
1000877a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000877e:	4770      	bx	lr

10008780 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
10008780:	b580      	push	{r7, lr}
10008782:	b086      	sub	sp, #24
10008784:	af00      	add	r7, sp, #0
10008786:	60f8      	str	r0, [r7, #12]
10008788:	60b9      	str	r1, [r7, #8]
1000878a:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
1000878c:	2300      	movs	r3, #0
1000878e:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
10008790:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10008794:	68fb      	ldr	r3, [r7, #12]
10008796:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10008798:	68fb      	ldr	r3, [r7, #12]
1000879a:	69db      	ldr	r3, [r3, #28]
1000879c:	885b      	ldrh	r3, [r3, #2]
1000879e:	b29b      	uxth	r3, r3
100087a0:	429a      	cmp	r2, r3
100087a2:	d101      	bne.n	100087a8 <virtqueue_get_available_buffer+0x28>
		return NULL;
100087a4:	2300      	movs	r3, #0
100087a6:	e02f      	b.n	10008808 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
100087a8:	68fb      	ldr	r3, [r7, #12]
100087aa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
100087ac:	1c5a      	adds	r2, r3, #1
100087ae:	b291      	uxth	r1, r2
100087b0:	68fa      	ldr	r2, [r7, #12]
100087b2:	8611      	strh	r1, [r2, #48]	@ 0x30
100087b4:	b21a      	sxth	r2, r3
100087b6:	68fb      	ldr	r3, [r7, #12]
100087b8:	895b      	ldrh	r3, [r3, #10]
100087ba:	3b01      	subs	r3, #1
100087bc:	b29b      	uxth	r3, r3
100087be:	b21b      	sxth	r3, r3
100087c0:	4013      	ands	r3, r2
100087c2:	b21b      	sxth	r3, r3
100087c4:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
100087c6:	68fb      	ldr	r3, [r7, #12]
100087c8:	69da      	ldr	r2, [r3, #28]
100087ca:	8afb      	ldrh	r3, [r7, #22]
100087cc:	005b      	lsls	r3, r3, #1
100087ce:	4413      	add	r3, r2
100087d0:	889b      	ldrh	r3, [r3, #4]
100087d2:	b29a      	uxth	r2, r3
100087d4:	68bb      	ldr	r3, [r7, #8]
100087d6:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
100087d8:	68fb      	ldr	r3, [r7, #12]
100087da:	699a      	ldr	r2, [r3, #24]
100087dc:	68bb      	ldr	r3, [r7, #8]
100087de:	881b      	ldrh	r3, [r3, #0]
100087e0:	011b      	lsls	r3, r3, #4
100087e2:	18d1      	adds	r1, r2, r3
100087e4:	680a      	ldr	r2, [r1, #0]
100087e6:	684b      	ldr	r3, [r1, #4]
100087e8:	4613      	mov	r3, r2
100087ea:	4619      	mov	r1, r3
100087ec:	68f8      	ldr	r0, [r7, #12]
100087ee:	f7ff ff73 	bl	100086d8 <virtqueue_phys_to_virt>
100087f2:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
100087f4:	68fb      	ldr	r3, [r7, #12]
100087f6:	699a      	ldr	r2, [r3, #24]
100087f8:	68bb      	ldr	r3, [r7, #8]
100087fa:	881b      	ldrh	r3, [r3, #0]
100087fc:	011b      	lsls	r3, r3, #4
100087fe:	4413      	add	r3, r2
10008800:	689a      	ldr	r2, [r3, #8]
10008802:	687b      	ldr	r3, [r7, #4]
10008804:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
10008806:	693b      	ldr	r3, [r7, #16]
}
10008808:	4618      	mov	r0, r3
1000880a:	3718      	adds	r7, #24
1000880c:	46bd      	mov	sp, r7
1000880e:	bd80      	pop	{r7, pc}

10008810 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
10008810:	b480      	push	{r7}
10008812:	b087      	sub	sp, #28
10008814:	af00      	add	r7, sp, #0
10008816:	60f8      	str	r0, [r7, #12]
10008818:	460b      	mov	r3, r1
1000881a:	607a      	str	r2, [r7, #4]
1000881c:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
1000881e:	2300      	movs	r3, #0
10008820:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
10008822:	68fb      	ldr	r3, [r7, #12]
10008824:	895b      	ldrh	r3, [r3, #10]
10008826:	897a      	ldrh	r2, [r7, #10]
10008828:	429a      	cmp	r2, r3
1000882a:	d901      	bls.n	10008830 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
1000882c:	4b18      	ldr	r3, [pc, #96]	@ (10008890 <virtqueue_add_consumed_buffer+0x80>)
1000882e:	e029      	b.n	10008884 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
10008830:	68fb      	ldr	r3, [r7, #12]
10008832:	6a1b      	ldr	r3, [r3, #32]
10008834:	885b      	ldrh	r3, [r3, #2]
10008836:	b29b      	uxth	r3, r3
10008838:	b21a      	sxth	r2, r3
1000883a:	68fb      	ldr	r3, [r7, #12]
1000883c:	895b      	ldrh	r3, [r3, #10]
1000883e:	3b01      	subs	r3, #1
10008840:	b29b      	uxth	r3, r3
10008842:	b21b      	sxth	r3, r3
10008844:	4013      	ands	r3, r2
10008846:	b21b      	sxth	r3, r3
10008848:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
1000884a:	68fb      	ldr	r3, [r7, #12]
1000884c:	6a1a      	ldr	r2, [r3, #32]
1000884e:	8a7b      	ldrh	r3, [r7, #18]
10008850:	00db      	lsls	r3, r3, #3
10008852:	4413      	add	r3, r2
10008854:	3304      	adds	r3, #4
10008856:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
10008858:	897a      	ldrh	r2, [r7, #10]
1000885a:	697b      	ldr	r3, [r7, #20]
1000885c:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
1000885e:	697b      	ldr	r3, [r7, #20]
10008860:	687a      	ldr	r2, [r7, #4]
10008862:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
10008864:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
10008868:	68fb      	ldr	r3, [r7, #12]
1000886a:	6a1b      	ldr	r3, [r3, #32]
1000886c:	885a      	ldrh	r2, [r3, #2]
1000886e:	b292      	uxth	r2, r2
10008870:	3201      	adds	r2, #1
10008872:	b292      	uxth	r2, r2
10008874:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
10008876:	68fb      	ldr	r3, [r7, #12]
10008878:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
1000887a:	3301      	adds	r3, #1
1000887c:	b29a      	uxth	r2, r3
1000887e:	68fb      	ldr	r3, [r7, #12]
10008880:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
10008882:	2300      	movs	r3, #0
}
10008884:	4618      	mov	r0, r3
10008886:	371c      	adds	r7, #28
10008888:	46bd      	mov	sp, r7
1000888a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000888e:	4770      	bx	lr
10008890:	fffff441 	.word	0xfffff441

10008894 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10008894:	b480      	push	{r7}
10008896:	b083      	sub	sp, #12
10008898:	af00      	add	r7, sp, #0
1000889a:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000889c:	6879      	ldr	r1, [r7, #4]
1000889e:	6809      	ldr	r1, [r1, #0]
100088a0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
100088a4:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
100088a8:	2300      	movs	r3, #0
100088aa:	4313      	orrs	r3, r2
100088ac:	d015      	beq.n	100088da <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
100088ae:	687b      	ldr	r3, [r7, #4]
100088b0:	681b      	ldr	r3, [r3, #0]
100088b2:	699b      	ldr	r3, [r3, #24]
100088b4:	2b01      	cmp	r3, #1
100088b6:	d11f      	bne.n	100088f8 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
100088b8:	687b      	ldr	r3, [r7, #4]
100088ba:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
100088bc:	687b      	ldr	r3, [r7, #4]
100088be:	895b      	ldrh	r3, [r3, #10]
100088c0:	1ad3      	subs	r3, r2, r3
100088c2:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
100088c4:	687b      	ldr	r3, [r7, #4]
100088c6:	6a1a      	ldr	r2, [r3, #32]
100088c8:	687b      	ldr	r3, [r7, #4]
100088ca:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
100088cc:	3901      	subs	r1, #1
100088ce:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
100088d0:	00db      	lsls	r3, r3, #3
100088d2:	4413      	add	r3, r2
100088d4:	460a      	mov	r2, r1
100088d6:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
100088d8:	e00e      	b.n	100088f8 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
100088da:	687b      	ldr	r3, [r7, #4]
100088dc:	681b      	ldr	r3, [r3, #0]
100088de:	699b      	ldr	r3, [r3, #24]
100088e0:	2b01      	cmp	r3, #1
100088e2:	d109      	bne.n	100088f8 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
100088e4:	687b      	ldr	r3, [r7, #4]
100088e6:	6a1b      	ldr	r3, [r3, #32]
100088e8:	881b      	ldrh	r3, [r3, #0]
100088ea:	b29a      	uxth	r2, r3
100088ec:	687b      	ldr	r3, [r7, #4]
100088ee:	6a1b      	ldr	r3, [r3, #32]
100088f0:	f042 0201 	orr.w	r2, r2, #1
100088f4:	b292      	uxth	r2, r2
100088f6:	801a      	strh	r2, [r3, #0]
}
100088f8:	bf00      	nop
100088fa:	370c      	adds	r7, #12
100088fc:	46bd      	mov	sp, r7
100088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
10008902:	4770      	bx	lr

10008904 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
10008904:	b580      	push	{r7, lr}
10008906:	b082      	sub	sp, #8
10008908:	af00      	add	r7, sp, #0
1000890a:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
1000890c:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
10008910:	6878      	ldr	r0, [r7, #4]
10008912:	f000 f835 	bl	10008980 <vq_ring_must_notify>
10008916:	4603      	mov	r3, r0
10008918:	2b00      	cmp	r3, #0
1000891a:	d002      	beq.n	10008922 <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
1000891c:	6878      	ldr	r0, [r7, #4]
1000891e:	f000 f87d 	bl	10008a1c <vq_ring_notify>

	vq->vq_queued_cnt = 0;
10008922:	687b      	ldr	r3, [r7, #4]
10008924:	2200      	movs	r2, #0
10008926:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);
}
10008928:	bf00      	nop
1000892a:	3708      	adds	r7, #8
1000892c:	46bd      	mov	sp, r7
1000892e:	bd80      	pop	{r7, pc}

10008930 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
10008930:	b580      	push	{r7, lr}
10008932:	b086      	sub	sp, #24
10008934:	af00      	add	r7, sp, #0
10008936:	60f8      	str	r0, [r7, #12]
10008938:	60b9      	str	r1, [r7, #8]
1000893a:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
1000893c:	68fb      	ldr	r3, [r7, #12]
1000893e:	895b      	ldrh	r3, [r3, #10]
10008940:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
10008942:	68fb      	ldr	r3, [r7, #12]
10008944:	3314      	adds	r3, #20
10008946:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
10008948:	6979      	ldr	r1, [r7, #20]
1000894a:	687b      	ldr	r3, [r7, #4]
1000894c:	68ba      	ldr	r2, [r7, #8]
1000894e:	6938      	ldr	r0, [r7, #16]
10008950:	f7ff fdda 	bl	10008508 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
10008954:	bf00      	nop
10008956:	3718      	adds	r7, #24
10008958:	46bd      	mov	sp, r7
1000895a:	bd80      	pop	{r7, pc}

1000895c <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
1000895c:	b580      	push	{r7, lr}
1000895e:	b082      	sub	sp, #8
10008960:	af00      	add	r7, sp, #0
10008962:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
10008964:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
10008968:	687b      	ldr	r3, [r7, #4]
1000896a:	68db      	ldr	r3, [r3, #12]
1000896c:	2b00      	cmp	r3, #0
1000896e:	d003      	beq.n	10008978 <virtqueue_notification+0x1c>
		vq->callback(vq);
10008970:	687b      	ldr	r3, [r7, #4]
10008972:	68db      	ldr	r3, [r3, #12]
10008974:	6878      	ldr	r0, [r7, #4]
10008976:	4798      	blx	r3
}
10008978:	bf00      	nop
1000897a:	3708      	adds	r7, #8
1000897c:	46bd      	mov	sp, r7
1000897e:	bd80      	pop	{r7, pc}

10008980 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
10008980:	b580      	push	{r7, lr}
10008982:	b084      	sub	sp, #16
10008984:	af00      	add	r7, sp, #0
10008986:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10008988:	6879      	ldr	r1, [r7, #4]
1000898a:	6809      	ldr	r1, [r1, #0]
1000898c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10008990:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10008994:	2300      	movs	r3, #0
10008996:	4313      	orrs	r3, r2
10008998:	d02a      	beq.n	100089f0 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000899a:	687b      	ldr	r3, [r7, #4]
1000899c:	681b      	ldr	r3, [r3, #0]
1000899e:	699b      	ldr	r3, [r3, #24]
100089a0:	2b01      	cmp	r3, #1
100089a2:	d136      	bne.n	10008a12 <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
100089a4:	687b      	ldr	r3, [r7, #4]
100089a6:	6a1b      	ldr	r3, [r3, #32]
100089a8:	789a      	ldrb	r2, [r3, #2]
100089aa:	78db      	ldrb	r3, [r3, #3]
100089ac:	021b      	lsls	r3, r3, #8
100089ae:	4313      	orrs	r3, r2
100089b0:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
100089b2:	687b      	ldr	r3, [r7, #4]
100089b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
100089b6:	89fa      	ldrh	r2, [r7, #14]
100089b8:	1ad3      	subs	r3, r2, r3
100089ba:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
100089bc:	687b      	ldr	r3, [r7, #4]
100089be:	69da      	ldr	r2, [r3, #28]
100089c0:	687b      	ldr	r3, [r7, #4]
100089c2:	6959      	ldr	r1, [r3, #20]
100089c4:	004b      	lsls	r3, r1, #1
100089c6:	4413      	add	r3, r2
100089c8:	7918      	ldrb	r0, [r3, #4]
100089ca:	004b      	lsls	r3, r1, #1
100089cc:	4413      	add	r3, r2
100089ce:	795b      	ldrb	r3, [r3, #5]
100089d0:	021b      	lsls	r3, r3, #8
100089d2:	4303      	orrs	r3, r0
100089d4:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
100089d6:	89ba      	ldrh	r2, [r7, #12]
100089d8:	89f9      	ldrh	r1, [r7, #14]
100089da:	897b      	ldrh	r3, [r7, #10]
100089dc:	4618      	mov	r0, r3
100089de:	f7ff fdbc 	bl	1000855a <vring_need_event>
100089e2:	4603      	mov	r3, r0
						prev_idx) != 0;
100089e4:	2b00      	cmp	r3, #0
100089e6:	bf14      	ite	ne
100089e8:	2301      	movne	r3, #1
100089ea:	2300      	moveq	r3, #0
100089ec:	b2db      	uxtb	r3, r3
100089ee:	e011      	b.n	10008a14 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
100089f0:	687b      	ldr	r3, [r7, #4]
100089f2:	681b      	ldr	r3, [r3, #0]
100089f4:	699b      	ldr	r3, [r3, #24]
100089f6:	2b01      	cmp	r3, #1
100089f8:	d10b      	bne.n	10008a12 <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
100089fa:	687b      	ldr	r3, [r7, #4]
100089fc:	69db      	ldr	r3, [r3, #28]
100089fe:	881b      	ldrh	r3, [r3, #0]
10008a00:	b29b      	uxth	r3, r3
10008a02:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
10008a06:	2b00      	cmp	r3, #0
10008a08:	bf0c      	ite	eq
10008a0a:	2301      	moveq	r3, #1
10008a0c:	2300      	movne	r3, #0
10008a0e:	b2db      	uxtb	r3, r3
10008a10:	e000      	b.n	10008a14 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
10008a12:	2300      	movs	r3, #0
}
10008a14:	4618      	mov	r0, r3
10008a16:	3710      	adds	r7, #16
10008a18:	46bd      	mov	sp, r7
10008a1a:	bd80      	pop	{r7, pc}

10008a1c <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
10008a1c:	b580      	push	{r7, lr}
10008a1e:	b082      	sub	sp, #8
10008a20:	af00      	add	r7, sp, #0
10008a22:	6078      	str	r0, [r7, #4]
	if (vq->notify)
10008a24:	687b      	ldr	r3, [r7, #4]
10008a26:	691b      	ldr	r3, [r3, #16]
10008a28:	2b00      	cmp	r3, #0
10008a2a:	d003      	beq.n	10008a34 <vq_ring_notify+0x18>
		vq->notify(vq);
10008a2c:	687b      	ldr	r3, [r7, #4]
10008a2e:	691b      	ldr	r3, [r3, #16]
10008a30:	6878      	ldr	r0, [r7, #4]
10008a32:	4798      	blx	r3
}
10008a34:	bf00      	nop
10008a36:	3708      	adds	r7, #8
10008a38:	46bd      	mov	sp, r7
10008a3a:	bd80      	pop	{r7, pc}

10008a3c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
10008a3c:	b580      	push	{r7, lr}
10008a3e:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
10008a40:	4b0d      	ldr	r3, [pc, #52]	@ (10008a78 <MAILBOX_Init+0x3c>)
10008a42:	2201      	movs	r2, #1
10008a44:	2100      	movs	r1, #0
10008a46:	480d      	ldr	r0, [pc, #52]	@ (10008a7c <MAILBOX_Init+0x40>)
10008a48:	f7f9 f8f0 	bl	10001c2c <HAL_IPCC_ActivateNotification>
10008a4c:	4603      	mov	r3, r0
10008a4e:	2b00      	cmp	r3, #0
10008a50:	d002      	beq.n	10008a58 <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
10008a52:	f04f 33ff 	mov.w	r3, #4294967295
10008a56:	e00c      	b.n	10008a72 <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
10008a58:	4b09      	ldr	r3, [pc, #36]	@ (10008a80 <MAILBOX_Init+0x44>)
10008a5a:	2201      	movs	r2, #1
10008a5c:	2101      	movs	r1, #1
10008a5e:	4807      	ldr	r0, [pc, #28]	@ (10008a7c <MAILBOX_Init+0x40>)
10008a60:	f7f9 f8e4 	bl	10001c2c <HAL_IPCC_ActivateNotification>
10008a64:	4603      	mov	r3, r0
10008a66:	2b00      	cmp	r3, #0
10008a68:	d002      	beq.n	10008a70 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
10008a6a:	f04f 33ff 	mov.w	r3, #4294967295
10008a6e:	e000      	b.n	10008a72 <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
10008a70:	2300      	movs	r3, #0
}
10008a72:	4618      	mov	r0, r3
10008a74:	bd80      	pop	{r7, pc}
10008a76:	bf00      	nop
10008a78:	10008b3d 	.word	0x10008b3d
10008a7c:	100201d0 	.word	0x100201d0
10008a80:	10008b69 	.word	0x10008b69

10008a84 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
10008a84:	b580      	push	{r7, lr}
10008a86:	b084      	sub	sp, #16
10008a88:	af00      	add	r7, sp, #0
10008a8a:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */
  int ret = -1;
10008a8c:	f04f 33ff 	mov.w	r3, #4294967295
10008a90:	60fb      	str	r3, [r7, #12]

   /* USER CODE BEGIN PRE_MAILBOX_POLL */

   /* USER CODE END  PRE_MAILBOX_POLL */

   if (msg_received_ch1 == MBOX_BUF_FREE) {
10008a92:	4b0f      	ldr	r3, [pc, #60]	@ (10008ad0 <MAILBOX_Poll+0x4c>)
10008a94:	681b      	ldr	r3, [r3, #0]
10008a96:	2b02      	cmp	r3, #2
10008a98:	d108      	bne.n	10008aac <MAILBOX_Poll+0x28>
   /* USER CODE BEGIN MSG_CHANNEL1 */

   /* USER CODE END  MSG_CHANNEL1 */

    OPENAMP_log_dbg("Running virt0 (ch_1 buf free)\r\n");
    rproc_virtio_notified(vdev, VRING0_ID);
10008a9a:	2100      	movs	r1, #0
10008a9c:	6878      	ldr	r0, [r7, #4]
10008a9e:	f7fe fb98 	bl	100071d2 <rproc_virtio_notified>
    ret = 0;
10008aa2:	2300      	movs	r3, #0
10008aa4:	60fb      	str	r3, [r7, #12]
    msg_received_ch1 = MBOX_NO_MSG;
10008aa6:	4b0a      	ldr	r3, [pc, #40]	@ (10008ad0 <MAILBOX_Poll+0x4c>)
10008aa8:	2200      	movs	r2, #0
10008aaa:	601a      	str	r2, [r3, #0]
  }

  if (msg_received_ch2 == MBOX_NEW_MSG) {
10008aac:	4b09      	ldr	r3, [pc, #36]	@ (10008ad4 <MAILBOX_Poll+0x50>)
10008aae:	681b      	ldr	r3, [r3, #0]
10008ab0:	2b01      	cmp	r3, #1
10008ab2:	d108      	bne.n	10008ac6 <MAILBOX_Poll+0x42>
   /* USER CODE BEGIN MSG_CHANNEL2 */

   /* USER CODE END  MSG_CHANNEL2 */

    OPENAMP_log_dbg("Running virt1 (ch_2 new msg)\r\n");
    rproc_virtio_notified(vdev, VRING1_ID);
10008ab4:	2101      	movs	r1, #1
10008ab6:	6878      	ldr	r0, [r7, #4]
10008ab8:	f7fe fb8b 	bl	100071d2 <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
10008abc:	4b05      	ldr	r3, [pc, #20]	@ (10008ad4 <MAILBOX_Poll+0x50>)
10008abe:	2200      	movs	r2, #0
10008ac0:	601a      	str	r2, [r3, #0]

    ret = 0;
10008ac2:	2300      	movs	r3, #0
10008ac4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_MAILBOX_POLL */

  /* USER CODE END  POST_MAILBOX_POLL */

  return ret;
10008ac6:	68fb      	ldr	r3, [r7, #12]
}
10008ac8:	4618      	mov	r0, r3
10008aca:	3710      	adds	r7, #16
10008acc:	46bd      	mov	sp, r7
10008ace:	bd80      	pop	{r7, pc}
10008ad0:	10020354 	.word	0x10020354
10008ad4:	10020358 	.word	0x10020358

10008ad8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
10008ad8:	b580      	push	{r7, lr}
10008ada:	b084      	sub	sp, #16
10008adc:	af00      	add	r7, sp, #0
10008ade:	6078      	str	r0, [r7, #4]
10008ae0:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
10008ae2:	683b      	ldr	r3, [r7, #0]
10008ae4:	2b00      	cmp	r3, #0
10008ae6:	d102      	bne.n	10008aee <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
10008ae8:	2300      	movs	r3, #0
10008aea:	60fb      	str	r3, [r7, #12]
10008aec:	e008      	b.n	10008b00 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
10008aee:	683b      	ldr	r3, [r7, #0]
10008af0:	2b01      	cmp	r3, #1
10008af2:	d102      	bne.n	10008afa <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10008af4:	2301      	movs	r3, #1
10008af6:	60fb      	str	r3, [r7, #12]
10008af8:	e002      	b.n	10008b00 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
10008afa:	f04f 33ff 	mov.w	r3, #4294967295
10008afe:	e016      	b.n	10008b2e <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
10008b00:	2200      	movs	r2, #0
10008b02:	68f9      	ldr	r1, [r7, #12]
10008b04:	480c      	ldr	r0, [pc, #48]	@ (10008b38 <MAILBOX_Notify+0x60>)
10008b06:	f7f9 f8df 	bl	10001cc8 <HAL_IPCC_GetChannelStatus>
10008b0a:	4603      	mov	r3, r0
10008b0c:	2b01      	cmp	r3, #1
10008b0e:	d108      	bne.n	10008b22 <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
10008b10:	bf00      	nop
10008b12:	2200      	movs	r2, #0
10008b14:	68f9      	ldr	r1, [r7, #12]
10008b16:	4808      	ldr	r0, [pc, #32]	@ (10008b38 <MAILBOX_Notify+0x60>)
10008b18:	f7f9 f8d6 	bl	10001cc8 <HAL_IPCC_GetChannelStatus>
10008b1c:	4603      	mov	r3, r0
10008b1e:	2b01      	cmp	r3, #1
10008b20:	d0f7      	beq.n	10008b12 <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
10008b22:	2200      	movs	r2, #0
10008b24:	68f9      	ldr	r1, [r7, #12]
10008b26:	4804      	ldr	r0, [pc, #16]	@ (10008b38 <MAILBOX_Notify+0x60>)
10008b28:	f7f9 f902 	bl	10001d30 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10008b2c:	2300      	movs	r3, #0
}
10008b2e:	4618      	mov	r0, r3
10008b30:	3710      	adds	r7, #16
10008b32:	46bd      	mov	sp, r7
10008b34:	bd80      	pop	{r7, pc}
10008b36:	bf00      	nop
10008b38:	100201d0 	.word	0x100201d0

10008b3c <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10008b3c:	b580      	push	{r7, lr}
10008b3e:	b084      	sub	sp, #16
10008b40:	af00      	add	r7, sp, #0
10008b42:	60f8      	str	r0, [r7, #12]
10008b44:	60b9      	str	r1, [r7, #8]
10008b46:	4613      	mov	r3, r2
10008b48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
10008b4a:	4b06      	ldr	r3, [pc, #24]	@ (10008b64 <IPCC_channel1_callback+0x28>)
10008b4c:	2202      	movs	r2, #2
10008b4e:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10008b50:	2201      	movs	r2, #1
10008b52:	68b9      	ldr	r1, [r7, #8]
10008b54:	68f8      	ldr	r0, [r7, #12]
10008b56:	f7f9 f8eb 	bl	10001d30 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
10008b5a:	bf00      	nop
10008b5c:	3710      	adds	r7, #16
10008b5e:	46bd      	mov	sp, r7
10008b60:	bd80      	pop	{r7, pc}
10008b62:	bf00      	nop
10008b64:	10020354 	.word	0x10020354

10008b68 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10008b68:	b580      	push	{r7, lr}
10008b6a:	b084      	sub	sp, #16
10008b6c:	af00      	add	r7, sp, #0
10008b6e:	60f8      	str	r0, [r7, #12]
10008b70:	60b9      	str	r1, [r7, #8]
10008b72:	4613      	mov	r3, r2
10008b74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
10008b76:	4b06      	ldr	r3, [pc, #24]	@ (10008b90 <IPCC_channel2_callback+0x28>)
10008b78:	2201      	movs	r2, #1
10008b7a:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10008b7c:	2201      	movs	r2, #1
10008b7e:	68b9      	ldr	r1, [r7, #8]
10008b80:	68f8      	ldr	r0, [r7, #12]
10008b82:	f7f9 f8d5 	bl	10001d30 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
10008b86:	bf00      	nop
10008b88:	3710      	adds	r7, #16
10008b8a:	46bd      	mov	sp, r7
10008b8c:	bd80      	pop	{r7, pc}
10008b8e:	bf00      	nop
10008b90:	10020358 	.word	0x10020358

10008b94 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
10008b94:	b480      	push	{r7}
10008b96:	b083      	sub	sp, #12
10008b98:	af00      	add	r7, sp, #0
10008b9a:	6078      	str	r0, [r7, #4]
10008b9c:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
10008b9e:	687b      	ldr	r3, [r7, #4]
10008ba0:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
10008ba2:	683a      	ldr	r2, [r7, #0]
10008ba4:	429a      	cmp	r2, r3
10008ba6:	d209      	bcs.n	10008bbc <metal_device_io_region+0x28>
10008ba8:	683a      	ldr	r2, [r7, #0]
10008baa:	4613      	mov	r3, r2
10008bac:	00db      	lsls	r3, r3, #3
10008bae:	1a9b      	subs	r3, r3, r2
10008bb0:	00db      	lsls	r3, r3, #3
10008bb2:	3308      	adds	r3, #8
10008bb4:	687a      	ldr	r2, [r7, #4]
10008bb6:	4413      	add	r3, r2
10008bb8:	3304      	adds	r3, #4
10008bba:	e000      	b.n	10008bbe <metal_device_io_region+0x2a>
10008bbc:	2300      	movs	r3, #0
}
10008bbe:	4618      	mov	r0, r3
10008bc0:	370c      	adds	r7, #12
10008bc2:	46bd      	mov	sp, r7
10008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
10008bc8:	4770      	bx	lr
	...

10008bcc <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
10008bcc:	b590      	push	{r4, r7, lr}
10008bce:	b08d      	sub	sp, #52	@ 0x34
10008bd0:	af04      	add	r7, sp, #16
10008bd2:	6078      	str	r0, [r7, #4]
  int status = 0;
10008bd4:	2300      	movs	r3, #0
10008bd6:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
10008bd8:	2300      	movs	r3, #0
10008bda:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
10008bdc:	4a41      	ldr	r2, [pc, #260]	@ (10008ce4 <OPENAMP_shmem_init+0x118>)
10008bde:	f107 0310 	add.w	r3, r7, #16
10008be2:	e892 0003 	ldmia.w	r2, {r0, r1}
10008be6:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
10008bea:	2300      	movs	r3, #0
10008bec:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
10008bee:	2300      	movs	r3, #0
10008bf0:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
10008bf2:	f107 0310 	add.w	r3, r7, #16
10008bf6:	4618      	mov	r0, r3
10008bf8:	f7fd fec0 	bl	1000697c <metal_init>

  status = metal_register_generic_device(&shm_device);
10008bfc:	483a      	ldr	r0, [pc, #232]	@ (10008ce8 <OPENAMP_shmem_init+0x11c>)
10008bfe:	f7fd fd67 	bl	100066d0 <metal_register_generic_device>
10008c02:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10008c04:	69fb      	ldr	r3, [r7, #28]
10008c06:	2b00      	cmp	r3, #0
10008c08:	d001      	beq.n	10008c0e <OPENAMP_shmem_init+0x42>
    return status;
10008c0a:	69fb      	ldr	r3, [r7, #28]
10008c0c:	e066      	b.n	10008cdc <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
10008c0e:	f107 0318 	add.w	r3, r7, #24
10008c12:	461a      	mov	r2, r3
10008c14:	4935      	ldr	r1, [pc, #212]	@ (10008cec <OPENAMP_shmem_init+0x120>)
10008c16:	4836      	ldr	r0, [pc, #216]	@ (10008cf0 <OPENAMP_shmem_init+0x124>)
10008c18:	f7fd fd1c 	bl	10006654 <metal_device_open>
10008c1c:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10008c1e:	69fb      	ldr	r3, [r7, #28]
10008c20:	2b00      	cmp	r3, #0
10008c22:	d001      	beq.n	10008c28 <OPENAMP_shmem_init+0x5c>
    return status;
10008c24:	69fb      	ldr	r3, [r7, #28]
10008c26:	e059      	b.n	10008cdc <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
10008c28:	4a32      	ldr	r2, [pc, #200]	@ (10008cf4 <OPENAMP_shmem_init+0x128>)
10008c2a:	4b33      	ldr	r3, [pc, #204]	@ (10008cf8 <OPENAMP_shmem_init+0x12c>)
10008c2c:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10008c2e:	69bb      	ldr	r3, [r7, #24]
10008c30:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
10008c34:	4a31      	ldr	r2, [pc, #196]	@ (10008cfc <OPENAMP_shmem_init+0x130>)
10008c36:	4b2f      	ldr	r3, [pc, #188]	@ (10008cf4 <OPENAMP_shmem_init+0x128>)
10008c38:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10008c3a:	461a      	mov	r2, r3
10008c3c:	2300      	movs	r3, #0
10008c3e:	9302      	str	r3, [sp, #8]
10008c40:	2300      	movs	r3, #0
10008c42:	9301      	str	r3, [sp, #4]
10008c44:	f04f 33ff 	mov.w	r3, #4294967295
10008c48:	9300      	str	r3, [sp, #0]
10008c4a:	4613      	mov	r3, r2
10008c4c:	4a2a      	ldr	r2, [pc, #168]	@ (10008cf8 <OPENAMP_shmem_init+0x12c>)
10008c4e:	4929      	ldr	r1, [pc, #164]	@ (10008cf4 <OPENAMP_shmem_init+0x128>)
10008c50:	f7fd fee2 	bl	10006a18 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
10008c54:	69bb      	ldr	r3, [r7, #24]
10008c56:	2100      	movs	r1, #0
10008c58:	4618      	mov	r0, r3
10008c5a:	f7ff ff9b 	bl	10008b94 <metal_device_io_region>
10008c5e:	4603      	mov	r3, r0
10008c60:	4a27      	ldr	r2, [pc, #156]	@ (10008d00 <OPENAMP_shmem_init+0x134>)
10008c62:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
10008c64:	4b26      	ldr	r3, [pc, #152]	@ (10008d00 <OPENAMP_shmem_init+0x134>)
10008c66:	681b      	ldr	r3, [r3, #0]
10008c68:	2b00      	cmp	r3, #0
10008c6a:	d102      	bne.n	10008c72 <OPENAMP_shmem_init+0xa6>
    return -1;
10008c6c:	f04f 33ff 	mov.w	r3, #4294967295
10008c70:	e034      	b.n	10008cdc <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
10008c72:	f107 0208 	add.w	r2, r7, #8
10008c76:	f107 030c 	add.w	r3, r7, #12
10008c7a:	4619      	mov	r1, r3
10008c7c:	6878      	ldr	r0, [r7, #4]
10008c7e:	f000 f903 	bl	10008e88 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
10008c82:	68fb      	ldr	r3, [r7, #12]
10008c84:	4a1f      	ldr	r2, [pc, #124]	@ (10008d04 <OPENAMP_shmem_init+0x138>)
10008c86:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
10008c88:	4b1e      	ldr	r3, [pc, #120]	@ (10008d04 <OPENAMP_shmem_init+0x138>)
10008c8a:	681b      	ldr	r3, [r3, #0]
10008c8c:	2b00      	cmp	r3, #0
10008c8e:	d102      	bne.n	10008c96 <OPENAMP_shmem_init+0xca>
  {
    return -1;
10008c90:	f04f 33ff 	mov.w	r3, #4294967295
10008c94:	e022      	b.n	10008cdc <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
10008c96:	69bb      	ldr	r3, [r7, #24]
10008c98:	f103 0044 	add.w	r0, r3, #68	@ 0x44
10008c9c:	4b19      	ldr	r3, [pc, #100]	@ (10008d04 <OPENAMP_shmem_init+0x138>)
10008c9e:	6819      	ldr	r1, [r3, #0]
10008ca0:	4b18      	ldr	r3, [pc, #96]	@ (10008d04 <OPENAMP_shmem_init+0x138>)
10008ca2:	681a      	ldr	r2, [r3, #0]
10008ca4:	68bb      	ldr	r3, [r7, #8]
10008ca6:	461c      	mov	r4, r3
10008ca8:	2300      	movs	r3, #0
10008caa:	9302      	str	r3, [sp, #8]
10008cac:	2300      	movs	r3, #0
10008cae:	9301      	str	r3, [sp, #4]
10008cb0:	f04f 33ff 	mov.w	r3, #4294967295
10008cb4:	9300      	str	r3, [sp, #0]
10008cb6:	4623      	mov	r3, r4
10008cb8:	f7fd feae 	bl	10006a18 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
10008cbc:	69bb      	ldr	r3, [r7, #24]
10008cbe:	2101      	movs	r1, #1
10008cc0:	4618      	mov	r0, r3
10008cc2:	f7ff ff67 	bl	10008b94 <metal_device_io_region>
10008cc6:	4603      	mov	r3, r0
10008cc8:	4a0f      	ldr	r2, [pc, #60]	@ (10008d08 <OPENAMP_shmem_init+0x13c>)
10008cca:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
10008ccc:	4b0e      	ldr	r3, [pc, #56]	@ (10008d08 <OPENAMP_shmem_init+0x13c>)
10008cce:	681b      	ldr	r3, [r3, #0]
10008cd0:	2b00      	cmp	r3, #0
10008cd2:	d102      	bne.n	10008cda <OPENAMP_shmem_init+0x10e>
    return -1;
10008cd4:	f04f 33ff 	mov.w	r3, #4294967295
10008cd8:	e000      	b.n	10008cdc <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
10008cda:	2300      	movs	r3, #0
}
10008cdc:	4618      	mov	r0, r3
10008cde:	3724      	adds	r7, #36	@ 0x24
10008ce0:	46bd      	mov	sp, r7
10008ce2:	bd90      	pop	{r4, r7, pc}
10008ce4:	1000a6c0 	.word	0x1000a6c0
10008ce8:	10020040 	.word	0x10020040
10008cec:	1000a6ac 	.word	0x1000a6ac
10008cf0:	1000a6b8 	.word	0x1000a6b8
10008cf4:	10040000 	.word	0x10040000
10008cf8:	10020400 	.word	0x10020400
10008cfc:	10050000 	.word	0x10050000
10008d00:	1002035c 	.word	0x1002035c
10008d04:	10020364 	.word	0x10020364
10008d08:	10020360 	.word	0x10020360

10008d0c <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10008d0c:	b590      	push	{r4, r7, lr}
10008d0e:	b08b      	sub	sp, #44	@ 0x2c
10008d10:	af04      	add	r7, sp, #16
10008d12:	6078      	str	r0, [r7, #4]
10008d14:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
10008d16:	2300      	movs	r3, #0
10008d18:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
10008d1a:	2300      	movs	r3, #0
10008d1c:	613b      	str	r3, [r7, #16]
  int status = 0;
10008d1e:	2300      	movs	r3, #0
10008d20:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
10008d22:	f7ff fe8b 	bl	10008a3c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
10008d26:	6878      	ldr	r0, [r7, #4]
10008d28:	f7ff ff50 	bl	10008bcc <OPENAMP_shmem_init>
10008d2c:	60f8      	str	r0, [r7, #12]
  if(status)
10008d2e:	68fb      	ldr	r3, [r7, #12]
10008d30:	2b00      	cmp	r3, #0
10008d32:	d001      	beq.n	10008d38 <MX_OPENAMP_Init+0x2c>
  {
    return status;
10008d34:	68fb      	ldr	r3, [r7, #12]
10008d36:	e068      	b.n	10008e0a <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
10008d38:	6878      	ldr	r0, [r7, #4]
10008d3a:	4b36      	ldr	r3, [pc, #216]	@ (10008e14 <MX_OPENAMP_Init+0x108>)
10008d3c:	681b      	ldr	r3, [r3, #0]
10008d3e:	f103 0218 	add.w	r2, r3, #24
10008d42:	4b35      	ldr	r3, [pc, #212]	@ (10008e18 <MX_OPENAMP_Init+0x10c>)
10008d44:	681b      	ldr	r3, [r3, #0]
10008d46:	2100      	movs	r1, #0
10008d48:	9102      	str	r1, [sp, #8]
10008d4a:	4934      	ldr	r1, [pc, #208]	@ (10008e1c <MX_OPENAMP_Init+0x110>)
10008d4c:	9101      	str	r1, [sp, #4]
10008d4e:	2100      	movs	r1, #0
10008d50:	9100      	str	r1, [sp, #0]
10008d52:	21ff      	movs	r1, #255	@ 0xff
10008d54:	f7fe f95e 	bl	10007014 <rproc_virtio_create_vdev>
10008d58:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
10008d5a:	693b      	ldr	r3, [r7, #16]
10008d5c:	2b00      	cmp	r3, #0
10008d5e:	d102      	bne.n	10008d66 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
10008d60:	f04f 33ff 	mov.w	r3, #4294967295
10008d64:	e051      	b.n	10008e0a <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
10008d66:	6938      	ldr	r0, [r7, #16]
10008d68:	f7fe fa6f 	bl	1000724a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
10008d6c:	4b29      	ldr	r3, [pc, #164]	@ (10008e14 <MX_OPENAMP_Init+0x108>)
10008d6e:	681b      	ldr	r3, [r3, #0]
10008d70:	3334      	adds	r3, #52	@ 0x34
10008d72:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10008d74:	697b      	ldr	r3, [r7, #20]
10008d76:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10008d78:	697b      	ldr	r3, [r7, #20]
10008d7a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10008d7c:	461c      	mov	r4, r3
10008d7e:	4b28      	ldr	r3, [pc, #160]	@ (10008e20 <MX_OPENAMP_Init+0x114>)
10008d80:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10008d82:	697a      	ldr	r2, [r7, #20]
10008d84:	6892      	ldr	r2, [r2, #8]
10008d86:	6979      	ldr	r1, [r7, #20]
10008d88:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10008d8a:	9102      	str	r1, [sp, #8]
10008d8c:	9201      	str	r2, [sp, #4]
10008d8e:	9300      	str	r3, [sp, #0]
10008d90:	4623      	mov	r3, r4
10008d92:	4602      	mov	r2, r0
10008d94:	2100      	movs	r1, #0
10008d96:	6938      	ldr	r0, [r7, #16]
10008d98:	f7fe f9ea 	bl	10007170 <rproc_virtio_init_vring>
10008d9c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10008d9e:	68fb      	ldr	r3, [r7, #12]
10008da0:	2b00      	cmp	r3, #0
10008da2:	d001      	beq.n	10008da8 <MX_OPENAMP_Init+0x9c>
  {
    return status;
10008da4:	68fb      	ldr	r3, [r7, #12]
10008da6:	e030      	b.n	10008e0a <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
10008da8:	4b1a      	ldr	r3, [pc, #104]	@ (10008e14 <MX_OPENAMP_Init+0x108>)
10008daa:	681b      	ldr	r3, [r3, #0]
10008dac:	3348      	adds	r3, #72	@ 0x48
10008dae:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10008db0:	697b      	ldr	r3, [r7, #20]
10008db2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10008db4:	697b      	ldr	r3, [r7, #20]
10008db6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10008db8:	461c      	mov	r4, r3
10008dba:	4b19      	ldr	r3, [pc, #100]	@ (10008e20 <MX_OPENAMP_Init+0x114>)
10008dbc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10008dbe:	697a      	ldr	r2, [r7, #20]
10008dc0:	6892      	ldr	r2, [r2, #8]
10008dc2:	6979      	ldr	r1, [r7, #20]
10008dc4:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10008dc6:	9102      	str	r1, [sp, #8]
10008dc8:	9201      	str	r2, [sp, #4]
10008dca:	9300      	str	r3, [sp, #0]
10008dcc:	4623      	mov	r3, r4
10008dce:	4602      	mov	r2, r0
10008dd0:	2101      	movs	r1, #1
10008dd2:	6938      	ldr	r0, [r7, #16]
10008dd4:	f7fe f9cc 	bl	10007170 <rproc_virtio_init_vring>
10008dd8:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10008dda:	68fb      	ldr	r3, [r7, #12]
10008ddc:	2b00      	cmp	r3, #0
10008dde:	d001      	beq.n	10008de4 <MX_OPENAMP_Init+0xd8>
  {
    return status;
10008de0:	68fb      	ldr	r3, [r7, #12]
10008de2:	e012      	b.n	10008e0a <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10008de4:	4a0f      	ldr	r2, [pc, #60]	@ (10008e24 <MX_OPENAMP_Init+0x118>)
10008de6:	4b10      	ldr	r3, [pc, #64]	@ (10008e28 <MX_OPENAMP_Init+0x11c>)
10008de8:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10008dea:	461a      	mov	r2, r3
10008dec:	f04f 31ff 	mov.w	r1, #4294967295
10008df0:	480e      	ldr	r0, [pc, #56]	@ (10008e2c <MX_OPENAMP_Init+0x120>)
10008df2:	f7fe fec2 	bl	10007b7a <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
10008df6:	4b0a      	ldr	r3, [pc, #40]	@ (10008e20 <MX_OPENAMP_Init+0x114>)
10008df8:	681b      	ldr	r3, [r3, #0]
10008dfa:	4a0c      	ldr	r2, [pc, #48]	@ (10008e2c <MX_OPENAMP_Init+0x120>)
10008dfc:	9200      	str	r2, [sp, #0]
10008dfe:	683a      	ldr	r2, [r7, #0]
10008e00:	6939      	ldr	r1, [r7, #16]
10008e02:	480b      	ldr	r0, [pc, #44]	@ (10008e30 <MX_OPENAMP_Init+0x124>)
10008e04:	f7ff f9b6 	bl	10008174 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
10008e08:	2300      	movs	r3, #0
}
10008e0a:	4618      	mov	r0, r3
10008e0c:	371c      	adds	r7, #28
10008e0e:	46bd      	mov	sp, r7
10008e10:	bd90      	pop	{r4, r7, pc}
10008e12:	bf00      	nop
10008e14:	10020364 	.word	0x10020364
10008e18:	10020360 	.word	0x10020360
10008e1c:	10008ad9 	.word	0x10008ad9
10008e20:	1002035c 	.word	0x1002035c
10008e24:	10050000 	.word	0x10050000
10008e28:	10040000 	.word	0x10040000
10008e2c:	10020368 	.word	0x10020368
10008e30:	10020374 	.word	0x10020374

10008e34 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
10008e34:	b580      	push	{r7, lr}
10008e36:	b08a      	sub	sp, #40	@ 0x28
10008e38:	af04      	add	r7, sp, #16
10008e3a:	60f8      	str	r0, [r7, #12]
10008e3c:	60b9      	str	r1, [r7, #8]
10008e3e:	607a      	str	r2, [r7, #4]
10008e40:	603b      	str	r3, [r7, #0]
  int ret = 0;
10008e42:	2300      	movs	r3, #0
10008e44:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
10008e46:	6a3b      	ldr	r3, [r7, #32]
10008e48:	9302      	str	r3, [sp, #8]
10008e4a:	683b      	ldr	r3, [r7, #0]
10008e4c:	9301      	str	r3, [sp, #4]
10008e4e:	687b      	ldr	r3, [r7, #4]
10008e50:	9300      	str	r3, [sp, #0]
10008e52:	f04f 33ff 	mov.w	r3, #4294967295
10008e56:	68ba      	ldr	r2, [r7, #8]
10008e58:	4904      	ldr	r1, [pc, #16]	@ (10008e6c <OPENAMP_create_endpoint+0x38>)
10008e5a:	68f8      	ldr	r0, [r7, #12]
10008e5c:	f7fe fcc2 	bl	100077e4 <rpmsg_create_ept>
10008e60:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
10008e62:	697b      	ldr	r3, [r7, #20]
}
10008e64:	4618      	mov	r0, r3
10008e66:	3718      	adds	r7, #24
10008e68:	46bd      	mov	sp, r7
10008e6a:	bd80      	pop	{r7, pc}
10008e6c:	10020374 	.word	0x10020374

10008e70 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
10008e70:	b580      	push	{r7, lr}
10008e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
10008e74:	4b03      	ldr	r3, [pc, #12]	@ (10008e84 <OPENAMP_check_for_message+0x14>)
10008e76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10008e78:	4618      	mov	r0, r3
10008e7a:	f7ff fe03 	bl	10008a84 <MAILBOX_Poll>
}
10008e7e:	bf00      	nop
10008e80:	bd80      	pop	{r7, pc}
10008e82:	bf00      	nop
10008e84:	10020374 	.word	0x10020374

10008e88 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
10008e88:	b480      	push	{r7}
10008e8a:	b085      	sub	sp, #20
10008e8c:	af00      	add	r7, sp, #0
10008e8e:	60f8      	str	r0, [r7, #12]
10008e90:	60b9      	str	r1, [r7, #8]
10008e92:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
10008e94:	687b      	ldr	r3, [r7, #4]
10008e96:	228c      	movs	r2, #140	@ 0x8c
10008e98:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
10008e9a:	68bb      	ldr	r3, [r7, #8]
10008e9c:	4a03      	ldr	r2, [pc, #12]	@ (10008eac <resource_table_init+0x24>)
10008e9e:	601a      	str	r2, [r3, #0]
}
10008ea0:	bf00      	nop
10008ea2:	3714      	adds	r7, #20
10008ea4:	46bd      	mov	sp, r7
10008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
10008eaa:	4770      	bx	lr
10008eac:	10020128 	.word	0x10020128

10008eb0 <__assert_func>:
10008eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10008eb2:	4614      	mov	r4, r2
10008eb4:	461a      	mov	r2, r3
10008eb6:	4b09      	ldr	r3, [pc, #36]	@ (10008edc <__assert_func+0x2c>)
10008eb8:	681b      	ldr	r3, [r3, #0]
10008eba:	4605      	mov	r5, r0
10008ebc:	68d8      	ldr	r0, [r3, #12]
10008ebe:	b14c      	cbz	r4, 10008ed4 <__assert_func+0x24>
10008ec0:	4b07      	ldr	r3, [pc, #28]	@ (10008ee0 <__assert_func+0x30>)
10008ec2:	9100      	str	r1, [sp, #0]
10008ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
10008ec8:	4906      	ldr	r1, [pc, #24]	@ (10008ee4 <__assert_func+0x34>)
10008eca:	462b      	mov	r3, r5
10008ecc:	f000 f970 	bl	100091b0 <fiprintf>
10008ed0:	f000 fadd 	bl	1000948e <abort>
10008ed4:	4b04      	ldr	r3, [pc, #16]	@ (10008ee8 <__assert_func+0x38>)
10008ed6:	461c      	mov	r4, r3
10008ed8:	e7f3      	b.n	10008ec2 <__assert_func+0x12>
10008eda:	bf00      	nop
10008edc:	100200d8 	.word	0x100200d8
10008ee0:	1000a77d 	.word	0x1000a77d
10008ee4:	1000a78a 	.word	0x1000a78a
10008ee8:	1000a7b8 	.word	0x1000a7b8

10008eec <malloc>:
10008eec:	4b02      	ldr	r3, [pc, #8]	@ (10008ef8 <malloc+0xc>)
10008eee:	4601      	mov	r1, r0
10008ef0:	6818      	ldr	r0, [r3, #0]
10008ef2:	f000 b82d 	b.w	10008f50 <_malloc_r>
10008ef6:	bf00      	nop
10008ef8:	100200d8 	.word	0x100200d8

10008efc <free>:
10008efc:	4b02      	ldr	r3, [pc, #8]	@ (10008f08 <free+0xc>)
10008efe:	4601      	mov	r1, r0
10008f00:	6818      	ldr	r0, [r3, #0]
10008f02:	f000 bacb 	b.w	1000949c <_free_r>
10008f06:	bf00      	nop
10008f08:	100200d8 	.word	0x100200d8

10008f0c <sbrk_aligned>:
10008f0c:	b570      	push	{r4, r5, r6, lr}
10008f0e:	4e0f      	ldr	r6, [pc, #60]	@ (10008f4c <sbrk_aligned+0x40>)
10008f10:	460c      	mov	r4, r1
10008f12:	6831      	ldr	r1, [r6, #0]
10008f14:	4605      	mov	r5, r0
10008f16:	b911      	cbnz	r1, 10008f1e <sbrk_aligned+0x12>
10008f18:	f000 fa5c 	bl	100093d4 <_sbrk_r>
10008f1c:	6030      	str	r0, [r6, #0]
10008f1e:	4621      	mov	r1, r4
10008f20:	4628      	mov	r0, r5
10008f22:	f000 fa57 	bl	100093d4 <_sbrk_r>
10008f26:	1c43      	adds	r3, r0, #1
10008f28:	d103      	bne.n	10008f32 <sbrk_aligned+0x26>
10008f2a:	f04f 34ff 	mov.w	r4, #4294967295
10008f2e:	4620      	mov	r0, r4
10008f30:	bd70      	pop	{r4, r5, r6, pc}
10008f32:	1cc4      	adds	r4, r0, #3
10008f34:	f024 0403 	bic.w	r4, r4, #3
10008f38:	42a0      	cmp	r0, r4
10008f3a:	d0f8      	beq.n	10008f2e <sbrk_aligned+0x22>
10008f3c:	1a21      	subs	r1, r4, r0
10008f3e:	4628      	mov	r0, r5
10008f40:	f000 fa48 	bl	100093d4 <_sbrk_r>
10008f44:	3001      	adds	r0, #1
10008f46:	d1f2      	bne.n	10008f2e <sbrk_aligned+0x22>
10008f48:	e7ef      	b.n	10008f2a <sbrk_aligned+0x1e>
10008f4a:	bf00      	nop
10008f4c:	10020404 	.word	0x10020404

10008f50 <_malloc_r>:
10008f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10008f54:	1ccd      	adds	r5, r1, #3
10008f56:	f025 0503 	bic.w	r5, r5, #3
10008f5a:	3508      	adds	r5, #8
10008f5c:	2d0c      	cmp	r5, #12
10008f5e:	bf38      	it	cc
10008f60:	250c      	movcc	r5, #12
10008f62:	2d00      	cmp	r5, #0
10008f64:	4606      	mov	r6, r0
10008f66:	db01      	blt.n	10008f6c <_malloc_r+0x1c>
10008f68:	42a9      	cmp	r1, r5
10008f6a:	d904      	bls.n	10008f76 <_malloc_r+0x26>
10008f6c:	230c      	movs	r3, #12
10008f6e:	6033      	str	r3, [r6, #0]
10008f70:	2000      	movs	r0, #0
10008f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10008f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 1000904c <_malloc_r+0xfc>
10008f7a:	f000 f869 	bl	10009050 <__malloc_lock>
10008f7e:	f8d8 3000 	ldr.w	r3, [r8]
10008f82:	461c      	mov	r4, r3
10008f84:	bb44      	cbnz	r4, 10008fd8 <_malloc_r+0x88>
10008f86:	4629      	mov	r1, r5
10008f88:	4630      	mov	r0, r6
10008f8a:	f7ff ffbf 	bl	10008f0c <sbrk_aligned>
10008f8e:	1c43      	adds	r3, r0, #1
10008f90:	4604      	mov	r4, r0
10008f92:	d158      	bne.n	10009046 <_malloc_r+0xf6>
10008f94:	f8d8 4000 	ldr.w	r4, [r8]
10008f98:	4627      	mov	r7, r4
10008f9a:	2f00      	cmp	r7, #0
10008f9c:	d143      	bne.n	10009026 <_malloc_r+0xd6>
10008f9e:	2c00      	cmp	r4, #0
10008fa0:	d04b      	beq.n	1000903a <_malloc_r+0xea>
10008fa2:	6823      	ldr	r3, [r4, #0]
10008fa4:	4639      	mov	r1, r7
10008fa6:	4630      	mov	r0, r6
10008fa8:	eb04 0903 	add.w	r9, r4, r3
10008fac:	f000 fa12 	bl	100093d4 <_sbrk_r>
10008fb0:	4581      	cmp	r9, r0
10008fb2:	d142      	bne.n	1000903a <_malloc_r+0xea>
10008fb4:	6821      	ldr	r1, [r4, #0]
10008fb6:	1a6d      	subs	r5, r5, r1
10008fb8:	4629      	mov	r1, r5
10008fba:	4630      	mov	r0, r6
10008fbc:	f7ff ffa6 	bl	10008f0c <sbrk_aligned>
10008fc0:	3001      	adds	r0, #1
10008fc2:	d03a      	beq.n	1000903a <_malloc_r+0xea>
10008fc4:	6823      	ldr	r3, [r4, #0]
10008fc6:	442b      	add	r3, r5
10008fc8:	6023      	str	r3, [r4, #0]
10008fca:	f8d8 3000 	ldr.w	r3, [r8]
10008fce:	685a      	ldr	r2, [r3, #4]
10008fd0:	bb62      	cbnz	r2, 1000902c <_malloc_r+0xdc>
10008fd2:	f8c8 7000 	str.w	r7, [r8]
10008fd6:	e00f      	b.n	10008ff8 <_malloc_r+0xa8>
10008fd8:	6822      	ldr	r2, [r4, #0]
10008fda:	1b52      	subs	r2, r2, r5
10008fdc:	d420      	bmi.n	10009020 <_malloc_r+0xd0>
10008fde:	2a0b      	cmp	r2, #11
10008fe0:	d917      	bls.n	10009012 <_malloc_r+0xc2>
10008fe2:	1961      	adds	r1, r4, r5
10008fe4:	42a3      	cmp	r3, r4
10008fe6:	6025      	str	r5, [r4, #0]
10008fe8:	bf18      	it	ne
10008fea:	6059      	strne	r1, [r3, #4]
10008fec:	6863      	ldr	r3, [r4, #4]
10008fee:	bf08      	it	eq
10008ff0:	f8c8 1000 	streq.w	r1, [r8]
10008ff4:	5162      	str	r2, [r4, r5]
10008ff6:	604b      	str	r3, [r1, #4]
10008ff8:	4630      	mov	r0, r6
10008ffa:	f000 f82f 	bl	1000905c <__malloc_unlock>
10008ffe:	f104 000b 	add.w	r0, r4, #11
10009002:	1d23      	adds	r3, r4, #4
10009004:	f020 0007 	bic.w	r0, r0, #7
10009008:	1ac2      	subs	r2, r0, r3
1000900a:	bf1c      	itt	ne
1000900c:	1a1b      	subne	r3, r3, r0
1000900e:	50a3      	strne	r3, [r4, r2]
10009010:	e7af      	b.n	10008f72 <_malloc_r+0x22>
10009012:	6862      	ldr	r2, [r4, #4]
10009014:	42a3      	cmp	r3, r4
10009016:	bf0c      	ite	eq
10009018:	f8c8 2000 	streq.w	r2, [r8]
1000901c:	605a      	strne	r2, [r3, #4]
1000901e:	e7eb      	b.n	10008ff8 <_malloc_r+0xa8>
10009020:	4623      	mov	r3, r4
10009022:	6864      	ldr	r4, [r4, #4]
10009024:	e7ae      	b.n	10008f84 <_malloc_r+0x34>
10009026:	463c      	mov	r4, r7
10009028:	687f      	ldr	r7, [r7, #4]
1000902a:	e7b6      	b.n	10008f9a <_malloc_r+0x4a>
1000902c:	461a      	mov	r2, r3
1000902e:	685b      	ldr	r3, [r3, #4]
10009030:	42a3      	cmp	r3, r4
10009032:	d1fb      	bne.n	1000902c <_malloc_r+0xdc>
10009034:	2300      	movs	r3, #0
10009036:	6053      	str	r3, [r2, #4]
10009038:	e7de      	b.n	10008ff8 <_malloc_r+0xa8>
1000903a:	230c      	movs	r3, #12
1000903c:	6033      	str	r3, [r6, #0]
1000903e:	4630      	mov	r0, r6
10009040:	f000 f80c 	bl	1000905c <__malloc_unlock>
10009044:	e794      	b.n	10008f70 <_malloc_r+0x20>
10009046:	6005      	str	r5, [r0, #0]
10009048:	e7d6      	b.n	10008ff8 <_malloc_r+0xa8>
1000904a:	bf00      	nop
1000904c:	10020408 	.word	0x10020408

10009050 <__malloc_lock>:
10009050:	4801      	ldr	r0, [pc, #4]	@ (10009058 <__malloc_lock+0x8>)
10009052:	f000 ba0c 	b.w	1000946e <__retarget_lock_acquire_recursive>
10009056:	bf00      	nop
10009058:	1002054c 	.word	0x1002054c

1000905c <__malloc_unlock>:
1000905c:	4801      	ldr	r0, [pc, #4]	@ (10009064 <__malloc_unlock+0x8>)
1000905e:	f000 ba07 	b.w	10009470 <__retarget_lock_release_recursive>
10009062:	bf00      	nop
10009064:	1002054c 	.word	0x1002054c

10009068 <std>:
10009068:	2300      	movs	r3, #0
1000906a:	b510      	push	{r4, lr}
1000906c:	4604      	mov	r4, r0
1000906e:	e9c0 3300 	strd	r3, r3, [r0]
10009072:	e9c0 3304 	strd	r3, r3, [r0, #16]
10009076:	6083      	str	r3, [r0, #8]
10009078:	8181      	strh	r1, [r0, #12]
1000907a:	6643      	str	r3, [r0, #100]	@ 0x64
1000907c:	81c2      	strh	r2, [r0, #14]
1000907e:	6183      	str	r3, [r0, #24]
10009080:	4619      	mov	r1, r3
10009082:	2208      	movs	r2, #8
10009084:	305c      	adds	r0, #92	@ 0x5c
10009086:	f000 f943 	bl	10009310 <memset>
1000908a:	4b0d      	ldr	r3, [pc, #52]	@ (100090c0 <std+0x58>)
1000908c:	6263      	str	r3, [r4, #36]	@ 0x24
1000908e:	4b0d      	ldr	r3, [pc, #52]	@ (100090c4 <std+0x5c>)
10009090:	62a3      	str	r3, [r4, #40]	@ 0x28
10009092:	4b0d      	ldr	r3, [pc, #52]	@ (100090c8 <std+0x60>)
10009094:	62e3      	str	r3, [r4, #44]	@ 0x2c
10009096:	4b0d      	ldr	r3, [pc, #52]	@ (100090cc <std+0x64>)
10009098:	6323      	str	r3, [r4, #48]	@ 0x30
1000909a:	4b0d      	ldr	r3, [pc, #52]	@ (100090d0 <std+0x68>)
1000909c:	6224      	str	r4, [r4, #32]
1000909e:	429c      	cmp	r4, r3
100090a0:	d006      	beq.n	100090b0 <std+0x48>
100090a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
100090a6:	4294      	cmp	r4, r2
100090a8:	d002      	beq.n	100090b0 <std+0x48>
100090aa:	33d0      	adds	r3, #208	@ 0xd0
100090ac:	429c      	cmp	r4, r3
100090ae:	d105      	bne.n	100090bc <std+0x54>
100090b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
100090b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100090b8:	f000 b9d8 	b.w	1000946c <__retarget_lock_init_recursive>
100090bc:	bd10      	pop	{r4, pc}
100090be:	bf00      	nop
100090c0:	10009211 	.word	0x10009211
100090c4:	10009233 	.word	0x10009233
100090c8:	1000926b 	.word	0x1000926b
100090cc:	1000928f 	.word	0x1000928f
100090d0:	1002040c 	.word	0x1002040c

100090d4 <stdio_exit_handler>:
100090d4:	4a02      	ldr	r2, [pc, #8]	@ (100090e0 <stdio_exit_handler+0xc>)
100090d6:	4903      	ldr	r1, [pc, #12]	@ (100090e4 <stdio_exit_handler+0x10>)
100090d8:	4803      	ldr	r0, [pc, #12]	@ (100090e8 <stdio_exit_handler+0x14>)
100090da:	f000 b87b 	b.w	100091d4 <_fwalk_sglue>
100090de:	bf00      	nop
100090e0:	100200cc 	.word	0x100200cc
100090e4:	10009e85 	.word	0x10009e85
100090e8:	100200dc 	.word	0x100200dc

100090ec <cleanup_stdio>:
100090ec:	6841      	ldr	r1, [r0, #4]
100090ee:	4b0c      	ldr	r3, [pc, #48]	@ (10009120 <cleanup_stdio+0x34>)
100090f0:	4299      	cmp	r1, r3
100090f2:	b510      	push	{r4, lr}
100090f4:	4604      	mov	r4, r0
100090f6:	d001      	beq.n	100090fc <cleanup_stdio+0x10>
100090f8:	f000 fec4 	bl	10009e84 <_fflush_r>
100090fc:	68a1      	ldr	r1, [r4, #8]
100090fe:	4b09      	ldr	r3, [pc, #36]	@ (10009124 <cleanup_stdio+0x38>)
10009100:	4299      	cmp	r1, r3
10009102:	d002      	beq.n	1000910a <cleanup_stdio+0x1e>
10009104:	4620      	mov	r0, r4
10009106:	f000 febd 	bl	10009e84 <_fflush_r>
1000910a:	68e1      	ldr	r1, [r4, #12]
1000910c:	4b06      	ldr	r3, [pc, #24]	@ (10009128 <cleanup_stdio+0x3c>)
1000910e:	4299      	cmp	r1, r3
10009110:	d004      	beq.n	1000911c <cleanup_stdio+0x30>
10009112:	4620      	mov	r0, r4
10009114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009118:	f000 beb4 	b.w	10009e84 <_fflush_r>
1000911c:	bd10      	pop	{r4, pc}
1000911e:	bf00      	nop
10009120:	1002040c 	.word	0x1002040c
10009124:	10020474 	.word	0x10020474
10009128:	100204dc 	.word	0x100204dc

1000912c <global_stdio_init.part.0>:
1000912c:	b510      	push	{r4, lr}
1000912e:	4b0b      	ldr	r3, [pc, #44]	@ (1000915c <global_stdio_init.part.0+0x30>)
10009130:	4c0b      	ldr	r4, [pc, #44]	@ (10009160 <global_stdio_init.part.0+0x34>)
10009132:	4a0c      	ldr	r2, [pc, #48]	@ (10009164 <global_stdio_init.part.0+0x38>)
10009134:	601a      	str	r2, [r3, #0]
10009136:	4620      	mov	r0, r4
10009138:	2200      	movs	r2, #0
1000913a:	2104      	movs	r1, #4
1000913c:	f7ff ff94 	bl	10009068 <std>
10009140:	f104 0068 	add.w	r0, r4, #104	@ 0x68
10009144:	2201      	movs	r2, #1
10009146:	2109      	movs	r1, #9
10009148:	f7ff ff8e 	bl	10009068 <std>
1000914c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
10009150:	2202      	movs	r2, #2
10009152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009156:	2112      	movs	r1, #18
10009158:	f7ff bf86 	b.w	10009068 <std>
1000915c:	10020544 	.word	0x10020544
10009160:	1002040c 	.word	0x1002040c
10009164:	100090d5 	.word	0x100090d5

10009168 <__sfp_lock_acquire>:
10009168:	4801      	ldr	r0, [pc, #4]	@ (10009170 <__sfp_lock_acquire+0x8>)
1000916a:	f000 b980 	b.w	1000946e <__retarget_lock_acquire_recursive>
1000916e:	bf00      	nop
10009170:	1002054d 	.word	0x1002054d

10009174 <__sfp_lock_release>:
10009174:	4801      	ldr	r0, [pc, #4]	@ (1000917c <__sfp_lock_release+0x8>)
10009176:	f000 b97b 	b.w	10009470 <__retarget_lock_release_recursive>
1000917a:	bf00      	nop
1000917c:	1002054d 	.word	0x1002054d

10009180 <__sinit>:
10009180:	b510      	push	{r4, lr}
10009182:	4604      	mov	r4, r0
10009184:	f7ff fff0 	bl	10009168 <__sfp_lock_acquire>
10009188:	6a23      	ldr	r3, [r4, #32]
1000918a:	b11b      	cbz	r3, 10009194 <__sinit+0x14>
1000918c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009190:	f7ff bff0 	b.w	10009174 <__sfp_lock_release>
10009194:	4b04      	ldr	r3, [pc, #16]	@ (100091a8 <__sinit+0x28>)
10009196:	6223      	str	r3, [r4, #32]
10009198:	4b04      	ldr	r3, [pc, #16]	@ (100091ac <__sinit+0x2c>)
1000919a:	681b      	ldr	r3, [r3, #0]
1000919c:	2b00      	cmp	r3, #0
1000919e:	d1f5      	bne.n	1000918c <__sinit+0xc>
100091a0:	f7ff ffc4 	bl	1000912c <global_stdio_init.part.0>
100091a4:	e7f2      	b.n	1000918c <__sinit+0xc>
100091a6:	bf00      	nop
100091a8:	100090ed 	.word	0x100090ed
100091ac:	10020544 	.word	0x10020544

100091b0 <fiprintf>:
100091b0:	b40e      	push	{r1, r2, r3}
100091b2:	b503      	push	{r0, r1, lr}
100091b4:	4601      	mov	r1, r0
100091b6:	ab03      	add	r3, sp, #12
100091b8:	4805      	ldr	r0, [pc, #20]	@ (100091d0 <fiprintf+0x20>)
100091ba:	f853 2b04 	ldr.w	r2, [r3], #4
100091be:	6800      	ldr	r0, [r0, #0]
100091c0:	9301      	str	r3, [sp, #4]
100091c2:	f000 fb37 	bl	10009834 <_vfiprintf_r>
100091c6:	b002      	add	sp, #8
100091c8:	f85d eb04 	ldr.w	lr, [sp], #4
100091cc:	b003      	add	sp, #12
100091ce:	4770      	bx	lr
100091d0:	100200d8 	.word	0x100200d8

100091d4 <_fwalk_sglue>:
100091d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100091d8:	4607      	mov	r7, r0
100091da:	4688      	mov	r8, r1
100091dc:	4614      	mov	r4, r2
100091de:	2600      	movs	r6, #0
100091e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
100091e4:	f1b9 0901 	subs.w	r9, r9, #1
100091e8:	d505      	bpl.n	100091f6 <_fwalk_sglue+0x22>
100091ea:	6824      	ldr	r4, [r4, #0]
100091ec:	2c00      	cmp	r4, #0
100091ee:	d1f7      	bne.n	100091e0 <_fwalk_sglue+0xc>
100091f0:	4630      	mov	r0, r6
100091f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
100091f6:	89ab      	ldrh	r3, [r5, #12]
100091f8:	2b01      	cmp	r3, #1
100091fa:	d907      	bls.n	1000920c <_fwalk_sglue+0x38>
100091fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10009200:	3301      	adds	r3, #1
10009202:	d003      	beq.n	1000920c <_fwalk_sglue+0x38>
10009204:	4629      	mov	r1, r5
10009206:	4638      	mov	r0, r7
10009208:	47c0      	blx	r8
1000920a:	4306      	orrs	r6, r0
1000920c:	3568      	adds	r5, #104	@ 0x68
1000920e:	e7e9      	b.n	100091e4 <_fwalk_sglue+0x10>

10009210 <__sread>:
10009210:	b510      	push	{r4, lr}
10009212:	460c      	mov	r4, r1
10009214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009218:	f000 f8ca 	bl	100093b0 <_read_r>
1000921c:	2800      	cmp	r0, #0
1000921e:	bfab      	itete	ge
10009220:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
10009222:	89a3      	ldrhlt	r3, [r4, #12]
10009224:	181b      	addge	r3, r3, r0
10009226:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
1000922a:	bfac      	ite	ge
1000922c:	6563      	strge	r3, [r4, #84]	@ 0x54
1000922e:	81a3      	strhlt	r3, [r4, #12]
10009230:	bd10      	pop	{r4, pc}

10009232 <__swrite>:
10009232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10009236:	461f      	mov	r7, r3
10009238:	898b      	ldrh	r3, [r1, #12]
1000923a:	05db      	lsls	r3, r3, #23
1000923c:	4605      	mov	r5, r0
1000923e:	460c      	mov	r4, r1
10009240:	4616      	mov	r6, r2
10009242:	d505      	bpl.n	10009250 <__swrite+0x1e>
10009244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009248:	2302      	movs	r3, #2
1000924a:	2200      	movs	r2, #0
1000924c:	f000 f89e 	bl	1000938c <_lseek_r>
10009250:	89a3      	ldrh	r3, [r4, #12]
10009252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10009256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
1000925a:	81a3      	strh	r3, [r4, #12]
1000925c:	4632      	mov	r2, r6
1000925e:	463b      	mov	r3, r7
10009260:	4628      	mov	r0, r5
10009262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10009266:	f000 b8c5 	b.w	100093f4 <_write_r>

1000926a <__sseek>:
1000926a:	b510      	push	{r4, lr}
1000926c:	460c      	mov	r4, r1
1000926e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009272:	f000 f88b 	bl	1000938c <_lseek_r>
10009276:	1c43      	adds	r3, r0, #1
10009278:	89a3      	ldrh	r3, [r4, #12]
1000927a:	bf15      	itete	ne
1000927c:	6560      	strne	r0, [r4, #84]	@ 0x54
1000927e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
10009282:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
10009286:	81a3      	strheq	r3, [r4, #12]
10009288:	bf18      	it	ne
1000928a:	81a3      	strhne	r3, [r4, #12]
1000928c:	bd10      	pop	{r4, pc}

1000928e <__sclose>:
1000928e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009292:	f000 b86b 	b.w	1000936c <_close_r>

10009296 <_vsniprintf_r>:
10009296:	b530      	push	{r4, r5, lr}
10009298:	4614      	mov	r4, r2
1000929a:	2c00      	cmp	r4, #0
1000929c:	b09b      	sub	sp, #108	@ 0x6c
1000929e:	4605      	mov	r5, r0
100092a0:	461a      	mov	r2, r3
100092a2:	da05      	bge.n	100092b0 <_vsniprintf_r+0x1a>
100092a4:	238b      	movs	r3, #139	@ 0x8b
100092a6:	6003      	str	r3, [r0, #0]
100092a8:	f04f 30ff 	mov.w	r0, #4294967295
100092ac:	b01b      	add	sp, #108	@ 0x6c
100092ae:	bd30      	pop	{r4, r5, pc}
100092b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
100092b4:	f8ad 300c 	strh.w	r3, [sp, #12]
100092b8:	f04f 0300 	mov.w	r3, #0
100092bc:	9319      	str	r3, [sp, #100]	@ 0x64
100092be:	bf14      	ite	ne
100092c0:	f104 33ff 	addne.w	r3, r4, #4294967295
100092c4:	4623      	moveq	r3, r4
100092c6:	9302      	str	r3, [sp, #8]
100092c8:	9305      	str	r3, [sp, #20]
100092ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
100092ce:	9100      	str	r1, [sp, #0]
100092d0:	9104      	str	r1, [sp, #16]
100092d2:	f8ad 300e 	strh.w	r3, [sp, #14]
100092d6:	4669      	mov	r1, sp
100092d8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
100092da:	f000 f985 	bl	100095e8 <_svfiprintf_r>
100092de:	1c43      	adds	r3, r0, #1
100092e0:	bfbc      	itt	lt
100092e2:	238b      	movlt	r3, #139	@ 0x8b
100092e4:	602b      	strlt	r3, [r5, #0]
100092e6:	2c00      	cmp	r4, #0
100092e8:	d0e0      	beq.n	100092ac <_vsniprintf_r+0x16>
100092ea:	9b00      	ldr	r3, [sp, #0]
100092ec:	2200      	movs	r2, #0
100092ee:	701a      	strb	r2, [r3, #0]
100092f0:	e7dc      	b.n	100092ac <_vsniprintf_r+0x16>
	...

100092f4 <vsniprintf>:
100092f4:	b507      	push	{r0, r1, r2, lr}
100092f6:	9300      	str	r3, [sp, #0]
100092f8:	4613      	mov	r3, r2
100092fa:	460a      	mov	r2, r1
100092fc:	4601      	mov	r1, r0
100092fe:	4803      	ldr	r0, [pc, #12]	@ (1000930c <vsniprintf+0x18>)
10009300:	6800      	ldr	r0, [r0, #0]
10009302:	f7ff ffc8 	bl	10009296 <_vsniprintf_r>
10009306:	b003      	add	sp, #12
10009308:	f85d fb04 	ldr.w	pc, [sp], #4
1000930c:	100200d8 	.word	0x100200d8

10009310 <memset>:
10009310:	4402      	add	r2, r0
10009312:	4603      	mov	r3, r0
10009314:	4293      	cmp	r3, r2
10009316:	d100      	bne.n	1000931a <memset+0xa>
10009318:	4770      	bx	lr
1000931a:	f803 1b01 	strb.w	r1, [r3], #1
1000931e:	e7f9      	b.n	10009314 <memset+0x4>

10009320 <strncmp>:
10009320:	b510      	push	{r4, lr}
10009322:	b16a      	cbz	r2, 10009340 <strncmp+0x20>
10009324:	3901      	subs	r1, #1
10009326:	1884      	adds	r4, r0, r2
10009328:	f810 2b01 	ldrb.w	r2, [r0], #1
1000932c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10009330:	429a      	cmp	r2, r3
10009332:	d103      	bne.n	1000933c <strncmp+0x1c>
10009334:	42a0      	cmp	r0, r4
10009336:	d001      	beq.n	1000933c <strncmp+0x1c>
10009338:	2a00      	cmp	r2, #0
1000933a:	d1f5      	bne.n	10009328 <strncmp+0x8>
1000933c:	1ad0      	subs	r0, r2, r3
1000933e:	bd10      	pop	{r4, pc}
10009340:	4610      	mov	r0, r2
10009342:	e7fc      	b.n	1000933e <strncmp+0x1e>

10009344 <strncpy>:
10009344:	b510      	push	{r4, lr}
10009346:	3901      	subs	r1, #1
10009348:	4603      	mov	r3, r0
1000934a:	b132      	cbz	r2, 1000935a <strncpy+0x16>
1000934c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10009350:	f803 4b01 	strb.w	r4, [r3], #1
10009354:	3a01      	subs	r2, #1
10009356:	2c00      	cmp	r4, #0
10009358:	d1f7      	bne.n	1000934a <strncpy+0x6>
1000935a:	441a      	add	r2, r3
1000935c:	2100      	movs	r1, #0
1000935e:	4293      	cmp	r3, r2
10009360:	d100      	bne.n	10009364 <strncpy+0x20>
10009362:	bd10      	pop	{r4, pc}
10009364:	f803 1b01 	strb.w	r1, [r3], #1
10009368:	e7f9      	b.n	1000935e <strncpy+0x1a>
	...

1000936c <_close_r>:
1000936c:	b538      	push	{r3, r4, r5, lr}
1000936e:	4d06      	ldr	r5, [pc, #24]	@ (10009388 <_close_r+0x1c>)
10009370:	2300      	movs	r3, #0
10009372:	4604      	mov	r4, r0
10009374:	4608      	mov	r0, r1
10009376:	602b      	str	r3, [r5, #0]
10009378:	f7f8 f850 	bl	1000141c <_close>
1000937c:	1c43      	adds	r3, r0, #1
1000937e:	d102      	bne.n	10009386 <_close_r+0x1a>
10009380:	682b      	ldr	r3, [r5, #0]
10009382:	b103      	cbz	r3, 10009386 <_close_r+0x1a>
10009384:	6023      	str	r3, [r4, #0]
10009386:	bd38      	pop	{r3, r4, r5, pc}
10009388:	10020548 	.word	0x10020548

1000938c <_lseek_r>:
1000938c:	b538      	push	{r3, r4, r5, lr}
1000938e:	4d07      	ldr	r5, [pc, #28]	@ (100093ac <_lseek_r+0x20>)
10009390:	4604      	mov	r4, r0
10009392:	4608      	mov	r0, r1
10009394:	4611      	mov	r1, r2
10009396:	2200      	movs	r2, #0
10009398:	602a      	str	r2, [r5, #0]
1000939a:	461a      	mov	r2, r3
1000939c:	f7f8 f865 	bl	1000146a <_lseek>
100093a0:	1c43      	adds	r3, r0, #1
100093a2:	d102      	bne.n	100093aa <_lseek_r+0x1e>
100093a4:	682b      	ldr	r3, [r5, #0]
100093a6:	b103      	cbz	r3, 100093aa <_lseek_r+0x1e>
100093a8:	6023      	str	r3, [r4, #0]
100093aa:	bd38      	pop	{r3, r4, r5, pc}
100093ac:	10020548 	.word	0x10020548

100093b0 <_read_r>:
100093b0:	b538      	push	{r3, r4, r5, lr}
100093b2:	4d07      	ldr	r5, [pc, #28]	@ (100093d0 <_read_r+0x20>)
100093b4:	4604      	mov	r4, r0
100093b6:	4608      	mov	r0, r1
100093b8:	4611      	mov	r1, r2
100093ba:	2200      	movs	r2, #0
100093bc:	602a      	str	r2, [r5, #0]
100093be:	461a      	mov	r2, r3
100093c0:	f7f7 fff3 	bl	100013aa <_read>
100093c4:	1c43      	adds	r3, r0, #1
100093c6:	d102      	bne.n	100093ce <_read_r+0x1e>
100093c8:	682b      	ldr	r3, [r5, #0]
100093ca:	b103      	cbz	r3, 100093ce <_read_r+0x1e>
100093cc:	6023      	str	r3, [r4, #0]
100093ce:	bd38      	pop	{r3, r4, r5, pc}
100093d0:	10020548 	.word	0x10020548

100093d4 <_sbrk_r>:
100093d4:	b538      	push	{r3, r4, r5, lr}
100093d6:	4d06      	ldr	r5, [pc, #24]	@ (100093f0 <_sbrk_r+0x1c>)
100093d8:	2300      	movs	r3, #0
100093da:	4604      	mov	r4, r0
100093dc:	4608      	mov	r0, r1
100093de:	602b      	str	r3, [r5, #0]
100093e0:	f7f8 f850 	bl	10001484 <_sbrk>
100093e4:	1c43      	adds	r3, r0, #1
100093e6:	d102      	bne.n	100093ee <_sbrk_r+0x1a>
100093e8:	682b      	ldr	r3, [r5, #0]
100093ea:	b103      	cbz	r3, 100093ee <_sbrk_r+0x1a>
100093ec:	6023      	str	r3, [r4, #0]
100093ee:	bd38      	pop	{r3, r4, r5, pc}
100093f0:	10020548 	.word	0x10020548

100093f4 <_write_r>:
100093f4:	b538      	push	{r3, r4, r5, lr}
100093f6:	4d07      	ldr	r5, [pc, #28]	@ (10009414 <_write_r+0x20>)
100093f8:	4604      	mov	r4, r0
100093fa:	4608      	mov	r0, r1
100093fc:	4611      	mov	r1, r2
100093fe:	2200      	movs	r2, #0
10009400:	602a      	str	r2, [r5, #0]
10009402:	461a      	mov	r2, r3
10009404:	f7f7 ffee 	bl	100013e4 <_write>
10009408:	1c43      	adds	r3, r0, #1
1000940a:	d102      	bne.n	10009412 <_write_r+0x1e>
1000940c:	682b      	ldr	r3, [r5, #0]
1000940e:	b103      	cbz	r3, 10009412 <_write_r+0x1e>
10009410:	6023      	str	r3, [r4, #0]
10009412:	bd38      	pop	{r3, r4, r5, pc}
10009414:	10020548 	.word	0x10020548

10009418 <__errno>:
10009418:	4b01      	ldr	r3, [pc, #4]	@ (10009420 <__errno+0x8>)
1000941a:	6818      	ldr	r0, [r3, #0]
1000941c:	4770      	bx	lr
1000941e:	bf00      	nop
10009420:	100200d8 	.word	0x100200d8

10009424 <__libc_init_array>:
10009424:	b570      	push	{r4, r5, r6, lr}
10009426:	4d0d      	ldr	r5, [pc, #52]	@ (1000945c <__libc_init_array+0x38>)
10009428:	4c0d      	ldr	r4, [pc, #52]	@ (10009460 <__libc_init_array+0x3c>)
1000942a:	1b64      	subs	r4, r4, r5
1000942c:	10a4      	asrs	r4, r4, #2
1000942e:	2600      	movs	r6, #0
10009430:	42a6      	cmp	r6, r4
10009432:	d109      	bne.n	10009448 <__libc_init_array+0x24>
10009434:	4d0b      	ldr	r5, [pc, #44]	@ (10009464 <__libc_init_array+0x40>)
10009436:	4c0c      	ldr	r4, [pc, #48]	@ (10009468 <__libc_init_array+0x44>)
10009438:	f000 fef8 	bl	1000a22c <_init>
1000943c:	1b64      	subs	r4, r4, r5
1000943e:	10a4      	asrs	r4, r4, #2
10009440:	2600      	movs	r6, #0
10009442:	42a6      	cmp	r6, r4
10009444:	d105      	bne.n	10009452 <__libc_init_array+0x2e>
10009446:	bd70      	pop	{r4, r5, r6, pc}
10009448:	f855 3b04 	ldr.w	r3, [r5], #4
1000944c:	4798      	blx	r3
1000944e:	3601      	adds	r6, #1
10009450:	e7ee      	b.n	10009430 <__libc_init_array+0xc>
10009452:	f855 3b04 	ldr.w	r3, [r5], #4
10009456:	4798      	blx	r3
10009458:	3601      	adds	r6, #1
1000945a:	e7f2      	b.n	10009442 <__libc_init_array+0x1e>
1000945c:	1000a7f4 	.word	0x1000a7f4
10009460:	1000a7f4 	.word	0x1000a7f4
10009464:	1000a7f4 	.word	0x1000a7f4
10009468:	1000a7f8 	.word	0x1000a7f8

1000946c <__retarget_lock_init_recursive>:
1000946c:	4770      	bx	lr

1000946e <__retarget_lock_acquire_recursive>:
1000946e:	4770      	bx	lr

10009470 <__retarget_lock_release_recursive>:
10009470:	4770      	bx	lr

10009472 <memcpy>:
10009472:	440a      	add	r2, r1
10009474:	4291      	cmp	r1, r2
10009476:	f100 33ff 	add.w	r3, r0, #4294967295
1000947a:	d100      	bne.n	1000947e <memcpy+0xc>
1000947c:	4770      	bx	lr
1000947e:	b510      	push	{r4, lr}
10009480:	f811 4b01 	ldrb.w	r4, [r1], #1
10009484:	f803 4f01 	strb.w	r4, [r3, #1]!
10009488:	4291      	cmp	r1, r2
1000948a:	d1f9      	bne.n	10009480 <memcpy+0xe>
1000948c:	bd10      	pop	{r4, pc}

1000948e <abort>:
1000948e:	b508      	push	{r3, lr}
10009490:	2006      	movs	r0, #6
10009492:	f000 fdf5 	bl	1000a080 <raise>
10009496:	2001      	movs	r0, #1
10009498:	f7f7 ff7c 	bl	10001394 <_exit>

1000949c <_free_r>:
1000949c:	b538      	push	{r3, r4, r5, lr}
1000949e:	4605      	mov	r5, r0
100094a0:	2900      	cmp	r1, #0
100094a2:	d041      	beq.n	10009528 <_free_r+0x8c>
100094a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
100094a8:	1f0c      	subs	r4, r1, #4
100094aa:	2b00      	cmp	r3, #0
100094ac:	bfb8      	it	lt
100094ae:	18e4      	addlt	r4, r4, r3
100094b0:	f7ff fdce 	bl	10009050 <__malloc_lock>
100094b4:	4a1d      	ldr	r2, [pc, #116]	@ (1000952c <_free_r+0x90>)
100094b6:	6813      	ldr	r3, [r2, #0]
100094b8:	b933      	cbnz	r3, 100094c8 <_free_r+0x2c>
100094ba:	6063      	str	r3, [r4, #4]
100094bc:	6014      	str	r4, [r2, #0]
100094be:	4628      	mov	r0, r5
100094c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
100094c4:	f7ff bdca 	b.w	1000905c <__malloc_unlock>
100094c8:	42a3      	cmp	r3, r4
100094ca:	d908      	bls.n	100094de <_free_r+0x42>
100094cc:	6820      	ldr	r0, [r4, #0]
100094ce:	1821      	adds	r1, r4, r0
100094d0:	428b      	cmp	r3, r1
100094d2:	bf01      	itttt	eq
100094d4:	6819      	ldreq	r1, [r3, #0]
100094d6:	685b      	ldreq	r3, [r3, #4]
100094d8:	1809      	addeq	r1, r1, r0
100094da:	6021      	streq	r1, [r4, #0]
100094dc:	e7ed      	b.n	100094ba <_free_r+0x1e>
100094de:	461a      	mov	r2, r3
100094e0:	685b      	ldr	r3, [r3, #4]
100094e2:	b10b      	cbz	r3, 100094e8 <_free_r+0x4c>
100094e4:	42a3      	cmp	r3, r4
100094e6:	d9fa      	bls.n	100094de <_free_r+0x42>
100094e8:	6811      	ldr	r1, [r2, #0]
100094ea:	1850      	adds	r0, r2, r1
100094ec:	42a0      	cmp	r0, r4
100094ee:	d10b      	bne.n	10009508 <_free_r+0x6c>
100094f0:	6820      	ldr	r0, [r4, #0]
100094f2:	4401      	add	r1, r0
100094f4:	1850      	adds	r0, r2, r1
100094f6:	4283      	cmp	r3, r0
100094f8:	6011      	str	r1, [r2, #0]
100094fa:	d1e0      	bne.n	100094be <_free_r+0x22>
100094fc:	6818      	ldr	r0, [r3, #0]
100094fe:	685b      	ldr	r3, [r3, #4]
10009500:	6053      	str	r3, [r2, #4]
10009502:	4408      	add	r0, r1
10009504:	6010      	str	r0, [r2, #0]
10009506:	e7da      	b.n	100094be <_free_r+0x22>
10009508:	d902      	bls.n	10009510 <_free_r+0x74>
1000950a:	230c      	movs	r3, #12
1000950c:	602b      	str	r3, [r5, #0]
1000950e:	e7d6      	b.n	100094be <_free_r+0x22>
10009510:	6820      	ldr	r0, [r4, #0]
10009512:	1821      	adds	r1, r4, r0
10009514:	428b      	cmp	r3, r1
10009516:	bf04      	itt	eq
10009518:	6819      	ldreq	r1, [r3, #0]
1000951a:	685b      	ldreq	r3, [r3, #4]
1000951c:	6063      	str	r3, [r4, #4]
1000951e:	bf04      	itt	eq
10009520:	1809      	addeq	r1, r1, r0
10009522:	6021      	streq	r1, [r4, #0]
10009524:	6054      	str	r4, [r2, #4]
10009526:	e7ca      	b.n	100094be <_free_r+0x22>
10009528:	bd38      	pop	{r3, r4, r5, pc}
1000952a:	bf00      	nop
1000952c:	10020408 	.word	0x10020408

10009530 <__ssputs_r>:
10009530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10009534:	688e      	ldr	r6, [r1, #8]
10009536:	461f      	mov	r7, r3
10009538:	42be      	cmp	r6, r7
1000953a:	680b      	ldr	r3, [r1, #0]
1000953c:	4682      	mov	sl, r0
1000953e:	460c      	mov	r4, r1
10009540:	4690      	mov	r8, r2
10009542:	d82d      	bhi.n	100095a0 <__ssputs_r+0x70>
10009544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10009548:	f412 6f90 	tst.w	r2, #1152	@ 0x480
1000954c:	d026      	beq.n	1000959c <__ssputs_r+0x6c>
1000954e:	6965      	ldr	r5, [r4, #20]
10009550:	6909      	ldr	r1, [r1, #16]
10009552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
10009556:	eba3 0901 	sub.w	r9, r3, r1
1000955a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
1000955e:	1c7b      	adds	r3, r7, #1
10009560:	444b      	add	r3, r9
10009562:	106d      	asrs	r5, r5, #1
10009564:	429d      	cmp	r5, r3
10009566:	bf38      	it	cc
10009568:	461d      	movcc	r5, r3
1000956a:	0553      	lsls	r3, r2, #21
1000956c:	d527      	bpl.n	100095be <__ssputs_r+0x8e>
1000956e:	4629      	mov	r1, r5
10009570:	f7ff fcee 	bl	10008f50 <_malloc_r>
10009574:	4606      	mov	r6, r0
10009576:	b360      	cbz	r0, 100095d2 <__ssputs_r+0xa2>
10009578:	6921      	ldr	r1, [r4, #16]
1000957a:	464a      	mov	r2, r9
1000957c:	f7ff ff79 	bl	10009472 <memcpy>
10009580:	89a3      	ldrh	r3, [r4, #12]
10009582:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
10009586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000958a:	81a3      	strh	r3, [r4, #12]
1000958c:	6126      	str	r6, [r4, #16]
1000958e:	6165      	str	r5, [r4, #20]
10009590:	444e      	add	r6, r9
10009592:	eba5 0509 	sub.w	r5, r5, r9
10009596:	6026      	str	r6, [r4, #0]
10009598:	60a5      	str	r5, [r4, #8]
1000959a:	463e      	mov	r6, r7
1000959c:	42be      	cmp	r6, r7
1000959e:	d900      	bls.n	100095a2 <__ssputs_r+0x72>
100095a0:	463e      	mov	r6, r7
100095a2:	6820      	ldr	r0, [r4, #0]
100095a4:	4632      	mov	r2, r6
100095a6:	4641      	mov	r1, r8
100095a8:	f000 fd28 	bl	10009ffc <memmove>
100095ac:	68a3      	ldr	r3, [r4, #8]
100095ae:	1b9b      	subs	r3, r3, r6
100095b0:	60a3      	str	r3, [r4, #8]
100095b2:	6823      	ldr	r3, [r4, #0]
100095b4:	4433      	add	r3, r6
100095b6:	6023      	str	r3, [r4, #0]
100095b8:	2000      	movs	r0, #0
100095ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100095be:	462a      	mov	r2, r5
100095c0:	f000 fd7a 	bl	1000a0b8 <_realloc_r>
100095c4:	4606      	mov	r6, r0
100095c6:	2800      	cmp	r0, #0
100095c8:	d1e0      	bne.n	1000958c <__ssputs_r+0x5c>
100095ca:	6921      	ldr	r1, [r4, #16]
100095cc:	4650      	mov	r0, sl
100095ce:	f7ff ff65 	bl	1000949c <_free_r>
100095d2:	230c      	movs	r3, #12
100095d4:	f8ca 3000 	str.w	r3, [sl]
100095d8:	89a3      	ldrh	r3, [r4, #12]
100095da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100095de:	81a3      	strh	r3, [r4, #12]
100095e0:	f04f 30ff 	mov.w	r0, #4294967295
100095e4:	e7e9      	b.n	100095ba <__ssputs_r+0x8a>
	...

100095e8 <_svfiprintf_r>:
100095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100095ec:	4698      	mov	r8, r3
100095ee:	898b      	ldrh	r3, [r1, #12]
100095f0:	061b      	lsls	r3, r3, #24
100095f2:	b09d      	sub	sp, #116	@ 0x74
100095f4:	4607      	mov	r7, r0
100095f6:	460d      	mov	r5, r1
100095f8:	4614      	mov	r4, r2
100095fa:	d510      	bpl.n	1000961e <_svfiprintf_r+0x36>
100095fc:	690b      	ldr	r3, [r1, #16]
100095fe:	b973      	cbnz	r3, 1000961e <_svfiprintf_r+0x36>
10009600:	2140      	movs	r1, #64	@ 0x40
10009602:	f7ff fca5 	bl	10008f50 <_malloc_r>
10009606:	6028      	str	r0, [r5, #0]
10009608:	6128      	str	r0, [r5, #16]
1000960a:	b930      	cbnz	r0, 1000961a <_svfiprintf_r+0x32>
1000960c:	230c      	movs	r3, #12
1000960e:	603b      	str	r3, [r7, #0]
10009610:	f04f 30ff 	mov.w	r0, #4294967295
10009614:	b01d      	add	sp, #116	@ 0x74
10009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000961a:	2340      	movs	r3, #64	@ 0x40
1000961c:	616b      	str	r3, [r5, #20]
1000961e:	2300      	movs	r3, #0
10009620:	9309      	str	r3, [sp, #36]	@ 0x24
10009622:	2320      	movs	r3, #32
10009624:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
10009628:	f8cd 800c 	str.w	r8, [sp, #12]
1000962c:	2330      	movs	r3, #48	@ 0x30
1000962e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 100097cc <_svfiprintf_r+0x1e4>
10009632:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
10009636:	f04f 0901 	mov.w	r9, #1
1000963a:	4623      	mov	r3, r4
1000963c:	469a      	mov	sl, r3
1000963e:	f813 2b01 	ldrb.w	r2, [r3], #1
10009642:	b10a      	cbz	r2, 10009648 <_svfiprintf_r+0x60>
10009644:	2a25      	cmp	r2, #37	@ 0x25
10009646:	d1f9      	bne.n	1000963c <_svfiprintf_r+0x54>
10009648:	ebba 0b04 	subs.w	fp, sl, r4
1000964c:	d00b      	beq.n	10009666 <_svfiprintf_r+0x7e>
1000964e:	465b      	mov	r3, fp
10009650:	4622      	mov	r2, r4
10009652:	4629      	mov	r1, r5
10009654:	4638      	mov	r0, r7
10009656:	f7ff ff6b 	bl	10009530 <__ssputs_r>
1000965a:	3001      	adds	r0, #1
1000965c:	f000 80a7 	beq.w	100097ae <_svfiprintf_r+0x1c6>
10009660:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10009662:	445a      	add	r2, fp
10009664:	9209      	str	r2, [sp, #36]	@ 0x24
10009666:	f89a 3000 	ldrb.w	r3, [sl]
1000966a:	2b00      	cmp	r3, #0
1000966c:	f000 809f 	beq.w	100097ae <_svfiprintf_r+0x1c6>
10009670:	2300      	movs	r3, #0
10009672:	f04f 32ff 	mov.w	r2, #4294967295
10009676:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000967a:	f10a 0a01 	add.w	sl, sl, #1
1000967e:	9304      	str	r3, [sp, #16]
10009680:	9307      	str	r3, [sp, #28]
10009682:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
10009686:	931a      	str	r3, [sp, #104]	@ 0x68
10009688:	4654      	mov	r4, sl
1000968a:	2205      	movs	r2, #5
1000968c:	f814 1b01 	ldrb.w	r1, [r4], #1
10009690:	484e      	ldr	r0, [pc, #312]	@ (100097cc <_svfiprintf_r+0x1e4>)
10009692:	f7f6 fce5 	bl	10000060 <memchr>
10009696:	9a04      	ldr	r2, [sp, #16]
10009698:	b9d8      	cbnz	r0, 100096d2 <_svfiprintf_r+0xea>
1000969a:	06d0      	lsls	r0, r2, #27
1000969c:	bf44      	itt	mi
1000969e:	2320      	movmi	r3, #32
100096a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
100096a4:	0711      	lsls	r1, r2, #28
100096a6:	bf44      	itt	mi
100096a8:	232b      	movmi	r3, #43	@ 0x2b
100096aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
100096ae:	f89a 3000 	ldrb.w	r3, [sl]
100096b2:	2b2a      	cmp	r3, #42	@ 0x2a
100096b4:	d015      	beq.n	100096e2 <_svfiprintf_r+0xfa>
100096b6:	9a07      	ldr	r2, [sp, #28]
100096b8:	4654      	mov	r4, sl
100096ba:	2000      	movs	r0, #0
100096bc:	f04f 0c0a 	mov.w	ip, #10
100096c0:	4621      	mov	r1, r4
100096c2:	f811 3b01 	ldrb.w	r3, [r1], #1
100096c6:	3b30      	subs	r3, #48	@ 0x30
100096c8:	2b09      	cmp	r3, #9
100096ca:	d94b      	bls.n	10009764 <_svfiprintf_r+0x17c>
100096cc:	b1b0      	cbz	r0, 100096fc <_svfiprintf_r+0x114>
100096ce:	9207      	str	r2, [sp, #28]
100096d0:	e014      	b.n	100096fc <_svfiprintf_r+0x114>
100096d2:	eba0 0308 	sub.w	r3, r0, r8
100096d6:	fa09 f303 	lsl.w	r3, r9, r3
100096da:	4313      	orrs	r3, r2
100096dc:	9304      	str	r3, [sp, #16]
100096de:	46a2      	mov	sl, r4
100096e0:	e7d2      	b.n	10009688 <_svfiprintf_r+0xa0>
100096e2:	9b03      	ldr	r3, [sp, #12]
100096e4:	1d19      	adds	r1, r3, #4
100096e6:	681b      	ldr	r3, [r3, #0]
100096e8:	9103      	str	r1, [sp, #12]
100096ea:	2b00      	cmp	r3, #0
100096ec:	bfbb      	ittet	lt
100096ee:	425b      	neglt	r3, r3
100096f0:	f042 0202 	orrlt.w	r2, r2, #2
100096f4:	9307      	strge	r3, [sp, #28]
100096f6:	9307      	strlt	r3, [sp, #28]
100096f8:	bfb8      	it	lt
100096fa:	9204      	strlt	r2, [sp, #16]
100096fc:	7823      	ldrb	r3, [r4, #0]
100096fe:	2b2e      	cmp	r3, #46	@ 0x2e
10009700:	d10a      	bne.n	10009718 <_svfiprintf_r+0x130>
10009702:	7863      	ldrb	r3, [r4, #1]
10009704:	2b2a      	cmp	r3, #42	@ 0x2a
10009706:	d132      	bne.n	1000976e <_svfiprintf_r+0x186>
10009708:	9b03      	ldr	r3, [sp, #12]
1000970a:	1d1a      	adds	r2, r3, #4
1000970c:	681b      	ldr	r3, [r3, #0]
1000970e:	9203      	str	r2, [sp, #12]
10009710:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
10009714:	3402      	adds	r4, #2
10009716:	9305      	str	r3, [sp, #20]
10009718:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 100097dc <_svfiprintf_r+0x1f4>
1000971c:	7821      	ldrb	r1, [r4, #0]
1000971e:	2203      	movs	r2, #3
10009720:	4650      	mov	r0, sl
10009722:	f7f6 fc9d 	bl	10000060 <memchr>
10009726:	b138      	cbz	r0, 10009738 <_svfiprintf_r+0x150>
10009728:	9b04      	ldr	r3, [sp, #16]
1000972a:	eba0 000a 	sub.w	r0, r0, sl
1000972e:	2240      	movs	r2, #64	@ 0x40
10009730:	4082      	lsls	r2, r0
10009732:	4313      	orrs	r3, r2
10009734:	3401      	adds	r4, #1
10009736:	9304      	str	r3, [sp, #16]
10009738:	f814 1b01 	ldrb.w	r1, [r4], #1
1000973c:	4824      	ldr	r0, [pc, #144]	@ (100097d0 <_svfiprintf_r+0x1e8>)
1000973e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
10009742:	2206      	movs	r2, #6
10009744:	f7f6 fc8c 	bl	10000060 <memchr>
10009748:	2800      	cmp	r0, #0
1000974a:	d036      	beq.n	100097ba <_svfiprintf_r+0x1d2>
1000974c:	4b21      	ldr	r3, [pc, #132]	@ (100097d4 <_svfiprintf_r+0x1ec>)
1000974e:	bb1b      	cbnz	r3, 10009798 <_svfiprintf_r+0x1b0>
10009750:	9b03      	ldr	r3, [sp, #12]
10009752:	3307      	adds	r3, #7
10009754:	f023 0307 	bic.w	r3, r3, #7
10009758:	3308      	adds	r3, #8
1000975a:	9303      	str	r3, [sp, #12]
1000975c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000975e:	4433      	add	r3, r6
10009760:	9309      	str	r3, [sp, #36]	@ 0x24
10009762:	e76a      	b.n	1000963a <_svfiprintf_r+0x52>
10009764:	fb0c 3202 	mla	r2, ip, r2, r3
10009768:	460c      	mov	r4, r1
1000976a:	2001      	movs	r0, #1
1000976c:	e7a8      	b.n	100096c0 <_svfiprintf_r+0xd8>
1000976e:	2300      	movs	r3, #0
10009770:	3401      	adds	r4, #1
10009772:	9305      	str	r3, [sp, #20]
10009774:	4619      	mov	r1, r3
10009776:	f04f 0c0a 	mov.w	ip, #10
1000977a:	4620      	mov	r0, r4
1000977c:	f810 2b01 	ldrb.w	r2, [r0], #1
10009780:	3a30      	subs	r2, #48	@ 0x30
10009782:	2a09      	cmp	r2, #9
10009784:	d903      	bls.n	1000978e <_svfiprintf_r+0x1a6>
10009786:	2b00      	cmp	r3, #0
10009788:	d0c6      	beq.n	10009718 <_svfiprintf_r+0x130>
1000978a:	9105      	str	r1, [sp, #20]
1000978c:	e7c4      	b.n	10009718 <_svfiprintf_r+0x130>
1000978e:	fb0c 2101 	mla	r1, ip, r1, r2
10009792:	4604      	mov	r4, r0
10009794:	2301      	movs	r3, #1
10009796:	e7f0      	b.n	1000977a <_svfiprintf_r+0x192>
10009798:	ab03      	add	r3, sp, #12
1000979a:	9300      	str	r3, [sp, #0]
1000979c:	462a      	mov	r2, r5
1000979e:	4b0e      	ldr	r3, [pc, #56]	@ (100097d8 <_svfiprintf_r+0x1f0>)
100097a0:	a904      	add	r1, sp, #16
100097a2:	4638      	mov	r0, r7
100097a4:	f3af 8000 	nop.w
100097a8:	1c42      	adds	r2, r0, #1
100097aa:	4606      	mov	r6, r0
100097ac:	d1d6      	bne.n	1000975c <_svfiprintf_r+0x174>
100097ae:	89ab      	ldrh	r3, [r5, #12]
100097b0:	065b      	lsls	r3, r3, #25
100097b2:	f53f af2d 	bmi.w	10009610 <_svfiprintf_r+0x28>
100097b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
100097b8:	e72c      	b.n	10009614 <_svfiprintf_r+0x2c>
100097ba:	ab03      	add	r3, sp, #12
100097bc:	9300      	str	r3, [sp, #0]
100097be:	462a      	mov	r2, r5
100097c0:	4b05      	ldr	r3, [pc, #20]	@ (100097d8 <_svfiprintf_r+0x1f0>)
100097c2:	a904      	add	r1, sp, #16
100097c4:	4638      	mov	r0, r7
100097c6:	f000 f9bb 	bl	10009b40 <_printf_i>
100097ca:	e7ed      	b.n	100097a8 <_svfiprintf_r+0x1c0>
100097cc:	1000a7b9 	.word	0x1000a7b9
100097d0:	1000a7c3 	.word	0x1000a7c3
100097d4:	00000000 	.word	0x00000000
100097d8:	10009531 	.word	0x10009531
100097dc:	1000a7bf 	.word	0x1000a7bf

100097e0 <__sfputc_r>:
100097e0:	6893      	ldr	r3, [r2, #8]
100097e2:	3b01      	subs	r3, #1
100097e4:	2b00      	cmp	r3, #0
100097e6:	b410      	push	{r4}
100097e8:	6093      	str	r3, [r2, #8]
100097ea:	da08      	bge.n	100097fe <__sfputc_r+0x1e>
100097ec:	6994      	ldr	r4, [r2, #24]
100097ee:	42a3      	cmp	r3, r4
100097f0:	db01      	blt.n	100097f6 <__sfputc_r+0x16>
100097f2:	290a      	cmp	r1, #10
100097f4:	d103      	bne.n	100097fe <__sfputc_r+0x1e>
100097f6:	f85d 4b04 	ldr.w	r4, [sp], #4
100097fa:	f000 bb6b 	b.w	10009ed4 <__swbuf_r>
100097fe:	6813      	ldr	r3, [r2, #0]
10009800:	1c58      	adds	r0, r3, #1
10009802:	6010      	str	r0, [r2, #0]
10009804:	7019      	strb	r1, [r3, #0]
10009806:	4608      	mov	r0, r1
10009808:	f85d 4b04 	ldr.w	r4, [sp], #4
1000980c:	4770      	bx	lr

1000980e <__sfputs_r>:
1000980e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009810:	4606      	mov	r6, r0
10009812:	460f      	mov	r7, r1
10009814:	4614      	mov	r4, r2
10009816:	18d5      	adds	r5, r2, r3
10009818:	42ac      	cmp	r4, r5
1000981a:	d101      	bne.n	10009820 <__sfputs_r+0x12>
1000981c:	2000      	movs	r0, #0
1000981e:	e007      	b.n	10009830 <__sfputs_r+0x22>
10009820:	f814 1b01 	ldrb.w	r1, [r4], #1
10009824:	463a      	mov	r2, r7
10009826:	4630      	mov	r0, r6
10009828:	f7ff ffda 	bl	100097e0 <__sfputc_r>
1000982c:	1c43      	adds	r3, r0, #1
1000982e:	d1f3      	bne.n	10009818 <__sfputs_r+0xa>
10009830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10009834 <_vfiprintf_r>:
10009834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009838:	460d      	mov	r5, r1
1000983a:	b09d      	sub	sp, #116	@ 0x74
1000983c:	4614      	mov	r4, r2
1000983e:	4698      	mov	r8, r3
10009840:	4606      	mov	r6, r0
10009842:	b118      	cbz	r0, 1000984c <_vfiprintf_r+0x18>
10009844:	6a03      	ldr	r3, [r0, #32]
10009846:	b90b      	cbnz	r3, 1000984c <_vfiprintf_r+0x18>
10009848:	f7ff fc9a 	bl	10009180 <__sinit>
1000984c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000984e:	07d9      	lsls	r1, r3, #31
10009850:	d405      	bmi.n	1000985e <_vfiprintf_r+0x2a>
10009852:	89ab      	ldrh	r3, [r5, #12]
10009854:	059a      	lsls	r2, r3, #22
10009856:	d402      	bmi.n	1000985e <_vfiprintf_r+0x2a>
10009858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000985a:	f7ff fe08 	bl	1000946e <__retarget_lock_acquire_recursive>
1000985e:	89ab      	ldrh	r3, [r5, #12]
10009860:	071b      	lsls	r3, r3, #28
10009862:	d501      	bpl.n	10009868 <_vfiprintf_r+0x34>
10009864:	692b      	ldr	r3, [r5, #16]
10009866:	b99b      	cbnz	r3, 10009890 <_vfiprintf_r+0x5c>
10009868:	4629      	mov	r1, r5
1000986a:	4630      	mov	r0, r6
1000986c:	f000 fb70 	bl	10009f50 <__swsetup_r>
10009870:	b170      	cbz	r0, 10009890 <_vfiprintf_r+0x5c>
10009872:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10009874:	07dc      	lsls	r4, r3, #31
10009876:	d504      	bpl.n	10009882 <_vfiprintf_r+0x4e>
10009878:	f04f 30ff 	mov.w	r0, #4294967295
1000987c:	b01d      	add	sp, #116	@ 0x74
1000987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009882:	89ab      	ldrh	r3, [r5, #12]
10009884:	0598      	lsls	r0, r3, #22
10009886:	d4f7      	bmi.n	10009878 <_vfiprintf_r+0x44>
10009888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000988a:	f7ff fdf1 	bl	10009470 <__retarget_lock_release_recursive>
1000988e:	e7f3      	b.n	10009878 <_vfiprintf_r+0x44>
10009890:	2300      	movs	r3, #0
10009892:	9309      	str	r3, [sp, #36]	@ 0x24
10009894:	2320      	movs	r3, #32
10009896:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
1000989a:	f8cd 800c 	str.w	r8, [sp, #12]
1000989e:	2330      	movs	r3, #48	@ 0x30
100098a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 10009a50 <_vfiprintf_r+0x21c>
100098a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
100098a8:	f04f 0901 	mov.w	r9, #1
100098ac:	4623      	mov	r3, r4
100098ae:	469a      	mov	sl, r3
100098b0:	f813 2b01 	ldrb.w	r2, [r3], #1
100098b4:	b10a      	cbz	r2, 100098ba <_vfiprintf_r+0x86>
100098b6:	2a25      	cmp	r2, #37	@ 0x25
100098b8:	d1f9      	bne.n	100098ae <_vfiprintf_r+0x7a>
100098ba:	ebba 0b04 	subs.w	fp, sl, r4
100098be:	d00b      	beq.n	100098d8 <_vfiprintf_r+0xa4>
100098c0:	465b      	mov	r3, fp
100098c2:	4622      	mov	r2, r4
100098c4:	4629      	mov	r1, r5
100098c6:	4630      	mov	r0, r6
100098c8:	f7ff ffa1 	bl	1000980e <__sfputs_r>
100098cc:	3001      	adds	r0, #1
100098ce:	f000 80a7 	beq.w	10009a20 <_vfiprintf_r+0x1ec>
100098d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100098d4:	445a      	add	r2, fp
100098d6:	9209      	str	r2, [sp, #36]	@ 0x24
100098d8:	f89a 3000 	ldrb.w	r3, [sl]
100098dc:	2b00      	cmp	r3, #0
100098de:	f000 809f 	beq.w	10009a20 <_vfiprintf_r+0x1ec>
100098e2:	2300      	movs	r3, #0
100098e4:	f04f 32ff 	mov.w	r2, #4294967295
100098e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
100098ec:	f10a 0a01 	add.w	sl, sl, #1
100098f0:	9304      	str	r3, [sp, #16]
100098f2:	9307      	str	r3, [sp, #28]
100098f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
100098f8:	931a      	str	r3, [sp, #104]	@ 0x68
100098fa:	4654      	mov	r4, sl
100098fc:	2205      	movs	r2, #5
100098fe:	f814 1b01 	ldrb.w	r1, [r4], #1
10009902:	4853      	ldr	r0, [pc, #332]	@ (10009a50 <_vfiprintf_r+0x21c>)
10009904:	f7f6 fbac 	bl	10000060 <memchr>
10009908:	9a04      	ldr	r2, [sp, #16]
1000990a:	b9d8      	cbnz	r0, 10009944 <_vfiprintf_r+0x110>
1000990c:	06d1      	lsls	r1, r2, #27
1000990e:	bf44      	itt	mi
10009910:	2320      	movmi	r3, #32
10009912:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10009916:	0713      	lsls	r3, r2, #28
10009918:	bf44      	itt	mi
1000991a:	232b      	movmi	r3, #43	@ 0x2b
1000991c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10009920:	f89a 3000 	ldrb.w	r3, [sl]
10009924:	2b2a      	cmp	r3, #42	@ 0x2a
10009926:	d015      	beq.n	10009954 <_vfiprintf_r+0x120>
10009928:	9a07      	ldr	r2, [sp, #28]
1000992a:	4654      	mov	r4, sl
1000992c:	2000      	movs	r0, #0
1000992e:	f04f 0c0a 	mov.w	ip, #10
10009932:	4621      	mov	r1, r4
10009934:	f811 3b01 	ldrb.w	r3, [r1], #1
10009938:	3b30      	subs	r3, #48	@ 0x30
1000993a:	2b09      	cmp	r3, #9
1000993c:	d94b      	bls.n	100099d6 <_vfiprintf_r+0x1a2>
1000993e:	b1b0      	cbz	r0, 1000996e <_vfiprintf_r+0x13a>
10009940:	9207      	str	r2, [sp, #28]
10009942:	e014      	b.n	1000996e <_vfiprintf_r+0x13a>
10009944:	eba0 0308 	sub.w	r3, r0, r8
10009948:	fa09 f303 	lsl.w	r3, r9, r3
1000994c:	4313      	orrs	r3, r2
1000994e:	9304      	str	r3, [sp, #16]
10009950:	46a2      	mov	sl, r4
10009952:	e7d2      	b.n	100098fa <_vfiprintf_r+0xc6>
10009954:	9b03      	ldr	r3, [sp, #12]
10009956:	1d19      	adds	r1, r3, #4
10009958:	681b      	ldr	r3, [r3, #0]
1000995a:	9103      	str	r1, [sp, #12]
1000995c:	2b00      	cmp	r3, #0
1000995e:	bfbb      	ittet	lt
10009960:	425b      	neglt	r3, r3
10009962:	f042 0202 	orrlt.w	r2, r2, #2
10009966:	9307      	strge	r3, [sp, #28]
10009968:	9307      	strlt	r3, [sp, #28]
1000996a:	bfb8      	it	lt
1000996c:	9204      	strlt	r2, [sp, #16]
1000996e:	7823      	ldrb	r3, [r4, #0]
10009970:	2b2e      	cmp	r3, #46	@ 0x2e
10009972:	d10a      	bne.n	1000998a <_vfiprintf_r+0x156>
10009974:	7863      	ldrb	r3, [r4, #1]
10009976:	2b2a      	cmp	r3, #42	@ 0x2a
10009978:	d132      	bne.n	100099e0 <_vfiprintf_r+0x1ac>
1000997a:	9b03      	ldr	r3, [sp, #12]
1000997c:	1d1a      	adds	r2, r3, #4
1000997e:	681b      	ldr	r3, [r3, #0]
10009980:	9203      	str	r2, [sp, #12]
10009982:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
10009986:	3402      	adds	r4, #2
10009988:	9305      	str	r3, [sp, #20]
1000998a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 10009a60 <_vfiprintf_r+0x22c>
1000998e:	7821      	ldrb	r1, [r4, #0]
10009990:	2203      	movs	r2, #3
10009992:	4650      	mov	r0, sl
10009994:	f7f6 fb64 	bl	10000060 <memchr>
10009998:	b138      	cbz	r0, 100099aa <_vfiprintf_r+0x176>
1000999a:	9b04      	ldr	r3, [sp, #16]
1000999c:	eba0 000a 	sub.w	r0, r0, sl
100099a0:	2240      	movs	r2, #64	@ 0x40
100099a2:	4082      	lsls	r2, r0
100099a4:	4313      	orrs	r3, r2
100099a6:	3401      	adds	r4, #1
100099a8:	9304      	str	r3, [sp, #16]
100099aa:	f814 1b01 	ldrb.w	r1, [r4], #1
100099ae:	4829      	ldr	r0, [pc, #164]	@ (10009a54 <_vfiprintf_r+0x220>)
100099b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
100099b4:	2206      	movs	r2, #6
100099b6:	f7f6 fb53 	bl	10000060 <memchr>
100099ba:	2800      	cmp	r0, #0
100099bc:	d03f      	beq.n	10009a3e <_vfiprintf_r+0x20a>
100099be:	4b26      	ldr	r3, [pc, #152]	@ (10009a58 <_vfiprintf_r+0x224>)
100099c0:	bb1b      	cbnz	r3, 10009a0a <_vfiprintf_r+0x1d6>
100099c2:	9b03      	ldr	r3, [sp, #12]
100099c4:	3307      	adds	r3, #7
100099c6:	f023 0307 	bic.w	r3, r3, #7
100099ca:	3308      	adds	r3, #8
100099cc:	9303      	str	r3, [sp, #12]
100099ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100099d0:	443b      	add	r3, r7
100099d2:	9309      	str	r3, [sp, #36]	@ 0x24
100099d4:	e76a      	b.n	100098ac <_vfiprintf_r+0x78>
100099d6:	fb0c 3202 	mla	r2, ip, r2, r3
100099da:	460c      	mov	r4, r1
100099dc:	2001      	movs	r0, #1
100099de:	e7a8      	b.n	10009932 <_vfiprintf_r+0xfe>
100099e0:	2300      	movs	r3, #0
100099e2:	3401      	adds	r4, #1
100099e4:	9305      	str	r3, [sp, #20]
100099e6:	4619      	mov	r1, r3
100099e8:	f04f 0c0a 	mov.w	ip, #10
100099ec:	4620      	mov	r0, r4
100099ee:	f810 2b01 	ldrb.w	r2, [r0], #1
100099f2:	3a30      	subs	r2, #48	@ 0x30
100099f4:	2a09      	cmp	r2, #9
100099f6:	d903      	bls.n	10009a00 <_vfiprintf_r+0x1cc>
100099f8:	2b00      	cmp	r3, #0
100099fa:	d0c6      	beq.n	1000998a <_vfiprintf_r+0x156>
100099fc:	9105      	str	r1, [sp, #20]
100099fe:	e7c4      	b.n	1000998a <_vfiprintf_r+0x156>
10009a00:	fb0c 2101 	mla	r1, ip, r1, r2
10009a04:	4604      	mov	r4, r0
10009a06:	2301      	movs	r3, #1
10009a08:	e7f0      	b.n	100099ec <_vfiprintf_r+0x1b8>
10009a0a:	ab03      	add	r3, sp, #12
10009a0c:	9300      	str	r3, [sp, #0]
10009a0e:	462a      	mov	r2, r5
10009a10:	4b12      	ldr	r3, [pc, #72]	@ (10009a5c <_vfiprintf_r+0x228>)
10009a12:	a904      	add	r1, sp, #16
10009a14:	4630      	mov	r0, r6
10009a16:	f3af 8000 	nop.w
10009a1a:	4607      	mov	r7, r0
10009a1c:	1c78      	adds	r0, r7, #1
10009a1e:	d1d6      	bne.n	100099ce <_vfiprintf_r+0x19a>
10009a20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10009a22:	07d9      	lsls	r1, r3, #31
10009a24:	d405      	bmi.n	10009a32 <_vfiprintf_r+0x1fe>
10009a26:	89ab      	ldrh	r3, [r5, #12]
10009a28:	059a      	lsls	r2, r3, #22
10009a2a:	d402      	bmi.n	10009a32 <_vfiprintf_r+0x1fe>
10009a2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10009a2e:	f7ff fd1f 	bl	10009470 <__retarget_lock_release_recursive>
10009a32:	89ab      	ldrh	r3, [r5, #12]
10009a34:	065b      	lsls	r3, r3, #25
10009a36:	f53f af1f 	bmi.w	10009878 <_vfiprintf_r+0x44>
10009a3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
10009a3c:	e71e      	b.n	1000987c <_vfiprintf_r+0x48>
10009a3e:	ab03      	add	r3, sp, #12
10009a40:	9300      	str	r3, [sp, #0]
10009a42:	462a      	mov	r2, r5
10009a44:	4b05      	ldr	r3, [pc, #20]	@ (10009a5c <_vfiprintf_r+0x228>)
10009a46:	a904      	add	r1, sp, #16
10009a48:	4630      	mov	r0, r6
10009a4a:	f000 f879 	bl	10009b40 <_printf_i>
10009a4e:	e7e4      	b.n	10009a1a <_vfiprintf_r+0x1e6>
10009a50:	1000a7b9 	.word	0x1000a7b9
10009a54:	1000a7c3 	.word	0x1000a7c3
10009a58:	00000000 	.word	0x00000000
10009a5c:	1000980f 	.word	0x1000980f
10009a60:	1000a7bf 	.word	0x1000a7bf

10009a64 <_printf_common>:
10009a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10009a68:	4616      	mov	r6, r2
10009a6a:	4698      	mov	r8, r3
10009a6c:	688a      	ldr	r2, [r1, #8]
10009a6e:	690b      	ldr	r3, [r1, #16]
10009a70:	f8dd 9020 	ldr.w	r9, [sp, #32]
10009a74:	4293      	cmp	r3, r2
10009a76:	bfb8      	it	lt
10009a78:	4613      	movlt	r3, r2
10009a7a:	6033      	str	r3, [r6, #0]
10009a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
10009a80:	4607      	mov	r7, r0
10009a82:	460c      	mov	r4, r1
10009a84:	b10a      	cbz	r2, 10009a8a <_printf_common+0x26>
10009a86:	3301      	adds	r3, #1
10009a88:	6033      	str	r3, [r6, #0]
10009a8a:	6823      	ldr	r3, [r4, #0]
10009a8c:	0699      	lsls	r1, r3, #26
10009a8e:	bf42      	ittt	mi
10009a90:	6833      	ldrmi	r3, [r6, #0]
10009a92:	3302      	addmi	r3, #2
10009a94:	6033      	strmi	r3, [r6, #0]
10009a96:	6825      	ldr	r5, [r4, #0]
10009a98:	f015 0506 	ands.w	r5, r5, #6
10009a9c:	d106      	bne.n	10009aac <_printf_common+0x48>
10009a9e:	f104 0a19 	add.w	sl, r4, #25
10009aa2:	68e3      	ldr	r3, [r4, #12]
10009aa4:	6832      	ldr	r2, [r6, #0]
10009aa6:	1a9b      	subs	r3, r3, r2
10009aa8:	42ab      	cmp	r3, r5
10009aaa:	dc26      	bgt.n	10009afa <_printf_common+0x96>
10009aac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
10009ab0:	6822      	ldr	r2, [r4, #0]
10009ab2:	3b00      	subs	r3, #0
10009ab4:	bf18      	it	ne
10009ab6:	2301      	movne	r3, #1
10009ab8:	0692      	lsls	r2, r2, #26
10009aba:	d42b      	bmi.n	10009b14 <_printf_common+0xb0>
10009abc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
10009ac0:	4641      	mov	r1, r8
10009ac2:	4638      	mov	r0, r7
10009ac4:	47c8      	blx	r9
10009ac6:	3001      	adds	r0, #1
10009ac8:	d01e      	beq.n	10009b08 <_printf_common+0xa4>
10009aca:	6823      	ldr	r3, [r4, #0]
10009acc:	6922      	ldr	r2, [r4, #16]
10009ace:	f003 0306 	and.w	r3, r3, #6
10009ad2:	2b04      	cmp	r3, #4
10009ad4:	bf02      	ittt	eq
10009ad6:	68e5      	ldreq	r5, [r4, #12]
10009ad8:	6833      	ldreq	r3, [r6, #0]
10009ada:	1aed      	subeq	r5, r5, r3
10009adc:	68a3      	ldr	r3, [r4, #8]
10009ade:	bf0c      	ite	eq
10009ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
10009ae4:	2500      	movne	r5, #0
10009ae6:	4293      	cmp	r3, r2
10009ae8:	bfc4      	itt	gt
10009aea:	1a9b      	subgt	r3, r3, r2
10009aec:	18ed      	addgt	r5, r5, r3
10009aee:	2600      	movs	r6, #0
10009af0:	341a      	adds	r4, #26
10009af2:	42b5      	cmp	r5, r6
10009af4:	d11a      	bne.n	10009b2c <_printf_common+0xc8>
10009af6:	2000      	movs	r0, #0
10009af8:	e008      	b.n	10009b0c <_printf_common+0xa8>
10009afa:	2301      	movs	r3, #1
10009afc:	4652      	mov	r2, sl
10009afe:	4641      	mov	r1, r8
10009b00:	4638      	mov	r0, r7
10009b02:	47c8      	blx	r9
10009b04:	3001      	adds	r0, #1
10009b06:	d103      	bne.n	10009b10 <_printf_common+0xac>
10009b08:	f04f 30ff 	mov.w	r0, #4294967295
10009b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10009b10:	3501      	adds	r5, #1
10009b12:	e7c6      	b.n	10009aa2 <_printf_common+0x3e>
10009b14:	18e1      	adds	r1, r4, r3
10009b16:	1c5a      	adds	r2, r3, #1
10009b18:	2030      	movs	r0, #48	@ 0x30
10009b1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
10009b1e:	4422      	add	r2, r4
10009b20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
10009b24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
10009b28:	3302      	adds	r3, #2
10009b2a:	e7c7      	b.n	10009abc <_printf_common+0x58>
10009b2c:	2301      	movs	r3, #1
10009b2e:	4622      	mov	r2, r4
10009b30:	4641      	mov	r1, r8
10009b32:	4638      	mov	r0, r7
10009b34:	47c8      	blx	r9
10009b36:	3001      	adds	r0, #1
10009b38:	d0e6      	beq.n	10009b08 <_printf_common+0xa4>
10009b3a:	3601      	adds	r6, #1
10009b3c:	e7d9      	b.n	10009af2 <_printf_common+0x8e>
	...

10009b40 <_printf_i>:
10009b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
10009b44:	7e0f      	ldrb	r7, [r1, #24]
10009b46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
10009b48:	2f78      	cmp	r7, #120	@ 0x78
10009b4a:	4691      	mov	r9, r2
10009b4c:	4680      	mov	r8, r0
10009b4e:	460c      	mov	r4, r1
10009b50:	469a      	mov	sl, r3
10009b52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
10009b56:	d807      	bhi.n	10009b68 <_printf_i+0x28>
10009b58:	2f62      	cmp	r7, #98	@ 0x62
10009b5a:	d80a      	bhi.n	10009b72 <_printf_i+0x32>
10009b5c:	2f00      	cmp	r7, #0
10009b5e:	f000 80d1 	beq.w	10009d04 <_printf_i+0x1c4>
10009b62:	2f58      	cmp	r7, #88	@ 0x58
10009b64:	f000 80b8 	beq.w	10009cd8 <_printf_i+0x198>
10009b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
10009b6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
10009b70:	e03a      	b.n	10009be8 <_printf_i+0xa8>
10009b72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
10009b76:	2b15      	cmp	r3, #21
10009b78:	d8f6      	bhi.n	10009b68 <_printf_i+0x28>
10009b7a:	a101      	add	r1, pc, #4	@ (adr r1, 10009b80 <_printf_i+0x40>)
10009b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
10009b80:	10009bd9 	.word	0x10009bd9
10009b84:	10009bed 	.word	0x10009bed
10009b88:	10009b69 	.word	0x10009b69
10009b8c:	10009b69 	.word	0x10009b69
10009b90:	10009b69 	.word	0x10009b69
10009b94:	10009b69 	.word	0x10009b69
10009b98:	10009bed 	.word	0x10009bed
10009b9c:	10009b69 	.word	0x10009b69
10009ba0:	10009b69 	.word	0x10009b69
10009ba4:	10009b69 	.word	0x10009b69
10009ba8:	10009b69 	.word	0x10009b69
10009bac:	10009ceb 	.word	0x10009ceb
10009bb0:	10009c17 	.word	0x10009c17
10009bb4:	10009ca5 	.word	0x10009ca5
10009bb8:	10009b69 	.word	0x10009b69
10009bbc:	10009b69 	.word	0x10009b69
10009bc0:	10009d0d 	.word	0x10009d0d
10009bc4:	10009b69 	.word	0x10009b69
10009bc8:	10009c17 	.word	0x10009c17
10009bcc:	10009b69 	.word	0x10009b69
10009bd0:	10009b69 	.word	0x10009b69
10009bd4:	10009cad 	.word	0x10009cad
10009bd8:	6833      	ldr	r3, [r6, #0]
10009bda:	1d1a      	adds	r2, r3, #4
10009bdc:	681b      	ldr	r3, [r3, #0]
10009bde:	6032      	str	r2, [r6, #0]
10009be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
10009be4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
10009be8:	2301      	movs	r3, #1
10009bea:	e09c      	b.n	10009d26 <_printf_i+0x1e6>
10009bec:	6833      	ldr	r3, [r6, #0]
10009bee:	6820      	ldr	r0, [r4, #0]
10009bf0:	1d19      	adds	r1, r3, #4
10009bf2:	6031      	str	r1, [r6, #0]
10009bf4:	0606      	lsls	r6, r0, #24
10009bf6:	d501      	bpl.n	10009bfc <_printf_i+0xbc>
10009bf8:	681d      	ldr	r5, [r3, #0]
10009bfa:	e003      	b.n	10009c04 <_printf_i+0xc4>
10009bfc:	0645      	lsls	r5, r0, #25
10009bfe:	d5fb      	bpl.n	10009bf8 <_printf_i+0xb8>
10009c00:	f9b3 5000 	ldrsh.w	r5, [r3]
10009c04:	2d00      	cmp	r5, #0
10009c06:	da03      	bge.n	10009c10 <_printf_i+0xd0>
10009c08:	232d      	movs	r3, #45	@ 0x2d
10009c0a:	426d      	negs	r5, r5
10009c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
10009c10:	4858      	ldr	r0, [pc, #352]	@ (10009d74 <_printf_i+0x234>)
10009c12:	230a      	movs	r3, #10
10009c14:	e011      	b.n	10009c3a <_printf_i+0xfa>
10009c16:	6821      	ldr	r1, [r4, #0]
10009c18:	6833      	ldr	r3, [r6, #0]
10009c1a:	0608      	lsls	r0, r1, #24
10009c1c:	f853 5b04 	ldr.w	r5, [r3], #4
10009c20:	d402      	bmi.n	10009c28 <_printf_i+0xe8>
10009c22:	0649      	lsls	r1, r1, #25
10009c24:	bf48      	it	mi
10009c26:	b2ad      	uxthmi	r5, r5
10009c28:	2f6f      	cmp	r7, #111	@ 0x6f
10009c2a:	4852      	ldr	r0, [pc, #328]	@ (10009d74 <_printf_i+0x234>)
10009c2c:	6033      	str	r3, [r6, #0]
10009c2e:	bf14      	ite	ne
10009c30:	230a      	movne	r3, #10
10009c32:	2308      	moveq	r3, #8
10009c34:	2100      	movs	r1, #0
10009c36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
10009c3a:	6866      	ldr	r6, [r4, #4]
10009c3c:	60a6      	str	r6, [r4, #8]
10009c3e:	2e00      	cmp	r6, #0
10009c40:	db05      	blt.n	10009c4e <_printf_i+0x10e>
10009c42:	6821      	ldr	r1, [r4, #0]
10009c44:	432e      	orrs	r6, r5
10009c46:	f021 0104 	bic.w	r1, r1, #4
10009c4a:	6021      	str	r1, [r4, #0]
10009c4c:	d04b      	beq.n	10009ce6 <_printf_i+0x1a6>
10009c4e:	4616      	mov	r6, r2
10009c50:	fbb5 f1f3 	udiv	r1, r5, r3
10009c54:	fb03 5711 	mls	r7, r3, r1, r5
10009c58:	5dc7      	ldrb	r7, [r0, r7]
10009c5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
10009c5e:	462f      	mov	r7, r5
10009c60:	42bb      	cmp	r3, r7
10009c62:	460d      	mov	r5, r1
10009c64:	d9f4      	bls.n	10009c50 <_printf_i+0x110>
10009c66:	2b08      	cmp	r3, #8
10009c68:	d10b      	bne.n	10009c82 <_printf_i+0x142>
10009c6a:	6823      	ldr	r3, [r4, #0]
10009c6c:	07df      	lsls	r7, r3, #31
10009c6e:	d508      	bpl.n	10009c82 <_printf_i+0x142>
10009c70:	6923      	ldr	r3, [r4, #16]
10009c72:	6861      	ldr	r1, [r4, #4]
10009c74:	4299      	cmp	r1, r3
10009c76:	bfde      	ittt	le
10009c78:	2330      	movle	r3, #48	@ 0x30
10009c7a:	f806 3c01 	strble.w	r3, [r6, #-1]
10009c7e:	f106 36ff 	addle.w	r6, r6, #4294967295
10009c82:	1b92      	subs	r2, r2, r6
10009c84:	6122      	str	r2, [r4, #16]
10009c86:	f8cd a000 	str.w	sl, [sp]
10009c8a:	464b      	mov	r3, r9
10009c8c:	aa03      	add	r2, sp, #12
10009c8e:	4621      	mov	r1, r4
10009c90:	4640      	mov	r0, r8
10009c92:	f7ff fee7 	bl	10009a64 <_printf_common>
10009c96:	3001      	adds	r0, #1
10009c98:	d14a      	bne.n	10009d30 <_printf_i+0x1f0>
10009c9a:	f04f 30ff 	mov.w	r0, #4294967295
10009c9e:	b004      	add	sp, #16
10009ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10009ca4:	6823      	ldr	r3, [r4, #0]
10009ca6:	f043 0320 	orr.w	r3, r3, #32
10009caa:	6023      	str	r3, [r4, #0]
10009cac:	4832      	ldr	r0, [pc, #200]	@ (10009d78 <_printf_i+0x238>)
10009cae:	2778      	movs	r7, #120	@ 0x78
10009cb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
10009cb4:	6823      	ldr	r3, [r4, #0]
10009cb6:	6831      	ldr	r1, [r6, #0]
10009cb8:	061f      	lsls	r7, r3, #24
10009cba:	f851 5b04 	ldr.w	r5, [r1], #4
10009cbe:	d402      	bmi.n	10009cc6 <_printf_i+0x186>
10009cc0:	065f      	lsls	r7, r3, #25
10009cc2:	bf48      	it	mi
10009cc4:	b2ad      	uxthmi	r5, r5
10009cc6:	6031      	str	r1, [r6, #0]
10009cc8:	07d9      	lsls	r1, r3, #31
10009cca:	bf44      	itt	mi
10009ccc:	f043 0320 	orrmi.w	r3, r3, #32
10009cd0:	6023      	strmi	r3, [r4, #0]
10009cd2:	b11d      	cbz	r5, 10009cdc <_printf_i+0x19c>
10009cd4:	2310      	movs	r3, #16
10009cd6:	e7ad      	b.n	10009c34 <_printf_i+0xf4>
10009cd8:	4826      	ldr	r0, [pc, #152]	@ (10009d74 <_printf_i+0x234>)
10009cda:	e7e9      	b.n	10009cb0 <_printf_i+0x170>
10009cdc:	6823      	ldr	r3, [r4, #0]
10009cde:	f023 0320 	bic.w	r3, r3, #32
10009ce2:	6023      	str	r3, [r4, #0]
10009ce4:	e7f6      	b.n	10009cd4 <_printf_i+0x194>
10009ce6:	4616      	mov	r6, r2
10009ce8:	e7bd      	b.n	10009c66 <_printf_i+0x126>
10009cea:	6833      	ldr	r3, [r6, #0]
10009cec:	6825      	ldr	r5, [r4, #0]
10009cee:	6961      	ldr	r1, [r4, #20]
10009cf0:	1d18      	adds	r0, r3, #4
10009cf2:	6030      	str	r0, [r6, #0]
10009cf4:	062e      	lsls	r6, r5, #24
10009cf6:	681b      	ldr	r3, [r3, #0]
10009cf8:	d501      	bpl.n	10009cfe <_printf_i+0x1be>
10009cfa:	6019      	str	r1, [r3, #0]
10009cfc:	e002      	b.n	10009d04 <_printf_i+0x1c4>
10009cfe:	0668      	lsls	r0, r5, #25
10009d00:	d5fb      	bpl.n	10009cfa <_printf_i+0x1ba>
10009d02:	8019      	strh	r1, [r3, #0]
10009d04:	2300      	movs	r3, #0
10009d06:	6123      	str	r3, [r4, #16]
10009d08:	4616      	mov	r6, r2
10009d0a:	e7bc      	b.n	10009c86 <_printf_i+0x146>
10009d0c:	6833      	ldr	r3, [r6, #0]
10009d0e:	1d1a      	adds	r2, r3, #4
10009d10:	6032      	str	r2, [r6, #0]
10009d12:	681e      	ldr	r6, [r3, #0]
10009d14:	6862      	ldr	r2, [r4, #4]
10009d16:	2100      	movs	r1, #0
10009d18:	4630      	mov	r0, r6
10009d1a:	f7f6 f9a1 	bl	10000060 <memchr>
10009d1e:	b108      	cbz	r0, 10009d24 <_printf_i+0x1e4>
10009d20:	1b80      	subs	r0, r0, r6
10009d22:	6060      	str	r0, [r4, #4]
10009d24:	6863      	ldr	r3, [r4, #4]
10009d26:	6123      	str	r3, [r4, #16]
10009d28:	2300      	movs	r3, #0
10009d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
10009d2e:	e7aa      	b.n	10009c86 <_printf_i+0x146>
10009d30:	6923      	ldr	r3, [r4, #16]
10009d32:	4632      	mov	r2, r6
10009d34:	4649      	mov	r1, r9
10009d36:	4640      	mov	r0, r8
10009d38:	47d0      	blx	sl
10009d3a:	3001      	adds	r0, #1
10009d3c:	d0ad      	beq.n	10009c9a <_printf_i+0x15a>
10009d3e:	6823      	ldr	r3, [r4, #0]
10009d40:	079b      	lsls	r3, r3, #30
10009d42:	d413      	bmi.n	10009d6c <_printf_i+0x22c>
10009d44:	68e0      	ldr	r0, [r4, #12]
10009d46:	9b03      	ldr	r3, [sp, #12]
10009d48:	4298      	cmp	r0, r3
10009d4a:	bfb8      	it	lt
10009d4c:	4618      	movlt	r0, r3
10009d4e:	e7a6      	b.n	10009c9e <_printf_i+0x15e>
10009d50:	2301      	movs	r3, #1
10009d52:	4632      	mov	r2, r6
10009d54:	4649      	mov	r1, r9
10009d56:	4640      	mov	r0, r8
10009d58:	47d0      	blx	sl
10009d5a:	3001      	adds	r0, #1
10009d5c:	d09d      	beq.n	10009c9a <_printf_i+0x15a>
10009d5e:	3501      	adds	r5, #1
10009d60:	68e3      	ldr	r3, [r4, #12]
10009d62:	9903      	ldr	r1, [sp, #12]
10009d64:	1a5b      	subs	r3, r3, r1
10009d66:	42ab      	cmp	r3, r5
10009d68:	dcf2      	bgt.n	10009d50 <_printf_i+0x210>
10009d6a:	e7eb      	b.n	10009d44 <_printf_i+0x204>
10009d6c:	2500      	movs	r5, #0
10009d6e:	f104 0619 	add.w	r6, r4, #25
10009d72:	e7f5      	b.n	10009d60 <_printf_i+0x220>
10009d74:	1000a7ca 	.word	0x1000a7ca
10009d78:	1000a7db 	.word	0x1000a7db

10009d7c <__sflush_r>:
10009d7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10009d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10009d84:	0716      	lsls	r6, r2, #28
10009d86:	4605      	mov	r5, r0
10009d88:	460c      	mov	r4, r1
10009d8a:	d454      	bmi.n	10009e36 <__sflush_r+0xba>
10009d8c:	684b      	ldr	r3, [r1, #4]
10009d8e:	2b00      	cmp	r3, #0
10009d90:	dc02      	bgt.n	10009d98 <__sflush_r+0x1c>
10009d92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
10009d94:	2b00      	cmp	r3, #0
10009d96:	dd48      	ble.n	10009e2a <__sflush_r+0xae>
10009d98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
10009d9a:	2e00      	cmp	r6, #0
10009d9c:	d045      	beq.n	10009e2a <__sflush_r+0xae>
10009d9e:	2300      	movs	r3, #0
10009da0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
10009da4:	682f      	ldr	r7, [r5, #0]
10009da6:	6a21      	ldr	r1, [r4, #32]
10009da8:	602b      	str	r3, [r5, #0]
10009daa:	d030      	beq.n	10009e0e <__sflush_r+0x92>
10009dac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
10009dae:	89a3      	ldrh	r3, [r4, #12]
10009db0:	0759      	lsls	r1, r3, #29
10009db2:	d505      	bpl.n	10009dc0 <__sflush_r+0x44>
10009db4:	6863      	ldr	r3, [r4, #4]
10009db6:	1ad2      	subs	r2, r2, r3
10009db8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
10009dba:	b10b      	cbz	r3, 10009dc0 <__sflush_r+0x44>
10009dbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
10009dbe:	1ad2      	subs	r2, r2, r3
10009dc0:	2300      	movs	r3, #0
10009dc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
10009dc4:	6a21      	ldr	r1, [r4, #32]
10009dc6:	4628      	mov	r0, r5
10009dc8:	47b0      	blx	r6
10009dca:	1c43      	adds	r3, r0, #1
10009dcc:	89a3      	ldrh	r3, [r4, #12]
10009dce:	d106      	bne.n	10009dde <__sflush_r+0x62>
10009dd0:	6829      	ldr	r1, [r5, #0]
10009dd2:	291d      	cmp	r1, #29
10009dd4:	d82b      	bhi.n	10009e2e <__sflush_r+0xb2>
10009dd6:	4a2a      	ldr	r2, [pc, #168]	@ (10009e80 <__sflush_r+0x104>)
10009dd8:	40ca      	lsrs	r2, r1
10009dda:	07d6      	lsls	r6, r2, #31
10009ddc:	d527      	bpl.n	10009e2e <__sflush_r+0xb2>
10009dde:	2200      	movs	r2, #0
10009de0:	6062      	str	r2, [r4, #4]
10009de2:	04d9      	lsls	r1, r3, #19
10009de4:	6922      	ldr	r2, [r4, #16]
10009de6:	6022      	str	r2, [r4, #0]
10009de8:	d504      	bpl.n	10009df4 <__sflush_r+0x78>
10009dea:	1c42      	adds	r2, r0, #1
10009dec:	d101      	bne.n	10009df2 <__sflush_r+0x76>
10009dee:	682b      	ldr	r3, [r5, #0]
10009df0:	b903      	cbnz	r3, 10009df4 <__sflush_r+0x78>
10009df2:	6560      	str	r0, [r4, #84]	@ 0x54
10009df4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10009df6:	602f      	str	r7, [r5, #0]
10009df8:	b1b9      	cbz	r1, 10009e2a <__sflush_r+0xae>
10009dfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
10009dfe:	4299      	cmp	r1, r3
10009e00:	d002      	beq.n	10009e08 <__sflush_r+0x8c>
10009e02:	4628      	mov	r0, r5
10009e04:	f7ff fb4a 	bl	1000949c <_free_r>
10009e08:	2300      	movs	r3, #0
10009e0a:	6363      	str	r3, [r4, #52]	@ 0x34
10009e0c:	e00d      	b.n	10009e2a <__sflush_r+0xae>
10009e0e:	2301      	movs	r3, #1
10009e10:	4628      	mov	r0, r5
10009e12:	47b0      	blx	r6
10009e14:	4602      	mov	r2, r0
10009e16:	1c50      	adds	r0, r2, #1
10009e18:	d1c9      	bne.n	10009dae <__sflush_r+0x32>
10009e1a:	682b      	ldr	r3, [r5, #0]
10009e1c:	2b00      	cmp	r3, #0
10009e1e:	d0c6      	beq.n	10009dae <__sflush_r+0x32>
10009e20:	2b1d      	cmp	r3, #29
10009e22:	d001      	beq.n	10009e28 <__sflush_r+0xac>
10009e24:	2b16      	cmp	r3, #22
10009e26:	d11e      	bne.n	10009e66 <__sflush_r+0xea>
10009e28:	602f      	str	r7, [r5, #0]
10009e2a:	2000      	movs	r0, #0
10009e2c:	e022      	b.n	10009e74 <__sflush_r+0xf8>
10009e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009e32:	b21b      	sxth	r3, r3
10009e34:	e01b      	b.n	10009e6e <__sflush_r+0xf2>
10009e36:	690f      	ldr	r7, [r1, #16]
10009e38:	2f00      	cmp	r7, #0
10009e3a:	d0f6      	beq.n	10009e2a <__sflush_r+0xae>
10009e3c:	0793      	lsls	r3, r2, #30
10009e3e:	680e      	ldr	r6, [r1, #0]
10009e40:	bf08      	it	eq
10009e42:	694b      	ldreq	r3, [r1, #20]
10009e44:	600f      	str	r7, [r1, #0]
10009e46:	bf18      	it	ne
10009e48:	2300      	movne	r3, #0
10009e4a:	eba6 0807 	sub.w	r8, r6, r7
10009e4e:	608b      	str	r3, [r1, #8]
10009e50:	f1b8 0f00 	cmp.w	r8, #0
10009e54:	dde9      	ble.n	10009e2a <__sflush_r+0xae>
10009e56:	6a21      	ldr	r1, [r4, #32]
10009e58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
10009e5a:	4643      	mov	r3, r8
10009e5c:	463a      	mov	r2, r7
10009e5e:	4628      	mov	r0, r5
10009e60:	47b0      	blx	r6
10009e62:	2800      	cmp	r0, #0
10009e64:	dc08      	bgt.n	10009e78 <__sflush_r+0xfc>
10009e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10009e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009e6e:	81a3      	strh	r3, [r4, #12]
10009e70:	f04f 30ff 	mov.w	r0, #4294967295
10009e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10009e78:	4407      	add	r7, r0
10009e7a:	eba8 0800 	sub.w	r8, r8, r0
10009e7e:	e7e7      	b.n	10009e50 <__sflush_r+0xd4>
10009e80:	20400001 	.word	0x20400001

10009e84 <_fflush_r>:
10009e84:	b538      	push	{r3, r4, r5, lr}
10009e86:	690b      	ldr	r3, [r1, #16]
10009e88:	4605      	mov	r5, r0
10009e8a:	460c      	mov	r4, r1
10009e8c:	b913      	cbnz	r3, 10009e94 <_fflush_r+0x10>
10009e8e:	2500      	movs	r5, #0
10009e90:	4628      	mov	r0, r5
10009e92:	bd38      	pop	{r3, r4, r5, pc}
10009e94:	b118      	cbz	r0, 10009e9e <_fflush_r+0x1a>
10009e96:	6a03      	ldr	r3, [r0, #32]
10009e98:	b90b      	cbnz	r3, 10009e9e <_fflush_r+0x1a>
10009e9a:	f7ff f971 	bl	10009180 <__sinit>
10009e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10009ea2:	2b00      	cmp	r3, #0
10009ea4:	d0f3      	beq.n	10009e8e <_fflush_r+0xa>
10009ea6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10009ea8:	07d0      	lsls	r0, r2, #31
10009eaa:	d404      	bmi.n	10009eb6 <_fflush_r+0x32>
10009eac:	0599      	lsls	r1, r3, #22
10009eae:	d402      	bmi.n	10009eb6 <_fflush_r+0x32>
10009eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10009eb2:	f7ff fadc 	bl	1000946e <__retarget_lock_acquire_recursive>
10009eb6:	4628      	mov	r0, r5
10009eb8:	4621      	mov	r1, r4
10009eba:	f7ff ff5f 	bl	10009d7c <__sflush_r>
10009ebe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10009ec0:	07da      	lsls	r2, r3, #31
10009ec2:	4605      	mov	r5, r0
10009ec4:	d4e4      	bmi.n	10009e90 <_fflush_r+0xc>
10009ec6:	89a3      	ldrh	r3, [r4, #12]
10009ec8:	059b      	lsls	r3, r3, #22
10009eca:	d4e1      	bmi.n	10009e90 <_fflush_r+0xc>
10009ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10009ece:	f7ff facf 	bl	10009470 <__retarget_lock_release_recursive>
10009ed2:	e7dd      	b.n	10009e90 <_fflush_r+0xc>

10009ed4 <__swbuf_r>:
10009ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009ed6:	460e      	mov	r6, r1
10009ed8:	4614      	mov	r4, r2
10009eda:	4605      	mov	r5, r0
10009edc:	b118      	cbz	r0, 10009ee6 <__swbuf_r+0x12>
10009ede:	6a03      	ldr	r3, [r0, #32]
10009ee0:	b90b      	cbnz	r3, 10009ee6 <__swbuf_r+0x12>
10009ee2:	f7ff f94d 	bl	10009180 <__sinit>
10009ee6:	69a3      	ldr	r3, [r4, #24]
10009ee8:	60a3      	str	r3, [r4, #8]
10009eea:	89a3      	ldrh	r3, [r4, #12]
10009eec:	071a      	lsls	r2, r3, #28
10009eee:	d501      	bpl.n	10009ef4 <__swbuf_r+0x20>
10009ef0:	6923      	ldr	r3, [r4, #16]
10009ef2:	b943      	cbnz	r3, 10009f06 <__swbuf_r+0x32>
10009ef4:	4621      	mov	r1, r4
10009ef6:	4628      	mov	r0, r5
10009ef8:	f000 f82a 	bl	10009f50 <__swsetup_r>
10009efc:	b118      	cbz	r0, 10009f06 <__swbuf_r+0x32>
10009efe:	f04f 37ff 	mov.w	r7, #4294967295
10009f02:	4638      	mov	r0, r7
10009f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f06:	6823      	ldr	r3, [r4, #0]
10009f08:	6922      	ldr	r2, [r4, #16]
10009f0a:	1a98      	subs	r0, r3, r2
10009f0c:	6963      	ldr	r3, [r4, #20]
10009f0e:	b2f6      	uxtb	r6, r6
10009f10:	4283      	cmp	r3, r0
10009f12:	4637      	mov	r7, r6
10009f14:	dc05      	bgt.n	10009f22 <__swbuf_r+0x4e>
10009f16:	4621      	mov	r1, r4
10009f18:	4628      	mov	r0, r5
10009f1a:	f7ff ffb3 	bl	10009e84 <_fflush_r>
10009f1e:	2800      	cmp	r0, #0
10009f20:	d1ed      	bne.n	10009efe <__swbuf_r+0x2a>
10009f22:	68a3      	ldr	r3, [r4, #8]
10009f24:	3b01      	subs	r3, #1
10009f26:	60a3      	str	r3, [r4, #8]
10009f28:	6823      	ldr	r3, [r4, #0]
10009f2a:	1c5a      	adds	r2, r3, #1
10009f2c:	6022      	str	r2, [r4, #0]
10009f2e:	701e      	strb	r6, [r3, #0]
10009f30:	6962      	ldr	r2, [r4, #20]
10009f32:	1c43      	adds	r3, r0, #1
10009f34:	429a      	cmp	r2, r3
10009f36:	d004      	beq.n	10009f42 <__swbuf_r+0x6e>
10009f38:	89a3      	ldrh	r3, [r4, #12]
10009f3a:	07db      	lsls	r3, r3, #31
10009f3c:	d5e1      	bpl.n	10009f02 <__swbuf_r+0x2e>
10009f3e:	2e0a      	cmp	r6, #10
10009f40:	d1df      	bne.n	10009f02 <__swbuf_r+0x2e>
10009f42:	4621      	mov	r1, r4
10009f44:	4628      	mov	r0, r5
10009f46:	f7ff ff9d 	bl	10009e84 <_fflush_r>
10009f4a:	2800      	cmp	r0, #0
10009f4c:	d0d9      	beq.n	10009f02 <__swbuf_r+0x2e>
10009f4e:	e7d6      	b.n	10009efe <__swbuf_r+0x2a>

10009f50 <__swsetup_r>:
10009f50:	b538      	push	{r3, r4, r5, lr}
10009f52:	4b29      	ldr	r3, [pc, #164]	@ (10009ff8 <__swsetup_r+0xa8>)
10009f54:	4605      	mov	r5, r0
10009f56:	6818      	ldr	r0, [r3, #0]
10009f58:	460c      	mov	r4, r1
10009f5a:	b118      	cbz	r0, 10009f64 <__swsetup_r+0x14>
10009f5c:	6a03      	ldr	r3, [r0, #32]
10009f5e:	b90b      	cbnz	r3, 10009f64 <__swsetup_r+0x14>
10009f60:	f7ff f90e 	bl	10009180 <__sinit>
10009f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10009f68:	0719      	lsls	r1, r3, #28
10009f6a:	d422      	bmi.n	10009fb2 <__swsetup_r+0x62>
10009f6c:	06da      	lsls	r2, r3, #27
10009f6e:	d407      	bmi.n	10009f80 <__swsetup_r+0x30>
10009f70:	2209      	movs	r2, #9
10009f72:	602a      	str	r2, [r5, #0]
10009f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009f78:	81a3      	strh	r3, [r4, #12]
10009f7a:	f04f 30ff 	mov.w	r0, #4294967295
10009f7e:	e033      	b.n	10009fe8 <__swsetup_r+0x98>
10009f80:	0758      	lsls	r0, r3, #29
10009f82:	d512      	bpl.n	10009faa <__swsetup_r+0x5a>
10009f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10009f86:	b141      	cbz	r1, 10009f9a <__swsetup_r+0x4a>
10009f88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
10009f8c:	4299      	cmp	r1, r3
10009f8e:	d002      	beq.n	10009f96 <__swsetup_r+0x46>
10009f90:	4628      	mov	r0, r5
10009f92:	f7ff fa83 	bl	1000949c <_free_r>
10009f96:	2300      	movs	r3, #0
10009f98:	6363      	str	r3, [r4, #52]	@ 0x34
10009f9a:	89a3      	ldrh	r3, [r4, #12]
10009f9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
10009fa0:	81a3      	strh	r3, [r4, #12]
10009fa2:	2300      	movs	r3, #0
10009fa4:	6063      	str	r3, [r4, #4]
10009fa6:	6923      	ldr	r3, [r4, #16]
10009fa8:	6023      	str	r3, [r4, #0]
10009faa:	89a3      	ldrh	r3, [r4, #12]
10009fac:	f043 0308 	orr.w	r3, r3, #8
10009fb0:	81a3      	strh	r3, [r4, #12]
10009fb2:	6923      	ldr	r3, [r4, #16]
10009fb4:	b94b      	cbnz	r3, 10009fca <__swsetup_r+0x7a>
10009fb6:	89a3      	ldrh	r3, [r4, #12]
10009fb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
10009fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
10009fc0:	d003      	beq.n	10009fca <__swsetup_r+0x7a>
10009fc2:	4621      	mov	r1, r4
10009fc4:	4628      	mov	r0, r5
10009fc6:	f000 f8cb 	bl	1000a160 <__smakebuf_r>
10009fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10009fce:	f013 0201 	ands.w	r2, r3, #1
10009fd2:	d00a      	beq.n	10009fea <__swsetup_r+0x9a>
10009fd4:	2200      	movs	r2, #0
10009fd6:	60a2      	str	r2, [r4, #8]
10009fd8:	6962      	ldr	r2, [r4, #20]
10009fda:	4252      	negs	r2, r2
10009fdc:	61a2      	str	r2, [r4, #24]
10009fde:	6922      	ldr	r2, [r4, #16]
10009fe0:	b942      	cbnz	r2, 10009ff4 <__swsetup_r+0xa4>
10009fe2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
10009fe6:	d1c5      	bne.n	10009f74 <__swsetup_r+0x24>
10009fe8:	bd38      	pop	{r3, r4, r5, pc}
10009fea:	0799      	lsls	r1, r3, #30
10009fec:	bf58      	it	pl
10009fee:	6962      	ldrpl	r2, [r4, #20]
10009ff0:	60a2      	str	r2, [r4, #8]
10009ff2:	e7f4      	b.n	10009fde <__swsetup_r+0x8e>
10009ff4:	2000      	movs	r0, #0
10009ff6:	e7f7      	b.n	10009fe8 <__swsetup_r+0x98>
10009ff8:	100200d8 	.word	0x100200d8

10009ffc <memmove>:
10009ffc:	4288      	cmp	r0, r1
10009ffe:	b510      	push	{r4, lr}
1000a000:	eb01 0402 	add.w	r4, r1, r2
1000a004:	d902      	bls.n	1000a00c <memmove+0x10>
1000a006:	4284      	cmp	r4, r0
1000a008:	4623      	mov	r3, r4
1000a00a:	d807      	bhi.n	1000a01c <memmove+0x20>
1000a00c:	1e43      	subs	r3, r0, #1
1000a00e:	42a1      	cmp	r1, r4
1000a010:	d008      	beq.n	1000a024 <memmove+0x28>
1000a012:	f811 2b01 	ldrb.w	r2, [r1], #1
1000a016:	f803 2f01 	strb.w	r2, [r3, #1]!
1000a01a:	e7f8      	b.n	1000a00e <memmove+0x12>
1000a01c:	4402      	add	r2, r0
1000a01e:	4601      	mov	r1, r0
1000a020:	428a      	cmp	r2, r1
1000a022:	d100      	bne.n	1000a026 <memmove+0x2a>
1000a024:	bd10      	pop	{r4, pc}
1000a026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1000a02a:	f802 4d01 	strb.w	r4, [r2, #-1]!
1000a02e:	e7f7      	b.n	1000a020 <memmove+0x24>

1000a030 <_raise_r>:
1000a030:	291f      	cmp	r1, #31
1000a032:	b538      	push	{r3, r4, r5, lr}
1000a034:	4605      	mov	r5, r0
1000a036:	460c      	mov	r4, r1
1000a038:	d904      	bls.n	1000a044 <_raise_r+0x14>
1000a03a:	2316      	movs	r3, #22
1000a03c:	6003      	str	r3, [r0, #0]
1000a03e:	f04f 30ff 	mov.w	r0, #4294967295
1000a042:	bd38      	pop	{r3, r4, r5, pc}
1000a044:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
1000a046:	b112      	cbz	r2, 1000a04e <_raise_r+0x1e>
1000a048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000a04c:	b94b      	cbnz	r3, 1000a062 <_raise_r+0x32>
1000a04e:	4628      	mov	r0, r5
1000a050:	f000 f830 	bl	1000a0b4 <_getpid_r>
1000a054:	4622      	mov	r2, r4
1000a056:	4601      	mov	r1, r0
1000a058:	4628      	mov	r0, r5
1000a05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000a05e:	f000 b817 	b.w	1000a090 <_kill_r>
1000a062:	2b01      	cmp	r3, #1
1000a064:	d00a      	beq.n	1000a07c <_raise_r+0x4c>
1000a066:	1c59      	adds	r1, r3, #1
1000a068:	d103      	bne.n	1000a072 <_raise_r+0x42>
1000a06a:	2316      	movs	r3, #22
1000a06c:	6003      	str	r3, [r0, #0]
1000a06e:	2001      	movs	r0, #1
1000a070:	e7e7      	b.n	1000a042 <_raise_r+0x12>
1000a072:	2100      	movs	r1, #0
1000a074:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
1000a078:	4620      	mov	r0, r4
1000a07a:	4798      	blx	r3
1000a07c:	2000      	movs	r0, #0
1000a07e:	e7e0      	b.n	1000a042 <_raise_r+0x12>

1000a080 <raise>:
1000a080:	4b02      	ldr	r3, [pc, #8]	@ (1000a08c <raise+0xc>)
1000a082:	4601      	mov	r1, r0
1000a084:	6818      	ldr	r0, [r3, #0]
1000a086:	f7ff bfd3 	b.w	1000a030 <_raise_r>
1000a08a:	bf00      	nop
1000a08c:	100200d8 	.word	0x100200d8

1000a090 <_kill_r>:
1000a090:	b538      	push	{r3, r4, r5, lr}
1000a092:	4d07      	ldr	r5, [pc, #28]	@ (1000a0b0 <_kill_r+0x20>)
1000a094:	2300      	movs	r3, #0
1000a096:	4604      	mov	r4, r0
1000a098:	4608      	mov	r0, r1
1000a09a:	4611      	mov	r1, r2
1000a09c:	602b      	str	r3, [r5, #0]
1000a09e:	f7f7 f969 	bl	10001374 <_kill>
1000a0a2:	1c43      	adds	r3, r0, #1
1000a0a4:	d102      	bne.n	1000a0ac <_kill_r+0x1c>
1000a0a6:	682b      	ldr	r3, [r5, #0]
1000a0a8:	b103      	cbz	r3, 1000a0ac <_kill_r+0x1c>
1000a0aa:	6023      	str	r3, [r4, #0]
1000a0ac:	bd38      	pop	{r3, r4, r5, pc}
1000a0ae:	bf00      	nop
1000a0b0:	10020548 	.word	0x10020548

1000a0b4 <_getpid_r>:
1000a0b4:	f7f7 b956 	b.w	10001364 <_getpid>

1000a0b8 <_realloc_r>:
1000a0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000a0bc:	4607      	mov	r7, r0
1000a0be:	4614      	mov	r4, r2
1000a0c0:	460d      	mov	r5, r1
1000a0c2:	b921      	cbnz	r1, 1000a0ce <_realloc_r+0x16>
1000a0c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000a0c8:	4611      	mov	r1, r2
1000a0ca:	f7fe bf41 	b.w	10008f50 <_malloc_r>
1000a0ce:	b92a      	cbnz	r2, 1000a0dc <_realloc_r+0x24>
1000a0d0:	f7ff f9e4 	bl	1000949c <_free_r>
1000a0d4:	4625      	mov	r5, r4
1000a0d6:	4628      	mov	r0, r5
1000a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000a0dc:	f000 f89e 	bl	1000a21c <_malloc_usable_size_r>
1000a0e0:	4284      	cmp	r4, r0
1000a0e2:	4606      	mov	r6, r0
1000a0e4:	d802      	bhi.n	1000a0ec <_realloc_r+0x34>
1000a0e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000a0ea:	d8f4      	bhi.n	1000a0d6 <_realloc_r+0x1e>
1000a0ec:	4621      	mov	r1, r4
1000a0ee:	4638      	mov	r0, r7
1000a0f0:	f7fe ff2e 	bl	10008f50 <_malloc_r>
1000a0f4:	4680      	mov	r8, r0
1000a0f6:	b908      	cbnz	r0, 1000a0fc <_realloc_r+0x44>
1000a0f8:	4645      	mov	r5, r8
1000a0fa:	e7ec      	b.n	1000a0d6 <_realloc_r+0x1e>
1000a0fc:	42b4      	cmp	r4, r6
1000a0fe:	4622      	mov	r2, r4
1000a100:	4629      	mov	r1, r5
1000a102:	bf28      	it	cs
1000a104:	4632      	movcs	r2, r6
1000a106:	f7ff f9b4 	bl	10009472 <memcpy>
1000a10a:	4629      	mov	r1, r5
1000a10c:	4638      	mov	r0, r7
1000a10e:	f7ff f9c5 	bl	1000949c <_free_r>
1000a112:	e7f1      	b.n	1000a0f8 <_realloc_r+0x40>

1000a114 <__swhatbuf_r>:
1000a114:	b570      	push	{r4, r5, r6, lr}
1000a116:	460c      	mov	r4, r1
1000a118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000a11c:	2900      	cmp	r1, #0
1000a11e:	b096      	sub	sp, #88	@ 0x58
1000a120:	4615      	mov	r5, r2
1000a122:	461e      	mov	r6, r3
1000a124:	da0d      	bge.n	1000a142 <__swhatbuf_r+0x2e>
1000a126:	89a3      	ldrh	r3, [r4, #12]
1000a128:	f013 0f80 	tst.w	r3, #128	@ 0x80
1000a12c:	f04f 0100 	mov.w	r1, #0
1000a130:	bf14      	ite	ne
1000a132:	2340      	movne	r3, #64	@ 0x40
1000a134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
1000a138:	2000      	movs	r0, #0
1000a13a:	6031      	str	r1, [r6, #0]
1000a13c:	602b      	str	r3, [r5, #0]
1000a13e:	b016      	add	sp, #88	@ 0x58
1000a140:	bd70      	pop	{r4, r5, r6, pc}
1000a142:	466a      	mov	r2, sp
1000a144:	f000 f848 	bl	1000a1d8 <_fstat_r>
1000a148:	2800      	cmp	r0, #0
1000a14a:	dbec      	blt.n	1000a126 <__swhatbuf_r+0x12>
1000a14c:	9901      	ldr	r1, [sp, #4]
1000a14e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
1000a152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
1000a156:	4259      	negs	r1, r3
1000a158:	4159      	adcs	r1, r3
1000a15a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1000a15e:	e7eb      	b.n	1000a138 <__swhatbuf_r+0x24>

1000a160 <__smakebuf_r>:
1000a160:	898b      	ldrh	r3, [r1, #12]
1000a162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a164:	079d      	lsls	r5, r3, #30
1000a166:	4606      	mov	r6, r0
1000a168:	460c      	mov	r4, r1
1000a16a:	d507      	bpl.n	1000a17c <__smakebuf_r+0x1c>
1000a16c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
1000a170:	6023      	str	r3, [r4, #0]
1000a172:	6123      	str	r3, [r4, #16]
1000a174:	2301      	movs	r3, #1
1000a176:	6163      	str	r3, [r4, #20]
1000a178:	b003      	add	sp, #12
1000a17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a17c:	ab01      	add	r3, sp, #4
1000a17e:	466a      	mov	r2, sp
1000a180:	f7ff ffc8 	bl	1000a114 <__swhatbuf_r>
1000a184:	9f00      	ldr	r7, [sp, #0]
1000a186:	4605      	mov	r5, r0
1000a188:	4639      	mov	r1, r7
1000a18a:	4630      	mov	r0, r6
1000a18c:	f7fe fee0 	bl	10008f50 <_malloc_r>
1000a190:	b948      	cbnz	r0, 1000a1a6 <__smakebuf_r+0x46>
1000a192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a196:	059a      	lsls	r2, r3, #22
1000a198:	d4ee      	bmi.n	1000a178 <__smakebuf_r+0x18>
1000a19a:	f023 0303 	bic.w	r3, r3, #3
1000a19e:	f043 0302 	orr.w	r3, r3, #2
1000a1a2:	81a3      	strh	r3, [r4, #12]
1000a1a4:	e7e2      	b.n	1000a16c <__smakebuf_r+0xc>
1000a1a6:	89a3      	ldrh	r3, [r4, #12]
1000a1a8:	6020      	str	r0, [r4, #0]
1000a1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000a1ae:	81a3      	strh	r3, [r4, #12]
1000a1b0:	9b01      	ldr	r3, [sp, #4]
1000a1b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
1000a1b6:	b15b      	cbz	r3, 1000a1d0 <__smakebuf_r+0x70>
1000a1b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000a1bc:	4630      	mov	r0, r6
1000a1be:	f000 f81d 	bl	1000a1fc <_isatty_r>
1000a1c2:	b128      	cbz	r0, 1000a1d0 <__smakebuf_r+0x70>
1000a1c4:	89a3      	ldrh	r3, [r4, #12]
1000a1c6:	f023 0303 	bic.w	r3, r3, #3
1000a1ca:	f043 0301 	orr.w	r3, r3, #1
1000a1ce:	81a3      	strh	r3, [r4, #12]
1000a1d0:	89a3      	ldrh	r3, [r4, #12]
1000a1d2:	431d      	orrs	r5, r3
1000a1d4:	81a5      	strh	r5, [r4, #12]
1000a1d6:	e7cf      	b.n	1000a178 <__smakebuf_r+0x18>

1000a1d8 <_fstat_r>:
1000a1d8:	b538      	push	{r3, r4, r5, lr}
1000a1da:	4d07      	ldr	r5, [pc, #28]	@ (1000a1f8 <_fstat_r+0x20>)
1000a1dc:	2300      	movs	r3, #0
1000a1de:	4604      	mov	r4, r0
1000a1e0:	4608      	mov	r0, r1
1000a1e2:	4611      	mov	r1, r2
1000a1e4:	602b      	str	r3, [r5, #0]
1000a1e6:	f7f7 f925 	bl	10001434 <_fstat>
1000a1ea:	1c43      	adds	r3, r0, #1
1000a1ec:	d102      	bne.n	1000a1f4 <_fstat_r+0x1c>
1000a1ee:	682b      	ldr	r3, [r5, #0]
1000a1f0:	b103      	cbz	r3, 1000a1f4 <_fstat_r+0x1c>
1000a1f2:	6023      	str	r3, [r4, #0]
1000a1f4:	bd38      	pop	{r3, r4, r5, pc}
1000a1f6:	bf00      	nop
1000a1f8:	10020548 	.word	0x10020548

1000a1fc <_isatty_r>:
1000a1fc:	b538      	push	{r3, r4, r5, lr}
1000a1fe:	4d06      	ldr	r5, [pc, #24]	@ (1000a218 <_isatty_r+0x1c>)
1000a200:	2300      	movs	r3, #0
1000a202:	4604      	mov	r4, r0
1000a204:	4608      	mov	r0, r1
1000a206:	602b      	str	r3, [r5, #0]
1000a208:	f7f7 f924 	bl	10001454 <_isatty>
1000a20c:	1c43      	adds	r3, r0, #1
1000a20e:	d102      	bne.n	1000a216 <_isatty_r+0x1a>
1000a210:	682b      	ldr	r3, [r5, #0]
1000a212:	b103      	cbz	r3, 1000a216 <_isatty_r+0x1a>
1000a214:	6023      	str	r3, [r4, #0]
1000a216:	bd38      	pop	{r3, r4, r5, pc}
1000a218:	10020548 	.word	0x10020548

1000a21c <_malloc_usable_size_r>:
1000a21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000a220:	1f18      	subs	r0, r3, #4
1000a222:	2b00      	cmp	r3, #0
1000a224:	bfbc      	itt	lt
1000a226:	580b      	ldrlt	r3, [r1, r0]
1000a228:	18c0      	addlt	r0, r0, r3
1000a22a:	4770      	bx	lr

1000a22c <_init>:
1000a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a22e:	bf00      	nop
1000a230:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a232:	bc08      	pop	{r3}
1000a234:	469e      	mov	lr, r3
1000a236:	4770      	bx	lr

1000a238 <_fini>:
1000a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a23a:	bf00      	nop
1000a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a23e:	bc08      	pop	{r3}
1000a240:	469e      	mov	lr, r3
1000a242:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000a244 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000a244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 1000a27c <LoopForever+0x2>
  movs  r1, #0
1000a248:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000a24a:	e003      	b.n	1000a254 <LoopCopyDataInit>

1000a24c <CopyDataInit>:
  ldr  r3, =_sidata
1000a24c:	4b0c      	ldr	r3, [pc, #48]	@ (1000a280 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000a24e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000a250:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000a252:	3104      	adds	r1, #4

1000a254 <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000a254:	480b      	ldr	r0, [pc, #44]	@ (1000a284 <LoopForever+0xa>)
  ldr  r3, =_edata
1000a256:	4b0c      	ldr	r3, [pc, #48]	@ (1000a288 <LoopForever+0xe>)
  adds  r2, r0, r1
1000a258:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000a25a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000a25c:	d3f6      	bcc.n	1000a24c <CopyDataInit>
  ldr  r2, =_sbss
1000a25e:	4a0b      	ldr	r2, [pc, #44]	@ (1000a28c <LoopForever+0x12>)
  b  LoopFillZerobss
1000a260:	e002      	b.n	1000a268 <LoopFillZerobss>

1000a262 <FillZerobss>:
  movs  r3, #0
1000a262:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000a264:	f842 3b04 	str.w	r3, [r2], #4

1000a268 <LoopFillZerobss>:
  ldr  r3, = _ebss
1000a268:	4b09      	ldr	r3, [pc, #36]	@ (1000a290 <LoopForever+0x16>)
  cmp  r2, r3
1000a26a:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000a26c:	d3f9      	bcc.n	1000a262 <FillZerobss>
  bl  SystemInit
1000a26e:	f7f5 ff47 	bl	10000100 <SystemInit>
 bl __libc_init_array
1000a272:	f7ff f8d7 	bl	10009424 <__libc_init_array>
  bl main
1000a276:	f7f5 ff69 	bl	1000014c <main>

1000a27a <LoopForever>:
    b LoopForever
1000a27a:	e7fe      	b.n	1000a27a <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000a27c:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000a280:	1000a7fc 	.word	0x1000a7fc
  ldr  r0, =_sdata
1000a284:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000a288:	10020128 	.word	0x10020128
  ldr  r2, =_sbss
1000a28c:	100201b4 	.word	0x100201b4
  ldr  r3, = _ebss
1000a290:	10020550 	.word	0x10020550
