
dk2-rfid_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a980  10000000  10000000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000a980  1000a980  0000c980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a38  1000a9d0  1000a9d0  0000c9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000b408  1000b408  0000e1b4  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  1000b408  1000b408  0000d408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  1000b410  1000b410  0000e1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000b410  1000b410  0000d410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  1000b414  1000b414  0000d414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000128  10020000  1000b418  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020128  1000b540  0000e128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          000004b0  100201b4  1000b5cc  0000e1b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  10020664  1000ba7c  0000e1b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000e1b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c5ba  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004471  00000000  00000000  0002a79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011c0  00000000  00000000  0002ec10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d26  00000000  00000000  0002fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004a4a8  00000000  00000000  00030af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000192e8  00000000  00000000  0007af9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001cf8c5  00000000  00000000  00094286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00263b4b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000050d8  00000000  00000000  00263b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  00268c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201b4 	.word	0x100201b4
1000001c:	00000000 	.word	0x00000000
10000020:	1000a968 	.word	0x1000a968

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201b8 	.word	0x100201b8
1000003c:	1000a968 	.word	0x1000a968

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000100:	b480      	push	{r7}
10000102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000104:	4b0f      	ldr	r3, [pc, #60]	@ (10000144 <SystemInit+0x44>)
10000106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000010a:	4a0e      	ldr	r2, [pc, #56]	@ (10000144 <SystemInit+0x44>)
1000010c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000114:	4b0c      	ldr	r3, [pc, #48]	@ (10000148 <SystemInit+0x48>)
10000116:	2200      	movs	r2, #0
10000118:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000011a:	4b0b      	ldr	r3, [pc, #44]	@ (10000148 <SystemInit+0x48>)
1000011c:	2200      	movs	r2, #0
1000011e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000120:	4b09      	ldr	r3, [pc, #36]	@ (10000148 <SystemInit+0x48>)
10000122:	2200      	movs	r2, #0
10000124:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000126:	4b08      	ldr	r3, [pc, #32]	@ (10000148 <SystemInit+0x48>)
10000128:	2200      	movs	r2, #0
1000012a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000012c:	4b06      	ldr	r3, [pc, #24]	@ (10000148 <SystemInit+0x48>)
1000012e:	2200      	movs	r2, #0
10000130:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000132:	4b05      	ldr	r3, [pc, #20]	@ (10000148 <SystemInit+0x48>)
10000134:	2200      	movs	r2, #0
10000136:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000138:	bf00      	nop
1000013a:	46bd      	mov	sp, r7
1000013c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000140:	4770      	bx	lr
10000142:	bf00      	nop
10000144:	e000ed00 	.word	0xe000ed00
10000148:	5000d0c0 	.word	0x5000d0c0

1000014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
1000014c:	b580      	push	{r7, lr}
1000014e:	b082      	sub	sp, #8
10000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000152:	f001 fcd9 	bl	10001b08 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000156:	4b44      	ldr	r3, [pc, #272]	@ (10000268 <main+0x11c>)
10000158:	681b      	ldr	r3, [r3, #0]
1000015a:	f003 0307 	and.w	r3, r3, #7
1000015e:	2b04      	cmp	r3, #4
10000160:	d101      	bne.n	10000166 <main+0x1a>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000162:	f000 f8a1 	bl	100002a8 <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
10000166:	4b40      	ldr	r3, [pc, #256]	@ (10000268 <main+0x11c>)
10000168:	681b      	ldr	r3, [r3, #0]
1000016a:	f003 0307 	and.w	r3, r3, #7
1000016e:	2b04      	cmp	r3, #4
10000170:	d102      	bne.n	10000178 <main+0x2c>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000172:	f000 fa0f 	bl	10000594 <PeriphCommonClock_Config>
10000176:	e005      	b.n	10000184 <main+0x38>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000178:	f000 fa3a 	bl	100005f0 <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
1000017c:	2100      	movs	r1, #0
1000017e:	2001      	movs	r0, #1
10000180:	f009 f8ce 	bl	10009320 <MX_OPENAMP_Init>
  }

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
10000184:	f000 faaf 	bl	100006e6 <MX_GPIO_Init>
  MX_DMA_Init();
10000188:	f000 fa9c 	bl	100006c4 <MX_DMA_Init>
  MX_SPI5_Init();
1000018c:	f000 fa44 	bl	10000618 <MX_SPI5_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000190:	f000 faa9 	bl	100006e6 <MX_GPIO_Init>
  MX_DMA_Init();
10000194:	f000 fa96 	bl	100006c4 <MX_DMA_Init>
  MX_SPI5_Init();
10000198:	f000 fa3e 	bl	10000618 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  // Initialize MFRC522
   mfrc522.hspi = &hspi5;
1000019c:	4b33      	ldr	r3, [pc, #204]	@ (1000026c <main+0x120>)
1000019e:	4a34      	ldr	r2, [pc, #208]	@ (10000270 <main+0x124>)
100001a0:	601a      	str	r2, [r3, #0]
   mfrc522.CS_GPIO_Port = GPIOD;
100001a2:	4b32      	ldr	r3, [pc, #200]	@ (1000026c <main+0x120>)
100001a4:	f04f 2250 	mov.w	r2, #1342197760	@ 0x50005000
100001a8:	605a      	str	r2, [r3, #4]
   mfrc522.CS_Pin = GPIO_PIN_14;
100001aa:	4b30      	ldr	r3, [pc, #192]	@ (1000026c <main+0x120>)
100001ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
100001b0:	811a      	strh	r2, [r3, #8]
   mfrc522.RST_GPIO_Port = GPIOD;
100001b2:	4b2e      	ldr	r3, [pc, #184]	@ (1000026c <main+0x120>)
100001b4:	f04f 2250 	mov.w	r2, #1342197760	@ 0x50005000
100001b8:	60da      	str	r2, [r3, #12]
   mfrc522.RST_Pin = GPIO_PIN_15;
100001ba:	4b2c      	ldr	r3, [pc, #176]	@ (1000026c <main+0x120>)
100001bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
100001c0:	821a      	strh	r2, [r3, #16]

   MFRC522_Init(&mfrc522);
100001c2:	482a      	ldr	r0, [pc, #168]	@ (1000026c <main+0x120>)
100001c4:	f000 fe28 	bl	10000e18 <MFRC522_Init>

   // Initialize Virtual UART
   VIRT_UART_Init(&huart0);
100001c8:	482a      	ldr	r0, [pc, #168]	@ (10000274 <main+0x128>)
100001ca:	f008 fc05 	bl	100089d8 <VIRT_UART_Init>
   if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART_RxCpltCallback) != VIRT_UART_OK) {
100001ce:	4a2a      	ldr	r2, [pc, #168]	@ (10000278 <main+0x12c>)
100001d0:	2100      	movs	r1, #0
100001d2:	4828      	ldr	r0, [pc, #160]	@ (10000274 <main+0x128>)
100001d4:	f008 fc1c 	bl	10008a10 <VIRT_UART_RegisterCallback>
100001d8:	4603      	mov	r3, r0
100001da:	2b00      	cmp	r3, #0
100001dc:	d001      	beq.n	100001e2 <main+0x96>
       Error_Handler();
100001de:	f000 fe15 	bl	10000e0c <Error_Handler>
   }

   // Send startup message
   qprint("\r\n=== M4 Core Started ===\r\n");
100001e2:	4826      	ldr	r0, [pc, #152]	@ (1000027c <main+0x130>)
100001e4:	f000 fde0 	bl	10000da8 <qprint>
   qprint("RFID Reader Ready\r\n");
100001e8:	4825      	ldr	r0, [pc, #148]	@ (10000280 <main+0x134>)
100001ea:	f000 fddd 	bl	10000da8 <qprint>
   qprint("Available commands:\r\n");
100001ee:	4825      	ldr	r0, [pc, #148]	@ (10000284 <main+0x138>)
100001f0:	f000 fdda 	bl	10000da8 <qprint>
   qprint("  scan        - Scan for card once\r\n");
100001f4:	4824      	ldr	r0, [pc, #144]	@ (10000288 <main+0x13c>)
100001f6:	f000 fdd7 	bl	10000da8 <qprint>
   qprint("  status      - Get system status\r\n");
100001fa:	4824      	ldr	r0, [pc, #144]	@ (1000028c <main+0x140>)
100001fc:	f000 fdd4 	bl	10000da8 <qprint>
   qprint("  read:N      - Read block N (e.g., read:4)\r\n");
10000200:	4823      	ldr	r0, [pc, #140]	@ (10000290 <main+0x144>)
10000202:	f000 fdd1 	bl	10000da8 <qprint>
   qprint("  write:N:DATA - Write to block N\r\n");
10000206:	4823      	ldr	r0, [pc, #140]	@ (10000294 <main+0x148>)
10000208:	f000 fdce 	bl	10000da8 <qprint>
   qprint("===================\r\n\r\n");
1000020c:	4822      	ldr	r0, [pc, #136]	@ (10000298 <main+0x14c>)
1000020e:	f000 fdcb 	bl	10000da8 <qprint>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   uint32_t lastAutoScan = 0;
10000212:	2300      	movs	r3, #0
10000214:	607b      	str	r3, [r7, #4]
   uint8_t autoScanEnabled = 1; // Auto-scan by default
10000216:	2301      	movs	r3, #1
10000218:	70fb      	strb	r3, [r7, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      OPENAMP_check_for_message();
1000021a:	f009 f933 	bl	10009484 <OPENAMP_check_for_message>

      // Process any pending commands from A7
      if (commandReady) {
1000021e:	4b1f      	ldr	r3, [pc, #124]	@ (1000029c <main+0x150>)
10000220:	781b      	ldrb	r3, [r3, #0]
10000222:	b2db      	uxtb	r3, r3
10000224:	2b00      	cmp	r3, #0
10000226:	d00e      	beq.n	10000246 <main+0xfa>
          commandReady = 0;
10000228:	4b1c      	ldr	r3, [pc, #112]	@ (1000029c <main+0x150>)
1000022a:	2200      	movs	r2, #0
1000022c:	701a      	strb	r2, [r3, #0]
          ProcessCommand(rxBuffer);
1000022e:	481c      	ldr	r0, [pc, #112]	@ (100002a0 <main+0x154>)
10000230:	f000 fac0 	bl	100007b4 <ProcessCommand>
          rxIndex = 0;
10000234:	4b1b      	ldr	r3, [pc, #108]	@ (100002a4 <main+0x158>)
10000236:	2200      	movs	r2, #0
10000238:	801a      	strh	r2, [r3, #0]
          memset(rxBuffer, 0, RX_BUFFER_SIZE);
1000023a:	f44f 7280 	mov.w	r2, #256	@ 0x100
1000023e:	2100      	movs	r1, #0
10000240:	4817      	ldr	r0, [pc, #92]	@ (100002a0 <main+0x154>)
10000242:	f009 fbf7 	bl	10009a34 <memset>
      }

      // Auto-scan mode (can be disabled via command)
      if (autoScanEnabled && (HAL_GetTick() - lastAutoScan > 100)) {
10000246:	78fb      	ldrb	r3, [r7, #3]
10000248:	2b00      	cmp	r3, #0
1000024a:	d0e6      	beq.n	1000021a <main+0xce>
1000024c:	f001 fcc0 	bl	10001bd0 <HAL_GetTick>
10000250:	4602      	mov	r2, r0
10000252:	687b      	ldr	r3, [r7, #4]
10000254:	1ad3      	subs	r3, r2, r3
10000256:	2b64      	cmp	r3, #100	@ 0x64
10000258:	d9df      	bls.n	1000021a <main+0xce>
          lastAutoScan = HAL_GetTick();
1000025a:	f001 fcb9 	bl	10001bd0 <HAL_GetTick>
1000025e:	6078      	str	r0, [r7, #4]

          //uint8_t tagType[2];
          //MFRC522_Status_t status = MFRC522_Request(PICC_CMD_REQA, tagType);
          ExecuteScanOnce();
10000260:	f000 fb82 	bl	10000968 <ExecuteScanOnce>
      OPENAMP_check_for_message();
10000264:	e7d9      	b.n	1000021a <main+0xce>
10000266:	bf00      	nop
10000268:	50020000 	.word	0x50020000
1000026c:	100202e4 	.word	0x100202e4
10000270:	1002020c 	.word	0x1002020c
10000274:	10020294 	.word	0x10020294
10000278:	1000071d 	.word	0x1000071d
1000027c:	1000a9d0 	.word	0x1000a9d0
10000280:	1000a9ec 	.word	0x1000a9ec
10000284:	1000aa00 	.word	0x1000aa00
10000288:	1000aa18 	.word	0x1000aa18
1000028c:	1000aa40 	.word	0x1000aa40
10000290:	1000aa64 	.word	0x1000aa64
10000294:	1000aa94 	.word	0x1000aa94
10000298:	1000aab8 	.word	0x1000aab8
1000029c:	1002041a 	.word	0x1002041a
100002a0:	10020318 	.word	0x10020318
100002a4:	10020418 	.word	0x10020418

100002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100002a8:	b580      	push	{r7, lr}
100002aa:	b0d2      	sub	sp, #328	@ 0x148
100002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100002ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002b6:	4618      	mov	r0, r3
100002b8:	f44f 738a 	mov.w	r3, #276	@ 0x114
100002bc:	461a      	mov	r2, r3
100002be:	2100      	movs	r1, #0
100002c0:	f009 fbb8 	bl	10009a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100002c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002c8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100002cc:	4618      	mov	r0, r3
100002ce:	2330      	movs	r3, #48	@ 0x30
100002d0:	461a      	mov	r2, r3
100002d2:	2100      	movs	r1, #0
100002d4:	f009 fbae 	bl	10009a34 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
100002d8:	f002 f996 	bl	10002608 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
100002dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100002e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100002e4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
100002e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100002ec:	f043 0320 	orr.w	r3, r3, #32
100002f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
100002f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002fc:	2217      	movs	r2, #23
100002fe:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000300:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000304:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000308:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
1000030c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
1000030e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000312:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000316:	2201      	movs	r2, #1
10000318:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
1000031a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000031e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000322:	2201      	movs	r2, #1
10000324:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000326:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000032a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000032e:	2200      	movs	r2, #0
10000330:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
10000332:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000336:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000033a:	2210      	movs	r2, #16
1000033c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
1000033e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000342:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000346:	2200      	movs	r2, #0
10000348:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
1000034a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000034e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000352:	2202      	movs	r2, #2
10000354:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000356:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000035a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000035e:	2201      	movs	r2, #1
10000360:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000362:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000366:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000036a:	2203      	movs	r2, #3
1000036c:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
1000036e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000372:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000376:	2242      	movs	r2, #66	@ 0x42
10000378:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
1000037a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000037e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000382:	2202      	movs	r2, #2
10000384:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000386:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000038a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000038e:	2201      	movs	r2, #1
10000390:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000392:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000396:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000039a:	2201      	movs	r2, #1
1000039c:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
1000039e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003a6:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
100003aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
100003ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003b6:	2201      	movs	r2, #1
100003b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
100003bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003c4:	2202      	movs	r2, #2
100003c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
100003ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003d2:	2201      	movs	r2, #1
100003d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
100003d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003e0:	2202      	movs	r2, #2
100003e2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
100003e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003ee:	2222      	movs	r2, #34	@ 0x22
100003f0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
100003f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003fc:	2202      	movs	r2, #2
100003fe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10000402:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000406:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000040a:	2211      	movs	r2, #17
1000040c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000410:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000414:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000418:	2225      	movs	r2, #37	@ 0x25
1000041a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
1000041e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000422:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000426:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
1000042a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
1000042e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000432:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000436:	f641 2204 	movw	r2, #6660	@ 0x1a04
1000043a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
1000043e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000442:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000446:	2201      	movs	r2, #1
10000448:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
1000044c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000450:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000454:	2202      	movs	r2, #2
10000456:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
1000045a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000045e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000462:	2201      	movs	r2, #1
10000464:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000468:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000046c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000470:	2204      	movs	r2, #4
10000472:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000476:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000047a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000047e:	2263      	movs	r2, #99	@ 0x63
10000480:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000484:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000488:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000048c:	2206      	movs	r2, #6
1000048e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000492:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000496:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000049a:	2208      	movs	r2, #8
1000049c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
100004a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004a8:	2208      	movs	r2, #8
100004aa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
100004ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004b6:	2200      	movs	r2, #0
100004b8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
100004bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004c4:	2200      	movs	r2, #0
100004c6:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
100004ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100004d2:	2200      	movs	r2, #0
100004d4:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100004d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
100004dc:	4618      	mov	r0, r3
100004de:	f002 f8a3 	bl	10002628 <HAL_RCC_OscConfig>
100004e2:	4603      	mov	r3, r0
100004e4:	2b00      	cmp	r3, #0
100004e6:	d001      	beq.n	100004ec <SystemClock_Config+0x244>
  {
    Error_Handler();
100004e8:	f000 fc90 	bl	10000e0c <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100004ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100004f4:	22fe      	movs	r2, #254	@ 0xfe
100004f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
100004f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100004fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000500:	2202      	movs	r2, #2
10000502:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000504:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000508:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000050c:	2200      	movs	r2, #0
1000050e:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000510:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000514:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000518:	2203      	movs	r2, #3
1000051a:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
1000051c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000520:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000524:	2200      	movs	r2, #0
10000526:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000528:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000052c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000530:	2201      	movs	r2, #1
10000532:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000534:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000538:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000053c:	2202      	movs	r2, #2
1000053e:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000540:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000544:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000548:	2201      	movs	r2, #1
1000054a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
1000054c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000550:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000554:	2201      	movs	r2, #1
10000556:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000558:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000055c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000560:	2201      	movs	r2, #1
10000562:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000564:	1d3b      	adds	r3, r7, #4
10000566:	4618      	mov	r0, r3
10000568:	f002 fdfc 	bl	10003164 <HAL_RCC_ClockConfig>
1000056c:	4603      	mov	r3, r0
1000056e:	2b00      	cmp	r3, #0
10000570:	d001      	beq.n	10000576 <SystemClock_Config+0x2ce>
  {
    Error_Handler();
10000572:	f000 fc4b 	bl	10000e0c <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10000576:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000057a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1000057c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
10000580:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000584:	f043 0317 	orr.w	r3, r3, #23
10000588:	6453      	str	r3, [r2, #68]	@ 0x44
}
1000058a:	bf00      	nop
1000058c:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
10000590:	46bd      	mov	sp, r7
10000592:	bd80      	pop	{r7, pc}

10000594 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10000594:	b580      	push	{r7, lr}
10000596:	b0d6      	sub	sp, #344	@ 0x158
10000598:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
1000059a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
1000059e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
100005a2:	4618      	mov	r0, r3
100005a4:	f44f 73ac 	mov.w	r3, #344	@ 0x158
100005a8:	461a      	mov	r2, r3
100005aa:	2100      	movs	r1, #0
100005ac:	f009 fa42 	bl	10009a34 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
100005b0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100005b4:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
100005b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
100005bc:	f04f 0300 	mov.w	r3, #0
100005c0:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
100005c4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100005c8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
100005cc:	2202      	movs	r2, #2
100005ce:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100005d2:	463b      	mov	r3, r7
100005d4:	4618      	mov	r0, r3
100005d6:	f003 fe43 	bl	10004260 <HAL_RCCEx_PeriphCLKConfig>
100005da:	4603      	mov	r3, r0
100005dc:	2b00      	cmp	r3, #0
100005de:	d001      	beq.n	100005e4 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
100005e0:	f000 fc14 	bl	10000e0c <Error_Handler>
  }
}
100005e4:	bf00      	nop
100005e6:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
100005ea:	46bd      	mov	sp, r7
100005ec:	bd80      	pop	{r7, pc}
	...

100005f0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
100005f0:	b580      	push	{r7, lr}
100005f2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
100005f4:	4b06      	ldr	r3, [pc, #24]	@ (10000610 <MX_IPCC_Init+0x20>)
100005f6:	4a07      	ldr	r2, [pc, #28]	@ (10000614 <MX_IPCC_Init+0x24>)
100005f8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
100005fa:	4805      	ldr	r0, [pc, #20]	@ (10000610 <MX_IPCC_Init+0x20>)
100005fc:	f001 fdee 	bl	100021dc <HAL_IPCC_Init>
10000600:	4603      	mov	r3, r0
10000602:	2b00      	cmp	r3, #0
10000604:	d001      	beq.n	1000060a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
10000606:	f000 fc01 	bl	10000e0c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
1000060a:	bf00      	nop
1000060c:	bd80      	pop	{r7, pc}
1000060e:	bf00      	nop
10000610:	100201d0 	.word	0x100201d0
10000614:	4c001000 	.word	0x4c001000

10000618 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
10000618:	b580      	push	{r7, lr}
1000061a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
1000061c:	4b27      	ldr	r3, [pc, #156]	@ (100006bc <MX_SPI5_Init+0xa4>)
1000061e:	4a28      	ldr	r2, [pc, #160]	@ (100006c0 <MX_SPI5_Init+0xa8>)
10000620:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
10000622:	4b26      	ldr	r3, [pc, #152]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000624:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
10000628:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
1000062a:	4b24      	ldr	r3, [pc, #144]	@ (100006bc <MX_SPI5_Init+0xa4>)
1000062c:	2200      	movs	r2, #0
1000062e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
10000630:	4b22      	ldr	r3, [pc, #136]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000632:	2207      	movs	r2, #7
10000634:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
10000636:	4b21      	ldr	r3, [pc, #132]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000638:	2200      	movs	r2, #0
1000063a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
1000063c:	4b1f      	ldr	r3, [pc, #124]	@ (100006bc <MX_SPI5_Init+0xa4>)
1000063e:	2200      	movs	r2, #0
10000640:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
10000642:	4b1e      	ldr	r3, [pc, #120]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000644:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
10000648:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
1000064a:	4b1c      	ldr	r3, [pc, #112]	@ (100006bc <MX_SPI5_Init+0xa4>)
1000064c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
10000650:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
10000652:	4b1a      	ldr	r3, [pc, #104]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000654:	2200      	movs	r2, #0
10000656:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
10000658:	4b18      	ldr	r3, [pc, #96]	@ (100006bc <MX_SPI5_Init+0xa4>)
1000065a:	2200      	movs	r2, #0
1000065c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
1000065e:	4b17      	ldr	r3, [pc, #92]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000660:	2200      	movs	r2, #0
10000662:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
10000664:	4b15      	ldr	r3, [pc, #84]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000666:	2200      	movs	r2, #0
10000668:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
1000066a:	4b14      	ldr	r3, [pc, #80]	@ (100006bc <MX_SPI5_Init+0xa4>)
1000066c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
10000670:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
10000672:	4b12      	ldr	r3, [pc, #72]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000674:	2200      	movs	r2, #0
10000676:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
10000678:	4b10      	ldr	r3, [pc, #64]	@ (100006bc <MX_SPI5_Init+0xa4>)
1000067a:	2200      	movs	r2, #0
1000067c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
1000067e:	4b0f      	ldr	r3, [pc, #60]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000680:	2200      	movs	r2, #0
10000682:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
10000684:	4b0d      	ldr	r3, [pc, #52]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000686:	2200      	movs	r2, #0
10000688:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
1000068a:	4b0c      	ldr	r3, [pc, #48]	@ (100006bc <MX_SPI5_Init+0xa4>)
1000068c:	2200      	movs	r2, #0
1000068e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
10000690:	4b0a      	ldr	r3, [pc, #40]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000692:	2200      	movs	r2, #0
10000694:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
10000696:	4b09      	ldr	r3, [pc, #36]	@ (100006bc <MX_SPI5_Init+0xa4>)
10000698:	2200      	movs	r2, #0
1000069a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
1000069c:	4b07      	ldr	r3, [pc, #28]	@ (100006bc <MX_SPI5_Init+0xa4>)
1000069e:	2200      	movs	r2, #0
100006a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
100006a2:	4b06      	ldr	r3, [pc, #24]	@ (100006bc <MX_SPI5_Init+0xa4>)
100006a4:	2200      	movs	r2, #0
100006a6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
100006a8:	4804      	ldr	r0, [pc, #16]	@ (100006bc <MX_SPI5_Init+0xa4>)
100006aa:	f005 fc6d 	bl	10005f88 <HAL_SPI_Init>
100006ae:	4603      	mov	r3, r0
100006b0:	2b00      	cmp	r3, #0
100006b2:	d001      	beq.n	100006b8 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
100006b4:	f000 fbaa 	bl	10000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
100006b8:	bf00      	nop
100006ba:	bd80      	pop	{r7, pc}
100006bc:	1002020c 	.word	0x1002020c
100006c0:	44009000 	.word	0x44009000

100006c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
100006c4:	b480      	push	{r7}
100006c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX_CLK_ENABLE();
100006c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100006cc:	2204      	movs	r2, #4
100006ce:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98
  __HAL_RCC_DMA1_CLK_ENABLE();
100006d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100006d6:	2201      	movs	r2, #1
100006d8:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98

}
100006dc:	bf00      	nop
100006de:	46bd      	mov	sp, r7
100006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100006e4:	4770      	bx	lr

100006e6 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100006e6:	b480      	push	{r7}
100006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
100006ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100006ee:	2204      	movs	r2, #4
100006f0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
100006f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100006f8:	2280      	movs	r2, #128	@ 0x80
100006fa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
100006fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000702:	2220      	movs	r2, #32
10000704:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
10000708:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000070c:	2201      	movs	r2, #1
1000070e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
10000712:	bf00      	nop
10000714:	46bd      	mov	sp, r7
10000716:	f85d 7b04 	ldr.w	r7, [sp], #4
1000071a:	4770      	bx	lr

1000071c <VIRT_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void VIRT_UART_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
1000071c:	b480      	push	{r7}
1000071e:	b085      	sub	sp, #20
10000720:	af00      	add	r7, sp, #0
10000722:	6078      	str	r0, [r7, #4]
    // Data is automatically in the RX buffer
    // huart->RxXferSize contains the number of bytes received

    for (uint16_t i = 0; i < huart->RxXferSize; i++) {
10000724:	2300      	movs	r3, #0
10000726:	81fb      	strh	r3, [r7, #14]
10000728:	e031      	b.n	1000078e <VIRT_UART_RxCpltCallback+0x72>
        uint8_t data = huart->pRxBuffPtr[i];
1000072a:	687b      	ldr	r3, [r7, #4]
1000072c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1000072e:	89fb      	ldrh	r3, [r7, #14]
10000730:	4413      	add	r3, r2
10000732:	781b      	ldrb	r3, [r3, #0]
10000734:	737b      	strb	r3, [r7, #13]

        if (data == '\n' || data == '\r') {
10000736:	7b7b      	ldrb	r3, [r7, #13]
10000738:	2b0a      	cmp	r3, #10
1000073a:	d002      	beq.n	10000742 <VIRT_UART_RxCpltCallback+0x26>
1000073c:	7b7b      	ldrb	r3, [r7, #13]
1000073e:	2b0d      	cmp	r3, #13
10000740:	d112      	bne.n	10000768 <VIRT_UART_RxCpltCallback+0x4c>
            // End of command
            if (rxIndex > 0) {
10000742:	4b19      	ldr	r3, [pc, #100]	@ (100007a8 <VIRT_UART_RxCpltCallback+0x8c>)
10000744:	881b      	ldrh	r3, [r3, #0]
10000746:	b29b      	uxth	r3, r3
10000748:	2b00      	cmp	r3, #0
1000074a:	d01d      	beq.n	10000788 <VIRT_UART_RxCpltCallback+0x6c>
                rxBuffer[rxIndex] = '\0';
1000074c:	4b16      	ldr	r3, [pc, #88]	@ (100007a8 <VIRT_UART_RxCpltCallback+0x8c>)
1000074e:	881b      	ldrh	r3, [r3, #0]
10000750:	b29b      	uxth	r3, r3
10000752:	461a      	mov	r2, r3
10000754:	4b15      	ldr	r3, [pc, #84]	@ (100007ac <VIRT_UART_RxCpltCallback+0x90>)
10000756:	2100      	movs	r1, #0
10000758:	5499      	strb	r1, [r3, r2]
                commandReady = 1;
1000075a:	4b15      	ldr	r3, [pc, #84]	@ (100007b0 <VIRT_UART_RxCpltCallback+0x94>)
1000075c:	2201      	movs	r2, #1
1000075e:	701a      	strb	r2, [r3, #0]
                rxIndex = 0;  // Reset for next command
10000760:	4b11      	ldr	r3, [pc, #68]	@ (100007a8 <VIRT_UART_RxCpltCallback+0x8c>)
10000762:	2200      	movs	r2, #0
10000764:	801a      	strh	r2, [r3, #0]
            if (rxIndex > 0) {
10000766:	e00f      	b.n	10000788 <VIRT_UART_RxCpltCallback+0x6c>
            }
        } else if (rxIndex < RX_BUFFER_SIZE - 1) {
10000768:	4b0f      	ldr	r3, [pc, #60]	@ (100007a8 <VIRT_UART_RxCpltCallback+0x8c>)
1000076a:	881b      	ldrh	r3, [r3, #0]
1000076c:	b29b      	uxth	r3, r3
1000076e:	2bfe      	cmp	r3, #254	@ 0xfe
10000770:	d80a      	bhi.n	10000788 <VIRT_UART_RxCpltCallback+0x6c>
            // Add to buffer
            rxBuffer[rxIndex++] = data;
10000772:	4b0d      	ldr	r3, [pc, #52]	@ (100007a8 <VIRT_UART_RxCpltCallback+0x8c>)
10000774:	881b      	ldrh	r3, [r3, #0]
10000776:	b29b      	uxth	r3, r3
10000778:	1c5a      	adds	r2, r3, #1
1000077a:	b291      	uxth	r1, r2
1000077c:	4a0a      	ldr	r2, [pc, #40]	@ (100007a8 <VIRT_UART_RxCpltCallback+0x8c>)
1000077e:	8011      	strh	r1, [r2, #0]
10000780:	4619      	mov	r1, r3
10000782:	4a0a      	ldr	r2, [pc, #40]	@ (100007ac <VIRT_UART_RxCpltCallback+0x90>)
10000784:	7b7b      	ldrb	r3, [r7, #13]
10000786:	5453      	strb	r3, [r2, r1]
    for (uint16_t i = 0; i < huart->RxXferSize; i++) {
10000788:	89fb      	ldrh	r3, [r7, #14]
1000078a:	3301      	adds	r3, #1
1000078c:	81fb      	strh	r3, [r7, #14]
1000078e:	687b      	ldr	r3, [r7, #4]
10000790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
10000794:	89fa      	ldrh	r2, [r7, #14]
10000796:	429a      	cmp	r2, r3
10000798:	d3c7      	bcc.n	1000072a <VIRT_UART_RxCpltCallback+0xe>
        }
    }
}
1000079a:	bf00      	nop
1000079c:	bf00      	nop
1000079e:	3714      	adds	r7, #20
100007a0:	46bd      	mov	sp, r7
100007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
100007a6:	4770      	bx	lr
100007a8:	10020418 	.word	0x10020418
100007ac:	10020318 	.word	0x10020318
100007b0:	1002041a 	.word	0x1002041a

100007b4 <ProcessCommand>:

/**
 * @brief Process incoming command from A7
 */
void ProcessCommand(char* cmd)
{
100007b4:	b580      	push	{r7, lr}
100007b6:	b086      	sub	sp, #24
100007b8:	af00      	add	r7, sp, #0
100007ba:	6078      	str	r0, [r7, #4]
    // Trim whitespace
    while (*cmd == ' ' || *cmd == '\t') cmd++;
100007bc:	e002      	b.n	100007c4 <ProcessCommand+0x10>
100007be:	687b      	ldr	r3, [r7, #4]
100007c0:	3301      	adds	r3, #1
100007c2:	607b      	str	r3, [r7, #4]
100007c4:	687b      	ldr	r3, [r7, #4]
100007c6:	781b      	ldrb	r3, [r3, #0]
100007c8:	2b20      	cmp	r3, #32
100007ca:	d0f8      	beq.n	100007be <ProcessCommand+0xa>
100007cc:	687b      	ldr	r3, [r7, #4]
100007ce:	781b      	ldrb	r3, [r3, #0]
100007d0:	2b09      	cmp	r3, #9
100007d2:	d0f4      	beq.n	100007be <ProcessCommand+0xa>

    qprint("RX: %s\r\n", cmd);
100007d4:	6879      	ldr	r1, [r7, #4]
100007d6:	484e      	ldr	r0, [pc, #312]	@ (10000910 <ProcessCommand+0x15c>)
100007d8:	f000 fae6 	bl	10000da8 <qprint>

    if (strncmp(cmd, "scan", 4) == 0) {
100007dc:	2204      	movs	r2, #4
100007de:	494d      	ldr	r1, [pc, #308]	@ (10000914 <ProcessCommand+0x160>)
100007e0:	6878      	ldr	r0, [r7, #4]
100007e2:	f009 f93c 	bl	10009a5e <strncmp>
100007e6:	4603      	mov	r3, r0
100007e8:	2b00      	cmp	r3, #0
100007ea:	d105      	bne.n	100007f8 <ProcessCommand+0x44>
        qprint(">> Scanning for card...\r\n");
100007ec:	484a      	ldr	r0, [pc, #296]	@ (10000918 <ProcessCommand+0x164>)
100007ee:	f000 fadb 	bl	10000da8 <qprint>
        ExecuteScanOnce();
100007f2:	f000 f8b9 	bl	10000968 <ExecuteScanOnce>
        qprint("   help           - Show this help\r\n");

    } else {
        qprint("ERROR: Unknown command '%s'. Type 'help' for commands.\r\n", cmd);
    }
}
100007f6:	e087      	b.n	10000908 <ProcessCommand+0x154>
    } else if (strncmp(cmd, "status", 6) == 0) {
100007f8:	2206      	movs	r2, #6
100007fa:	4948      	ldr	r1, [pc, #288]	@ (1000091c <ProcessCommand+0x168>)
100007fc:	6878      	ldr	r0, [r7, #4]
100007fe:	f009 f92e 	bl	10009a5e <strncmp>
10000802:	4603      	mov	r3, r0
10000804:	2b00      	cmp	r3, #0
10000806:	d110      	bne.n	1000082a <ProcessCommand+0x76>
        qprint(">> Status:\r\n");
10000808:	4845      	ldr	r0, [pc, #276]	@ (10000920 <ProcessCommand+0x16c>)
1000080a:	f000 facd 	bl	10000da8 <qprint>
        qprint("   M4 Core: Running\r\n");
1000080e:	4845      	ldr	r0, [pc, #276]	@ (10000924 <ProcessCommand+0x170>)
10000810:	f000 faca 	bl	10000da8 <qprint>
        qprint("   RFID: OK\r\n");
10000814:	4844      	ldr	r0, [pc, #272]	@ (10000928 <ProcessCommand+0x174>)
10000816:	f000 fac7 	bl	10000da8 <qprint>
        qprint("   Uptime: %lu ms\r\n", HAL_GetTick());
1000081a:	f001 f9d9 	bl	10001bd0 <HAL_GetTick>
1000081e:	4603      	mov	r3, r0
10000820:	4619      	mov	r1, r3
10000822:	4842      	ldr	r0, [pc, #264]	@ (1000092c <ProcessCommand+0x178>)
10000824:	f000 fac0 	bl	10000da8 <qprint>
}
10000828:	e06e      	b.n	10000908 <ProcessCommand+0x154>
    } else if (strncmp(cmd, "read:", 5) == 0) {
1000082a:	2205      	movs	r2, #5
1000082c:	4940      	ldr	r1, [pc, #256]	@ (10000930 <ProcessCommand+0x17c>)
1000082e:	6878      	ldr	r0, [r7, #4]
10000830:	f009 f915 	bl	10009a5e <strncmp>
10000834:	4603      	mov	r3, r0
10000836:	2b00      	cmp	r3, #0
10000838:	d110      	bne.n	1000085c <ProcessCommand+0xa8>
        uint8_t blockNum = atoi(cmd + 5);
1000083a:	687b      	ldr	r3, [r7, #4]
1000083c:	3305      	adds	r3, #5
1000083e:	4618      	mov	r0, r3
10000840:	f008 fe5e 	bl	10009500 <atoi>
10000844:	4603      	mov	r3, r0
10000846:	73bb      	strb	r3, [r7, #14]
        qprint(">> Reading block %d...\r\n", blockNum);
10000848:	7bbb      	ldrb	r3, [r7, #14]
1000084a:	4619      	mov	r1, r3
1000084c:	4839      	ldr	r0, [pc, #228]	@ (10000934 <ProcessCommand+0x180>)
1000084e:	f000 faab 	bl	10000da8 <qprint>
        ExecuteReadBlock(blockNum);
10000852:	7bbb      	ldrb	r3, [r7, #14]
10000854:	4618      	mov	r0, r3
10000856:	f000 f96f 	bl	10000b38 <ExecuteReadBlock>
}
1000085a:	e055      	b.n	10000908 <ProcessCommand+0x154>
    } else if (strncmp(cmd, "write:", 6) == 0) {
1000085c:	2206      	movs	r2, #6
1000085e:	4936      	ldr	r1, [pc, #216]	@ (10000938 <ProcessCommand+0x184>)
10000860:	6878      	ldr	r0, [r7, #4]
10000862:	f009 f8fc 	bl	10009a5e <strncmp>
10000866:	4603      	mov	r3, r0
10000868:	2b00      	cmp	r3, #0
1000086a:	d12e      	bne.n	100008ca <ProcessCommand+0x116>
        char* blockStr = cmd + 6;
1000086c:	687b      	ldr	r3, [r7, #4]
1000086e:	3306      	adds	r3, #6
10000870:	617b      	str	r3, [r7, #20]
        char* dataStr = strchr(blockStr, ':');
10000872:	213a      	movs	r1, #58	@ 0x3a
10000874:	6978      	ldr	r0, [r7, #20]
10000876:	f009 f8e5 	bl	10009a44 <strchr>
1000087a:	6138      	str	r0, [r7, #16]
        if (dataStr != NULL) {
1000087c:	693b      	ldr	r3, [r7, #16]
1000087e:	2b00      	cmp	r3, #0
10000880:	d01f      	beq.n	100008c2 <ProcessCommand+0x10e>
            *dataStr = '\0';
10000882:	693b      	ldr	r3, [r7, #16]
10000884:	2200      	movs	r2, #0
10000886:	701a      	strb	r2, [r3, #0]
            dataStr++;
10000888:	693b      	ldr	r3, [r7, #16]
1000088a:	3301      	adds	r3, #1
1000088c:	613b      	str	r3, [r7, #16]
            uint8_t blockNum = atoi(blockStr);
1000088e:	6978      	ldr	r0, [r7, #20]
10000890:	f008 fe36 	bl	10009500 <atoi>
10000894:	4603      	mov	r3, r0
10000896:	73fb      	strb	r3, [r7, #15]
            memset(cmdWriteData, ' ', 16);
10000898:	2210      	movs	r2, #16
1000089a:	2120      	movs	r1, #32
1000089c:	4827      	ldr	r0, [pc, #156]	@ (1000093c <ProcessCommand+0x188>)
1000089e:	f009 f8c9 	bl	10009a34 <memset>
            strncpy((char*)cmdWriteData, dataStr, 16);
100008a2:	2210      	movs	r2, #16
100008a4:	6939      	ldr	r1, [r7, #16]
100008a6:	4825      	ldr	r0, [pc, #148]	@ (1000093c <ProcessCommand+0x188>)
100008a8:	f009 f8eb 	bl	10009a82 <strncpy>
            qprint(">> Writing to block %d...\r\n", blockNum);
100008ac:	7bfb      	ldrb	r3, [r7, #15]
100008ae:	4619      	mov	r1, r3
100008b0:	4823      	ldr	r0, [pc, #140]	@ (10000940 <ProcessCommand+0x18c>)
100008b2:	f000 fa79 	bl	10000da8 <qprint>
            ExecuteWriteBlock(blockNum, cmdWriteData);
100008b6:	7bfb      	ldrb	r3, [r7, #15]
100008b8:	4920      	ldr	r1, [pc, #128]	@ (1000093c <ProcessCommand+0x188>)
100008ba:	4618      	mov	r0, r3
100008bc:	f000 f9e6 	bl	10000c8c <ExecuteWriteBlock>
}
100008c0:	e022      	b.n	10000908 <ProcessCommand+0x154>
            qprint("ERROR: Invalid write format. Use: write:BLOCK:DATA\r\n");
100008c2:	4820      	ldr	r0, [pc, #128]	@ (10000944 <ProcessCommand+0x190>)
100008c4:	f000 fa70 	bl	10000da8 <qprint>
}
100008c8:	e01e      	b.n	10000908 <ProcessCommand+0x154>
    } else if (strncmp(cmd, "help", 4) == 0) {
100008ca:	2204      	movs	r2, #4
100008cc:	491e      	ldr	r1, [pc, #120]	@ (10000948 <ProcessCommand+0x194>)
100008ce:	6878      	ldr	r0, [r7, #4]
100008d0:	f009 f8c5 	bl	10009a5e <strncmp>
100008d4:	4603      	mov	r3, r0
100008d6:	2b00      	cmp	r3, #0
100008d8:	d112      	bne.n	10000900 <ProcessCommand+0x14c>
        qprint(">> Available commands:\r\n");
100008da:	481c      	ldr	r0, [pc, #112]	@ (1000094c <ProcessCommand+0x198>)
100008dc:	f000 fa64 	bl	10000da8 <qprint>
        qprint("   scan           - Scan for card once\r\n");
100008e0:	481b      	ldr	r0, [pc, #108]	@ (10000950 <ProcessCommand+0x19c>)
100008e2:	f000 fa61 	bl	10000da8 <qprint>
        qprint("   status         - Get system status\r\n");
100008e6:	481b      	ldr	r0, [pc, #108]	@ (10000954 <ProcessCommand+0x1a0>)
100008e8:	f000 fa5e 	bl	10000da8 <qprint>
        qprint("   read:N         - Read block N\r\n");
100008ec:	481a      	ldr	r0, [pc, #104]	@ (10000958 <ProcessCommand+0x1a4>)
100008ee:	f000 fa5b 	bl	10000da8 <qprint>
        qprint("   write:N:DATA   - Write DATA to block N\r\n");
100008f2:	481a      	ldr	r0, [pc, #104]	@ (1000095c <ProcessCommand+0x1a8>)
100008f4:	f000 fa58 	bl	10000da8 <qprint>
        qprint("   help           - Show this help\r\n");
100008f8:	4819      	ldr	r0, [pc, #100]	@ (10000960 <ProcessCommand+0x1ac>)
100008fa:	f000 fa55 	bl	10000da8 <qprint>
}
100008fe:	e003      	b.n	10000908 <ProcessCommand+0x154>
        qprint("ERROR: Unknown command '%s'. Type 'help' for commands.\r\n", cmd);
10000900:	6879      	ldr	r1, [r7, #4]
10000902:	4818      	ldr	r0, [pc, #96]	@ (10000964 <ProcessCommand+0x1b0>)
10000904:	f000 fa50 	bl	10000da8 <qprint>
}
10000908:	bf00      	nop
1000090a:	3718      	adds	r7, #24
1000090c:	46bd      	mov	sp, r7
1000090e:	bd80      	pop	{r7, pc}
10000910:	1000aad0 	.word	0x1000aad0
10000914:	1000aadc 	.word	0x1000aadc
10000918:	1000aae4 	.word	0x1000aae4
1000091c:	1000ab00 	.word	0x1000ab00
10000920:	1000ab08 	.word	0x1000ab08
10000924:	1000ab18 	.word	0x1000ab18
10000928:	1000ab30 	.word	0x1000ab30
1000092c:	1000ab40 	.word	0x1000ab40
10000930:	1000ab54 	.word	0x1000ab54
10000934:	1000ab5c 	.word	0x1000ab5c
10000938:	1000ab78 	.word	0x1000ab78
1000093c:	1002041c 	.word	0x1002041c
10000940:	1000ab80 	.word	0x1000ab80
10000944:	1000ab9c 	.word	0x1000ab9c
10000948:	1000abd4 	.word	0x1000abd4
1000094c:	1000abdc 	.word	0x1000abdc
10000950:	1000abf8 	.word	0x1000abf8
10000954:	1000ac24 	.word	0x1000ac24
10000958:	1000ac4c 	.word	0x1000ac4c
1000095c:	1000ac70 	.word	0x1000ac70
10000960:	1000ac9c 	.word	0x1000ac9c
10000964:	1000acc4 	.word	0x1000acc4

10000968 <ExecuteScanOnce>:

/**
 * @brief Execute a single card scan
 */
void ExecuteScanOnce(void)
{
10000968:	b580      	push	{r7, lr}
1000096a:	b082      	sub	sp, #8
1000096c:	af00      	add	r7, sp, #0
    uint8_t tagType[2];
    MFRC522_Status_t status = MFRC522_Request(PICC_CMD_REQA, tagType);
1000096e:	463b      	mov	r3, r7
10000970:	4619      	mov	r1, r3
10000972:	2026      	movs	r0, #38	@ 0x26
10000974:	f000 fc6c 	bl	10001250 <MFRC522_Request>
10000978:	4603      	mov	r3, r0
1000097a:	713b      	strb	r3, [r7, #4]

    if (status == MFRC522_OK) {
1000097c:	793b      	ldrb	r3, [r7, #4]
1000097e:	2b00      	cmp	r3, #0
10000980:	f040 80b1 	bne.w	10000ae6 <ExecuteScanOnce+0x17e>
        qprint("\r\n=== Card Detected ===\r\n");
10000984:	485b      	ldr	r0, [pc, #364]	@ (10000af4 <ExecuteScanOnce+0x18c>)
10000986:	f000 fa0f 	bl	10000da8 <qprint>

        // Anti-collision detection, get card UID
        status = MFRC522_Anticoll(&uid);
1000098a:	485b      	ldr	r0, [pc, #364]	@ (10000af8 <ExecuteScanOnce+0x190>)
1000098c:	f000 fc85 	bl	1000129a <MFRC522_Anticoll>
10000990:	4603      	mov	r3, r0
10000992:	713b      	strb	r3, [r7, #4]

        if (status == MFRC522_OK) {
10000994:	793b      	ldrb	r3, [r7, #4]
10000996:	2b00      	cmp	r3, #0
10000998:	f040 8097 	bne.w	10000aca <ExecuteScanOnce+0x162>
            qprint("Card UID: ");
1000099c:	4857      	ldr	r0, [pc, #348]	@ (10000afc <ExecuteScanOnce+0x194>)
1000099e:	f000 fa03 	bl	10000da8 <qprint>
            for (uint8_t i = 0; i < uid.size; i++) {
100009a2:	2300      	movs	r3, #0
100009a4:	71fb      	strb	r3, [r7, #7]
100009a6:	e00a      	b.n	100009be <ExecuteScanOnce+0x56>
                qprint("%02X ", uid.uidByte[i]);
100009a8:	79fb      	ldrb	r3, [r7, #7]
100009aa:	4a53      	ldr	r2, [pc, #332]	@ (10000af8 <ExecuteScanOnce+0x190>)
100009ac:	4413      	add	r3, r2
100009ae:	785b      	ldrb	r3, [r3, #1]
100009b0:	4619      	mov	r1, r3
100009b2:	4853      	ldr	r0, [pc, #332]	@ (10000b00 <ExecuteScanOnce+0x198>)
100009b4:	f000 f9f8 	bl	10000da8 <qprint>
            for (uint8_t i = 0; i < uid.size; i++) {
100009b8:	79fb      	ldrb	r3, [r7, #7]
100009ba:	3301      	adds	r3, #1
100009bc:	71fb      	strb	r3, [r7, #7]
100009be:	4b4e      	ldr	r3, [pc, #312]	@ (10000af8 <ExecuteScanOnce+0x190>)
100009c0:	781b      	ldrb	r3, [r3, #0]
100009c2:	79fa      	ldrb	r2, [r7, #7]
100009c4:	429a      	cmp	r2, r3
100009c6:	d3ef      	bcc.n	100009a8 <ExecuteScanOnce+0x40>
            }
            qprint("\r\n");
100009c8:	484e      	ldr	r0, [pc, #312]	@ (10000b04 <ExecuteScanOnce+0x19c>)
100009ca:	f000 f9ed 	bl	10000da8 <qprint>

            // Select the card
            status = MFRC522_SelectTag(&uid);
100009ce:	484a      	ldr	r0, [pc, #296]	@ (10000af8 <ExecuteScanOnce+0x190>)
100009d0:	f000 fcaf 	bl	10001332 <MFRC522_SelectTag>
100009d4:	4603      	mov	r3, r0
100009d6:	713b      	strb	r3, [r7, #4]

            if (status == MFRC522_OK) {
100009d8:	793b      	ldrb	r3, [r7, #4]
100009da:	2b00      	cmp	r3, #0
100009dc:	d175      	bne.n	10000aca <ExecuteScanOnce+0x162>
                PICC_Type_t cardType = MFRC522_GetType(uid.sak);
100009de:	4b46      	ldr	r3, [pc, #280]	@ (10000af8 <ExecuteScanOnce+0x190>)
100009e0:	7adb      	ldrb	r3, [r3, #11]
100009e2:	4618      	mov	r0, r3
100009e4:	f000 fdfc 	bl	100015e0 <MFRC522_GetType>
100009e8:	4603      	mov	r3, r0
100009ea:	70fb      	strb	r3, [r7, #3]
                qprint("Card Type: %s\r\n", MFRC522_GetTypeName(cardType));
100009ec:	78fb      	ldrb	r3, [r7, #3]
100009ee:	4618      	mov	r0, r3
100009f0:	f000 fe4e 	bl	10001690 <MFRC522_GetTypeName>
100009f4:	4603      	mov	r3, r0
100009f6:	4619      	mov	r1, r3
100009f8:	4843      	ldr	r0, [pc, #268]	@ (10000b08 <ExecuteScanOnce+0x1a0>)
100009fa:	f000 f9d5 	bl	10000da8 <qprint>
                qprint("SAK: 0x%02X\r\n", uid.sak);
100009fe:	4b3e      	ldr	r3, [pc, #248]	@ (10000af8 <ExecuteScanOnce+0x190>)
10000a00:	7adb      	ldrb	r3, [r3, #11]
10000a02:	4619      	mov	r1, r3
10000a04:	4841      	ldr	r0, [pc, #260]	@ (10000b0c <ExecuteScanOnce+0x1a4>)
10000a06:	f000 f9cf 	bl	10000da8 <qprint>

                // Example: Read block 4 (first data block of sector 1)
                uint8_t blockAddr = 4;
10000a0a:	2304      	movs	r3, #4
10000a0c:	70bb      	strb	r3, [r7, #2]

                // Authenticate with Key A
                status = MFRC522_Auth(PICC_CMD_MF_AUTH_KEY_A, blockAddr, keyA, &uid);
10000a0e:	78b9      	ldrb	r1, [r7, #2]
10000a10:	4b39      	ldr	r3, [pc, #228]	@ (10000af8 <ExecuteScanOnce+0x190>)
10000a12:	4a3f      	ldr	r2, [pc, #252]	@ (10000b10 <ExecuteScanOnce+0x1a8>)
10000a14:	2060      	movs	r0, #96	@ 0x60
10000a16:	f000 fcdc 	bl	100013d2 <MFRC522_Auth>
10000a1a:	4603      	mov	r3, r0
10000a1c:	713b      	strb	r3, [r7, #4]

                if (status == MFRC522_OK) {
10000a1e:	793b      	ldrb	r3, [r7, #4]
10000a20:	2b00      	cmp	r3, #0
10000a22:	d14f      	bne.n	10000ac4 <ExecuteScanOnce+0x15c>
                    qprint("Authentication successful!\r\n");
10000a24:	483b      	ldr	r0, [pc, #236]	@ (10000b14 <ExecuteScanOnce+0x1ac>)
10000a26:	f000 f9bf 	bl	10000da8 <qprint>

                    // Read the block
                    status = MFRC522_Read(blockAddr, readBuffer);
10000a2a:	78bb      	ldrb	r3, [r7, #2]
10000a2c:	493a      	ldr	r1, [pc, #232]	@ (10000b18 <ExecuteScanOnce+0x1b0>)
10000a2e:	4618      	mov	r0, r3
10000a30:	f000 fd22 	bl	10001478 <MFRC522_Read>
10000a34:	4603      	mov	r3, r0
10000a36:	713b      	strb	r3, [r7, #4]

                    if (status == MFRC522_OK) {
10000a38:	793b      	ldrb	r3, [r7, #4]
10000a3a:	2b00      	cmp	r3, #0
10000a3c:	d13c      	bne.n	10000ab8 <ExecuteScanOnce+0x150>
                        qprint("Block %d data: ", blockAddr);
10000a3e:	78bb      	ldrb	r3, [r7, #2]
10000a40:	4619      	mov	r1, r3
10000a42:	4836      	ldr	r0, [pc, #216]	@ (10000b1c <ExecuteScanOnce+0x1b4>)
10000a44:	f000 f9b0 	bl	10000da8 <qprint>
                        for (uint8_t i = 0; i < 16; i++) {
10000a48:	2300      	movs	r3, #0
10000a4a:	71bb      	strb	r3, [r7, #6]
10000a4c:	e009      	b.n	10000a62 <ExecuteScanOnce+0xfa>
                            qprint("%02X ", readBuffer[i]);
10000a4e:	79bb      	ldrb	r3, [r7, #6]
10000a50:	4a31      	ldr	r2, [pc, #196]	@ (10000b18 <ExecuteScanOnce+0x1b0>)
10000a52:	5cd3      	ldrb	r3, [r2, r3]
10000a54:	4619      	mov	r1, r3
10000a56:	482a      	ldr	r0, [pc, #168]	@ (10000b00 <ExecuteScanOnce+0x198>)
10000a58:	f000 f9a6 	bl	10000da8 <qprint>
                        for (uint8_t i = 0; i < 16; i++) {
10000a5c:	79bb      	ldrb	r3, [r7, #6]
10000a5e:	3301      	adds	r3, #1
10000a60:	71bb      	strb	r3, [r7, #6]
10000a62:	79bb      	ldrb	r3, [r7, #6]
10000a64:	2b0f      	cmp	r3, #15
10000a66:	d9f2      	bls.n	10000a4e <ExecuteScanOnce+0xe6>
                        }
                        qprint("\r\n");
10000a68:	4826      	ldr	r0, [pc, #152]	@ (10000b04 <ExecuteScanOnce+0x19c>)
10000a6a:	f000 f99d 	bl	10000da8 <qprint>

                        // Print as ASCII (if printable)
                        qprint("ASCII: ");
10000a6e:	482c      	ldr	r0, [pc, #176]	@ (10000b20 <ExecuteScanOnce+0x1b8>)
10000a70:	f000 f99a 	bl	10000da8 <qprint>
                        for (uint8_t i = 0; i < 16; i++) {
10000a74:	2300      	movs	r3, #0
10000a76:	717b      	strb	r3, [r7, #5]
10000a78:	e017      	b.n	10000aaa <ExecuteScanOnce+0x142>
                            if (readBuffer[i] >= 0x20 && readBuffer[i] <= 0x7E) {
10000a7a:	797b      	ldrb	r3, [r7, #5]
10000a7c:	4a26      	ldr	r2, [pc, #152]	@ (10000b18 <ExecuteScanOnce+0x1b0>)
10000a7e:	5cd3      	ldrb	r3, [r2, r3]
10000a80:	2b1f      	cmp	r3, #31
10000a82:	d90c      	bls.n	10000a9e <ExecuteScanOnce+0x136>
10000a84:	797b      	ldrb	r3, [r7, #5]
10000a86:	4a24      	ldr	r2, [pc, #144]	@ (10000b18 <ExecuteScanOnce+0x1b0>)
10000a88:	5cd3      	ldrb	r3, [r2, r3]
10000a8a:	2b7e      	cmp	r3, #126	@ 0x7e
10000a8c:	d807      	bhi.n	10000a9e <ExecuteScanOnce+0x136>
                                qprint("%c", readBuffer[i]);
10000a8e:	797b      	ldrb	r3, [r7, #5]
10000a90:	4a21      	ldr	r2, [pc, #132]	@ (10000b18 <ExecuteScanOnce+0x1b0>)
10000a92:	5cd3      	ldrb	r3, [r2, r3]
10000a94:	4619      	mov	r1, r3
10000a96:	4823      	ldr	r0, [pc, #140]	@ (10000b24 <ExecuteScanOnce+0x1bc>)
10000a98:	f000 f986 	bl	10000da8 <qprint>
10000a9c:	e002      	b.n	10000aa4 <ExecuteScanOnce+0x13c>
                            } else {
                                qprint(".");
10000a9e:	4822      	ldr	r0, [pc, #136]	@ (10000b28 <ExecuteScanOnce+0x1c0>)
10000aa0:	f000 f982 	bl	10000da8 <qprint>
                        for (uint8_t i = 0; i < 16; i++) {
10000aa4:	797b      	ldrb	r3, [r7, #5]
10000aa6:	3301      	adds	r3, #1
10000aa8:	717b      	strb	r3, [r7, #5]
10000aaa:	797b      	ldrb	r3, [r7, #5]
10000aac:	2b0f      	cmp	r3, #15
10000aae:	d9e4      	bls.n	10000a7a <ExecuteScanOnce+0x112>
                            }
                        }
                        qprint("\r\n");
10000ab0:	4814      	ldr	r0, [pc, #80]	@ (10000b04 <ExecuteScanOnce+0x19c>)
10000ab2:	f000 f979 	bl	10000da8 <qprint>
10000ab6:	e008      	b.n	10000aca <ExecuteScanOnce+0x162>

                    } else {
                        qprint("Failed to read block %d\r\n", blockAddr);
10000ab8:	78bb      	ldrb	r3, [r7, #2]
10000aba:	4619      	mov	r1, r3
10000abc:	481b      	ldr	r0, [pc, #108]	@ (10000b2c <ExecuteScanOnce+0x1c4>)
10000abe:	f000 f973 	bl	10000da8 <qprint>
10000ac2:	e002      	b.n	10000aca <ExecuteScanOnce+0x162>
                    }

                } else {
                    qprint("Authentication failed!\r\n");
10000ac4:	481a      	ldr	r0, [pc, #104]	@ (10000b30 <ExecuteScanOnce+0x1c8>)
10000ac6:	f000 f96f 	bl	10000da8 <qprint>
                }
            }
        }

        // CRITICAL: Halt the card and stop crypto
        MFRC522_Halt();
10000aca:	f000 fd6e 	bl	100015aa <MFRC522_Halt>

        // Clear the MFCrypto1On bit to stop encryption
        MFRC522_ClearBitMask(MFRC522_REG_STATUS_2, 0x08);
10000ace:	2108      	movs	r1, #8
10000ad0:	2008      	movs	r0, #8
10000ad2:	f000 fa84 	bl	10000fde <MFRC522_ClearBitMask>

        qprint("=== End ===\r\n\r\n");
10000ad6:	4817      	ldr	r0, [pc, #92]	@ (10000b34 <ExecuteScanOnce+0x1cc>)
10000ad8:	f000 f966 	bl	10000da8 <qprint>

        // Wait a bit to prevent multiple rapid reads of the same card
        HAL_Delay(500);
10000adc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
10000ae0:	f001 f882 	bl	10001be8 <HAL_Delay>

    } else {
        // No card detected, small delay before next attempt
        HAL_Delay(50);
    }
}
10000ae4:	e002      	b.n	10000aec <ExecuteScanOnce+0x184>
        HAL_Delay(50);
10000ae6:	2032      	movs	r0, #50	@ 0x32
10000ae8:	f001 f87e 	bl	10001be8 <HAL_Delay>
}
10000aec:	bf00      	nop
10000aee:	3708      	adds	r7, #8
10000af0:	46bd      	mov	sp, r7
10000af2:	bd80      	pop	{r7, pc}
10000af4:	1000ad00 	.word	0x1000ad00
10000af8:	100202f8 	.word	0x100202f8
10000afc:	1000ad1c 	.word	0x1000ad1c
10000b00:	1000ad28 	.word	0x1000ad28
10000b04:	1000ad30 	.word	0x1000ad30
10000b08:	1000ad34 	.word	0x1000ad34
10000b0c:	1000ad44 	.word	0x1000ad44
10000b10:	10020004 	.word	0x10020004
10000b14:	1000ad54 	.word	0x1000ad54
10000b18:	10020304 	.word	0x10020304
10000b1c:	1000ad74 	.word	0x1000ad74
10000b20:	1000ad84 	.word	0x1000ad84
10000b24:	1000ad8c 	.word	0x1000ad8c
10000b28:	1000ad90 	.word	0x1000ad90
10000b2c:	1000ad94 	.word	0x1000ad94
10000b30:	1000adb0 	.word	0x1000adb0
10000b34:	1000adcc 	.word	0x1000adcc

10000b38 <ExecuteReadBlock>:

/**
 * @brief Read a specific block
 */
void ExecuteReadBlock(uint8_t blockAddr)
{
10000b38:	b580      	push	{r7, lr}
10000b3a:	b084      	sub	sp, #16
10000b3c:	af00      	add	r7, sp, #0
10000b3e:	4603      	mov	r3, r0
10000b40:	71fb      	strb	r3, [r7, #7]
    uint8_t tagType[2];
    MFRC522_Status_t status = MFRC522_Request(PICC_CMD_REQA, tagType);
10000b42:	f107 0308 	add.w	r3, r7, #8
10000b46:	4619      	mov	r1, r3
10000b48:	2026      	movs	r0, #38	@ 0x26
10000b4a:	f000 fb81 	bl	10001250 <MFRC522_Request>
10000b4e:	4603      	mov	r3, r0
10000b50:	737b      	strb	r3, [r7, #13]

    if (status != MFRC522_OK) {
10000b52:	7b7b      	ldrb	r3, [r7, #13]
10000b54:	2b00      	cmp	r3, #0
10000b56:	d003      	beq.n	10000b60 <ExecuteReadBlock+0x28>
        qprint("ERROR: No card present\r\n");
10000b58:	483e      	ldr	r0, [pc, #248]	@ (10000c54 <ExecuteReadBlock+0x11c>)
10000b5a:	f000 f925 	bl	10000da8 <qprint>
        return;
10000b5e:	e076      	b.n	10000c4e <ExecuteReadBlock+0x116>
    }

    status = MFRC522_Anticoll(&uid);
10000b60:	483d      	ldr	r0, [pc, #244]	@ (10000c58 <ExecuteReadBlock+0x120>)
10000b62:	f000 fb9a 	bl	1000129a <MFRC522_Anticoll>
10000b66:	4603      	mov	r3, r0
10000b68:	737b      	strb	r3, [r7, #13]
    if (status != MFRC522_OK) {
10000b6a:	7b7b      	ldrb	r3, [r7, #13]
10000b6c:	2b00      	cmp	r3, #0
10000b6e:	d003      	beq.n	10000b78 <ExecuteReadBlock+0x40>
        qprint("ERROR: Anticollision failed\r\n");
10000b70:	483a      	ldr	r0, [pc, #232]	@ (10000c5c <ExecuteReadBlock+0x124>)
10000b72:	f000 f919 	bl	10000da8 <qprint>
        return;
10000b76:	e06a      	b.n	10000c4e <ExecuteReadBlock+0x116>
    }

    status = MFRC522_SelectTag(&uid);
10000b78:	4837      	ldr	r0, [pc, #220]	@ (10000c58 <ExecuteReadBlock+0x120>)
10000b7a:	f000 fbda 	bl	10001332 <MFRC522_SelectTag>
10000b7e:	4603      	mov	r3, r0
10000b80:	737b      	strb	r3, [r7, #13]
    if (status != MFRC522_OK) {
10000b82:	7b7b      	ldrb	r3, [r7, #13]
10000b84:	2b00      	cmp	r3, #0
10000b86:	d003      	beq.n	10000b90 <ExecuteReadBlock+0x58>
        qprint("ERROR: Card select failed\r\n");
10000b88:	4835      	ldr	r0, [pc, #212]	@ (10000c60 <ExecuteReadBlock+0x128>)
10000b8a:	f000 f90d 	bl	10000da8 <qprint>
        return;
10000b8e:	e05e      	b.n	10000c4e <ExecuteReadBlock+0x116>
    }

    // Authenticate
    status = MFRC522_Auth(PICC_CMD_MF_AUTH_KEY_A, blockAddr, keyA, &uid);
10000b90:	79f9      	ldrb	r1, [r7, #7]
10000b92:	4b31      	ldr	r3, [pc, #196]	@ (10000c58 <ExecuteReadBlock+0x120>)
10000b94:	4a33      	ldr	r2, [pc, #204]	@ (10000c64 <ExecuteReadBlock+0x12c>)
10000b96:	2060      	movs	r0, #96	@ 0x60
10000b98:	f000 fc1b 	bl	100013d2 <MFRC522_Auth>
10000b9c:	4603      	mov	r3, r0
10000b9e:	737b      	strb	r3, [r7, #13]
    if (status != MFRC522_OK) {
10000ba0:	7b7b      	ldrb	r3, [r7, #13]
10000ba2:	2b00      	cmp	r3, #0
10000ba4:	d005      	beq.n	10000bb2 <ExecuteReadBlock+0x7a>
        qprint("ERROR: Authentication failed\r\n");
10000ba6:	4830      	ldr	r0, [pc, #192]	@ (10000c68 <ExecuteReadBlock+0x130>)
10000ba8:	f000 f8fe 	bl	10000da8 <qprint>
        MFRC522_Halt();
10000bac:	f000 fcfd 	bl	100015aa <MFRC522_Halt>
        return;
10000bb0:	e04d      	b.n	10000c4e <ExecuteReadBlock+0x116>
    }

    // Read block
    status = MFRC522_Read(blockAddr, readBuffer);
10000bb2:	79fb      	ldrb	r3, [r7, #7]
10000bb4:	492d      	ldr	r1, [pc, #180]	@ (10000c6c <ExecuteReadBlock+0x134>)
10000bb6:	4618      	mov	r0, r3
10000bb8:	f000 fc5e 	bl	10001478 <MFRC522_Read>
10000bbc:	4603      	mov	r3, r0
10000bbe:	737b      	strb	r3, [r7, #13]
    if (status == MFRC522_OK) {
10000bc0:	7b7b      	ldrb	r3, [r7, #13]
10000bc2:	2b00      	cmp	r3, #0
10000bc4:	d13e      	bne.n	10000c44 <ExecuteReadBlock+0x10c>
        qprint("Block %d HEX: ", blockAddr);
10000bc6:	79fb      	ldrb	r3, [r7, #7]
10000bc8:	4619      	mov	r1, r3
10000bca:	4829      	ldr	r0, [pc, #164]	@ (10000c70 <ExecuteReadBlock+0x138>)
10000bcc:	f000 f8ec 	bl	10000da8 <qprint>
        for (uint8_t i = 0; i < 16; i++) {
10000bd0:	2300      	movs	r3, #0
10000bd2:	73fb      	strb	r3, [r7, #15]
10000bd4:	e009      	b.n	10000bea <ExecuteReadBlock+0xb2>
            qprint("%02X ", readBuffer[i]);
10000bd6:	7bfb      	ldrb	r3, [r7, #15]
10000bd8:	4a24      	ldr	r2, [pc, #144]	@ (10000c6c <ExecuteReadBlock+0x134>)
10000bda:	5cd3      	ldrb	r3, [r2, r3]
10000bdc:	4619      	mov	r1, r3
10000bde:	4825      	ldr	r0, [pc, #148]	@ (10000c74 <ExecuteReadBlock+0x13c>)
10000be0:	f000 f8e2 	bl	10000da8 <qprint>
        for (uint8_t i = 0; i < 16; i++) {
10000be4:	7bfb      	ldrb	r3, [r7, #15]
10000be6:	3301      	adds	r3, #1
10000be8:	73fb      	strb	r3, [r7, #15]
10000bea:	7bfb      	ldrb	r3, [r7, #15]
10000bec:	2b0f      	cmp	r3, #15
10000bee:	d9f2      	bls.n	10000bd6 <ExecuteReadBlock+0x9e>
        }
        qprint("\r\n");
10000bf0:	4821      	ldr	r0, [pc, #132]	@ (10000c78 <ExecuteReadBlock+0x140>)
10000bf2:	f000 f8d9 	bl	10000da8 <qprint>

        qprint("Block %d ASCII: ", blockAddr);
10000bf6:	79fb      	ldrb	r3, [r7, #7]
10000bf8:	4619      	mov	r1, r3
10000bfa:	4820      	ldr	r0, [pc, #128]	@ (10000c7c <ExecuteReadBlock+0x144>)
10000bfc:	f000 f8d4 	bl	10000da8 <qprint>
        for (uint8_t i = 0; i < 16; i++) {
10000c00:	2300      	movs	r3, #0
10000c02:	73bb      	strb	r3, [r7, #14]
10000c04:	e017      	b.n	10000c36 <ExecuteReadBlock+0xfe>
            if (readBuffer[i] >= 0x20 && readBuffer[i] <= 0x7E) {
10000c06:	7bbb      	ldrb	r3, [r7, #14]
10000c08:	4a18      	ldr	r2, [pc, #96]	@ (10000c6c <ExecuteReadBlock+0x134>)
10000c0a:	5cd3      	ldrb	r3, [r2, r3]
10000c0c:	2b1f      	cmp	r3, #31
10000c0e:	d90c      	bls.n	10000c2a <ExecuteReadBlock+0xf2>
10000c10:	7bbb      	ldrb	r3, [r7, #14]
10000c12:	4a16      	ldr	r2, [pc, #88]	@ (10000c6c <ExecuteReadBlock+0x134>)
10000c14:	5cd3      	ldrb	r3, [r2, r3]
10000c16:	2b7e      	cmp	r3, #126	@ 0x7e
10000c18:	d807      	bhi.n	10000c2a <ExecuteReadBlock+0xf2>
                qprint("%c", readBuffer[i]);
10000c1a:	7bbb      	ldrb	r3, [r7, #14]
10000c1c:	4a13      	ldr	r2, [pc, #76]	@ (10000c6c <ExecuteReadBlock+0x134>)
10000c1e:	5cd3      	ldrb	r3, [r2, r3]
10000c20:	4619      	mov	r1, r3
10000c22:	4817      	ldr	r0, [pc, #92]	@ (10000c80 <ExecuteReadBlock+0x148>)
10000c24:	f000 f8c0 	bl	10000da8 <qprint>
10000c28:	e002      	b.n	10000c30 <ExecuteReadBlock+0xf8>
            } else {
                qprint(".");
10000c2a:	4816      	ldr	r0, [pc, #88]	@ (10000c84 <ExecuteReadBlock+0x14c>)
10000c2c:	f000 f8bc 	bl	10000da8 <qprint>
        for (uint8_t i = 0; i < 16; i++) {
10000c30:	7bbb      	ldrb	r3, [r7, #14]
10000c32:	3301      	adds	r3, #1
10000c34:	73bb      	strb	r3, [r7, #14]
10000c36:	7bbb      	ldrb	r3, [r7, #14]
10000c38:	2b0f      	cmp	r3, #15
10000c3a:	d9e4      	bls.n	10000c06 <ExecuteReadBlock+0xce>
            }
        }
        qprint("\r\n");
10000c3c:	480e      	ldr	r0, [pc, #56]	@ (10000c78 <ExecuteReadBlock+0x140>)
10000c3e:	f000 f8b3 	bl	10000da8 <qprint>
10000c42:	e002      	b.n	10000c4a <ExecuteReadBlock+0x112>
    } else {
        qprint("ERROR: Read failed\r\n");
10000c44:	4810      	ldr	r0, [pc, #64]	@ (10000c88 <ExecuteReadBlock+0x150>)
10000c46:	f000 f8af 	bl	10000da8 <qprint>
    }

    MFRC522_Halt();
10000c4a:	f000 fcae 	bl	100015aa <MFRC522_Halt>
}
10000c4e:	3710      	adds	r7, #16
10000c50:	46bd      	mov	sp, r7
10000c52:	bd80      	pop	{r7, pc}
10000c54:	1000addc 	.word	0x1000addc
10000c58:	100202f8 	.word	0x100202f8
10000c5c:	1000adf8 	.word	0x1000adf8
10000c60:	1000ae18 	.word	0x1000ae18
10000c64:	10020004 	.word	0x10020004
10000c68:	1000ae34 	.word	0x1000ae34
10000c6c:	10020304 	.word	0x10020304
10000c70:	1000ae54 	.word	0x1000ae54
10000c74:	1000ad28 	.word	0x1000ad28
10000c78:	1000ad30 	.word	0x1000ad30
10000c7c:	1000ae64 	.word	0x1000ae64
10000c80:	1000ad8c 	.word	0x1000ad8c
10000c84:	1000ad90 	.word	0x1000ad90
10000c88:	1000ae78 	.word	0x1000ae78

10000c8c <ExecuteWriteBlock>:

/**
 * @brief Write data to a specific block
 */
void ExecuteWriteBlock(uint8_t blockAddr, uint8_t* data)
{
10000c8c:	b580      	push	{r7, lr}
10000c8e:	b084      	sub	sp, #16
10000c90:	af00      	add	r7, sp, #0
10000c92:	4603      	mov	r3, r0
10000c94:	6039      	str	r1, [r7, #0]
10000c96:	71fb      	strb	r3, [r7, #7]
    uint8_t tagType[2];
    MFRC522_Status_t status = MFRC522_Request(PICC_CMD_REQA, tagType);
10000c98:	f107 030c 	add.w	r3, r7, #12
10000c9c:	4619      	mov	r1, r3
10000c9e:	2026      	movs	r0, #38	@ 0x26
10000ca0:	f000 fad6 	bl	10001250 <MFRC522_Request>
10000ca4:	4603      	mov	r3, r0
10000ca6:	73bb      	strb	r3, [r7, #14]

    if (status != MFRC522_OK) {
10000ca8:	7bbb      	ldrb	r3, [r7, #14]
10000caa:	2b00      	cmp	r3, #0
10000cac:	d003      	beq.n	10000cb6 <ExecuteWriteBlock+0x2a>
        qprint("ERROR: No card present\r\n");
10000cae:	4832      	ldr	r0, [pc, #200]	@ (10000d78 <ExecuteWriteBlock+0xec>)
10000cb0:	f000 f87a 	bl	10000da8 <qprint>
        return;
10000cb4:	e05d      	b.n	10000d72 <ExecuteWriteBlock+0xe6>
    }

    status = MFRC522_Anticoll(&uid);
10000cb6:	4831      	ldr	r0, [pc, #196]	@ (10000d7c <ExecuteWriteBlock+0xf0>)
10000cb8:	f000 faef 	bl	1000129a <MFRC522_Anticoll>
10000cbc:	4603      	mov	r3, r0
10000cbe:	73bb      	strb	r3, [r7, #14]
    if (status != MFRC522_OK) {
10000cc0:	7bbb      	ldrb	r3, [r7, #14]
10000cc2:	2b00      	cmp	r3, #0
10000cc4:	d003      	beq.n	10000cce <ExecuteWriteBlock+0x42>
        qprint("ERROR: Anticollision failed\r\n");
10000cc6:	482e      	ldr	r0, [pc, #184]	@ (10000d80 <ExecuteWriteBlock+0xf4>)
10000cc8:	f000 f86e 	bl	10000da8 <qprint>
        return;
10000ccc:	e051      	b.n	10000d72 <ExecuteWriteBlock+0xe6>
    }

    status = MFRC522_SelectTag(&uid);
10000cce:	482b      	ldr	r0, [pc, #172]	@ (10000d7c <ExecuteWriteBlock+0xf0>)
10000cd0:	f000 fb2f 	bl	10001332 <MFRC522_SelectTag>
10000cd4:	4603      	mov	r3, r0
10000cd6:	73bb      	strb	r3, [r7, #14]
    if (status != MFRC522_OK) {
10000cd8:	7bbb      	ldrb	r3, [r7, #14]
10000cda:	2b00      	cmp	r3, #0
10000cdc:	d003      	beq.n	10000ce6 <ExecuteWriteBlock+0x5a>
        qprint("ERROR: Card select failed\r\n");
10000cde:	4829      	ldr	r0, [pc, #164]	@ (10000d84 <ExecuteWriteBlock+0xf8>)
10000ce0:	f000 f862 	bl	10000da8 <qprint>
        return;
10000ce4:	e045      	b.n	10000d72 <ExecuteWriteBlock+0xe6>
    }

    // Authenticate
    status = MFRC522_Auth(PICC_CMD_MF_AUTH_KEY_A, blockAddr, keyA, &uid);
10000ce6:	79f9      	ldrb	r1, [r7, #7]
10000ce8:	4b24      	ldr	r3, [pc, #144]	@ (10000d7c <ExecuteWriteBlock+0xf0>)
10000cea:	4a27      	ldr	r2, [pc, #156]	@ (10000d88 <ExecuteWriteBlock+0xfc>)
10000cec:	2060      	movs	r0, #96	@ 0x60
10000cee:	f000 fb70 	bl	100013d2 <MFRC522_Auth>
10000cf2:	4603      	mov	r3, r0
10000cf4:	73bb      	strb	r3, [r7, #14]
    if (status != MFRC522_OK) {
10000cf6:	7bbb      	ldrb	r3, [r7, #14]
10000cf8:	2b00      	cmp	r3, #0
10000cfa:	d005      	beq.n	10000d08 <ExecuteWriteBlock+0x7c>
        qprint("ERROR: Authentication failed\r\n");
10000cfc:	4823      	ldr	r0, [pc, #140]	@ (10000d8c <ExecuteWriteBlock+0x100>)
10000cfe:	f000 f853 	bl	10000da8 <qprint>
        MFRC522_Halt();
10000d02:	f000 fc52 	bl	100015aa <MFRC522_Halt>
        return;
10000d06:	e034      	b.n	10000d72 <ExecuteWriteBlock+0xe6>
    }

    // Write block
    status = MFRC522_Write(blockAddr, data);
10000d08:	79fb      	ldrb	r3, [r7, #7]
10000d0a:	6839      	ldr	r1, [r7, #0]
10000d0c:	4618      	mov	r0, r3
10000d0e:	f000 fbdf 	bl	100014d0 <MFRC522_Write>
10000d12:	4603      	mov	r3, r0
10000d14:	73bb      	strb	r3, [r7, #14]
    if (status == MFRC522_OK) {
10000d16:	7bbb      	ldrb	r3, [r7, #14]
10000d18:	2b00      	cmp	r3, #0
10000d1a:	d125      	bne.n	10000d68 <ExecuteWriteBlock+0xdc>
        qprint("SUCCESS: Block %d written\r\n", blockAddr);
10000d1c:	79fb      	ldrb	r3, [r7, #7]
10000d1e:	4619      	mov	r1, r3
10000d20:	481b      	ldr	r0, [pc, #108]	@ (10000d90 <ExecuteWriteBlock+0x104>)
10000d22:	f000 f841 	bl	10000da8 <qprint>

        // Verify by reading back
        status = MFRC522_Read(blockAddr, readBuffer);
10000d26:	79fb      	ldrb	r3, [r7, #7]
10000d28:	491a      	ldr	r1, [pc, #104]	@ (10000d94 <ExecuteWriteBlock+0x108>)
10000d2a:	4618      	mov	r0, r3
10000d2c:	f000 fba4 	bl	10001478 <MFRC522_Read>
10000d30:	4603      	mov	r3, r0
10000d32:	73bb      	strb	r3, [r7, #14]
        if (status == MFRC522_OK) {
10000d34:	7bbb      	ldrb	r3, [r7, #14]
10000d36:	2b00      	cmp	r3, #0
10000d38:	d119      	bne.n	10000d6e <ExecuteWriteBlock+0xe2>
            qprint("Verify: ");
10000d3a:	4817      	ldr	r0, [pc, #92]	@ (10000d98 <ExecuteWriteBlock+0x10c>)
10000d3c:	f000 f834 	bl	10000da8 <qprint>
            for (uint8_t i = 0; i < 16; i++) {
10000d40:	2300      	movs	r3, #0
10000d42:	73fb      	strb	r3, [r7, #15]
10000d44:	e009      	b.n	10000d5a <ExecuteWriteBlock+0xce>
                qprint("%02X ", readBuffer[i]);
10000d46:	7bfb      	ldrb	r3, [r7, #15]
10000d48:	4a12      	ldr	r2, [pc, #72]	@ (10000d94 <ExecuteWriteBlock+0x108>)
10000d4a:	5cd3      	ldrb	r3, [r2, r3]
10000d4c:	4619      	mov	r1, r3
10000d4e:	4813      	ldr	r0, [pc, #76]	@ (10000d9c <ExecuteWriteBlock+0x110>)
10000d50:	f000 f82a 	bl	10000da8 <qprint>
            for (uint8_t i = 0; i < 16; i++) {
10000d54:	7bfb      	ldrb	r3, [r7, #15]
10000d56:	3301      	adds	r3, #1
10000d58:	73fb      	strb	r3, [r7, #15]
10000d5a:	7bfb      	ldrb	r3, [r7, #15]
10000d5c:	2b0f      	cmp	r3, #15
10000d5e:	d9f2      	bls.n	10000d46 <ExecuteWriteBlock+0xba>
            }
            qprint("\r\n");
10000d60:	480f      	ldr	r0, [pc, #60]	@ (10000da0 <ExecuteWriteBlock+0x114>)
10000d62:	f000 f821 	bl	10000da8 <qprint>
10000d66:	e002      	b.n	10000d6e <ExecuteWriteBlock+0xe2>
        }
    } else {
        qprint("ERROR: Write failed\r\n");
10000d68:	480e      	ldr	r0, [pc, #56]	@ (10000da4 <ExecuteWriteBlock+0x118>)
10000d6a:	f000 f81d 	bl	10000da8 <qprint>
    }

    MFRC522_Halt();
10000d6e:	f000 fc1c 	bl	100015aa <MFRC522_Halt>
}
10000d72:	3710      	adds	r7, #16
10000d74:	46bd      	mov	sp, r7
10000d76:	bd80      	pop	{r7, pc}
10000d78:	1000addc 	.word	0x1000addc
10000d7c:	100202f8 	.word	0x100202f8
10000d80:	1000adf8 	.word	0x1000adf8
10000d84:	1000ae18 	.word	0x1000ae18
10000d88:	10020004 	.word	0x10020004
10000d8c:	1000ae34 	.word	0x1000ae34
10000d90:	1000ae90 	.word	0x1000ae90
10000d94:	10020304 	.word	0x10020304
10000d98:	1000aeac 	.word	0x1000aeac
10000d9c:	1000ad28 	.word	0x1000ad28
10000da0:	1000ad30 	.word	0x1000ad30
10000da4:	1000aeb8 	.word	0x1000aeb8

10000da8 <qprint>:

/**
 * @brief Print to A7 via Virtual UART
 */
void qprint(const char* format, ...) {
10000da8:	b40f      	push	{r0, r1, r2, r3}
10000daa:	b580      	push	{r7, lr}
10000dac:	b0c2      	sub	sp, #264	@ 0x108
10000dae:	af00      	add	r7, sp, #0
    OPENAMP_check_for_message();
10000db0:	f008 fb68 	bl	10009484 <OPENAMP_check_for_message>
    char buffer[256];
    va_list args;
    va_start(args, format);
10000db4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
10000db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
10000dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
10000dc0:	601a      	str	r2, [r3, #0]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
10000dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
10000dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
10000dca:	1d38      	adds	r0, r7, #4
10000dcc:	681b      	ldr	r3, [r3, #0]
10000dce:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
10000dd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
10000dd6:	f008 fe1f 	bl	10009a18 <vsniprintf>
10000dda:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);

    if (len > 0) {
10000dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
10000de2:	2b00      	cmp	r3, #0
10000de4:	dd07      	ble.n	10000df6 <qprint+0x4e>
        VIRT_UART_Transmit(&huart0, (uint8_t*)buffer, len);
10000de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
10000dea:	b29a      	uxth	r2, r3
10000dec:	1d3b      	adds	r3, r7, #4
10000dee:	4619      	mov	r1, r3
10000df0:	4805      	ldr	r0, [pc, #20]	@ (10000e08 <qprint+0x60>)
10000df2:	f007 fe27 	bl	10008a44 <VIRT_UART_Transmit>
    }
}
10000df6:	bf00      	nop
10000df8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
10000dfc:	46bd      	mov	sp, r7
10000dfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
10000e02:	b004      	add	sp, #16
10000e04:	4770      	bx	lr
10000e06:	bf00      	nop
10000e08:	10020294 	.word	0x10020294

10000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10000e0c:	b480      	push	{r7}
10000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000e10:	b672      	cpsid	i
}
10000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10000e14:	bf00      	nop
10000e16:	e7fd      	b.n	10000e14 <Error_Handler+0x8>

10000e18 <MFRC522_Init>:
#define MFRC522_CS_HIGH()  HAL_GPIO_WritePin(mfrc522_config.CS_GPIO_Port, mfrc522_config.CS_Pin, GPIO_PIN_SET)
#define MFRC522_RST_LOW()  HAL_GPIO_WritePin(mfrc522_config.RST_GPIO_Port, mfrc522_config.RST_Pin, GPIO_PIN_RESET)
#define MFRC522_RST_HIGH() HAL_GPIO_WritePin(mfrc522_config.RST_GPIO_Port, mfrc522_config.RST_Pin, GPIO_PIN_SET)

/* Initialize MFRC522 */
void MFRC522_Init(MFRC522_Config_t *config) {
10000e18:	b580      	push	{r7, lr}
10000e1a:	b082      	sub	sp, #8
10000e1c:	af00      	add	r7, sp, #0
10000e1e:	6078      	str	r0, [r7, #4]
    memcpy(&mfrc522_config, config, sizeof(MFRC522_Config_t));
10000e20:	2214      	movs	r2, #20
10000e22:	6879      	ldr	r1, [r7, #4]
10000e24:	481a      	ldr	r0, [pc, #104]	@ (10000e90 <MFRC522_Init+0x78>)
10000e26:	f008 fec2 	bl	10009bae <memcpy>

    MFRC522_CS_HIGH();
10000e2a:	4b19      	ldr	r3, [pc, #100]	@ (10000e90 <MFRC522_Init+0x78>)
10000e2c:	685b      	ldr	r3, [r3, #4]
10000e2e:	4a18      	ldr	r2, [pc, #96]	@ (10000e90 <MFRC522_Init+0x78>)
10000e30:	8911      	ldrh	r1, [r2, #8]
10000e32:	2201      	movs	r2, #1
10000e34:	4618      	mov	r0, r3
10000e36:	f001 f9b7 	bl	100021a8 <HAL_GPIO_WritePin>
    MFRC522_RST_HIGH();
10000e3a:	4b15      	ldr	r3, [pc, #84]	@ (10000e90 <MFRC522_Init+0x78>)
10000e3c:	68db      	ldr	r3, [r3, #12]
10000e3e:	4a14      	ldr	r2, [pc, #80]	@ (10000e90 <MFRC522_Init+0x78>)
10000e40:	8a11      	ldrh	r1, [r2, #16]
10000e42:	2201      	movs	r2, #1
10000e44:	4618      	mov	r0, r3
10000e46:	f001 f9af 	bl	100021a8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
10000e4a:	200a      	movs	r0, #10
10000e4c:	f000 fecc 	bl	10001be8 <HAL_Delay>

    MFRC522_Reset();
10000e50:	f000 f820 	bl	10000e94 <MFRC522_Reset>

    // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
    MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
10000e54:	218d      	movs	r1, #141	@ 0x8d
10000e56:	202a      	movs	r0, #42	@ 0x2a
10000e58:	f000 f83c 	bl	10000ed4 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
10000e5c:	213e      	movs	r1, #62	@ 0x3e
10000e5e:	202b      	movs	r0, #43	@ 0x2b
10000e60:	f000 f838 	bl	10000ed4 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
10000e64:	211e      	movs	r1, #30
10000e66:	202d      	movs	r0, #45	@ 0x2d
10000e68:	f000 f834 	bl	10000ed4 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
10000e6c:	2100      	movs	r1, #0
10000e6e:	202c      	movs	r0, #44	@ 0x2c
10000e70:	f000 f830 	bl	10000ed4 <MFRC522_WriteRegister>

    MFRC522_WriteRegister(MFRC522_REG_TX_ASK, 0x40);
10000e74:	2140      	movs	r1, #64	@ 0x40
10000e76:	2015      	movs	r0, #21
10000e78:	f000 f82c 	bl	10000ed4 <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
10000e7c:	213d      	movs	r1, #61	@ 0x3d
10000e7e:	2011      	movs	r0, #17
10000e80:	f000 f828 	bl	10000ed4 <MFRC522_WriteRegister>

    MFRC522_AntennaOn();
10000e84:	f000 f811 	bl	10000eaa <MFRC522_AntennaOn>
}
10000e88:	bf00      	nop
10000e8a:	3708      	adds	r7, #8
10000e8c:	46bd      	mov	sp, r7
10000e8e:	bd80      	pop	{r7, pc}
10000e90:	1002042c 	.word	0x1002042c

10000e94 <MFRC522_Reset>:

/* Reset the MFRC522 */
void MFRC522_Reset(void) {
10000e94:	b580      	push	{r7, lr}
10000e96:	af00      	add	r7, sp, #0
    MFRC522_WriteRegister(MFRC522_REG_COMMAND, MFRC522_CMD_SOFT_RESET);
10000e98:	210f      	movs	r1, #15
10000e9a:	2001      	movs	r0, #1
10000e9c:	f000 f81a 	bl	10000ed4 <MFRC522_WriteRegister>
    HAL_Delay(50);
10000ea0:	2032      	movs	r0, #50	@ 0x32
10000ea2:	f000 fea1 	bl	10001be8 <HAL_Delay>
}
10000ea6:	bf00      	nop
10000ea8:	bd80      	pop	{r7, pc}

10000eaa <MFRC522_AntennaOn>:
    *version = MFRC522_ReadRegister(MFRC522_REG_VERSION);
    return (*version == 0x91 || *version == 0x92);
}

/* Turn on antenna */
void MFRC522_AntennaOn(void) {
10000eaa:	b580      	push	{r7, lr}
10000eac:	b082      	sub	sp, #8
10000eae:	af00      	add	r7, sp, #0
    uint8_t temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
10000eb0:	2014      	movs	r0, #20
10000eb2:	f000 f83f 	bl	10000f34 <MFRC522_ReadRegister>
10000eb6:	4603      	mov	r3, r0
10000eb8:	71fb      	strb	r3, [r7, #7]
    if (!(temp & 0x03)) {
10000eba:	79fb      	ldrb	r3, [r7, #7]
10000ebc:	f003 0303 	and.w	r3, r3, #3
10000ec0:	2b00      	cmp	r3, #0
10000ec2:	d103      	bne.n	10000ecc <MFRC522_AntennaOn+0x22>
        MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
10000ec4:	2103      	movs	r1, #3
10000ec6:	2014      	movs	r0, #20
10000ec8:	f000 f86e 	bl	10000fa8 <MFRC522_SetBitMask>
    }
}
10000ecc:	bf00      	nop
10000ece:	3708      	adds	r7, #8
10000ed0:	46bd      	mov	sp, r7
10000ed2:	bd80      	pop	{r7, pc}

10000ed4 <MFRC522_WriteRegister>:
void MFRC522_AntennaOff(void) {
    MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

/* Write to MFRC522 register */
void MFRC522_WriteRegister(uint8_t reg, uint8_t value) {
10000ed4:	b580      	push	{r7, lr}
10000ed6:	b084      	sub	sp, #16
10000ed8:	af00      	add	r7, sp, #0
10000eda:	4603      	mov	r3, r0
10000edc:	460a      	mov	r2, r1
10000ede:	71fb      	strb	r3, [r7, #7]
10000ee0:	4613      	mov	r3, r2
10000ee2:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2];
    txData[0] = (reg << 1) & 0x7E;
10000ee4:	79fb      	ldrb	r3, [r7, #7]
10000ee6:	005b      	lsls	r3, r3, #1
10000ee8:	b2db      	uxtb	r3, r3
10000eea:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
10000eee:	b2db      	uxtb	r3, r3
10000ef0:	733b      	strb	r3, [r7, #12]
    txData[1] = value;
10000ef2:	79bb      	ldrb	r3, [r7, #6]
10000ef4:	737b      	strb	r3, [r7, #13]

    MFRC522_CS_LOW();
10000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (10000f30 <MFRC522_WriteRegister+0x5c>)
10000ef8:	685b      	ldr	r3, [r3, #4]
10000efa:	4a0d      	ldr	r2, [pc, #52]	@ (10000f30 <MFRC522_WriteRegister+0x5c>)
10000efc:	8911      	ldrh	r1, [r2, #8]
10000efe:	2200      	movs	r2, #0
10000f00:	4618      	mov	r0, r3
10000f02:	f001 f951 	bl	100021a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(mfrc522_config.hspi, txData, 2, 100);
10000f06:	4b0a      	ldr	r3, [pc, #40]	@ (10000f30 <MFRC522_WriteRegister+0x5c>)
10000f08:	6818      	ldr	r0, [r3, #0]
10000f0a:	f107 010c 	add.w	r1, r7, #12
10000f0e:	2364      	movs	r3, #100	@ 0x64
10000f10:	2202      	movs	r2, #2
10000f12:	f005 f95d 	bl	100061d0 <HAL_SPI_Transmit>
    MFRC522_CS_HIGH();
10000f16:	4b06      	ldr	r3, [pc, #24]	@ (10000f30 <MFRC522_WriteRegister+0x5c>)
10000f18:	685b      	ldr	r3, [r3, #4]
10000f1a:	4a05      	ldr	r2, [pc, #20]	@ (10000f30 <MFRC522_WriteRegister+0x5c>)
10000f1c:	8911      	ldrh	r1, [r2, #8]
10000f1e:	2201      	movs	r2, #1
10000f20:	4618      	mov	r0, r3
10000f22:	f001 f941 	bl	100021a8 <HAL_GPIO_WritePin>
}
10000f26:	bf00      	nop
10000f28:	3710      	adds	r7, #16
10000f2a:	46bd      	mov	sp, r7
10000f2c:	bd80      	pop	{r7, pc}
10000f2e:	bf00      	nop
10000f30:	1002042c 	.word	0x1002042c

10000f34 <MFRC522_ReadRegister>:

/* Read from MFRC522 register */
uint8_t MFRC522_ReadRegister(uint8_t reg) {
10000f34:	b580      	push	{r7, lr}
10000f36:	b084      	sub	sp, #16
10000f38:	af00      	add	r7, sp, #0
10000f3a:	4603      	mov	r3, r0
10000f3c:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = ((reg << 1) & 0x7E) | 0x80;
10000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
10000f42:	005b      	lsls	r3, r3, #1
10000f44:	b25b      	sxtb	r3, r3
10000f46:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
10000f4a:	b25b      	sxtb	r3, r3
10000f4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
10000f50:	b25b      	sxtb	r3, r3
10000f52:	b2db      	uxtb	r3, r3
10000f54:	73fb      	strb	r3, [r7, #15]
    uint8_t rxData = 0;
10000f56:	2300      	movs	r3, #0
10000f58:	73bb      	strb	r3, [r7, #14]

    MFRC522_CS_LOW();
10000f5a:	4b12      	ldr	r3, [pc, #72]	@ (10000fa4 <MFRC522_ReadRegister+0x70>)
10000f5c:	685b      	ldr	r3, [r3, #4]
10000f5e:	4a11      	ldr	r2, [pc, #68]	@ (10000fa4 <MFRC522_ReadRegister+0x70>)
10000f60:	8911      	ldrh	r1, [r2, #8]
10000f62:	2200      	movs	r2, #0
10000f64:	4618      	mov	r0, r3
10000f66:	f001 f91f 	bl	100021a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(mfrc522_config.hspi, &txData, 1, 100);
10000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (10000fa4 <MFRC522_ReadRegister+0x70>)
10000f6c:	6818      	ldr	r0, [r3, #0]
10000f6e:	f107 010f 	add.w	r1, r7, #15
10000f72:	2364      	movs	r3, #100	@ 0x64
10000f74:	2201      	movs	r2, #1
10000f76:	f005 f92b 	bl	100061d0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(mfrc522_config.hspi, &rxData, 1, 100);
10000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (10000fa4 <MFRC522_ReadRegister+0x70>)
10000f7c:	6818      	ldr	r0, [r3, #0]
10000f7e:	f107 010e 	add.w	r1, r7, #14
10000f82:	2364      	movs	r3, #100	@ 0x64
10000f84:	2201      	movs	r2, #1
10000f86:	f005 fb1c 	bl	100065c2 <HAL_SPI_Receive>
    MFRC522_CS_HIGH();
10000f8a:	4b06      	ldr	r3, [pc, #24]	@ (10000fa4 <MFRC522_ReadRegister+0x70>)
10000f8c:	685b      	ldr	r3, [r3, #4]
10000f8e:	4a05      	ldr	r2, [pc, #20]	@ (10000fa4 <MFRC522_ReadRegister+0x70>)
10000f90:	8911      	ldrh	r1, [r2, #8]
10000f92:	2201      	movs	r2, #1
10000f94:	4618      	mov	r0, r3
10000f96:	f001 f907 	bl	100021a8 <HAL_GPIO_WritePin>

    return rxData;
10000f9a:	7bbb      	ldrb	r3, [r7, #14]
}
10000f9c:	4618      	mov	r0, r3
10000f9e:	3710      	adds	r7, #16
10000fa0:	46bd      	mov	sp, r7
10000fa2:	bd80      	pop	{r7, pc}
10000fa4:	1002042c 	.word	0x1002042c

10000fa8 <MFRC522_SetBitMask>:

/* Set bit mask in register */
void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
10000fa8:	b580      	push	{r7, lr}
10000faa:	b084      	sub	sp, #16
10000fac:	af00      	add	r7, sp, #0
10000fae:	4603      	mov	r3, r0
10000fb0:	460a      	mov	r2, r1
10000fb2:	71fb      	strb	r3, [r7, #7]
10000fb4:	4613      	mov	r3, r2
10000fb6:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadRegister(reg);
10000fb8:	79fb      	ldrb	r3, [r7, #7]
10000fba:	4618      	mov	r0, r3
10000fbc:	f7ff ffba 	bl	10000f34 <MFRC522_ReadRegister>
10000fc0:	4603      	mov	r3, r0
10000fc2:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteRegister(reg, tmp | mask);
10000fc4:	7bfa      	ldrb	r2, [r7, #15]
10000fc6:	79bb      	ldrb	r3, [r7, #6]
10000fc8:	4313      	orrs	r3, r2
10000fca:	b2da      	uxtb	r2, r3
10000fcc:	79fb      	ldrb	r3, [r7, #7]
10000fce:	4611      	mov	r1, r2
10000fd0:	4618      	mov	r0, r3
10000fd2:	f7ff ff7f 	bl	10000ed4 <MFRC522_WriteRegister>
}
10000fd6:	bf00      	nop
10000fd8:	3710      	adds	r7, #16
10000fda:	46bd      	mov	sp, r7
10000fdc:	bd80      	pop	{r7, pc}

10000fde <MFRC522_ClearBitMask>:

/* Clear bit mask in register */
void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask) {
10000fde:	b580      	push	{r7, lr}
10000fe0:	b084      	sub	sp, #16
10000fe2:	af00      	add	r7, sp, #0
10000fe4:	4603      	mov	r3, r0
10000fe6:	460a      	mov	r2, r1
10000fe8:	71fb      	strb	r3, [r7, #7]
10000fea:	4613      	mov	r3, r2
10000fec:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadRegister(reg);
10000fee:	79fb      	ldrb	r3, [r7, #7]
10000ff0:	4618      	mov	r0, r3
10000ff2:	f7ff ff9f 	bl	10000f34 <MFRC522_ReadRegister>
10000ff6:	4603      	mov	r3, r0
10000ff8:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteRegister(reg, tmp & (~mask));
10000ffa:	f997 3006 	ldrsb.w	r3, [r7, #6]
10000ffe:	43db      	mvns	r3, r3
10001000:	b25a      	sxtb	r2, r3
10001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
10001006:	4013      	ands	r3, r2
10001008:	b25b      	sxtb	r3, r3
1000100a:	b2da      	uxtb	r2, r3
1000100c:	79fb      	ldrb	r3, [r7, #7]
1000100e:	4611      	mov	r1, r2
10001010:	4618      	mov	r0, r3
10001012:	f7ff ff5f 	bl	10000ed4 <MFRC522_WriteRegister>
}
10001016:	bf00      	nop
10001018:	3710      	adds	r7, #16
1000101a:	46bd      	mov	sp, r7
1000101c:	bd80      	pop	{r7, pc}

1000101e <MFRC522_CalculateCRC>:

/* Calculate CRC */
void MFRC522_CalculateCRC(uint8_t *data, uint8_t len, uint8_t *result) {
1000101e:	b590      	push	{r4, r7, lr}
10001020:	b087      	sub	sp, #28
10001022:	af00      	add	r7, sp, #0
10001024:	60f8      	str	r0, [r7, #12]
10001026:	460b      	mov	r3, r1
10001028:	607a      	str	r2, [r7, #4]
1000102a:	72fb      	strb	r3, [r7, #11]
    MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);
1000102c:	2104      	movs	r1, #4
1000102e:	2005      	movs	r0, #5
10001030:	f7ff ffd5 	bl	10000fde <MFRC522_ClearBitMask>
    MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
10001034:	2180      	movs	r1, #128	@ 0x80
10001036:	200a      	movs	r0, #10
10001038:	f7ff ffb6 	bl	10000fa8 <MFRC522_SetBitMask>

    for (uint8_t i = 0; i < len; i++) {
1000103c:	2300      	movs	r3, #0
1000103e:	75fb      	strb	r3, [r7, #23]
10001040:	e00a      	b.n	10001058 <MFRC522_CalculateCRC+0x3a>
        MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, data[i]);
10001042:	7dfb      	ldrb	r3, [r7, #23]
10001044:	68fa      	ldr	r2, [r7, #12]
10001046:	4413      	add	r3, r2
10001048:	781b      	ldrb	r3, [r3, #0]
1000104a:	4619      	mov	r1, r3
1000104c:	2009      	movs	r0, #9
1000104e:	f7ff ff41 	bl	10000ed4 <MFRC522_WriteRegister>
    for (uint8_t i = 0; i < len; i++) {
10001052:	7dfb      	ldrb	r3, [r7, #23]
10001054:	3301      	adds	r3, #1
10001056:	75fb      	strb	r3, [r7, #23]
10001058:	7dfa      	ldrb	r2, [r7, #23]
1000105a:	7afb      	ldrb	r3, [r7, #11]
1000105c:	429a      	cmp	r2, r3
1000105e:	d3f0      	bcc.n	10001042 <MFRC522_CalculateCRC+0x24>
    }

    MFRC522_WriteRegister(MFRC522_REG_COMMAND, MFRC522_CMD_CALC_CRC);
10001060:	2103      	movs	r1, #3
10001062:	2001      	movs	r0, #1
10001064:	f7ff ff36 	bl	10000ed4 <MFRC522_WriteRegister>

    uint16_t timeout = 5000;
10001068:	f241 3388 	movw	r3, #5000	@ 0x1388
1000106c:	82bb      	strh	r3, [r7, #20]
    uint8_t n;
    do {
        n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
1000106e:	2005      	movs	r0, #5
10001070:	f7ff ff60 	bl	10000f34 <MFRC522_ReadRegister>
10001074:	4603      	mov	r3, r0
10001076:	74fb      	strb	r3, [r7, #19]
        timeout--;
10001078:	8abb      	ldrh	r3, [r7, #20]
1000107a:	3b01      	subs	r3, #1
1000107c:	82bb      	strh	r3, [r7, #20]
    } while ((timeout != 0) && !(n & 0x04));
1000107e:	8abb      	ldrh	r3, [r7, #20]
10001080:	2b00      	cmp	r3, #0
10001082:	d004      	beq.n	1000108e <MFRC522_CalculateCRC+0x70>
10001084:	7cfb      	ldrb	r3, [r7, #19]
10001086:	f003 0304 	and.w	r3, r3, #4
1000108a:	2b00      	cmp	r3, #0
1000108c:	d0ef      	beq.n	1000106e <MFRC522_CalculateCRC+0x50>

    result[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
1000108e:	2022      	movs	r0, #34	@ 0x22
10001090:	f7ff ff50 	bl	10000f34 <MFRC522_ReadRegister>
10001094:	4603      	mov	r3, r0
10001096:	461a      	mov	r2, r3
10001098:	687b      	ldr	r3, [r7, #4]
1000109a:	701a      	strb	r2, [r3, #0]
    result[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_H);
1000109c:	687b      	ldr	r3, [r7, #4]
1000109e:	1c5c      	adds	r4, r3, #1
100010a0:	2021      	movs	r0, #33	@ 0x21
100010a2:	f7ff ff47 	bl	10000f34 <MFRC522_ReadRegister>
100010a6:	4603      	mov	r3, r0
100010a8:	7023      	strb	r3, [r4, #0]
}
100010aa:	bf00      	nop
100010ac:	371c      	adds	r7, #28
100010ae:	46bd      	mov	sp, r7
100010b0:	bd90      	pop	{r4, r7, pc}

100010b2 <MFRC522_ToCard>:

/* Communicate with PICC */
MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
                                 uint8_t *backData, uint16_t *backLen) {
100010b2:	b590      	push	{r4, r7, lr}
100010b4:	b087      	sub	sp, #28
100010b6:	af00      	add	r7, sp, #0
100010b8:	60b9      	str	r1, [r7, #8]
100010ba:	607b      	str	r3, [r7, #4]
100010bc:	4603      	mov	r3, r0
100010be:	73fb      	strb	r3, [r7, #15]
100010c0:	4613      	mov	r3, r2
100010c2:	73bb      	strb	r3, [r7, #14]
    MFRC522_Status_t status = MFRC522_ERR;
100010c4:	2302      	movs	r3, #2
100010c6:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x00;
100010c8:	2300      	movs	r3, #0
100010ca:	75bb      	strb	r3, [r7, #22]
    uint8_t waitIRq = 0x00;
100010cc:	2300      	movs	r3, #0
100010ce:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (command) {
100010d0:	7bfb      	ldrb	r3, [r7, #15]
100010d2:	2b0c      	cmp	r3, #12
100010d4:	d006      	beq.n	100010e4 <MFRC522_ToCard+0x32>
100010d6:	2b0e      	cmp	r3, #14
100010d8:	d109      	bne.n	100010ee <MFRC522_ToCard+0x3c>
        case MFRC522_CMD_MF_AUTHENT:
            irqEn = 0x12;
100010da:	2312      	movs	r3, #18
100010dc:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x10;
100010de:	2310      	movs	r3, #16
100010e0:	757b      	strb	r3, [r7, #21]
            break;
100010e2:	e005      	b.n	100010f0 <MFRC522_ToCard+0x3e>
        case MFRC522_CMD_TRANSCEIVE:
            irqEn = 0x77;
100010e4:	2377      	movs	r3, #119	@ 0x77
100010e6:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x30;
100010e8:	2330      	movs	r3, #48	@ 0x30
100010ea:	757b      	strb	r3, [r7, #21]
            break;
100010ec:	e000      	b.n	100010f0 <MFRC522_ToCard+0x3e>
        default:
            break;
100010ee:	bf00      	nop
    }

    MFRC522_WriteRegister(MFRC522_REG_COMM_IEN, irqEn | 0x80);
100010f0:	7dbb      	ldrb	r3, [r7, #22]
100010f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
100010f6:	b2db      	uxtb	r3, r3
100010f8:	4619      	mov	r1, r3
100010fa:	2002      	movs	r0, #2
100010fc:	f7ff feea 	bl	10000ed4 <MFRC522_WriteRegister>
    MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
10001100:	2180      	movs	r1, #128	@ 0x80
10001102:	2004      	movs	r0, #4
10001104:	f7ff ff6b 	bl	10000fde <MFRC522_ClearBitMask>
    MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
10001108:	2180      	movs	r1, #128	@ 0x80
1000110a:	200a      	movs	r0, #10
1000110c:	f7ff ff4c 	bl	10000fa8 <MFRC522_SetBitMask>
    MFRC522_WriteRegister(MFRC522_REG_COMMAND, MFRC522_CMD_IDLE);
10001110:	2100      	movs	r1, #0
10001112:	2001      	movs	r0, #1
10001114:	f7ff fede 	bl	10000ed4 <MFRC522_WriteRegister>

    for (i = 0; i < sendLen; i++) {
10001118:	2300      	movs	r3, #0
1000111a:	827b      	strh	r3, [r7, #18]
1000111c:	e00a      	b.n	10001134 <MFRC522_ToCard+0x82>
        MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
1000111e:	8a7b      	ldrh	r3, [r7, #18]
10001120:	68ba      	ldr	r2, [r7, #8]
10001122:	4413      	add	r3, r2
10001124:	781b      	ldrb	r3, [r3, #0]
10001126:	4619      	mov	r1, r3
10001128:	2009      	movs	r0, #9
1000112a:	f7ff fed3 	bl	10000ed4 <MFRC522_WriteRegister>
    for (i = 0; i < sendLen; i++) {
1000112e:	8a7b      	ldrh	r3, [r7, #18]
10001130:	3301      	adds	r3, #1
10001132:	827b      	strh	r3, [r7, #18]
10001134:	7bbb      	ldrb	r3, [r7, #14]
10001136:	b29b      	uxth	r3, r3
10001138:	8a7a      	ldrh	r2, [r7, #18]
1000113a:	429a      	cmp	r2, r3
1000113c:	d3ef      	bcc.n	1000111e <MFRC522_ToCard+0x6c>
    }

    MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
1000113e:	7bfb      	ldrb	r3, [r7, #15]
10001140:	4619      	mov	r1, r3
10001142:	2001      	movs	r0, #1
10001144:	f7ff fec6 	bl	10000ed4 <MFRC522_WriteRegister>

    if (command == MFRC522_CMD_TRANSCEIVE) {
10001148:	7bfb      	ldrb	r3, [r7, #15]
1000114a:	2b0c      	cmp	r3, #12
1000114c:	d103      	bne.n	10001156 <MFRC522_ToCard+0xa4>
        MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);
1000114e:	2180      	movs	r1, #128	@ 0x80
10001150:	200d      	movs	r0, #13
10001152:	f7ff ff29 	bl	10000fa8 <MFRC522_SetBitMask>
    }

    i = 2000;
10001156:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
1000115a:	827b      	strh	r3, [r7, #18]
    do {
        n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
1000115c:	2004      	movs	r0, #4
1000115e:	f7ff fee9 	bl	10000f34 <MFRC522_ReadRegister>
10001162:	4603      	mov	r3, r0
10001164:	753b      	strb	r3, [r7, #20]
        i--;
10001166:	8a7b      	ldrh	r3, [r7, #18]
10001168:	3b01      	subs	r3, #1
1000116a:	827b      	strh	r3, [r7, #18]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
1000116c:	8a7b      	ldrh	r3, [r7, #18]
1000116e:	2b00      	cmp	r3, #0
10001170:	d00a      	beq.n	10001188 <MFRC522_ToCard+0xd6>
10001172:	7d3b      	ldrb	r3, [r7, #20]
10001174:	f003 0301 	and.w	r3, r3, #1
10001178:	2b00      	cmp	r3, #0
1000117a:	d105      	bne.n	10001188 <MFRC522_ToCard+0xd6>
1000117c:	7d3a      	ldrb	r2, [r7, #20]
1000117e:	7d7b      	ldrb	r3, [r7, #21]
10001180:	4013      	ands	r3, r2
10001182:	b2db      	uxtb	r3, r3
10001184:	2b00      	cmp	r3, #0
10001186:	d0e9      	beq.n	1000115c <MFRC522_ToCard+0xaa>

    MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);
10001188:	2180      	movs	r1, #128	@ 0x80
1000118a:	200d      	movs	r0, #13
1000118c:	f7ff ff27 	bl	10000fde <MFRC522_ClearBitMask>

    if (i != 0) {
10001190:	8a7b      	ldrh	r3, [r7, #18]
10001192:	2b00      	cmp	r3, #0
10001194:	d057      	beq.n	10001246 <MFRC522_ToCard+0x194>
        if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
10001196:	2006      	movs	r0, #6
10001198:	f7ff fecc 	bl	10000f34 <MFRC522_ReadRegister>
1000119c:	4603      	mov	r3, r0
1000119e:	f003 031b 	and.w	r3, r3, #27
100011a2:	2b00      	cmp	r3, #0
100011a4:	d14d      	bne.n	10001242 <MFRC522_ToCard+0x190>
            status = MFRC522_OK;
100011a6:	2300      	movs	r3, #0
100011a8:	75fb      	strb	r3, [r7, #23]

            if (n & irqEn & 0x01) {
100011aa:	7d3a      	ldrb	r2, [r7, #20]
100011ac:	7dbb      	ldrb	r3, [r7, #22]
100011ae:	4013      	ands	r3, r2
100011b0:	b2db      	uxtb	r3, r3
100011b2:	f003 0301 	and.w	r3, r3, #1
100011b6:	2b00      	cmp	r3, #0
100011b8:	d001      	beq.n	100011be <MFRC522_ToCard+0x10c>
                status = MFRC522_NOTAGERR;
100011ba:	2301      	movs	r3, #1
100011bc:	75fb      	strb	r3, [r7, #23]
            }

            if (command == MFRC522_CMD_TRANSCEIVE) {
100011be:	7bfb      	ldrb	r3, [r7, #15]
100011c0:	2b0c      	cmp	r3, #12
100011c2:	d140      	bne.n	10001246 <MFRC522_ToCard+0x194>
                n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
100011c4:	200a      	movs	r0, #10
100011c6:	f7ff feb5 	bl	10000f34 <MFRC522_ReadRegister>
100011ca:	4603      	mov	r3, r0
100011cc:	753b      	strb	r3, [r7, #20]
                lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
100011ce:	200c      	movs	r0, #12
100011d0:	f7ff feb0 	bl	10000f34 <MFRC522_ReadRegister>
100011d4:	4603      	mov	r3, r0
100011d6:	f003 0307 	and.w	r3, r3, #7
100011da:	747b      	strb	r3, [r7, #17]

                if (lastBits) {
100011dc:	7c7b      	ldrb	r3, [r7, #17]
100011de:	2b00      	cmp	r3, #0
100011e0:	d00b      	beq.n	100011fa <MFRC522_ToCard+0x148>
                    *backLen = (n - 1) * 8 + lastBits;
100011e2:	7d3b      	ldrb	r3, [r7, #20]
100011e4:	3b01      	subs	r3, #1
100011e6:	b29b      	uxth	r3, r3
100011e8:	00db      	lsls	r3, r3, #3
100011ea:	b29a      	uxth	r2, r3
100011ec:	7c7b      	ldrb	r3, [r7, #17]
100011ee:	b29b      	uxth	r3, r3
100011f0:	4413      	add	r3, r2
100011f2:	b29a      	uxth	r2, r3
100011f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100011f6:	801a      	strh	r2, [r3, #0]
100011f8:	e005      	b.n	10001206 <MFRC522_ToCard+0x154>
                } else {
                    *backLen = n * 8;
100011fa:	7d3b      	ldrb	r3, [r7, #20]
100011fc:	b29b      	uxth	r3, r3
100011fe:	00db      	lsls	r3, r3, #3
10001200:	b29a      	uxth	r2, r3
10001202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10001204:	801a      	strh	r2, [r3, #0]
                }

                if (n == 0) {
10001206:	7d3b      	ldrb	r3, [r7, #20]
10001208:	2b00      	cmp	r3, #0
1000120a:	d101      	bne.n	10001210 <MFRC522_ToCard+0x15e>
                    n = 1;
1000120c:	2301      	movs	r3, #1
1000120e:	753b      	strb	r3, [r7, #20]
                }
                if (n > 16) {
10001210:	7d3b      	ldrb	r3, [r7, #20]
10001212:	2b10      	cmp	r3, #16
10001214:	d901      	bls.n	1000121a <MFRC522_ToCard+0x168>
                    n = 16;
10001216:	2310      	movs	r3, #16
10001218:	753b      	strb	r3, [r7, #20]
                }

                for (i = 0; i < n; i++) {
1000121a:	2300      	movs	r3, #0
1000121c:	827b      	strh	r3, [r7, #18]
1000121e:	e00a      	b.n	10001236 <MFRC522_ToCard+0x184>
                    backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
10001220:	8a7b      	ldrh	r3, [r7, #18]
10001222:	687a      	ldr	r2, [r7, #4]
10001224:	18d4      	adds	r4, r2, r3
10001226:	2009      	movs	r0, #9
10001228:	f7ff fe84 	bl	10000f34 <MFRC522_ReadRegister>
1000122c:	4603      	mov	r3, r0
1000122e:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; i++) {
10001230:	8a7b      	ldrh	r3, [r7, #18]
10001232:	3301      	adds	r3, #1
10001234:	827b      	strh	r3, [r7, #18]
10001236:	7d3b      	ldrb	r3, [r7, #20]
10001238:	b29b      	uxth	r3, r3
1000123a:	8a7a      	ldrh	r2, [r7, #18]
1000123c:	429a      	cmp	r2, r3
1000123e:	d3ef      	bcc.n	10001220 <MFRC522_ToCard+0x16e>
10001240:	e001      	b.n	10001246 <MFRC522_ToCard+0x194>
                }
            }
        } else {
            status = MFRC522_ERR;
10001242:	2302      	movs	r3, #2
10001244:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
10001246:	7dfb      	ldrb	r3, [r7, #23]
}
10001248:	4618      	mov	r0, r3
1000124a:	371c      	adds	r7, #28
1000124c:	46bd      	mov	sp, r7
1000124e:	bd90      	pop	{r4, r7, pc}

10001250 <MFRC522_Request>:

/* Request tag */
MFRC522_Status_t MFRC522_Request(uint8_t reqMode, uint8_t *tagType) {
10001250:	b580      	push	{r7, lr}
10001252:	b086      	sub	sp, #24
10001254:	af02      	add	r7, sp, #8
10001256:	4603      	mov	r3, r0
10001258:	6039      	str	r1, [r7, #0]
1000125a:	71fb      	strb	r3, [r7, #7]
    MFRC522_Status_t status;
    uint16_t backBits;

    MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);
1000125c:	2107      	movs	r1, #7
1000125e:	200d      	movs	r0, #13
10001260:	f7ff fe38 	bl	10000ed4 <MFRC522_WriteRegister>

    tagType[0] = reqMode;
10001264:	683b      	ldr	r3, [r7, #0]
10001266:	79fa      	ldrb	r2, [r7, #7]
10001268:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, tagType, 1, tagType, &backBits);
1000126a:	f107 030c 	add.w	r3, r7, #12
1000126e:	9300      	str	r3, [sp, #0]
10001270:	683b      	ldr	r3, [r7, #0]
10001272:	2201      	movs	r2, #1
10001274:	6839      	ldr	r1, [r7, #0]
10001276:	200c      	movs	r0, #12
10001278:	f7ff ff1b 	bl	100010b2 <MFRC522_ToCard>
1000127c:	4603      	mov	r3, r0
1000127e:	73fb      	strb	r3, [r7, #15]

    if ((status != MFRC522_OK) || (backBits != 0x10)) {
10001280:	7bfb      	ldrb	r3, [r7, #15]
10001282:	2b00      	cmp	r3, #0
10001284:	d102      	bne.n	1000128c <MFRC522_Request+0x3c>
10001286:	89bb      	ldrh	r3, [r7, #12]
10001288:	2b10      	cmp	r3, #16
1000128a:	d001      	beq.n	10001290 <MFRC522_Request+0x40>
        status = MFRC522_ERR;
1000128c:	2302      	movs	r3, #2
1000128e:	73fb      	strb	r3, [r7, #15]
    }

    return status;
10001290:	7bfb      	ldrb	r3, [r7, #15]
}
10001292:	4618      	mov	r0, r3
10001294:	3710      	adds	r7, #16
10001296:	46bd      	mov	sp, r7
10001298:	bd80      	pop	{r7, pc}

1000129a <MFRC522_Anticoll>:

/* Anti-collision detection */
MFRC522_Status_t MFRC522_Anticoll(Uid_t *uid) {
1000129a:	b580      	push	{r7, lr}
1000129c:	b086      	sub	sp, #24
1000129e:	af02      	add	r7, sp, #8
100012a0:	6078      	str	r0, [r7, #4]
    MFRC522_Status_t status;
    uint8_t i;
    uint8_t serNumCheck = 0;
100012a2:	2300      	movs	r3, #0
100012a4:	737b      	strb	r3, [r7, #13]
    uint16_t unLen;

    MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);
100012a6:	2100      	movs	r1, #0
100012a8:	200d      	movs	r0, #13
100012aa:	f7ff fe13 	bl	10000ed4 <MFRC522_WriteRegister>

    uint8_t serNum[2];
    serNum[0] = PICC_CMD_SEL_CL1;
100012ae:	2393      	movs	r3, #147	@ 0x93
100012b0:	723b      	strb	r3, [r7, #8]
    serNum[1] = 0x20;
100012b2:	2320      	movs	r3, #32
100012b4:	727b      	strb	r3, [r7, #9]

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, serNum, 2, serNum, &unLen);
100012b6:	f107 0208 	add.w	r2, r7, #8
100012ba:	f107 0108 	add.w	r1, r7, #8
100012be:	f107 030a 	add.w	r3, r7, #10
100012c2:	9300      	str	r3, [sp, #0]
100012c4:	4613      	mov	r3, r2
100012c6:	2202      	movs	r2, #2
100012c8:	200c      	movs	r0, #12
100012ca:	f7ff fef2 	bl	100010b2 <MFRC522_ToCard>
100012ce:	4603      	mov	r3, r0
100012d0:	73fb      	strb	r3, [r7, #15]

    if (status == MFRC522_OK) {
100012d2:	7bfb      	ldrb	r3, [r7, #15]
100012d4:	2b00      	cmp	r3, #0
100012d6:	d127      	bne.n	10001328 <MFRC522_Anticoll+0x8e>
        for (i = 0; i < 4; i++) {
100012d8:	2300      	movs	r3, #0
100012da:	73bb      	strb	r3, [r7, #14]
100012dc:	e014      	b.n	10001308 <MFRC522_Anticoll+0x6e>
            uid->uidByte[i] = serNum[i];
100012de:	7bba      	ldrb	r2, [r7, #14]
100012e0:	7bbb      	ldrb	r3, [r7, #14]
100012e2:	3210      	adds	r2, #16
100012e4:	443a      	add	r2, r7
100012e6:	f812 1c08 	ldrb.w	r1, [r2, #-8]
100012ea:	687a      	ldr	r2, [r7, #4]
100012ec:	4413      	add	r3, r2
100012ee:	460a      	mov	r2, r1
100012f0:	705a      	strb	r2, [r3, #1]
            serNumCheck ^= serNum[i];
100012f2:	7bbb      	ldrb	r3, [r7, #14]
100012f4:	3310      	adds	r3, #16
100012f6:	443b      	add	r3, r7
100012f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
100012fc:	7b7b      	ldrb	r3, [r7, #13]
100012fe:	4053      	eors	r3, r2
10001300:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++) {
10001302:	7bbb      	ldrb	r3, [r7, #14]
10001304:	3301      	adds	r3, #1
10001306:	73bb      	strb	r3, [r7, #14]
10001308:	7bbb      	ldrb	r3, [r7, #14]
1000130a:	2b03      	cmp	r3, #3
1000130c:	d9e7      	bls.n	100012de <MFRC522_Anticoll+0x44>
        }

        if (serNumCheck != serNum[i]) {
1000130e:	7bbb      	ldrb	r3, [r7, #14]
10001310:	3310      	adds	r3, #16
10001312:	443b      	add	r3, r7
10001314:	f813 3c08 	ldrb.w	r3, [r3, #-8]
10001318:	7b7a      	ldrb	r2, [r7, #13]
1000131a:	429a      	cmp	r2, r3
1000131c:	d001      	beq.n	10001322 <MFRC522_Anticoll+0x88>
            status = MFRC522_ERR;
1000131e:	2302      	movs	r3, #2
10001320:	73fb      	strb	r3, [r7, #15]
        }

        uid->size = 4;
10001322:	687b      	ldr	r3, [r7, #4]
10001324:	2204      	movs	r2, #4
10001326:	701a      	strb	r2, [r3, #0]
    }

    return status;
10001328:	7bfb      	ldrb	r3, [r7, #15]
}
1000132a:	4618      	mov	r0, r3
1000132c:	3710      	adds	r7, #16
1000132e:	46bd      	mov	sp, r7
10001330:	bd80      	pop	{r7, pc}

10001332 <MFRC522_SelectTag>:

/* Select tag */
MFRC522_Status_t MFRC522_SelectTag(Uid_t *uid) {
10001332:	b580      	push	{r7, lr}
10001334:	b088      	sub	sp, #32
10001336:	af02      	add	r7, sp, #8
10001338:	6078      	str	r0, [r7, #4]
    MFRC522_Status_t status;
    uint8_t i;
    uint16_t recvBits;
    uint8_t buffer[9];

    buffer[0] = PICC_CMD_SEL_CL1;
1000133a:	2393      	movs	r3, #147	@ 0x93
1000133c:	723b      	strb	r3, [r7, #8]
    buffer[1] = 0x70;
1000133e:	2370      	movs	r3, #112	@ 0x70
10001340:	727b      	strb	r3, [r7, #9]

    for (i = 0; i < 4; i++) {
10001342:	2300      	movs	r3, #0
10001344:	75bb      	strb	r3, [r7, #22]
10001346:	e00c      	b.n	10001362 <MFRC522_SelectTag+0x30>
        buffer[i + 2] = uid->uidByte[i];
10001348:	7dba      	ldrb	r2, [r7, #22]
1000134a:	7dbb      	ldrb	r3, [r7, #22]
1000134c:	3302      	adds	r3, #2
1000134e:	6879      	ldr	r1, [r7, #4]
10001350:	440a      	add	r2, r1
10001352:	7852      	ldrb	r2, [r2, #1]
10001354:	3318      	adds	r3, #24
10001356:	443b      	add	r3, r7
10001358:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (i = 0; i < 4; i++) {
1000135c:	7dbb      	ldrb	r3, [r7, #22]
1000135e:	3301      	adds	r3, #1
10001360:	75bb      	strb	r3, [r7, #22]
10001362:	7dbb      	ldrb	r3, [r7, #22]
10001364:	2b03      	cmp	r3, #3
10001366:	d9ef      	bls.n	10001348 <MFRC522_SelectTag+0x16>
    }

    buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
10001368:	7aba      	ldrb	r2, [r7, #10]
1000136a:	7afb      	ldrb	r3, [r7, #11]
1000136c:	4053      	eors	r3, r2
1000136e:	b2da      	uxtb	r2, r3
10001370:	7b3b      	ldrb	r3, [r7, #12]
10001372:	4053      	eors	r3, r2
10001374:	b2da      	uxtb	r2, r3
10001376:	7b7b      	ldrb	r3, [r7, #13]
10001378:	4053      	eors	r3, r2
1000137a:	b2db      	uxtb	r3, r3
1000137c:	73bb      	strb	r3, [r7, #14]

    MFRC522_CalculateCRC(buffer, 7, &buffer[7]);
1000137e:	f107 0308 	add.w	r3, r7, #8
10001382:	1dda      	adds	r2, r3, #7
10001384:	f107 0308 	add.w	r3, r7, #8
10001388:	2107      	movs	r1, #7
1000138a:	4618      	mov	r0, r3
1000138c:	f7ff fe47 	bl	1000101e <MFRC522_CalculateCRC>

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
10001390:	f107 0208 	add.w	r2, r7, #8
10001394:	f107 0108 	add.w	r1, r7, #8
10001398:	f107 0314 	add.w	r3, r7, #20
1000139c:	9300      	str	r3, [sp, #0]
1000139e:	4613      	mov	r3, r2
100013a0:	2209      	movs	r2, #9
100013a2:	200c      	movs	r0, #12
100013a4:	f7ff fe85 	bl	100010b2 <MFRC522_ToCard>
100013a8:	4603      	mov	r3, r0
100013aa:	75fb      	strb	r3, [r7, #23]

    if ((status == MFRC522_OK) && (recvBits == 0x18)) {
100013ac:	7dfb      	ldrb	r3, [r7, #23]
100013ae:	2b00      	cmp	r3, #0
100013b0:	d108      	bne.n	100013c4 <MFRC522_SelectTag+0x92>
100013b2:	8abb      	ldrh	r3, [r7, #20]
100013b4:	2b18      	cmp	r3, #24
100013b6:	d105      	bne.n	100013c4 <MFRC522_SelectTag+0x92>
        uid->sak = buffer[0];
100013b8:	7a3a      	ldrb	r2, [r7, #8]
100013ba:	687b      	ldr	r3, [r7, #4]
100013bc:	72da      	strb	r2, [r3, #11]
        status = MFRC522_OK;
100013be:	2300      	movs	r3, #0
100013c0:	75fb      	strb	r3, [r7, #23]
100013c2:	e001      	b.n	100013c8 <MFRC522_SelectTag+0x96>
    } else {
        status = MFRC522_ERR;
100013c4:	2302      	movs	r3, #2
100013c6:	75fb      	strb	r3, [r7, #23]
    }

    return status;
100013c8:	7dfb      	ldrb	r3, [r7, #23]
}
100013ca:	4618      	mov	r0, r3
100013cc:	3718      	adds	r7, #24
100013ce:	46bd      	mov	sp, r7
100013d0:	bd80      	pop	{r7, pc}

100013d2 <MFRC522_Auth>:

/* Authenticate */
MFRC522_Status_t MFRC522_Auth(uint8_t authMode, uint8_t blockAddr, uint8_t *key, Uid_t *uid) {
100013d2:	b580      	push	{r7, lr}
100013d4:	b08a      	sub	sp, #40	@ 0x28
100013d6:	af02      	add	r7, sp, #8
100013d8:	60ba      	str	r2, [r7, #8]
100013da:	607b      	str	r3, [r7, #4]
100013dc:	4603      	mov	r3, r0
100013de:	73fb      	strb	r3, [r7, #15]
100013e0:	460b      	mov	r3, r1
100013e2:	73bb      	strb	r3, [r7, #14]
    MFRC522_Status_t status;
    uint16_t recvBits;
    uint8_t i;
    uint8_t buff[12];

    buff[0] = authMode;
100013e4:	7bfb      	ldrb	r3, [r7, #15]
100013e6:	743b      	strb	r3, [r7, #16]
    buff[1] = blockAddr;
100013e8:	7bbb      	ldrb	r3, [r7, #14]
100013ea:	747b      	strb	r3, [r7, #17]

    for (i = 0; i < 6; i++) {
100013ec:	2300      	movs	r3, #0
100013ee:	77bb      	strb	r3, [r7, #30]
100013f0:	e00c      	b.n	1000140c <MFRC522_Auth+0x3a>
        buff[i + 2] = key[i];
100013f2:	7fbb      	ldrb	r3, [r7, #30]
100013f4:	68ba      	ldr	r2, [r7, #8]
100013f6:	441a      	add	r2, r3
100013f8:	7fbb      	ldrb	r3, [r7, #30]
100013fa:	3302      	adds	r3, #2
100013fc:	7812      	ldrb	r2, [r2, #0]
100013fe:	3320      	adds	r3, #32
10001400:	443b      	add	r3, r7
10001402:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (i = 0; i < 6; i++) {
10001406:	7fbb      	ldrb	r3, [r7, #30]
10001408:	3301      	adds	r3, #1
1000140a:	77bb      	strb	r3, [r7, #30]
1000140c:	7fbb      	ldrb	r3, [r7, #30]
1000140e:	2b05      	cmp	r3, #5
10001410:	d9ef      	bls.n	100013f2 <MFRC522_Auth+0x20>
    }

    for (i = 0; i < 4; i++) {
10001412:	2300      	movs	r3, #0
10001414:	77bb      	strb	r3, [r7, #30]
10001416:	e00c      	b.n	10001432 <MFRC522_Auth+0x60>
        buff[i + 8] = uid->uidByte[i];
10001418:	7fba      	ldrb	r2, [r7, #30]
1000141a:	7fbb      	ldrb	r3, [r7, #30]
1000141c:	3308      	adds	r3, #8
1000141e:	6879      	ldr	r1, [r7, #4]
10001420:	440a      	add	r2, r1
10001422:	7852      	ldrb	r2, [r2, #1]
10001424:	3320      	adds	r3, #32
10001426:	443b      	add	r3, r7
10001428:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (i = 0; i < 4; i++) {
1000142c:	7fbb      	ldrb	r3, [r7, #30]
1000142e:	3301      	adds	r3, #1
10001430:	77bb      	strb	r3, [r7, #30]
10001432:	7fbb      	ldrb	r3, [r7, #30]
10001434:	2b03      	cmp	r3, #3
10001436:	d9ef      	bls.n	10001418 <MFRC522_Auth+0x46>
    }

    status = MFRC522_ToCard(MFRC522_CMD_MF_AUTHENT, buff, 12, buff, &recvBits);
10001438:	f107 0210 	add.w	r2, r7, #16
1000143c:	f107 0110 	add.w	r1, r7, #16
10001440:	f107 031c 	add.w	r3, r7, #28
10001444:	9300      	str	r3, [sp, #0]
10001446:	4613      	mov	r3, r2
10001448:	220c      	movs	r2, #12
1000144a:	200e      	movs	r0, #14
1000144c:	f7ff fe31 	bl	100010b2 <MFRC522_ToCard>
10001450:	4603      	mov	r3, r0
10001452:	77fb      	strb	r3, [r7, #31]

    if ((status != MFRC522_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS_2) & 0x08))) {
10001454:	7ffb      	ldrb	r3, [r7, #31]
10001456:	2b00      	cmp	r3, #0
10001458:	d107      	bne.n	1000146a <MFRC522_Auth+0x98>
1000145a:	2008      	movs	r0, #8
1000145c:	f7ff fd6a 	bl	10000f34 <MFRC522_ReadRegister>
10001460:	4603      	mov	r3, r0
10001462:	f003 0308 	and.w	r3, r3, #8
10001466:	2b00      	cmp	r3, #0
10001468:	d101      	bne.n	1000146e <MFRC522_Auth+0x9c>
        status = MFRC522_ERR;
1000146a:	2302      	movs	r3, #2
1000146c:	77fb      	strb	r3, [r7, #31]
    }

    return status;
1000146e:	7ffb      	ldrb	r3, [r7, #31]
}
10001470:	4618      	mov	r0, r3
10001472:	3720      	adds	r7, #32
10001474:	46bd      	mov	sp, r7
10001476:	bd80      	pop	{r7, pc}

10001478 <MFRC522_Read>:

/* Read block */
MFRC522_Status_t MFRC522_Read(uint8_t blockAddr, uint8_t *recvData) {
10001478:	b580      	push	{r7, lr}
1000147a:	b086      	sub	sp, #24
1000147c:	af02      	add	r7, sp, #8
1000147e:	4603      	mov	r3, r0
10001480:	6039      	str	r1, [r7, #0]
10001482:	71fb      	strb	r3, [r7, #7]
    MFRC522_Status_t status;
    uint16_t unLen;

    recvData[0] = PICC_CMD_MF_READ;
10001484:	683b      	ldr	r3, [r7, #0]
10001486:	2230      	movs	r2, #48	@ 0x30
10001488:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
1000148a:	683b      	ldr	r3, [r7, #0]
1000148c:	3301      	adds	r3, #1
1000148e:	79fa      	ldrb	r2, [r7, #7]
10001490:	701a      	strb	r2, [r3, #0]

    MFRC522_CalculateCRC(recvData, 2, &recvData[2]);
10001492:	683b      	ldr	r3, [r7, #0]
10001494:	3302      	adds	r3, #2
10001496:	461a      	mov	r2, r3
10001498:	2102      	movs	r1, #2
1000149a:	6838      	ldr	r0, [r7, #0]
1000149c:	f7ff fdbf 	bl	1000101e <MFRC522_CalculateCRC>

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, recvData, 4, recvData, &unLen);
100014a0:	f107 030c 	add.w	r3, r7, #12
100014a4:	9300      	str	r3, [sp, #0]
100014a6:	683b      	ldr	r3, [r7, #0]
100014a8:	2204      	movs	r2, #4
100014aa:	6839      	ldr	r1, [r7, #0]
100014ac:	200c      	movs	r0, #12
100014ae:	f7ff fe00 	bl	100010b2 <MFRC522_ToCard>
100014b2:	4603      	mov	r3, r0
100014b4:	73fb      	strb	r3, [r7, #15]

    if ((status != MFRC522_OK) || (unLen != 0x90)) {
100014b6:	7bfb      	ldrb	r3, [r7, #15]
100014b8:	2b00      	cmp	r3, #0
100014ba:	d102      	bne.n	100014c2 <MFRC522_Read+0x4a>
100014bc:	89bb      	ldrh	r3, [r7, #12]
100014be:	2b90      	cmp	r3, #144	@ 0x90
100014c0:	d001      	beq.n	100014c6 <MFRC522_Read+0x4e>
        status = MFRC522_ERR;
100014c2:	2302      	movs	r3, #2
100014c4:	73fb      	strb	r3, [r7, #15]
    }

    return status;
100014c6:	7bfb      	ldrb	r3, [r7, #15]
}
100014c8:	4618      	mov	r0, r3
100014ca:	3710      	adds	r7, #16
100014cc:	46bd      	mov	sp, r7
100014ce:	bd80      	pop	{r7, pc}

100014d0 <MFRC522_Write>:

/* Write block */
MFRC522_Status_t MFRC522_Write(uint8_t blockAddr, uint8_t *writeData) {
100014d0:	b580      	push	{r7, lr}
100014d2:	b08a      	sub	sp, #40	@ 0x28
100014d4:	af02      	add	r7, sp, #8
100014d6:	4603      	mov	r3, r0
100014d8:	6039      	str	r1, [r7, #0]
100014da:	71fb      	strb	r3, [r7, #7]
    MFRC522_Status_t status;
    uint16_t recvBits;
    uint8_t i;
    uint8_t buff[18];

    buff[0] = PICC_CMD_MF_WRITE;
100014dc:	23a0      	movs	r3, #160	@ 0xa0
100014de:	723b      	strb	r3, [r7, #8]
    buff[1] = blockAddr;
100014e0:	79fb      	ldrb	r3, [r7, #7]
100014e2:	727b      	strb	r3, [r7, #9]
    MFRC522_CalculateCRC(buff, 2, &buff[2]);
100014e4:	f107 0308 	add.w	r3, r7, #8
100014e8:	1c9a      	adds	r2, r3, #2
100014ea:	f107 0308 	add.w	r3, r7, #8
100014ee:	2102      	movs	r1, #2
100014f0:	4618      	mov	r0, r3
100014f2:	f7ff fd94 	bl	1000101e <MFRC522_CalculateCRC>

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buff, 4, buff, &recvBits);
100014f6:	f107 0208 	add.w	r2, r7, #8
100014fa:	f107 0108 	add.w	r1, r7, #8
100014fe:	f107 031c 	add.w	r3, r7, #28
10001502:	9300      	str	r3, [sp, #0]
10001504:	4613      	mov	r3, r2
10001506:	2204      	movs	r2, #4
10001508:	200c      	movs	r0, #12
1000150a:	f7ff fdd2 	bl	100010b2 <MFRC522_ToCard>
1000150e:	4603      	mov	r3, r0
10001510:	77fb      	strb	r3, [r7, #31]

    if ((status != MFRC522_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) {
10001512:	7ffb      	ldrb	r3, [r7, #31]
10001514:	2b00      	cmp	r3, #0
10001516:	d107      	bne.n	10001528 <MFRC522_Write+0x58>
10001518:	8bbb      	ldrh	r3, [r7, #28]
1000151a:	2b04      	cmp	r3, #4
1000151c:	d104      	bne.n	10001528 <MFRC522_Write+0x58>
1000151e:	7a3b      	ldrb	r3, [r7, #8]
10001520:	f003 030f 	and.w	r3, r3, #15
10001524:	2b0a      	cmp	r3, #10
10001526:	d001      	beq.n	1000152c <MFRC522_Write+0x5c>
        status = MFRC522_ERR;
10001528:	2302      	movs	r3, #2
1000152a:	77fb      	strb	r3, [r7, #31]
    }

    if (status == MFRC522_OK) {
1000152c:	7ffb      	ldrb	r3, [r7, #31]
1000152e:	2b00      	cmp	r3, #0
10001530:	d136      	bne.n	100015a0 <MFRC522_Write+0xd0>
        for (i = 0; i < 16; i++) {
10001532:	2300      	movs	r3, #0
10001534:	77bb      	strb	r3, [r7, #30]
10001536:	e00b      	b.n	10001550 <MFRC522_Write+0x80>
            buff[i] = writeData[i];
10001538:	7fbb      	ldrb	r3, [r7, #30]
1000153a:	683a      	ldr	r2, [r7, #0]
1000153c:	441a      	add	r2, r3
1000153e:	7fbb      	ldrb	r3, [r7, #30]
10001540:	7812      	ldrb	r2, [r2, #0]
10001542:	3320      	adds	r3, #32
10001544:	443b      	add	r3, r7
10001546:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (i = 0; i < 16; i++) {
1000154a:	7fbb      	ldrb	r3, [r7, #30]
1000154c:	3301      	adds	r3, #1
1000154e:	77bb      	strb	r3, [r7, #30]
10001550:	7fbb      	ldrb	r3, [r7, #30]
10001552:	2b0f      	cmp	r3, #15
10001554:	d9f0      	bls.n	10001538 <MFRC522_Write+0x68>
        }

        MFRC522_CalculateCRC(buff, 16, &buff[16]);
10001556:	f107 0308 	add.w	r3, r7, #8
1000155a:	f103 0210 	add.w	r2, r3, #16
1000155e:	f107 0308 	add.w	r3, r7, #8
10001562:	2110      	movs	r1, #16
10001564:	4618      	mov	r0, r3
10001566:	f7ff fd5a 	bl	1000101e <MFRC522_CalculateCRC>
        status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buff, 18, buff, &recvBits);
1000156a:	f107 0208 	add.w	r2, r7, #8
1000156e:	f107 0108 	add.w	r1, r7, #8
10001572:	f107 031c 	add.w	r3, r7, #28
10001576:	9300      	str	r3, [sp, #0]
10001578:	4613      	mov	r3, r2
1000157a:	2212      	movs	r2, #18
1000157c:	200c      	movs	r0, #12
1000157e:	f7ff fd98 	bl	100010b2 <MFRC522_ToCard>
10001582:	4603      	mov	r3, r0
10001584:	77fb      	strb	r3, [r7, #31]

        if ((status != MFRC522_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) {
10001586:	7ffb      	ldrb	r3, [r7, #31]
10001588:	2b00      	cmp	r3, #0
1000158a:	d107      	bne.n	1000159c <MFRC522_Write+0xcc>
1000158c:	8bbb      	ldrh	r3, [r7, #28]
1000158e:	2b04      	cmp	r3, #4
10001590:	d104      	bne.n	1000159c <MFRC522_Write+0xcc>
10001592:	7a3b      	ldrb	r3, [r7, #8]
10001594:	f003 030f 	and.w	r3, r3, #15
10001598:	2b0a      	cmp	r3, #10
1000159a:	d001      	beq.n	100015a0 <MFRC522_Write+0xd0>
            status = MFRC522_ERR;
1000159c:	2302      	movs	r3, #2
1000159e:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
100015a0:	7ffb      	ldrb	r3, [r7, #31]
}
100015a2:	4618      	mov	r0, r3
100015a4:	3720      	adds	r7, #32
100015a6:	46bd      	mov	sp, r7
100015a8:	bd80      	pop	{r7, pc}

100015aa <MFRC522_Halt>:

/* Halt tag */
void MFRC522_Halt(void) {
100015aa:	b580      	push	{r7, lr}
100015ac:	b084      	sub	sp, #16
100015ae:	af02      	add	r7, sp, #8
    uint16_t unLen;
    uint8_t buff[4];

    buff[0] = PICC_CMD_HLTA;
100015b0:	2350      	movs	r3, #80	@ 0x50
100015b2:	703b      	strb	r3, [r7, #0]
    buff[1] = 0;
100015b4:	2300      	movs	r3, #0
100015b6:	707b      	strb	r3, [r7, #1]
    MFRC522_CalculateCRC(buff, 2, &buff[2]);
100015b8:	463b      	mov	r3, r7
100015ba:	1c9a      	adds	r2, r3, #2
100015bc:	463b      	mov	r3, r7
100015be:	2102      	movs	r1, #2
100015c0:	4618      	mov	r0, r3
100015c2:	f7ff fd2c 	bl	1000101e <MFRC522_CalculateCRC>

    MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buff, 4, buff, &unLen);
100015c6:	463a      	mov	r2, r7
100015c8:	4639      	mov	r1, r7
100015ca:	1dbb      	adds	r3, r7, #6
100015cc:	9300      	str	r3, [sp, #0]
100015ce:	4613      	mov	r3, r2
100015d0:	2204      	movs	r2, #4
100015d2:	200c      	movs	r0, #12
100015d4:	f7ff fd6d 	bl	100010b2 <MFRC522_ToCard>
}
100015d8:	bf00      	nop
100015da:	3708      	adds	r7, #8
100015dc:	46bd      	mov	sp, r7
100015de:	bd80      	pop	{r7, pc}

100015e0 <MFRC522_GetType>:

/* Get card type */
PICC_Type_t MFRC522_GetType(uint8_t sak) {
100015e0:	b480      	push	{r7}
100015e2:	b083      	sub	sp, #12
100015e4:	af00      	add	r7, sp, #0
100015e6:	4603      	mov	r3, r0
100015e8:	71fb      	strb	r3, [r7, #7]
    if (sak & 0x04) {
100015ea:	79fb      	ldrb	r3, [r7, #7]
100015ec:	f003 0304 	and.w	r3, r3, #4
100015f0:	2b00      	cmp	r3, #0
100015f2:	d001      	beq.n	100015f8 <MFRC522_GetType+0x18>
        return PICC_TYPE_NOT_COMPLETE;
100015f4:	2307      	movs	r3, #7
100015f6:	e044      	b.n	10001682 <MFRC522_GetType+0xa2>
    }

    switch (sak) {
100015f8:	79fb      	ldrb	r3, [r7, #7]
100015fa:	2b18      	cmp	r3, #24
100015fc:	d840      	bhi.n	10001680 <MFRC522_GetType+0xa0>
100015fe:	a201      	add	r2, pc, #4	@ (adr r2, 10001604 <MFRC522_GetType+0x24>)
10001600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001604:	10001675 	.word	0x10001675
10001608:	1000167d 	.word	0x1000167d
1000160c:	10001681 	.word	0x10001681
10001610:	10001681 	.word	0x10001681
10001614:	10001681 	.word	0x10001681
10001618:	10001681 	.word	0x10001681
1000161c:	10001681 	.word	0x10001681
10001620:	10001681 	.word	0x10001681
10001624:	1000166d 	.word	0x1000166d
10001628:	10001669 	.word	0x10001669
1000162c:	10001681 	.word	0x10001681
10001630:	10001681 	.word	0x10001681
10001634:	10001681 	.word	0x10001681
10001638:	10001681 	.word	0x10001681
1000163c:	10001681 	.word	0x10001681
10001640:	10001681 	.word	0x10001681
10001644:	10001679 	.word	0x10001679
10001648:	10001679 	.word	0x10001679
1000164c:	10001681 	.word	0x10001681
10001650:	10001681 	.word	0x10001681
10001654:	10001681 	.word	0x10001681
10001658:	10001681 	.word	0x10001681
1000165c:	10001681 	.word	0x10001681
10001660:	10001681 	.word	0x10001681
10001664:	10001671 	.word	0x10001671
        case 0x09: return PICC_TYPE_MIFARE_MINI;
10001668:	2301      	movs	r3, #1
1000166a:	e00a      	b.n	10001682 <MFRC522_GetType+0xa2>
        case 0x08: return PICC_TYPE_MIFARE_1K;
1000166c:	2302      	movs	r3, #2
1000166e:	e008      	b.n	10001682 <MFRC522_GetType+0xa2>
        case 0x18: return PICC_TYPE_MIFARE_4K;
10001670:	2303      	movs	r3, #3
10001672:	e006      	b.n	10001682 <MFRC522_GetType+0xa2>
        case 0x00: return PICC_TYPE_MIFARE_UL;
10001674:	2304      	movs	r3, #4
10001676:	e004      	b.n	10001682 <MFRC522_GetType+0xa2>
        case 0x10:
        case 0x11: return PICC_TYPE_MIFARE_PLUS;
10001678:	2305      	movs	r3, #5
1000167a:	e002      	b.n	10001682 <MFRC522_GetType+0xa2>
        case 0x01: return PICC_TYPE_TNP3XXX;
1000167c:	2306      	movs	r3, #6
1000167e:	e000      	b.n	10001682 <MFRC522_GetType+0xa2>
        default: return PICC_TYPE_UNKNOWN;
10001680:	2300      	movs	r3, #0
    }
}
10001682:	4618      	mov	r0, r3
10001684:	370c      	adds	r7, #12
10001686:	46bd      	mov	sp, r7
10001688:	f85d 7b04 	ldr.w	r7, [sp], #4
1000168c:	4770      	bx	lr
1000168e:	bf00      	nop

10001690 <MFRC522_GetTypeName>:

/* Get card type name */
const char* MFRC522_GetTypeName(PICC_Type_t type) {
10001690:	b480      	push	{r7}
10001692:	b083      	sub	sp, #12
10001694:	af00      	add	r7, sp, #0
10001696:	4603      	mov	r3, r0
10001698:	71fb      	strb	r3, [r7, #7]
    switch (type) {
1000169a:	79fb      	ldrb	r3, [r7, #7]
1000169c:	3b01      	subs	r3, #1
1000169e:	2b06      	cmp	r3, #6
100016a0:	d81e      	bhi.n	100016e0 <MFRC522_GetTypeName+0x50>
100016a2:	a201      	add	r2, pc, #4	@ (adr r2, 100016a8 <MFRC522_GetTypeName+0x18>)
100016a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100016a8:	100016c5 	.word	0x100016c5
100016ac:	100016c9 	.word	0x100016c9
100016b0:	100016cd 	.word	0x100016cd
100016b4:	100016d1 	.word	0x100016d1
100016b8:	100016d5 	.word	0x100016d5
100016bc:	100016d9 	.word	0x100016d9
100016c0:	100016dd 	.word	0x100016dd
        case PICC_TYPE_MIFARE_MINI: return "MIFARE Mini";
100016c4:	4b0a      	ldr	r3, [pc, #40]	@ (100016f0 <MFRC522_GetTypeName+0x60>)
100016c6:	e00c      	b.n	100016e2 <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_1K: return "MIFARE 1KB";
100016c8:	4b0a      	ldr	r3, [pc, #40]	@ (100016f4 <MFRC522_GetTypeName+0x64>)
100016ca:	e00a      	b.n	100016e2 <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_4K: return "MIFARE 4KB";
100016cc:	4b0a      	ldr	r3, [pc, #40]	@ (100016f8 <MFRC522_GetTypeName+0x68>)
100016ce:	e008      	b.n	100016e2 <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_UL: return "MIFARE Ultralight";
100016d0:	4b0a      	ldr	r3, [pc, #40]	@ (100016fc <MFRC522_GetTypeName+0x6c>)
100016d2:	e006      	b.n	100016e2 <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_PLUS: return "MIFARE Plus";
100016d4:	4b0a      	ldr	r3, [pc, #40]	@ (10001700 <MFRC522_GetTypeName+0x70>)
100016d6:	e004      	b.n	100016e2 <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_TNP3XXX: return "MIFARE TNP3XXX";
100016d8:	4b0a      	ldr	r3, [pc, #40]	@ (10001704 <MFRC522_GetTypeName+0x74>)
100016da:	e002      	b.n	100016e2 <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_NOT_COMPLETE: return "SAK incomplete";
100016dc:	4b0a      	ldr	r3, [pc, #40]	@ (10001708 <MFRC522_GetTypeName+0x78>)
100016de:	e000      	b.n	100016e2 <MFRC522_GetTypeName+0x52>
        default: return "Unknown";
100016e0:	4b0a      	ldr	r3, [pc, #40]	@ (1000170c <MFRC522_GetTypeName+0x7c>)
    }
}
100016e2:	4618      	mov	r0, r3
100016e4:	370c      	adds	r7, #12
100016e6:	46bd      	mov	sp, r7
100016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100016ec:	4770      	bx	lr
100016ee:	bf00      	nop
100016f0:	1000aed0 	.word	0x1000aed0
100016f4:	1000aedc 	.word	0x1000aedc
100016f8:	1000aee8 	.word	0x1000aee8
100016fc:	1000aef4 	.word	0x1000aef4
10001700:	1000af08 	.word	0x1000af08
10001704:	1000af14 	.word	0x1000af14
10001708:	1000af24 	.word	0x1000af24
1000170c:	1000af34 	.word	0x1000af34

10001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10001710:	b580      	push	{r7, lr}
10001712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
10001714:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001718:	f44f 6200 	mov.w	r2, #2048	@ 0x800
1000171c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10001720:	2200      	movs	r2, #0
10001722:	2101      	movs	r1, #1
10001724:	f06f 000b 	mvn.w	r0, #11
10001728:	f000 fb5d 	bl	10001de6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
1000172c:	2200      	movs	r2, #0
1000172e:	2101      	movs	r1, #1
10001730:	f06f 000a 	mvn.w	r0, #10
10001734:	f000 fb57 	bl	10001de6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10001738:	2200      	movs	r2, #0
1000173a:	2101      	movs	r1, #1
1000173c:	f06f 0009 	mvn.w	r0, #9
10001740:	f000 fb51 	bl	10001de6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
10001744:	2200      	movs	r2, #0
10001746:	2101      	movs	r1, #1
10001748:	f06f 0004 	mvn.w	r0, #4
1000174c:	f000 fb4b 	bl	10001de6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
10001750:	2200      	movs	r2, #0
10001752:	2101      	movs	r1, #1
10001754:	f06f 0003 	mvn.w	r0, #3
10001758:	f000 fb45 	bl	10001de6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
1000175c:	2200      	movs	r2, #0
1000175e:	2101      	movs	r1, #1
10001760:	f06f 0001 	mvn.w	r0, #1
10001764:	f000 fb3f 	bl	10001de6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
10001768:	2200      	movs	r2, #0
1000176a:	2100      	movs	r1, #0
1000176c:	2091      	movs	r0, #145	@ 0x91
1000176e:	f000 fb3a 	bl	10001de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10001772:	2091      	movs	r0, #145	@ 0x91
10001774:	f000 fb53 	bl	10001e1e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10001778:	bf00      	nop
1000177a:	bd80      	pop	{r7, pc}

1000177c <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
1000177c:	b580      	push	{r7, lr}
1000177e:	b082      	sub	sp, #8
10001780:	af00      	add	r7, sp, #0
10001782:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
10001784:	687b      	ldr	r3, [r7, #4]
10001786:	681b      	ldr	r3, [r3, #0]
10001788:	4a0e      	ldr	r2, [pc, #56]	@ (100017c4 <HAL_IPCC_MspInit+0x48>)
1000178a:	4293      	cmp	r3, r2
1000178c:	d115      	bne.n	100017ba <HAL_IPCC_MspInit+0x3e>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
1000178e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001792:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
10001796:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
1000179a:	2200      	movs	r2, #0
1000179c:	2101      	movs	r1, #1
1000179e:	2067      	movs	r0, #103	@ 0x67
100017a0:	f000 fb21 	bl	10001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
100017a4:	2067      	movs	r0, #103	@ 0x67
100017a6:	f000 fb3a 	bl	10001e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
100017aa:	2200      	movs	r2, #0
100017ac:	2101      	movs	r1, #1
100017ae:	2068      	movs	r0, #104	@ 0x68
100017b0:	f000 fb19 	bl	10001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
100017b4:	2068      	movs	r0, #104	@ 0x68
100017b6:	f000 fb32 	bl	10001e1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
100017ba:	bf00      	nop
100017bc:	3708      	adds	r7, #8
100017be:	46bd      	mov	sp, r7
100017c0:	bd80      	pop	{r7, pc}
100017c2:	bf00      	nop
100017c4:	4c001000 	.word	0x4c001000

100017c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
100017c8:	b580      	push	{r7, lr}
100017ca:	b0de      	sub	sp, #376	@ 0x178
100017cc:	af00      	add	r7, sp, #0
100017ce:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100017d2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
100017d6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100017d8:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
100017dc:	2200      	movs	r2, #0
100017de:	601a      	str	r2, [r3, #0]
100017e0:	605a      	str	r2, [r3, #4]
100017e2:	609a      	str	r2, [r3, #8]
100017e4:	60da      	str	r2, [r3, #12]
100017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100017e8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100017ec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
100017f0:	4618      	mov	r0, r3
100017f2:	f44f 73ac 	mov.w	r3, #344	@ 0x158
100017f6:	461a      	mov	r2, r3
100017f8:	2100      	movs	r1, #0
100017fa:	f008 f91b 	bl	10009a34 <memset>
  if(hspi->Instance==SPI5)
100017fe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10001802:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
10001806:	681b      	ldr	r3, [r3, #0]
10001808:	681b      	ldr	r3, [r3, #0]
1000180a:	4a32      	ldr	r2, [pc, #200]	@ (100018d4 <HAL_SPI_MspInit+0x10c>)
1000180c:	4293      	cmp	r3, r2
1000180e:	d15b      	bne.n	100018c8 <HAL_SPI_MspInit+0x100>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10001810:	4b31      	ldr	r3, [pc, #196]	@ (100018d8 <HAL_SPI_MspInit+0x110>)
10001812:	681b      	ldr	r3, [r3, #0]
10001814:	f003 0307 	and.w	r3, r3, #7
10001818:	2b04      	cmp	r3, #4
1000181a:	d11a      	bne.n	10001852 <HAL_SPI_MspInit+0x8a>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI45;
1000181c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10001820:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
10001824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10001828:	f04f 0300 	mov.w	r3, #0
1000182c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PCLK2;
10001830:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10001834:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
10001838:	2200      	movs	r2, #0
1000183a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
1000183e:	f107 0308 	add.w	r3, r7, #8
10001842:	4618      	mov	r0, r3
10001844:	f002 fd0c 	bl	10004260 <HAL_RCCEx_PeriphCLKConfig>
10001848:	4603      	mov	r3, r0
1000184a:	2b00      	cmp	r3, #0
1000184c:	d001      	beq.n	10001852 <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
1000184e:	f7ff fadd 	bl	10000e0c <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
10001852:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
1000185a:	f8c3 2a88 	str.w	r2, [r3, #2696]	@ 0xa88

    __HAL_RCC_GPIOH_CLK_ENABLE();
1000185e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001862:	2280      	movs	r2, #128	@ 0x80
10001864:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
10001868:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000186c:	2220      	movs	r2, #32
1000186e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    /**SPI5 GPIO Configuration
    PH6     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
10001872:	2340      	movs	r3, #64	@ 0x40
10001874:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10001878:	2302      	movs	r3, #2
1000187a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000187e:	2300      	movs	r3, #0
10001880:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
10001884:	2301      	movs	r3, #1
10001886:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
1000188a:	2305      	movs	r3, #5
1000188c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
10001890:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
10001894:	4619      	mov	r1, r3
10001896:	4811      	ldr	r0, [pc, #68]	@ (100018dc <HAL_SPI_MspInit+0x114>)
10001898:	f000 fadc 	bl	10001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
1000189c:	f44f 7340 	mov.w	r3, #768	@ 0x300
100018a0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100018a4:	2302      	movs	r3, #2
100018a6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100018aa:	2300      	movs	r3, #0
100018ac:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
100018b0:	2301      	movs	r3, #1
100018b2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
100018b6:	2305      	movs	r3, #5
100018b8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
100018bc:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
100018c0:	4619      	mov	r1, r3
100018c2:	4807      	ldr	r0, [pc, #28]	@ (100018e0 <HAL_SPI_MspInit+0x118>)
100018c4:	f000 fac6 	bl	10001e54 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
100018c8:	bf00      	nop
100018ca:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
100018ce:	46bd      	mov	sp, r7
100018d0:	bd80      	pop	{r7, pc}
100018d2:	bf00      	nop
100018d4:	44009000 	.word	0x44009000
100018d8:	50020000 	.word	0x50020000
100018dc:	50009000 	.word	0x50009000
100018e0:	50007000 	.word	0x50007000

100018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100018e4:	b480      	push	{r7}
100018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100018e8:	bf00      	nop
100018ea:	e7fd      	b.n	100018e8 <NMI_Handler+0x4>

100018ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100018ec:	b480      	push	{r7}
100018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100018f0:	bf00      	nop
100018f2:	e7fd      	b.n	100018f0 <HardFault_Handler+0x4>

100018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100018f4:	b480      	push	{r7}
100018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100018f8:	bf00      	nop
100018fa:	e7fd      	b.n	100018f8 <MemManage_Handler+0x4>

100018fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100018fc:	b480      	push	{r7}
100018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10001900:	bf00      	nop
10001902:	e7fd      	b.n	10001900 <BusFault_Handler+0x4>

10001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10001904:	b480      	push	{r7}
10001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10001908:	bf00      	nop
1000190a:	e7fd      	b.n	10001908 <UsageFault_Handler+0x4>

1000190c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
1000190c:	b480      	push	{r7}
1000190e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10001910:	bf00      	nop
10001912:	46bd      	mov	sp, r7
10001914:	f85d 7b04 	ldr.w	r7, [sp], #4
10001918:	4770      	bx	lr

1000191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
1000191a:	b480      	push	{r7}
1000191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
1000191e:	bf00      	nop
10001920:	46bd      	mov	sp, r7
10001922:	f85d 7b04 	ldr.w	r7, [sp], #4
10001926:	4770      	bx	lr

10001928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10001928:	b480      	push	{r7}
1000192a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1000192c:	bf00      	nop
1000192e:	46bd      	mov	sp, r7
10001930:	f85d 7b04 	ldr.w	r7, [sp], #4
10001934:	4770      	bx	lr

10001936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10001936:	b580      	push	{r7, lr}
10001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
1000193a:	f000 f935 	bl	10001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1000193e:	bf00      	nop
10001940:	bd80      	pop	{r7, pc}
	...

10001944 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
10001944:	b580      	push	{r7, lr}
10001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10001948:	4802      	ldr	r0, [pc, #8]	@ (10001954 <IPCC_RX1_IRQHandler+0x10>)
1000194a:	f000 fd8f 	bl	1000246c <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
1000194e:	bf00      	nop
10001950:	bd80      	pop	{r7, pc}
10001952:	bf00      	nop
10001954:	100201d0 	.word	0x100201d0

10001958 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
10001958:	b580      	push	{r7, lr}
1000195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
1000195c:	4802      	ldr	r0, [pc, #8]	@ (10001968 <IPCC_TX1_IRQHandler+0x10>)
1000195e:	f000 fd37 	bl	100023d0 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
10001962:	bf00      	nop
10001964:	bd80      	pop	{r7, pc}
10001966:	bf00      	nop
10001968:	100201d0 	.word	0x100201d0

1000196c <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
1000196c:	b580      	push	{r7, lr}
1000196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10001970:	f002 f816 	bl	100039a0 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10001974:	bf00      	nop
10001976:	bd80      	pop	{r7, pc}

10001978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
10001978:	b480      	push	{r7}
1000197a:	af00      	add	r7, sp, #0
  return 1;
1000197c:	2301      	movs	r3, #1
}
1000197e:	4618      	mov	r0, r3
10001980:	46bd      	mov	sp, r7
10001982:	f85d 7b04 	ldr.w	r7, [sp], #4
10001986:	4770      	bx	lr

10001988 <_kill>:

int _kill(int pid, int sig)
{
10001988:	b580      	push	{r7, lr}
1000198a:	b082      	sub	sp, #8
1000198c:	af00      	add	r7, sp, #0
1000198e:	6078      	str	r0, [r7, #4]
10001990:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
10001992:	f008 f8df 	bl	10009b54 <__errno>
10001996:	4603      	mov	r3, r0
10001998:	2216      	movs	r2, #22
1000199a:	601a      	str	r2, [r3, #0]
  return -1;
1000199c:	f04f 33ff 	mov.w	r3, #4294967295
}
100019a0:	4618      	mov	r0, r3
100019a2:	3708      	adds	r7, #8
100019a4:	46bd      	mov	sp, r7
100019a6:	bd80      	pop	{r7, pc}

100019a8 <_exit>:

void _exit (int status)
{
100019a8:	b580      	push	{r7, lr}
100019aa:	b082      	sub	sp, #8
100019ac:	af00      	add	r7, sp, #0
100019ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
100019b0:	f04f 31ff 	mov.w	r1, #4294967295
100019b4:	6878      	ldr	r0, [r7, #4]
100019b6:	f7ff ffe7 	bl	10001988 <_kill>
  while (1) {}    /* Make sure we hang here */
100019ba:	bf00      	nop
100019bc:	e7fd      	b.n	100019ba <_exit+0x12>

100019be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100019be:	b580      	push	{r7, lr}
100019c0:	b086      	sub	sp, #24
100019c2:	af00      	add	r7, sp, #0
100019c4:	60f8      	str	r0, [r7, #12]
100019c6:	60b9      	str	r1, [r7, #8]
100019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100019ca:	2300      	movs	r3, #0
100019cc:	617b      	str	r3, [r7, #20]
100019ce:	e00a      	b.n	100019e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
100019d0:	f3af 8000 	nop.w
100019d4:	4601      	mov	r1, r0
100019d6:	68bb      	ldr	r3, [r7, #8]
100019d8:	1c5a      	adds	r2, r3, #1
100019da:	60ba      	str	r2, [r7, #8]
100019dc:	b2ca      	uxtb	r2, r1
100019de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100019e0:	697b      	ldr	r3, [r7, #20]
100019e2:	3301      	adds	r3, #1
100019e4:	617b      	str	r3, [r7, #20]
100019e6:	697a      	ldr	r2, [r7, #20]
100019e8:	687b      	ldr	r3, [r7, #4]
100019ea:	429a      	cmp	r2, r3
100019ec:	dbf0      	blt.n	100019d0 <_read+0x12>
  }

  return len;
100019ee:	687b      	ldr	r3, [r7, #4]
}
100019f0:	4618      	mov	r0, r3
100019f2:	3718      	adds	r7, #24
100019f4:	46bd      	mov	sp, r7
100019f6:	bd80      	pop	{r7, pc}

100019f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100019f8:	b580      	push	{r7, lr}
100019fa:	b086      	sub	sp, #24
100019fc:	af00      	add	r7, sp, #0
100019fe:	60f8      	str	r0, [r7, #12]
10001a00:	60b9      	str	r1, [r7, #8]
10001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001a04:	2300      	movs	r3, #0
10001a06:	617b      	str	r3, [r7, #20]
10001a08:	e009      	b.n	10001a1e <_write+0x26>
  {
    __io_putchar(*ptr++);
10001a0a:	68bb      	ldr	r3, [r7, #8]
10001a0c:	1c5a      	adds	r2, r3, #1
10001a0e:	60ba      	str	r2, [r7, #8]
10001a10:	781b      	ldrb	r3, [r3, #0]
10001a12:	4618      	mov	r0, r3
10001a14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001a18:	697b      	ldr	r3, [r7, #20]
10001a1a:	3301      	adds	r3, #1
10001a1c:	617b      	str	r3, [r7, #20]
10001a1e:	697a      	ldr	r2, [r7, #20]
10001a20:	687b      	ldr	r3, [r7, #4]
10001a22:	429a      	cmp	r2, r3
10001a24:	dbf1      	blt.n	10001a0a <_write+0x12>
  }
  return len;
10001a26:	687b      	ldr	r3, [r7, #4]
}
10001a28:	4618      	mov	r0, r3
10001a2a:	3718      	adds	r7, #24
10001a2c:	46bd      	mov	sp, r7
10001a2e:	bd80      	pop	{r7, pc}

10001a30 <_close>:

int _close(int file)
{
10001a30:	b480      	push	{r7}
10001a32:	b083      	sub	sp, #12
10001a34:	af00      	add	r7, sp, #0
10001a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10001a38:	f04f 33ff 	mov.w	r3, #4294967295
}
10001a3c:	4618      	mov	r0, r3
10001a3e:	370c      	adds	r7, #12
10001a40:	46bd      	mov	sp, r7
10001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a46:	4770      	bx	lr

10001a48 <_fstat>:


int _fstat(int file, struct stat *st)
{
10001a48:	b480      	push	{r7}
10001a4a:	b083      	sub	sp, #12
10001a4c:	af00      	add	r7, sp, #0
10001a4e:	6078      	str	r0, [r7, #4]
10001a50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10001a52:	683b      	ldr	r3, [r7, #0]
10001a54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
10001a58:	605a      	str	r2, [r3, #4]
  return 0;
10001a5a:	2300      	movs	r3, #0
}
10001a5c:	4618      	mov	r0, r3
10001a5e:	370c      	adds	r7, #12
10001a60:	46bd      	mov	sp, r7
10001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a66:	4770      	bx	lr

10001a68 <_isatty>:

int _isatty(int file)
{
10001a68:	b480      	push	{r7}
10001a6a:	b083      	sub	sp, #12
10001a6c:	af00      	add	r7, sp, #0
10001a6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10001a70:	2301      	movs	r3, #1
}
10001a72:	4618      	mov	r0, r3
10001a74:	370c      	adds	r7, #12
10001a76:	46bd      	mov	sp, r7
10001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a7c:	4770      	bx	lr

10001a7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10001a7e:	b480      	push	{r7}
10001a80:	b085      	sub	sp, #20
10001a82:	af00      	add	r7, sp, #0
10001a84:	60f8      	str	r0, [r7, #12]
10001a86:	60b9      	str	r1, [r7, #8]
10001a88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10001a8a:	2300      	movs	r3, #0
}
10001a8c:	4618      	mov	r0, r3
10001a8e:	3714      	adds	r7, #20
10001a90:	46bd      	mov	sp, r7
10001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a96:	4770      	bx	lr

10001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10001a98:	b580      	push	{r7, lr}
10001a9a:	b086      	sub	sp, #24
10001a9c:	af00      	add	r7, sp, #0
10001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10001aa0:	4a14      	ldr	r2, [pc, #80]	@ (10001af4 <_sbrk+0x5c>)
10001aa2:	4b15      	ldr	r3, [pc, #84]	@ (10001af8 <_sbrk+0x60>)
10001aa4:	1ad3      	subs	r3, r2, r3
10001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10001aa8:	697b      	ldr	r3, [r7, #20]
10001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10001aac:	4b13      	ldr	r3, [pc, #76]	@ (10001afc <_sbrk+0x64>)
10001aae:	681b      	ldr	r3, [r3, #0]
10001ab0:	2b00      	cmp	r3, #0
10001ab2:	d102      	bne.n	10001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10001ab4:	4b11      	ldr	r3, [pc, #68]	@ (10001afc <_sbrk+0x64>)
10001ab6:	4a12      	ldr	r2, [pc, #72]	@ (10001b00 <_sbrk+0x68>)
10001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10001aba:	4b10      	ldr	r3, [pc, #64]	@ (10001afc <_sbrk+0x64>)
10001abc:	681a      	ldr	r2, [r3, #0]
10001abe:	687b      	ldr	r3, [r7, #4]
10001ac0:	4413      	add	r3, r2
10001ac2:	693a      	ldr	r2, [r7, #16]
10001ac4:	429a      	cmp	r2, r3
10001ac6:	d207      	bcs.n	10001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
10001ac8:	f008 f844 	bl	10009b54 <__errno>
10001acc:	4603      	mov	r3, r0
10001ace:	220c      	movs	r2, #12
10001ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10001ad2:	f04f 33ff 	mov.w	r3, #4294967295
10001ad6:	e009      	b.n	10001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10001ad8:	4b08      	ldr	r3, [pc, #32]	@ (10001afc <_sbrk+0x64>)
10001ada:	681b      	ldr	r3, [r3, #0]
10001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10001ade:	4b07      	ldr	r3, [pc, #28]	@ (10001afc <_sbrk+0x64>)
10001ae0:	681a      	ldr	r2, [r3, #0]
10001ae2:	687b      	ldr	r3, [r7, #4]
10001ae4:	4413      	add	r3, r2
10001ae6:	4a05      	ldr	r2, [pc, #20]	@ (10001afc <_sbrk+0x64>)
10001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10001aea:	68fb      	ldr	r3, [r7, #12]
}
10001aec:	4618      	mov	r0, r3
10001aee:	3718      	adds	r7, #24
10001af0:	46bd      	mov	sp, r7
10001af2:	bd80      	pop	{r7, pc}
10001af4:	10040000 	.word	0x10040000
10001af8:	00000400 	.word	0x00000400
10001afc:	10020440 	.word	0x10020440
10001b00:	10020668 	.word	0x10020668

10001b04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10001b04:	e7fe      	b.n	10001b04 <ADC1_IRQHandler>
	...

10001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10001b08:	b580      	push	{r7, lr}
10001b0a:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10001b0c:	2003      	movs	r0, #3
10001b0e:	f000 f95f 	bl	10001dd0 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001b12:	f001 ff04 	bl	1000391e <HAL_RCC_GetSystemCoreClockFreq>
10001b16:	4603      	mov	r3, r0
10001b18:	4a07      	ldr	r2, [pc, #28]	@ (10001b38 <HAL_Init+0x30>)
10001b1a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10001b1c:	2001      	movs	r0, #1
10001b1e:	f000 f80d 	bl	10001b3c <HAL_InitTick>
10001b22:	4603      	mov	r3, r0
10001b24:	2b00      	cmp	r3, #0
10001b26:	d001      	beq.n	10001b2c <HAL_Init+0x24>
  {
    return HAL_ERROR;
10001b28:	2301      	movs	r3, #1
10001b2a:	e002      	b.n	10001b32 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10001b2c:	f7ff fdf0 	bl	10001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10001b30:	2300      	movs	r3, #0
}
10001b32:	4618      	mov	r0, r3
10001b34:	bd80      	pop	{r7, pc}
10001b36:	bf00      	nop
10001b38:	10020000 	.word	0x10020000

10001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10001b3c:	b580      	push	{r7, lr}
10001b3e:	b082      	sub	sp, #8
10001b40:	af00      	add	r7, sp, #0
10001b42:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10001b44:	4b15      	ldr	r3, [pc, #84]	@ (10001b9c <HAL_InitTick+0x60>)
10001b46:	781b      	ldrb	r3, [r3, #0]
10001b48:	2b00      	cmp	r3, #0
10001b4a:	d101      	bne.n	10001b50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10001b4c:	2301      	movs	r3, #1
10001b4e:	e021      	b.n	10001b94 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10001b50:	4b13      	ldr	r3, [pc, #76]	@ (10001ba0 <HAL_InitTick+0x64>)
10001b52:	681a      	ldr	r2, [r3, #0]
10001b54:	4b11      	ldr	r3, [pc, #68]	@ (10001b9c <HAL_InitTick+0x60>)
10001b56:	781b      	ldrb	r3, [r3, #0]
10001b58:	4619      	mov	r1, r3
10001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
10001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
10001b62:	fbb2 f3f3 	udiv	r3, r2, r3
10001b66:	4618      	mov	r0, r3
10001b68:	f000 f967 	bl	10001e3a <HAL_SYSTICK_Config>
10001b6c:	4603      	mov	r3, r0
10001b6e:	2b00      	cmp	r3, #0
10001b70:	d001      	beq.n	10001b76 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10001b72:	2301      	movs	r3, #1
10001b74:	e00e      	b.n	10001b94 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10001b76:	687b      	ldr	r3, [r7, #4]
10001b78:	2b0f      	cmp	r3, #15
10001b7a:	d80a      	bhi.n	10001b92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10001b7c:	2200      	movs	r2, #0
10001b7e:	6879      	ldr	r1, [r7, #4]
10001b80:	f04f 30ff 	mov.w	r0, #4294967295
10001b84:	f000 f92f 	bl	10001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10001b88:	4a06      	ldr	r2, [pc, #24]	@ (10001ba4 <HAL_InitTick+0x68>)
10001b8a:	687b      	ldr	r3, [r7, #4]
10001b8c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10001b8e:	2300      	movs	r3, #0
10001b90:	e000      	b.n	10001b94 <HAL_InitTick+0x58>
    return HAL_ERROR;
10001b92:	2301      	movs	r3, #1
}
10001b94:	4618      	mov	r0, r3
10001b96:	3708      	adds	r7, #8
10001b98:	46bd      	mov	sp, r7
10001b9a:	bd80      	pop	{r7, pc}
10001b9c:	10020010 	.word	0x10020010
10001ba0:	10020000 	.word	0x10020000
10001ba4:	1002000c 	.word	0x1002000c

10001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10001ba8:	b480      	push	{r7}
10001baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10001bac:	4b06      	ldr	r3, [pc, #24]	@ (10001bc8 <HAL_IncTick+0x20>)
10001bae:	781b      	ldrb	r3, [r3, #0]
10001bb0:	461a      	mov	r2, r3
10001bb2:	4b06      	ldr	r3, [pc, #24]	@ (10001bcc <HAL_IncTick+0x24>)
10001bb4:	681b      	ldr	r3, [r3, #0]
10001bb6:	4413      	add	r3, r2
10001bb8:	4a04      	ldr	r2, [pc, #16]	@ (10001bcc <HAL_IncTick+0x24>)
10001bba:	6013      	str	r3, [r2, #0]
}
10001bbc:	bf00      	nop
10001bbe:	46bd      	mov	sp, r7
10001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bc4:	4770      	bx	lr
10001bc6:	bf00      	nop
10001bc8:	10020010 	.word	0x10020010
10001bcc:	10020444 	.word	0x10020444

10001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10001bd0:	b480      	push	{r7}
10001bd2:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10001bd4:	4b03      	ldr	r3, [pc, #12]	@ (10001be4 <HAL_GetTick+0x14>)
10001bd6:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10001bd8:	4618      	mov	r0, r3
10001bda:	46bd      	mov	sp, r7
10001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
10001be0:	4770      	bx	lr
10001be2:	bf00      	nop
10001be4:	10020444 	.word	0x10020444

10001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10001be8:	b580      	push	{r7, lr}
10001bea:	b084      	sub	sp, #16
10001bec:	af00      	add	r7, sp, #0
10001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10001bf0:	f7ff ffee 	bl	10001bd0 <HAL_GetTick>
10001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10001bf6:	687b      	ldr	r3, [r7, #4]
10001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10001bfa:	68fb      	ldr	r3, [r7, #12]
10001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
10001c00:	d005      	beq.n	10001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10001c02:	4b0a      	ldr	r3, [pc, #40]	@ (10001c2c <HAL_Delay+0x44>)
10001c04:	781b      	ldrb	r3, [r3, #0]
10001c06:	461a      	mov	r2, r3
10001c08:	68fb      	ldr	r3, [r7, #12]
10001c0a:	4413      	add	r3, r2
10001c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10001c0e:	bf00      	nop
10001c10:	f7ff ffde 	bl	10001bd0 <HAL_GetTick>
10001c14:	4602      	mov	r2, r0
10001c16:	68bb      	ldr	r3, [r7, #8]
10001c18:	1ad3      	subs	r3, r2, r3
10001c1a:	68fa      	ldr	r2, [r7, #12]
10001c1c:	429a      	cmp	r2, r3
10001c1e:	d8f7      	bhi.n	10001c10 <HAL_Delay+0x28>
  {
  }
}
10001c20:	bf00      	nop
10001c22:	bf00      	nop
10001c24:	3710      	adds	r7, #16
10001c26:	46bd      	mov	sp, r7
10001c28:	bd80      	pop	{r7, pc}
10001c2a:	bf00      	nop
10001c2c:	10020010 	.word	0x10020010

10001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10001c30:	b480      	push	{r7}
10001c32:	b085      	sub	sp, #20
10001c34:	af00      	add	r7, sp, #0
10001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10001c38:	687b      	ldr	r3, [r7, #4]
10001c3a:	f003 0307 	and.w	r3, r3, #7
10001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10001c40:	4b0c      	ldr	r3, [pc, #48]	@ (10001c74 <__NVIC_SetPriorityGrouping+0x44>)
10001c42:	68db      	ldr	r3, [r3, #12]
10001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10001c46:	68ba      	ldr	r2, [r7, #8]
10001c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10001c4c:	4013      	ands	r3, r2
10001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10001c50:	68fb      	ldr	r3, [r7, #12]
10001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10001c54:	68bb      	ldr	r3, [r7, #8]
10001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10001c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10001c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
10001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10001c62:	4a04      	ldr	r2, [pc, #16]	@ (10001c74 <__NVIC_SetPriorityGrouping+0x44>)
10001c64:	68bb      	ldr	r3, [r7, #8]
10001c66:	60d3      	str	r3, [r2, #12]
}
10001c68:	bf00      	nop
10001c6a:	3714      	adds	r7, #20
10001c6c:	46bd      	mov	sp, r7
10001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c72:	4770      	bx	lr
10001c74:	e000ed00 	.word	0xe000ed00

10001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10001c78:	b480      	push	{r7}
10001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10001c7c:	4b04      	ldr	r3, [pc, #16]	@ (10001c90 <__NVIC_GetPriorityGrouping+0x18>)
10001c7e:	68db      	ldr	r3, [r3, #12]
10001c80:	0a1b      	lsrs	r3, r3, #8
10001c82:	f003 0307 	and.w	r3, r3, #7
}
10001c86:	4618      	mov	r0, r3
10001c88:	46bd      	mov	sp, r7
10001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c8e:	4770      	bx	lr
10001c90:	e000ed00 	.word	0xe000ed00

10001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001c94:	b480      	push	{r7}
10001c96:	b083      	sub	sp, #12
10001c98:	af00      	add	r7, sp, #0
10001c9a:	4603      	mov	r3, r0
10001c9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10001c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001ca2:	2b00      	cmp	r3, #0
10001ca4:	db0b      	blt.n	10001cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10001ca6:	88fb      	ldrh	r3, [r7, #6]
10001ca8:	f003 021f 	and.w	r2, r3, #31
10001cac:	4907      	ldr	r1, [pc, #28]	@ (10001ccc <__NVIC_EnableIRQ+0x38>)
10001cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001cb2:	095b      	lsrs	r3, r3, #5
10001cb4:	2001      	movs	r0, #1
10001cb6:	fa00 f202 	lsl.w	r2, r0, r2
10001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10001cbe:	bf00      	nop
10001cc0:	370c      	adds	r7, #12
10001cc2:	46bd      	mov	sp, r7
10001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
10001cc8:	4770      	bx	lr
10001cca:	bf00      	nop
10001ccc:	e000e100 	.word	0xe000e100

10001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10001cd0:	b480      	push	{r7}
10001cd2:	b083      	sub	sp, #12
10001cd4:	af00      	add	r7, sp, #0
10001cd6:	4603      	mov	r3, r0
10001cd8:	6039      	str	r1, [r7, #0]
10001cda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10001cdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001ce0:	2b00      	cmp	r3, #0
10001ce2:	db0a      	blt.n	10001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10001ce4:	683b      	ldr	r3, [r7, #0]
10001ce6:	b2da      	uxtb	r2, r3
10001ce8:	490c      	ldr	r1, [pc, #48]	@ (10001d1c <__NVIC_SetPriority+0x4c>)
10001cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001cee:	0112      	lsls	r2, r2, #4
10001cf0:	b2d2      	uxtb	r2, r2
10001cf2:	440b      	add	r3, r1
10001cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10001cf8:	e00a      	b.n	10001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10001cfa:	683b      	ldr	r3, [r7, #0]
10001cfc:	b2da      	uxtb	r2, r3
10001cfe:	4908      	ldr	r1, [pc, #32]	@ (10001d20 <__NVIC_SetPriority+0x50>)
10001d00:	88fb      	ldrh	r3, [r7, #6]
10001d02:	f003 030f 	and.w	r3, r3, #15
10001d06:	3b04      	subs	r3, #4
10001d08:	0112      	lsls	r2, r2, #4
10001d0a:	b2d2      	uxtb	r2, r2
10001d0c:	440b      	add	r3, r1
10001d0e:	761a      	strb	r2, [r3, #24]
}
10001d10:	bf00      	nop
10001d12:	370c      	adds	r7, #12
10001d14:	46bd      	mov	sp, r7
10001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d1a:	4770      	bx	lr
10001d1c:	e000e100 	.word	0xe000e100
10001d20:	e000ed00 	.word	0xe000ed00

10001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001d24:	b480      	push	{r7}
10001d26:	b089      	sub	sp, #36	@ 0x24
10001d28:	af00      	add	r7, sp, #0
10001d2a:	60f8      	str	r0, [r7, #12]
10001d2c:	60b9      	str	r1, [r7, #8]
10001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10001d30:	68fb      	ldr	r3, [r7, #12]
10001d32:	f003 0307 	and.w	r3, r3, #7
10001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10001d38:	69fb      	ldr	r3, [r7, #28]
10001d3a:	f1c3 0307 	rsb	r3, r3, #7
10001d3e:	2b04      	cmp	r3, #4
10001d40:	bf28      	it	cs
10001d42:	2304      	movcs	r3, #4
10001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10001d46:	69fb      	ldr	r3, [r7, #28]
10001d48:	3304      	adds	r3, #4
10001d4a:	2b06      	cmp	r3, #6
10001d4c:	d902      	bls.n	10001d54 <NVIC_EncodePriority+0x30>
10001d4e:	69fb      	ldr	r3, [r7, #28]
10001d50:	3b03      	subs	r3, #3
10001d52:	e000      	b.n	10001d56 <NVIC_EncodePriority+0x32>
10001d54:	2300      	movs	r3, #0
10001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001d58:	f04f 32ff 	mov.w	r2, #4294967295
10001d5c:	69bb      	ldr	r3, [r7, #24]
10001d5e:	fa02 f303 	lsl.w	r3, r2, r3
10001d62:	43da      	mvns	r2, r3
10001d64:	68bb      	ldr	r3, [r7, #8]
10001d66:	401a      	ands	r2, r3
10001d68:	697b      	ldr	r3, [r7, #20]
10001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10001d6c:	f04f 31ff 	mov.w	r1, #4294967295
10001d70:	697b      	ldr	r3, [r7, #20]
10001d72:	fa01 f303 	lsl.w	r3, r1, r3
10001d76:	43d9      	mvns	r1, r3
10001d78:	687b      	ldr	r3, [r7, #4]
10001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001d7c:	4313      	orrs	r3, r2
         );
}
10001d7e:	4618      	mov	r0, r3
10001d80:	3724      	adds	r7, #36	@ 0x24
10001d82:	46bd      	mov	sp, r7
10001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d88:	4770      	bx	lr
	...

10001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10001d8c:	b580      	push	{r7, lr}
10001d8e:	b082      	sub	sp, #8
10001d90:	af00      	add	r7, sp, #0
10001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10001d94:	687b      	ldr	r3, [r7, #4]
10001d96:	3b01      	subs	r3, #1
10001d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10001d9c:	d301      	bcc.n	10001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10001d9e:	2301      	movs	r3, #1
10001da0:	e00f      	b.n	10001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10001da2:	4a0a      	ldr	r2, [pc, #40]	@ (10001dcc <SysTick_Config+0x40>)
10001da4:	687b      	ldr	r3, [r7, #4]
10001da6:	3b01      	subs	r3, #1
10001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10001daa:	210f      	movs	r1, #15
10001dac:	f04f 30ff 	mov.w	r0, #4294967295
10001db0:	f7ff ff8e 	bl	10001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10001db4:	4b05      	ldr	r3, [pc, #20]	@ (10001dcc <SysTick_Config+0x40>)
10001db6:	2200      	movs	r2, #0
10001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10001dba:	4b04      	ldr	r3, [pc, #16]	@ (10001dcc <SysTick_Config+0x40>)
10001dbc:	2207      	movs	r2, #7
10001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10001dc0:	2300      	movs	r3, #0
}
10001dc2:	4618      	mov	r0, r3
10001dc4:	3708      	adds	r7, #8
10001dc6:	46bd      	mov	sp, r7
10001dc8:	bd80      	pop	{r7, pc}
10001dca:	bf00      	nop
10001dcc:	e000e010 	.word	0xe000e010

10001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10001dd0:	b580      	push	{r7, lr}
10001dd2:	b082      	sub	sp, #8
10001dd4:	af00      	add	r7, sp, #0
10001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10001dd8:	6878      	ldr	r0, [r7, #4]
10001dda:	f7ff ff29 	bl	10001c30 <__NVIC_SetPriorityGrouping>
}
10001dde:	bf00      	nop
10001de0:	3708      	adds	r7, #8
10001de2:	46bd      	mov	sp, r7
10001de4:	bd80      	pop	{r7, pc}

10001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001de6:	b580      	push	{r7, lr}
10001de8:	b086      	sub	sp, #24
10001dea:	af00      	add	r7, sp, #0
10001dec:	4603      	mov	r3, r0
10001dee:	60b9      	str	r1, [r7, #8]
10001df0:	607a      	str	r2, [r7, #4]
10001df2:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10001df4:	2300      	movs	r3, #0
10001df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10001df8:	f7ff ff3e 	bl	10001c78 <__NVIC_GetPriorityGrouping>
10001dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10001dfe:	687a      	ldr	r2, [r7, #4]
10001e00:	68b9      	ldr	r1, [r7, #8]
10001e02:	6978      	ldr	r0, [r7, #20]
10001e04:	f7ff ff8e 	bl	10001d24 <NVIC_EncodePriority>
10001e08:	4602      	mov	r2, r0
10001e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10001e0e:	4611      	mov	r1, r2
10001e10:	4618      	mov	r0, r3
10001e12:	f7ff ff5d 	bl	10001cd0 <__NVIC_SetPriority>
}
10001e16:	bf00      	nop
10001e18:	3718      	adds	r7, #24
10001e1a:	46bd      	mov	sp, r7
10001e1c:	bd80      	pop	{r7, pc}

10001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001e1e:	b580      	push	{r7, lr}
10001e20:	b082      	sub	sp, #8
10001e22:	af00      	add	r7, sp, #0
10001e24:	4603      	mov	r3, r0
10001e26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10001e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001e2c:	4618      	mov	r0, r3
10001e2e:	f7ff ff31 	bl	10001c94 <__NVIC_EnableIRQ>
}
10001e32:	bf00      	nop
10001e34:	3708      	adds	r7, #8
10001e36:	46bd      	mov	sp, r7
10001e38:	bd80      	pop	{r7, pc}

10001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10001e3a:	b580      	push	{r7, lr}
10001e3c:	b082      	sub	sp, #8
10001e3e:	af00      	add	r7, sp, #0
10001e40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10001e42:	6878      	ldr	r0, [r7, #4]
10001e44:	f7ff ffa2 	bl	10001d8c <SysTick_Config>
10001e48:	4603      	mov	r3, r0
}
10001e4a:	4618      	mov	r0, r3
10001e4c:	3708      	adds	r7, #8
10001e4e:	46bd      	mov	sp, r7
10001e50:	bd80      	pop	{r7, pc}
	...

10001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10001e54:	b480      	push	{r7}
10001e56:	b089      	sub	sp, #36	@ 0x24
10001e58:	af00      	add	r7, sp, #0
10001e5a:	6078      	str	r0, [r7, #4]
10001e5c:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10001e5e:	4b8a      	ldr	r3, [pc, #552]	@ (10002088 <HAL_GPIO_Init+0x234>)
10001e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10001e62:	2300      	movs	r3, #0
10001e64:	61fb      	str	r3, [r7, #28]
10001e66:	e191      	b.n	1000218c <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10001e68:	2201      	movs	r2, #1
10001e6a:	69fb      	ldr	r3, [r7, #28]
10001e6c:	fa02 f303 	lsl.w	r3, r2, r3
10001e70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10001e72:	683b      	ldr	r3, [r7, #0]
10001e74:	681b      	ldr	r3, [r3, #0]
10001e76:	693a      	ldr	r2, [r7, #16]
10001e78:	4013      	ands	r3, r2
10001e7a:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10001e7c:	68fa      	ldr	r2, [r7, #12]
10001e7e:	693b      	ldr	r3, [r7, #16]
10001e80:	429a      	cmp	r2, r3
10001e82:	f040 8180 	bne.w	10002186 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001e86:	683b      	ldr	r3, [r7, #0]
10001e88:	685b      	ldr	r3, [r3, #4]
10001e8a:	2b02      	cmp	r3, #2
10001e8c:	d003      	beq.n	10001e96 <HAL_GPIO_Init+0x42>
10001e8e:	683b      	ldr	r3, [r7, #0]
10001e90:	685b      	ldr	r3, [r3, #4]
10001e92:	2b12      	cmp	r3, #18
10001e94:	d123      	bne.n	10001ede <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10001e96:	69fb      	ldr	r3, [r7, #28]
10001e98:	08da      	lsrs	r2, r3, #3
10001e9a:	687b      	ldr	r3, [r7, #4]
10001e9c:	3208      	adds	r2, #8
10001e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10001ea4:	69fb      	ldr	r3, [r7, #28]
10001ea6:	f003 0307 	and.w	r3, r3, #7
10001eaa:	009b      	lsls	r3, r3, #2
10001eac:	220f      	movs	r2, #15
10001eae:	fa02 f303 	lsl.w	r3, r2, r3
10001eb2:	43db      	mvns	r3, r3
10001eb4:	69ba      	ldr	r2, [r7, #24]
10001eb6:	4013      	ands	r3, r2
10001eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10001eba:	683b      	ldr	r3, [r7, #0]
10001ebc:	691a      	ldr	r2, [r3, #16]
10001ebe:	69fb      	ldr	r3, [r7, #28]
10001ec0:	f003 0307 	and.w	r3, r3, #7
10001ec4:	009b      	lsls	r3, r3, #2
10001ec6:	fa02 f303 	lsl.w	r3, r2, r3
10001eca:	69ba      	ldr	r2, [r7, #24]
10001ecc:	4313      	orrs	r3, r2
10001ece:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10001ed0:	69fb      	ldr	r3, [r7, #28]
10001ed2:	08da      	lsrs	r2, r3, #3
10001ed4:	687b      	ldr	r3, [r7, #4]
10001ed6:	3208      	adds	r2, #8
10001ed8:	69b9      	ldr	r1, [r7, #24]
10001eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10001ede:	687b      	ldr	r3, [r7, #4]
10001ee0:	681b      	ldr	r3, [r3, #0]
10001ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10001ee4:	69fb      	ldr	r3, [r7, #28]
10001ee6:	005b      	lsls	r3, r3, #1
10001ee8:	2203      	movs	r2, #3
10001eea:	fa02 f303 	lsl.w	r3, r2, r3
10001eee:	43db      	mvns	r3, r3
10001ef0:	69ba      	ldr	r2, [r7, #24]
10001ef2:	4013      	ands	r3, r2
10001ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10001ef6:	683b      	ldr	r3, [r7, #0]
10001ef8:	685b      	ldr	r3, [r3, #4]
10001efa:	f003 0203 	and.w	r2, r3, #3
10001efe:	69fb      	ldr	r3, [r7, #28]
10001f00:	005b      	lsls	r3, r3, #1
10001f02:	fa02 f303 	lsl.w	r3, r2, r3
10001f06:	69ba      	ldr	r2, [r7, #24]
10001f08:	4313      	orrs	r3, r2
10001f0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10001f0c:	687b      	ldr	r3, [r7, #4]
10001f0e:	69ba      	ldr	r2, [r7, #24]
10001f10:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001f12:	683b      	ldr	r3, [r7, #0]
10001f14:	685b      	ldr	r3, [r3, #4]
10001f16:	2b01      	cmp	r3, #1
10001f18:	d00b      	beq.n	10001f32 <HAL_GPIO_Init+0xde>
10001f1a:	683b      	ldr	r3, [r7, #0]
10001f1c:	685b      	ldr	r3, [r3, #4]
10001f1e:	2b02      	cmp	r3, #2
10001f20:	d007      	beq.n	10001f32 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001f22:	683b      	ldr	r3, [r7, #0]
10001f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001f26:	2b11      	cmp	r3, #17
10001f28:	d003      	beq.n	10001f32 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001f2a:	683b      	ldr	r3, [r7, #0]
10001f2c:	685b      	ldr	r3, [r3, #4]
10001f2e:	2b12      	cmp	r3, #18
10001f30:	d130      	bne.n	10001f94 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10001f32:	687b      	ldr	r3, [r7, #4]
10001f34:	689b      	ldr	r3, [r3, #8]
10001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10001f38:	69fb      	ldr	r3, [r7, #28]
10001f3a:	005b      	lsls	r3, r3, #1
10001f3c:	2203      	movs	r2, #3
10001f3e:	fa02 f303 	lsl.w	r3, r2, r3
10001f42:	43db      	mvns	r3, r3
10001f44:	69ba      	ldr	r2, [r7, #24]
10001f46:	4013      	ands	r3, r2
10001f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10001f4a:	683b      	ldr	r3, [r7, #0]
10001f4c:	68da      	ldr	r2, [r3, #12]
10001f4e:	69fb      	ldr	r3, [r7, #28]
10001f50:	005b      	lsls	r3, r3, #1
10001f52:	fa02 f303 	lsl.w	r3, r2, r3
10001f56:	69ba      	ldr	r2, [r7, #24]
10001f58:	4313      	orrs	r3, r2
10001f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10001f5c:	687b      	ldr	r3, [r7, #4]
10001f5e:	69ba      	ldr	r2, [r7, #24]
10001f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10001f62:	687b      	ldr	r3, [r7, #4]
10001f64:	685b      	ldr	r3, [r3, #4]
10001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10001f68:	2201      	movs	r2, #1
10001f6a:	69fb      	ldr	r3, [r7, #28]
10001f6c:	fa02 f303 	lsl.w	r3, r2, r3
10001f70:	43db      	mvns	r3, r3
10001f72:	69ba      	ldr	r2, [r7, #24]
10001f74:	4013      	ands	r3, r2
10001f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10001f78:	683b      	ldr	r3, [r7, #0]
10001f7a:	685b      	ldr	r3, [r3, #4]
10001f7c:	091b      	lsrs	r3, r3, #4
10001f7e:	f003 0201 	and.w	r2, r3, #1
10001f82:	69fb      	ldr	r3, [r7, #28]
10001f84:	fa02 f303 	lsl.w	r3, r2, r3
10001f88:	69ba      	ldr	r2, [r7, #24]
10001f8a:	4313      	orrs	r3, r2
10001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10001f8e:	687b      	ldr	r3, [r7, #4]
10001f90:	69ba      	ldr	r2, [r7, #24]
10001f92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10001f94:	687b      	ldr	r3, [r7, #4]
10001f96:	68db      	ldr	r3, [r3, #12]
10001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10001f9a:	69fb      	ldr	r3, [r7, #28]
10001f9c:	005b      	lsls	r3, r3, #1
10001f9e:	2203      	movs	r2, #3
10001fa0:	fa02 f303 	lsl.w	r3, r2, r3
10001fa4:	43db      	mvns	r3, r3
10001fa6:	69ba      	ldr	r2, [r7, #24]
10001fa8:	4013      	ands	r3, r2
10001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10001fac:	683b      	ldr	r3, [r7, #0]
10001fae:	689a      	ldr	r2, [r3, #8]
10001fb0:	69fb      	ldr	r3, [r7, #28]
10001fb2:	005b      	lsls	r3, r3, #1
10001fb4:	fa02 f303 	lsl.w	r3, r2, r3
10001fb8:	69ba      	ldr	r2, [r7, #24]
10001fba:	4313      	orrs	r3, r2
10001fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10001fbe:	687b      	ldr	r3, [r7, #4]
10001fc0:	69ba      	ldr	r2, [r7, #24]
10001fc2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10001fc4:	683b      	ldr	r3, [r7, #0]
10001fc6:	685b      	ldr	r3, [r3, #4]
10001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
10001fcc:	2b00      	cmp	r3, #0
10001fce:	f000 80da 	beq.w	10002186 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10001fd2:	4a2e      	ldr	r2, [pc, #184]	@ (1000208c <HAL_GPIO_Init+0x238>)
10001fd4:	69fb      	ldr	r3, [r7, #28]
10001fd6:	089b      	lsrs	r3, r3, #2
10001fd8:	3318      	adds	r3, #24
10001fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10001fe0:	69fb      	ldr	r3, [r7, #28]
10001fe2:	f003 0303 	and.w	r3, r3, #3
10001fe6:	00db      	lsls	r3, r3, #3
10001fe8:	22ff      	movs	r2, #255	@ 0xff
10001fea:	fa02 f303 	lsl.w	r3, r2, r3
10001fee:	43db      	mvns	r3, r3
10001ff0:	69ba      	ldr	r2, [r7, #24]
10001ff2:	4013      	ands	r3, r2
10001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10001ff6:	687b      	ldr	r3, [r7, #4]
10001ff8:	4a25      	ldr	r2, [pc, #148]	@ (10002090 <HAL_GPIO_Init+0x23c>)
10001ffa:	4293      	cmp	r3, r2
10001ffc:	d05e      	beq.n	100020bc <HAL_GPIO_Init+0x268>
10001ffe:	687b      	ldr	r3, [r7, #4]
10002000:	4a24      	ldr	r2, [pc, #144]	@ (10002094 <HAL_GPIO_Init+0x240>)
10002002:	4293      	cmp	r3, r2
10002004:	d03d      	beq.n	10002082 <HAL_GPIO_Init+0x22e>
10002006:	687b      	ldr	r3, [r7, #4]
10002008:	4a23      	ldr	r2, [pc, #140]	@ (10002098 <HAL_GPIO_Init+0x244>)
1000200a:	4293      	cmp	r3, r2
1000200c:	d037      	beq.n	1000207e <HAL_GPIO_Init+0x22a>
1000200e:	687b      	ldr	r3, [r7, #4]
10002010:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
10002014:	d031      	beq.n	1000207a <HAL_GPIO_Init+0x226>
10002016:	687b      	ldr	r3, [r7, #4]
10002018:	4a20      	ldr	r2, [pc, #128]	@ (1000209c <HAL_GPIO_Init+0x248>)
1000201a:	4293      	cmp	r3, r2
1000201c:	d02b      	beq.n	10002076 <HAL_GPIO_Init+0x222>
1000201e:	687b      	ldr	r3, [r7, #4]
10002020:	4a1f      	ldr	r2, [pc, #124]	@ (100020a0 <HAL_GPIO_Init+0x24c>)
10002022:	4293      	cmp	r3, r2
10002024:	d025      	beq.n	10002072 <HAL_GPIO_Init+0x21e>
10002026:	687b      	ldr	r3, [r7, #4]
10002028:	4a1e      	ldr	r2, [pc, #120]	@ (100020a4 <HAL_GPIO_Init+0x250>)
1000202a:	4293      	cmp	r3, r2
1000202c:	d01f      	beq.n	1000206e <HAL_GPIO_Init+0x21a>
1000202e:	687b      	ldr	r3, [r7, #4]
10002030:	4a1d      	ldr	r2, [pc, #116]	@ (100020a8 <HAL_GPIO_Init+0x254>)
10002032:	4293      	cmp	r3, r2
10002034:	d019      	beq.n	1000206a <HAL_GPIO_Init+0x216>
10002036:	687b      	ldr	r3, [r7, #4]
10002038:	4a1c      	ldr	r2, [pc, #112]	@ (100020ac <HAL_GPIO_Init+0x258>)
1000203a:	4293      	cmp	r3, r2
1000203c:	d013      	beq.n	10002066 <HAL_GPIO_Init+0x212>
1000203e:	687b      	ldr	r3, [r7, #4]
10002040:	4a1b      	ldr	r2, [pc, #108]	@ (100020b0 <HAL_GPIO_Init+0x25c>)
10002042:	4293      	cmp	r3, r2
10002044:	d00d      	beq.n	10002062 <HAL_GPIO_Init+0x20e>
10002046:	687b      	ldr	r3, [r7, #4]
10002048:	4a1a      	ldr	r2, [pc, #104]	@ (100020b4 <HAL_GPIO_Init+0x260>)
1000204a:	4293      	cmp	r3, r2
1000204c:	d007      	beq.n	1000205e <HAL_GPIO_Init+0x20a>
1000204e:	687b      	ldr	r3, [r7, #4]
10002050:	4a19      	ldr	r2, [pc, #100]	@ (100020b8 <HAL_GPIO_Init+0x264>)
10002052:	4293      	cmp	r3, r2
10002054:	d101      	bne.n	1000205a <HAL_GPIO_Init+0x206>
10002056:	230b      	movs	r3, #11
10002058:	e031      	b.n	100020be <HAL_GPIO_Init+0x26a>
1000205a:	2319      	movs	r3, #25
1000205c:	e02f      	b.n	100020be <HAL_GPIO_Init+0x26a>
1000205e:	230a      	movs	r3, #10
10002060:	e02d      	b.n	100020be <HAL_GPIO_Init+0x26a>
10002062:	2309      	movs	r3, #9
10002064:	e02b      	b.n	100020be <HAL_GPIO_Init+0x26a>
10002066:	2308      	movs	r3, #8
10002068:	e029      	b.n	100020be <HAL_GPIO_Init+0x26a>
1000206a:	2307      	movs	r3, #7
1000206c:	e027      	b.n	100020be <HAL_GPIO_Init+0x26a>
1000206e:	2306      	movs	r3, #6
10002070:	e025      	b.n	100020be <HAL_GPIO_Init+0x26a>
10002072:	2305      	movs	r3, #5
10002074:	e023      	b.n	100020be <HAL_GPIO_Init+0x26a>
10002076:	2304      	movs	r3, #4
10002078:	e021      	b.n	100020be <HAL_GPIO_Init+0x26a>
1000207a:	2303      	movs	r3, #3
1000207c:	e01f      	b.n	100020be <HAL_GPIO_Init+0x26a>
1000207e:	2302      	movs	r3, #2
10002080:	e01d      	b.n	100020be <HAL_GPIO_Init+0x26a>
10002082:	2301      	movs	r3, #1
10002084:	e01b      	b.n	100020be <HAL_GPIO_Init+0x26a>
10002086:	bf00      	nop
10002088:	5000d0c0 	.word	0x5000d0c0
1000208c:	5000d000 	.word	0x5000d000
10002090:	50002000 	.word	0x50002000
10002094:	50003000 	.word	0x50003000
10002098:	50004000 	.word	0x50004000
1000209c:	50006000 	.word	0x50006000
100020a0:	50007000 	.word	0x50007000
100020a4:	50008000 	.word	0x50008000
100020a8:	50009000 	.word	0x50009000
100020ac:	5000a000 	.word	0x5000a000
100020b0:	5000b000 	.word	0x5000b000
100020b4:	5000c000 	.word	0x5000c000
100020b8:	54004000 	.word	0x54004000
100020bc:	2300      	movs	r3, #0
100020be:	69fa      	ldr	r2, [r7, #28]
100020c0:	f002 0203 	and.w	r2, r2, #3
100020c4:	00d2      	lsls	r2, r2, #3
100020c6:	4093      	lsls	r3, r2
100020c8:	461a      	mov	r2, r3
100020ca:	69bb      	ldr	r3, [r7, #24]
100020cc:	4313      	orrs	r3, r2
100020ce:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
100020d0:	4934      	ldr	r1, [pc, #208]	@ (100021a4 <HAL_GPIO_Init+0x350>)
100020d2:	69fb      	ldr	r3, [r7, #28]
100020d4:	089b      	lsrs	r3, r3, #2
100020d6:	3318      	adds	r3, #24
100020d8:	69ba      	ldr	r2, [r7, #24]
100020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
100020de:	697b      	ldr	r3, [r7, #20]
100020e0:	681b      	ldr	r3, [r3, #0]
100020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100020e4:	68fb      	ldr	r3, [r7, #12]
100020e6:	43db      	mvns	r3, r3
100020e8:	69ba      	ldr	r2, [r7, #24]
100020ea:	4013      	ands	r3, r2
100020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
100020ee:	683b      	ldr	r3, [r7, #0]
100020f0:	685b      	ldr	r3, [r3, #4]
100020f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
100020f6:	2b00      	cmp	r3, #0
100020f8:	d003      	beq.n	10002102 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
100020fa:	69ba      	ldr	r2, [r7, #24]
100020fc:	68fb      	ldr	r3, [r7, #12]
100020fe:	4313      	orrs	r3, r2
10002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10002102:	697b      	ldr	r3, [r7, #20]
10002104:	69ba      	ldr	r2, [r7, #24]
10002106:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10002108:	697b      	ldr	r3, [r7, #20]
1000210a:	685b      	ldr	r3, [r3, #4]
1000210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000210e:	68fb      	ldr	r3, [r7, #12]
10002110:	43db      	mvns	r3, r3
10002112:	69ba      	ldr	r2, [r7, #24]
10002114:	4013      	ands	r3, r2
10002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10002118:	683b      	ldr	r3, [r7, #0]
1000211a:	685b      	ldr	r3, [r3, #4]
1000211c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
10002120:	2b00      	cmp	r3, #0
10002122:	d003      	beq.n	1000212c <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10002124:	69ba      	ldr	r2, [r7, #24]
10002126:	68fb      	ldr	r3, [r7, #12]
10002128:	4313      	orrs	r3, r2
1000212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
1000212c:	697b      	ldr	r3, [r7, #20]
1000212e:	69ba      	ldr	r2, [r7, #24]
10002130:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10002132:	4b1c      	ldr	r3, [pc, #112]	@ (100021a4 <HAL_GPIO_Init+0x350>)
10002134:	681b      	ldr	r3, [r3, #0]
10002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10002138:	68fb      	ldr	r3, [r7, #12]
1000213a:	43db      	mvns	r3, r3
1000213c:	69ba      	ldr	r2, [r7, #24]
1000213e:	4013      	ands	r3, r2
10002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10002142:	683b      	ldr	r3, [r7, #0]
10002144:	685b      	ldr	r3, [r3, #4]
10002146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
1000214a:	2b00      	cmp	r3, #0
1000214c:	d003      	beq.n	10002156 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
1000214e:	69ba      	ldr	r2, [r7, #24]
10002150:	68fb      	ldr	r3, [r7, #12]
10002152:	4313      	orrs	r3, r2
10002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10002156:	4a13      	ldr	r2, [pc, #76]	@ (100021a4 <HAL_GPIO_Init+0x350>)
10002158:	69bb      	ldr	r3, [r7, #24]
1000215a:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
1000215c:	4b11      	ldr	r3, [pc, #68]	@ (100021a4 <HAL_GPIO_Init+0x350>)
1000215e:	685b      	ldr	r3, [r3, #4]
10002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10002162:	68fb      	ldr	r3, [r7, #12]
10002164:	43db      	mvns	r3, r3
10002166:	69ba      	ldr	r2, [r7, #24]
10002168:	4013      	ands	r3, r2
1000216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
1000216c:	683b      	ldr	r3, [r7, #0]
1000216e:	685b      	ldr	r3, [r3, #4]
10002170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
10002174:	2b00      	cmp	r3, #0
10002176:	d003      	beq.n	10002180 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10002178:	69ba      	ldr	r2, [r7, #24]
1000217a:	68fb      	ldr	r3, [r7, #12]
1000217c:	4313      	orrs	r3, r2
1000217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10002180:	4a08      	ldr	r2, [pc, #32]	@ (100021a4 <HAL_GPIO_Init+0x350>)
10002182:	69bb      	ldr	r3, [r7, #24]
10002184:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10002186:	69fb      	ldr	r3, [r7, #28]
10002188:	3301      	adds	r3, #1
1000218a:	61fb      	str	r3, [r7, #28]
1000218c:	69fb      	ldr	r3, [r7, #28]
1000218e:	2b0f      	cmp	r3, #15
10002190:	f67f ae6a 	bls.w	10001e68 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10002194:	bf00      	nop
10002196:	bf00      	nop
10002198:	3724      	adds	r7, #36	@ 0x24
1000219a:	46bd      	mov	sp, r7
1000219c:	f85d 7b04 	ldr.w	r7, [sp], #4
100021a0:	4770      	bx	lr
100021a2:	bf00      	nop
100021a4:	5000d000 	.word	0x5000d000

100021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
100021a8:	b480      	push	{r7}
100021aa:	b083      	sub	sp, #12
100021ac:	af00      	add	r7, sp, #0
100021ae:	6078      	str	r0, [r7, #4]
100021b0:	460b      	mov	r3, r1
100021b2:	807b      	strh	r3, [r7, #2]
100021b4:	4613      	mov	r3, r2
100021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
100021b8:	787b      	ldrb	r3, [r7, #1]
100021ba:	2b00      	cmp	r3, #0
100021bc:	d003      	beq.n	100021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
100021be:	887a      	ldrh	r2, [r7, #2]
100021c0:	687b      	ldr	r3, [r7, #4]
100021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
100021c4:	e003      	b.n	100021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
100021c6:	887b      	ldrh	r3, [r7, #2]
100021c8:	041a      	lsls	r2, r3, #16
100021ca:	687b      	ldr	r3, [r7, #4]
100021cc:	619a      	str	r2, [r3, #24]
}
100021ce:	bf00      	nop
100021d0:	370c      	adds	r7, #12
100021d2:	46bd      	mov	sp, r7
100021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100021d8:	4770      	bx	lr
	...

100021dc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
100021dc:	b580      	push	{r7, lr}
100021de:	b084      	sub	sp, #16
100021e0:	af00      	add	r7, sp, #0
100021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
100021e4:	2300      	movs	r3, #0
100021e6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
100021e8:	687b      	ldr	r3, [r7, #4]
100021ea:	2b00      	cmp	r3, #0
100021ec:	d01e      	beq.n	1000222c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100021ee:	4b13      	ldr	r3, [pc, #76]	@ (1000223c <HAL_IPCC_Init+0x60>)
100021f0:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
100021f2:	687b      	ldr	r3, [r7, #4]
100021f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
100021f8:	b2db      	uxtb	r3, r3
100021fa:	2b00      	cmp	r3, #0
100021fc:	d102      	bne.n	10002204 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
100021fe:	6878      	ldr	r0, [r7, #4]
10002200:	f7ff fabc 	bl	1000177c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10002204:	68b8      	ldr	r0, [r7, #8]
10002206:	f000 f9eb 	bl	100025e0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
1000220a:	68bb      	ldr	r3, [r7, #8]
1000220c:	681b      	ldr	r3, [r3, #0]
1000220e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
10002212:	68bb      	ldr	r3, [r7, #8]
10002214:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
10002216:	6878      	ldr	r0, [r7, #4]
10002218:	f000 f9bc 	bl	10002594 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
1000221c:	687b      	ldr	r3, [r7, #4]
1000221e:	2200      	movs	r2, #0
10002220:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10002222:	687b      	ldr	r3, [r7, #4]
10002224:	2201      	movs	r2, #1
10002226:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
1000222a:	e001      	b.n	10002230 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
1000222c:	2301      	movs	r3, #1
1000222e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10002230:	7bfb      	ldrb	r3, [r7, #15]
}
10002232:	4618      	mov	r0, r3
10002234:	3710      	adds	r7, #16
10002236:	46bd      	mov	sp, r7
10002238:	bd80      	pop	{r7, pc}
1000223a:	bf00      	nop
1000223c:	4c001010 	.word	0x4c001010

10002240 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10002240:	b580      	push	{r7, lr}
10002242:	b086      	sub	sp, #24
10002244:	af00      	add	r7, sp, #0
10002246:	60f8      	str	r0, [r7, #12]
10002248:	60b9      	str	r1, [r7, #8]
1000224a:	603b      	str	r3, [r7, #0]
1000224c:	4613      	mov	r3, r2
1000224e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10002250:	2300      	movs	r3, #0
10002252:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10002254:	68fb      	ldr	r3, [r7, #12]
10002256:	2b00      	cmp	r3, #0
10002258:	d039      	beq.n	100022ce <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
1000225a:	68fb      	ldr	r3, [r7, #12]
1000225c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10002260:	b2db      	uxtb	r3, r3
10002262:	2b01      	cmp	r3, #1
10002264:	d130      	bne.n	100022c8 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10002266:	79fb      	ldrb	r3, [r7, #7]
10002268:	2b00      	cmp	r3, #0
1000226a:	d113      	bne.n	10002294 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
1000226c:	68fa      	ldr	r2, [r7, #12]
1000226e:	68bb      	ldr	r3, [r7, #8]
10002270:	3306      	adds	r3, #6
10002272:	009b      	lsls	r3, r3, #2
10002274:	4413      	add	r3, r2
10002276:	683a      	ldr	r2, [r7, #0]
10002278:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000227a:	68fb      	ldr	r3, [r7, #12]
1000227c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1000227e:	68bb      	ldr	r3, [r7, #8]
10002280:	f003 030f 	and.w	r3, r3, #15
10002284:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10002288:	fa01 f303 	lsl.w	r3, r1, r3
1000228c:	431a      	orrs	r2, r3
1000228e:	68fb      	ldr	r3, [r7, #12]
10002290:	635a      	str	r2, [r3, #52]	@ 0x34
10002292:	e010      	b.n	100022b6 <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10002294:	68fa      	ldr	r2, [r7, #12]
10002296:	68bb      	ldr	r3, [r7, #8]
10002298:	009b      	lsls	r3, r3, #2
1000229a:	4413      	add	r3, r2
1000229c:	683a      	ldr	r2, [r7, #0]
1000229e:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100022a0:	68fb      	ldr	r3, [r7, #12]
100022a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100022a4:	68bb      	ldr	r3, [r7, #8]
100022a6:	f003 030f 	and.w	r3, r3, #15
100022aa:	2101      	movs	r1, #1
100022ac:	fa01 f303 	lsl.w	r3, r1, r3
100022b0:	431a      	orrs	r2, r3
100022b2:	68fb      	ldr	r3, [r7, #12]
100022b4:	635a      	str	r2, [r3, #52]	@ 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
100022b6:	79fb      	ldrb	r3, [r7, #7]
100022b8:	2b01      	cmp	r3, #1
100022ba:	d10a      	bne.n	100022d2 <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100022bc:	79fb      	ldrb	r3, [r7, #7]
100022be:	4619      	mov	r1, r3
100022c0:	68b8      	ldr	r0, [r7, #8]
100022c2:	f000 f939 	bl	10002538 <IPCC_UnmaskInterrupt>
100022c6:	e004      	b.n	100022d2 <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
100022c8:	2301      	movs	r3, #1
100022ca:	75fb      	strb	r3, [r7, #23]
100022cc:	e001      	b.n	100022d2 <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
100022ce:	2301      	movs	r3, #1
100022d0:	75fb      	strb	r3, [r7, #23]
  }
  return err;
100022d2:	7dfb      	ldrb	r3, [r7, #23]
}
100022d4:	4618      	mov	r0, r3
100022d6:	3718      	adds	r7, #24
100022d8:	46bd      	mov	sp, r7
100022da:	bd80      	pop	{r7, pc}

100022dc <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100022dc:	b480      	push	{r7}
100022de:	b089      	sub	sp, #36	@ 0x24
100022e0:	af00      	add	r7, sp, #0
100022e2:	60f8      	str	r0, [r7, #12]
100022e4:	60b9      	str	r1, [r7, #8]
100022e6:	4613      	mov	r3, r2
100022e8:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100022ea:	4b14      	ldr	r3, [pc, #80]	@ (1000233c <HAL_IPCC_GetChannelStatus+0x60>)
100022ec:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
100022ee:	4b14      	ldr	r3, [pc, #80]	@ (10002340 <HAL_IPCC_GetChannelStatus+0x64>)
100022f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100022f2:	79fb      	ldrb	r3, [r7, #7]
100022f4:	2b00      	cmp	r3, #0
100022f6:	d10a      	bne.n	1000230e <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100022f8:	69bb      	ldr	r3, [r7, #24]
100022fa:	68da      	ldr	r2, [r3, #12]
100022fc:	68bb      	ldr	r3, [r7, #8]
100022fe:	f003 030f 	and.w	r3, r3, #15
10002302:	2101      	movs	r1, #1
10002304:	fa01 f303 	lsl.w	r3, r1, r3
10002308:	4013      	ands	r3, r2
1000230a:	61fb      	str	r3, [r7, #28]
1000230c:	e009      	b.n	10002322 <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000230e:	697b      	ldr	r3, [r7, #20]
10002310:	68da      	ldr	r2, [r3, #12]
10002312:	68bb      	ldr	r3, [r7, #8]
10002314:	f003 030f 	and.w	r3, r3, #15
10002318:	2101      	movs	r1, #1
1000231a:	fa01 f303 	lsl.w	r3, r1, r3
1000231e:	4013      	ands	r3, r2
10002320:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10002322:	69fb      	ldr	r3, [r7, #28]
10002324:	2b00      	cmp	r3, #0
10002326:	bf14      	ite	ne
10002328:	2301      	movne	r3, #1
1000232a:	2300      	moveq	r3, #0
1000232c:	b2db      	uxtb	r3, r3
}
1000232e:	4618      	mov	r0, r3
10002330:	3724      	adds	r7, #36	@ 0x24
10002332:	46bd      	mov	sp, r7
10002334:	f85d 7b04 	ldr.w	r7, [sp], #4
10002338:	4770      	bx	lr
1000233a:	bf00      	nop
1000233c:	4c001010 	.word	0x4c001010
10002340:	4c001000 	.word	0x4c001000

10002344 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10002344:	b580      	push	{r7, lr}
10002346:	b088      	sub	sp, #32
10002348:	af00      	add	r7, sp, #0
1000234a:	60f8      	str	r0, [r7, #12]
1000234c:	60b9      	str	r1, [r7, #8]
1000234e:	4613      	mov	r3, r2
10002350:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10002352:	2300      	movs	r3, #0
10002354:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10002356:	4b1d      	ldr	r3, [pc, #116]	@ (100023cc <HAL_IPCC_NotifyCPU+0x88>)
10002358:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
1000235a:	68fb      	ldr	r3, [r7, #12]
1000235c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10002360:	b2db      	uxtb	r3, r3
10002362:	2b01      	cmp	r3, #1
10002364:	d12a      	bne.n	100023bc <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10002366:	69bb      	ldr	r3, [r7, #24]
10002368:	689a      	ldr	r2, [r3, #8]
1000236a:	79fb      	ldrb	r3, [r7, #7]
1000236c:	2b00      	cmp	r3, #0
1000236e:	d102      	bne.n	10002376 <HAL_IPCC_NotifyCPU+0x32>
10002370:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10002374:	e000      	b.n	10002378 <HAL_IPCC_NotifyCPU+0x34>
10002376:	2101      	movs	r1, #1
10002378:	68bb      	ldr	r3, [r7, #8]
1000237a:	f003 030f 	and.w	r3, r3, #15
1000237e:	fa01 f303 	lsl.w	r3, r1, r3
10002382:	431a      	orrs	r2, r3
10002384:	69bb      	ldr	r3, [r7, #24]
10002386:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10002388:	79fb      	ldrb	r3, [r7, #7]
1000238a:	2b00      	cmp	r3, #0
1000238c:	d102      	bne.n	10002394 <HAL_IPCC_NotifyCPU+0x50>
1000238e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
10002392:	e000      	b.n	10002396 <HAL_IPCC_NotifyCPU+0x52>
10002394:	2201      	movs	r2, #1
10002396:	68bb      	ldr	r3, [r7, #8]
10002398:	f003 030f 	and.w	r3, r3, #15
1000239c:	fa02 f303 	lsl.w	r3, r2, r3
100023a0:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
100023a2:	68fb      	ldr	r3, [r7, #12]
100023a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100023a6:	697b      	ldr	r3, [r7, #20]
100023a8:	4013      	ands	r3, r2
100023aa:	697a      	ldr	r2, [r7, #20]
100023ac:	429a      	cmp	r2, r3
100023ae:	d107      	bne.n	100023c0 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100023b0:	79fb      	ldrb	r3, [r7, #7]
100023b2:	4619      	mov	r1, r3
100023b4:	68b8      	ldr	r0, [r7, #8]
100023b6:	f000 f8bf 	bl	10002538 <IPCC_UnmaskInterrupt>
100023ba:	e001      	b.n	100023c0 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
100023bc:	2301      	movs	r3, #1
100023be:	77fb      	strb	r3, [r7, #31]
  }

  return err;
100023c0:	7ffb      	ldrb	r3, [r7, #31]
}
100023c2:	4618      	mov	r0, r3
100023c4:	3720      	adds	r7, #32
100023c6:	46bd      	mov	sp, r7
100023c8:	bd80      	pop	{r7, pc}
100023ca:	bf00      	nop
100023cc:	4c001010 	.word	0x4c001010

100023d0 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
100023d0:	b580      	push	{r7, lr}
100023d2:	b086      	sub	sp, #24
100023d4:	af00      	add	r7, sp, #0
100023d6:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
100023d8:	2300      	movs	r3, #0
100023da:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100023dc:	4b22      	ldr	r3, [pc, #136]	@ (10002468 <HAL_IPCC_TX_IRQHandler+0x98>)
100023de:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
100023e0:	68fb      	ldr	r3, [r7, #12]
100023e2:	685b      	ldr	r3, [r3, #4]
100023e4:	43db      	mvns	r3, r3
100023e6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
100023ea:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
100023ec:	68fb      	ldr	r3, [r7, #12]
100023ee:	68db      	ldr	r3, [r3, #12]
100023f0:	041b      	lsls	r3, r3, #16
100023f2:	43db      	mvns	r3, r3
100023f4:	697a      	ldr	r2, [r7, #20]
100023f6:	4013      	ands	r3, r2
100023f8:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100023fa:	e02c      	b.n	10002456 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
100023fc:	693b      	ldr	r3, [r7, #16]
100023fe:	f003 030f 	and.w	r3, r3, #15
10002402:	3310      	adds	r3, #16
10002404:	2201      	movs	r2, #1
10002406:	fa02 f303 	lsl.w	r3, r2, r3
1000240a:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
1000240c:	697a      	ldr	r2, [r7, #20]
1000240e:	68bb      	ldr	r3, [r7, #8]
10002410:	4013      	ands	r3, r2
10002412:	2b00      	cmp	r3, #0
10002414:	d01c      	beq.n	10002450 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
10002416:	68fb      	ldr	r3, [r7, #12]
10002418:	685a      	ldr	r2, [r3, #4]
1000241a:	68bb      	ldr	r3, [r7, #8]
1000241c:	431a      	orrs	r2, r3
1000241e:	68fb      	ldr	r3, [r7, #12]
10002420:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
10002422:	687a      	ldr	r2, [r7, #4]
10002424:	693b      	ldr	r3, [r7, #16]
10002426:	3306      	adds	r3, #6
10002428:	009b      	lsls	r3, r3, #2
1000242a:	4413      	add	r3, r2
1000242c:	685b      	ldr	r3, [r3, #4]
1000242e:	2b00      	cmp	r3, #0
10002430:	d009      	beq.n	10002446 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
10002432:	687a      	ldr	r2, [r7, #4]
10002434:	693b      	ldr	r3, [r7, #16]
10002436:	3306      	adds	r3, #6
10002438:	009b      	lsls	r3, r3, #2
1000243a:	4413      	add	r3, r2
1000243c:	685b      	ldr	r3, [r3, #4]
1000243e:	2200      	movs	r2, #0
10002440:	6939      	ldr	r1, [r7, #16]
10002442:	6878      	ldr	r0, [r7, #4]
10002444:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
10002446:	68bb      	ldr	r3, [r7, #8]
10002448:	43db      	mvns	r3, r3
1000244a:	697a      	ldr	r2, [r7, #20]
1000244c:	4013      	ands	r3, r2
1000244e:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
10002450:	693b      	ldr	r3, [r7, #16]
10002452:	3301      	adds	r3, #1
10002454:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10002456:	697b      	ldr	r3, [r7, #20]
10002458:	2b00      	cmp	r3, #0
1000245a:	d1cf      	bne.n	100023fc <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
1000245c:	bf00      	nop
1000245e:	bf00      	nop
10002460:	3718      	adds	r7, #24
10002462:	46bd      	mov	sp, r7
10002464:	bd80      	pop	{r7, pc}
10002466:	bf00      	nop
10002468:	4c001010 	.word	0x4c001010

1000246c <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
1000246c:	b580      	push	{r7, lr}
1000246e:	b088      	sub	sp, #32
10002470:	af00      	add	r7, sp, #0
10002472:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10002474:	2300      	movs	r3, #0
10002476:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10002478:	4b20      	ldr	r3, [pc, #128]	@ (100024fc <HAL_IPCC_RX_IRQHandler+0x90>)
1000247a:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
1000247c:	4b20      	ldr	r3, [pc, #128]	@ (10002500 <HAL_IPCC_RX_IRQHandler+0x94>)
1000247e:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10002480:	697b      	ldr	r3, [r7, #20]
10002482:	685b      	ldr	r3, [r3, #4]
10002484:	43db      	mvns	r3, r3
10002486:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
1000248a:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
1000248c:	693b      	ldr	r3, [r7, #16]
1000248e:	68db      	ldr	r3, [r3, #12]
10002490:	69fa      	ldr	r2, [r7, #28]
10002492:	4013      	ands	r3, r2
10002494:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10002496:	e029      	b.n	100024ec <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10002498:	69bb      	ldr	r3, [r7, #24]
1000249a:	f003 030f 	and.w	r3, r3, #15
1000249e:	2201      	movs	r2, #1
100024a0:	fa02 f303 	lsl.w	r3, r2, r3
100024a4:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
100024a6:	69fa      	ldr	r2, [r7, #28]
100024a8:	68fb      	ldr	r3, [r7, #12]
100024aa:	4013      	ands	r3, r2
100024ac:	2b00      	cmp	r3, #0
100024ae:	d01a      	beq.n	100024e6 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
100024b0:	697b      	ldr	r3, [r7, #20]
100024b2:	685a      	ldr	r2, [r3, #4]
100024b4:	68fb      	ldr	r3, [r7, #12]
100024b6:	431a      	orrs	r2, r3
100024b8:	697b      	ldr	r3, [r7, #20]
100024ba:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
100024bc:	687a      	ldr	r2, [r7, #4]
100024be:	69bb      	ldr	r3, [r7, #24]
100024c0:	009b      	lsls	r3, r3, #2
100024c2:	4413      	add	r3, r2
100024c4:	685b      	ldr	r3, [r3, #4]
100024c6:	2b00      	cmp	r3, #0
100024c8:	d008      	beq.n	100024dc <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
100024ca:	687a      	ldr	r2, [r7, #4]
100024cc:	69bb      	ldr	r3, [r7, #24]
100024ce:	009b      	lsls	r3, r3, #2
100024d0:	4413      	add	r3, r2
100024d2:	685b      	ldr	r3, [r3, #4]
100024d4:	2201      	movs	r2, #1
100024d6:	69b9      	ldr	r1, [r7, #24]
100024d8:	6878      	ldr	r0, [r7, #4]
100024da:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
100024dc:	68fb      	ldr	r3, [r7, #12]
100024de:	43db      	mvns	r3, r3
100024e0:	69fa      	ldr	r2, [r7, #28]
100024e2:	4013      	ands	r3, r2
100024e4:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
100024e6:	69bb      	ldr	r3, [r7, #24]
100024e8:	3301      	adds	r3, #1
100024ea:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100024ec:	69fb      	ldr	r3, [r7, #28]
100024ee:	2b00      	cmp	r3, #0
100024f0:	d1d2      	bne.n	10002498 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
100024f2:	bf00      	nop
100024f4:	bf00      	nop
100024f6:	3720      	adds	r7, #32
100024f8:	46bd      	mov	sp, r7
100024fa:	bd80      	pop	{r7, pc}
100024fc:	4c001010 	.word	0x4c001010
10002500:	4c001000 	.word	0x4c001000

10002504 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10002504:	b480      	push	{r7}
10002506:	b085      	sub	sp, #20
10002508:	af00      	add	r7, sp, #0
1000250a:	60f8      	str	r0, [r7, #12]
1000250c:	60b9      	str	r1, [r7, #8]
1000250e:	4613      	mov	r3, r2
10002510:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
10002512:	bf00      	nop
10002514:	3714      	adds	r7, #20
10002516:	46bd      	mov	sp, r7
10002518:	f85d 7b04 	ldr.w	r7, [sp], #4
1000251c:	4770      	bx	lr

1000251e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000251e:	b480      	push	{r7}
10002520:	b085      	sub	sp, #20
10002522:	af00      	add	r7, sp, #0
10002524:	60f8      	str	r0, [r7, #12]
10002526:	60b9      	str	r1, [r7, #8]
10002528:	4613      	mov	r3, r2
1000252a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
1000252c:	bf00      	nop
1000252e:	3714      	adds	r7, #20
10002530:	46bd      	mov	sp, r7
10002532:	f85d 7b04 	ldr.w	r7, [sp], #4
10002536:	4770      	bx	lr

10002538 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10002538:	b480      	push	{r7}
1000253a:	b085      	sub	sp, #20
1000253c:	af00      	add	r7, sp, #0
1000253e:	6078      	str	r0, [r7, #4]
10002540:	460b      	mov	r3, r1
10002542:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10002544:	4b12      	ldr	r3, [pc, #72]	@ (10002590 <IPCC_UnmaskInterrupt+0x58>)
10002546:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10002548:	78fb      	ldrb	r3, [r7, #3]
1000254a:	2b00      	cmp	r3, #0
1000254c:	d10d      	bne.n	1000256a <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000254e:	68fb      	ldr	r3, [r7, #12]
10002550:	685a      	ldr	r2, [r3, #4]
10002552:	687b      	ldr	r3, [r7, #4]
10002554:	f003 030f 	and.w	r3, r3, #15
10002558:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
1000255c:	fa01 f303 	lsl.w	r3, r1, r3
10002560:	43db      	mvns	r3, r3
10002562:	401a      	ands	r2, r3
10002564:	68fb      	ldr	r3, [r7, #12]
10002566:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10002568:	e00b      	b.n	10002582 <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000256a:	68fb      	ldr	r3, [r7, #12]
1000256c:	685a      	ldr	r2, [r3, #4]
1000256e:	687b      	ldr	r3, [r7, #4]
10002570:	f003 030f 	and.w	r3, r3, #15
10002574:	2101      	movs	r1, #1
10002576:	fa01 f303 	lsl.w	r3, r1, r3
1000257a:	43db      	mvns	r3, r3
1000257c:	401a      	ands	r2, r3
1000257e:	68fb      	ldr	r3, [r7, #12]
10002580:	605a      	str	r2, [r3, #4]
}
10002582:	bf00      	nop
10002584:	3714      	adds	r7, #20
10002586:	46bd      	mov	sp, r7
10002588:	f85d 7b04 	ldr.w	r7, [sp], #4
1000258c:	4770      	bx	lr
1000258e:	bf00      	nop
10002590:	4c001010 	.word	0x4c001010

10002594 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10002594:	b480      	push	{r7}
10002596:	b085      	sub	sp, #20
10002598:	af00      	add	r7, sp, #0
1000259a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
1000259c:	2300      	movs	r3, #0
1000259e:	60fb      	str	r3, [r7, #12]
100025a0:	e00f      	b.n	100025c2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
100025a2:	687a      	ldr	r2, [r7, #4]
100025a4:	68fb      	ldr	r3, [r7, #12]
100025a6:	009b      	lsls	r3, r3, #2
100025a8:	4413      	add	r3, r2
100025aa:	4a0b      	ldr	r2, [pc, #44]	@ (100025d8 <IPCC_SetDefaultCallbacks+0x44>)
100025ac:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
100025ae:	687a      	ldr	r2, [r7, #4]
100025b0:	68fb      	ldr	r3, [r7, #12]
100025b2:	3306      	adds	r3, #6
100025b4:	009b      	lsls	r3, r3, #2
100025b6:	4413      	add	r3, r2
100025b8:	4a08      	ldr	r2, [pc, #32]	@ (100025dc <IPCC_SetDefaultCallbacks+0x48>)
100025ba:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
100025bc:	68fb      	ldr	r3, [r7, #12]
100025be:	3301      	adds	r3, #1
100025c0:	60fb      	str	r3, [r7, #12]
100025c2:	68fb      	ldr	r3, [r7, #12]
100025c4:	2b05      	cmp	r3, #5
100025c6:	d9ec      	bls.n	100025a2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
100025c8:	bf00      	nop
100025ca:	bf00      	nop
100025cc:	3714      	adds	r7, #20
100025ce:	46bd      	mov	sp, r7
100025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
100025d4:	4770      	bx	lr
100025d6:	bf00      	nop
100025d8:	10002505 	.word	0x10002505
100025dc:	1000251f 	.word	0x1000251f

100025e0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
100025e0:	b480      	push	{r7}
100025e2:	b083      	sub	sp, #12
100025e4:	af00      	add	r7, sp, #0
100025e6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
100025e8:	687b      	ldr	r3, [r7, #4]
100025ea:	2200      	movs	r2, #0
100025ec:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
100025ee:	687b      	ldr	r3, [r7, #4]
100025f0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
100025f4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
100025f6:	687b      	ldr	r3, [r7, #4]
100025f8:	223f      	movs	r2, #63	@ 0x3f
100025fa:	609a      	str	r2, [r3, #8]
}
100025fc:	bf00      	nop
100025fe:	370c      	adds	r7, #12
10002600:	46bd      	mov	sp, r7
10002602:	f85d 7b04 	ldr.w	r7, [sp], #4
10002606:	4770      	bx	lr

10002608 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10002608:	b480      	push	{r7}
1000260a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000260c:	4b05      	ldr	r3, [pc, #20]	@ (10002624 <HAL_PWR_EnableBkUpAccess+0x1c>)
1000260e:	681b      	ldr	r3, [r3, #0]
10002610:	4a04      	ldr	r2, [pc, #16]	@ (10002624 <HAL_PWR_EnableBkUpAccess+0x1c>)
10002612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10002616:	6013      	str	r3, [r2, #0]
}
10002618:	bf00      	nop
1000261a:	46bd      	mov	sp, r7
1000261c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002620:	4770      	bx	lr
10002622:	bf00      	nop
10002624:	50001000 	.word	0x50001000

10002628 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10002628:	b580      	push	{r7, lr}
1000262a:	b084      	sub	sp, #16
1000262c:	af00      	add	r7, sp, #0
1000262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10002630:	2300      	movs	r3, #0
10002632:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10002634:	687b      	ldr	r3, [r7, #4]
10002636:	2b00      	cmp	r3, #0
10002638:	d101      	bne.n	1000263e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
1000263a:	2301      	movs	r3, #1
1000263c:	e320      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1000263e:	687b      	ldr	r3, [r7, #4]
10002640:	681b      	ldr	r3, [r3, #0]
10002642:	f003 0301 	and.w	r3, r3, #1
10002646:	2b00      	cmp	r3, #0
10002648:	f000 8081 	beq.w	1000274e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
1000264c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002650:	6a1b      	ldr	r3, [r3, #32]
10002652:	f003 0303 	and.w	r3, r3, #3
10002656:	2b01      	cmp	r3, #1
10002658:	d107      	bne.n	1000266a <HAL_RCC_OscConfig+0x42>
1000265a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000265e:	6a1b      	ldr	r3, [r3, #32]
10002660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002668:	d054      	beq.n	10002714 <HAL_RCC_OscConfig+0xec>
1000266a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000266e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002670:	f003 0307 	and.w	r3, r3, #7
10002674:	2b01      	cmp	r3, #1
10002676:	d107      	bne.n	10002688 <HAL_RCC_OscConfig+0x60>
10002678:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000267e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002686:	d045      	beq.n	10002714 <HAL_RCC_OscConfig+0xec>
10002688:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000268c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000268e:	f003 0303 	and.w	r3, r3, #3
10002692:	2b01      	cmp	r3, #1
10002694:	d107      	bne.n	100026a6 <HAL_RCC_OscConfig+0x7e>
10002696:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000269a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000269c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100026a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100026a4:	d036      	beq.n	10002714 <HAL_RCC_OscConfig+0xec>
100026a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100026ac:	f003 0303 	and.w	r3, r3, #3
100026b0:	2b01      	cmp	r3, #1
100026b2:	d10f      	bne.n	100026d4 <HAL_RCC_OscConfig+0xac>
100026b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100026bc:	f003 0302 	and.w	r3, r3, #2
100026c0:	2b02      	cmp	r3, #2
100026c2:	d027      	beq.n	10002714 <HAL_RCC_OscConfig+0xec>
100026c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100026cc:	f003 0302 	and.w	r3, r3, #2
100026d0:	2b02      	cmp	r3, #2
100026d2:	d01f      	beq.n	10002714 <HAL_RCC_OscConfig+0xec>
100026d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026d8:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100026dc:	f003 0303 	and.w	r3, r3, #3
100026e0:	2b01      	cmp	r3, #1
100026e2:	d107      	bne.n	100026f4 <HAL_RCC_OscConfig+0xcc>
100026e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026e8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100026ec:	f003 0302 	and.w	r3, r3, #2
100026f0:	2b02      	cmp	r3, #2
100026f2:	d00f      	beq.n	10002714 <HAL_RCC_OscConfig+0xec>
100026f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026f8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100026fc:	f003 0303 	and.w	r3, r3, #3
10002700:	2b01      	cmp	r3, #1
10002702:	d117      	bne.n	10002734 <HAL_RCC_OscConfig+0x10c>
10002704:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002708:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000270c:	f003 0302 	and.w	r3, r3, #2
10002710:	2b02      	cmp	r3, #2
10002712:	d10f      	bne.n	10002734 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10002714:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002718:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002724:	d112      	bne.n	1000274c <HAL_RCC_OscConfig+0x124>
10002726:	687b      	ldr	r3, [r7, #4]
10002728:	685b      	ldr	r3, [r3, #4]
1000272a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000272e:	d00d      	beq.n	1000274c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10002730:	2301      	movs	r3, #1
10002732:	e2a5      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10002734:	687b      	ldr	r3, [r7, #4]
10002736:	685b      	ldr	r3, [r3, #4]
10002738:	4618      	mov	r0, r3
1000273a:	f000 faa7 	bl	10002c8c <HAL_RCC_HSEConfig>
1000273e:	4603      	mov	r3, r0
10002740:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10002742:	7bfb      	ldrb	r3, [r7, #15]
10002744:	2b00      	cmp	r3, #0
10002746:	d002      	beq.n	1000274e <HAL_RCC_OscConfig+0x126>
      {
        return result;
10002748:	7bfb      	ldrb	r3, [r7, #15]
1000274a:	e299      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
1000274c:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1000274e:	687b      	ldr	r3, [r7, #4]
10002750:	681b      	ldr	r3, [r3, #0]
10002752:	f003 0302 	and.w	r3, r3, #2
10002756:	2b00      	cmp	r3, #0
10002758:	f000 814e 	beq.w	100029f8 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
1000275c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002760:	6a1b      	ldr	r3, [r3, #32]
10002762:	f003 0303 	and.w	r3, r3, #3
10002766:	2b00      	cmp	r3, #0
10002768:	d107      	bne.n	1000277a <HAL_RCC_OscConfig+0x152>
1000276a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000276e:	6a1b      	ldr	r3, [r3, #32]
10002770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002778:	d055      	beq.n	10002826 <HAL_RCC_OscConfig+0x1fe>
1000277a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002780:	f003 0307 	and.w	r3, r3, #7
10002784:	2b00      	cmp	r3, #0
10002786:	d107      	bne.n	10002798 <HAL_RCC_OscConfig+0x170>
10002788:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000278e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002792:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002796:	d046      	beq.n	10002826 <HAL_RCC_OscConfig+0x1fe>
10002798:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000279c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000279e:	f003 0303 	and.w	r3, r3, #3
100027a2:	2b00      	cmp	r3, #0
100027a4:	d107      	bne.n	100027b6 <HAL_RCC_OscConfig+0x18e>
100027a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100027ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100027b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100027b4:	d037      	beq.n	10002826 <HAL_RCC_OscConfig+0x1fe>
100027b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100027bc:	f003 0303 	and.w	r3, r3, #3
100027c0:	2b00      	cmp	r3, #0
100027c2:	d10f      	bne.n	100027e4 <HAL_RCC_OscConfig+0x1bc>
100027c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100027cc:	f003 0302 	and.w	r3, r3, #2
100027d0:	2b02      	cmp	r3, #2
100027d2:	d028      	beq.n	10002826 <HAL_RCC_OscConfig+0x1fe>
100027d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100027dc:	f003 0302 	and.w	r3, r3, #2
100027e0:	2b02      	cmp	r3, #2
100027e2:	d020      	beq.n	10002826 <HAL_RCC_OscConfig+0x1fe>
100027e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027e8:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100027ec:	f003 0303 	and.w	r3, r3, #3
100027f0:	2b00      	cmp	r3, #0
100027f2:	d107      	bne.n	10002804 <HAL_RCC_OscConfig+0x1dc>
100027f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027f8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100027fc:	f003 0302 	and.w	r3, r3, #2
10002800:	2b02      	cmp	r3, #2
10002802:	d010      	beq.n	10002826 <HAL_RCC_OscConfig+0x1fe>
10002804:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002808:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
1000280c:	f003 0303 	and.w	r3, r3, #3
10002810:	2b00      	cmp	r3, #0
10002812:	f040 8088 	bne.w	10002926 <HAL_RCC_OscConfig+0x2fe>
10002816:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000281a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000281e:	f003 0302 	and.w	r3, r3, #2
10002822:	2b02      	cmp	r3, #2
10002824:	d17f      	bne.n	10002926 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10002826:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000282a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000282e:	f003 0301 	and.w	r3, r3, #1
10002832:	2b01      	cmp	r3, #1
10002834:	d105      	bne.n	10002842 <HAL_RCC_OscConfig+0x21a>
10002836:	687b      	ldr	r3, [r7, #4]
10002838:	68db      	ldr	r3, [r3, #12]
1000283a:	2b01      	cmp	r3, #1
1000283c:	d001      	beq.n	10002842 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
1000283e:	2301      	movs	r3, #1
10002840:	e21e      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10002842:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002846:	699b      	ldr	r3, [r3, #24]
10002848:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
1000284c:	687b      	ldr	r3, [r7, #4]
1000284e:	691b      	ldr	r3, [r3, #16]
10002850:	021b      	lsls	r3, r3, #8
10002852:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002856:	4313      	orrs	r3, r2
10002858:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
1000285a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000285e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002860:	f003 0303 	and.w	r3, r3, #3
10002864:	2b00      	cmp	r3, #0
10002866:	d10f      	bne.n	10002888 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10002868:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000286c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002870:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10002874:	2b02      	cmp	r3, #2
10002876:	d047      	beq.n	10002908 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10002878:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000287c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002880:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10002884:	2b02      	cmp	r3, #2
10002886:	d03f      	beq.n	10002908 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10002888:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000288c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002890:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10002894:	2b00      	cmp	r3, #0
10002896:	d107      	bne.n	100028a8 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10002898:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000289c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028a0:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100028a4:	2b02      	cmp	r3, #2
100028a6:	d02f      	beq.n	10002908 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100028a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028ac:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100028b0:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100028b4:	2b00      	cmp	r3, #0
100028b6:	d107      	bne.n	100028c8 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
100028b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028bc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100028c0:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100028c4:	2b02      	cmp	r3, #2
100028c6:	d01f      	beq.n	10002908 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100028c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028cc:	699b      	ldr	r3, [r3, #24]
100028ce:	f023 0203 	bic.w	r2, r3, #3
100028d2:	687b      	ldr	r3, [r7, #4]
100028d4:	695b      	ldr	r3, [r3, #20]
100028d6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100028da:	4313      	orrs	r3, r2
100028dc:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
100028de:	f7ff f977 	bl	10001bd0 <HAL_GetTick>
100028e2:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100028e4:	e008      	b.n	100028f8 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100028e6:	f7ff f973 	bl	10001bd0 <HAL_GetTick>
100028ea:	4602      	mov	r2, r0
100028ec:	68bb      	ldr	r3, [r7, #8]
100028ee:	1ad3      	subs	r3, r2, r3
100028f0:	2b64      	cmp	r3, #100	@ 0x64
100028f2:	d901      	bls.n	100028f8 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
100028f4:	2303      	movs	r3, #3
100028f6:	e1c3      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100028f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002900:	f003 0304 	and.w	r3, r3, #4
10002904:	2b04      	cmp	r3, #4
10002906:	d1ee      	bne.n	100028e6 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10002908:	f001 f809 	bl	1000391e <HAL_RCC_GetSystemCoreClockFreq>
1000290c:	4603      	mov	r3, r0
1000290e:	4ab3      	ldr	r2, [pc, #716]	@ (10002bdc <HAL_RCC_OscConfig+0x5b4>)
10002910:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10002912:	4bb3      	ldr	r3, [pc, #716]	@ (10002be0 <HAL_RCC_OscConfig+0x5b8>)
10002914:	681b      	ldr	r3, [r3, #0]
10002916:	4618      	mov	r0, r3
10002918:	f7ff f910 	bl	10001b3c <HAL_InitTick>
1000291c:	4603      	mov	r3, r0
1000291e:	2b00      	cmp	r3, #0
10002920:	d069      	beq.n	100029f6 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10002922:	2301      	movs	r3, #1
10002924:	e1ac      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10002926:	687b      	ldr	r3, [r7, #4]
10002928:	68db      	ldr	r3, [r3, #12]
1000292a:	2b00      	cmp	r3, #0
1000292c:	d049      	beq.n	100029c2 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
1000292e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002932:	68db      	ldr	r3, [r3, #12]
10002934:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002938:	f043 0301 	orr.w	r3, r3, #1
1000293c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000293e:	f7ff f947 	bl	10001bd0 <HAL_GetTick>
10002942:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002944:	e008      	b.n	10002958 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10002946:	f7ff f943 	bl	10001bd0 <HAL_GetTick>
1000294a:	4602      	mov	r2, r0
1000294c:	68bb      	ldr	r3, [r7, #8]
1000294e:	1ad3      	subs	r3, r2, r3
10002950:	2b64      	cmp	r3, #100	@ 0x64
10002952:	d901      	bls.n	10002958 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10002954:	2303      	movs	r3, #3
10002956:	e193      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002958:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000295c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002960:	f003 0301 	and.w	r3, r3, #1
10002964:	2b01      	cmp	r3, #1
10002966:	d1ee      	bne.n	10002946 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10002968:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000296c:	699b      	ldr	r3, [r3, #24]
1000296e:	f023 0203 	bic.w	r2, r3, #3
10002972:	687b      	ldr	r3, [r7, #4]
10002974:	695b      	ldr	r3, [r3, #20]
10002976:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000297a:	4313      	orrs	r3, r2
1000297c:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000297e:	f7ff f927 	bl	10001bd0 <HAL_GetTick>
10002982:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10002984:	e008      	b.n	10002998 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10002986:	f7ff f923 	bl	10001bd0 <HAL_GetTick>
1000298a:	4602      	mov	r2, r0
1000298c:	68bb      	ldr	r3, [r7, #8]
1000298e:	1ad3      	subs	r3, r2, r3
10002990:	2b64      	cmp	r3, #100	@ 0x64
10002992:	d901      	bls.n	10002998 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10002994:	2303      	movs	r3, #3
10002996:	e173      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10002998:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000299c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100029a0:	f003 0304 	and.w	r3, r3, #4
100029a4:	2b04      	cmp	r3, #4
100029a6:	d1ee      	bne.n	10002986 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100029a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029ac:	699b      	ldr	r3, [r3, #24]
100029ae:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
100029b2:	687b      	ldr	r3, [r7, #4]
100029b4:	691b      	ldr	r3, [r3, #16]
100029b6:	021b      	lsls	r3, r3, #8
100029b8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100029bc:	4313      	orrs	r3, r2
100029be:	618b      	str	r3, [r1, #24]
100029c0:	e01a      	b.n	100029f8 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
100029c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029c6:	2201      	movs	r2, #1
100029c8:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100029ca:	f7ff f901 	bl	10001bd0 <HAL_GetTick>
100029ce:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100029d0:	e008      	b.n	100029e4 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100029d2:	f7ff f8fd 	bl	10001bd0 <HAL_GetTick>
100029d6:	4602      	mov	r2, r0
100029d8:	68bb      	ldr	r3, [r7, #8]
100029da:	1ad3      	subs	r3, r2, r3
100029dc:	2b64      	cmp	r3, #100	@ 0x64
100029de:	d901      	bls.n	100029e4 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
100029e0:	2303      	movs	r3, #3
100029e2:	e14d      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100029e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029e8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100029ec:	f003 0301 	and.w	r3, r3, #1
100029f0:	2b01      	cmp	r3, #1
100029f2:	d0ee      	beq.n	100029d2 <HAL_RCC_OscConfig+0x3aa>
100029f4:	e000      	b.n	100029f8 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100029f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
100029f8:	687b      	ldr	r3, [r7, #4]
100029fa:	681b      	ldr	r3, [r3, #0]
100029fc:	f003 0310 	and.w	r3, r3, #16
10002a00:	2b00      	cmp	r3, #0
10002a02:	f000 8091 	beq.w	10002b28 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10002a06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a0a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002a0e:	f003 0303 	and.w	r3, r3, #3
10002a12:	2b02      	cmp	r3, #2
10002a14:	d107      	bne.n	10002a26 <HAL_RCC_OscConfig+0x3fe>
10002a16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a1a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002a1e:	f003 0302 	and.w	r3, r3, #2
10002a22:	2b02      	cmp	r3, #2
10002a24:	d01e      	beq.n	10002a64 <HAL_RCC_OscConfig+0x43c>
10002a26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002a2c:	f003 0303 	and.w	r3, r3, #3
10002a30:	2b02      	cmp	r3, #2
10002a32:	d107      	bne.n	10002a44 <HAL_RCC_OscConfig+0x41c>
10002a34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002a3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002a42:	d00f      	beq.n	10002a64 <HAL_RCC_OscConfig+0x43c>
10002a44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a48:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002a4c:	f003 0303 	and.w	r3, r3, #3
10002a50:	2b02      	cmp	r3, #2
10002a52:	d122      	bne.n	10002a9a <HAL_RCC_OscConfig+0x472>
10002a54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a58:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002a5c:	f003 0302 	and.w	r3, r3, #2
10002a60:	2b02      	cmp	r3, #2
10002a62:	d11a      	bne.n	10002a9a <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10002a64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a68:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002a6c:	f003 0310 	and.w	r3, r3, #16
10002a70:	2b10      	cmp	r3, #16
10002a72:	d105      	bne.n	10002a80 <HAL_RCC_OscConfig+0x458>
10002a74:	687b      	ldr	r3, [r7, #4]
10002a76:	69db      	ldr	r3, [r3, #28]
10002a78:	2b10      	cmp	r3, #16
10002a7a:	d001      	beq.n	10002a80 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10002a7c:	2301      	movs	r3, #1
10002a7e:	e0ff      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10002a80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a84:	69db      	ldr	r3, [r3, #28]
10002a86:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10002a8a:	687b      	ldr	r3, [r7, #4]
10002a8c:	6a1b      	ldr	r3, [r3, #32]
10002a8e:	021b      	lsls	r3, r3, #8
10002a90:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a94:	4313      	orrs	r3, r2
10002a96:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10002a98:	e046      	b.n	10002b28 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10002a9a:	687b      	ldr	r3, [r7, #4]
10002a9c:	69db      	ldr	r3, [r3, #28]
10002a9e:	2b00      	cmp	r3, #0
10002aa0:	d029      	beq.n	10002af6 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10002aa2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002aa6:	68db      	ldr	r3, [r3, #12]
10002aa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002aac:	f043 0310 	orr.w	r3, r3, #16
10002ab0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002ab2:	f7ff f88d 	bl	10001bd0 <HAL_GetTick>
10002ab6:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002ab8:	e008      	b.n	10002acc <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10002aba:	f7ff f889 	bl	10001bd0 <HAL_GetTick>
10002abe:	4602      	mov	r2, r0
10002ac0:	68bb      	ldr	r3, [r7, #8]
10002ac2:	1ad3      	subs	r3, r2, r3
10002ac4:	2b64      	cmp	r3, #100	@ 0x64
10002ac6:	d901      	bls.n	10002acc <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10002ac8:	2303      	movs	r3, #3
10002aca:	e0d9      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002acc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ad0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002ad4:	f003 0310 	and.w	r3, r3, #16
10002ad8:	2b10      	cmp	r3, #16
10002ada:	d1ee      	bne.n	10002aba <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10002adc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ae0:	69db      	ldr	r3, [r3, #28]
10002ae2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10002ae6:	687b      	ldr	r3, [r7, #4]
10002ae8:	6a1b      	ldr	r3, [r3, #32]
10002aea:	021b      	lsls	r3, r3, #8
10002aec:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002af0:	4313      	orrs	r3, r2
10002af2:	61cb      	str	r3, [r1, #28]
10002af4:	e018      	b.n	10002b28 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10002af6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002afa:	2210      	movs	r2, #16
10002afc:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002afe:	f7ff f867 	bl	10001bd0 <HAL_GetTick>
10002b02:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10002b04:	e008      	b.n	10002b18 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10002b06:	f7ff f863 	bl	10001bd0 <HAL_GetTick>
10002b0a:	4602      	mov	r2, r0
10002b0c:	68bb      	ldr	r3, [r7, #8]
10002b0e:	1ad3      	subs	r3, r2, r3
10002b10:	2b64      	cmp	r3, #100	@ 0x64
10002b12:	d901      	bls.n	10002b18 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10002b14:	2303      	movs	r3, #3
10002b16:	e0b3      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10002b18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b1c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002b20:	f003 0310 	and.w	r3, r3, #16
10002b24:	2b10      	cmp	r3, #16
10002b26:	d0ee      	beq.n	10002b06 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10002b28:	687b      	ldr	r3, [r7, #4]
10002b2a:	681b      	ldr	r3, [r3, #0]
10002b2c:	f003 0308 	and.w	r3, r3, #8
10002b30:	2b00      	cmp	r3, #0
10002b32:	d042      	beq.n	10002bba <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10002b34:	687b      	ldr	r3, [r7, #4]
10002b36:	699b      	ldr	r3, [r3, #24]
10002b38:	2b00      	cmp	r3, #0
10002b3a:	d01f      	beq.n	10002b7c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10002b3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b40:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002b44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b48:	f043 0301 	orr.w	r3, r3, #1
10002b4c:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002b50:	f7ff f83e 	bl	10001bd0 <HAL_GetTick>
10002b54:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10002b56:	e008      	b.n	10002b6a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10002b58:	f7ff f83a 	bl	10001bd0 <HAL_GetTick>
10002b5c:	4602      	mov	r2, r0
10002b5e:	68bb      	ldr	r3, [r7, #8]
10002b60:	1ad3      	subs	r3, r2, r3
10002b62:	2b64      	cmp	r3, #100	@ 0x64
10002b64:	d901      	bls.n	10002b6a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10002b66:	2303      	movs	r3, #3
10002b68:	e08a      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10002b6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b6e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002b72:	f003 0302 	and.w	r3, r3, #2
10002b76:	2b02      	cmp	r3, #2
10002b78:	d1ee      	bne.n	10002b58 <HAL_RCC_OscConfig+0x530>
10002b7a:	e01e      	b.n	10002bba <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10002b7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b80:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002b84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b88:	f023 0301 	bic.w	r3, r3, #1
10002b8c:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002b90:	f7ff f81e 	bl	10001bd0 <HAL_GetTick>
10002b94:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002b96:	e008      	b.n	10002baa <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10002b98:	f7ff f81a 	bl	10001bd0 <HAL_GetTick>
10002b9c:	4602      	mov	r2, r0
10002b9e:	68bb      	ldr	r3, [r7, #8]
10002ba0:	1ad3      	subs	r3, r2, r3
10002ba2:	2b64      	cmp	r3, #100	@ 0x64
10002ba4:	d901      	bls.n	10002baa <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10002ba6:	2303      	movs	r3, #3
10002ba8:	e06a      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002baa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bae:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002bb2:	f003 0302 	and.w	r3, r3, #2
10002bb6:	2b02      	cmp	r3, #2
10002bb8:	d0ee      	beq.n	10002b98 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10002bba:	687b      	ldr	r3, [r7, #4]
10002bbc:	681b      	ldr	r3, [r3, #0]
10002bbe:	f003 0304 	and.w	r3, r3, #4
10002bc2:	2b00      	cmp	r3, #0
10002bc4:	d02b      	beq.n	10002c1e <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10002bc6:	4b07      	ldr	r3, [pc, #28]	@ (10002be4 <HAL_RCC_OscConfig+0x5bc>)
10002bc8:	681b      	ldr	r3, [r3, #0]
10002bca:	4a06      	ldr	r2, [pc, #24]	@ (10002be4 <HAL_RCC_OscConfig+0x5bc>)
10002bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10002bd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10002bd2:	f7fe fffd 	bl	10001bd0 <HAL_GetTick>
10002bd6:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002bd8:	e00f      	b.n	10002bfa <HAL_RCC_OscConfig+0x5d2>
10002bda:	bf00      	nop
10002bdc:	10020000 	.word	0x10020000
10002be0:	1002000c 	.word	0x1002000c
10002be4:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10002be8:	f7fe fff2 	bl	10001bd0 <HAL_GetTick>
10002bec:	4602      	mov	r2, r0
10002bee:	68bb      	ldr	r3, [r7, #8]
10002bf0:	1ad3      	subs	r3, r2, r3
10002bf2:	2b64      	cmp	r3, #100	@ 0x64
10002bf4:	d901      	bls.n	10002bfa <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10002bf6:	2303      	movs	r3, #3
10002bf8:	e042      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002bfa:	4b23      	ldr	r3, [pc, #140]	@ (10002c88 <HAL_RCC_OscConfig+0x660>)
10002bfc:	681b      	ldr	r3, [r3, #0]
10002bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002c02:	2b00      	cmp	r3, #0
10002c04:	d0f0      	beq.n	10002be8 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10002c06:	687b      	ldr	r3, [r7, #4]
10002c08:	689b      	ldr	r3, [r3, #8]
10002c0a:	4618      	mov	r0, r3
10002c0c:	f000 f8a9 	bl	10002d62 <HAL_RCC_LSEConfig>
10002c10:	4603      	mov	r3, r0
10002c12:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10002c14:	7bfb      	ldrb	r3, [r7, #15]
10002c16:	2b00      	cmp	r3, #0
10002c18:	d001      	beq.n	10002c1e <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10002c1a:	7bfb      	ldrb	r3, [r7, #15]
10002c1c:	e030      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10002c1e:	687b      	ldr	r3, [r7, #4]
10002c20:	3324      	adds	r3, #36	@ 0x24
10002c22:	4618      	mov	r0, r3
10002c24:	f000 f91a 	bl	10002e5c <RCC_PLL1_Config>
10002c28:	4603      	mov	r3, r0
10002c2a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002c2c:	7bfb      	ldrb	r3, [r7, #15]
10002c2e:	2b00      	cmp	r3, #0
10002c30:	d001      	beq.n	10002c36 <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10002c32:	7bfb      	ldrb	r3, [r7, #15]
10002c34:	e024      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10002c36:	687b      	ldr	r3, [r7, #4]
10002c38:	3360      	adds	r3, #96	@ 0x60
10002c3a:	4618      	mov	r0, r3
10002c3c:	f000 fecc 	bl	100039d8 <RCCEx_PLL2_Config>
10002c40:	4603      	mov	r3, r0
10002c42:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002c44:	7bfb      	ldrb	r3, [r7, #15]
10002c46:	2b00      	cmp	r3, #0
10002c48:	d001      	beq.n	10002c4e <HAL_RCC_OscConfig+0x626>
  {
    return result;
10002c4a:	7bfb      	ldrb	r3, [r7, #15]
10002c4c:	e018      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10002c4e:	687b      	ldr	r3, [r7, #4]
10002c50:	339c      	adds	r3, #156	@ 0x9c
10002c52:	4618      	mov	r0, r3
10002c54:	f001 f842 	bl	10003cdc <RCCEx_PLL3_Config>
10002c58:	4603      	mov	r3, r0
10002c5a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002c5c:	7bfb      	ldrb	r3, [r7, #15]
10002c5e:	2b00      	cmp	r3, #0
10002c60:	d001      	beq.n	10002c66 <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10002c62:	7bfb      	ldrb	r3, [r7, #15]
10002c64:	e00c      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10002c66:	687b      	ldr	r3, [r7, #4]
10002c68:	33d8      	adds	r3, #216	@ 0xd8
10002c6a:	4618      	mov	r0, r3
10002c6c:	f001 f9a0 	bl	10003fb0 <RCCEx_PLL4_Config>
10002c70:	4603      	mov	r3, r0
10002c72:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002c74:	7bfb      	ldrb	r3, [r7, #15]
10002c76:	2b00      	cmp	r3, #0
10002c78:	d001      	beq.n	10002c7e <HAL_RCC_OscConfig+0x656>
  {
    return result;
10002c7a:	7bfb      	ldrb	r3, [r7, #15]
10002c7c:	e000      	b.n	10002c80 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10002c7e:	2300      	movs	r3, #0
}
10002c80:	4618      	mov	r0, r3
10002c82:	3710      	adds	r7, #16
10002c84:	46bd      	mov	sp, r7
10002c86:	bd80      	pop	{r7, pc}
10002c88:	50001000 	.word	0x50001000

10002c8c <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10002c8c:	b580      	push	{r7, lr}
10002c8e:	b084      	sub	sp, #16
10002c90:	af00      	add	r7, sp, #0
10002c92:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10002c94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c98:	f44f 7280 	mov.w	r2, #256	@ 0x100
10002c9c:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002c9e:	f7fe ff97 	bl	10001bd0 <HAL_GetTick>
10002ca2:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10002ca4:	e008      	b.n	10002cb8 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10002ca6:	f7fe ff93 	bl	10001bd0 <HAL_GetTick>
10002caa:	4602      	mov	r2, r0
10002cac:	68fb      	ldr	r3, [r7, #12]
10002cae:	1ad3      	subs	r3, r2, r3
10002cb0:	2b64      	cmp	r3, #100	@ 0x64
10002cb2:	d901      	bls.n	10002cb8 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10002cb4:	2303      	movs	r3, #3
10002cb6:	e050      	b.n	10002d5a <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10002cb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002cbc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002cc8:	d0ed      	beq.n	10002ca6 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10002cca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002cce:	f44f 6290 	mov.w	r2, #1152	@ 0x480
10002cd2:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10002cd4:	687b      	ldr	r3, [r7, #4]
10002cd6:	2b00      	cmp	r3, #0
10002cd8:	d03e      	beq.n	10002d58 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10002cda:	687b      	ldr	r3, [r7, #4]
10002cdc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
10002ce0:	d108      	bne.n	10002cf4 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10002ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ce6:	68db      	ldr	r3, [r3, #12]
10002ce8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002cec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10002cf0:	60d3      	str	r3, [r2, #12]
10002cf2:	e013      	b.n	10002d1c <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10002cf4:	687b      	ldr	r3, [r7, #4]
10002cf6:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
10002cfa:	d10f      	bne.n	10002d1c <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10002cfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d00:	68db      	ldr	r3, [r3, #12]
10002d02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10002d0a:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10002d0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d10:	68db      	ldr	r3, [r3, #12]
10002d12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10002d1a:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10002d1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d20:	68db      	ldr	r3, [r3, #12]
10002d22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10002d2a:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002d2c:	f7fe ff50 	bl	10001bd0 <HAL_GetTick>
10002d30:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002d32:	e008      	b.n	10002d46 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10002d34:	f7fe ff4c 	bl	10001bd0 <HAL_GetTick>
10002d38:	4602      	mov	r2, r0
10002d3a:	68fb      	ldr	r3, [r7, #12]
10002d3c:	1ad3      	subs	r3, r2, r3
10002d3e:	2b64      	cmp	r3, #100	@ 0x64
10002d40:	d901      	bls.n	10002d46 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10002d42:	2303      	movs	r3, #3
10002d44:	e009      	b.n	10002d5a <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002d46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d4a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002d56:	d1ed      	bne.n	10002d34 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10002d58:	2300      	movs	r3, #0
}
10002d5a:	4618      	mov	r0, r3
10002d5c:	3710      	adds	r7, #16
10002d5e:	46bd      	mov	sp, r7
10002d60:	bd80      	pop	{r7, pc}

10002d62 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10002d62:	b580      	push	{r7, lr}
10002d64:	b084      	sub	sp, #16
10002d66:	af00      	add	r7, sp, #0
10002d68:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10002d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002d72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d76:	f023 0301 	bic.w	r3, r3, #1
10002d7a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002d7e:	f7fe ff27 	bl	10001bd0 <HAL_GetTick>
10002d82:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10002d84:	e00a      	b.n	10002d9c <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10002d86:	f7fe ff23 	bl	10001bd0 <HAL_GetTick>
10002d8a:	4602      	mov	r2, r0
10002d8c:	68fb      	ldr	r3, [r7, #12]
10002d8e:	1ad3      	subs	r3, r2, r3
10002d90:	f241 3288 	movw	r2, #5000	@ 0x1388
10002d94:	4293      	cmp	r3, r2
10002d96:	d901      	bls.n	10002d9c <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10002d98:	2303      	movs	r3, #3
10002d9a:	e05b      	b.n	10002e54 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10002d9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002da0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002da4:	f003 0304 	and.w	r3, r3, #4
10002da8:	2b04      	cmp	r3, #4
10002daa:	d0ec      	beq.n	10002d86 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10002dac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002db0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002db4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002db8:	f023 030a 	bic.w	r3, r3, #10
10002dbc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10002dc0:	687b      	ldr	r3, [r7, #4]
10002dc2:	2b00      	cmp	r3, #0
10002dc4:	d045      	beq.n	10002e52 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10002dc6:	687b      	ldr	r3, [r7, #4]
10002dc8:	2b03      	cmp	r3, #3
10002dca:	d10a      	bne.n	10002de2 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10002dcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002dd4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002dd8:	f043 0302 	orr.w	r3, r3, #2
10002ddc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10002de0:	e016      	b.n	10002e10 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10002de2:	687b      	ldr	r3, [r7, #4]
10002de4:	2b0b      	cmp	r3, #11
10002de6:	d113      	bne.n	10002e10 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10002de8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002df0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002df4:	f043 0308 	orr.w	r3, r3, #8
10002df8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10002dfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002e04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e08:	f043 0302 	orr.w	r3, r3, #2
10002e0c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10002e10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002e18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e1c:	f043 0301 	orr.w	r3, r3, #1
10002e20:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002e24:	f7fe fed4 	bl	10001bd0 <HAL_GetTick>
10002e28:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10002e2a:	e00a      	b.n	10002e42 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10002e2c:	f7fe fed0 	bl	10001bd0 <HAL_GetTick>
10002e30:	4602      	mov	r2, r0
10002e32:	68fb      	ldr	r3, [r7, #12]
10002e34:	1ad3      	subs	r3, r2, r3
10002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
10002e3a:	4293      	cmp	r3, r2
10002e3c:	d901      	bls.n	10002e42 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10002e3e:	2303      	movs	r3, #3
10002e40:	e008      	b.n	10002e54 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10002e42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002e4a:	f003 0304 	and.w	r3, r3, #4
10002e4e:	2b04      	cmp	r3, #4
10002e50:	d1ec      	bne.n	10002e2c <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10002e52:	2300      	movs	r3, #0
}
10002e54:	4618      	mov	r0, r3
10002e56:	3710      	adds	r7, #16
10002e58:	46bd      	mov	sp, r7
10002e5a:	bd80      	pop	{r7, pc}

10002e5c <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10002e5c:	b580      	push	{r7, lr}
10002e5e:	b084      	sub	sp, #16
10002e60:	af00      	add	r7, sp, #0
10002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10002e64:	687b      	ldr	r3, [r7, #4]
10002e66:	681b      	ldr	r3, [r3, #0]
10002e68:	2b00      	cmp	r3, #0
10002e6a:	f000 8174 	beq.w	10003156 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10002e6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e72:	6a1b      	ldr	r3, [r3, #32]
10002e74:	f003 0303 	and.w	r3, r3, #3
10002e78:	2b02      	cmp	r3, #2
10002e7a:	d108      	bne.n	10002e8e <RCC_PLL1_Config+0x32>
10002e7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e80:	6a1b      	ldr	r3, [r3, #32]
10002e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002e8a:	f000 8162 	beq.w	10003152 <RCC_PLL1_Config+0x2f6>
10002e8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e92:	6a1b      	ldr	r3, [r3, #32]
10002e94:	f003 0303 	and.w	r3, r3, #3
10002e98:	2b03      	cmp	r3, #3
10002e9a:	d108      	bne.n	10002eae <RCC_PLL1_Config+0x52>
10002e9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ea0:	6a1b      	ldr	r3, [r3, #32]
10002ea2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002eaa:	f000 8152 	beq.w	10003152 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10002eae:	687b      	ldr	r3, [r7, #4]
10002eb0:	681b      	ldr	r3, [r3, #0]
10002eb2:	2b02      	cmp	r3, #2
10002eb4:	f040 8123 	bne.w	100030fe <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002eb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002ec0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002ec8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10002ecc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002ed4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ed8:	f023 0301 	bic.w	r3, r3, #1
10002edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002ee0:	f7fe fe76 	bl	10001bd0 <HAL_GetTick>
10002ee4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002ee6:	e008      	b.n	10002efa <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002ee8:	f7fe fe72 	bl	10001bd0 <HAL_GetTick>
10002eec:	4602      	mov	r2, r0
10002eee:	68fb      	ldr	r3, [r7, #12]
10002ef0:	1ad3      	subs	r3, r2, r3
10002ef2:	2b64      	cmp	r3, #100	@ 0x64
10002ef4:	d901      	bls.n	10002efa <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10002ef6:	2303      	movs	r3, #3
10002ef8:	e12e      	b.n	10003158 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002efa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002f02:	f003 0302 	and.w	r3, r3, #2
10002f06:	2b02      	cmp	r3, #2
10002f08:	d0ee      	beq.n	10002ee8 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10002f0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002f10:	f003 0307 	and.w	r3, r3, #7
10002f14:	2b02      	cmp	r3, #2
10002f16:	d112      	bne.n	10002f3e <RCC_PLL1_Config+0xe2>
10002f18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002f1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002f22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002f26:	d10a      	bne.n	10002f3e <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10002f28:	687b      	ldr	r3, [r7, #4]
10002f2a:	685a      	ldr	r2, [r3, #4]
10002f2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002f32:	f003 0303 	and.w	r3, r3, #3
10002f36:	429a      	cmp	r2, r3
10002f38:	d00c      	beq.n	10002f54 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10002f3a:	2301      	movs	r3, #1
10002f3c:	e10c      	b.n	10003158 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10002f3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002f44:	f023 0203 	bic.w	r2, r3, #3
10002f48:	687b      	ldr	r3, [r7, #4]
10002f4a:	685b      	ldr	r3, [r3, #4]
10002f4c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002f50:	4313      	orrs	r3, r2
10002f52:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10002f54:	e008      	b.n	10002f68 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002f56:	f7fe fe3b 	bl	10001bd0 <HAL_GetTick>
10002f5a:	4602      	mov	r2, r0
10002f5c:	68fb      	ldr	r3, [r7, #12]
10002f5e:	1ad3      	subs	r3, r2, r3
10002f60:	2b64      	cmp	r3, #100	@ 0x64
10002f62:	d901      	bls.n	10002f68 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10002f64:	2303      	movs	r3, #3
10002f66:	e0f7      	b.n	10003158 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10002f68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002f6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002f72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002f76:	d1ee      	bne.n	10002f56 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10002f78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f7c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10002f80:	4b77      	ldr	r3, [pc, #476]	@ (10003160 <RCC_PLL1_Config+0x304>)
10002f82:	4013      	ands	r3, r2
10002f84:	687a      	ldr	r2, [r7, #4]
10002f86:	68d2      	ldr	r2, [r2, #12]
10002f88:	1e51      	subs	r1, r2, #1
10002f8a:	687a      	ldr	r2, [r7, #4]
10002f8c:	6892      	ldr	r2, [r2, #8]
10002f8e:	3a01      	subs	r2, #1
10002f90:	0412      	lsls	r2, r2, #16
10002f92:	430a      	orrs	r2, r1
10002f94:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002f98:	4313      	orrs	r3, r2
10002f9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
10002f9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10002fa6:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10002faa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10002fae:	687a      	ldr	r2, [r7, #4]
10002fb0:	6912      	ldr	r2, [r2, #16]
10002fb2:	1e51      	subs	r1, r2, #1
10002fb4:	687a      	ldr	r2, [r7, #4]
10002fb6:	6952      	ldr	r2, [r2, #20]
10002fb8:	3a01      	subs	r2, #1
10002fba:	0212      	lsls	r2, r2, #8
10002fbc:	4311      	orrs	r1, r2
10002fbe:	687a      	ldr	r2, [r7, #4]
10002fc0:	6992      	ldr	r2, [r2, #24]
10002fc2:	3a01      	subs	r2, #1
10002fc4:	0412      	lsls	r2, r2, #16
10002fc6:	430a      	orrs	r2, r1
10002fc8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002fcc:	4313      	orrs	r3, r2
10002fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10002fd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10002fda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002fe2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10002fe6:	687b      	ldr	r3, [r7, #4]
10002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002fea:	2b02      	cmp	r3, #2
10002fec:	d003      	beq.n	10002ff6 <RCC_PLL1_Config+0x19a>
10002fee:	687b      	ldr	r3, [r7, #4]
10002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002ff2:	2b00      	cmp	r3, #0
10002ff4:	d10c      	bne.n	10003010 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10002ff6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10002ffe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003002:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003006:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000300a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
1000300e:	e00f      	b.n	10003030 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10003010:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10003018:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000301c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003020:	687a      	ldr	r2, [r7, #4]
10003022:	6a12      	ldr	r2, [r2, #32]
10003024:	00d2      	lsls	r2, r2, #3
10003026:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000302a:	4313      	orrs	r3, r2
1000302c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10003030:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10003038:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000303c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10003040:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003044:	687b      	ldr	r3, [r7, #4]
10003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003048:	2b02      	cmp	r3, #2
1000304a:	d124      	bne.n	10003096 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
1000304c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
10003054:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003058:	687b      	ldr	r3, [r7, #4]
1000305a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
1000305c:	687b      	ldr	r3, [r7, #4]
1000305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003060:	4319      	orrs	r1, r3
10003062:	687b      	ldr	r3, [r7, #4]
10003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003066:	4319      	orrs	r1, r3
10003068:	687b      	ldr	r3, [r7, #4]
1000306a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000306c:	4319      	orrs	r1, r3
1000306e:	687b      	ldr	r3, [r7, #4]
10003070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003072:	041b      	lsls	r3, r3, #16
10003074:	430b      	orrs	r3, r1
10003076:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000307a:	4313      	orrs	r3, r2
1000307c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10003080:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003088:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000308c:	f043 0304 	orr.w	r3, r3, #4
10003090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
10003094:	e009      	b.n	100030aa <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10003096:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000309a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000309e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030a2:	f023 0304 	bic.w	r3, r3, #4
100030a6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
100030aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100030b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030b6:	f043 0301 	orr.w	r3, r3, #1
100030ba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100030be:	f7fe fd87 	bl	10001bd0 <HAL_GetTick>
100030c2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100030c4:	e008      	b.n	100030d8 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100030c6:	f7fe fd83 	bl	10001bd0 <HAL_GetTick>
100030ca:	4602      	mov	r2, r0
100030cc:	68fb      	ldr	r3, [r7, #12]
100030ce:	1ad3      	subs	r3, r2, r3
100030d0:	2b64      	cmp	r3, #100	@ 0x64
100030d2:	d901      	bls.n	100030d8 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
100030d4:	2303      	movs	r3, #3
100030d6:	e03f      	b.n	10003158 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100030d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100030e0:	f003 0302 	and.w	r3, r3, #2
100030e4:	2b02      	cmp	r3, #2
100030e6:	d1ee      	bne.n	100030c6 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100030e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100030f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030f4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100030f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100030fc:	e02b      	b.n	10003156 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100030fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003106:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000310a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000310e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10003112:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000311a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000311e:	f023 0301 	bic.w	r3, r3, #1
10003122:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003126:	f7fe fd53 	bl	10001bd0 <HAL_GetTick>
1000312a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000312c:	e008      	b.n	10003140 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000312e:	f7fe fd4f 	bl	10001bd0 <HAL_GetTick>
10003132:	4602      	mov	r2, r0
10003134:	68fb      	ldr	r3, [r7, #12]
10003136:	1ad3      	subs	r3, r2, r3
10003138:	2b64      	cmp	r3, #100	@ 0x64
1000313a:	d901      	bls.n	10003140 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
1000313c:	2303      	movs	r3, #3
1000313e:	e00b      	b.n	10003158 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10003140:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003148:	f003 0302 	and.w	r3, r3, #2
1000314c:	2b02      	cmp	r3, #2
1000314e:	d0ee      	beq.n	1000312e <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10003150:	e001      	b.n	10003156 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003152:	2301      	movs	r3, #1
10003154:	e000      	b.n	10003158 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10003156:	2300      	movs	r3, #0

}
10003158:	4618      	mov	r0, r3
1000315a:	3710      	adds	r7, #16
1000315c:	46bd      	mov	sp, r7
1000315e:	bd80      	pop	{r7, pc}
10003160:	ffc0fe00 	.word	0xffc0fe00

10003164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10003164:	b580      	push	{r7, lr}
10003166:	b084      	sub	sp, #16
10003168:	af00      	add	r7, sp, #0
1000316a:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
1000316c:	2300      	movs	r3, #0
1000316e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10003170:	687b      	ldr	r3, [r7, #4]
10003172:	2b00      	cmp	r3, #0
10003174:	d101      	bne.n	1000317a <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10003176:	2301      	movs	r3, #1
10003178:	e102      	b.n	10003380 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
1000317a:	687b      	ldr	r3, [r7, #4]
1000317c:	681b      	ldr	r3, [r3, #0]
1000317e:	f003 0301 	and.w	r3, r3, #1
10003182:	2b00      	cmp	r3, #0
10003184:	d00b      	beq.n	1000319e <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10003186:	687b      	ldr	r3, [r7, #4]
10003188:	3304      	adds	r3, #4
1000318a:	4618      	mov	r0, r3
1000318c:	f000 f8fc 	bl	10003388 <RCC_MPUConfig>
10003190:	4603      	mov	r3, r0
10003192:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10003194:	7bfb      	ldrb	r3, [r7, #15]
10003196:	2b00      	cmp	r3, #0
10003198:	d001      	beq.n	1000319e <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
1000319a:	7bfb      	ldrb	r3, [r7, #15]
1000319c:	e0f0      	b.n	10003380 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
1000319e:	687b      	ldr	r3, [r7, #4]
100031a0:	681b      	ldr	r3, [r3, #0]
100031a2:	f003 0302 	and.w	r3, r3, #2
100031a6:	2b00      	cmp	r3, #0
100031a8:	d00b      	beq.n	100031c2 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
100031aa:	687b      	ldr	r3, [r7, #4]
100031ac:	330c      	adds	r3, #12
100031ae:	4618      	mov	r0, r3
100031b0:	f000 f960 	bl	10003474 <RCC_AXISSConfig>
100031b4:	4603      	mov	r3, r0
100031b6:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100031b8:	7bfb      	ldrb	r3, [r7, #15]
100031ba:	2b00      	cmp	r3, #0
100031bc:	d001      	beq.n	100031c2 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
100031be:	7bfb      	ldrb	r3, [r7, #15]
100031c0:	e0de      	b.n	10003380 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100031c2:	687b      	ldr	r3, [r7, #4]
100031c4:	681b      	ldr	r3, [r3, #0]
100031c6:	f003 0304 	and.w	r3, r3, #4
100031ca:	2b00      	cmp	r3, #0
100031cc:	d00b      	beq.n	100031e6 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
100031ce:	687b      	ldr	r3, [r7, #4]
100031d0:	3314      	adds	r3, #20
100031d2:	4618      	mov	r0, r3
100031d4:	f000 f9e6 	bl	100035a4 <RCC_MCUConfig>
100031d8:	4603      	mov	r3, r0
100031da:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100031dc:	7bfb      	ldrb	r3, [r7, #15]
100031de:	2b00      	cmp	r3, #0
100031e0:	d001      	beq.n	100031e6 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
100031e2:	7bfb      	ldrb	r3, [r7, #15]
100031e4:	e0cc      	b.n	10003380 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
100031e6:	687b      	ldr	r3, [r7, #4]
100031e8:	681b      	ldr	r3, [r3, #0]
100031ea:	f003 0308 	and.w	r3, r3, #8
100031ee:	2b00      	cmp	r3, #0
100031f0:	d020      	beq.n	10003234 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100031f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100031f8:	f023 0207 	bic.w	r2, r3, #7
100031fc:	687b      	ldr	r3, [r7, #4]
100031fe:	69db      	ldr	r3, [r3, #28]
10003200:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003204:	4313      	orrs	r3, r2
10003206:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003208:	f7fe fce2 	bl	10001bd0 <HAL_GetTick>
1000320c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
1000320e:	e009      	b.n	10003224 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003210:	f7fe fcde 	bl	10001bd0 <HAL_GetTick>
10003214:	4602      	mov	r2, r0
10003216:	68bb      	ldr	r3, [r7, #8]
10003218:	1ad3      	subs	r3, r2, r3
1000321a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000321e:	d901      	bls.n	10003224 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10003220:	2303      	movs	r3, #3
10003222:	e0ad      	b.n	10003380 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10003224:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1000322a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000322e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003232:	d1ed      	bne.n	10003210 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10003234:	687b      	ldr	r3, [r7, #4]
10003236:	681b      	ldr	r3, [r3, #0]
10003238:	f003 0310 	and.w	r3, r3, #16
1000323c:	2b00      	cmp	r3, #0
1000323e:	d020      	beq.n	10003282 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10003240:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10003246:	f023 0207 	bic.w	r2, r3, #7
1000324a:	687b      	ldr	r3, [r7, #4]
1000324c:	6a1b      	ldr	r3, [r3, #32]
1000324e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003252:	4313      	orrs	r3, r2
10003254:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003256:	f7fe fcbb 	bl	10001bd0 <HAL_GetTick>
1000325a:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000325c:	e009      	b.n	10003272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000325e:	f7fe fcb7 	bl	10001bd0 <HAL_GetTick>
10003262:	4602      	mov	r2, r0
10003264:	68bb      	ldr	r3, [r7, #8]
10003266:	1ad3      	subs	r3, r2, r3
10003268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000326c:	d901      	bls.n	10003272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
1000326e:	2303      	movs	r3, #3
10003270:	e086      	b.n	10003380 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10003272:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10003278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000327c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003280:	d1ed      	bne.n	1000325e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10003282:	687b      	ldr	r3, [r7, #4]
10003284:	681b      	ldr	r3, [r3, #0]
10003286:	f003 0320 	and.w	r3, r3, #32
1000328a:	2b00      	cmp	r3, #0
1000328c:	d023      	beq.n	100032d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
1000328e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003292:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10003296:	f023 0207 	bic.w	r2, r3, #7
1000329a:	687b      	ldr	r3, [r7, #4]
1000329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000329e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100032a2:	4313      	orrs	r3, r2
100032a4:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100032a8:	f7fe fc92 	bl	10001bd0 <HAL_GetTick>
100032ac:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100032ae:	e009      	b.n	100032c4 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100032b0:	f7fe fc8e 	bl	10001bd0 <HAL_GetTick>
100032b4:	4602      	mov	r2, r0
100032b6:	68bb      	ldr	r3, [r7, #8]
100032b8:	1ad3      	subs	r3, r2, r3
100032ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100032be:	d901      	bls.n	100032c4 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
100032c0:	2303      	movs	r3, #3
100032c2:	e05d      	b.n	10003380 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100032c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032c8:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
100032cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100032d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100032d4:	d1ec      	bne.n	100032b0 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
100032d6:	687b      	ldr	r3, [r7, #4]
100032d8:	681b      	ldr	r3, [r3, #0]
100032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100032de:	2b00      	cmp	r3, #0
100032e0:	d023      	beq.n	1000332a <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
100032e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032e6:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
100032ea:	f023 0207 	bic.w	r2, r3, #7
100032ee:	687b      	ldr	r3, [r7, #4]
100032f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100032f2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100032f6:	4313      	orrs	r3, r2
100032f8:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100032fc:	f7fe fc68 	bl	10001bd0 <HAL_GetTick>
10003300:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10003302:	e009      	b.n	10003318 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003304:	f7fe fc64 	bl	10001bd0 <HAL_GetTick>
10003308:	4602      	mov	r2, r0
1000330a:	68bb      	ldr	r3, [r7, #8]
1000330c:	1ad3      	subs	r3, r2, r3
1000330e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003312:	d901      	bls.n	10003318 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10003314:	2303      	movs	r3, #3
10003316:	e033      	b.n	10003380 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10003318:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000331c:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10003320:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003328:	d1ec      	bne.n	10003304 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
1000332a:	687b      	ldr	r3, [r7, #4]
1000332c:	681b      	ldr	r3, [r3, #0]
1000332e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10003332:	2b00      	cmp	r3, #0
10003334:	d023      	beq.n	1000337e <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10003336:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000333a:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
1000333e:	f023 0207 	bic.w	r2, r3, #7
10003342:	687b      	ldr	r3, [r7, #4]
10003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003346:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000334a:	4313      	orrs	r3, r2
1000334c:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003350:	f7fe fc3e 	bl	10001bd0 <HAL_GetTick>
10003354:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10003356:	e009      	b.n	1000336c <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003358:	f7fe fc3a 	bl	10001bd0 <HAL_GetTick>
1000335c:	4602      	mov	r2, r0
1000335e:	68bb      	ldr	r3, [r7, #8]
10003360:	1ad3      	subs	r3, r2, r3
10003362:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003366:	d901      	bls.n	1000336c <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10003368:	2303      	movs	r3, #3
1000336a:	e009      	b.n	10003380 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000336c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003370:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10003374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000337c:	d1ec      	bne.n	10003358 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
1000337e:	2300      	movs	r3, #0
}
10003380:	4618      	mov	r0, r3
10003382:	3710      	adds	r7, #16
10003384:	46bd      	mov	sp, r7
10003386:	bd80      	pop	{r7, pc}

10003388 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10003388:	b580      	push	{r7, lr}
1000338a:	b084      	sub	sp, #16
1000338c:	af00      	add	r7, sp, #0
1000338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10003390:	687b      	ldr	r3, [r7, #4]
10003392:	681b      	ldr	r3, [r3, #0]
10003394:	2b03      	cmp	r3, #3
10003396:	d840      	bhi.n	1000341a <RCC_MPUConfig+0x92>
10003398:	a201      	add	r2, pc, #4	@ (adr r2, 100033a0 <RCC_MPUConfig+0x18>)
1000339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000339e:	bf00      	nop
100033a0:	100033b1 	.word	0x100033b1
100033a4:	100033c5 	.word	0x100033c5
100033a8:	100033db 	.word	0x100033db
100033ac:	100033ef 	.word	0x100033ef
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100033b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033b4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100033b8:	f003 0301 	and.w	r3, r3, #1
100033bc:	2b01      	cmp	r3, #1
100033be:	d02e      	beq.n	1000341e <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
100033c0:	2301      	movs	r3, #1
100033c2:	e053      	b.n	1000346c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100033c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033c8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100033cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100033d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100033d4:	d025      	beq.n	10003422 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
100033d6:	2301      	movs	r3, #1
100033d8:	e048      	b.n	1000346c <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100033da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100033e2:	f003 0302 	and.w	r3, r3, #2
100033e6:	2b02      	cmp	r3, #2
100033e8:	d01d      	beq.n	10003426 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
100033ea:	2301      	movs	r3, #1
100033ec:	e03e      	b.n	1000346c <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100033ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100033f6:	f003 0302 	and.w	r3, r3, #2
100033fa:	2b02      	cmp	r3, #2
100033fc:	d001      	beq.n	10003402 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
100033fe:	2301      	movs	r3, #1
10003400:	e034      	b.n	1000346c <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10003402:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003408:	f023 0207 	bic.w	r2, r3, #7
1000340c:	687b      	ldr	r3, [r7, #4]
1000340e:	685b      	ldr	r3, [r3, #4]
10003410:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003414:	4313      	orrs	r3, r2
10003416:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
10003418:	e006      	b.n	10003428 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
1000341a:	2301      	movs	r3, #1
1000341c:	e026      	b.n	1000346c <RCC_MPUConfig+0xe4>
      break;
1000341e:	bf00      	nop
10003420:	e002      	b.n	10003428 <RCC_MPUConfig+0xa0>
      break;
10003422:	bf00      	nop
10003424:	e000      	b.n	10003428 <RCC_MPUConfig+0xa0>
      break;
10003426:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10003428:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000342c:	6a1b      	ldr	r3, [r3, #32]
1000342e:	f023 0203 	bic.w	r2, r3, #3
10003432:	687b      	ldr	r3, [r7, #4]
10003434:	681b      	ldr	r3, [r3, #0]
10003436:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000343a:	4313      	orrs	r3, r2
1000343c:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000343e:	f7fe fbc7 	bl	10001bd0 <HAL_GetTick>
10003442:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10003444:	e009      	b.n	1000345a <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003446:	f7fe fbc3 	bl	10001bd0 <HAL_GetTick>
1000344a:	4602      	mov	r2, r0
1000344c:	68fb      	ldr	r3, [r7, #12]
1000344e:	1ad3      	subs	r3, r2, r3
10003450:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003454:	d901      	bls.n	1000345a <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10003456:	2303      	movs	r3, #3
10003458:	e008      	b.n	1000346c <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000345a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000345e:	6a1b      	ldr	r3, [r3, #32]
10003460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003468:	d1ed      	bne.n	10003446 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
1000346a:	2300      	movs	r3, #0
}
1000346c:	4618      	mov	r0, r3
1000346e:	3710      	adds	r7, #16
10003470:	46bd      	mov	sp, r7
10003472:	bd80      	pop	{r7, pc}

10003474 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10003474:	b580      	push	{r7, lr}
10003476:	b084      	sub	sp, #16
10003478:	af00      	add	r7, sp, #0
1000347a:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
1000347c:	687b      	ldr	r3, [r7, #4]
1000347e:	681b      	ldr	r3, [r3, #0]
10003480:	2b02      	cmp	r3, #2
10003482:	d01b      	beq.n	100034bc <RCC_AXISSConfig+0x48>
10003484:	2b02      	cmp	r3, #2
10003486:	d823      	bhi.n	100034d0 <RCC_AXISSConfig+0x5c>
10003488:	2b00      	cmp	r3, #0
1000348a:	d002      	beq.n	10003492 <RCC_AXISSConfig+0x1e>
1000348c:	2b01      	cmp	r3, #1
1000348e:	d00a      	beq.n	100034a6 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10003490:	e01e      	b.n	100034d0 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10003492:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003496:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000349a:	f003 0301 	and.w	r3, r3, #1
1000349e:	2b01      	cmp	r3, #1
100034a0:	d018      	beq.n	100034d4 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
100034a2:	2301      	movs	r3, #1
100034a4:	e079      	b.n	1000359a <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100034a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034aa:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100034b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100034b6:	d00f      	beq.n	100034d8 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
100034b8:	2301      	movs	r3, #1
100034ba:	e06e      	b.n	1000359a <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100034bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100034c4:	f003 0302 	and.w	r3, r3, #2
100034c8:	2b02      	cmp	r3, #2
100034ca:	d007      	beq.n	100034dc <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
100034cc:	2301      	movs	r3, #1
100034ce:	e064      	b.n	1000359a <RCC_AXISSConfig+0x126>
      break;
100034d0:	bf00      	nop
100034d2:	e004      	b.n	100034de <RCC_AXISSConfig+0x6a>
      break;
100034d4:	bf00      	nop
100034d6:	e002      	b.n	100034de <RCC_AXISSConfig+0x6a>
      break;
100034d8:	bf00      	nop
100034da:	e000      	b.n	100034de <RCC_AXISSConfig+0x6a>
      break;
100034dc:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
100034de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100034e4:	f023 0207 	bic.w	r2, r3, #7
100034e8:	687b      	ldr	r3, [r7, #4]
100034ea:	681b      	ldr	r3, [r3, #0]
100034ec:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100034f0:	4313      	orrs	r3, r2
100034f2:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
100034f4:	687b      	ldr	r3, [r7, #4]
100034f6:	681b      	ldr	r3, [r3, #0]
100034f8:	2b03      	cmp	r3, #3
100034fa:	d016      	beq.n	1000352a <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100034fc:	f7fe fb68 	bl	10001bd0 <HAL_GetTick>
10003500:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10003502:	e009      	b.n	10003518 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003504:	f7fe fb64 	bl	10001bd0 <HAL_GetTick>
10003508:	4602      	mov	r2, r0
1000350a:	68fb      	ldr	r3, [r7, #12]
1000350c:	1ad3      	subs	r3, r2, r3
1000350e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003512:	d901      	bls.n	10003518 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10003514:	2303      	movs	r3, #3
10003516:	e040      	b.n	1000359a <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10003518:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000351e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003522:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003526:	d1ed      	bne.n	10003504 <RCC_AXISSConfig+0x90>
10003528:	e015      	b.n	10003556 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000352a:	f7fe fb51 	bl	10001bd0 <HAL_GetTick>
1000352e:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10003530:	e009      	b.n	10003546 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003532:	f7fe fb4d 	bl	10001bd0 <HAL_GetTick>
10003536:	4602      	mov	r2, r0
10003538:	68fb      	ldr	r3, [r7, #12]
1000353a:	1ad3      	subs	r3, r2, r3
1000353c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003540:	d901      	bls.n	10003546 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10003542:	2303      	movs	r3, #3
10003544:	e029      	b.n	1000359a <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10003546:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000354c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003550:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003554:	d0ed      	beq.n	10003532 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10003556:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000355c:	f023 0207 	bic.w	r2, r3, #7
10003560:	687b      	ldr	r3, [r7, #4]
10003562:	685b      	ldr	r3, [r3, #4]
10003564:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003568:	4313      	orrs	r3, r2
1000356a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000356c:	f7fe fb30 	bl	10001bd0 <HAL_GetTick>
10003570:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10003572:	e009      	b.n	10003588 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003574:	f7fe fb2c 	bl	10001bd0 <HAL_GetTick>
10003578:	4602      	mov	r2, r0
1000357a:	68fb      	ldr	r3, [r7, #12]
1000357c:	1ad3      	subs	r3, r2, r3
1000357e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003582:	d901      	bls.n	10003588 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10003584:	2303      	movs	r3, #3
10003586:	e008      	b.n	1000359a <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10003588:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000358e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003592:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003596:	d1ed      	bne.n	10003574 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10003598:	2300      	movs	r3, #0
}
1000359a:	4618      	mov	r0, r3
1000359c:	3710      	adds	r7, #16
1000359e:	46bd      	mov	sp, r7
100035a0:	bd80      	pop	{r7, pc}
	...

100035a4 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
100035a4:	b580      	push	{r7, lr}
100035a6:	b084      	sub	sp, #16
100035a8:	af00      	add	r7, sp, #0
100035aa:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
100035ac:	687b      	ldr	r3, [r7, #4]
100035ae:	681b      	ldr	r3, [r3, #0]
100035b0:	2b03      	cmp	r3, #3
100035b2:	d834      	bhi.n	1000361e <RCC_MCUConfig+0x7a>
100035b4:	a201      	add	r2, pc, #4	@ (adr r2, 100035bc <RCC_MCUConfig+0x18>)
100035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100035ba:	bf00      	nop
100035bc:	100035cd 	.word	0x100035cd
100035c0:	100035e1 	.word	0x100035e1
100035c4:	100035f7 	.word	0x100035f7
100035c8:	1000360b 	.word	0x1000360b
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100035cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035d0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100035d4:	f003 0301 	and.w	r3, r3, #1
100035d8:	2b01      	cmp	r3, #1
100035da:	d022      	beq.n	10003622 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
100035dc:	2301      	movs	r3, #1
100035de:	e081      	b.n	100036e4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100035e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035e4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100035e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100035ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100035f0:	d019      	beq.n	10003626 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
100035f2:	2301      	movs	r3, #1
100035f4:	e076      	b.n	100036e4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100035f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035fa:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100035fe:	f003 0310 	and.w	r3, r3, #16
10003602:	2b10      	cmp	r3, #16
10003604:	d011      	beq.n	1000362a <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10003606:	2301      	movs	r3, #1
10003608:	e06c      	b.n	100036e4 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000360a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000360e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003612:	f003 0302 	and.w	r3, r3, #2
10003616:	2b02      	cmp	r3, #2
10003618:	d009      	beq.n	1000362e <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
1000361a:	2301      	movs	r3, #1
1000361c:	e062      	b.n	100036e4 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
1000361e:	bf00      	nop
10003620:	e006      	b.n	10003630 <RCC_MCUConfig+0x8c>
      break;
10003622:	bf00      	nop
10003624:	e004      	b.n	10003630 <RCC_MCUConfig+0x8c>
      break;
10003626:	bf00      	nop
10003628:	e002      	b.n	10003630 <RCC_MCUConfig+0x8c>
      break;
1000362a:	bf00      	nop
1000362c:	e000      	b.n	10003630 <RCC_MCUConfig+0x8c>
      break;
1000362e:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10003630:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003636:	f023 0203 	bic.w	r2, r3, #3
1000363a:	687b      	ldr	r3, [r7, #4]
1000363c:	681b      	ldr	r3, [r3, #0]
1000363e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003642:	4313      	orrs	r3, r2
10003644:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003646:	f7fe fac3 	bl	10001bd0 <HAL_GetTick>
1000364a:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
1000364c:	e009      	b.n	10003662 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000364e:	f7fe fabf 	bl	10001bd0 <HAL_GetTick>
10003652:	4602      	mov	r2, r0
10003654:	68fb      	ldr	r3, [r7, #12]
10003656:	1ad3      	subs	r3, r2, r3
10003658:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000365c:	d901      	bls.n	10003662 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
1000365e:	2303      	movs	r3, #3
10003660:	e040      	b.n	100036e4 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10003662:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003668:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000366c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003670:	d1ed      	bne.n	1000364e <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10003672:	f000 f954 	bl	1000391e <HAL_RCC_GetSystemCoreClockFreq>
10003676:	4603      	mov	r3, r0
10003678:	4a1c      	ldr	r2, [pc, #112]	@ (100036ec <RCC_MCUConfig+0x148>)
1000367a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
1000367c:	4b1c      	ldr	r3, [pc, #112]	@ (100036f0 <RCC_MCUConfig+0x14c>)
1000367e:	681b      	ldr	r3, [r3, #0]
10003680:	4618      	mov	r0, r3
10003682:	f7fe fa5b 	bl	10001b3c <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10003686:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000368a:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
1000368e:	f023 020f 	bic.w	r2, r3, #15
10003692:	687b      	ldr	r3, [r7, #4]
10003694:	685b      	ldr	r3, [r3, #4]
10003696:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000369a:	4313      	orrs	r3, r2
1000369c:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100036a0:	f7fe fa96 	bl	10001bd0 <HAL_GetTick>
100036a4:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100036a6:	e009      	b.n	100036bc <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100036a8:	f7fe fa92 	bl	10001bd0 <HAL_GetTick>
100036ac:	4602      	mov	r2, r0
100036ae:	68fb      	ldr	r3, [r7, #12]
100036b0:	1ad3      	subs	r3, r2, r3
100036b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100036b6:	d901      	bls.n	100036bc <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
100036b8:	2303      	movs	r3, #3
100036ba:	e013      	b.n	100036e4 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100036bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036c0:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100036c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100036c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100036cc:	d1ec      	bne.n	100036a8 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100036ce:	f000 f926 	bl	1000391e <HAL_RCC_GetSystemCoreClockFreq>
100036d2:	4603      	mov	r3, r0
100036d4:	4a05      	ldr	r2, [pc, #20]	@ (100036ec <RCC_MCUConfig+0x148>)
100036d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100036d8:	4b05      	ldr	r3, [pc, #20]	@ (100036f0 <RCC_MCUConfig+0x14c>)
100036da:	681b      	ldr	r3, [r3, #0]
100036dc:	4618      	mov	r0, r3
100036de:	f7fe fa2d 	bl	10001b3c <HAL_InitTick>
#endif

  return HAL_OK;
100036e2:	2300      	movs	r3, #0
}
100036e4:	4618      	mov	r0, r3
100036e6:	3710      	adds	r7, #16
100036e8:	46bd      	mov	sp, r7
100036ea:	bd80      	pop	{r7, pc}
100036ec:	10020000 	.word	0x10020000
100036f0:	1002000c 	.word	0x1002000c

100036f4 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
100036f4:	b480      	push	{r7}
100036f6:	b089      	sub	sp, #36	@ 0x24
100036f8:	af00      	add	r7, sp, #0
100036fa:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
100036fc:	2300      	movs	r3, #0
100036fe:	61bb      	str	r3, [r7, #24]
10003700:	2301      	movs	r3, #1
10003702:	617b      	str	r3, [r7, #20]
10003704:	2300      	movs	r3, #0
10003706:	613b      	str	r3, [r7, #16]
10003708:	2300      	movs	r3, #0
1000370a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
1000370c:	f04f 0300 	mov.w	r3, #0
10003710:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10003712:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003716:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000371a:	f003 0303 	and.w	r3, r3, #3
1000371e:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10003720:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003724:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10003728:	0c1b      	lsrs	r3, r3, #16
1000372a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
1000372e:	3301      	adds	r3, #1
10003730:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10003732:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003736:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000373a:	0c1b      	lsrs	r3, r3, #16
1000373c:	f003 0301 	and.w	r3, r3, #1
10003740:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10003742:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003746:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
1000374a:	08db      	lsrs	r3, r3, #3
1000374c:	f3c3 030c 	ubfx	r3, r3, #0, #13
10003750:	693a      	ldr	r2, [r7, #16]
10003752:	fb02 f303 	mul.w	r3, r2, r3
10003756:	ee07 3a90 	vmov	s15, r3
1000375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000375e:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10003762:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003766:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
1000376a:	f3c3 0308 	ubfx	r3, r3, #0, #9
1000376e:	3301      	adds	r3, #1
10003770:	ee07 3a90 	vmov	s15, r3
10003774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003778:	edd7 6a02 	vldr	s13, [r7, #8]
1000377c:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 100038d8 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10003780:	eec6 7a86 	vdiv.f32	s15, s13, s12
10003784:	ee77 7a27 	vadd.f32	s15, s14, s15
10003788:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
1000378c:	69bb      	ldr	r3, [r7, #24]
1000378e:	2b03      	cmp	r3, #3
10003790:	d85b      	bhi.n	1000384a <HAL_RCC_GetPLL3ClockFreq+0x156>
10003792:	a201      	add	r2, pc, #4	@ (adr r2, 10003798 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003798:	100037a9 	.word	0x100037a9
1000379c:	10003807 	.word	0x10003807
100037a0:	10003825 	.word	0x10003825
100037a4:	10003843 	.word	0x10003843
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100037a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037ac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100037b0:	f003 0304 	and.w	r3, r3, #4
100037b4:	2b04      	cmp	r3, #4
100037b6:	d117      	bne.n	100037e8 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100037b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037bc:	699b      	ldr	r3, [r3, #24]
100037be:	f003 0303 	and.w	r3, r3, #3
100037c2:	4a46      	ldr	r2, [pc, #280]	@ (100038dc <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100037c4:	fa22 f303 	lsr.w	r3, r2, r3
100037c8:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
100037ca:	68fa      	ldr	r2, [r7, #12]
100037cc:	697b      	ldr	r3, [r7, #20]
100037ce:	fbb2 f3f3 	udiv	r3, r2, r3
100037d2:	ee07 3a90 	vmov	s15, r3
100037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
100037da:	ed97 7a07 	vldr	s14, [r7, #28]
100037de:	ee67 7a27 	vmul.f32	s15, s14, s15
100037e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
100037e6:	e030      	b.n	1000384a <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
100037e8:	4a3c      	ldr	r2, [pc, #240]	@ (100038dc <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100037ea:	697b      	ldr	r3, [r7, #20]
100037ec:	fbb2 f3f3 	udiv	r3, r2, r3
100037f0:	ee07 3a90 	vmov	s15, r3
100037f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
100037f8:	ed97 7a07 	vldr	s14, [r7, #28]
100037fc:	ee67 7a27 	vmul.f32	s15, s14, s15
10003800:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10003804:	e021      	b.n	1000384a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10003806:	4a36      	ldr	r2, [pc, #216]	@ (100038e0 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10003808:	697b      	ldr	r3, [r7, #20]
1000380a:	fbb2 f3f3 	udiv	r3, r2, r3
1000380e:	ee07 3a90 	vmov	s15, r3
10003812:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003816:	ed97 7a07 	vldr	s14, [r7, #28]
1000381a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000381e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10003822:	e012      	b.n	1000384a <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10003824:	4a2f      	ldr	r2, [pc, #188]	@ (100038e4 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10003826:	697b      	ldr	r3, [r7, #20]
10003828:	fbb2 f3f3 	udiv	r3, r2, r3
1000382c:	ee07 3a90 	vmov	s15, r3
10003830:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003834:	ed97 7a07 	vldr	s14, [r7, #28]
10003838:	ee67 7a27 	vmul.f32	s15, s14, s15
1000383c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10003840:	e003      	b.n	1000384a <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10003842:	f04f 0300 	mov.w	r3, #0
10003846:	61fb      	str	r3, [r7, #28]
      break;
10003848:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
1000384a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000384e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10003852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10003856:	3301      	adds	r3, #1
10003858:	ee07 3a90 	vmov	s15, r3
1000385c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003860:	edd7 6a07 	vldr	s13, [r7, #28]
10003864:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000386c:	ee17 2a90 	vmov	r2, s15
10003870:	687b      	ldr	r3, [r7, #4]
10003872:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10003874:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003878:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
1000387c:	0a1b      	lsrs	r3, r3, #8
1000387e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10003882:	3301      	adds	r3, #1
10003884:	ee07 3a90 	vmov	s15, r3
10003888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000388c:	edd7 6a07 	vldr	s13, [r7, #28]
10003890:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10003898:	ee17 2a90 	vmov	r2, s15
1000389c:	687b      	ldr	r3, [r7, #4]
1000389e:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
100038a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038a4:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100038a8:	0c1b      	lsrs	r3, r3, #16
100038aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100038ae:	3301      	adds	r3, #1
100038b0:	ee07 3a90 	vmov	s15, r3
100038b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100038b8:	edd7 6a07 	vldr	s13, [r7, #28]
100038bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
100038c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100038c4:	ee17 2a90 	vmov	r2, s15
100038c8:	687b      	ldr	r3, [r7, #4]
100038ca:	609a      	str	r2, [r3, #8]
}
100038cc:	bf00      	nop
100038ce:	3724      	adds	r7, #36	@ 0x24
100038d0:	46bd      	mov	sp, r7
100038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100038d6:	4770      	bx	lr
100038d8:	46000000 	.word	0x46000000
100038dc:	03d09000 	.word	0x03d09000
100038e0:	016e3600 	.word	0x016e3600
100038e4:	003d0900 	.word	0x003d0900

100038e8 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
100038e8:	b580      	push	{r7, lr}
100038ea:	b082      	sub	sp, #8
100038ec:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
100038ee:	2300      	movs	r3, #0
100038f0:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
100038f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038f6:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100038fa:	f003 030f 	and.w	r3, r3, #15
100038fe:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10003900:	687b      	ldr	r3, [r7, #4]
10003902:	2b09      	cmp	r3, #9
10003904:	d901      	bls.n	1000390a <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10003906:	2309      	movs	r3, #9
10003908:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
1000390a:	f000 f80f 	bl	1000392c <HAL_RCC_GetMCUSSFreq>
1000390e:	4602      	mov	r2, r0
10003910:	687b      	ldr	r3, [r7, #4]
10003912:	fa22 f303 	lsr.w	r3, r2, r3
}
10003916:	4618      	mov	r0, r3
10003918:	3708      	adds	r7, #8
1000391a:	46bd      	mov	sp, r7
1000391c:	bd80      	pop	{r7, pc}

1000391e <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
1000391e:	b580      	push	{r7, lr}
10003920:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10003922:	f7ff ffe1 	bl	100038e8 <HAL_RCC_GetMCUFreq>
10003926:	4603      	mov	r3, r0
#endif
}
10003928:	4618      	mov	r0, r3
1000392a:	bd80      	pop	{r7, pc}

1000392c <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
1000392c:	b580      	push	{r7, lr}
1000392e:	b084      	sub	sp, #16
10003930:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10003932:	2300      	movs	r3, #0
10003934:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10003936:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000393a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000393c:	f003 0303 	and.w	r3, r3, #3
10003940:	2b03      	cmp	r3, #3
10003942:	d822      	bhi.n	1000398a <HAL_RCC_GetMCUSSFreq+0x5e>
10003944:	a201      	add	r2, pc, #4	@ (adr r2, 1000394c <HAL_RCC_GetMCUSSFreq+0x20>)
10003946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000394a:	bf00      	nop
1000394c:	1000396b 	.word	0x1000396b
10003950:	1000397f 	.word	0x1000397f
10003954:	10003985 	.word	0x10003985
10003958:	1000395d 	.word	0x1000395d
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000395c:	463b      	mov	r3, r7
1000395e:	4618      	mov	r0, r3
10003960:	f7ff fec8 	bl	100036f4 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10003964:	683b      	ldr	r3, [r7, #0]
10003966:	60fb      	str	r3, [r7, #12]
      break;
10003968:	e00f      	b.n	1000398a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000396a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000396e:	699b      	ldr	r3, [r3, #24]
10003970:	f003 0303 	and.w	r3, r3, #3
10003974:	4a07      	ldr	r2, [pc, #28]	@ (10003994 <HAL_RCC_GetMCUSSFreq+0x68>)
10003976:	fa22 f303 	lsr.w	r3, r2, r3
1000397a:	60fb      	str	r3, [r7, #12]

      break;
1000397c:	e005      	b.n	1000398a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
1000397e:	4b06      	ldr	r3, [pc, #24]	@ (10003998 <HAL_RCC_GetMCUSSFreq+0x6c>)
10003980:	60fb      	str	r3, [r7, #12]
      break;
10003982:	e002      	b.n	1000398a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10003984:	4b05      	ldr	r3, [pc, #20]	@ (1000399c <HAL_RCC_GetMCUSSFreq+0x70>)
10003986:	60fb      	str	r3, [r7, #12]
      break;
10003988:	bf00      	nop
  }

  return mcussfreq;
1000398a:	68fb      	ldr	r3, [r7, #12]
}
1000398c:	4618      	mov	r0, r3
1000398e:	3710      	adds	r7, #16
10003990:	46bd      	mov	sp, r7
10003992:	bd80      	pop	{r7, pc}
10003994:	03d09000 	.word	0x03d09000
10003998:	016e3600 	.word	0x016e3600
1000399c:	003d0900 	.word	0x003d0900

100039a0 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
100039a0:	b580      	push	{r7, lr}
100039a2:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
100039a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039a8:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	@ 0xc18
100039ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
100039b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
100039b4:	d107      	bne.n	100039c6 <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
100039b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
100039be:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
100039c2:	f000 f802 	bl	100039ca <HAL_RCC_WAKEUP_Callback>
  }
}
100039c6:	bf00      	nop
100039c8:	bd80      	pop	{r7, pc}

100039ca <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
100039ca:	b480      	push	{r7}
100039cc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
100039ce:	bf00      	nop
100039d0:	46bd      	mov	sp, r7
100039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100039d6:	4770      	bx	lr

100039d8 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100039d8:	b580      	push	{r7, lr}
100039da:	b084      	sub	sp, #16
100039dc:	af00      	add	r7, sp, #0
100039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
100039e0:	687b      	ldr	r3, [r7, #4]
100039e2:	681b      	ldr	r3, [r3, #0]
100039e4:	2b00      	cmp	r3, #0
100039e6:	f000 8171 	beq.w	10003ccc <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
100039ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100039f0:	f003 0307 	and.w	r3, r3, #7
100039f4:	2b02      	cmp	r3, #2
100039f6:	d108      	bne.n	10003a0a <RCCEx_PLL2_Config+0x32>
100039f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100039fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003a02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003a06:	f000 815f 	beq.w	10003cc8 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10003a0a:	687b      	ldr	r3, [r7, #4]
10003a0c:	681b      	ldr	r3, [r3, #0]
10003a0e:	2b02      	cmp	r3, #2
10003a10:	f040 8130 	bne.w	10003c74 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10003a14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003a1a:	f003 0303 	and.w	r3, r3, #3
10003a1e:	2b00      	cmp	r3, #0
10003a20:	d008      	beq.n	10003a34 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10003a22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003a28:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10003a2c:	2b01      	cmp	r3, #1
10003a2e:	d001      	beq.n	10003a34 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10003a30:	2301      	movs	r3, #1
10003a32:	e14c      	b.n	10003cce <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003a34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003a3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003a44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10003a48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003a50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a54:	f023 0301 	bic.w	r3, r3, #1
10003a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003a5c:	f7fe f8b8 	bl	10001bd0 <HAL_GetTick>
10003a60:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003a62:	e008      	b.n	10003a76 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003a64:	f7fe f8b4 	bl	10001bd0 <HAL_GetTick>
10003a68:	4602      	mov	r2, r0
10003a6a:	68fb      	ldr	r3, [r7, #12]
10003a6c:	1ad3      	subs	r3, r2, r3
10003a6e:	2b64      	cmp	r3, #100	@ 0x64
10003a70:	d901      	bls.n	10003a76 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10003a72:	2303      	movs	r3, #3
10003a74:	e12b      	b.n	10003cce <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003a76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003a7e:	f003 0302 	and.w	r3, r3, #2
10003a82:	2b02      	cmp	r3, #2
10003a84:	d0ee      	beq.n	10003a64 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10003a86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a8a:	6a1b      	ldr	r3, [r3, #32]
10003a8c:	f003 0303 	and.w	r3, r3, #3
10003a90:	2b02      	cmp	r3, #2
10003a92:	d107      	bne.n	10003aa4 <RCCEx_PLL2_Config+0xcc>
10003a94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a98:	6a1b      	ldr	r3, [r3, #32]
10003a9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003aa2:	d00e      	beq.n	10003ac2 <RCCEx_PLL2_Config+0xea>
10003aa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003aa8:	6a1b      	ldr	r3, [r3, #32]
10003aaa:	f003 0303 	and.w	r3, r3, #3
10003aae:	2b03      	cmp	r3, #3
10003ab0:	d112      	bne.n	10003ad8 <RCCEx_PLL2_Config+0x100>
10003ab2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ab6:	6a1b      	ldr	r3, [r3, #32]
10003ab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003abc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003ac0:	d10a      	bne.n	10003ad8 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10003ac2:	687b      	ldr	r3, [r7, #4]
10003ac4:	685a      	ldr	r2, [r3, #4]
10003ac6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003acc:	f003 0303 	and.w	r3, r3, #3
10003ad0:	429a      	cmp	r2, r3
10003ad2:	d00c      	beq.n	10003aee <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10003ad4:	2301      	movs	r3, #1
10003ad6:	e0fa      	b.n	10003cce <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10003ad8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003ade:	f023 0203 	bic.w	r2, r3, #3
10003ae2:	687b      	ldr	r3, [r7, #4]
10003ae4:	685b      	ldr	r3, [r3, #4]
10003ae6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003aea:	4313      	orrs	r3, r2
10003aec:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10003aee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003af2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
10003af6:	4b78      	ldr	r3, [pc, #480]	@ (10003cd8 <RCCEx_PLL2_Config+0x300>)
10003af8:	4013      	ands	r3, r2
10003afa:	687a      	ldr	r2, [r7, #4]
10003afc:	68d2      	ldr	r2, [r2, #12]
10003afe:	1e51      	subs	r1, r2, #1
10003b00:	687a      	ldr	r2, [r7, #4]
10003b02:	6892      	ldr	r2, [r2, #8]
10003b04:	3a01      	subs	r2, #1
10003b06:	0412      	lsls	r2, r2, #16
10003b08:	430a      	orrs	r2, r1
10003b0a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003b0e:	4313      	orrs	r3, r2
10003b10:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
10003b14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10003b1c:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10003b20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10003b24:	687a      	ldr	r2, [r7, #4]
10003b26:	6912      	ldr	r2, [r2, #16]
10003b28:	1e51      	subs	r1, r2, #1
10003b2a:	687a      	ldr	r2, [r7, #4]
10003b2c:	6952      	ldr	r2, [r2, #20]
10003b2e:	3a01      	subs	r2, #1
10003b30:	0212      	lsls	r2, r2, #8
10003b32:	4311      	orrs	r1, r2
10003b34:	687a      	ldr	r2, [r7, #4]
10003b36:	6992      	ldr	r2, [r2, #24]
10003b38:	3a01      	subs	r2, #1
10003b3a:	0412      	lsls	r2, r2, #16
10003b3c:	430a      	orrs	r2, r1
10003b3e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003b42:	4313      	orrs	r3, r2
10003b44:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10003b48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003b50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10003b58:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10003b5c:	687b      	ldr	r3, [r7, #4]
10003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003b60:	2b02      	cmp	r3, #2
10003b62:	d003      	beq.n	10003b6c <RCCEx_PLL2_Config+0x194>
10003b64:	687b      	ldr	r3, [r7, #4]
10003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003b68:	2b00      	cmp	r3, #0
10003b6a:	d10c      	bne.n	10003b86 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10003b6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003b74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003b7c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003b80:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
10003b84:	e00f      	b.n	10003ba6 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10003b86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003b8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003b92:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003b96:	687a      	ldr	r2, [r7, #4]
10003b98:	6a12      	ldr	r2, [r2, #32]
10003b9a:	00d2      	lsls	r2, r2, #3
10003b9c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003ba0:	4313      	orrs	r3, r2
10003ba2:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10003ba6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003bae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10003bb6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003bba:	687b      	ldr	r3, [r7, #4]
10003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003bbe:	2b02      	cmp	r3, #2
10003bc0:	d124      	bne.n	10003c0c <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10003bc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
10003bca:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003bce:	687b      	ldr	r3, [r7, #4]
10003bd0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10003bd2:	687b      	ldr	r3, [r7, #4]
10003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003bd6:	4319      	orrs	r1, r3
10003bd8:	687b      	ldr	r3, [r7, #4]
10003bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003bdc:	4319      	orrs	r1, r3
10003bde:	687b      	ldr	r3, [r7, #4]
10003be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10003be2:	4319      	orrs	r1, r3
10003be4:	687b      	ldr	r3, [r7, #4]
10003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003be8:	041b      	lsls	r3, r3, #16
10003bea:	430b      	orrs	r3, r1
10003bec:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003bf0:	4313      	orrs	r3, r2
10003bf2:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10003bf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003bfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c02:	f043 0304 	orr.w	r3, r3, #4
10003c06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
10003c0a:	e009      	b.n	10003c20 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10003c0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c18:	f023 0304 	bic.w	r3, r3, #4
10003c1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10003c20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c2c:	f043 0301 	orr.w	r3, r3, #1
10003c30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003c34:	f7fd ffcc 	bl	10001bd0 <HAL_GetTick>
10003c38:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10003c3a:	e008      	b.n	10003c4e <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003c3c:	f7fd ffc8 	bl	10001bd0 <HAL_GetTick>
10003c40:	4602      	mov	r2, r0
10003c42:	68fb      	ldr	r3, [r7, #12]
10003c44:	1ad3      	subs	r3, r2, r3
10003c46:	2b64      	cmp	r3, #100	@ 0x64
10003c48:	d901      	bls.n	10003c4e <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10003c4a:	2303      	movs	r3, #3
10003c4c:	e03f      	b.n	10003cce <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10003c4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c56:	f003 0302 	and.w	r3, r3, #2
10003c5a:	2b02      	cmp	r3, #2
10003c5c:	d1ee      	bne.n	10003c3c <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003c5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c6a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10003c6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10003c72:	e02b      	b.n	10003ccc <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003c74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003c84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10003c88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c90:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c94:	f023 0301 	bic.w	r3, r3, #1
10003c98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003c9c:	f7fd ff98 	bl	10001bd0 <HAL_GetTick>
10003ca0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003ca2:	e008      	b.n	10003cb6 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003ca4:	f7fd ff94 	bl	10001bd0 <HAL_GetTick>
10003ca8:	4602      	mov	r2, r0
10003caa:	68fb      	ldr	r3, [r7, #12]
10003cac:	1ad3      	subs	r3, r2, r3
10003cae:	2b64      	cmp	r3, #100	@ 0x64
10003cb0:	d901      	bls.n	10003cb6 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10003cb2:	2303      	movs	r3, #3
10003cb4:	e00b      	b.n	10003cce <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003cb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003cbe:	f003 0302 	and.w	r3, r3, #2
10003cc2:	2b02      	cmp	r3, #2
10003cc4:	d0ee      	beq.n	10003ca4 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10003cc6:	e001      	b.n	10003ccc <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003cc8:	2301      	movs	r3, #1
10003cca:	e000      	b.n	10003cce <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10003ccc:	2300      	movs	r3, #0

}
10003cce:	4618      	mov	r0, r3
10003cd0:	3710      	adds	r7, #16
10003cd2:	46bd      	mov	sp, r7
10003cd4:	bd80      	pop	{r7, pc}
10003cd6:	bf00      	nop
10003cd8:	ffc0fe00 	.word	0xffc0fe00

10003cdc <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10003cdc:	b580      	push	{r7, lr}
10003cde:	b084      	sub	sp, #16
10003ce0:	af00      	add	r7, sp, #0
10003ce2:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10003ce4:	687b      	ldr	r3, [r7, #4]
10003ce6:	681b      	ldr	r3, [r3, #0]
10003ce8:	2b00      	cmp	r3, #0
10003cea:	f000 815a 	beq.w	10003fa2 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10003cee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003cf4:	f003 0303 	and.w	r3, r3, #3
10003cf8:	2b03      	cmp	r3, #3
10003cfa:	d108      	bne.n	10003d0e <RCCEx_PLL3_Config+0x32>
10003cfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003d0a:	f000 8148 	beq.w	10003f9e <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10003d0e:	687b      	ldr	r3, [r7, #4]
10003d10:	681b      	ldr	r3, [r3, #0]
10003d12:	2b02      	cmp	r3, #2
10003d14:	f040 8119 	bne.w	10003f4a <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003d18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d1c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003d28:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10003d2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d30:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d38:	f023 0301 	bic.w	r3, r3, #1
10003d3c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003d40:	f7fd ff46 	bl	10001bd0 <HAL_GetTick>
10003d44:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003d46:	e008      	b.n	10003d5a <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003d48:	f7fd ff42 	bl	10001bd0 <HAL_GetTick>
10003d4c:	4602      	mov	r2, r0
10003d4e:	68fb      	ldr	r3, [r7, #12]
10003d50:	1ad3      	subs	r3, r2, r3
10003d52:	2b64      	cmp	r3, #100	@ 0x64
10003d54:	d901      	bls.n	10003d5a <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10003d56:	2303      	movs	r3, #3
10003d58:	e124      	b.n	10003fa4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003d5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d5e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d62:	f003 0302 	and.w	r3, r3, #2
10003d66:	2b02      	cmp	r3, #2
10003d68:	d0ee      	beq.n	10003d48 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10003d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d6e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10003d72:	f023 0203 	bic.w	r2, r3, #3
10003d76:	687b      	ldr	r3, [r7, #4]
10003d78:	685b      	ldr	r3, [r3, #4]
10003d7a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003d7e:	4313      	orrs	r3, r2
10003d80:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003d84:	e008      	b.n	10003d98 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003d86:	f7fd ff23 	bl	10001bd0 <HAL_GetTick>
10003d8a:	4602      	mov	r2, r0
10003d8c:	68fb      	ldr	r3, [r7, #12]
10003d8e:	1ad3      	subs	r3, r2, r3
10003d90:	2b64      	cmp	r3, #100	@ 0x64
10003d92:	d901      	bls.n	10003d98 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10003d94:	2303      	movs	r3, #3
10003d96:	e105      	b.n	10003fa4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003d98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d9c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10003da0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003da4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003da8:	d1ed      	bne.n	10003d86 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10003daa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003dae:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10003db2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10003db6:	687b      	ldr	r3, [r7, #4]
10003db8:	69db      	ldr	r3, [r3, #28]
10003dba:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003dbe:	4313      	orrs	r3, r2
10003dc0:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10003dc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003dc8:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
10003dcc:	4b77      	ldr	r3, [pc, #476]	@ (10003fac <RCCEx_PLL3_Config+0x2d0>)
10003dce:	4013      	ands	r3, r2
10003dd0:	687a      	ldr	r2, [r7, #4]
10003dd2:	68d2      	ldr	r2, [r2, #12]
10003dd4:	1e51      	subs	r1, r2, #1
10003dd6:	687a      	ldr	r2, [r7, #4]
10003dd8:	6892      	ldr	r2, [r2, #8]
10003dda:	3a01      	subs	r2, #1
10003ddc:	0412      	lsls	r2, r2, #16
10003dde:	430a      	orrs	r2, r1
10003de0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003de4:	4313      	orrs	r3, r2
10003de6:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
10003dea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003dee:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10003df2:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10003df6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10003dfa:	687a      	ldr	r2, [r7, #4]
10003dfc:	6912      	ldr	r2, [r2, #16]
10003dfe:	1e51      	subs	r1, r2, #1
10003e00:	687a      	ldr	r2, [r7, #4]
10003e02:	6952      	ldr	r2, [r2, #20]
10003e04:	3a01      	subs	r2, #1
10003e06:	0212      	lsls	r2, r2, #8
10003e08:	4311      	orrs	r1, r2
10003e0a:	687a      	ldr	r2, [r7, #4]
10003e0c:	6992      	ldr	r2, [r2, #24]
10003e0e:	3a01      	subs	r2, #1
10003e10:	0412      	lsls	r2, r2, #16
10003e12:	430a      	orrs	r2, r1
10003e14:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003e18:	4313      	orrs	r3, r2
10003e1a:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10003e1e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e22:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003e26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10003e2e:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10003e32:	687b      	ldr	r3, [r7, #4]
10003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003e36:	2b02      	cmp	r3, #2
10003e38:	d003      	beq.n	10003e42 <RCCEx_PLL3_Config+0x166>
10003e3a:	687b      	ldr	r3, [r7, #4]
10003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003e3e:	2b00      	cmp	r3, #0
10003e40:	d10c      	bne.n	10003e5c <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10003e42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e46:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003e4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003e52:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003e56:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
10003e5a:	e00f      	b.n	10003e7c <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10003e5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e60:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003e64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003e68:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003e6c:	687a      	ldr	r2, [r7, #4]
10003e6e:	6a12      	ldr	r2, [r2, #32]
10003e70:	00d2      	lsls	r2, r2, #3
10003e72:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003e76:	4313      	orrs	r3, r2
10003e78:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10003e7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e80:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003e84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10003e8c:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003e90:	687b      	ldr	r3, [r7, #4]
10003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003e94:	2b02      	cmp	r3, #2
10003e96:	d124      	bne.n	10003ee2 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10003e98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e9c:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
10003ea0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003ea4:	687b      	ldr	r3, [r7, #4]
10003ea6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10003ea8:	687b      	ldr	r3, [r7, #4]
10003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003eac:	4319      	orrs	r1, r3
10003eae:	687b      	ldr	r3, [r7, #4]
10003eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003eb2:	4319      	orrs	r1, r3
10003eb4:	687b      	ldr	r3, [r7, #4]
10003eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10003eb8:	4319      	orrs	r1, r3
10003eba:	687b      	ldr	r3, [r7, #4]
10003ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003ebe:	041b      	lsls	r3, r3, #16
10003ec0:	430b      	orrs	r3, r1
10003ec2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003ec6:	4313      	orrs	r3, r2
10003ec8:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10003ecc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ed0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003ed4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ed8:	f043 0304 	orr.w	r3, r3, #4
10003edc:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
10003ee0:	e009      	b.n	10003ef6 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10003ee2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ee6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003eea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003eee:	f023 0304 	bic.w	r3, r3, #4
10003ef2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10003ef6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003efa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003efe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f02:	f043 0301 	orr.w	r3, r3, #1
10003f06:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003f0a:	f7fd fe61 	bl	10001bd0 <HAL_GetTick>
10003f0e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003f10:	e008      	b.n	10003f24 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003f12:	f7fd fe5d 	bl	10001bd0 <HAL_GetTick>
10003f16:	4602      	mov	r2, r0
10003f18:	68fb      	ldr	r3, [r7, #12]
10003f1a:	1ad3      	subs	r3, r2, r3
10003f1c:	2b64      	cmp	r3, #100	@ 0x64
10003f1e:	d901      	bls.n	10003f24 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10003f20:	2303      	movs	r3, #3
10003f22:	e03f      	b.n	10003fa4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003f24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f28:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f2c:	f003 0302 	and.w	r3, r3, #2
10003f30:	2b02      	cmp	r3, #2
10003f32:	d1ee      	bne.n	10003f12 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003f34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f38:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f40:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10003f44:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10003f48:	e02b      	b.n	10003fa2 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003f4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f4e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003f5a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10003f5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f62:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f6a:	f023 0301 	bic.w	r3, r3, #1
10003f6e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003f72:	f7fd fe2d 	bl	10001bd0 <HAL_GetTick>
10003f76:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003f78:	e008      	b.n	10003f8c <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003f7a:	f7fd fe29 	bl	10001bd0 <HAL_GetTick>
10003f7e:	4602      	mov	r2, r0
10003f80:	68fb      	ldr	r3, [r7, #12]
10003f82:	1ad3      	subs	r3, r2, r3
10003f84:	2b64      	cmp	r3, #100	@ 0x64
10003f86:	d901      	bls.n	10003f8c <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10003f88:	2303      	movs	r3, #3
10003f8a:	e00b      	b.n	10003fa4 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003f8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f90:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f94:	f003 0302 	and.w	r3, r3, #2
10003f98:	2b02      	cmp	r3, #2
10003f9a:	d0ee      	beq.n	10003f7a <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10003f9c:	e001      	b.n	10003fa2 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003f9e:	2301      	movs	r3, #1
10003fa0:	e000      	b.n	10003fa4 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10003fa2:	2300      	movs	r3, #0
}
10003fa4:	4618      	mov	r0, r3
10003fa6:	3710      	adds	r7, #16
10003fa8:	46bd      	mov	sp, r7
10003faa:	bd80      	pop	{r7, pc}
10003fac:	ffc0fe00 	.word	0xffc0fe00

10003fb0 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10003fb0:	b580      	push	{r7, lr}
10003fb2:	b084      	sub	sp, #16
10003fb4:	af00      	add	r7, sp, #0
10003fb6:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10003fb8:	687b      	ldr	r3, [r7, #4]
10003fba:	681b      	ldr	r3, [r3, #0]
10003fbc:	2b00      	cmp	r3, #0
10003fbe:	f000 8147 	beq.w	10004250 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10003fc2:	687b      	ldr	r3, [r7, #4]
10003fc4:	681b      	ldr	r3, [r3, #0]
10003fc6:	2b02      	cmp	r3, #2
10003fc8:	f040 8119 	bne.w	100041fe <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003fcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fd0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003fd4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003fdc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10003fe0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fe4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003fe8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fec:	f023 0301 	bic.w	r3, r3, #1
10003ff0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003ff4:	f7fd fdec 	bl	10001bd0 <HAL_GetTick>
10003ff8:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003ffa:	e008      	b.n	1000400e <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003ffc:	f7fd fde8 	bl	10001bd0 <HAL_GetTick>
10004000:	4602      	mov	r2, r0
10004002:	68fb      	ldr	r3, [r7, #12]
10004004:	1ad3      	subs	r3, r2, r3
10004006:	2b64      	cmp	r3, #100	@ 0x64
10004008:	d901      	bls.n	1000400e <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
1000400a:	2303      	movs	r3, #3
1000400c:	e121      	b.n	10004252 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000400e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004012:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004016:	f003 0302 	and.w	r3, r3, #2
1000401a:	2b02      	cmp	r3, #2
1000401c:	d0ee      	beq.n	10003ffc <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
1000401e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004022:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10004026:	f023 0203 	bic.w	r2, r3, #3
1000402a:	687b      	ldr	r3, [r7, #4]
1000402c:	685b      	ldr	r3, [r3, #4]
1000402e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004032:	4313      	orrs	r3, r2
10004034:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10004038:	e008      	b.n	1000404c <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000403a:	f7fd fdc9 	bl	10001bd0 <HAL_GetTick>
1000403e:	4602      	mov	r2, r0
10004040:	68fb      	ldr	r3, [r7, #12]
10004042:	1ad3      	subs	r3, r2, r3
10004044:	2b64      	cmp	r3, #100	@ 0x64
10004046:	d901      	bls.n	1000404c <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10004048:	2303      	movs	r3, #3
1000404a:	e102      	b.n	10004252 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
1000404c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004050:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10004054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000405c:	d1ed      	bne.n	1000403a <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
1000405e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004062:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10004066:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
1000406a:	687b      	ldr	r3, [r7, #4]
1000406c:	69db      	ldr	r3, [r3, #28]
1000406e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004072:	4313      	orrs	r3, r2
10004074:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10004078:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000407c:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
10004080:	4b76      	ldr	r3, [pc, #472]	@ (1000425c <RCCEx_PLL4_Config+0x2ac>)
10004082:	4013      	ands	r3, r2
10004084:	687a      	ldr	r2, [r7, #4]
10004086:	68d2      	ldr	r2, [r2, #12]
10004088:	1e51      	subs	r1, r2, #1
1000408a:	687a      	ldr	r2, [r7, #4]
1000408c:	6892      	ldr	r2, [r2, #8]
1000408e:	3a01      	subs	r2, #1
10004090:	0412      	lsls	r2, r2, #16
10004092:	430a      	orrs	r2, r1
10004094:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004098:	4313      	orrs	r3, r2
1000409a:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
1000409e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040a2:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
100040a6:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100040aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100040ae:	687a      	ldr	r2, [r7, #4]
100040b0:	6912      	ldr	r2, [r2, #16]
100040b2:	1e51      	subs	r1, r2, #1
100040b4:	687a      	ldr	r2, [r7, #4]
100040b6:	6952      	ldr	r2, [r2, #20]
100040b8:	3a01      	subs	r2, #1
100040ba:	0212      	lsls	r2, r2, #8
100040bc:	4311      	orrs	r1, r2
100040be:	687a      	ldr	r2, [r7, #4]
100040c0:	6992      	ldr	r2, [r2, #24]
100040c2:	3a01      	subs	r2, #1
100040c4:	0412      	lsls	r2, r2, #16
100040c6:	430a      	orrs	r2, r1
100040c8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100040cc:	4313      	orrs	r3, r2
100040ce:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
100040d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040d6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
100040da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100040e2:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
100040e6:	687b      	ldr	r3, [r7, #4]
100040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100040ea:	2b02      	cmp	r3, #2
100040ec:	d003      	beq.n	100040f6 <RCCEx_PLL4_Config+0x146>
100040ee:	687b      	ldr	r3, [r7, #4]
100040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100040f2:	2b00      	cmp	r3, #0
100040f4:	d10c      	bne.n	10004110 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
100040f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040fa:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
100040fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10004106:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000410a:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
1000410e:	e00f      	b.n	10004130 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10004110:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004114:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10004118:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000411c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10004120:	687a      	ldr	r2, [r7, #4]
10004122:	6a12      	ldr	r2, [r2, #32]
10004124:	00d2      	lsls	r2, r2, #3
10004126:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000412a:	4313      	orrs	r3, r2
1000412c:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10004130:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004134:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10004138:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000413c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10004140:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10004144:	687b      	ldr	r3, [r7, #4]
10004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004148:	2b02      	cmp	r3, #2
1000414a:	d124      	bne.n	10004196 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
1000414c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004150:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
10004154:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10004158:	687b      	ldr	r3, [r7, #4]
1000415a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
1000415c:	687b      	ldr	r3, [r7, #4]
1000415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10004160:	4319      	orrs	r1, r3
10004162:	687b      	ldr	r3, [r7, #4]
10004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10004166:	4319      	orrs	r1, r3
10004168:	687b      	ldr	r3, [r7, #4]
1000416a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000416c:	4319      	orrs	r1, r3
1000416e:	687b      	ldr	r3, [r7, #4]
10004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10004172:	041b      	lsls	r3, r3, #16
10004174:	430b      	orrs	r3, r1
10004176:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000417a:	4313      	orrs	r3, r2
1000417c:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10004180:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004184:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004188:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000418c:	f043 0304 	orr.w	r3, r3, #4
10004190:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10004194:	e009      	b.n	100041aa <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10004196:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000419a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000419e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041a2:	f023 0304 	bic.w	r3, r3, #4
100041a6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
100041aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041ae:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100041b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041b6:	f043 0301 	orr.w	r3, r3, #1
100041ba:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100041be:	f7fd fd07 	bl	10001bd0 <HAL_GetTick>
100041c2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100041c4:	e008      	b.n	100041d8 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100041c6:	f7fd fd03 	bl	10001bd0 <HAL_GetTick>
100041ca:	4602      	mov	r2, r0
100041cc:	68fb      	ldr	r3, [r7, #12]
100041ce:	1ad3      	subs	r3, r2, r3
100041d0:	2b64      	cmp	r3, #100	@ 0x64
100041d2:	d901      	bls.n	100041d8 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
100041d4:	2303      	movs	r3, #3
100041d6:	e03c      	b.n	10004252 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100041d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041dc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100041e0:	f003 0302 	and.w	r3, r3, #2
100041e4:	2b02      	cmp	r3, #2
100041e6:	d1ee      	bne.n	100041c6 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100041e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041ec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100041f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041f4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100041f8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
100041fc:	e028      	b.n	10004250 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100041fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004202:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004206:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000420a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000420e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10004212:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004216:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000421a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000421e:	f023 0301 	bic.w	r3, r3, #1
10004222:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10004226:	f7fd fcd3 	bl	10001bd0 <HAL_GetTick>
1000422a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000422c:	e008      	b.n	10004240 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000422e:	f7fd fccf 	bl	10001bd0 <HAL_GetTick>
10004232:	4602      	mov	r2, r0
10004234:	68fb      	ldr	r3, [r7, #12]
10004236:	1ad3      	subs	r3, r2, r3
10004238:	2b64      	cmp	r3, #100	@ 0x64
1000423a:	d901      	bls.n	10004240 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
1000423c:	2303      	movs	r3, #3
1000423e:	e008      	b.n	10004252 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10004240:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004244:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004248:	f003 0302 	and.w	r3, r3, #2
1000424c:	2b02      	cmp	r3, #2
1000424e:	d0ee      	beq.n	1000422e <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10004250:	2300      	movs	r3, #0
}
10004252:	4618      	mov	r0, r3
10004254:	3710      	adds	r7, #16
10004256:	46bd      	mov	sp, r7
10004258:	bd80      	pop	{r7, pc}
1000425a:	bf00      	nop
1000425c:	ffc0fe00 	.word	0xffc0fe00

10004260 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10004260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10004264:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
10004268:	af00      	add	r7, sp, #0
1000426a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000426e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004272:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10004274:	2300      	movs	r3, #0
10004276:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
1000427a:	2300      	movs	r3, #0
1000427c:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10004280:	2300      	movs	r3, #0
10004282:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10004286:	2300      	movs	r3, #0
10004288:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
1000428c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004290:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004294:	681b      	ldr	r3, [r3, #0]
10004296:	e9d3 2300 	ldrd	r2, r3, [r3]
1000429a:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
1000429e:	2500      	movs	r5, #0
100042a0:	ea54 0305 	orrs.w	r3, r4, r5
100042a4:	d011      	beq.n	100042ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
100042a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
100042ae:	f023 0103 	bic.w	r1, r3, #3
100042b2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042ba:	681b      	ldr	r3, [r3, #0]
100042bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
100042c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042c4:	430b      	orrs	r3, r1
100042c6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
100042ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042d2:	681b      	ldr	r3, [r3, #0]
100042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
100042d8:	f002 0810 	and.w	r8, r2, #16
100042dc:	f04f 0900 	mov.w	r9, #0
100042e0:	ea58 0309 	orrs.w	r3, r8, r9
100042e4:	d038      	beq.n	10004358 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
100042e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042ee:	681b      	ldr	r3, [r3, #0]
100042f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
100042f4:	2b01      	cmp	r3, #1
100042f6:	d11d      	bne.n	10004334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100042f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004300:	681b      	ldr	r3, [r3, #0]
10004302:	3380      	adds	r3, #128	@ 0x80
10004304:	4618      	mov	r0, r3
10004306:	f7ff fe53 	bl	10003fb0 <RCCEx_PLL4_Config>
1000430a:	4603      	mov	r3, r0
1000430c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004310:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004314:	2b00      	cmp	r3, #0
10004316:	d003      	beq.n	10004320 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10004318:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000431c:	f001 be2a 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004320:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004324:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004328:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000432c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004330:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10004334:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004338:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
1000433c:	f023 0107 	bic.w	r1, r3, #7
10004340:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004344:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004348:	681b      	ldr	r3, [r3, #0]
1000434a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
1000434e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004352:	430b      	orrs	r3, r1
10004354:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10004358:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000435c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004360:	681b      	ldr	r3, [r3, #0]
10004362:	e9d3 2300 	ldrd	r2, r3, [r3]
10004366:	f002 0a20 	and.w	sl, r2, #32
1000436a:	f04f 0b00 	mov.w	fp, #0
1000436e:	ea5a 030b 	orrs.w	r3, sl, fp
10004372:	d038      	beq.n	100043e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10004374:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004378:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000437c:	681b      	ldr	r3, [r3, #0]
1000437e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10004382:	2b01      	cmp	r3, #1
10004384:	d11d      	bne.n	100043c2 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004386:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000438a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000438e:	681b      	ldr	r3, [r3, #0]
10004390:	3380      	adds	r3, #128	@ 0x80
10004392:	4618      	mov	r0, r3
10004394:	f7ff fe0c 	bl	10003fb0 <RCCEx_PLL4_Config>
10004398:	4603      	mov	r3, r0
1000439a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000439e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043a2:	2b00      	cmp	r3, #0
100043a4:	d003      	beq.n	100043ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
100043a6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043aa:	f001 bde3 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100043ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043b2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100043b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100043be:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
100043c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043c6:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
100043ca:	f023 0107 	bic.w	r1, r3, #7
100043ce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043d6:	681b      	ldr	r3, [r3, #0]
100043d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
100043dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043e0:	430b      	orrs	r3, r1
100043e2:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
100043e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043ee:	681b      	ldr	r3, [r3, #0]
100043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
100043f4:	2100      	movs	r1, #0
100043f6:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
100043fa:	f003 0320 	and.w	r3, r3, #32
100043fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
10004402:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
10004406:	460b      	mov	r3, r1
10004408:	4313      	orrs	r3, r2
1000440a:	d038      	beq.n	1000447e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
1000440c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004410:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004414:	681b      	ldr	r3, [r3, #0]
10004416:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
1000441a:	2b01      	cmp	r3, #1
1000441c:	d11d      	bne.n	1000445a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000441e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004422:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004426:	681b      	ldr	r3, [r3, #0]
10004428:	3344      	adds	r3, #68	@ 0x44
1000442a:	4618      	mov	r0, r3
1000442c:	f7ff fc56 	bl	10003cdc <RCCEx_PLL3_Config>
10004430:	4603      	mov	r3, r0
10004432:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004436:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000443a:	2b00      	cmp	r3, #0
1000443c:	d003      	beq.n	10004446 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
1000443e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004442:	f001 bd97 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004446:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000444a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000444e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004452:	f043 0320 	orr.w	r3, r3, #32
10004456:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
1000445a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000445e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10004462:	f023 0107 	bic.w	r1, r3, #7
10004466:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000446a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000446e:	681b      	ldr	r3, [r3, #0]
10004470:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10004474:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004478:	430b      	orrs	r3, r1
1000447a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
1000447e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004482:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004486:	681b      	ldr	r3, [r3, #0]
10004488:	e9d3 2300 	ldrd	r2, r3, [r3]
1000448c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
10004490:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
10004494:	2300      	movs	r3, #0
10004496:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
1000449a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
1000449e:	460b      	mov	r3, r1
100044a0:	4313      	orrs	r3, r2
100044a2:	d07e      	beq.n	100045a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
100044a4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044ac:	681b      	ldr	r3, [r3, #0]
100044ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
100044b2:	2b04      	cmp	r3, #4
100044b4:	d044      	beq.n	10004540 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
100044b6:	2b04      	cmp	r3, #4
100044b8:	d861      	bhi.n	1000457e <HAL_RCCEx_PeriphCLKConfig+0x31e>
100044ba:	2b00      	cmp	r3, #0
100044bc:	d002      	beq.n	100044c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
100044be:	2b01      	cmp	r3, #1
100044c0:	d01f      	beq.n	10004502 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
100044c2:	e05c      	b.n	1000457e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100044c4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044cc:	681b      	ldr	r3, [r3, #0]
100044ce:	3380      	adds	r3, #128	@ 0x80
100044d0:	4618      	mov	r0, r3
100044d2:	f7ff fd6d 	bl	10003fb0 <RCCEx_PLL4_Config>
100044d6:	4603      	mov	r3, r0
100044d8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100044dc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100044e0:	2b00      	cmp	r3, #0
100044e2:	d003      	beq.n	100044ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
100044e4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100044e8:	f001 bd44 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100044ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044f0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100044f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044f8:	f043 0320 	orr.w	r3, r3, #32
100044fc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004500:	e03d      	b.n	1000457e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004502:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004506:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000450a:	681b      	ldr	r3, [r3, #0]
1000450c:	3344      	adds	r3, #68	@ 0x44
1000450e:	4618      	mov	r0, r3
10004510:	f7ff fbe4 	bl	10003cdc <RCCEx_PLL3_Config>
10004514:	4603      	mov	r3, r0
10004516:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000451a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000451e:	2b00      	cmp	r3, #0
10004520:	d003      	beq.n	1000452a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10004522:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004526:	f001 bd25 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000452a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000452e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004532:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004536:	f043 0320 	orr.w	r3, r3, #32
1000453a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000453e:	e01e      	b.n	1000457e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004540:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004544:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004548:	681b      	ldr	r3, [r3, #0]
1000454a:	3344      	adds	r3, #68	@ 0x44
1000454c:	4618      	mov	r0, r3
1000454e:	f7ff fbc5 	bl	10003cdc <RCCEx_PLL3_Config>
10004552:	4603      	mov	r3, r0
10004554:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004558:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000455c:	2b00      	cmp	r3, #0
1000455e:	d003      	beq.n	10004568 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10004560:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004564:	f001 bd06 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004568:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000456c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004570:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004578:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000457c:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
1000457e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004582:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
10004586:	f023 0107 	bic.w	r1, r3, #7
1000458a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000458e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004592:	681b      	ldr	r3, [r3, #0]
10004594:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10004598:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000459c:	430b      	orrs	r3, r1
1000459e:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
100045a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045aa:	681b      	ldr	r3, [r3, #0]
100045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
100045b0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
100045b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
100045b8:	2300      	movs	r3, #0
100045ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
100045be:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
100045c2:	460b      	mov	r3, r1
100045c4:	4313      	orrs	r3, r2
100045c6:	d07e      	beq.n	100046c6 <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
100045c8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045d0:	681b      	ldr	r3, [r3, #0]
100045d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
100045d6:	2b05      	cmp	r3, #5
100045d8:	d044      	beq.n	10004664 <HAL_RCCEx_PeriphCLKConfig+0x404>
100045da:	2b05      	cmp	r3, #5
100045dc:	d861      	bhi.n	100046a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
100045de:	2b00      	cmp	r3, #0
100045e0:	d002      	beq.n	100045e8 <HAL_RCCEx_PeriphCLKConfig+0x388>
100045e2:	2b01      	cmp	r3, #1
100045e4:	d01f      	beq.n	10004626 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
100045e6:	e05c      	b.n	100046a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100045e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045f0:	681b      	ldr	r3, [r3, #0]
100045f2:	3380      	adds	r3, #128	@ 0x80
100045f4:	4618      	mov	r0, r3
100045f6:	f7ff fcdb 	bl	10003fb0 <RCCEx_PLL4_Config>
100045fa:	4603      	mov	r3, r0
100045fc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004600:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004604:	2b00      	cmp	r3, #0
10004606:	d003      	beq.n	10004610 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10004608:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000460c:	f001 bcb2 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004610:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004614:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004618:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000461c:	f043 0320 	orr.w	r3, r3, #32
10004620:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004624:	e03d      	b.n	100046a2 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004626:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000462a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000462e:	681b      	ldr	r3, [r3, #0]
10004630:	3344      	adds	r3, #68	@ 0x44
10004632:	4618      	mov	r0, r3
10004634:	f7ff fb52 	bl	10003cdc <RCCEx_PLL3_Config>
10004638:	4603      	mov	r3, r0
1000463a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000463e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004642:	2b00      	cmp	r3, #0
10004644:	d003      	beq.n	1000464e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10004646:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000464a:	f001 bc93 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000464e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004652:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004656:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000465a:	f043 0320 	orr.w	r3, r3, #32
1000465e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004662:	e01e      	b.n	100046a2 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004664:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004668:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000466c:	681b      	ldr	r3, [r3, #0]
1000466e:	3344      	adds	r3, #68	@ 0x44
10004670:	4618      	mov	r0, r3
10004672:	f7ff fb33 	bl	10003cdc <RCCEx_PLL3_Config>
10004676:	4603      	mov	r3, r0
10004678:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000467c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004680:	2b00      	cmp	r3, #0
10004682:	d003      	beq.n	1000468c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10004684:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004688:	f001 bc74 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000468c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004690:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004694:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000469c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100046a0:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
100046a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046a6:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
100046aa:	f023 0107 	bic.w	r1, r3, #7
100046ae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046b6:	681b      	ldr	r3, [r3, #0]
100046b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
100046bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100046c0:	430b      	orrs	r3, r1
100046c2:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
100046c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046ce:	681b      	ldr	r3, [r3, #0]
100046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
100046d4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
100046d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
100046dc:	2300      	movs	r3, #0
100046de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
100046e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
100046e6:	460b      	mov	r3, r1
100046e8:	4313      	orrs	r3, r2
100046ea:	d07e      	beq.n	100047ea <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
100046ec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046f4:	681b      	ldr	r3, [r3, #0]
100046f6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
100046fa:	2b04      	cmp	r3, #4
100046fc:	d044      	beq.n	10004788 <HAL_RCCEx_PeriphCLKConfig+0x528>
100046fe:	2b04      	cmp	r3, #4
10004700:	d861      	bhi.n	100047c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
10004702:	2b00      	cmp	r3, #0
10004704:	d002      	beq.n	1000470c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
10004706:	2b01      	cmp	r3, #1
10004708:	d01f      	beq.n	1000474a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
1000470a:	e05c      	b.n	100047c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000470c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004710:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004714:	681b      	ldr	r3, [r3, #0]
10004716:	3380      	adds	r3, #128	@ 0x80
10004718:	4618      	mov	r0, r3
1000471a:	f7ff fc49 	bl	10003fb0 <RCCEx_PLL4_Config>
1000471e:	4603      	mov	r3, r0
10004720:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004724:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004728:	2b00      	cmp	r3, #0
1000472a:	d003      	beq.n	10004734 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
1000472c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004730:	f001 bc20 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004734:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004738:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000473c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004740:	f043 0320 	orr.w	r3, r3, #32
10004744:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004748:	e03d      	b.n	100047c6 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000474a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000474e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004752:	681b      	ldr	r3, [r3, #0]
10004754:	3344      	adds	r3, #68	@ 0x44
10004756:	4618      	mov	r0, r3
10004758:	f7ff fac0 	bl	10003cdc <RCCEx_PLL3_Config>
1000475c:	4603      	mov	r3, r0
1000475e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004762:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004766:	2b00      	cmp	r3, #0
10004768:	d003      	beq.n	10004772 <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
1000476a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000476e:	f001 bc01 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004772:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004776:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000477a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000477e:	f043 0320 	orr.w	r3, r3, #32
10004782:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004786:	e01e      	b.n	100047c6 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004788:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000478c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004790:	681b      	ldr	r3, [r3, #0]
10004792:	3344      	adds	r3, #68	@ 0x44
10004794:	4618      	mov	r0, r3
10004796:	f7ff faa1 	bl	10003cdc <RCCEx_PLL3_Config>
1000479a:	4603      	mov	r3, r0
1000479c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100047a0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047a4:	2b00      	cmp	r3, #0
100047a6:	d003      	beq.n	100047b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
100047a8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047ac:	f001 bbe2 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100047b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047b4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100047b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100047c0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100047c4:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
100047c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047ca:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
100047ce:	f023 0107 	bic.w	r1, r3, #7
100047d2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047da:	681b      	ldr	r3, [r3, #0]
100047dc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
100047e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047e4:	430b      	orrs	r3, r1
100047e6:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
100047ea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047f2:	681b      	ldr	r3, [r3, #0]
100047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
100047f8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
100047fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
10004800:	2300      	movs	r3, #0
10004802:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
10004806:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
1000480a:	460b      	mov	r3, r1
1000480c:	4313      	orrs	r3, r2
1000480e:	d07e      	beq.n	1000490e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10004810:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004814:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004818:	681b      	ldr	r3, [r3, #0]
1000481a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
1000481e:	2b04      	cmp	r3, #4
10004820:	d044      	beq.n	100048ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
10004822:	2b04      	cmp	r3, #4
10004824:	d861      	bhi.n	100048ea <HAL_RCCEx_PeriphCLKConfig+0x68a>
10004826:	2b00      	cmp	r3, #0
10004828:	d002      	beq.n	10004830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
1000482a:	2b01      	cmp	r3, #1
1000482c:	d01f      	beq.n	1000486e <HAL_RCCEx_PeriphCLKConfig+0x60e>
1000482e:	e05c      	b.n	100048ea <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004830:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004834:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004838:	681b      	ldr	r3, [r3, #0]
1000483a:	3380      	adds	r3, #128	@ 0x80
1000483c:	4618      	mov	r0, r3
1000483e:	f7ff fbb7 	bl	10003fb0 <RCCEx_PLL4_Config>
10004842:	4603      	mov	r3, r0
10004844:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004848:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000484c:	2b00      	cmp	r3, #0
1000484e:	d003      	beq.n	10004858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10004850:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004854:	f001 bb8e 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004858:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000485c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004860:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004864:	f043 0320 	orr.w	r3, r3, #32
10004868:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000486c:	e03d      	b.n	100048ea <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000486e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004872:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004876:	681b      	ldr	r3, [r3, #0]
10004878:	3344      	adds	r3, #68	@ 0x44
1000487a:	4618      	mov	r0, r3
1000487c:	f7ff fa2e 	bl	10003cdc <RCCEx_PLL3_Config>
10004880:	4603      	mov	r3, r0
10004882:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004886:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000488a:	2b00      	cmp	r3, #0
1000488c:	d003      	beq.n	10004896 <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
1000488e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004892:	f001 bb6f 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004896:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000489a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000489e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100048a2:	f043 0320 	orr.w	r3, r3, #32
100048a6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100048aa:	e01e      	b.n	100048ea <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100048ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048b4:	681b      	ldr	r3, [r3, #0]
100048b6:	3344      	adds	r3, #68	@ 0x44
100048b8:	4618      	mov	r0, r3
100048ba:	f7ff fa0f 	bl	10003cdc <RCCEx_PLL3_Config>
100048be:	4603      	mov	r3, r0
100048c0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100048c4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100048c8:	2b00      	cmp	r3, #0
100048ca:	d003      	beq.n	100048d4 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
100048cc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100048d0:	f001 bb50 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100048d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100048d8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100048dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100048e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100048e4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100048e8:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
100048ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100048ee:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
100048f2:	f023 0107 	bic.w	r1, r3, #7
100048f6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048fe:	681b      	ldr	r3, [r3, #0]
10004900:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10004904:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004908:	430b      	orrs	r3, r1
1000490a:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
1000490e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004912:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004916:	681b      	ldr	r3, [r3, #0]
10004918:	e9d3 2300 	ldrd	r2, r3, [r3]
1000491c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
10004920:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
10004924:	2300      	movs	r3, #0
10004926:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
1000492a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
1000492e:	460b      	mov	r3, r1
10004930:	4313      	orrs	r3, r2
10004932:	d07e      	beq.n	10004a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10004934:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004938:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000493c:	681b      	ldr	r3, [r3, #0]
1000493e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
10004942:	2b04      	cmp	r3, #4
10004944:	d044      	beq.n	100049d0 <HAL_RCCEx_PeriphCLKConfig+0x770>
10004946:	2b04      	cmp	r3, #4
10004948:	d861      	bhi.n	10004a0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
1000494a:	2b00      	cmp	r3, #0
1000494c:	d002      	beq.n	10004954 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
1000494e:	2b01      	cmp	r3, #1
10004950:	d01f      	beq.n	10004992 <HAL_RCCEx_PeriphCLKConfig+0x732>
10004952:	e05c      	b.n	10004a0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004954:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004958:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000495c:	681b      	ldr	r3, [r3, #0]
1000495e:	3380      	adds	r3, #128	@ 0x80
10004960:	4618      	mov	r0, r3
10004962:	f7ff fb25 	bl	10003fb0 <RCCEx_PLL4_Config>
10004966:	4603      	mov	r3, r0
10004968:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000496c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004970:	2b00      	cmp	r3, #0
10004972:	d003      	beq.n	1000497c <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
10004974:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004978:	f001 bafc 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000497c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004980:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004984:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004988:	f043 0310 	orr.w	r3, r3, #16
1000498c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004990:	e03d      	b.n	10004a0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004992:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004996:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000499a:	681b      	ldr	r3, [r3, #0]
1000499c:	3344      	adds	r3, #68	@ 0x44
1000499e:	4618      	mov	r0, r3
100049a0:	f7ff f99c 	bl	10003cdc <RCCEx_PLL3_Config>
100049a4:	4603      	mov	r3, r0
100049a6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100049aa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049ae:	2b00      	cmp	r3, #0
100049b0:	d003      	beq.n	100049ba <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
100049b2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049b6:	f001 badd 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100049ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049be:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100049c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049c6:	f043 0320 	orr.w	r3, r3, #32
100049ca:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100049ce:	e01e      	b.n	10004a0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100049d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100049d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100049d8:	681b      	ldr	r3, [r3, #0]
100049da:	3344      	adds	r3, #68	@ 0x44
100049dc:	4618      	mov	r0, r3
100049de:	f7ff f97d 	bl	10003cdc <RCCEx_PLL3_Config>
100049e2:	4603      	mov	r3, r0
100049e4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100049e8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049ec:	2b00      	cmp	r3, #0
100049ee:	d003      	beq.n	100049f8 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
100049f0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049f4:	f001 babe 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100049f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049fc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004a00:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004a08:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004a0c:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10004a0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a12:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
10004a16:	f023 0107 	bic.w	r1, r3, #7
10004a1a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a22:	681b      	ldr	r3, [r3, #0]
10004a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
10004a28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a2c:	430b      	orrs	r3, r1
10004a2e:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10004a32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a3a:	681b      	ldr	r3, [r3, #0]
10004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a40:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
10004a44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
10004a48:	2300      	movs	r3, #0
10004a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
10004a4e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
10004a52:	460b      	mov	r3, r1
10004a54:	4313      	orrs	r3, r2
10004a56:	d07e      	beq.n	10004b56 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10004a58:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a60:	681b      	ldr	r3, [r3, #0]
10004a62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10004a66:	2b04      	cmp	r3, #4
10004a68:	d044      	beq.n	10004af4 <HAL_RCCEx_PeriphCLKConfig+0x894>
10004a6a:	2b04      	cmp	r3, #4
10004a6c:	d861      	bhi.n	10004b32 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10004a6e:	2b00      	cmp	r3, #0
10004a70:	d002      	beq.n	10004a78 <HAL_RCCEx_PeriphCLKConfig+0x818>
10004a72:	2b01      	cmp	r3, #1
10004a74:	d01f      	beq.n	10004ab6 <HAL_RCCEx_PeriphCLKConfig+0x856>
10004a76:	e05c      	b.n	10004b32 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004a78:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a80:	681b      	ldr	r3, [r3, #0]
10004a82:	3380      	adds	r3, #128	@ 0x80
10004a84:	4618      	mov	r0, r3
10004a86:	f7ff fa93 	bl	10003fb0 <RCCEx_PLL4_Config>
10004a8a:	4603      	mov	r3, r0
10004a8c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004a90:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a94:	2b00      	cmp	r3, #0
10004a96:	d003      	beq.n	10004aa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10004a98:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a9c:	f001 ba6a 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004aa0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004aa4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004aa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004aac:	f043 0310 	orr.w	r3, r3, #16
10004ab0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004ab4:	e03d      	b.n	10004b32 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004ab6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004aba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004abe:	681b      	ldr	r3, [r3, #0]
10004ac0:	3344      	adds	r3, #68	@ 0x44
10004ac2:	4618      	mov	r0, r3
10004ac4:	f7ff f90a 	bl	10003cdc <RCCEx_PLL3_Config>
10004ac8:	4603      	mov	r3, r0
10004aca:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004ace:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ad2:	2b00      	cmp	r3, #0
10004ad4:	d003      	beq.n	10004ade <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
10004ad6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ada:	f001 ba4b 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004ade:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ae2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004ae6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004aea:	f043 0320 	orr.w	r3, r3, #32
10004aee:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004af2:	e01e      	b.n	10004b32 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004af4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004af8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004afc:	681b      	ldr	r3, [r3, #0]
10004afe:	3344      	adds	r3, #68	@ 0x44
10004b00:	4618      	mov	r0, r3
10004b02:	f7ff f8eb 	bl	10003cdc <RCCEx_PLL3_Config>
10004b06:	4603      	mov	r3, r0
10004b08:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004b0c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b10:	2b00      	cmp	r3, #0
10004b12:	d003      	beq.n	10004b1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10004b14:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b18:	f001 ba2c 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004b1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b20:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004b24:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004b2c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004b30:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
10004b32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b36:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
10004b3a:	f023 0107 	bic.w	r1, r3, #7
10004b3e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b46:	681b      	ldr	r3, [r3, #0]
10004b48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10004b4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b50:	430b      	orrs	r3, r1
10004b52:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10004b56:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b5e:	681b      	ldr	r3, [r3, #0]
10004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
10004b64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
10004b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
10004b6c:	2300      	movs	r3, #0
10004b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
10004b72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
10004b76:	460b      	mov	r3, r1
10004b78:	4313      	orrs	r3, r2
10004b7a:	d038      	beq.n	10004bee <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10004b7c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b84:	681b      	ldr	r3, [r3, #0]
10004b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10004b8a:	2b01      	cmp	r3, #1
10004b8c:	d11d      	bne.n	10004bca <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004b8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b96:	681b      	ldr	r3, [r3, #0]
10004b98:	3380      	adds	r3, #128	@ 0x80
10004b9a:	4618      	mov	r0, r3
10004b9c:	f7ff fa08 	bl	10003fb0 <RCCEx_PLL4_Config>
10004ba0:	4603      	mov	r3, r0
10004ba2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004ba6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004baa:	2b00      	cmp	r3, #0
10004bac:	d003      	beq.n	10004bb6 <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10004bae:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004bb2:	f001 b9df 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004bb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bba:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004bbe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004bc2:	f043 0320 	orr.w	r3, r3, #32
10004bc6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10004bca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bce:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
10004bd2:	f023 0107 	bic.w	r1, r3, #7
10004bd6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004bde:	681b      	ldr	r3, [r3, #0]
10004be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10004be4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004be8:	430b      	orrs	r3, r1
10004bea:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10004bee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bf2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004bf6:	681b      	ldr	r3, [r3, #0]
10004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
10004bfc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
10004c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
10004c04:	2300      	movs	r3, #0
10004c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
10004c0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
10004c0e:	460b      	mov	r3, r1
10004c10:	4313      	orrs	r3, r2
10004c12:	d05b      	beq.n	10004ccc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10004c14:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c1c:	681b      	ldr	r3, [r3, #0]
10004c1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10004c22:	2b01      	cmp	r3, #1
10004c24:	d002      	beq.n	10004c2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
10004c26:	2b05      	cmp	r3, #5
10004c28:	d01f      	beq.n	10004c6a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
10004c2a:	e03d      	b.n	10004ca8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004c2c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c34:	681b      	ldr	r3, [r3, #0]
10004c36:	3380      	adds	r3, #128	@ 0x80
10004c38:	4618      	mov	r0, r3
10004c3a:	f7ff f9b9 	bl	10003fb0 <RCCEx_PLL4_Config>
10004c3e:	4603      	mov	r3, r0
10004c40:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004c44:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c48:	2b00      	cmp	r3, #0
10004c4a:	d003      	beq.n	10004c54 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10004c4c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c50:	f001 b990 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004c54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c58:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004c5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c60:	f043 0320 	orr.w	r3, r3, #32
10004c64:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004c68:	e01e      	b.n	10004ca8 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004c6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c72:	681b      	ldr	r3, [r3, #0]
10004c74:	3344      	adds	r3, #68	@ 0x44
10004c76:	4618      	mov	r0, r3
10004c78:	f7ff f830 	bl	10003cdc <RCCEx_PLL3_Config>
10004c7c:	4603      	mov	r3, r0
10004c7e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004c82:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c86:	2b00      	cmp	r3, #0
10004c88:	d003      	beq.n	10004c92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10004c8a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c8e:	f001 b971 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004c92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c96:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004c9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c9e:	f043 0320 	orr.w	r3, r3, #32
10004ca2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004ca6:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10004ca8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004cac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10004cb0:	f023 0107 	bic.w	r1, r3, #7
10004cb4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004cbc:	681b      	ldr	r3, [r3, #0]
10004cbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10004cc2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004cc6:	430b      	orrs	r3, r1
10004cc8:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10004ccc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004cd4:	681b      	ldr	r3, [r3, #0]
10004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
10004cda:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
10004cde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
10004ce2:	2300      	movs	r3, #0
10004ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
10004ce8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
10004cec:	460b      	mov	r3, r1
10004cee:	4313      	orrs	r3, r2
10004cf0:	d038      	beq.n	10004d64 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10004cf2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cf6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004cfa:	681b      	ldr	r3, [r3, #0]
10004cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10004d00:	2b01      	cmp	r3, #1
10004d02:	d11d      	bne.n	10004d40 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004d04:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d0c:	681b      	ldr	r3, [r3, #0]
10004d0e:	3380      	adds	r3, #128	@ 0x80
10004d10:	4618      	mov	r0, r3
10004d12:	f7ff f94d 	bl	10003fb0 <RCCEx_PLL4_Config>
10004d16:	4603      	mov	r3, r0
10004d18:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004d1c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004d20:	2b00      	cmp	r3, #0
10004d22:	d003      	beq.n	10004d2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
10004d24:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004d28:	f001 b924 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004d2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d30:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004d34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d38:	f043 0320 	orr.w	r3, r3, #32
10004d3c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10004d40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d44:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
10004d48:	f023 0107 	bic.w	r1, r3, #7
10004d4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d54:	681b      	ldr	r3, [r3, #0]
10004d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10004d5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d5e:	430b      	orrs	r3, r1
10004d60:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10004d64:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d6c:	681b      	ldr	r3, [r3, #0]
10004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004d72:	f002 0302 	and.w	r3, r2, #2
10004d76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
10004d7a:	2300      	movs	r3, #0
10004d7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
10004d80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
10004d84:	460b      	mov	r3, r1
10004d86:	4313      	orrs	r3, r2
10004d88:	d038      	beq.n	10004dfc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10004d8a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d92:	681b      	ldr	r3, [r3, #0]
10004d94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10004d98:	2b01      	cmp	r3, #1
10004d9a:	d11d      	bne.n	10004dd8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004d9c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004da0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004da4:	681b      	ldr	r3, [r3, #0]
10004da6:	3380      	adds	r3, #128	@ 0x80
10004da8:	4618      	mov	r0, r3
10004daa:	f7ff f901 	bl	10003fb0 <RCCEx_PLL4_Config>
10004dae:	4603      	mov	r3, r0
10004db0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004db4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004db8:	2b00      	cmp	r3, #0
10004dba:	d003      	beq.n	10004dc4 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10004dbc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004dc0:	f001 b8d8 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004dc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004dc8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004dcc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004dd0:	f043 0320 	orr.w	r3, r3, #32
10004dd4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10004dd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ddc:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
10004de0:	f023 0107 	bic.w	r1, r3, #7
10004de4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004de8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004dec:	681b      	ldr	r3, [r3, #0]
10004dee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10004df2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004df6:	430b      	orrs	r3, r1
10004df8:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10004dfc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e04:	681b      	ldr	r3, [r3, #0]
10004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
10004e0a:	f002 0304 	and.w	r3, r2, #4
10004e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
10004e12:	2300      	movs	r3, #0
10004e14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
10004e18:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
10004e1c:	460b      	mov	r3, r1
10004e1e:	4313      	orrs	r3, r2
10004e20:	d038      	beq.n	10004e94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10004e22:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e2a:	681b      	ldr	r3, [r3, #0]
10004e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10004e30:	2b01      	cmp	r3, #1
10004e32:	d11d      	bne.n	10004e70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004e34:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e3c:	681b      	ldr	r3, [r3, #0]
10004e3e:	3380      	adds	r3, #128	@ 0x80
10004e40:	4618      	mov	r0, r3
10004e42:	f7ff f8b5 	bl	10003fb0 <RCCEx_PLL4_Config>
10004e46:	4603      	mov	r3, r0
10004e48:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004e4c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004e50:	2b00      	cmp	r3, #0
10004e52:	d003      	beq.n	10004e5c <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
10004e54:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004e58:	f001 b88c 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004e5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e60:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004e64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004e68:	f043 0320 	orr.w	r3, r3, #32
10004e6c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10004e70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e74:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10004e78:	f023 0107 	bic.w	r1, r3, #7
10004e7c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e84:	681b      	ldr	r3, [r3, #0]
10004e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10004e8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004e8e:	430b      	orrs	r3, r1
10004e90:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10004e94:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e9c:	681b      	ldr	r3, [r3, #0]
10004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004ea2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
10004ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
10004eaa:	2300      	movs	r3, #0
10004eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
10004eb0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
10004eb4:	460b      	mov	r3, r1
10004eb6:	4313      	orrs	r3, r2
10004eb8:	d038      	beq.n	10004f2c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10004eba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ebe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ec2:	681b      	ldr	r3, [r3, #0]
10004ec4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10004ec8:	2b01      	cmp	r3, #1
10004eca:	d11d      	bne.n	10004f08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004ecc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ed0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ed4:	681b      	ldr	r3, [r3, #0]
10004ed6:	3380      	adds	r3, #128	@ 0x80
10004ed8:	4618      	mov	r0, r3
10004eda:	f7ff f869 	bl	10003fb0 <RCCEx_PLL4_Config>
10004ede:	4603      	mov	r3, r0
10004ee0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004ee4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ee8:	2b00      	cmp	r3, #0
10004eea:	d003      	beq.n	10004ef4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10004eec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ef0:	f001 b840 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004ef4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ef8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004efc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f00:	f043 0320 	orr.w	r3, r3, #32
10004f04:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10004f08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f0c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
10004f10:	f023 0107 	bic.w	r1, r3, #7
10004f14:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f1c:	681b      	ldr	r3, [r3, #0]
10004f1e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10004f22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f26:	430b      	orrs	r3, r1
10004f28:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10004f2c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f34:	681b      	ldr	r3, [r3, #0]
10004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
10004f3a:	f002 0301 	and.w	r3, r2, #1
10004f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
10004f42:	2300      	movs	r3, #0
10004f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
10004f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
10004f4c:	460b      	mov	r3, r1
10004f4e:	4313      	orrs	r3, r2
10004f50:	d05b      	beq.n	1000500a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
10004f52:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f5a:	681b      	ldr	r3, [r3, #0]
10004f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10004f60:	2b01      	cmp	r3, #1
10004f62:	d002      	beq.n	10004f6a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10004f64:	2b04      	cmp	r3, #4
10004f66:	d01f      	beq.n	10004fa8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10004f68:	e03d      	b.n	10004fe6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004f6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f72:	681b      	ldr	r3, [r3, #0]
10004f74:	3344      	adds	r3, #68	@ 0x44
10004f76:	4618      	mov	r0, r3
10004f78:	f7fe feb0 	bl	10003cdc <RCCEx_PLL3_Config>
10004f7c:	4603      	mov	r3, r0
10004f7e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004f82:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004f86:	2b00      	cmp	r3, #0
10004f88:	d003      	beq.n	10004f92 <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10004f8a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004f8e:	f000 bff1 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004f92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f96:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004f9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f9e:	f043 0320 	orr.w	r3, r3, #32
10004fa2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004fa6:	e01e      	b.n	10004fe6 <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004fa8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004fac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004fb0:	681b      	ldr	r3, [r3, #0]
10004fb2:	3380      	adds	r3, #128	@ 0x80
10004fb4:	4618      	mov	r0, r3
10004fb6:	f7fe fffb 	bl	10003fb0 <RCCEx_PLL4_Config>
10004fba:	4603      	mov	r3, r0
10004fbc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004fc0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004fc4:	2b00      	cmp	r3, #0
10004fc6:	d003      	beq.n	10004fd0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10004fc8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004fcc:	f000 bfd2 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004fd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004fd4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004fd8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004fdc:	f043 0320 	orr.w	r3, r3, #32
10004fe0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004fe4:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10004fe6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004fea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10004fee:	f023 0107 	bic.w	r1, r3, #7
10004ff2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ff6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ffa:	681b      	ldr	r3, [r3, #0]
10004ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10005000:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005004:	430b      	orrs	r3, r1
10005006:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
1000500a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000500e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005012:	681b      	ldr	r3, [r3, #0]
10005014:	e9d3 2300 	ldrd	r2, r3, [r3]
10005018:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
1000501c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
10005020:	2300      	movs	r3, #0
10005022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
10005026:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
1000502a:	460b      	mov	r3, r1
1000502c:	4313      	orrs	r3, r2
1000502e:	d05b      	beq.n	100050e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10005030:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005034:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005038:	681b      	ldr	r3, [r3, #0]
1000503a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
1000503e:	2b01      	cmp	r3, #1
10005040:	d002      	beq.n	10005048 <HAL_RCCEx_PeriphCLKConfig+0xde8>
10005042:	2b02      	cmp	r3, #2
10005044:	d01f      	beq.n	10005086 <HAL_RCCEx_PeriphCLKConfig+0xe26>
10005046:	e03d      	b.n	100050c4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005048:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000504c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005050:	681b      	ldr	r3, [r3, #0]
10005052:	3344      	adds	r3, #68	@ 0x44
10005054:	4618      	mov	r0, r3
10005056:	f7fe fe41 	bl	10003cdc <RCCEx_PLL3_Config>
1000505a:	4603      	mov	r3, r0
1000505c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005060:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005064:	2b00      	cmp	r3, #0
10005066:	d003      	beq.n	10005070 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10005068:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000506c:	f000 bf82 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005070:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005074:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005078:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000507c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005080:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005084:	e01e      	b.n	100050c4 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005086:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000508a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000508e:	681b      	ldr	r3, [r3, #0]
10005090:	3380      	adds	r3, #128	@ 0x80
10005092:	4618      	mov	r0, r3
10005094:	f7fe ff8c 	bl	10003fb0 <RCCEx_PLL4_Config>
10005098:	4603      	mov	r3, r0
1000509a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000509e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100050a2:	2b00      	cmp	r3, #0
100050a4:	d003      	beq.n	100050ae <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
100050a6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100050aa:	f000 bf63 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100050ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050b2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100050b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100050ba:	f043 0310 	orr.w	r3, r3, #16
100050be:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100050c2:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
100050c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050c8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
100050cc:	f023 0107 	bic.w	r1, r3, #7
100050d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100050d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100050d8:	681b      	ldr	r3, [r3, #0]
100050da:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
100050de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100050e2:	430b      	orrs	r3, r1
100050e4:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
100050e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100050ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100050f0:	681b      	ldr	r3, [r3, #0]
100050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
100050f6:	2100      	movs	r1, #0
100050f8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
100050fc:	f003 0301 	and.w	r3, r3, #1
10005100:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
10005104:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
10005108:	460b      	mov	r3, r1
1000510a:	4313      	orrs	r3, r2
1000510c:	d05b      	beq.n	100051c6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
1000510e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005112:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005116:	681b      	ldr	r3, [r3, #0]
10005118:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
1000511c:	2b01      	cmp	r3, #1
1000511e:	d002      	beq.n	10005126 <HAL_RCCEx_PeriphCLKConfig+0xec6>
10005120:	2b02      	cmp	r3, #2
10005122:	d01f      	beq.n	10005164 <HAL_RCCEx_PeriphCLKConfig+0xf04>
10005124:	e03d      	b.n	100051a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005126:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000512a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000512e:	681b      	ldr	r3, [r3, #0]
10005130:	3344      	adds	r3, #68	@ 0x44
10005132:	4618      	mov	r0, r3
10005134:	f7fe fdd2 	bl	10003cdc <RCCEx_PLL3_Config>
10005138:	4603      	mov	r3, r0
1000513a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000513e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005142:	2b00      	cmp	r3, #0
10005144:	d003      	beq.n	1000514e <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10005146:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000514a:	f000 bf13 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000514e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005152:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005156:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000515a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000515e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005162:	e01e      	b.n	100051a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005164:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005168:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000516c:	681b      	ldr	r3, [r3, #0]
1000516e:	3380      	adds	r3, #128	@ 0x80
10005170:	4618      	mov	r0, r3
10005172:	f7fe ff1d 	bl	10003fb0 <RCCEx_PLL4_Config>
10005176:	4603      	mov	r3, r0
10005178:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000517c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005180:	2b00      	cmp	r3, #0
10005182:	d003      	beq.n	1000518c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10005184:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005188:	f000 bef4 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000518c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005190:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005194:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005198:	f043 0310 	orr.w	r3, r3, #16
1000519c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100051a0:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
100051a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100051a6:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
100051aa:	f023 0107 	bic.w	r1, r3, #7
100051ae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051b6:	681b      	ldr	r3, [r3, #0]
100051b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
100051bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100051c0:	430b      	orrs	r3, r1
100051c2:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
100051c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051ce:	681b      	ldr	r3, [r3, #0]
100051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
100051d4:	2100      	movs	r1, #0
100051d6:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
100051da:	f003 0302 	and.w	r3, r3, #2
100051de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
100051e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
100051e6:	460b      	mov	r3, r1
100051e8:	4313      	orrs	r3, r2
100051ea:	d05b      	beq.n	100052a4 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
100051ec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051f4:	681b      	ldr	r3, [r3, #0]
100051f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
100051fa:	2b00      	cmp	r3, #0
100051fc:	d002      	beq.n	10005204 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
100051fe:	2b01      	cmp	r3, #1
10005200:	d01f      	beq.n	10005242 <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10005202:	e03d      	b.n	10005280 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005204:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005208:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000520c:	681b      	ldr	r3, [r3, #0]
1000520e:	3380      	adds	r3, #128	@ 0x80
10005210:	4618      	mov	r0, r3
10005212:	f7fe fecd 	bl	10003fb0 <RCCEx_PLL4_Config>
10005216:	4603      	mov	r3, r0
10005218:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000521c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005220:	2b00      	cmp	r3, #0
10005222:	d003      	beq.n	1000522c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10005224:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005228:	f000 bea4 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000522c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005230:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005234:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005238:	f043 0310 	orr.w	r3, r3, #16
1000523c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005240:	e01e      	b.n	10005280 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005242:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005246:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000524a:	681b      	ldr	r3, [r3, #0]
1000524c:	3344      	adds	r3, #68	@ 0x44
1000524e:	4618      	mov	r0, r3
10005250:	f7fe fd44 	bl	10003cdc <RCCEx_PLL3_Config>
10005254:	4603      	mov	r3, r0
10005256:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000525a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000525e:	2b00      	cmp	r3, #0
10005260:	d003      	beq.n	1000526a <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10005262:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005266:	f000 be85 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000526a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000526e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005272:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005276:	f043 0320 	orr.w	r3, r3, #32
1000527a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000527e:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10005280:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005284:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
10005288:	f023 0103 	bic.w	r1, r3, #3
1000528c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005290:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005294:	681b      	ldr	r3, [r3, #0]
10005296:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
1000529a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000529e:	430b      	orrs	r3, r1
100052a0:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
100052a4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100052a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100052ac:	681b      	ldr	r3, [r3, #0]
100052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
100052b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
100052b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
100052ba:	2300      	movs	r3, #0
100052bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
100052c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
100052c4:	460b      	mov	r3, r1
100052c6:	4313      	orrs	r3, r2
100052c8:	d05b      	beq.n	10005382 <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
100052ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100052ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100052d2:	681b      	ldr	r3, [r3, #0]
100052d4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
100052d8:	2b01      	cmp	r3, #1
100052da:	d002      	beq.n	100052e2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
100052dc:	2b02      	cmp	r3, #2
100052de:	d01f      	beq.n	10005320 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
100052e0:	e03d      	b.n	1000535e <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100052e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100052e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100052ea:	681b      	ldr	r3, [r3, #0]
100052ec:	3344      	adds	r3, #68	@ 0x44
100052ee:	4618      	mov	r0, r3
100052f0:	f7fe fcf4 	bl	10003cdc <RCCEx_PLL3_Config>
100052f4:	4603      	mov	r3, r0
100052f6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100052fa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100052fe:	2b00      	cmp	r3, #0
10005300:	d003      	beq.n	1000530a <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10005302:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005306:	f000 be35 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000530a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000530e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005312:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000531a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000531e:	e01e      	b.n	1000535e <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005320:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005328:	681b      	ldr	r3, [r3, #0]
1000532a:	3380      	adds	r3, #128	@ 0x80
1000532c:	4618      	mov	r0, r3
1000532e:	f7fe fe3f 	bl	10003fb0 <RCCEx_PLL4_Config>
10005332:	4603      	mov	r3, r0
10005334:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005338:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000533c:	2b00      	cmp	r3, #0
1000533e:	d003      	beq.n	10005348 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10005340:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005344:	f000 be16 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005348:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000534c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005350:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005354:	f043 0310 	orr.w	r3, r3, #16
10005358:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000535c:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
1000535e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005362:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
10005366:	f023 0103 	bic.w	r1, r3, #3
1000536a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000536e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005372:	681b      	ldr	r3, [r3, #0]
10005374:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10005378:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000537c:	430b      	orrs	r3, r1
1000537e:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10005382:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005386:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000538a:	681b      	ldr	r3, [r3, #0]
1000538c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005390:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
10005394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
10005398:	2300      	movs	r3, #0
1000539a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
1000539e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
100053a2:	460b      	mov	r3, r1
100053a4:	4313      	orrs	r3, r2
100053a6:	d05b      	beq.n	10005460 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
100053a8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100053b0:	681b      	ldr	r3, [r3, #0]
100053b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
100053b6:	2b01      	cmp	r3, #1
100053b8:	d002      	beq.n	100053c0 <HAL_RCCEx_PeriphCLKConfig+0x1160>
100053ba:	2b02      	cmp	r3, #2
100053bc:	d01f      	beq.n	100053fe <HAL_RCCEx_PeriphCLKConfig+0x119e>
100053be:	e03d      	b.n	1000543c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100053c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100053c8:	681b      	ldr	r3, [r3, #0]
100053ca:	3344      	adds	r3, #68	@ 0x44
100053cc:	4618      	mov	r0, r3
100053ce:	f7fe fc85 	bl	10003cdc <RCCEx_PLL3_Config>
100053d2:	4603      	mov	r3, r0
100053d4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100053d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100053dc:	2b00      	cmp	r3, #0
100053de:	d003      	beq.n	100053e8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
100053e0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100053e4:	f000 bdc6 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100053e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100053ec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100053f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100053f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100053f8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100053fc:	e01e      	b.n	1000543c <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100053fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005402:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005406:	681b      	ldr	r3, [r3, #0]
10005408:	3380      	adds	r3, #128	@ 0x80
1000540a:	4618      	mov	r0, r3
1000540c:	f7fe fdd0 	bl	10003fb0 <RCCEx_PLL4_Config>
10005410:	4603      	mov	r3, r0
10005412:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005416:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000541a:	2b00      	cmp	r3, #0
1000541c:	d003      	beq.n	10005426 <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
1000541e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005422:	f000 bda7 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005426:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000542a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000542e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005432:	f043 0310 	orr.w	r3, r3, #16
10005436:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000543a:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
1000543c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005440:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
10005444:	f023 0103 	bic.w	r1, r3, #3
10005448:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000544c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005450:	681b      	ldr	r3, [r3, #0]
10005452:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10005456:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000545a:	430b      	orrs	r3, r1
1000545c:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10005460:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005464:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005468:	681b      	ldr	r3, [r3, #0]
1000546a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000546e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
10005472:	67bb      	str	r3, [r7, #120]	@ 0x78
10005474:	2300      	movs	r3, #0
10005476:	67fb      	str	r3, [r7, #124]	@ 0x7c
10005478:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
1000547c:	460b      	mov	r3, r1
1000547e:	4313      	orrs	r3, r2
10005480:	d07e      	beq.n	10005580 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10005482:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005486:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000548a:	681b      	ldr	r3, [r3, #0]
1000548c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10005490:	2b03      	cmp	r3, #3
10005492:	d044      	beq.n	1000551e <HAL_RCCEx_PeriphCLKConfig+0x12be>
10005494:	2b03      	cmp	r3, #3
10005496:	d861      	bhi.n	1000555c <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10005498:	2b01      	cmp	r3, #1
1000549a:	d002      	beq.n	100054a2 <HAL_RCCEx_PeriphCLKConfig+0x1242>
1000549c:	2b02      	cmp	r3, #2
1000549e:	d01f      	beq.n	100054e0 <HAL_RCCEx_PeriphCLKConfig+0x1280>
100054a0:	e05c      	b.n	1000555c <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100054a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100054a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100054aa:	681b      	ldr	r3, [r3, #0]
100054ac:	3344      	adds	r3, #68	@ 0x44
100054ae:	4618      	mov	r0, r3
100054b0:	f7fe fc14 	bl	10003cdc <RCCEx_PLL3_Config>
100054b4:	4603      	mov	r3, r0
100054b6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100054ba:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100054be:	2b00      	cmp	r3, #0
100054c0:	d003      	beq.n	100054ca <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
100054c2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100054c6:	f000 bd55 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100054ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100054ce:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100054d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100054d6:	f043 0320 	orr.w	r3, r3, #32
100054da:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100054de:	e03d      	b.n	1000555c <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100054e0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100054e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100054e8:	681b      	ldr	r3, [r3, #0]
100054ea:	3380      	adds	r3, #128	@ 0x80
100054ec:	4618      	mov	r0, r3
100054ee:	f7fe fd5f 	bl	10003fb0 <RCCEx_PLL4_Config>
100054f2:	4603      	mov	r3, r0
100054f4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100054f8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100054fc:	2b00      	cmp	r3, #0
100054fe:	d003      	beq.n	10005508 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10005500:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005504:	f000 bd36 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005508:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000550c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005510:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005514:	f043 0320 	orr.w	r3, r3, #32
10005518:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000551c:	e01e      	b.n	1000555c <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000551e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005522:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005526:	681b      	ldr	r3, [r3, #0]
10005528:	3380      	adds	r3, #128	@ 0x80
1000552a:	4618      	mov	r0, r3
1000552c:	f7fe fd40 	bl	10003fb0 <RCCEx_PLL4_Config>
10005530:	4603      	mov	r3, r0
10005532:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005536:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000553a:	2b00      	cmp	r3, #0
1000553c:	d003      	beq.n	10005546 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
1000553e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005542:	f000 bd17 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005546:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000554a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000554e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005556:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000555a:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
1000555c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005560:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
10005564:	f023 0103 	bic.w	r1, r3, #3
10005568:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000556c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005570:	681b      	ldr	r3, [r3, #0]
10005572:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10005576:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000557a:	430b      	orrs	r3, r1
1000557c:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10005580:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005584:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005588:	681b      	ldr	r3, [r3, #0]
1000558a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000558e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
10005592:	673b      	str	r3, [r7, #112]	@ 0x70
10005594:	2300      	movs	r3, #0
10005596:	677b      	str	r3, [r7, #116]	@ 0x74
10005598:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
1000559c:	460b      	mov	r3, r1
1000559e:	4313      	orrs	r3, r2
100055a0:	d05b      	beq.n	1000565a <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
100055a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100055a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100055aa:	681b      	ldr	r3, [r3, #0]
100055ac:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
100055b0:	2b00      	cmp	r3, #0
100055b2:	d002      	beq.n	100055ba <HAL_RCCEx_PeriphCLKConfig+0x135a>
100055b4:	2b01      	cmp	r3, #1
100055b6:	d01f      	beq.n	100055f8 <HAL_RCCEx_PeriphCLKConfig+0x1398>
100055b8:	e03d      	b.n	10005636 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100055ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100055be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100055c2:	681b      	ldr	r3, [r3, #0]
100055c4:	3380      	adds	r3, #128	@ 0x80
100055c6:	4618      	mov	r0, r3
100055c8:	f7fe fcf2 	bl	10003fb0 <RCCEx_PLL4_Config>
100055cc:	4603      	mov	r3, r0
100055ce:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100055d2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100055d6:	2b00      	cmp	r3, #0
100055d8:	d003      	beq.n	100055e2 <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
100055da:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100055de:	f000 bcc9 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100055e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100055e6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100055ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100055ee:	f043 0310 	orr.w	r3, r3, #16
100055f2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100055f6:	e01e      	b.n	10005636 <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100055f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100055fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005600:	681b      	ldr	r3, [r3, #0]
10005602:	3344      	adds	r3, #68	@ 0x44
10005604:	4618      	mov	r0, r3
10005606:	f7fe fb69 	bl	10003cdc <RCCEx_PLL3_Config>
1000560a:	4603      	mov	r3, r0
1000560c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005610:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005614:	2b00      	cmp	r3, #0
10005616:	d003      	beq.n	10005620 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10005618:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000561c:	f000 bcaa 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005620:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005624:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005628:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000562c:	f043 0320 	orr.w	r3, r3, #32
10005630:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005634:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10005636:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000563a:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
1000563e:	f023 0103 	bic.w	r1, r3, #3
10005642:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005646:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000564a:	681b      	ldr	r3, [r3, #0]
1000564c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10005650:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005654:	430b      	orrs	r3, r1
10005656:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
1000565a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000565e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005662:	681b      	ldr	r3, [r3, #0]
10005664:	e9d3 2300 	ldrd	r2, r3, [r3]
10005668:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
1000566c:	66bb      	str	r3, [r7, #104]	@ 0x68
1000566e:	2300      	movs	r3, #0
10005670:	66fb      	str	r3, [r7, #108]	@ 0x6c
10005672:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
10005676:	460b      	mov	r3, r1
10005678:	4313      	orrs	r3, r2
1000567a:	d011      	beq.n	100056a0 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
1000567c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005680:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
10005684:	f023 0103 	bic.w	r1, r3, #3
10005688:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000568c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005690:	681b      	ldr	r3, [r3, #0]
10005692:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
10005696:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000569a:	430b      	orrs	r3, r1
1000569c:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
100056a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100056a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100056a8:	681b      	ldr	r3, [r3, #0]
100056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
100056ae:	f402 7300 	and.w	r3, r2, #512	@ 0x200
100056b2:	663b      	str	r3, [r7, #96]	@ 0x60
100056b4:	2300      	movs	r3, #0
100056b6:	667b      	str	r3, [r7, #100]	@ 0x64
100056b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
100056bc:	460b      	mov	r3, r1
100056be:	4313      	orrs	r3, r2
100056c0:	d038      	beq.n	10005734 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
100056c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100056c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100056ca:	681b      	ldr	r3, [r3, #0]
100056cc:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
100056d0:	2b01      	cmp	r3, #1
100056d2:	d11d      	bne.n	10005710 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100056d4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100056d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100056dc:	681b      	ldr	r3, [r3, #0]
100056de:	3380      	adds	r3, #128	@ 0x80
100056e0:	4618      	mov	r0, r3
100056e2:	f7fe fc65 	bl	10003fb0 <RCCEx_PLL4_Config>
100056e6:	4603      	mov	r3, r0
100056e8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100056ec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100056f0:	2b00      	cmp	r3, #0
100056f2:	d003      	beq.n	100056fc <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
100056f4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100056f8:	f000 bc3c 	b.w	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100056fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005700:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005704:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000570c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10005710:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005714:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10005718:	f023 0103 	bic.w	r1, r3, #3
1000571c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005720:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005724:	681b      	ldr	r3, [r3, #0]
10005726:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
1000572a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000572e:	430b      	orrs	r3, r1
10005730:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10005734:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005738:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000573c:	681b      	ldr	r3, [r3, #0]
1000573e:	e9d3 2300 	ldrd	r2, r3, [r3]
10005742:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
10005746:	65bb      	str	r3, [r7, #88]	@ 0x58
10005748:	2300      	movs	r3, #0
1000574a:	65fb      	str	r3, [r7, #92]	@ 0x5c
1000574c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
10005750:	460b      	mov	r3, r1
10005752:	4313      	orrs	r3, r2
10005754:	d037      	beq.n	100057c6 <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10005756:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000575a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000575e:	681b      	ldr	r3, [r3, #0]
10005760:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10005764:	2b00      	cmp	r3, #0
10005766:	d11c      	bne.n	100057a2 <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005768:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000576c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005770:	681b      	ldr	r3, [r3, #0]
10005772:	3380      	adds	r3, #128	@ 0x80
10005774:	4618      	mov	r0, r3
10005776:	f7fe fc1b 	bl	10003fb0 <RCCEx_PLL4_Config>
1000577a:	4603      	mov	r3, r0
1000577c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10005780:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005784:	2b00      	cmp	r3, #0
10005786:	d002      	beq.n	1000578e <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10005788:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000578c:	e3f2      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000578e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005792:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005796:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000579a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000579e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
100057a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100057a6:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
100057aa:	f023 0110 	bic.w	r1, r3, #16
100057ae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100057b6:	681b      	ldr	r3, [r3, #0]
100057b8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
100057bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100057c0:	430b      	orrs	r3, r1
100057c2:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
100057c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100057ce:	681b      	ldr	r3, [r3, #0]
100057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
100057d4:	2100      	movs	r1, #0
100057d6:	6539      	str	r1, [r7, #80]	@ 0x50
100057d8:	f003 0304 	and.w	r3, r3, #4
100057dc:	657b      	str	r3, [r7, #84]	@ 0x54
100057de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
100057e2:	460b      	mov	r3, r1
100057e4:	4313      	orrs	r3, r2
100057e6:	d037      	beq.n	10005858 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
100057e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100057f0:	681b      	ldr	r3, [r3, #0]
100057f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
100057f6:	2b01      	cmp	r3, #1
100057f8:	d11c      	bne.n	10005834 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100057fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005802:	681b      	ldr	r3, [r3, #0]
10005804:	3380      	adds	r3, #128	@ 0x80
10005806:	4618      	mov	r0, r3
10005808:	f7fe fbd2 	bl	10003fb0 <RCCEx_PLL4_Config>
1000580c:	4603      	mov	r3, r0
1000580e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10005812:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005816:	2b00      	cmp	r3, #0
10005818:	d002      	beq.n	10005820 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
1000581a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000581e:	e3a9      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005820:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005824:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005828:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000582c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005830:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10005834:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005838:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
1000583c:	f023 0103 	bic.w	r1, r3, #3
10005840:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005844:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005848:	681b      	ldr	r3, [r3, #0]
1000584a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
1000584e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005852:	430b      	orrs	r3, r1
10005854:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10005858:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000585c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005860:	681b      	ldr	r3, [r3, #0]
10005862:	e9d3 2300 	ldrd	r2, r3, [r3]
10005866:	2100      	movs	r1, #0
10005868:	64b9      	str	r1, [r7, #72]	@ 0x48
1000586a:	f003 0308 	and.w	r3, r3, #8
1000586e:	64fb      	str	r3, [r7, #76]	@ 0x4c
10005870:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
10005874:	460b      	mov	r3, r1
10005876:	4313      	orrs	r3, r2
10005878:	d037      	beq.n	100058ea <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
1000587a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000587e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005882:	681b      	ldr	r3, [r3, #0]
10005884:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10005888:	2b01      	cmp	r3, #1
1000588a:	d11c      	bne.n	100058c6 <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000588c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005890:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005894:	681b      	ldr	r3, [r3, #0]
10005896:	3380      	adds	r3, #128	@ 0x80
10005898:	4618      	mov	r0, r3
1000589a:	f7fe fb89 	bl	10003fb0 <RCCEx_PLL4_Config>
1000589e:	4603      	mov	r3, r0
100058a0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100058a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100058a8:	2b00      	cmp	r3, #0
100058aa:	d002      	beq.n	100058b2 <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
100058ac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100058b0:	e360      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100058b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100058b6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100058ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100058be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100058c2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
100058c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100058ca:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
100058ce:	f023 0103 	bic.w	r1, r3, #3
100058d2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100058d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100058da:	681b      	ldr	r3, [r3, #0]
100058dc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
100058e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100058e4:	430b      	orrs	r3, r1
100058e6:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
100058ea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100058ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100058f2:	681b      	ldr	r3, [r3, #0]
100058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
100058f8:	2100      	movs	r1, #0
100058fa:	6439      	str	r1, [r7, #64]	@ 0x40
100058fc:	f003 0310 	and.w	r3, r3, #16
10005900:	647b      	str	r3, [r7, #68]	@ 0x44
10005902:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
10005906:	460b      	mov	r3, r1
10005908:	4313      	orrs	r3, r2
1000590a:	d011      	beq.n	10005930 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
1000590c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005910:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10005914:	f023 0103 	bic.w	r1, r3, #3
10005918:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000591c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005920:	681b      	ldr	r3, [r3, #0]
10005922:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
10005926:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000592a:	430b      	orrs	r3, r1
1000592c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10005930:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005934:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005938:	681b      	ldr	r3, [r3, #0]
1000593a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000593e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
10005942:	63bb      	str	r3, [r7, #56]	@ 0x38
10005944:	2300      	movs	r3, #0
10005946:	63fb      	str	r3, [r7, #60]	@ 0x3c
10005948:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
1000594c:	460b      	mov	r3, r1
1000594e:	4313      	orrs	r3, r2
10005950:	d037      	beq.n	100059c2 <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
10005952:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005956:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000595a:	681b      	ldr	r3, [r3, #0]
1000595c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
10005960:	2b01      	cmp	r3, #1
10005962:	d11c      	bne.n	1000599e <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005964:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005968:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000596c:	681b      	ldr	r3, [r3, #0]
1000596e:	3380      	adds	r3, #128	@ 0x80
10005970:	4618      	mov	r0, r3
10005972:	f7fe fb1d 	bl	10003fb0 <RCCEx_PLL4_Config>
10005976:	4603      	mov	r3, r0
10005978:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000597c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005980:	2b00      	cmp	r3, #0
10005982:	d002      	beq.n	1000598a <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
10005984:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005988:	e2f4      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000598a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000598e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005992:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005996:	f043 0310 	orr.w	r3, r3, #16
1000599a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
1000599e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100059a2:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
100059a6:	f023 0101 	bic.w	r1, r3, #1
100059aa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100059ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100059b2:	681b      	ldr	r3, [r3, #0]
100059b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
100059b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100059bc:	430b      	orrs	r3, r1
100059be:	f8c2 3924 	str.w	r3, [r2, #2340]	@ 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
100059c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100059c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100059ca:	681b      	ldr	r3, [r3, #0]
100059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
100059d0:	f002 0308 	and.w	r3, r2, #8
100059d4:	633b      	str	r3, [r7, #48]	@ 0x30
100059d6:	2300      	movs	r3, #0
100059d8:	637b      	str	r3, [r7, #52]	@ 0x34
100059da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
100059de:	460b      	mov	r3, r1
100059e0:	4313      	orrs	r3, r2
100059e2:	d059      	beq.n	10005a98 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
100059e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100059e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100059ec:	681b      	ldr	r3, [r3, #0]
100059ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100059f2:	2b00      	cmp	r3, #0
100059f4:	d002      	beq.n	100059fc <HAL_RCCEx_PeriphCLKConfig+0x179c>
100059f6:	2b02      	cmp	r3, #2
100059f8:	d01e      	beq.n	10005a38 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
100059fa:	e03b      	b.n	10005a74 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100059fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005a00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005a04:	681b      	ldr	r3, [r3, #0]
10005a06:	3380      	adds	r3, #128	@ 0x80
10005a08:	4618      	mov	r0, r3
10005a0a:	f7fe fad1 	bl	10003fb0 <RCCEx_PLL4_Config>
10005a0e:	4603      	mov	r3, r0
10005a10:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005a14:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005a18:	2b00      	cmp	r3, #0
10005a1a:	d002      	beq.n	10005a22 <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10005a1c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005a20:	e2a8      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005a22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005a26:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005a2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005a32:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
10005a36:	e01d      	b.n	10005a74 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005a38:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005a3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005a40:	681b      	ldr	r3, [r3, #0]
10005a42:	3344      	adds	r3, #68	@ 0x44
10005a44:	4618      	mov	r0, r3
10005a46:	f7fe f949 	bl	10003cdc <RCCEx_PLL3_Config>
10005a4a:	4603      	mov	r3, r0
10005a4c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005a50:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005a54:	2b00      	cmp	r3, #0
10005a56:	d002      	beq.n	10005a5e <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10005a58:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005a5c:	e28a      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005a5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005a62:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005a66:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005a6a:	f043 0320 	orr.w	r3, r3, #32
10005a6e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005a72:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
10005a74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005a78:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
10005a7c:	f023 0103 	bic.w	r1, r3, #3
10005a80:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005a84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005a88:	681b      	ldr	r3, [r3, #0]
10005a8a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10005a8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005a92:	430b      	orrs	r3, r1
10005a94:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10005a98:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005a9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005aa0:	681b      	ldr	r3, [r3, #0]
10005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
10005aa6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
10005aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
10005aac:	2300      	movs	r3, #0
10005aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
10005ab0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
10005ab4:	460b      	mov	r3, r1
10005ab6:	4313      	orrs	r3, r2
10005ab8:	d058      	beq.n	10005b6c <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10005aba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005abe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005ac2:	681b      	ldr	r3, [r3, #0]
10005ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005ac8:	2b01      	cmp	r3, #1
10005aca:	d01f      	beq.n	10005b0c <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10005acc:	2b02      	cmp	r3, #2
10005ace:	d13b      	bne.n	10005b48 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005ad0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005ad4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005ad8:	681b      	ldr	r3, [r3, #0]
10005ada:	3344      	adds	r3, #68	@ 0x44
10005adc:	4618      	mov	r0, r3
10005ade:	f7fe f8fd 	bl	10003cdc <RCCEx_PLL3_Config>
10005ae2:	4603      	mov	r3, r0
10005ae4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005ae8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005aec:	2b00      	cmp	r3, #0
10005aee:	d002      	beq.n	10005af6 <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10005af0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005af4:	e23e      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005af6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005afa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005afe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005b02:	f043 0320 	orr.w	r3, r3, #32
10005b06:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005b0a:	e01d      	b.n	10005b48 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005b0c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005b10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005b14:	681b      	ldr	r3, [r3, #0]
10005b16:	3380      	adds	r3, #128	@ 0x80
10005b18:	4618      	mov	r0, r3
10005b1a:	f7fe fa49 	bl	10003fb0 <RCCEx_PLL4_Config>
10005b1e:	4603      	mov	r3, r0
10005b20:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005b24:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005b28:	2b00      	cmp	r3, #0
10005b2a:	d002      	beq.n	10005b32 <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
10005b2c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005b30:	e220      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005b32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b36:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005b3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005b3e:	f043 0310 	orr.w	r3, r3, #16
10005b42:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005b46:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10005b48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b4c:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
10005b50:	f023 0207 	bic.w	r2, r3, #7
10005b54:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005b58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005b5c:	681b      	ldr	r3, [r3, #0]
10005b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005b62:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005b66:	4313      	orrs	r3, r2
10005b68:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10005b6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005b70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005b74:	681b      	ldr	r3, [r3, #0]
10005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
10005b7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
10005b7e:	623b      	str	r3, [r7, #32]
10005b80:	2300      	movs	r3, #0
10005b82:	627b      	str	r3, [r7, #36]	@ 0x24
10005b84:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10005b88:	460b      	mov	r3, r1
10005b8a:	4313      	orrs	r3, r2
10005b8c:	d037      	beq.n	10005bfe <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10005b8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005b92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005b96:	681b      	ldr	r3, [r3, #0]
10005b98:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10005b9c:	2b01      	cmp	r3, #1
10005b9e:	d11c      	bne.n	10005bda <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005ba0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005ba4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005ba8:	681b      	ldr	r3, [r3, #0]
10005baa:	3380      	adds	r3, #128	@ 0x80
10005bac:	4618      	mov	r0, r3
10005bae:	f7fe f9ff 	bl	10003fb0 <RCCEx_PLL4_Config>
10005bb2:	4603      	mov	r3, r0
10005bb4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10005bb8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005bbc:	2b00      	cmp	r3, #0
10005bbe:	d002      	beq.n	10005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10005bc0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005bc4:	e1d6      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005bc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005bca:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005bce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005bd2:	f043 0320 	orr.w	r3, r3, #32
10005bd6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10005bda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005bde:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
10005be2:	f023 0207 	bic.w	r2, r3, #7
10005be6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005bea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005bee:	681b      	ldr	r3, [r3, #0]
10005bf0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10005bf4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005bf8:	4313      	orrs	r3, r2
10005bfa:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10005bfe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005c02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005c06:	681b      	ldr	r3, [r3, #0]
10005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
10005c0c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
10005c10:	61bb      	str	r3, [r7, #24]
10005c12:	2300      	movs	r3, #0
10005c14:	61fb      	str	r3, [r7, #28]
10005c16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
10005c1a:	460b      	mov	r3, r1
10005c1c:	4313      	orrs	r3, r2
10005c1e:	d058      	beq.n	10005cd2 <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
10005c20:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005c24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005c28:	681b      	ldr	r3, [r3, #0]
10005c2a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10005c2e:	2b01      	cmp	r3, #1
10005c30:	d01f      	beq.n	10005c72 <HAL_RCCEx_PeriphCLKConfig+0x1a12>
10005c32:	2b02      	cmp	r3, #2
10005c34:	d13b      	bne.n	10005cae <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005c36:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005c3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005c3e:	681b      	ldr	r3, [r3, #0]
10005c40:	3344      	adds	r3, #68	@ 0x44
10005c42:	4618      	mov	r0, r3
10005c44:	f7fe f84a 	bl	10003cdc <RCCEx_PLL3_Config>
10005c48:	4603      	mov	r3, r0
10005c4a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005c4e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005c52:	2b00      	cmp	r3, #0
10005c54:	d002      	beq.n	10005c5c <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
10005c56:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005c5a:	e18b      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005c5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005c60:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005c64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005c68:	f043 0320 	orr.w	r3, r3, #32
10005c6c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005c70:	e01d      	b.n	10005cae <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005c72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005c76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005c7a:	681b      	ldr	r3, [r3, #0]
10005c7c:	3380      	adds	r3, #128	@ 0x80
10005c7e:	4618      	mov	r0, r3
10005c80:	f7fe f996 	bl	10003fb0 <RCCEx_PLL4_Config>
10005c84:	4603      	mov	r3, r0
10005c86:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005c8a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005c8e:	2b00      	cmp	r3, #0
10005c90:	d002      	beq.n	10005c98 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
10005c92:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005c96:	e16d      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005c98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005c9c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005ca0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005ca4:	f043 0310 	orr.w	r3, r3, #16
10005ca8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005cac:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10005cae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005cb2:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
10005cb6:	f023 0207 	bic.w	r2, r3, #7
10005cba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005cbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005cc2:	681b      	ldr	r3, [r3, #0]
10005cc4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10005cc8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005ccc:	4313      	orrs	r3, r2
10005cce:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10005cd2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005cd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005cda:	681b      	ldr	r3, [r3, #0]
10005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
10005ce0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
10005ce4:	613b      	str	r3, [r7, #16]
10005ce6:	2300      	movs	r3, #0
10005ce8:	617b      	str	r3, [r7, #20]
10005cea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10005cee:	460b      	mov	r3, r1
10005cf0:	4313      	orrs	r3, r2
10005cf2:	f000 80c6 	beq.w	10005e82 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10005cf6:	4ba2      	ldr	r3, [pc, #648]	@ (10005f80 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10005cf8:	681b      	ldr	r3, [r3, #0]
10005cfa:	4aa1      	ldr	r2, [pc, #644]	@ (10005f80 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10005cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10005d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10005d02:	f7fb ff65 	bl	10001bd0 <HAL_GetTick>
10005d06:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10005d0a:	e00a      	b.n	10005d22 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10005d0c:	f7fb ff60 	bl	10001bd0 <HAL_GetTick>
10005d10:	4602      	mov	r2, r0
10005d12:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10005d16:	1ad3      	subs	r3, r2, r3
10005d18:	2b64      	cmp	r3, #100	@ 0x64
10005d1a:	d902      	bls.n	10005d22 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
10005d1c:	2303      	movs	r3, #3
10005d1e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10005d22:	4b97      	ldr	r3, [pc, #604]	@ (10005f80 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10005d24:	681b      	ldr	r3, [r3, #0]
10005d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10005d2a:	2b00      	cmp	r3, #0
10005d2c:	d0ee      	beq.n	10005d0c <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
10005d2e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005d32:	2b00      	cmp	r3, #0
10005d34:	f040 80a2 	bne.w	10005e7c <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10005d38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
10005d40:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005d44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005d48:	681b      	ldr	r3, [r3, #0]
10005d4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
10005d4e:	4053      	eors	r3, r2
10005d50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10005d54:	2b00      	cmp	r3, #0
10005d56:	f000 8086 	beq.w	10005e66 <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10005d5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005d62:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
10005d66:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
10005d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005d72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005d76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10005d7a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
10005d7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005d86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005d8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10005d8e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10005d92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005d9a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
10005d9e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10005da2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
10005da6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005daa:	4313      	orrs	r3, r2
10005dac:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10005db0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005db4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005db8:	2204      	movs	r2, #4
10005dba:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10005dbc:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10005dc0:	f003 020b 	and.w	r2, r3, #11
10005dc4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005dc8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005dcc:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10005dce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005dd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005dd6:	2200      	movs	r2, #0
10005dd8:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10005dda:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005dde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005de2:	2200      	movs	r2, #0
10005de4:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
10005de6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005dea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005dee:	2200      	movs	r2, #0
10005df0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10005df4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005df8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005dfc:	2200      	movs	r2, #0
10005dfe:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
10005e02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
10005e06:	4618      	mov	r0, r3
10005e08:	f7fc fc0e 	bl	10002628 <HAL_RCC_OscConfig>
10005e0c:	4603      	mov	r3, r0
10005e0e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        if (ret != HAL_OK)
10005e12:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005e16:	2b00      	cmp	r3, #0
10005e18:	d002      	beq.n	10005e20 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
10005e1a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005e1e:	e0a9      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10005e20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005e28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
10005e2c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005e30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005e34:	681b      	ldr	r3, [r3, #0]
10005e36:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
10005e3a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005e3e:	4313      	orrs	r3, r2
10005e40:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10005e44:	4b4f      	ldr	r3, [pc, #316]	@ (10005f84 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
10005e46:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
10005e4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e4e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
10005e52:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
10005e56:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
10005e5a:	400b      	ands	r3, r1
10005e5c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005e60:	4313      	orrs	r3, r2
10005e62:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
10005e66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005e6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
10005e76:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10005e7a:	e002      	b.n	10005e82 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10005e7c:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005e80:	e078      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
10005e82:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005e86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005e8a:	681b      	ldr	r3, [r3, #0]
10005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005e90:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
10005e94:	60bb      	str	r3, [r7, #8]
10005e96:	2300      	movs	r3, #0
10005e98:	60fb      	str	r3, [r7, #12]
10005e9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10005e9e:	460b      	mov	r3, r1
10005ea0:	4313      	orrs	r3, r2
10005ea2:	d02a      	beq.n	10005efa <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10005ea4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ea8:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10005eac:	f023 0201 	bic.w	r2, r3, #1
10005eb0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005eb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005eb8:	681b      	ldr	r3, [r3, #0]
10005eba:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
10005ebe:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005ec2:	4313      	orrs	r3, r2
10005ec4:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005ec8:	f7fb fe82 	bl	10001bd0 <HAL_GetTick>
10005ecc:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10005ed0:	e00a      	b.n	10005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005ed2:	f7fb fe7d 	bl	10001bd0 <HAL_GetTick>
10005ed6:	4602      	mov	r2, r0
10005ed8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10005edc:	1ad3      	subs	r3, r2, r3
10005ede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10005ee2:	d901      	bls.n	10005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10005ee4:	2303      	movs	r3, #3
10005ee6:	e045      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10005ee8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005eec:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10005ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005ef8:	d1eb      	bne.n	10005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10005efa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005efe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005f02:	681b      	ldr	r3, [r3, #0]
10005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
10005f08:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
10005f0c:	603b      	str	r3, [r7, #0]
10005f0e:	2300      	movs	r3, #0
10005f10:	607b      	str	r3, [r7, #4]
10005f12:	e9d7 1200 	ldrd	r1, r2, [r7]
10005f16:	460b      	mov	r3, r1
10005f18:	4313      	orrs	r3, r2
10005f1a:	d02a      	beq.n	10005f72 <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10005f1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005f20:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10005f24:	f023 0201 	bic.w	r2, r3, #1
10005f28:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005f2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005f30:	681b      	ldr	r3, [r3, #0]
10005f32:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
10005f36:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005f3a:	4313      	orrs	r3, r2
10005f3c:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005f40:	f7fb fe46 	bl	10001bd0 <HAL_GetTick>
10005f44:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10005f48:	e00a      	b.n	10005f60 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005f4a:	f7fb fe41 	bl	10001bd0 <HAL_GetTick>
10005f4e:	4602      	mov	r2, r0
10005f50:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10005f54:	1ad3      	subs	r3, r2, r3
10005f56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10005f5a:	d901      	bls.n	10005f60 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10005f5c:	2303      	movs	r3, #3
10005f5e:	e009      	b.n	10005f74 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10005f60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005f64:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10005f68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005f70:	d1eb      	bne.n	10005f4a <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
10005f72:	2300      	movs	r3, #0
}
10005f74:	4618      	mov	r0, r3
10005f76:	f507 7712 	add.w	r7, r7, #584	@ 0x248
10005f7a:	46bd      	mov	sp, r7
10005f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10005f80:	50001000 	.word	0x50001000
10005f84:	7fecfdc0 	.word	0x7fecfdc0

10005f88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
10005f88:	b580      	push	{r7, lr}
10005f8a:	b084      	sub	sp, #16
10005f8c:	af00      	add	r7, sp, #0
10005f8e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
10005f90:	687b      	ldr	r3, [r7, #4]
10005f92:	2b00      	cmp	r3, #0
10005f94:	d101      	bne.n	10005f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
10005f96:	2301      	movs	r3, #1
10005f98:	e10f      	b.n	100061ba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10005f9a:	687b      	ldr	r3, [r7, #4]
10005f9c:	2200      	movs	r2, #0
10005f9e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
10005fa0:	687b      	ldr	r3, [r7, #4]
10005fa2:	681b      	ldr	r3, [r3, #0]
10005fa4:	4a87      	ldr	r2, [pc, #540]	@ (100061c4 <HAL_SPI_Init+0x23c>)
10005fa6:	4293      	cmp	r3, r2
10005fa8:	d00f      	beq.n	10005fca <HAL_SPI_Init+0x42>
10005faa:	687b      	ldr	r3, [r7, #4]
10005fac:	681b      	ldr	r3, [r3, #0]
10005fae:	4a86      	ldr	r2, [pc, #536]	@ (100061c8 <HAL_SPI_Init+0x240>)
10005fb0:	4293      	cmp	r3, r2
10005fb2:	d00a      	beq.n	10005fca <HAL_SPI_Init+0x42>
10005fb4:	687b      	ldr	r3, [r7, #4]
10005fb6:	681b      	ldr	r3, [r3, #0]
10005fb8:	4a84      	ldr	r2, [pc, #528]	@ (100061cc <HAL_SPI_Init+0x244>)
10005fba:	4293      	cmp	r3, r2
10005fbc:	d005      	beq.n	10005fca <HAL_SPI_Init+0x42>
10005fbe:	687b      	ldr	r3, [r7, #4]
10005fc0:	68db      	ldr	r3, [r3, #12]
10005fc2:	2b0f      	cmp	r3, #15
10005fc4:	d901      	bls.n	10005fca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
10005fc6:	2301      	movs	r3, #1
10005fc8:	e0f7      	b.n	100061ba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
10005fca:	6878      	ldr	r0, [r7, #4]
10005fcc:	f000 fd54 	bl	10006a78 <SPI_GetPacketSize>
10005fd0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
10005fd2:	687b      	ldr	r3, [r7, #4]
10005fd4:	681b      	ldr	r3, [r3, #0]
10005fd6:	4a7b      	ldr	r2, [pc, #492]	@ (100061c4 <HAL_SPI_Init+0x23c>)
10005fd8:	4293      	cmp	r3, r2
10005fda:	d00c      	beq.n	10005ff6 <HAL_SPI_Init+0x6e>
10005fdc:	687b      	ldr	r3, [r7, #4]
10005fde:	681b      	ldr	r3, [r3, #0]
10005fe0:	4a79      	ldr	r2, [pc, #484]	@ (100061c8 <HAL_SPI_Init+0x240>)
10005fe2:	4293      	cmp	r3, r2
10005fe4:	d007      	beq.n	10005ff6 <HAL_SPI_Init+0x6e>
10005fe6:	687b      	ldr	r3, [r7, #4]
10005fe8:	681b      	ldr	r3, [r3, #0]
10005fea:	4a78      	ldr	r2, [pc, #480]	@ (100061cc <HAL_SPI_Init+0x244>)
10005fec:	4293      	cmp	r3, r2
10005fee:	d002      	beq.n	10005ff6 <HAL_SPI_Init+0x6e>
10005ff0:	68fb      	ldr	r3, [r7, #12]
10005ff2:	2b08      	cmp	r3, #8
10005ff4:	d811      	bhi.n	1000601a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
10005ff6:	687b      	ldr	r3, [r7, #4]
10005ff8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
10005ffa:	4a72      	ldr	r2, [pc, #456]	@ (100061c4 <HAL_SPI_Init+0x23c>)
10005ffc:	4293      	cmp	r3, r2
10005ffe:	d009      	beq.n	10006014 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
10006000:	687b      	ldr	r3, [r7, #4]
10006002:	681b      	ldr	r3, [r3, #0]
10006004:	4a70      	ldr	r2, [pc, #448]	@ (100061c8 <HAL_SPI_Init+0x240>)
10006006:	4293      	cmp	r3, r2
10006008:	d004      	beq.n	10006014 <HAL_SPI_Init+0x8c>
1000600a:	687b      	ldr	r3, [r7, #4]
1000600c:	681b      	ldr	r3, [r3, #0]
1000600e:	4a6f      	ldr	r2, [pc, #444]	@ (100061cc <HAL_SPI_Init+0x244>)
10006010:	4293      	cmp	r3, r2
10006012:	d104      	bne.n	1000601e <HAL_SPI_Init+0x96>
10006014:	68fb      	ldr	r3, [r7, #12]
10006016:	2b10      	cmp	r3, #16
10006018:	d901      	bls.n	1000601e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
1000601a:	2301      	movs	r3, #1
1000601c:	e0cd      	b.n	100061ba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
1000601e:	687b      	ldr	r3, [r7, #4]
10006020:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10006024:	b2db      	uxtb	r3, r3
10006026:	2b00      	cmp	r3, #0
10006028:	d106      	bne.n	10006038 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
1000602a:	687b      	ldr	r3, [r7, #4]
1000602c:	2200      	movs	r2, #0
1000602e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
10006032:	6878      	ldr	r0, [r7, #4]
10006034:	f7fb fbc8 	bl	100017c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
10006038:	687b      	ldr	r3, [r7, #4]
1000603a:	2202      	movs	r2, #2
1000603c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
10006040:	687b      	ldr	r3, [r7, #4]
10006042:	681b      	ldr	r3, [r3, #0]
10006044:	681a      	ldr	r2, [r3, #0]
10006046:	687b      	ldr	r3, [r7, #4]
10006048:	681b      	ldr	r3, [r3, #0]
1000604a:	f022 0201 	bic.w	r2, r2, #1
1000604e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
10006050:	687b      	ldr	r3, [r7, #4]
10006052:	681b      	ldr	r3, [r3, #0]
10006054:	689b      	ldr	r3, [r3, #8]
10006056:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
1000605a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
1000605c:	687b      	ldr	r3, [r7, #4]
1000605e:	699b      	ldr	r3, [r3, #24]
10006060:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
10006064:	d119      	bne.n	1000609a <HAL_SPI_Init+0x112>
10006066:	687b      	ldr	r3, [r7, #4]
10006068:	685b      	ldr	r3, [r3, #4]
1000606a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
1000606e:	d103      	bne.n	10006078 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
10006070:	687b      	ldr	r3, [r7, #4]
10006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
10006074:	2b00      	cmp	r3, #0
10006076:	d008      	beq.n	1000608a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
10006078:	687b      	ldr	r3, [r7, #4]
1000607a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
1000607c:	2b00      	cmp	r3, #0
1000607e:	d10c      	bne.n	1000609a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
10006080:	687b      	ldr	r3, [r7, #4]
10006082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
10006084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
10006088:	d107      	bne.n	1000609a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
1000608a:	687b      	ldr	r3, [r7, #4]
1000608c:	681b      	ldr	r3, [r3, #0]
1000608e:	681a      	ldr	r2, [r3, #0]
10006090:	687b      	ldr	r3, [r7, #4]
10006092:	681b      	ldr	r3, [r3, #0]
10006094:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
10006098:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
1000609a:	687b      	ldr	r3, [r7, #4]
1000609c:	685b      	ldr	r3, [r3, #4]
1000609e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
100060a2:	2b00      	cmp	r3, #0
100060a4:	d00f      	beq.n	100060c6 <HAL_SPI_Init+0x13e>
100060a6:	687b      	ldr	r3, [r7, #4]
100060a8:	68db      	ldr	r3, [r3, #12]
100060aa:	2b06      	cmp	r3, #6
100060ac:	d90b      	bls.n	100060c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
100060ae:	687b      	ldr	r3, [r7, #4]
100060b0:	681b      	ldr	r3, [r3, #0]
100060b2:	681b      	ldr	r3, [r3, #0]
100060b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
100060b8:	687b      	ldr	r3, [r7, #4]
100060ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
100060bc:	687b      	ldr	r3, [r7, #4]
100060be:	681b      	ldr	r3, [r3, #0]
100060c0:	430a      	orrs	r2, r1
100060c2:	601a      	str	r2, [r3, #0]
100060c4:	e007      	b.n	100060d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
100060c6:	687b      	ldr	r3, [r7, #4]
100060c8:	681b      	ldr	r3, [r3, #0]
100060ca:	681a      	ldr	r2, [r3, #0]
100060cc:	687b      	ldr	r3, [r7, #4]
100060ce:	681b      	ldr	r3, [r3, #0]
100060d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
100060d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
100060d6:	687b      	ldr	r3, [r7, #4]
100060d8:	69da      	ldr	r2, [r3, #28]
100060da:	687b      	ldr	r3, [r7, #4]
100060dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100060de:	431a      	orrs	r2, r3
100060e0:	68bb      	ldr	r3, [r7, #8]
100060e2:	431a      	orrs	r2, r3
100060e4:	687b      	ldr	r3, [r7, #4]
100060e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100060e8:	ea42 0103 	orr.w	r1, r2, r3
100060ec:	687b      	ldr	r3, [r7, #4]
100060ee:	68da      	ldr	r2, [r3, #12]
100060f0:	687b      	ldr	r3, [r7, #4]
100060f2:	681b      	ldr	r3, [r3, #0]
100060f4:	430a      	orrs	r2, r1
100060f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
100060f8:	687b      	ldr	r3, [r7, #4]
100060fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100060fc:	687b      	ldr	r3, [r7, #4]
100060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006100:	431a      	orrs	r2, r3
10006102:	687b      	ldr	r3, [r7, #4]
10006104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10006106:	431a      	orrs	r2, r3
10006108:	687b      	ldr	r3, [r7, #4]
1000610a:	699b      	ldr	r3, [r3, #24]
1000610c:	431a      	orrs	r2, r3
1000610e:	687b      	ldr	r3, [r7, #4]
10006110:	691b      	ldr	r3, [r3, #16]
10006112:	431a      	orrs	r2, r3
10006114:	687b      	ldr	r3, [r7, #4]
10006116:	695b      	ldr	r3, [r3, #20]
10006118:	431a      	orrs	r2, r3
1000611a:	687b      	ldr	r3, [r7, #4]
1000611c:	6a1b      	ldr	r3, [r3, #32]
1000611e:	431a      	orrs	r2, r3
10006120:	687b      	ldr	r3, [r7, #4]
10006122:	685b      	ldr	r3, [r3, #4]
10006124:	431a      	orrs	r2, r3
10006126:	687b      	ldr	r3, [r7, #4]
10006128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1000612a:	431a      	orrs	r2, r3
1000612c:	687b      	ldr	r3, [r7, #4]
1000612e:	689b      	ldr	r3, [r3, #8]
10006130:	431a      	orrs	r2, r3
10006132:	687b      	ldr	r3, [r7, #4]
10006134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10006136:	ea42 0103 	orr.w	r1, r2, r3
1000613a:	687b      	ldr	r3, [r7, #4]
1000613c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1000613e:	687b      	ldr	r3, [r7, #4]
10006140:	681b      	ldr	r3, [r3, #0]
10006142:	430a      	orrs	r2, r1
10006144:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
10006146:	687b      	ldr	r3, [r7, #4]
10006148:	685b      	ldr	r3, [r3, #4]
1000614a:	2b00      	cmp	r3, #0
1000614c:	d113      	bne.n	10006176 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
1000614e:	687b      	ldr	r3, [r7, #4]
10006150:	681b      	ldr	r3, [r3, #0]
10006152:	689b      	ldr	r3, [r3, #8]
10006154:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
10006158:	687b      	ldr	r3, [r7, #4]
1000615a:	681b      	ldr	r3, [r3, #0]
1000615c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
10006160:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
10006162:	687b      	ldr	r3, [r7, #4]
10006164:	681b      	ldr	r3, [r3, #0]
10006166:	689b      	ldr	r3, [r3, #8]
10006168:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
1000616c:	687b      	ldr	r3, [r7, #4]
1000616e:	681b      	ldr	r3, [r3, #0]
10006170:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
10006174:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
10006176:	687b      	ldr	r3, [r7, #4]
10006178:	681b      	ldr	r3, [r3, #0]
1000617a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
1000617c:	687b      	ldr	r3, [r7, #4]
1000617e:	681b      	ldr	r3, [r3, #0]
10006180:	f022 0201 	bic.w	r2, r2, #1
10006184:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
10006186:	687b      	ldr	r3, [r7, #4]
10006188:	685b      	ldr	r3, [r3, #4]
1000618a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
1000618e:	2b00      	cmp	r3, #0
10006190:	d00a      	beq.n	100061a8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
10006192:	687b      	ldr	r3, [r7, #4]
10006194:	681b      	ldr	r3, [r3, #0]
10006196:	68db      	ldr	r3, [r3, #12]
10006198:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
1000619c:	687b      	ldr	r3, [r7, #4]
1000619e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
100061a0:	687b      	ldr	r3, [r7, #4]
100061a2:	681b      	ldr	r3, [r3, #0]
100061a4:	430a      	orrs	r2, r1
100061a6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
100061a8:	687b      	ldr	r3, [r7, #4]
100061aa:	2200      	movs	r2, #0
100061ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
100061b0:	687b      	ldr	r3, [r7, #4]
100061b2:	2201      	movs	r2, #1
100061b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
100061b8:	2300      	movs	r3, #0
}
100061ba:	4618      	mov	r0, r3
100061bc:	3710      	adds	r7, #16
100061be:	46bd      	mov	sp, r7
100061c0:	bd80      	pop	{r7, pc}
100061c2:	bf00      	nop
100061c4:	44004000 	.word	0x44004000
100061c8:	4000b000 	.word	0x4000b000
100061cc:	4000c000 	.word	0x4000c000

100061d0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
100061d0:	b580      	push	{r7, lr}
100061d2:	b08a      	sub	sp, #40	@ 0x28
100061d4:	af02      	add	r7, sp, #8
100061d6:	60f8      	str	r0, [r7, #12]
100061d8:	60b9      	str	r1, [r7, #8]
100061da:	603b      	str	r3, [r7, #0]
100061dc:	4613      	mov	r3, r2
100061de:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
100061e0:	68fb      	ldr	r3, [r7, #12]
100061e2:	681b      	ldr	r3, [r3, #0]
100061e4:	3320      	adds	r3, #32
100061e6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
100061e8:	2300      	movs	r3, #0
100061ea:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
100061ec:	68fb      	ldr	r3, [r7, #12]
100061ee:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
100061f2:	2b01      	cmp	r3, #1
100061f4:	d101      	bne.n	100061fa <HAL_SPI_Transmit+0x2a>
100061f6:	2302      	movs	r3, #2
100061f8:	e1df      	b.n	100065ba <HAL_SPI_Transmit+0x3ea>
100061fa:	68fb      	ldr	r3, [r7, #12]
100061fc:	2201      	movs	r2, #1
100061fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
10006202:	f7fb fce5 	bl	10001bd0 <HAL_GetTick>
10006206:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
10006208:	68fb      	ldr	r3, [r7, #12]
1000620a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
1000620e:	b2db      	uxtb	r3, r3
10006210:	2b01      	cmp	r3, #1
10006212:	d007      	beq.n	10006224 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
10006214:	2302      	movs	r3, #2
10006216:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
10006218:	68fb      	ldr	r3, [r7, #12]
1000621a:	2200      	movs	r2, #0
1000621c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
10006220:	7efb      	ldrb	r3, [r7, #27]
10006222:	e1ca      	b.n	100065ba <HAL_SPI_Transmit+0x3ea>
  }

  if ((pData == NULL) || (Size == 0UL))
10006224:	68bb      	ldr	r3, [r7, #8]
10006226:	2b00      	cmp	r3, #0
10006228:	d002      	beq.n	10006230 <HAL_SPI_Transmit+0x60>
1000622a:	88fb      	ldrh	r3, [r7, #6]
1000622c:	2b00      	cmp	r3, #0
1000622e:	d107      	bne.n	10006240 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
10006230:	2301      	movs	r3, #1
10006232:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
10006234:	68fb      	ldr	r3, [r7, #12]
10006236:	2200      	movs	r2, #0
10006238:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
1000623c:	7efb      	ldrb	r3, [r7, #27]
1000623e:	e1bc      	b.n	100065ba <HAL_SPI_Transmit+0x3ea>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
10006240:	68fb      	ldr	r3, [r7, #12]
10006242:	2203      	movs	r2, #3
10006244:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
10006248:	68fb      	ldr	r3, [r7, #12]
1000624a:	2200      	movs	r2, #0
1000624c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
10006250:	68fb      	ldr	r3, [r7, #12]
10006252:	68ba      	ldr	r2, [r7, #8]
10006254:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
10006256:	68fb      	ldr	r3, [r7, #12]
10006258:	88fa      	ldrh	r2, [r7, #6]
1000625a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
1000625e:	68fb      	ldr	r3, [r7, #12]
10006260:	88fa      	ldrh	r2, [r7, #6]
10006262:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
10006266:	68fb      	ldr	r3, [r7, #12]
10006268:	2200      	movs	r2, #0
1000626a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
1000626c:	68fb      	ldr	r3, [r7, #12]
1000626e:	2200      	movs	r2, #0
10006270:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
10006274:	68fb      	ldr	r3, [r7, #12]
10006276:	2200      	movs	r2, #0
10006278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
1000627c:	68fb      	ldr	r3, [r7, #12]
1000627e:	2200      	movs	r2, #0
10006280:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
10006282:	68fb      	ldr	r3, [r7, #12]
10006284:	2200      	movs	r2, #0
10006286:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
10006288:	68fb      	ldr	r3, [r7, #12]
1000628a:	689b      	ldr	r3, [r3, #8]
1000628c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
10006290:	d108      	bne.n	100062a4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
10006292:	68fb      	ldr	r3, [r7, #12]
10006294:	681b      	ldr	r3, [r3, #0]
10006296:	681a      	ldr	r2, [r3, #0]
10006298:	68fb      	ldr	r3, [r7, #12]
1000629a:	681b      	ldr	r3, [r3, #0]
1000629c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
100062a0:	601a      	str	r2, [r3, #0]
100062a2:	e009      	b.n	100062b8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
100062a4:	68fb      	ldr	r3, [r7, #12]
100062a6:	681b      	ldr	r3, [r3, #0]
100062a8:	68db      	ldr	r3, [r3, #12]
100062aa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
100062ae:	68fb      	ldr	r3, [r7, #12]
100062b0:	681b      	ldr	r3, [r3, #0]
100062b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
100062b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
100062b8:	68fb      	ldr	r3, [r7, #12]
100062ba:	681b      	ldr	r3, [r3, #0]
100062bc:	685b      	ldr	r3, [r3, #4]
100062be:	0c1b      	lsrs	r3, r3, #16
100062c0:	041b      	lsls	r3, r3, #16
100062c2:	88f9      	ldrh	r1, [r7, #6]
100062c4:	68fa      	ldr	r2, [r7, #12]
100062c6:	6812      	ldr	r2, [r2, #0]
100062c8:	430b      	orrs	r3, r1
100062ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
100062cc:	68fb      	ldr	r3, [r7, #12]
100062ce:	681b      	ldr	r3, [r3, #0]
100062d0:	681a      	ldr	r2, [r3, #0]
100062d2:	68fb      	ldr	r3, [r7, #12]
100062d4:	681b      	ldr	r3, [r3, #0]
100062d6:	f042 0201 	orr.w	r2, r2, #1
100062da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
100062dc:	68fb      	ldr	r3, [r7, #12]
100062de:	685b      	ldr	r3, [r3, #4]
100062e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
100062e4:	d107      	bne.n	100062f6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
100062e6:	68fb      	ldr	r3, [r7, #12]
100062e8:	681b      	ldr	r3, [r3, #0]
100062ea:	681a      	ldr	r2, [r3, #0]
100062ec:	68fb      	ldr	r3, [r7, #12]
100062ee:	681b      	ldr	r3, [r3, #0]
100062f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
100062f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
100062f6:	68fb      	ldr	r3, [r7, #12]
100062f8:	68db      	ldr	r3, [r3, #12]
100062fa:	2b0f      	cmp	r3, #15
100062fc:	d947      	bls.n	1000638e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
100062fe:	e03f      	b.n	10006380 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
10006300:	68fb      	ldr	r3, [r7, #12]
10006302:	681b      	ldr	r3, [r3, #0]
10006304:	695b      	ldr	r3, [r3, #20]
10006306:	f003 0302 	and.w	r3, r3, #2
1000630a:	2b02      	cmp	r3, #2
1000630c:	d114      	bne.n	10006338 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
1000630e:	68fb      	ldr	r3, [r7, #12]
10006310:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
10006312:	68fb      	ldr	r3, [r7, #12]
10006314:	681b      	ldr	r3, [r3, #0]
10006316:	6812      	ldr	r2, [r2, #0]
10006318:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
1000631a:	68fb      	ldr	r3, [r7, #12]
1000631c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1000631e:	1d1a      	adds	r2, r3, #4
10006320:	68fb      	ldr	r3, [r7, #12]
10006322:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
10006324:	68fb      	ldr	r3, [r7, #12]
10006326:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
1000632a:	b29b      	uxth	r3, r3
1000632c:	3b01      	subs	r3, #1
1000632e:	b29a      	uxth	r2, r3
10006330:	68fb      	ldr	r3, [r7, #12]
10006332:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10006336:	e023      	b.n	10006380 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006338:	f7fb fc4a 	bl	10001bd0 <HAL_GetTick>
1000633c:	4602      	mov	r2, r0
1000633e:	697b      	ldr	r3, [r7, #20]
10006340:	1ad3      	subs	r3, r2, r3
10006342:	683a      	ldr	r2, [r7, #0]
10006344:	429a      	cmp	r2, r3
10006346:	d803      	bhi.n	10006350 <HAL_SPI_Transmit+0x180>
10006348:	683b      	ldr	r3, [r7, #0]
1000634a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000634e:	d102      	bne.n	10006356 <HAL_SPI_Transmit+0x186>
10006350:	683b      	ldr	r3, [r7, #0]
10006352:	2b00      	cmp	r3, #0
10006354:	d114      	bne.n	10006380 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10006356:	68f8      	ldr	r0, [r7, #12]
10006358:	f000 fac0 	bl	100068dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
1000635c:	68fb      	ldr	r3, [r7, #12]
1000635e:	2200      	movs	r2, #0
10006360:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10006364:	68fb      	ldr	r3, [r7, #12]
10006366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000636a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
1000636e:	68fb      	ldr	r3, [r7, #12]
10006370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10006374:	68fb      	ldr	r3, [r7, #12]
10006376:	2201      	movs	r2, #1
10006378:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
1000637c:	2303      	movs	r3, #3
1000637e:	e11c      	b.n	100065ba <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
10006380:	68fb      	ldr	r3, [r7, #12]
10006382:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006386:	b29b      	uxth	r3, r3
10006388:	2b00      	cmp	r3, #0
1000638a:	d1b9      	bne.n	10006300 <HAL_SPI_Transmit+0x130>
1000638c:	e0ef      	b.n	1000656e <HAL_SPI_Transmit+0x39e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
1000638e:	68fb      	ldr	r3, [r7, #12]
10006390:	68db      	ldr	r3, [r3, #12]
10006392:	2b07      	cmp	r3, #7
10006394:	f240 80e4 	bls.w	10006560 <HAL_SPI_Transmit+0x390>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
10006398:	e05d      	b.n	10006456 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
1000639a:	68fb      	ldr	r3, [r7, #12]
1000639c:	681b      	ldr	r3, [r3, #0]
1000639e:	695b      	ldr	r3, [r3, #20]
100063a0:	f003 0302 	and.w	r3, r3, #2
100063a4:	2b02      	cmp	r3, #2
100063a6:	d132      	bne.n	1000640e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
100063a8:	68fb      	ldr	r3, [r7, #12]
100063aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100063ae:	b29b      	uxth	r3, r3
100063b0:	2b01      	cmp	r3, #1
100063b2:	d918      	bls.n	100063e6 <HAL_SPI_Transmit+0x216>
100063b4:	68fb      	ldr	r3, [r7, #12]
100063b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100063b8:	2b00      	cmp	r3, #0
100063ba:	d014      	beq.n	100063e6 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
100063bc:	68fb      	ldr	r3, [r7, #12]
100063be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
100063c0:	68fb      	ldr	r3, [r7, #12]
100063c2:	681b      	ldr	r3, [r3, #0]
100063c4:	6812      	ldr	r2, [r2, #0]
100063c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
100063c8:	68fb      	ldr	r3, [r7, #12]
100063ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100063cc:	1d1a      	adds	r2, r3, #4
100063ce:	68fb      	ldr	r3, [r7, #12]
100063d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
100063d2:	68fb      	ldr	r3, [r7, #12]
100063d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100063d8:	b29b      	uxth	r3, r3
100063da:	3b02      	subs	r3, #2
100063dc:	b29a      	uxth	r2, r3
100063de:	68fb      	ldr	r3, [r7, #12]
100063e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
100063e4:	e037      	b.n	10006456 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
100063e6:	68fb      	ldr	r3, [r7, #12]
100063e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100063ea:	881a      	ldrh	r2, [r3, #0]
100063ec:	69fb      	ldr	r3, [r7, #28]
100063ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
100063f0:	68fb      	ldr	r3, [r7, #12]
100063f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100063f4:	1c9a      	adds	r2, r3, #2
100063f6:	68fb      	ldr	r3, [r7, #12]
100063f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
100063fa:	68fb      	ldr	r3, [r7, #12]
100063fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006400:	b29b      	uxth	r3, r3
10006402:	3b01      	subs	r3, #1
10006404:	b29a      	uxth	r2, r3
10006406:	68fb      	ldr	r3, [r7, #12]
10006408:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
1000640c:	e023      	b.n	10006456 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
1000640e:	f7fb fbdf 	bl	10001bd0 <HAL_GetTick>
10006412:	4602      	mov	r2, r0
10006414:	697b      	ldr	r3, [r7, #20]
10006416:	1ad3      	subs	r3, r2, r3
10006418:	683a      	ldr	r2, [r7, #0]
1000641a:	429a      	cmp	r2, r3
1000641c:	d803      	bhi.n	10006426 <HAL_SPI_Transmit+0x256>
1000641e:	683b      	ldr	r3, [r7, #0]
10006420:	f1b3 3fff 	cmp.w	r3, #4294967295
10006424:	d102      	bne.n	1000642c <HAL_SPI_Transmit+0x25c>
10006426:	683b      	ldr	r3, [r7, #0]
10006428:	2b00      	cmp	r3, #0
1000642a:	d114      	bne.n	10006456 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
1000642c:	68f8      	ldr	r0, [r7, #12]
1000642e:	f000 fa55 	bl	100068dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
10006432:	68fb      	ldr	r3, [r7, #12]
10006434:	2200      	movs	r2, #0
10006436:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
1000643a:	68fb      	ldr	r3, [r7, #12]
1000643c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006440:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
10006444:	68fb      	ldr	r3, [r7, #12]
10006446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
1000644a:	68fb      	ldr	r3, [r7, #12]
1000644c:	2201      	movs	r2, #1
1000644e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
10006452:	2303      	movs	r3, #3
10006454:	e0b1      	b.n	100065ba <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
10006456:	68fb      	ldr	r3, [r7, #12]
10006458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
1000645c:	b29b      	uxth	r3, r3
1000645e:	2b00      	cmp	r3, #0
10006460:	d19b      	bne.n	1000639a <HAL_SPI_Transmit+0x1ca>
10006462:	e084      	b.n	1000656e <HAL_SPI_Transmit+0x39e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
10006464:	68fb      	ldr	r3, [r7, #12]
10006466:	681b      	ldr	r3, [r3, #0]
10006468:	695b      	ldr	r3, [r3, #20]
1000646a:	f003 0302 	and.w	r3, r3, #2
1000646e:	2b02      	cmp	r3, #2
10006470:	d152      	bne.n	10006518 <HAL_SPI_Transmit+0x348>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
10006472:	68fb      	ldr	r3, [r7, #12]
10006474:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006478:	b29b      	uxth	r3, r3
1000647a:	2b03      	cmp	r3, #3
1000647c:	d918      	bls.n	100064b0 <HAL_SPI_Transmit+0x2e0>
1000647e:	68fb      	ldr	r3, [r7, #12]
10006480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10006482:	2b40      	cmp	r3, #64	@ 0x40
10006484:	d914      	bls.n	100064b0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
10006486:	68fb      	ldr	r3, [r7, #12]
10006488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
1000648a:	68fb      	ldr	r3, [r7, #12]
1000648c:	681b      	ldr	r3, [r3, #0]
1000648e:	6812      	ldr	r2, [r2, #0]
10006490:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
10006492:	68fb      	ldr	r3, [r7, #12]
10006494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10006496:	1d1a      	adds	r2, r3, #4
10006498:	68fb      	ldr	r3, [r7, #12]
1000649a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
1000649c:	68fb      	ldr	r3, [r7, #12]
1000649e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100064a2:	b29b      	uxth	r3, r3
100064a4:	3b04      	subs	r3, #4
100064a6:	b29a      	uxth	r2, r3
100064a8:	68fb      	ldr	r3, [r7, #12]
100064aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
100064ae:	e057      	b.n	10006560 <HAL_SPI_Transmit+0x390>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
100064b0:	68fb      	ldr	r3, [r7, #12]
100064b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100064b6:	b29b      	uxth	r3, r3
100064b8:	2b01      	cmp	r3, #1
100064ba:	d917      	bls.n	100064ec <HAL_SPI_Transmit+0x31c>
100064bc:	68fb      	ldr	r3, [r7, #12]
100064be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100064c0:	2b00      	cmp	r3, #0
100064c2:	d013      	beq.n	100064ec <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
100064c4:	68fb      	ldr	r3, [r7, #12]
100064c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100064c8:	881a      	ldrh	r2, [r3, #0]
100064ca:	69fb      	ldr	r3, [r7, #28]
100064cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
100064ce:	68fb      	ldr	r3, [r7, #12]
100064d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100064d2:	1c9a      	adds	r2, r3, #2
100064d4:	68fb      	ldr	r3, [r7, #12]
100064d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
100064d8:	68fb      	ldr	r3, [r7, #12]
100064da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100064de:	b29b      	uxth	r3, r3
100064e0:	3b02      	subs	r3, #2
100064e2:	b29a      	uxth	r2, r3
100064e4:	68fb      	ldr	r3, [r7, #12]
100064e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
100064ea:	e039      	b.n	10006560 <HAL_SPI_Transmit+0x390>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
100064ec:	68fb      	ldr	r3, [r7, #12]
100064ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
100064f0:	68fb      	ldr	r3, [r7, #12]
100064f2:	681b      	ldr	r3, [r3, #0]
100064f4:	3320      	adds	r3, #32
100064f6:	7812      	ldrb	r2, [r2, #0]
100064f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
100064fa:	68fb      	ldr	r3, [r7, #12]
100064fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100064fe:	1c5a      	adds	r2, r3, #1
10006500:	68fb      	ldr	r3, [r7, #12]
10006502:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
10006504:	68fb      	ldr	r3, [r7, #12]
10006506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
1000650a:	b29b      	uxth	r3, r3
1000650c:	3b01      	subs	r3, #1
1000650e:	b29a      	uxth	r2, r3
10006510:	68fb      	ldr	r3, [r7, #12]
10006512:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10006516:	e023      	b.n	10006560 <HAL_SPI_Transmit+0x390>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006518:	f7fb fb5a 	bl	10001bd0 <HAL_GetTick>
1000651c:	4602      	mov	r2, r0
1000651e:	697b      	ldr	r3, [r7, #20]
10006520:	1ad3      	subs	r3, r2, r3
10006522:	683a      	ldr	r2, [r7, #0]
10006524:	429a      	cmp	r2, r3
10006526:	d803      	bhi.n	10006530 <HAL_SPI_Transmit+0x360>
10006528:	683b      	ldr	r3, [r7, #0]
1000652a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000652e:	d102      	bne.n	10006536 <HAL_SPI_Transmit+0x366>
10006530:	683b      	ldr	r3, [r7, #0]
10006532:	2b00      	cmp	r3, #0
10006534:	d114      	bne.n	10006560 <HAL_SPI_Transmit+0x390>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10006536:	68f8      	ldr	r0, [r7, #12]
10006538:	f000 f9d0 	bl	100068dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
1000653c:	68fb      	ldr	r3, [r7, #12]
1000653e:	2200      	movs	r2, #0
10006540:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10006544:	68fb      	ldr	r3, [r7, #12]
10006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000654a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
1000654e:	68fb      	ldr	r3, [r7, #12]
10006550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10006554:	68fb      	ldr	r3, [r7, #12]
10006556:	2201      	movs	r2, #1
10006558:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
1000655c:	2303      	movs	r3, #3
1000655e:	e02c      	b.n	100065ba <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
10006560:	68fb      	ldr	r3, [r7, #12]
10006562:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006566:	b29b      	uxth	r3, r3
10006568:	2b00      	cmp	r3, #0
1000656a:	f47f af7b 	bne.w	10006464 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
1000656e:	683b      	ldr	r3, [r7, #0]
10006570:	9300      	str	r3, [sp, #0]
10006572:	697b      	ldr	r3, [r7, #20]
10006574:	2200      	movs	r2, #0
10006576:	2108      	movs	r1, #8
10006578:	68f8      	ldr	r0, [r7, #12]
1000657a:	f000 fa4f 	bl	10006a1c <SPI_WaitOnFlagUntilTimeout>
1000657e:	4603      	mov	r3, r0
10006580:	2b00      	cmp	r3, #0
10006582:	d007      	beq.n	10006594 <HAL_SPI_Transmit+0x3c4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
10006584:	68fb      	ldr	r3, [r7, #12]
10006586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000658a:	f043 0220 	orr.w	r2, r3, #32
1000658e:	68fb      	ldr	r3, [r7, #12]
10006590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
10006594:	68f8      	ldr	r0, [r7, #12]
10006596:	f000 f9a1 	bl	100068dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
1000659a:	68fb      	ldr	r3, [r7, #12]
1000659c:	2200      	movs	r2, #0
1000659e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
100065a2:	68fb      	ldr	r3, [r7, #12]
100065a4:	2201      	movs	r2, #1
100065a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
100065aa:	68fb      	ldr	r3, [r7, #12]
100065ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100065b0:	2b00      	cmp	r3, #0
100065b2:	d001      	beq.n	100065b8 <HAL_SPI_Transmit+0x3e8>
  {
    return HAL_ERROR;
100065b4:	2301      	movs	r3, #1
100065b6:	e000      	b.n	100065ba <HAL_SPI_Transmit+0x3ea>
  }
  return errorcode;
100065b8:	7efb      	ldrb	r3, [r7, #27]
}
100065ba:	4618      	mov	r0, r3
100065bc:	3720      	adds	r7, #32
100065be:	46bd      	mov	sp, r7
100065c0:	bd80      	pop	{r7, pc}

100065c2 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
100065c2:	b580      	push	{r7, lr}
100065c4:	b088      	sub	sp, #32
100065c6:	af00      	add	r7, sp, #0
100065c8:	60f8      	str	r0, [r7, #12]
100065ca:	60b9      	str	r1, [r7, #8]
100065cc:	603b      	str	r3, [r7, #0]
100065ce:	4613      	mov	r3, r2
100065d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
100065d2:	2300      	movs	r3, #0
100065d4:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
100065d6:	68fb      	ldr	r3, [r7, #12]
100065d8:	681b      	ldr	r3, [r3, #0]
100065da:	3330      	adds	r3, #48	@ 0x30
100065dc:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
100065de:	68fb      	ldr	r3, [r7, #12]
100065e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
100065e4:	2b01      	cmp	r3, #1
100065e6:	d101      	bne.n	100065ec <HAL_SPI_Receive+0x2a>
100065e8:	2302      	movs	r3, #2
100065ea:	e173      	b.n	100068d4 <HAL_SPI_Receive+0x312>
100065ec:	68fb      	ldr	r3, [r7, #12]
100065ee:	2201      	movs	r2, #1
100065f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
100065f4:	f7fb faec 	bl	10001bd0 <HAL_GetTick>
100065f8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
100065fa:	68fb      	ldr	r3, [r7, #12]
100065fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10006600:	b2db      	uxtb	r3, r3
10006602:	2b01      	cmp	r3, #1
10006604:	d007      	beq.n	10006616 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
10006606:	2302      	movs	r3, #2
10006608:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
1000660a:	68fb      	ldr	r3, [r7, #12]
1000660c:	2200      	movs	r2, #0
1000660e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
10006612:	7ffb      	ldrb	r3, [r7, #31]
10006614:	e15e      	b.n	100068d4 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
10006616:	68bb      	ldr	r3, [r7, #8]
10006618:	2b00      	cmp	r3, #0
1000661a:	d002      	beq.n	10006622 <HAL_SPI_Receive+0x60>
1000661c:	88fb      	ldrh	r3, [r7, #6]
1000661e:	2b00      	cmp	r3, #0
10006620:	d107      	bne.n	10006632 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
10006622:	2301      	movs	r3, #1
10006624:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
10006626:	68fb      	ldr	r3, [r7, #12]
10006628:	2200      	movs	r2, #0
1000662a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
1000662e:	7ffb      	ldrb	r3, [r7, #31]
10006630:	e150      	b.n	100068d4 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
10006632:	68fb      	ldr	r3, [r7, #12]
10006634:	2204      	movs	r2, #4
10006636:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
1000663a:	68fb      	ldr	r3, [r7, #12]
1000663c:	2200      	movs	r2, #0
1000663e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
10006642:	68fb      	ldr	r3, [r7, #12]
10006644:	68ba      	ldr	r2, [r7, #8]
10006646:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
10006648:	68fb      	ldr	r3, [r7, #12]
1000664a:	88fa      	ldrh	r2, [r7, #6]
1000664c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
10006650:	68fb      	ldr	r3, [r7, #12]
10006652:	88fa      	ldrh	r2, [r7, #6]
10006654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
10006658:	68fb      	ldr	r3, [r7, #12]
1000665a:	2200      	movs	r2, #0
1000665c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
1000665e:	68fb      	ldr	r3, [r7, #12]
10006660:	2200      	movs	r2, #0
10006662:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
10006666:	68fb      	ldr	r3, [r7, #12]
10006668:	2200      	movs	r2, #0
1000666a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
1000666e:	68fb      	ldr	r3, [r7, #12]
10006670:	2200      	movs	r2, #0
10006672:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
10006674:	68fb      	ldr	r3, [r7, #12]
10006676:	2200      	movs	r2, #0
10006678:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
1000667a:	68fb      	ldr	r3, [r7, #12]
1000667c:	689b      	ldr	r3, [r3, #8]
1000667e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
10006682:	d108      	bne.n	10006696 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
10006684:	68fb      	ldr	r3, [r7, #12]
10006686:	681b      	ldr	r3, [r3, #0]
10006688:	681a      	ldr	r2, [r3, #0]
1000668a:	68fb      	ldr	r3, [r7, #12]
1000668c:	681b      	ldr	r3, [r3, #0]
1000668e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
10006692:	601a      	str	r2, [r3, #0]
10006694:	e009      	b.n	100066aa <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
10006696:	68fb      	ldr	r3, [r7, #12]
10006698:	681b      	ldr	r3, [r3, #0]
1000669a:	68db      	ldr	r3, [r3, #12]
1000669c:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
100066a0:	68fb      	ldr	r3, [r7, #12]
100066a2:	681b      	ldr	r3, [r3, #0]
100066a4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
100066a8:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
100066aa:	68fb      	ldr	r3, [r7, #12]
100066ac:	681b      	ldr	r3, [r3, #0]
100066ae:	685b      	ldr	r3, [r3, #4]
100066b0:	0c1b      	lsrs	r3, r3, #16
100066b2:	041b      	lsls	r3, r3, #16
100066b4:	88f9      	ldrh	r1, [r7, #6]
100066b6:	68fa      	ldr	r2, [r7, #12]
100066b8:	6812      	ldr	r2, [r2, #0]
100066ba:	430b      	orrs	r3, r1
100066bc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
100066be:	68fb      	ldr	r3, [r7, #12]
100066c0:	681b      	ldr	r3, [r3, #0]
100066c2:	681a      	ldr	r2, [r3, #0]
100066c4:	68fb      	ldr	r3, [r7, #12]
100066c6:	681b      	ldr	r3, [r3, #0]
100066c8:	f042 0201 	orr.w	r2, r2, #1
100066cc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
100066ce:	68fb      	ldr	r3, [r7, #12]
100066d0:	685b      	ldr	r3, [r3, #4]
100066d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
100066d6:	d107      	bne.n	100066e8 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
100066d8:	68fb      	ldr	r3, [r7, #12]
100066da:	681b      	ldr	r3, [r3, #0]
100066dc:	681a      	ldr	r2, [r3, #0]
100066de:	68fb      	ldr	r3, [r7, #12]
100066e0:	681b      	ldr	r3, [r3, #0]
100066e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
100066e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
100066e8:	68fb      	ldr	r3, [r7, #12]
100066ea:	68db      	ldr	r3, [r3, #12]
100066ec:	2b0f      	cmp	r3, #15
100066ee:	d948      	bls.n	10006782 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
100066f0:	e040      	b.n	10006774 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
100066f2:	68fb      	ldr	r3, [r7, #12]
100066f4:	681b      	ldr	r3, [r3, #0]
100066f6:	695a      	ldr	r2, [r3, #20]
100066f8:	f248 0308 	movw	r3, #32776	@ 0x8008
100066fc:	4013      	ands	r3, r2
100066fe:	2b00      	cmp	r3, #0
10006700:	d014      	beq.n	1000672c <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
10006702:	68fb      	ldr	r3, [r7, #12]
10006704:	681a      	ldr	r2, [r3, #0]
10006706:	68fb      	ldr	r3, [r7, #12]
10006708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1000670a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
1000670c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
1000670e:	68fb      	ldr	r3, [r7, #12]
10006710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10006712:	1d1a      	adds	r2, r3, #4
10006714:	68fb      	ldr	r3, [r7, #12]
10006716:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
10006718:	68fb      	ldr	r3, [r7, #12]
1000671a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
1000671e:	b29b      	uxth	r3, r3
10006720:	3b01      	subs	r3, #1
10006722:	b29a      	uxth	r2, r3
10006724:	68fb      	ldr	r3, [r7, #12]
10006726:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
1000672a:	e023      	b.n	10006774 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
1000672c:	f7fb fa50 	bl	10001bd0 <HAL_GetTick>
10006730:	4602      	mov	r2, r0
10006732:	697b      	ldr	r3, [r7, #20]
10006734:	1ad3      	subs	r3, r2, r3
10006736:	683a      	ldr	r2, [r7, #0]
10006738:	429a      	cmp	r2, r3
1000673a:	d803      	bhi.n	10006744 <HAL_SPI_Receive+0x182>
1000673c:	683b      	ldr	r3, [r7, #0]
1000673e:	f1b3 3fff 	cmp.w	r3, #4294967295
10006742:	d102      	bne.n	1000674a <HAL_SPI_Receive+0x188>
10006744:	683b      	ldr	r3, [r7, #0]
10006746:	2b00      	cmp	r3, #0
10006748:	d114      	bne.n	10006774 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
1000674a:	68f8      	ldr	r0, [r7, #12]
1000674c:	f000 f8c6 	bl	100068dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
10006750:	68fb      	ldr	r3, [r7, #12]
10006752:	2200      	movs	r2, #0
10006754:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10006758:	68fb      	ldr	r3, [r7, #12]
1000675a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000675e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
10006762:	68fb      	ldr	r3, [r7, #12]
10006764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10006768:	68fb      	ldr	r3, [r7, #12]
1000676a:	2201      	movs	r2, #1
1000676c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
10006770:	2303      	movs	r3, #3
10006772:	e0af      	b.n	100068d4 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
10006774:	68fb      	ldr	r3, [r7, #12]
10006776:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
1000677a:	b29b      	uxth	r3, r3
1000677c:	2b00      	cmp	r3, #0
1000677e:	d1b8      	bne.n	100066f2 <HAL_SPI_Receive+0x130>
10006780:	e095      	b.n	100068ae <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
10006782:	68fb      	ldr	r3, [r7, #12]
10006784:	68db      	ldr	r3, [r3, #12]
10006786:	2b07      	cmp	r3, #7
10006788:	f240 808b 	bls.w	100068a2 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
1000678c:	e03f      	b.n	1000680e <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
1000678e:	68fb      	ldr	r3, [r7, #12]
10006790:	681b      	ldr	r3, [r3, #0]
10006792:	695b      	ldr	r3, [r3, #20]
10006794:	f003 0301 	and.w	r3, r3, #1
10006798:	2b01      	cmp	r3, #1
1000679a:	d114      	bne.n	100067c6 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
1000679c:	68fb      	ldr	r3, [r7, #12]
1000679e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100067a0:	69ba      	ldr	r2, [r7, #24]
100067a2:	8812      	ldrh	r2, [r2, #0]
100067a4:	b292      	uxth	r2, r2
100067a6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
100067a8:	68fb      	ldr	r3, [r7, #12]
100067aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100067ac:	1c9a      	adds	r2, r3, #2
100067ae:	68fb      	ldr	r3, [r7, #12]
100067b0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
100067b2:	68fb      	ldr	r3, [r7, #12]
100067b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
100067b8:	b29b      	uxth	r3, r3
100067ba:	3b01      	subs	r3, #1
100067bc:	b29a      	uxth	r2, r3
100067be:	68fb      	ldr	r3, [r7, #12]
100067c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
100067c4:	e023      	b.n	1000680e <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
100067c6:	f7fb fa03 	bl	10001bd0 <HAL_GetTick>
100067ca:	4602      	mov	r2, r0
100067cc:	697b      	ldr	r3, [r7, #20]
100067ce:	1ad3      	subs	r3, r2, r3
100067d0:	683a      	ldr	r2, [r7, #0]
100067d2:	429a      	cmp	r2, r3
100067d4:	d803      	bhi.n	100067de <HAL_SPI_Receive+0x21c>
100067d6:	683b      	ldr	r3, [r7, #0]
100067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
100067dc:	d102      	bne.n	100067e4 <HAL_SPI_Receive+0x222>
100067de:	683b      	ldr	r3, [r7, #0]
100067e0:	2b00      	cmp	r3, #0
100067e2:	d114      	bne.n	1000680e <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
100067e4:	68f8      	ldr	r0, [r7, #12]
100067e6:	f000 f879 	bl	100068dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
100067ea:	68fb      	ldr	r3, [r7, #12]
100067ec:	2200      	movs	r2, #0
100067ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
100067f2:	68fb      	ldr	r3, [r7, #12]
100067f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100067f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
100067fc:	68fb      	ldr	r3, [r7, #12]
100067fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10006802:	68fb      	ldr	r3, [r7, #12]
10006804:	2201      	movs	r2, #1
10006806:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
1000680a:	2303      	movs	r3, #3
1000680c:	e062      	b.n	100068d4 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
1000680e:	68fb      	ldr	r3, [r7, #12]
10006810:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
10006814:	b29b      	uxth	r3, r3
10006816:	2b00      	cmp	r3, #0
10006818:	d1b9      	bne.n	1000678e <HAL_SPI_Receive+0x1cc>
1000681a:	e048      	b.n	100068ae <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
1000681c:	68fb      	ldr	r3, [r7, #12]
1000681e:	681b      	ldr	r3, [r3, #0]
10006820:	695b      	ldr	r3, [r3, #20]
10006822:	f003 0301 	and.w	r3, r3, #1
10006826:	2b01      	cmp	r3, #1
10006828:	d117      	bne.n	1000685a <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
1000682a:	68fb      	ldr	r3, [r7, #12]
1000682c:	681b      	ldr	r3, [r3, #0]
1000682e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
10006832:	68fb      	ldr	r3, [r7, #12]
10006834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10006836:	7812      	ldrb	r2, [r2, #0]
10006838:	b2d2      	uxtb	r2, r2
1000683a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
1000683c:	68fb      	ldr	r3, [r7, #12]
1000683e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10006840:	1c5a      	adds	r2, r3, #1
10006842:	68fb      	ldr	r3, [r7, #12]
10006844:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
10006846:	68fb      	ldr	r3, [r7, #12]
10006848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
1000684c:	b29b      	uxth	r3, r3
1000684e:	3b01      	subs	r3, #1
10006850:	b29a      	uxth	r2, r3
10006852:	68fb      	ldr	r3, [r7, #12]
10006854:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
10006858:	e023      	b.n	100068a2 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
1000685a:	f7fb f9b9 	bl	10001bd0 <HAL_GetTick>
1000685e:	4602      	mov	r2, r0
10006860:	697b      	ldr	r3, [r7, #20]
10006862:	1ad3      	subs	r3, r2, r3
10006864:	683a      	ldr	r2, [r7, #0]
10006866:	429a      	cmp	r2, r3
10006868:	d803      	bhi.n	10006872 <HAL_SPI_Receive+0x2b0>
1000686a:	683b      	ldr	r3, [r7, #0]
1000686c:	f1b3 3fff 	cmp.w	r3, #4294967295
10006870:	d102      	bne.n	10006878 <HAL_SPI_Receive+0x2b6>
10006872:	683b      	ldr	r3, [r7, #0]
10006874:	2b00      	cmp	r3, #0
10006876:	d114      	bne.n	100068a2 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10006878:	68f8      	ldr	r0, [r7, #12]
1000687a:	f000 f82f 	bl	100068dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
1000687e:	68fb      	ldr	r3, [r7, #12]
10006880:	2200      	movs	r2, #0
10006882:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10006886:	68fb      	ldr	r3, [r7, #12]
10006888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000688c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
10006890:	68fb      	ldr	r3, [r7, #12]
10006892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10006896:	68fb      	ldr	r3, [r7, #12]
10006898:	2201      	movs	r2, #1
1000689a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
1000689e:	2303      	movs	r3, #3
100068a0:	e018      	b.n	100068d4 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
100068a2:	68fb      	ldr	r3, [r7, #12]
100068a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
100068a8:	b29b      	uxth	r3, r3
100068aa:	2b00      	cmp	r3, #0
100068ac:	d1b6      	bne.n	1000681c <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
100068ae:	68f8      	ldr	r0, [r7, #12]
100068b0:	f000 f814 	bl	100068dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
100068b4:	68fb      	ldr	r3, [r7, #12]
100068b6:	2200      	movs	r2, #0
100068b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
100068bc:	68fb      	ldr	r3, [r7, #12]
100068be:	2201      	movs	r2, #1
100068c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
100068c4:	68fb      	ldr	r3, [r7, #12]
100068c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100068ca:	2b00      	cmp	r3, #0
100068cc:	d001      	beq.n	100068d2 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
100068ce:	2301      	movs	r3, #1
100068d0:	e000      	b.n	100068d4 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
100068d2:	7ffb      	ldrb	r3, [r7, #31]
}
100068d4:	4618      	mov	r0, r3
100068d6:	3720      	adds	r7, #32
100068d8:	46bd      	mov	sp, r7
100068da:	bd80      	pop	{r7, pc}

100068dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
100068dc:	b480      	push	{r7}
100068de:	b085      	sub	sp, #20
100068e0:	af00      	add	r7, sp, #0
100068e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
100068e4:	687b      	ldr	r3, [r7, #4]
100068e6:	681b      	ldr	r3, [r3, #0]
100068e8:	695b      	ldr	r3, [r3, #20]
100068ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
100068ec:	687b      	ldr	r3, [r7, #4]
100068ee:	681b      	ldr	r3, [r3, #0]
100068f0:	699a      	ldr	r2, [r3, #24]
100068f2:	687b      	ldr	r3, [r7, #4]
100068f4:	681b      	ldr	r3, [r3, #0]
100068f6:	f042 0208 	orr.w	r2, r2, #8
100068fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
100068fc:	687b      	ldr	r3, [r7, #4]
100068fe:	681b      	ldr	r3, [r3, #0]
10006900:	699a      	ldr	r2, [r3, #24]
10006902:	687b      	ldr	r3, [r7, #4]
10006904:	681b      	ldr	r3, [r3, #0]
10006906:	f042 0210 	orr.w	r2, r2, #16
1000690a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
1000690c:	687b      	ldr	r3, [r7, #4]
1000690e:	681b      	ldr	r3, [r3, #0]
10006910:	681a      	ldr	r2, [r3, #0]
10006912:	687b      	ldr	r3, [r7, #4]
10006914:	681b      	ldr	r3, [r3, #0]
10006916:	f022 0201 	bic.w	r2, r2, #1
1000691a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
1000691c:	687b      	ldr	r3, [r7, #4]
1000691e:	681b      	ldr	r3, [r3, #0]
10006920:	691b      	ldr	r3, [r3, #16]
10006922:	687a      	ldr	r2, [r7, #4]
10006924:	6812      	ldr	r2, [r2, #0]
10006926:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
1000692a:	f023 0303 	bic.w	r3, r3, #3
1000692e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
10006930:	687b      	ldr	r3, [r7, #4]
10006932:	681b      	ldr	r3, [r3, #0]
10006934:	689a      	ldr	r2, [r3, #8]
10006936:	687b      	ldr	r3, [r7, #4]
10006938:	681b      	ldr	r3, [r3, #0]
1000693a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
1000693e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
10006940:	687b      	ldr	r3, [r7, #4]
10006942:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10006946:	b2db      	uxtb	r3, r3
10006948:	2b04      	cmp	r3, #4
1000694a:	d014      	beq.n	10006976 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
1000694c:	68fb      	ldr	r3, [r7, #12]
1000694e:	f003 0320 	and.w	r3, r3, #32
10006952:	2b00      	cmp	r3, #0
10006954:	d00f      	beq.n	10006976 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
10006956:	687b      	ldr	r3, [r7, #4]
10006958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000695c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
10006960:	687b      	ldr	r3, [r7, #4]
10006962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
10006966:	687b      	ldr	r3, [r7, #4]
10006968:	681b      	ldr	r3, [r3, #0]
1000696a:	699a      	ldr	r2, [r3, #24]
1000696c:	687b      	ldr	r3, [r7, #4]
1000696e:	681b      	ldr	r3, [r3, #0]
10006970:	f042 0220 	orr.w	r2, r2, #32
10006974:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
10006976:	687b      	ldr	r3, [r7, #4]
10006978:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
1000697c:	b2db      	uxtb	r3, r3
1000697e:	2b03      	cmp	r3, #3
10006980:	d014      	beq.n	100069ac <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
10006982:	68fb      	ldr	r3, [r7, #12]
10006984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10006988:	2b00      	cmp	r3, #0
1000698a:	d00f      	beq.n	100069ac <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
1000698c:	687b      	ldr	r3, [r7, #4]
1000698e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006992:	f043 0204 	orr.w	r2, r3, #4
10006996:	687b      	ldr	r3, [r7, #4]
10006998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
1000699c:	687b      	ldr	r3, [r7, #4]
1000699e:	681b      	ldr	r3, [r3, #0]
100069a0:	699a      	ldr	r2, [r3, #24]
100069a2:	687b      	ldr	r3, [r7, #4]
100069a4:	681b      	ldr	r3, [r3, #0]
100069a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
100069aa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
100069ac:	68fb      	ldr	r3, [r7, #12]
100069ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
100069b2:	2b00      	cmp	r3, #0
100069b4:	d00f      	beq.n	100069d6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
100069b6:	687b      	ldr	r3, [r7, #4]
100069b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100069bc:	f043 0201 	orr.w	r2, r3, #1
100069c0:	687b      	ldr	r3, [r7, #4]
100069c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
100069c6:	687b      	ldr	r3, [r7, #4]
100069c8:	681b      	ldr	r3, [r3, #0]
100069ca:	699a      	ldr	r2, [r3, #24]
100069cc:	687b      	ldr	r3, [r7, #4]
100069ce:	681b      	ldr	r3, [r3, #0]
100069d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
100069d4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
100069d6:	68fb      	ldr	r3, [r7, #12]
100069d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100069dc:	2b00      	cmp	r3, #0
100069de:	d00f      	beq.n	10006a00 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
100069e0:	687b      	ldr	r3, [r7, #4]
100069e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100069e6:	f043 0208 	orr.w	r2, r3, #8
100069ea:	687b      	ldr	r3, [r7, #4]
100069ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
100069f0:	687b      	ldr	r3, [r7, #4]
100069f2:	681b      	ldr	r3, [r3, #0]
100069f4:	699a      	ldr	r2, [r3, #24]
100069f6:	687b      	ldr	r3, [r7, #4]
100069f8:	681b      	ldr	r3, [r3, #0]
100069fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
100069fe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
10006a00:	687b      	ldr	r3, [r7, #4]
10006a02:	2200      	movs	r2, #0
10006a04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
10006a08:	687b      	ldr	r3, [r7, #4]
10006a0a:	2200      	movs	r2, #0
10006a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
10006a10:	bf00      	nop
10006a12:	3714      	adds	r7, #20
10006a14:	46bd      	mov	sp, r7
10006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
10006a1a:	4770      	bx	lr

10006a1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
10006a1c:	b580      	push	{r7, lr}
10006a1e:	b084      	sub	sp, #16
10006a20:	af00      	add	r7, sp, #0
10006a22:	60f8      	str	r0, [r7, #12]
10006a24:	60b9      	str	r1, [r7, #8]
10006a26:	603b      	str	r3, [r7, #0]
10006a28:	4613      	mov	r3, r2
10006a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
10006a2c:	e010      	b.n	10006a50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006a2e:	f7fb f8cf 	bl	10001bd0 <HAL_GetTick>
10006a32:	4602      	mov	r2, r0
10006a34:	683b      	ldr	r3, [r7, #0]
10006a36:	1ad3      	subs	r3, r2, r3
10006a38:	69ba      	ldr	r2, [r7, #24]
10006a3a:	429a      	cmp	r2, r3
10006a3c:	d803      	bhi.n	10006a46 <SPI_WaitOnFlagUntilTimeout+0x2a>
10006a3e:	69bb      	ldr	r3, [r7, #24]
10006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
10006a44:	d102      	bne.n	10006a4c <SPI_WaitOnFlagUntilTimeout+0x30>
10006a46:	69bb      	ldr	r3, [r7, #24]
10006a48:	2b00      	cmp	r3, #0
10006a4a:	d101      	bne.n	10006a50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
10006a4c:	2303      	movs	r3, #3
10006a4e:	e00f      	b.n	10006a70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
10006a50:	68fb      	ldr	r3, [r7, #12]
10006a52:	681b      	ldr	r3, [r3, #0]
10006a54:	695a      	ldr	r2, [r3, #20]
10006a56:	68bb      	ldr	r3, [r7, #8]
10006a58:	4013      	ands	r3, r2
10006a5a:	68ba      	ldr	r2, [r7, #8]
10006a5c:	429a      	cmp	r2, r3
10006a5e:	bf0c      	ite	eq
10006a60:	2301      	moveq	r3, #1
10006a62:	2300      	movne	r3, #0
10006a64:	b2db      	uxtb	r3, r3
10006a66:	461a      	mov	r2, r3
10006a68:	79fb      	ldrb	r3, [r7, #7]
10006a6a:	429a      	cmp	r2, r3
10006a6c:	d0df      	beq.n	10006a2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
10006a6e:	2300      	movs	r3, #0
}
10006a70:	4618      	mov	r0, r3
10006a72:	3710      	adds	r7, #16
10006a74:	46bd      	mov	sp, r7
10006a76:	bd80      	pop	{r7, pc}

10006a78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
10006a78:	b480      	push	{r7}
10006a7a:	b085      	sub	sp, #20
10006a7c:	af00      	add	r7, sp, #0
10006a7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
10006a80:	687b      	ldr	r3, [r7, #4]
10006a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10006a84:	095b      	lsrs	r3, r3, #5
10006a86:	3301      	adds	r3, #1
10006a88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
10006a8a:	687b      	ldr	r3, [r7, #4]
10006a8c:	68db      	ldr	r3, [r3, #12]
10006a8e:	3301      	adds	r3, #1
10006a90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
10006a92:	68bb      	ldr	r3, [r7, #8]
10006a94:	3307      	adds	r3, #7
10006a96:	08db      	lsrs	r3, r3, #3
10006a98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
10006a9a:	68bb      	ldr	r3, [r7, #8]
10006a9c:	68fa      	ldr	r2, [r7, #12]
10006a9e:	fb02 f303 	mul.w	r3, r2, r3
}
10006aa2:	4618      	mov	r0, r3
10006aa4:	3714      	adds	r7, #20
10006aa6:	46bd      	mov	sp, r7
10006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
10006aac:	4770      	bx	lr

10006aae <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
10006aae:	b480      	push	{r7}
10006ab0:	b083      	sub	sp, #12
10006ab2:	af00      	add	r7, sp, #0
10006ab4:	6078      	str	r0, [r7, #4]
	list->prev = list;
10006ab6:	687b      	ldr	r3, [r7, #4]
10006ab8:	687a      	ldr	r2, [r7, #4]
10006aba:	605a      	str	r2, [r3, #4]
	list->next = list;
10006abc:	687b      	ldr	r3, [r7, #4]
10006abe:	687a      	ldr	r2, [r7, #4]
10006ac0:	601a      	str	r2, [r3, #0]
}
10006ac2:	bf00      	nop
10006ac4:	370c      	adds	r7, #12
10006ac6:	46bd      	mov	sp, r7
10006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
10006acc:	4770      	bx	lr

10006ace <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
10006ace:	b480      	push	{r7}
10006ad0:	b083      	sub	sp, #12
10006ad2:	af00      	add	r7, sp, #0
10006ad4:	6078      	str	r0, [r7, #4]
10006ad6:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10006ad8:	687b      	ldr	r3, [r7, #4]
10006ada:	685a      	ldr	r2, [r3, #4]
10006adc:	683b      	ldr	r3, [r7, #0]
10006ade:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10006ae0:	683b      	ldr	r3, [r7, #0]
10006ae2:	687a      	ldr	r2, [r7, #4]
10006ae4:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10006ae6:	683b      	ldr	r3, [r7, #0]
10006ae8:	681b      	ldr	r3, [r3, #0]
10006aea:	683a      	ldr	r2, [r7, #0]
10006aec:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10006aee:	683b      	ldr	r3, [r7, #0]
10006af0:	685b      	ldr	r3, [r3, #4]
10006af2:	683a      	ldr	r2, [r7, #0]
10006af4:	601a      	str	r2, [r3, #0]
}
10006af6:	bf00      	nop
10006af8:	370c      	adds	r7, #12
10006afa:	46bd      	mov	sp, r7
10006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
10006b00:	4770      	bx	lr

10006b02 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
10006b02:	b580      	push	{r7, lr}
10006b04:	b082      	sub	sp, #8
10006b06:	af00      	add	r7, sp, #0
10006b08:	6078      	str	r0, [r7, #4]
10006b0a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10006b0c:	6839      	ldr	r1, [r7, #0]
10006b0e:	6878      	ldr	r0, [r7, #4]
10006b10:	f7ff ffdd 	bl	10006ace <metal_list_add_before>
}
10006b14:	bf00      	nop
10006b16:	3708      	adds	r7, #8
10006b18:	46bd      	mov	sp, r7
10006b1a:	bd80      	pop	{r7, pc}

10006b1c <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
10006b1c:	b580      	push	{r7, lr}
10006b1e:	b082      	sub	sp, #8
10006b20:	af00      	add	r7, sp, #0
10006b22:	6078      	str	r0, [r7, #4]
10006b24:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
10006b26:	6839      	ldr	r1, [r7, #0]
10006b28:	6878      	ldr	r0, [r7, #4]
10006b2a:	f001 fefb 	bl	10008924 <metal_machine_cache_flush>
}
10006b2e:	bf00      	nop
10006b30:	3708      	adds	r7, #8
10006b32:	46bd      	mov	sp, r7
10006b34:	bd80      	pop	{r7, pc}

10006b36 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10006b36:	b580      	push	{r7, lr}
10006b38:	b082      	sub	sp, #8
10006b3a:	af00      	add	r7, sp, #0
10006b3c:	6078      	str	r0, [r7, #4]
10006b3e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
10006b40:	6839      	ldr	r1, [r7, #0]
10006b42:	6878      	ldr	r0, [r7, #4]
10006b44:	f001 fef9 	bl	1000893a <metal_machine_cache_invalidate>
}
10006b48:	bf00      	nop
10006b4a:	3708      	adds	r7, #8
10006b4c:	46bd      	mov	sp, r7
10006b4e:	bd80      	pop	{r7, pc}

10006b50 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
10006b50:	b580      	push	{r7, lr}
10006b52:	b082      	sub	sp, #8
10006b54:	af00      	add	r7, sp, #0
10006b56:	6078      	str	r0, [r7, #4]
10006b58:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
10006b5a:	6839      	ldr	r1, [r7, #0]
10006b5c:	6878      	ldr	r0, [r7, #4]
10006b5e:	f7ff ffdd 	bl	10006b1c <__metal_cache_flush>
}
10006b62:	bf00      	nop
10006b64:	3708      	adds	r7, #8
10006b66:	46bd      	mov	sp, r7
10006b68:	bd80      	pop	{r7, pc}

10006b6a <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
10006b6a:	b580      	push	{r7, lr}
10006b6c:	b082      	sub	sp, #8
10006b6e:	af00      	add	r7, sp, #0
10006b70:	6078      	str	r0, [r7, #4]
10006b72:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
10006b74:	6839      	ldr	r1, [r7, #0]
10006b76:	6878      	ldr	r0, [r7, #4]
10006b78:	f7ff ffdd 	bl	10006b36 <__metal_cache_invalidate>
}
10006b7c:	bf00      	nop
10006b7e:	3708      	adds	r7, #8
10006b80:	46bd      	mov	sp, r7
10006b82:	bd80      	pop	{r7, pc}

10006b84 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
10006b84:	b580      	push	{r7, lr}
10006b86:	b082      	sub	sp, #8
10006b88:	af00      	add	r7, sp, #0
10006b8a:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
10006b8c:	687b      	ldr	r3, [r7, #4]
10006b8e:	2b00      	cmp	r3, #0
10006b90:	d008      	beq.n	10006ba4 <metal_bus_register+0x20>
10006b92:	687b      	ldr	r3, [r7, #4]
10006b94:	681b      	ldr	r3, [r3, #0]
10006b96:	2b00      	cmp	r3, #0
10006b98:	d004      	beq.n	10006ba4 <metal_bus_register+0x20>
10006b9a:	687b      	ldr	r3, [r7, #4]
10006b9c:	681b      	ldr	r3, [r3, #0]
10006b9e:	781b      	ldrb	r3, [r3, #0]
10006ba0:	2b00      	cmp	r3, #0
10006ba2:	d102      	bne.n	10006baa <metal_bus_register+0x26>
		return -EINVAL;
10006ba4:	f06f 0315 	mvn.w	r3, #21
10006ba8:	e026      	b.n	10006bf8 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
10006baa:	687b      	ldr	r3, [r7, #4]
10006bac:	681b      	ldr	r3, [r3, #0]
10006bae:	2100      	movs	r1, #0
10006bb0:	4618      	mov	r0, r3
10006bb2:	f000 f82b 	bl	10006c0c <metal_bus_find>
10006bb6:	4603      	mov	r3, r0
10006bb8:	2b00      	cmp	r3, #0
10006bba:	d102      	bne.n	10006bc2 <metal_bus_register+0x3e>
		return -EEXIST;
10006bbc:	f06f 0310 	mvn.w	r3, #16
10006bc0:	e01a      	b.n	10006bf8 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
10006bc2:	687b      	ldr	r3, [r7, #4]
10006bc4:	331c      	adds	r3, #28
10006bc6:	4618      	mov	r0, r3
10006bc8:	f7ff ff71 	bl	10006aae <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
10006bcc:	687b      	ldr	r3, [r7, #4]
10006bce:	3324      	adds	r3, #36	@ 0x24
10006bd0:	4619      	mov	r1, r3
10006bd2:	480b      	ldr	r0, [pc, #44]	@ (10006c00 <metal_bus_register+0x7c>)
10006bd4:	f7ff ff95 	bl	10006b02 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
10006bd8:	4b0a      	ldr	r3, [pc, #40]	@ (10006c04 <metal_bus_register+0x80>)
10006bda:	781b      	ldrb	r3, [r3, #0]
10006bdc:	2b06      	cmp	r3, #6
10006bde:	d90a      	bls.n	10006bf6 <metal_bus_register+0x72>
10006be0:	4b08      	ldr	r3, [pc, #32]	@ (10006c04 <metal_bus_register+0x80>)
10006be2:	685b      	ldr	r3, [r3, #4]
10006be4:	2b00      	cmp	r3, #0
10006be6:	d006      	beq.n	10006bf6 <metal_bus_register+0x72>
10006be8:	4b06      	ldr	r3, [pc, #24]	@ (10006c04 <metal_bus_register+0x80>)
10006bea:	685b      	ldr	r3, [r3, #4]
10006bec:	687a      	ldr	r2, [r7, #4]
10006bee:	6812      	ldr	r2, [r2, #0]
10006bf0:	4905      	ldr	r1, [pc, #20]	@ (10006c08 <metal_bus_register+0x84>)
10006bf2:	2007      	movs	r0, #7
10006bf4:	4798      	blx	r3
	return 0;
10006bf6:	2300      	movs	r3, #0
}
10006bf8:	4618      	mov	r0, r3
10006bfa:	3708      	adds	r7, #8
10006bfc:	46bd      	mov	sp, r7
10006bfe:	bd80      	pop	{r7, pc}
10006c00:	10020450 	.word	0x10020450
10006c04:	10020448 	.word	0x10020448
10006c08:	1000af3c 	.word	0x1000af3c

10006c0c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
10006c0c:	b580      	push	{r7, lr}
10006c0e:	b084      	sub	sp, #16
10006c10:	af00      	add	r7, sp, #0
10006c12:	6078      	str	r0, [r7, #4]
10006c14:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
10006c16:	4b12      	ldr	r3, [pc, #72]	@ (10006c60 <metal_bus_find+0x54>)
10006c18:	689b      	ldr	r3, [r3, #8]
10006c1a:	60fb      	str	r3, [r7, #12]
10006c1c:	e016      	b.n	10006c4c <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
10006c1e:	68fb      	ldr	r3, [r7, #12]
10006c20:	3b24      	subs	r3, #36	@ 0x24
10006c22:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
10006c24:	68bb      	ldr	r3, [r7, #8]
10006c26:	681b      	ldr	r3, [r3, #0]
10006c28:	6879      	ldr	r1, [r7, #4]
10006c2a:	4618      	mov	r0, r3
10006c2c:	f7f9 fa08 	bl	10000040 <strcmp>
10006c30:	4603      	mov	r3, r0
10006c32:	2b00      	cmp	r3, #0
10006c34:	d107      	bne.n	10006c46 <metal_bus_find+0x3a>
10006c36:	683b      	ldr	r3, [r7, #0]
10006c38:	2b00      	cmp	r3, #0
10006c3a:	d004      	beq.n	10006c46 <metal_bus_find+0x3a>
			*result = bus;
10006c3c:	683b      	ldr	r3, [r7, #0]
10006c3e:	68ba      	ldr	r2, [r7, #8]
10006c40:	601a      	str	r2, [r3, #0]
			return 0;
10006c42:	2300      	movs	r3, #0
10006c44:	e008      	b.n	10006c58 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10006c46:	68fb      	ldr	r3, [r7, #12]
10006c48:	681b      	ldr	r3, [r3, #0]
10006c4a:	60fb      	str	r3, [r7, #12]
10006c4c:	68fb      	ldr	r3, [r7, #12]
10006c4e:	4a05      	ldr	r2, [pc, #20]	@ (10006c64 <metal_bus_find+0x58>)
10006c50:	4293      	cmp	r3, r2
10006c52:	d1e4      	bne.n	10006c1e <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10006c54:	f06f 0301 	mvn.w	r3, #1
}
10006c58:	4618      	mov	r0, r3
10006c5a:	3710      	adds	r7, #16
10006c5c:	46bd      	mov	sp, r7
10006c5e:	bd80      	pop	{r7, pc}
10006c60:	10020448 	.word	0x10020448
10006c64:	10020450 	.word	0x10020450

10006c68 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10006c68:	b580      	push	{r7, lr}
10006c6a:	b086      	sub	sp, #24
10006c6c:	af00      	add	r7, sp, #0
10006c6e:	60f8      	str	r0, [r7, #12]
10006c70:	60b9      	str	r1, [r7, #8]
10006c72:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10006c74:	68fb      	ldr	r3, [r7, #12]
10006c76:	2b00      	cmp	r3, #0
10006c78:	d00d      	beq.n	10006c96 <metal_device_open+0x2e>
10006c7a:	68fb      	ldr	r3, [r7, #12]
10006c7c:	781b      	ldrb	r3, [r3, #0]
10006c7e:	2b00      	cmp	r3, #0
10006c80:	d009      	beq.n	10006c96 <metal_device_open+0x2e>
10006c82:	68bb      	ldr	r3, [r7, #8]
10006c84:	2b00      	cmp	r3, #0
10006c86:	d006      	beq.n	10006c96 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10006c88:	68bb      	ldr	r3, [r7, #8]
10006c8a:	781b      	ldrb	r3, [r3, #0]
10006c8c:	2b00      	cmp	r3, #0
10006c8e:	d002      	beq.n	10006c96 <metal_device_open+0x2e>
10006c90:	687b      	ldr	r3, [r7, #4]
10006c92:	2b00      	cmp	r3, #0
10006c94:	d102      	bne.n	10006c9c <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10006c96:	f06f 0315 	mvn.w	r3, #21
10006c9a:	e01f      	b.n	10006cdc <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
10006c9c:	f107 0310 	add.w	r3, r7, #16
10006ca0:	4619      	mov	r1, r3
10006ca2:	68f8      	ldr	r0, [r7, #12]
10006ca4:	f7ff ffb2 	bl	10006c0c <metal_bus_find>
10006ca8:	6178      	str	r0, [r7, #20]
	if (error)
10006caa:	697b      	ldr	r3, [r7, #20]
10006cac:	2b00      	cmp	r3, #0
10006cae:	d001      	beq.n	10006cb4 <metal_device_open+0x4c>
		return error;
10006cb0:	697b      	ldr	r3, [r7, #20]
10006cb2:	e013      	b.n	10006cdc <metal_device_open+0x74>

	if (!bus->ops.dev_open)
10006cb4:	693b      	ldr	r3, [r7, #16]
10006cb6:	689b      	ldr	r3, [r3, #8]
10006cb8:	2b00      	cmp	r3, #0
10006cba:	d102      	bne.n	10006cc2 <metal_device_open+0x5a>
		return -ENODEV;
10006cbc:	f06f 0312 	mvn.w	r3, #18
10006cc0:	e00c      	b.n	10006cdc <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
10006cc2:	693b      	ldr	r3, [r7, #16]
10006cc4:	689b      	ldr	r3, [r3, #8]
10006cc6:	6938      	ldr	r0, [r7, #16]
10006cc8:	687a      	ldr	r2, [r7, #4]
10006cca:	68b9      	ldr	r1, [r7, #8]
10006ccc:	4798      	blx	r3
10006cce:	6178      	str	r0, [r7, #20]
	if (error)
10006cd0:	697b      	ldr	r3, [r7, #20]
10006cd2:	2b00      	cmp	r3, #0
10006cd4:	d001      	beq.n	10006cda <metal_device_open+0x72>
		return error;
10006cd6:	697b      	ldr	r3, [r7, #20]
10006cd8:	e000      	b.n	10006cdc <metal_device_open+0x74>

	return 0;
10006cda:	2300      	movs	r3, #0
}
10006cdc:	4618      	mov	r0, r3
10006cde:	3718      	adds	r7, #24
10006ce0:	46bd      	mov	sp, r7
10006ce2:	bd80      	pop	{r7, pc}

10006ce4 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
10006ce4:	b580      	push	{r7, lr}
10006ce6:	b082      	sub	sp, #8
10006ce8:	af00      	add	r7, sp, #0
10006cea:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
10006cec:	687b      	ldr	r3, [r7, #4]
10006cee:	681b      	ldr	r3, [r3, #0]
10006cf0:	2b00      	cmp	r3, #0
10006cf2:	d008      	beq.n	10006d06 <metal_register_generic_device+0x22>
10006cf4:	687b      	ldr	r3, [r7, #4]
10006cf6:	681b      	ldr	r3, [r3, #0]
10006cf8:	781b      	ldrb	r3, [r3, #0]
10006cfa:	2b00      	cmp	r3, #0
10006cfc:	d003      	beq.n	10006d06 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
10006cfe:	687b      	ldr	r3, [r7, #4]
10006d00:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
10006d02:	2b02      	cmp	r3, #2
10006d04:	d902      	bls.n	10006d0c <metal_register_generic_device+0x28>
		return -EINVAL;
10006d06:	f06f 0315 	mvn.w	r3, #21
10006d0a:	e009      	b.n	10006d20 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
10006d0c:	687b      	ldr	r3, [r7, #4]
10006d0e:	4a06      	ldr	r2, [pc, #24]	@ (10006d28 <metal_register_generic_device+0x44>)
10006d10:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
10006d12:	687b      	ldr	r3, [r7, #4]
10006d14:	337c      	adds	r3, #124	@ 0x7c
10006d16:	4619      	mov	r1, r3
10006d18:	4804      	ldr	r0, [pc, #16]	@ (10006d2c <metal_register_generic_device+0x48>)
10006d1a:	f7ff fef2 	bl	10006b02 <metal_list_add_tail>
			    &device->node);
	return 0;
10006d1e:	2300      	movs	r3, #0
}
10006d20:	4618      	mov	r0, r3
10006d22:	3708      	adds	r7, #8
10006d24:	46bd      	mov	sp, r7
10006d26:	bd80      	pop	{r7, pc}
10006d28:	10020014 	.word	0x10020014
10006d2c:	10020460 	.word	0x10020460

10006d30 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
10006d30:	b580      	push	{r7, lr}
10006d32:	b086      	sub	sp, #24
10006d34:	af00      	add	r7, sp, #0
10006d36:	60f8      	str	r0, [r7, #12]
10006d38:	60b9      	str	r1, [r7, #8]
10006d3a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
10006d3c:	4b12      	ldr	r3, [pc, #72]	@ (10006d88 <metal_generic_dev_open+0x58>)
10006d3e:	699b      	ldr	r3, [r3, #24]
10006d40:	617b      	str	r3, [r7, #20]
10006d42:	e016      	b.n	10006d72 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10006d44:	697b      	ldr	r3, [r7, #20]
10006d46:	3b7c      	subs	r3, #124	@ 0x7c
10006d48:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
10006d4a:	693b      	ldr	r3, [r7, #16]
10006d4c:	681b      	ldr	r3, [r3, #0]
10006d4e:	68b9      	ldr	r1, [r7, #8]
10006d50:	4618      	mov	r0, r3
10006d52:	f7f9 f975 	bl	10000040 <strcmp>
10006d56:	4603      	mov	r3, r0
10006d58:	2b00      	cmp	r3, #0
10006d5a:	d107      	bne.n	10006d6c <metal_generic_dev_open+0x3c>
			*device = dev;
10006d5c:	687b      	ldr	r3, [r7, #4]
10006d5e:	693a      	ldr	r2, [r7, #16]
10006d60:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
10006d62:	6938      	ldr	r0, [r7, #16]
10006d64:	f000 f890 	bl	10006e88 <metal_generic_dev_sys_open>
10006d68:	4603      	mov	r3, r0
10006d6a:	e008      	b.n	10006d7e <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
10006d6c:	697b      	ldr	r3, [r7, #20]
10006d6e:	681b      	ldr	r3, [r3, #0]
10006d70:	617b      	str	r3, [r7, #20]
10006d72:	697b      	ldr	r3, [r7, #20]
10006d74:	4a05      	ldr	r2, [pc, #20]	@ (10006d8c <metal_generic_dev_open+0x5c>)
10006d76:	4293      	cmp	r3, r2
10006d78:	d1e4      	bne.n	10006d44 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
10006d7a:	f06f 0312 	mvn.w	r3, #18
}
10006d7e:	4618      	mov	r0, r3
10006d80:	3718      	adds	r7, #24
10006d82:	46bd      	mov	sp, r7
10006d84:	bd80      	pop	{r7, pc}
10006d86:	bf00      	nop
10006d88:	10020448 	.word	0x10020448
10006d8c:	10020460 	.word	0x10020460

10006d90 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10006d90:	b580      	push	{r7, lr}
10006d92:	b086      	sub	sp, #24
10006d94:	af00      	add	r7, sp, #0
10006d96:	60f8      	str	r0, [r7, #12]
10006d98:	60b9      	str	r1, [r7, #8]
10006d9a:	607a      	str	r2, [r7, #4]
10006d9c:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
10006d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10006da0:	683b      	ldr	r3, [r7, #0]
10006da2:	429a      	cmp	r2, r3
10006da4:	d009      	beq.n	10006dba <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10006da6:	6a3a      	ldr	r2, [r7, #32]
10006da8:	4613      	mov	r3, r2
10006daa:	005b      	lsls	r3, r3, #1
10006dac:	4413      	add	r3, r2
10006dae:	009b      	lsls	r3, r3, #2
10006db0:	461a      	mov	r2, r3
10006db2:	6839      	ldr	r1, [r7, #0]
10006db4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10006db6:	f002 fefa 	bl	10009bae <memcpy>
	for (i = 0; i < nents_in; i++) {
10006dba:	2300      	movs	r3, #0
10006dbc:	617b      	str	r3, [r7, #20]
10006dbe:	e02f      	b.n	10006e20 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
10006dc0:	687b      	ldr	r3, [r7, #4]
10006dc2:	2b02      	cmp	r3, #2
10006dc4:	d114      	bne.n	10006df0 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10006dc6:	697a      	ldr	r2, [r7, #20]
10006dc8:	4613      	mov	r3, r2
10006dca:	005b      	lsls	r3, r3, #1
10006dcc:	4413      	add	r3, r2
10006dce:	009b      	lsls	r3, r3, #2
10006dd0:	461a      	mov	r2, r3
10006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006dd4:	4413      	add	r3, r2
10006dd6:	6818      	ldr	r0, [r3, #0]
10006dd8:	697a      	ldr	r2, [r7, #20]
10006dda:	4613      	mov	r3, r2
10006ddc:	005b      	lsls	r3, r3, #1
10006dde:	4413      	add	r3, r2
10006de0:	009b      	lsls	r3, r3, #2
10006de2:	461a      	mov	r2, r3
10006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006de6:	4413      	add	r3, r2
10006de8:	689b      	ldr	r3, [r3, #8]
10006dea:	4619      	mov	r1, r3
10006dec:	f7ff feb0 	bl	10006b50 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
10006df0:	697a      	ldr	r2, [r7, #20]
10006df2:	4613      	mov	r3, r2
10006df4:	005b      	lsls	r3, r3, #1
10006df6:	4413      	add	r3, r2
10006df8:	009b      	lsls	r3, r3, #2
10006dfa:	461a      	mov	r2, r3
10006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006dfe:	4413      	add	r3, r2
10006e00:	6818      	ldr	r0, [r3, #0]
10006e02:	697a      	ldr	r2, [r7, #20]
10006e04:	4613      	mov	r3, r2
10006e06:	005b      	lsls	r3, r3, #1
10006e08:	4413      	add	r3, r2
10006e0a:	009b      	lsls	r3, r3, #2
10006e0c:	461a      	mov	r2, r3
10006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006e10:	4413      	add	r3, r2
10006e12:	689b      	ldr	r3, [r3, #8]
10006e14:	4619      	mov	r1, r3
10006e16:	f7ff fea8 	bl	10006b6a <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10006e1a:	697b      	ldr	r3, [r7, #20]
10006e1c:	3301      	adds	r3, #1
10006e1e:	617b      	str	r3, [r7, #20]
10006e20:	697a      	ldr	r2, [r7, #20]
10006e22:	6a3b      	ldr	r3, [r7, #32]
10006e24:	429a      	cmp	r2, r3
10006e26:	dbcb      	blt.n	10006dc0 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
10006e28:	6a3b      	ldr	r3, [r7, #32]
}
10006e2a:	4618      	mov	r0, r3
10006e2c:	3718      	adds	r7, #24
10006e2e:	46bd      	mov	sp, r7
10006e30:	bd80      	pop	{r7, pc}

10006e32 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10006e32:	b580      	push	{r7, lr}
10006e34:	b086      	sub	sp, #24
10006e36:	af00      	add	r7, sp, #0
10006e38:	60f8      	str	r0, [r7, #12]
10006e3a:	60b9      	str	r1, [r7, #8]
10006e3c:	607a      	str	r2, [r7, #4]
10006e3e:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10006e40:	2300      	movs	r3, #0
10006e42:	617b      	str	r3, [r7, #20]
10006e44:	e017      	b.n	10006e76 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10006e46:	697a      	ldr	r2, [r7, #20]
10006e48:	4613      	mov	r3, r2
10006e4a:	005b      	lsls	r3, r3, #1
10006e4c:	4413      	add	r3, r2
10006e4e:	009b      	lsls	r3, r3, #2
10006e50:	461a      	mov	r2, r3
10006e52:	683b      	ldr	r3, [r7, #0]
10006e54:	4413      	add	r3, r2
10006e56:	6818      	ldr	r0, [r3, #0]
10006e58:	697a      	ldr	r2, [r7, #20]
10006e5a:	4613      	mov	r3, r2
10006e5c:	005b      	lsls	r3, r3, #1
10006e5e:	4413      	add	r3, r2
10006e60:	009b      	lsls	r3, r3, #2
10006e62:	461a      	mov	r2, r3
10006e64:	683b      	ldr	r3, [r7, #0]
10006e66:	4413      	add	r3, r2
10006e68:	689b      	ldr	r3, [r3, #8]
10006e6a:	4619      	mov	r1, r3
10006e6c:	f7ff fe7d 	bl	10006b6a <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
10006e70:	697b      	ldr	r3, [r7, #20]
10006e72:	3301      	adds	r3, #1
10006e74:	617b      	str	r3, [r7, #20]
10006e76:	697a      	ldr	r2, [r7, #20]
10006e78:	6a3b      	ldr	r3, [r7, #32]
10006e7a:	429a      	cmp	r2, r3
10006e7c:	dbe3      	blt.n	10006e46 <metal_generic_dev_dma_unmap+0x14>
	}
}
10006e7e:	bf00      	nop
10006e80:	bf00      	nop
10006e82:	3718      	adds	r7, #24
10006e84:	46bd      	mov	sp, r7
10006e86:	bd80      	pop	{r7, pc}

10006e88 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
10006e88:	b580      	push	{r7, lr}
10006e8a:	b084      	sub	sp, #16
10006e8c:	af00      	add	r7, sp, #0
10006e8e:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
10006e90:	2300      	movs	r3, #0
10006e92:	60fb      	str	r3, [r7, #12]
10006e94:	e013      	b.n	10006ebe <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
10006e96:	68fa      	ldr	r2, [r7, #12]
10006e98:	4613      	mov	r3, r2
10006e9a:	00db      	lsls	r3, r3, #3
10006e9c:	1a9b      	subs	r3, r3, r2
10006e9e:	00db      	lsls	r3, r3, #3
10006ea0:	3308      	adds	r3, #8
10006ea2:	687a      	ldr	r2, [r7, #4]
10006ea4:	4413      	add	r3, r2
10006ea6:	3304      	adds	r3, #4
10006ea8:	60bb      	str	r3, [r7, #8]
		if (!io->size)
10006eaa:	68bb      	ldr	r3, [r7, #8]
10006eac:	689b      	ldr	r3, [r3, #8]
10006eae:	2b00      	cmp	r3, #0
10006eb0:	d00b      	beq.n	10006eca <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
10006eb2:	68b8      	ldr	r0, [r7, #8]
10006eb4:	f000 f81e 	bl	10006ef4 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
10006eb8:	68fb      	ldr	r3, [r7, #12]
10006eba:	3301      	adds	r3, #1
10006ebc:	60fb      	str	r3, [r7, #12]
10006ebe:	687b      	ldr	r3, [r7, #4]
10006ec0:	689b      	ldr	r3, [r3, #8]
10006ec2:	68fa      	ldr	r2, [r7, #12]
10006ec4:	429a      	cmp	r2, r3
10006ec6:	d3e6      	bcc.n	10006e96 <metal_generic_dev_sys_open+0xe>
10006ec8:	e000      	b.n	10006ecc <metal_generic_dev_sys_open+0x44>
			break;
10006eca:	bf00      	nop
	}

	return 0;
10006ecc:	2300      	movs	r3, #0
}
10006ece:	4618      	mov	r0, r3
10006ed0:	3710      	adds	r7, #16
10006ed2:	46bd      	mov	sp, r7
10006ed4:	bd80      	pop	{r7, pc}
	...

10006ed8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
10006ed8:	b580      	push	{r7, lr}
10006eda:	b082      	sub	sp, #8
10006edc:	af00      	add	r7, sp, #0
10006ede:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
10006ee0:	4803      	ldr	r0, [pc, #12]	@ (10006ef0 <metal_sys_init+0x18>)
10006ee2:	f7ff fe4f 	bl	10006b84 <metal_bus_register>
	return 0;
10006ee6:	2300      	movs	r3, #0
}
10006ee8:	4618      	mov	r0, r3
10006eea:	3708      	adds	r7, #8
10006eec:	46bd      	mov	sp, r7
10006eee:	bd80      	pop	{r7, pc}
10006ef0:	10020014 	.word	0x10020014

10006ef4 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
10006ef4:	b580      	push	{r7, lr}
10006ef6:	b086      	sub	sp, #24
10006ef8:	af00      	add	r7, sp, #0
10006efa:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
10006efc:	687b      	ldr	r3, [r7, #4]
10006efe:	681b      	ldr	r3, [r3, #0]
10006f00:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
10006f02:	687b      	ldr	r3, [r7, #4]
10006f04:	689b      	ldr	r3, [r3, #8]
10006f06:	613b      	str	r3, [r7, #16]
	if (psize) {
10006f08:	693b      	ldr	r3, [r7, #16]
10006f0a:	2b00      	cmp	r3, #0
10006f0c:	d02c      	beq.n	10006f68 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
10006f0e:	687b      	ldr	r3, [r7, #4]
10006f10:	68db      	ldr	r3, [r3, #12]
10006f12:	693a      	ldr	r2, [r7, #16]
10006f14:	fa22 f303 	lsr.w	r3, r2, r3
10006f18:	2b00      	cmp	r3, #0
10006f1a:	d005      	beq.n	10006f28 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
10006f1c:	687b      	ldr	r3, [r7, #4]
10006f1e:	68db      	ldr	r3, [r3, #12]
10006f20:	2201      	movs	r2, #1
10006f22:	fa02 f303 	lsl.w	r3, r2, r3
10006f26:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10006f28:	2300      	movs	r3, #0
10006f2a:	617b      	str	r3, [r7, #20]
10006f2c:	e013      	b.n	10006f56 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
10006f2e:	687b      	ldr	r3, [r7, #4]
10006f30:	685a      	ldr	r2, [r3, #4]
10006f32:	697b      	ldr	r3, [r7, #20]
10006f34:	009b      	lsls	r3, r3, #2
10006f36:	4413      	add	r3, r2
10006f38:	6819      	ldr	r1, [r3, #0]
10006f3a:	687b      	ldr	r3, [r7, #4]
10006f3c:	695b      	ldr	r3, [r3, #20]
10006f3e:	693a      	ldr	r2, [r7, #16]
10006f40:	68f8      	ldr	r0, [r7, #12]
10006f42:	f001 fd05 	bl	10008950 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
10006f46:	693b      	ldr	r3, [r7, #16]
10006f48:	009b      	lsls	r3, r3, #2
10006f4a:	68fa      	ldr	r2, [r7, #12]
10006f4c:	4413      	add	r3, r2
10006f4e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10006f50:	697b      	ldr	r3, [r7, #20]
10006f52:	3301      	adds	r3, #1
10006f54:	617b      	str	r3, [r7, #20]
10006f56:	687b      	ldr	r3, [r7, #4]
10006f58:	689a      	ldr	r2, [r3, #8]
10006f5a:	687b      	ldr	r3, [r7, #4]
10006f5c:	68db      	ldr	r3, [r3, #12]
10006f5e:	fa22 f303 	lsr.w	r3, r2, r3
10006f62:	697a      	ldr	r2, [r7, #20]
10006f64:	429a      	cmp	r2, r3
10006f66:	d9e2      	bls.n	10006f2e <metal_sys_io_mem_map+0x3a>
		}
	}
}
10006f68:	bf00      	nop
10006f6a:	3718      	adds	r7, #24
10006f6c:	46bd      	mov	sp, r7
10006f6e:	bd80      	pop	{r7, pc}

10006f70 <metal_list_init>:
{
10006f70:	b480      	push	{r7}
10006f72:	b083      	sub	sp, #12
10006f74:	af00      	add	r7, sp, #0
10006f76:	6078      	str	r0, [r7, #4]
	list->prev = list;
10006f78:	687b      	ldr	r3, [r7, #4]
10006f7a:	687a      	ldr	r2, [r7, #4]
10006f7c:	605a      	str	r2, [r3, #4]
	list->next = list;
10006f7e:	687b      	ldr	r3, [r7, #4]
10006f80:	687a      	ldr	r2, [r7, #4]
10006f82:	601a      	str	r2, [r3, #0]
}
10006f84:	bf00      	nop
10006f86:	370c      	adds	r7, #12
10006f88:	46bd      	mov	sp, r7
10006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
10006f8e:	4770      	bx	lr

10006f90 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
10006f90:	b580      	push	{r7, lr}
10006f92:	b084      	sub	sp, #16
10006f94:	af00      	add	r7, sp, #0
10006f96:	6078      	str	r0, [r7, #4]
	int error = 0;
10006f98:	2300      	movs	r3, #0
10006f9a:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
10006f9c:	2220      	movs	r2, #32
10006f9e:	2100      	movs	r1, #0
10006fa0:	4810      	ldr	r0, [pc, #64]	@ (10006fe4 <metal_init+0x54>)
10006fa2:	f002 fd47 	bl	10009a34 <memset>

	_metal.common.log_handler   = params->log_handler;
10006fa6:	687b      	ldr	r3, [r7, #4]
10006fa8:	681b      	ldr	r3, [r3, #0]
10006faa:	4a0e      	ldr	r2, [pc, #56]	@ (10006fe4 <metal_init+0x54>)
10006fac:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
10006fae:	687b      	ldr	r3, [r7, #4]
10006fb0:	791a      	ldrb	r2, [r3, #4]
10006fb2:	4b0c      	ldr	r3, [pc, #48]	@ (10006fe4 <metal_init+0x54>)
10006fb4:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
10006fb6:	480c      	ldr	r0, [pc, #48]	@ (10006fe8 <metal_init+0x58>)
10006fb8:	f7ff ffda 	bl	10006f70 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
10006fbc:	480b      	ldr	r0, [pc, #44]	@ (10006fec <metal_init+0x5c>)
10006fbe:	f7ff ffd7 	bl	10006f70 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
10006fc2:	480b      	ldr	r0, [pc, #44]	@ (10006ff0 <metal_init+0x60>)
10006fc4:	f7ff ffd4 	bl	10006f70 <metal_list_init>

	error = metal_sys_init(params);
10006fc8:	6878      	ldr	r0, [r7, #4]
10006fca:	f7ff ff85 	bl	10006ed8 <metal_sys_init>
10006fce:	60f8      	str	r0, [r7, #12]
	if (error)
10006fd0:	68fb      	ldr	r3, [r7, #12]
10006fd2:	2b00      	cmp	r3, #0
10006fd4:	d001      	beq.n	10006fda <metal_init+0x4a>
		return error;
10006fd6:	68fb      	ldr	r3, [r7, #12]
10006fd8:	e000      	b.n	10006fdc <metal_init+0x4c>

	return error;
10006fda:	68fb      	ldr	r3, [r7, #12]
}
10006fdc:	4618      	mov	r0, r3
10006fde:	3710      	adds	r7, #16
10006fe0:	46bd      	mov	sp, r7
10006fe2:	bd80      	pop	{r7, pc}
10006fe4:	10020448 	.word	0x10020448
10006fe8:	10020450 	.word	0x10020450
10006fec:	10020458 	.word	0x10020458
10006ff0:	10020460 	.word	0x10020460

10006ff4 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
10006ff4:	b480      	push	{r7}
10006ff6:	b083      	sub	sp, #12
10006ff8:	af00      	add	r7, sp, #0
10006ffa:	6078      	str	r0, [r7, #4]
10006ffc:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10006ffe:	687b      	ldr	r3, [r7, #4]
10007000:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
10007002:	f1b3 3fff 	cmp.w	r3, #4294967295
10007006:	d00a      	beq.n	1000701e <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007008:	687b      	ldr	r3, [r7, #4]
1000700a:	689b      	ldr	r3, [r3, #8]
1000700c:	683a      	ldr	r2, [r7, #0]
1000700e:	429a      	cmp	r2, r3
10007010:	d205      	bcs.n	1000701e <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10007012:	687b      	ldr	r3, [r7, #4]
10007014:	681b      	ldr	r3, [r3, #0]
10007016:	461a      	mov	r2, r3
10007018:	683b      	ldr	r3, [r7, #0]
1000701a:	4413      	add	r3, r2
		: NULL);
1000701c:	e000      	b.n	10007020 <metal_io_virt+0x2c>
1000701e:	2300      	movs	r3, #0
}
10007020:	4618      	mov	r0, r3
10007022:	370c      	adds	r7, #12
10007024:	46bd      	mov	sp, r7
10007026:	f85d 7b04 	ldr.w	r7, [sp], #4
1000702a:	4770      	bx	lr

1000702c <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
1000702c:	b5b0      	push	{r4, r5, r7, lr}
1000702e:	b08c      	sub	sp, #48	@ 0x30
10007030:	af00      	add	r7, sp, #0
10007032:	60f8      	str	r0, [r7, #12]
10007034:	60b9      	str	r1, [r7, #8]
10007036:	607a      	str	r2, [r7, #4]
10007038:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000703a:	f107 0310 	add.w	r3, r7, #16
1000703e:	2220      	movs	r2, #32
10007040:	2100      	movs	r1, #0
10007042:	4618      	mov	r0, r3
10007044:	f002 fcf6 	bl	10009a34 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
10007048:	68fb      	ldr	r3, [r7, #12]
1000704a:	68ba      	ldr	r2, [r7, #8]
1000704c:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
1000704e:	68fb      	ldr	r3, [r7, #12]
10007050:	687a      	ldr	r2, [r7, #4]
10007052:	605a      	str	r2, [r3, #4]
	io->size = size;
10007054:	68fb      	ldr	r3, [r7, #12]
10007056:	683a      	ldr	r2, [r7, #0]
10007058:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
1000705a:	68fb      	ldr	r3, [r7, #12]
1000705c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000705e:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
10007060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10007062:	2b1f      	cmp	r3, #31
10007064:	d904      	bls.n	10007070 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
10007066:	68fb      	ldr	r3, [r7, #12]
10007068:	f04f 32ff 	mov.w	r2, #4294967295
1000706c:	611a      	str	r2, [r3, #16]
1000706e:	e006      	b.n	1000707e <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
10007070:	2201      	movs	r2, #1
10007072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10007074:	fa02 f303 	lsl.w	r3, r2, r3
10007078:	1e5a      	subs	r2, r3, #1
1000707a:	68fb      	ldr	r3, [r7, #12]
1000707c:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
1000707e:	68fb      	ldr	r3, [r7, #12]
10007080:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10007082:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
10007084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10007086:	2b00      	cmp	r3, #0
10007088:	d00b      	beq.n	100070a2 <metal_io_init+0x76>
1000708a:	68fb      	ldr	r3, [r7, #12]
1000708c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1000708e:	f103 0418 	add.w	r4, r3, #24
10007092:	4615      	mov	r5, r2
10007094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10007096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10007098:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000709c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
100070a0:	e00a      	b.n	100070b8 <metal_io_init+0x8c>
100070a2:	68fb      	ldr	r3, [r7, #12]
100070a4:	f103 0418 	add.w	r4, r3, #24
100070a8:	f107 0510 	add.w	r5, r7, #16
100070ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
100070ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
100070b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
100070b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
100070b8:	68f8      	ldr	r0, [r7, #12]
100070ba:	f7ff ff1b 	bl	10006ef4 <metal_sys_io_mem_map>
}
100070be:	bf00      	nop
100070c0:	3730      	adds	r7, #48	@ 0x30
100070c2:	46bd      	mov	sp, r7
100070c4:	bdb0      	pop	{r4, r5, r7, pc}

100070c6 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
100070c6:	b590      	push	{r4, r7, lr}
100070c8:	b08b      	sub	sp, #44	@ 0x2c
100070ca:	af02      	add	r7, sp, #8
100070cc:	60f8      	str	r0, [r7, #12]
100070ce:	60b9      	str	r1, [r7, #8]
100070d0:	607a      	str	r2, [r7, #4]
100070d2:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
100070d4:	68b9      	ldr	r1, [r7, #8]
100070d6:	68f8      	ldr	r0, [r7, #12]
100070d8:	f7ff ff8c 	bl	10006ff4 <metal_io_virt>
100070dc:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
100070de:	687b      	ldr	r3, [r7, #4]
100070e0:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
100070e2:	69fb      	ldr	r3, [r7, #28]
100070e4:	2b00      	cmp	r3, #0
100070e6:	d102      	bne.n	100070ee <metal_io_block_read+0x28>
		return -ERANGE;
100070e8:	f06f 0321 	mvn.w	r3, #33	@ 0x21
100070ec:	e05c      	b.n	100071a8 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
100070ee:	683a      	ldr	r2, [r7, #0]
100070f0:	68bb      	ldr	r3, [r7, #8]
100070f2:	441a      	add	r2, r3
100070f4:	68fb      	ldr	r3, [r7, #12]
100070f6:	689b      	ldr	r3, [r3, #8]
100070f8:	429a      	cmp	r2, r3
100070fa:	d904      	bls.n	10007106 <metal_io_block_read+0x40>
		len = io->size - offset;
100070fc:	68fb      	ldr	r3, [r7, #12]
100070fe:	689a      	ldr	r2, [r3, #8]
10007100:	68bb      	ldr	r3, [r7, #8]
10007102:	1ad3      	subs	r3, r2, r3
10007104:	603b      	str	r3, [r7, #0]
	retlen = len;
10007106:	683b      	ldr	r3, [r7, #0]
10007108:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000710a:	68fb      	ldr	r3, [r7, #12]
1000710c:	6a1b      	ldr	r3, [r3, #32]
1000710e:	2b00      	cmp	r3, #0
10007110:	d00a      	beq.n	10007128 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
10007112:	68fb      	ldr	r3, [r7, #12]
10007114:	6a1c      	ldr	r4, [r3, #32]
10007116:	683b      	ldr	r3, [r7, #0]
10007118:	9300      	str	r3, [sp, #0]
1000711a:	2305      	movs	r3, #5
1000711c:	687a      	ldr	r2, [r7, #4]
1000711e:	68b9      	ldr	r1, [r7, #8]
10007120:	68f8      	ldr	r0, [r7, #12]
10007122:	47a0      	blx	r4
10007124:	6178      	str	r0, [r7, #20]
10007126:	e03e      	b.n	100071a6 <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
10007128:	f3bf 8f5b 	dmb	ish
		while ( len && (
1000712c:	e00c      	b.n	10007148 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000712e:	69fb      	ldr	r3, [r7, #28]
10007130:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
10007132:	69bb      	ldr	r3, [r7, #24]
10007134:	701a      	strb	r2, [r3, #0]
			dest++;
10007136:	69bb      	ldr	r3, [r7, #24]
10007138:	3301      	adds	r3, #1
1000713a:	61bb      	str	r3, [r7, #24]
			ptr++;
1000713c:	69fb      	ldr	r3, [r7, #28]
1000713e:	3301      	adds	r3, #1
10007140:	61fb      	str	r3, [r7, #28]
			len--;
10007142:	683b      	ldr	r3, [r7, #0]
10007144:	3b01      	subs	r3, #1
10007146:	603b      	str	r3, [r7, #0]
		while ( len && (
10007148:	683b      	ldr	r3, [r7, #0]
1000714a:	2b00      	cmp	r3, #0
1000714c:	d017      	beq.n	1000717e <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000714e:	69bb      	ldr	r3, [r7, #24]
10007150:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10007154:	2b00      	cmp	r3, #0
10007156:	d1ea      	bne.n	1000712e <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
10007158:	69fb      	ldr	r3, [r7, #28]
1000715a:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000715e:	2b00      	cmp	r3, #0
10007160:	d1e5      	bne.n	1000712e <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10007162:	e00c      	b.n	1000717e <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
10007164:	69fb      	ldr	r3, [r7, #28]
10007166:	681a      	ldr	r2, [r3, #0]
10007168:	69bb      	ldr	r3, [r7, #24]
1000716a:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000716c:	69bb      	ldr	r3, [r7, #24]
1000716e:	3304      	adds	r3, #4
10007170:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
10007172:	69fb      	ldr	r3, [r7, #28]
10007174:	3304      	adds	r3, #4
10007176:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
10007178:	683b      	ldr	r3, [r7, #0]
1000717a:	3b04      	subs	r3, #4
1000717c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000717e:	683b      	ldr	r3, [r7, #0]
10007180:	2b03      	cmp	r3, #3
10007182:	dcef      	bgt.n	10007164 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
10007184:	e00c      	b.n	100071a0 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10007186:	69fb      	ldr	r3, [r7, #28]
10007188:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000718a:	69bb      	ldr	r3, [r7, #24]
1000718c:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000718e:	69bb      	ldr	r3, [r7, #24]
10007190:	3301      	adds	r3, #1
10007192:	61bb      	str	r3, [r7, #24]
10007194:	69fb      	ldr	r3, [r7, #28]
10007196:	3301      	adds	r3, #1
10007198:	61fb      	str	r3, [r7, #28]
1000719a:	683b      	ldr	r3, [r7, #0]
1000719c:	3b01      	subs	r3, #1
1000719e:	603b      	str	r3, [r7, #0]
100071a0:	683b      	ldr	r3, [r7, #0]
100071a2:	2b00      	cmp	r3, #0
100071a4:	d1ef      	bne.n	10007186 <metal_io_block_read+0xc0>
	}
	return retlen;
100071a6:	697b      	ldr	r3, [r7, #20]
}
100071a8:	4618      	mov	r0, r3
100071aa:	3724      	adds	r7, #36	@ 0x24
100071ac:	46bd      	mov	sp, r7
100071ae:	bd90      	pop	{r4, r7, pc}

100071b0 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
100071b0:	b590      	push	{r4, r7, lr}
100071b2:	b08b      	sub	sp, #44	@ 0x2c
100071b4:	af02      	add	r7, sp, #8
100071b6:	60f8      	str	r0, [r7, #12]
100071b8:	60b9      	str	r1, [r7, #8]
100071ba:	607a      	str	r2, [r7, #4]
100071bc:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
100071be:	68b9      	ldr	r1, [r7, #8]
100071c0:	68f8      	ldr	r0, [r7, #12]
100071c2:	f7ff ff17 	bl	10006ff4 <metal_io_virt>
100071c6:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
100071c8:	687b      	ldr	r3, [r7, #4]
100071ca:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
100071cc:	69fb      	ldr	r3, [r7, #28]
100071ce:	2b00      	cmp	r3, #0
100071d0:	d102      	bne.n	100071d8 <metal_io_block_write+0x28>
		return -ERANGE;
100071d2:	f06f 0321 	mvn.w	r3, #33	@ 0x21
100071d6:	e05b      	b.n	10007290 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
100071d8:	683a      	ldr	r2, [r7, #0]
100071da:	68bb      	ldr	r3, [r7, #8]
100071dc:	441a      	add	r2, r3
100071de:	68fb      	ldr	r3, [r7, #12]
100071e0:	689b      	ldr	r3, [r3, #8]
100071e2:	429a      	cmp	r2, r3
100071e4:	d904      	bls.n	100071f0 <metal_io_block_write+0x40>
		len = io->size - offset;
100071e6:	68fb      	ldr	r3, [r7, #12]
100071e8:	689a      	ldr	r2, [r3, #8]
100071ea:	68bb      	ldr	r3, [r7, #8]
100071ec:	1ad3      	subs	r3, r2, r3
100071ee:	603b      	str	r3, [r7, #0]
	retlen = len;
100071f0:	683b      	ldr	r3, [r7, #0]
100071f2:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
100071f4:	68fb      	ldr	r3, [r7, #12]
100071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100071f8:	2b00      	cmp	r3, #0
100071fa:	d017      	beq.n	1000722c <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
100071fc:	68fb      	ldr	r3, [r7, #12]
100071fe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
10007200:	683b      	ldr	r3, [r7, #0]
10007202:	9300      	str	r3, [sp, #0]
10007204:	2305      	movs	r3, #5
10007206:	687a      	ldr	r2, [r7, #4]
10007208:	68b9      	ldr	r1, [r7, #8]
1000720a:	68f8      	ldr	r0, [r7, #12]
1000720c:	47a0      	blx	r4
1000720e:	6178      	str	r0, [r7, #20]
10007210:	e03d      	b.n	1000728e <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
10007212:	69bb      	ldr	r3, [r7, #24]
10007214:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
10007216:	69fb      	ldr	r3, [r7, #28]
10007218:	701a      	strb	r2, [r3, #0]
			ptr++;
1000721a:	69fb      	ldr	r3, [r7, #28]
1000721c:	3301      	adds	r3, #1
1000721e:	61fb      	str	r3, [r7, #28]
			source++;
10007220:	69bb      	ldr	r3, [r7, #24]
10007222:	3301      	adds	r3, #1
10007224:	61bb      	str	r3, [r7, #24]
			len--;
10007226:	683b      	ldr	r3, [r7, #0]
10007228:	3b01      	subs	r3, #1
1000722a:	603b      	str	r3, [r7, #0]
		while ( len && (
1000722c:	683b      	ldr	r3, [r7, #0]
1000722e:	2b00      	cmp	r3, #0
10007230:	d017      	beq.n	10007262 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
10007232:	69fb      	ldr	r3, [r7, #28]
10007234:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10007238:	2b00      	cmp	r3, #0
1000723a:	d1ea      	bne.n	10007212 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000723c:	69bb      	ldr	r3, [r7, #24]
1000723e:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
10007242:	2b00      	cmp	r3, #0
10007244:	d1e5      	bne.n	10007212 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10007246:	e00c      	b.n	10007262 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
10007248:	69bb      	ldr	r3, [r7, #24]
1000724a:	681a      	ldr	r2, [r3, #0]
1000724c:	69fb      	ldr	r3, [r7, #28]
1000724e:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10007250:	69fb      	ldr	r3, [r7, #28]
10007252:	3304      	adds	r3, #4
10007254:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
10007256:	69bb      	ldr	r3, [r7, #24]
10007258:	3304      	adds	r3, #4
1000725a:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000725c:	683b      	ldr	r3, [r7, #0]
1000725e:	3b04      	subs	r3, #4
10007260:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10007262:	683b      	ldr	r3, [r7, #0]
10007264:	2b03      	cmp	r3, #3
10007266:	dcef      	bgt.n	10007248 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
10007268:	e00c      	b.n	10007284 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000726a:	69bb      	ldr	r3, [r7, #24]
1000726c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000726e:	69fb      	ldr	r3, [r7, #28]
10007270:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
10007272:	69fb      	ldr	r3, [r7, #28]
10007274:	3301      	adds	r3, #1
10007276:	61fb      	str	r3, [r7, #28]
10007278:	69bb      	ldr	r3, [r7, #24]
1000727a:	3301      	adds	r3, #1
1000727c:	61bb      	str	r3, [r7, #24]
1000727e:	683b      	ldr	r3, [r7, #0]
10007280:	3b01      	subs	r3, #1
10007282:	603b      	str	r3, [r7, #0]
10007284:	683b      	ldr	r3, [r7, #0]
10007286:	2b00      	cmp	r3, #0
10007288:	d1ef      	bne.n	1000726a <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
1000728a:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000728e:	697b      	ldr	r3, [r7, #20]
}
10007290:	4618      	mov	r0, r3
10007292:	3724      	adds	r7, #36	@ 0x24
10007294:	46bd      	mov	sp, r7
10007296:	bd90      	pop	{r4, r7, pc}

10007298 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
10007298:	b40e      	push	{r1, r2, r3}
1000729a:	b480      	push	{r7}
1000729c:	b082      	sub	sp, #8
1000729e:	af00      	add	r7, sp, #0
100072a0:	4603      	mov	r3, r0
100072a2:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
100072a4:	bf00      	nop
100072a6:	3708      	adds	r7, #8
100072a8:	46bd      	mov	sp, r7
100072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100072ae:	b003      	add	sp, #12
100072b0:	4770      	bx	lr

100072b2 <metal_io_virt>:
{
100072b2:	b480      	push	{r7}
100072b4:	b083      	sub	sp, #12
100072b6:	af00      	add	r7, sp, #0
100072b8:	6078      	str	r0, [r7, #4]
100072ba:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
100072bc:	687b      	ldr	r3, [r7, #4]
100072be:	681b      	ldr	r3, [r3, #0]
		: NULL);
100072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
100072c4:	d00a      	beq.n	100072dc <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
100072c6:	687b      	ldr	r3, [r7, #4]
100072c8:	689b      	ldr	r3, [r3, #8]
100072ca:	683a      	ldr	r2, [r7, #0]
100072cc:	429a      	cmp	r2, r3
100072ce:	d205      	bcs.n	100072dc <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
100072d0:	687b      	ldr	r3, [r7, #4]
100072d2:	681b      	ldr	r3, [r3, #0]
100072d4:	461a      	mov	r2, r3
100072d6:	683b      	ldr	r3, [r7, #0]
100072d8:	4413      	add	r3, r2
		: NULL);
100072da:	e000      	b.n	100072de <metal_io_virt+0x2c>
100072dc:	2300      	movs	r3, #0
}
100072de:	4618      	mov	r0, r3
100072e0:	370c      	adds	r7, #12
100072e2:	46bd      	mov	sp, r7
100072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
100072e8:	4770      	bx	lr

100072ea <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
100072ea:	b480      	push	{r7}
100072ec:	b085      	sub	sp, #20
100072ee:	af00      	add	r7, sp, #0
100072f0:	6078      	str	r0, [r7, #4]
100072f2:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
100072f4:	683b      	ldr	r3, [r7, #0]
100072f6:	687a      	ldr	r2, [r7, #4]
100072f8:	6812      	ldr	r2, [r2, #0]
100072fa:	1a9b      	subs	r3, r3, r2
100072fc:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
100072fe:	687b      	ldr	r3, [r7, #4]
10007300:	689b      	ldr	r3, [r3, #8]
10007302:	68fa      	ldr	r2, [r7, #12]
10007304:	429a      	cmp	r2, r3
10007306:	d201      	bcs.n	1000730c <metal_io_virt_to_offset+0x22>
10007308:	68fb      	ldr	r3, [r7, #12]
1000730a:	e001      	b.n	10007310 <metal_io_virt_to_offset+0x26>
1000730c:	f04f 33ff 	mov.w	r3, #4294967295
}
10007310:	4618      	mov	r0, r3
10007312:	3714      	adds	r7, #20
10007314:	46bd      	mov	sp, r7
10007316:	f85d 7b04 	ldr.w	r7, [sp], #4
1000731a:	4770      	bx	lr

1000731c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
1000731c:	b5b0      	push	{r4, r5, r7, lr}
1000731e:	b08c      	sub	sp, #48	@ 0x30
10007320:	af00      	add	r7, sp, #0
10007322:	60f8      	str	r0, [r7, #12]
10007324:	60b9      	str	r1, [r7, #8]
10007326:	603b      	str	r3, [r7, #0]
10007328:	4613      	mov	r3, r2
1000732a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
1000732c:	68b9      	ldr	r1, [r7, #8]
1000732e:	68f8      	ldr	r0, [r7, #12]
10007330:	f7ff ffbf 	bl	100072b2 <metal_io_virt>
10007334:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
10007336:	68fb      	ldr	r3, [r7, #12]
10007338:	699b      	ldr	r3, [r3, #24]
1000733a:	2b00      	cmp	r3, #0
1000733c:	d009      	beq.n	10007352 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000733e:	68fb      	ldr	r3, [r7, #12]
10007340:	699c      	ldr	r4, [r3, #24]
10007342:	79fa      	ldrb	r2, [r7, #7]
10007344:	683b      	ldr	r3, [r7, #0]
10007346:	68b9      	ldr	r1, [r7, #8]
10007348:	68f8      	ldr	r0, [r7, #12]
1000734a:	47a0      	blx	r4
1000734c:	4604      	mov	r4, r0
1000734e:	460d      	mov	r5, r1
10007350:	e059      	b.n	10007406 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
10007352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007354:	2b00      	cmp	r3, #0
10007356:	d012      	beq.n	1000737e <metal_io_read+0x62>
10007358:	683b      	ldr	r3, [r7, #0]
1000735a:	2b01      	cmp	r3, #1
1000735c:	d10f      	bne.n	1000737e <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000735e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007360:	62bb      	str	r3, [r7, #40]	@ 0x28
10007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007364:	f3bf 8f5b 	dmb	ish
10007368:	781b      	ldrb	r3, [r3, #0]
1000736a:	f3bf 8f5b 	dmb	ish
1000736e:	b2db      	uxtb	r3, r3
10007370:	76fb      	strb	r3, [r7, #27]
10007372:	7efb      	ldrb	r3, [r7, #27]
10007374:	b2db      	uxtb	r3, r3
10007376:	2200      	movs	r2, #0
10007378:	461c      	mov	r4, r3
1000737a:	4615      	mov	r5, r2
1000737c:	e043      	b.n	10007406 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
1000737e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007380:	2b00      	cmp	r3, #0
10007382:	d012      	beq.n	100073aa <metal_io_read+0x8e>
10007384:	683b      	ldr	r3, [r7, #0]
10007386:	2b02      	cmp	r3, #2
10007388:	d10f      	bne.n	100073aa <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
1000738a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000738c:	627b      	str	r3, [r7, #36]	@ 0x24
1000738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007390:	f3bf 8f5b 	dmb	ish
10007394:	881b      	ldrh	r3, [r3, #0]
10007396:	f3bf 8f5b 	dmb	ish
1000739a:	b29b      	uxth	r3, r3
1000739c:	833b      	strh	r3, [r7, #24]
1000739e:	8b3b      	ldrh	r3, [r7, #24]
100073a0:	b29b      	uxth	r3, r3
100073a2:	2200      	movs	r2, #0
100073a4:	461c      	mov	r4, r3
100073a6:	4615      	mov	r5, r2
100073a8:	e02d      	b.n	10007406 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
100073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100073ac:	2b00      	cmp	r3, #0
100073ae:	d010      	beq.n	100073d2 <metal_io_read+0xb6>
100073b0:	683b      	ldr	r3, [r7, #0]
100073b2:	2b04      	cmp	r3, #4
100073b4:	d10d      	bne.n	100073d2 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
100073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100073b8:	623b      	str	r3, [r7, #32]
100073ba:	6a3b      	ldr	r3, [r7, #32]
100073bc:	f3bf 8f5b 	dmb	ish
100073c0:	681b      	ldr	r3, [r3, #0]
100073c2:	f3bf 8f5b 	dmb	ish
100073c6:	617b      	str	r3, [r7, #20]
100073c8:	697b      	ldr	r3, [r7, #20]
100073ca:	2200      	movs	r2, #0
100073cc:	461c      	mov	r4, r3
100073ce:	4615      	mov	r5, r2
100073d0:	e019      	b.n	10007406 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
100073d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100073d4:	2b00      	cmp	r3, #0
100073d6:	d010      	beq.n	100073fa <metal_io_read+0xde>
100073d8:	683b      	ldr	r3, [r7, #0]
100073da:	2b04      	cmp	r3, #4
100073dc:	d10d      	bne.n	100073fa <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
100073de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100073e0:	61fb      	str	r3, [r7, #28]
100073e2:	69fb      	ldr	r3, [r7, #28]
100073e4:	f3bf 8f5b 	dmb	ish
100073e8:	681b      	ldr	r3, [r3, #0]
100073ea:	f3bf 8f5b 	dmb	ish
100073ee:	613b      	str	r3, [r7, #16]
100073f0:	693b      	ldr	r3, [r7, #16]
100073f2:	2200      	movs	r2, #0
100073f4:	461c      	mov	r4, r3
100073f6:	4615      	mov	r5, r2
100073f8:	e005      	b.n	10007406 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
100073fa:	4b06      	ldr	r3, [pc, #24]	@ (10007414 <metal_io_read+0xf8>)
100073fc:	4a06      	ldr	r2, [pc, #24]	@ (10007418 <metal_io_read+0xfc>)
100073fe:	21fe      	movs	r1, #254	@ 0xfe
10007400:	4806      	ldr	r0, [pc, #24]	@ (1000741c <metal_io_read+0x100>)
10007402:	f002 f85f 	bl	100094c4 <__assert_func>
	return 0; /* quiet compiler */
}
10007406:	4622      	mov	r2, r4
10007408:	462b      	mov	r3, r5
1000740a:	4610      	mov	r0, r2
1000740c:	4619      	mov	r1, r3
1000740e:	3730      	adds	r7, #48	@ 0x30
10007410:	46bd      	mov	sp, r7
10007412:	bdb0      	pop	{r4, r5, r7, pc}
10007414:	1000aff4 	.word	0x1000aff4
10007418:	1000b224 	.word	0x1000b224
1000741c:	1000aff8 	.word	0x1000aff8

10007420 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
10007420:	b580      	push	{r7, lr}
10007422:	b082      	sub	sp, #8
10007424:	af00      	add	r7, sp, #0
10007426:	6078      	str	r0, [r7, #4]
	return malloc(size);
10007428:	6878      	ldr	r0, [r7, #4]
1000742a:	f002 f86d 	bl	10009508 <malloc>
1000742e:	4603      	mov	r3, r0
}
10007430:	4618      	mov	r0, r3
10007432:	3708      	adds	r7, #8
10007434:	46bd      	mov	sp, r7
10007436:	bd80      	pop	{r7, pc}

10007438 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
10007438:	b580      	push	{r7, lr}
1000743a:	b082      	sub	sp, #8
1000743c:	af00      	add	r7, sp, #0
1000743e:	6078      	str	r0, [r7, #4]
	free(ptr);
10007440:	6878      	ldr	r0, [r7, #4]
10007442:	f002 f869 	bl	10009518 <free>
}
10007446:	bf00      	nop
10007448:	3708      	adds	r7, #8
1000744a:	46bd      	mov	sp, r7
1000744c:	bd80      	pop	{r7, pc}

1000744e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000744e:	b580      	push	{r7, lr}
10007450:	b084      	sub	sp, #16
10007452:	af00      	add	r7, sp, #0
10007454:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
10007456:	687b      	ldr	r3, [r7, #4]
10007458:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000745a:	3334      	adds	r3, #52	@ 0x34
1000745c:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000745e:	68f8      	ldr	r0, [r7, #12]
10007460:	f7ff ffde 	bl	10007420 <metal_allocate_memory>
10007464:	60b8      	str	r0, [r7, #8]
	if (vqs) {
10007466:	68bb      	ldr	r3, [r7, #8]
10007468:	2b00      	cmp	r3, #0
1000746a:	d004      	beq.n	10007476 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
1000746c:	68fa      	ldr	r2, [r7, #12]
1000746e:	2100      	movs	r1, #0
10007470:	68b8      	ldr	r0, [r7, #8]
10007472:	f002 fadf 	bl	10009a34 <memset>
	}

	return vqs;
10007476:	68bb      	ldr	r3, [r7, #8]
}
10007478:	4618      	mov	r0, r3
1000747a:	3710      	adds	r7, #16
1000747c:	46bd      	mov	sp, r7
1000747e:	bd80      	pop	{r7, pc}

10007480 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
10007480:	b580      	push	{r7, lr}
10007482:	b086      	sub	sp, #24
10007484:	af00      	add	r7, sp, #0
10007486:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
10007488:	687b      	ldr	r3, [r7, #4]
1000748a:	891b      	ldrh	r3, [r3, #8]
1000748c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
1000748e:	687b      	ldr	r3, [r7, #4]
10007490:	681b      	ldr	r3, [r3, #0]
10007492:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007494:	693b      	ldr	r3, [r7, #16]
10007496:	3b10      	subs	r3, #16
10007498:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
1000749a:	693b      	ldr	r3, [r7, #16]
1000749c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000749e:	697a      	ldr	r2, [r7, #20]
100074a0:	429a      	cmp	r2, r3
100074a2:	d305      	bcc.n	100074b0 <rproc_virtio_virtqueue_notify+0x30>
100074a4:	4b0d      	ldr	r3, [pc, #52]	@ (100074dc <rproc_virtio_virtqueue_notify+0x5c>)
100074a6:	4a0e      	ldr	r2, [pc, #56]	@ (100074e0 <rproc_virtio_virtqueue_notify+0x60>)
100074a8:	211c      	movs	r1, #28
100074aa:	480e      	ldr	r0, [pc, #56]	@ (100074e4 <rproc_virtio_virtqueue_notify+0x64>)
100074ac:	f002 f80a 	bl	100094c4 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
100074b0:	693b      	ldr	r3, [r7, #16]
100074b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100074b4:	697a      	ldr	r2, [r7, #20]
100074b6:	4613      	mov	r3, r2
100074b8:	005b      	lsls	r3, r3, #1
100074ba:	4413      	add	r3, r2
100074bc:	00db      	lsls	r3, r3, #3
100074be:	440b      	add	r3, r1
100074c0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
100074c2:	68fb      	ldr	r3, [r7, #12]
100074c4:	68db      	ldr	r3, [r3, #12]
100074c6:	68fa      	ldr	r2, [r7, #12]
100074c8:	6810      	ldr	r0, [r2, #0]
100074ca:	68ba      	ldr	r2, [r7, #8]
100074cc:	6912      	ldr	r2, [r2, #16]
100074ce:	4611      	mov	r1, r2
100074d0:	4798      	blx	r3
}
100074d2:	bf00      	nop
100074d4:	3718      	adds	r7, #24
100074d6:	46bd      	mov	sp, r7
100074d8:	bd80      	pop	{r7, pc}
100074da:	bf00      	nop
100074dc:	1000b040 	.word	0x1000b040
100074e0:	1000b204 	.word	0x1000b204
100074e4:	1000b05c 	.word	0x1000b05c

100074e8 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
100074e8:	b580      	push	{r7, lr}
100074ea:	b086      	sub	sp, #24
100074ec:	af00      	add	r7, sp, #0
100074ee:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100074f0:	687b      	ldr	r3, [r7, #4]
100074f2:	3b10      	subs	r3, #16
100074f4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
100074f6:	697b      	ldr	r3, [r7, #20]
100074f8:	685b      	ldr	r3, [r3, #4]
100074fa:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
100074fc:	697b      	ldr	r3, [r7, #20]
100074fe:	689b      	ldr	r3, [r3, #8]
10007500:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
10007502:	693b      	ldr	r3, [r7, #16]
10007504:	3318      	adds	r3, #24
10007506:	4619      	mov	r1, r3
10007508:	68f8      	ldr	r0, [r7, #12]
1000750a:	f7ff feee 	bl	100072ea <metal_io_virt_to_offset>
1000750e:	4601      	mov	r1, r0
10007510:	2301      	movs	r3, #1
10007512:	2205      	movs	r2, #5
10007514:	68f8      	ldr	r0, [r7, #12]
10007516:	f7ff ff01 	bl	1000731c <metal_io_read>
1000751a:	4602      	mov	r2, r0
1000751c:	460b      	mov	r3, r1
1000751e:	4613      	mov	r3, r2
10007520:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
10007522:	7afb      	ldrb	r3, [r7, #11]
}
10007524:	4618      	mov	r0, r3
10007526:	3718      	adds	r7, #24
10007528:	46bd      	mov	sp, r7
1000752a:	bd80      	pop	{r7, pc}

1000752c <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
1000752c:	b580      	push	{r7, lr}
1000752e:	b086      	sub	sp, #24
10007530:	af00      	add	r7, sp, #0
10007532:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007534:	687b      	ldr	r3, [r7, #4]
10007536:	3b10      	subs	r3, #16
10007538:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000753a:	697b      	ldr	r3, [r7, #20]
1000753c:	685b      	ldr	r3, [r3, #4]
1000753e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10007540:	697b      	ldr	r3, [r7, #20]
10007542:	689b      	ldr	r3, [r3, #8]
10007544:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
10007546:	693b      	ldr	r3, [r7, #16]
10007548:	330c      	adds	r3, #12
1000754a:	4619      	mov	r1, r3
1000754c:	68f8      	ldr	r0, [r7, #12]
1000754e:	f7ff fecc 	bl	100072ea <metal_io_virt_to_offset>
10007552:	4601      	mov	r1, r0
10007554:	2304      	movs	r3, #4
10007556:	2205      	movs	r2, #5
10007558:	68f8      	ldr	r0, [r7, #12]
1000755a:	f7ff fedf 	bl	1000731c <metal_io_read>
1000755e:	4602      	mov	r2, r0
10007560:	460b      	mov	r3, r1
10007562:	4613      	mov	r3, r2
10007564:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
10007566:	68bb      	ldr	r3, [r7, #8]
}
10007568:	4618      	mov	r0, r3
1000756a:	3718      	adds	r7, #24
1000756c:	46bd      	mov	sp, r7
1000756e:	bd80      	pop	{r7, pc}

10007570 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
10007570:	b580      	push	{r7, lr}
10007572:	b088      	sub	sp, #32
10007574:	af00      	add	r7, sp, #0
10007576:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007578:	687b      	ldr	r3, [r7, #4]
1000757a:	3b10      	subs	r3, #16
1000757c:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000757e:	69fb      	ldr	r3, [r7, #28]
10007580:	685b      	ldr	r3, [r3, #4]
10007582:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
10007584:	69fb      	ldr	r3, [r7, #28]
10007586:	689b      	ldr	r3, [r3, #8]
10007588:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
1000758a:	69bb      	ldr	r3, [r7, #24]
1000758c:	3310      	adds	r3, #16
1000758e:	4619      	mov	r1, r3
10007590:	6978      	ldr	r0, [r7, #20]
10007592:	f7ff feaa 	bl	100072ea <metal_io_virt_to_offset>
10007596:	4601      	mov	r1, r0
10007598:	2304      	movs	r3, #4
1000759a:	2205      	movs	r2, #5
1000759c:	6978      	ldr	r0, [r7, #20]
1000759e:	f7ff febd 	bl	1000731c <metal_io_read>
100075a2:	4602      	mov	r2, r0
100075a4:	460b      	mov	r3, r1
100075a6:	4613      	mov	r3, r2
100075a8:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
100075aa:	6878      	ldr	r0, [r7, #4]
100075ac:	f7ff ffbe 	bl	1000752c <rproc_virtio_get_dfeatures>
100075b0:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
100075b2:	68fa      	ldr	r2, [r7, #12]
100075b4:	693b      	ldr	r3, [r7, #16]
100075b6:	4013      	ands	r3, r2
}
100075b8:	4618      	mov	r0, r3
100075ba:	3720      	adds	r7, #32
100075bc:	46bd      	mov	sp, r7
100075be:	bd80      	pop	{r7, pc}

100075c0 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
100075c0:	b580      	push	{r7, lr}
100075c2:	b088      	sub	sp, #32
100075c4:	af00      	add	r7, sp, #0
100075c6:	60f8      	str	r0, [r7, #12]
100075c8:	60b9      	str	r1, [r7, #8]
100075ca:	607a      	str	r2, [r7, #4]
100075cc:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100075ce:	68fb      	ldr	r3, [r7, #12]
100075d0:	3b10      	subs	r3, #16
100075d2:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
100075d4:	69fb      	ldr	r3, [r7, #28]
100075d6:	685b      	ldr	r3, [r3, #4]
100075d8:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
100075da:	68fb      	ldr	r3, [r7, #12]
100075dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100075de:	4613      	mov	r3, r2
100075e0:	009b      	lsls	r3, r3, #2
100075e2:	4413      	add	r3, r2
100075e4:	009b      	lsls	r3, r3, #2
100075e6:	3318      	adds	r3, #24
100075e8:	69ba      	ldr	r2, [r7, #24]
100075ea:	4413      	add	r3, r2
100075ec:	3304      	adds	r3, #4
100075ee:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
100075f0:	69fb      	ldr	r3, [r7, #28]
100075f2:	689b      	ldr	r3, [r3, #8]
100075f4:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
100075f6:	683a      	ldr	r2, [r7, #0]
100075f8:	68bb      	ldr	r3, [r7, #8]
100075fa:	441a      	add	r2, r3
100075fc:	69bb      	ldr	r3, [r7, #24]
100075fe:	695b      	ldr	r3, [r3, #20]
10007600:	429a      	cmp	r2, r3
10007602:	d80c      	bhi.n	1000761e <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
10007604:	697a      	ldr	r2, [r7, #20]
10007606:	68bb      	ldr	r3, [r7, #8]
10007608:	4413      	add	r3, r2
		metal_io_block_read(io,
1000760a:	4619      	mov	r1, r3
1000760c:	6938      	ldr	r0, [r7, #16]
1000760e:	f7ff fe6c 	bl	100072ea <metal_io_virt_to_offset>
10007612:	4601      	mov	r1, r0
10007614:	683b      	ldr	r3, [r7, #0]
10007616:	687a      	ldr	r2, [r7, #4]
10007618:	6938      	ldr	r0, [r7, #16]
1000761a:	f7ff fd54 	bl	100070c6 <metal_io_block_read>
				dst, length);
}
1000761e:	bf00      	nop
10007620:	3720      	adds	r7, #32
10007622:	46bd      	mov	sp, r7
10007624:	bd80      	pop	{r7, pc}
	...

10007628 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
10007628:	b580      	push	{r7, lr}
1000762a:	b08e      	sub	sp, #56	@ 0x38
1000762c:	af00      	add	r7, sp, #0
1000762e:	60f8      	str	r0, [r7, #12]
10007630:	60b9      	str	r1, [r7, #8]
10007632:	607a      	str	r2, [r7, #4]
10007634:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
10007636:	687b      	ldr	r3, [r7, #4]
10007638:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000763c:	7e5b      	ldrb	r3, [r3, #25]
1000763e:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
10007640:	2048      	movs	r0, #72	@ 0x48
10007642:	f7ff feed 	bl	10007420 <metal_allocate_memory>
10007646:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
10007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000764a:	2b00      	cmp	r3, #0
1000764c:	d101      	bne.n	10007652 <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000764e:	2300      	movs	r3, #0
10007650:	e092      	b.n	10007778 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
10007652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10007654:	4613      	mov	r3, r2
10007656:	005b      	lsls	r3, r3, #1
10007658:	4413      	add	r3, r2
1000765a:	00db      	lsls	r3, r3, #3
1000765c:	4618      	mov	r0, r3
1000765e:	f7ff fedf 	bl	10007420 <metal_allocate_memory>
10007662:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
10007664:	6a3b      	ldr	r3, [r7, #32]
10007666:	2b00      	cmp	r3, #0
10007668:	f000 8081 	beq.w	1000776e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
1000766c:	2248      	movs	r2, #72	@ 0x48
1000766e:	2100      	movs	r1, #0
10007670:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10007672:	f002 f9df 	bl	10009a34 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
10007676:	2218      	movs	r2, #24
10007678:	2100      	movs	r1, #0
1000767a:	6a38      	ldr	r0, [r7, #32]
1000767c:	f002 f9da 	bl	10009a34 <memset>
	vdev = &rpvdev->vdev;
10007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007682:	3310      	adds	r3, #16
10007684:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
10007686:	2300      	movs	r3, #0
10007688:	637b      	str	r3, [r7, #52]	@ 0x34
1000768a:	e025      	b.n	100076d8 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
1000768c:	2300      	movs	r3, #0
1000768e:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
10007690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007692:	4613      	mov	r3, r2
10007694:	009b      	lsls	r3, r3, #2
10007696:	4413      	add	r3, r2
10007698:	009b      	lsls	r3, r3, #2
1000769a:	3318      	adds	r3, #24
1000769c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000769e:	4413      	add	r3, r2
100076a0:	3304      	adds	r3, #4
100076a2:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
100076a4:	68fb      	ldr	r3, [r7, #12]
100076a6:	2b00      	cmp	r3, #0
100076a8:	d102      	bne.n	100076b0 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
100076aa:	69bb      	ldr	r3, [r7, #24]
100076ac:	689b      	ldr	r3, [r3, #8]
100076ae:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
100076b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100076b2:	f7ff fecc 	bl	1000744e <virtqueue_allocate>
100076b6:	6178      	str	r0, [r7, #20]
		if (!vq)
100076b8:	697b      	ldr	r3, [r7, #20]
100076ba:	2b00      	cmp	r3, #0
100076bc:	d031      	beq.n	10007722 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
100076be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100076c0:	4613      	mov	r3, r2
100076c2:	005b      	lsls	r3, r3, #1
100076c4:	4413      	add	r3, r2
100076c6:	00db      	lsls	r3, r3, #3
100076c8:	461a      	mov	r2, r3
100076ca:	6a3b      	ldr	r3, [r7, #32]
100076cc:	4413      	add	r3, r2
100076ce:	697a      	ldr	r2, [r7, #20]
100076d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
100076d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100076d4:	3301      	adds	r3, #1
100076d6:	637b      	str	r3, [r7, #52]	@ 0x34
100076d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100076da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100076dc:	429a      	cmp	r2, r3
100076de:	d3d5      	bcc.n	1000768c <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
100076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100076e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
100076e4:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
100076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100076e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
100076ea:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
100076ec:	69fb      	ldr	r3, [r7, #28]
100076ee:	6a3a      	ldr	r2, [r7, #32]
100076f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
100076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100076f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100076f6:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
100076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100076fa:	683a      	ldr	r2, [r7, #0]
100076fc:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
100076fe:	69fb      	ldr	r3, [r7, #28]
10007700:	68ba      	ldr	r2, [r7, #8]
10007702:	601a      	str	r2, [r3, #0]
	vdev->role = role;
10007704:	69fb      	ldr	r3, [r7, #28]
10007706:	68fa      	ldr	r2, [r7, #12]
10007708:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000770a:	69fb      	ldr	r3, [r7, #28]
1000770c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1000770e:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
10007710:	69fb      	ldr	r3, [r7, #28]
10007712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10007714:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
10007716:	69fb      	ldr	r3, [r7, #28]
10007718:	4a19      	ldr	r2, [pc, #100]	@ (10007780 <rproc_virtio_create_vdev+0x158>)
1000771a:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
1000771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000771e:	3310      	adds	r3, #16
10007720:	e02a      	b.n	10007778 <rproc_virtio_create_vdev+0x150>
			goto err1;
10007722:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
10007724:	2300      	movs	r3, #0
10007726:	637b      	str	r3, [r7, #52]	@ 0x34
10007728:	e019      	b.n	1000775e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000772a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000772c:	4613      	mov	r3, r2
1000772e:	005b      	lsls	r3, r3, #1
10007730:	4413      	add	r3, r2
10007732:	00db      	lsls	r3, r3, #3
10007734:	461a      	mov	r2, r3
10007736:	6a3b      	ldr	r3, [r7, #32]
10007738:	4413      	add	r3, r2
1000773a:	681b      	ldr	r3, [r3, #0]
1000773c:	2b00      	cmp	r3, #0
1000773e:	d00b      	beq.n	10007758 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
10007740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007742:	4613      	mov	r3, r2
10007744:	005b      	lsls	r3, r3, #1
10007746:	4413      	add	r3, r2
10007748:	00db      	lsls	r3, r3, #3
1000774a:	461a      	mov	r2, r3
1000774c:	6a3b      	ldr	r3, [r7, #32]
1000774e:	4413      	add	r3, r2
10007750:	681b      	ldr	r3, [r3, #0]
10007752:	4618      	mov	r0, r3
10007754:	f7ff fe70 	bl	10007438 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
10007758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000775a:	3301      	adds	r3, #1
1000775c:	637b      	str	r3, [r7, #52]	@ 0x34
1000775e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007762:	429a      	cmp	r2, r3
10007764:	d3e1      	bcc.n	1000772a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
10007766:	6a38      	ldr	r0, [r7, #32]
10007768:	f7ff fe66 	bl	10007438 <metal_free_memory>
1000776c:	e000      	b.n	10007770 <rproc_virtio_create_vdev+0x148>
		goto err0;
1000776e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
10007770:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10007772:	f7ff fe61 	bl	10007438 <metal_free_memory>
	return NULL;
10007776:	2300      	movs	r3, #0
}
10007778:	4618      	mov	r0, r3
1000777a:	3738      	adds	r7, #56	@ 0x38
1000777c:	46bd      	mov	sp, r7
1000777e:	bd80      	pop	{r7, pc}
10007780:	1000b1e0 	.word	0x1000b1e0

10007784 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
10007784:	b480      	push	{r7}
10007786:	b087      	sub	sp, #28
10007788:	af00      	add	r7, sp, #0
1000778a:	60f8      	str	r0, [r7, #12]
1000778c:	60b9      	str	r1, [r7, #8]
1000778e:	607a      	str	r2, [r7, #4]
10007790:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
10007792:	68fb      	ldr	r3, [r7, #12]
10007794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007796:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
10007798:	68ba      	ldr	r2, [r7, #8]
1000779a:	697b      	ldr	r3, [r7, #20]
1000779c:	429a      	cmp	r2, r3
1000779e:	d302      	bcc.n	100077a6 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
100077a0:	f06f 0301 	mvn.w	r3, #1
100077a4:	e019      	b.n	100077da <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
100077a6:	68fb      	ldr	r3, [r7, #12]
100077a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100077aa:	68ba      	ldr	r2, [r7, #8]
100077ac:	4613      	mov	r3, r2
100077ae:	005b      	lsls	r3, r3, #1
100077b0:	4413      	add	r3, r2
100077b2:	00db      	lsls	r3, r3, #3
100077b4:	440b      	add	r3, r1
100077b6:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
100077b8:	693b      	ldr	r3, [r7, #16]
100077ba:	6a3a      	ldr	r2, [r7, #32]
100077bc:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
100077be:	693b      	ldr	r3, [r7, #16]
100077c0:	687a      	ldr	r2, [r7, #4]
100077c2:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
100077c4:	693b      	ldr	r3, [r7, #16]
100077c6:	683a      	ldr	r2, [r7, #0]
100077c8:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
100077ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100077cc:	b29a      	uxth	r2, r3
100077ce:	693b      	ldr	r3, [r7, #16]
100077d0:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
100077d2:	693b      	ldr	r3, [r7, #16]
100077d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100077d6:	609a      	str	r2, [r3, #8]

	return 0;
100077d8:	2300      	movs	r3, #0
}
100077da:	4618      	mov	r0, r3
100077dc:	371c      	adds	r7, #28
100077de:	46bd      	mov	sp, r7
100077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100077e4:	4770      	bx	lr

100077e6 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
100077e6:	b580      	push	{r7, lr}
100077e8:	b086      	sub	sp, #24
100077ea:	af00      	add	r7, sp, #0
100077ec:	6078      	str	r0, [r7, #4]
100077ee:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
100077f0:	687b      	ldr	r3, [r7, #4]
100077f2:	2b00      	cmp	r3, #0
100077f4:	d102      	bne.n	100077fc <rproc_virtio_notified+0x16>
		return -RPROC_EINVAL;
100077f6:	f06f 0301 	mvn.w	r3, #1
100077fa:	e02c      	b.n	10007856 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
100077fc:	687b      	ldr	r3, [r7, #4]
100077fe:	681b      	ldr	r3, [r3, #0]
10007800:	683a      	ldr	r2, [r7, #0]
10007802:	429a      	cmp	r2, r3
10007804:	d101      	bne.n	1000780a <rproc_virtio_notified+0x24>
		return 0;
10007806:	2300      	movs	r3, #0
10007808:	e025      	b.n	10007856 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
1000780a:	687b      	ldr	r3, [r7, #4]
1000780c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000780e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
10007810:	2300      	movs	r3, #0
10007812:	617b      	str	r3, [r7, #20]
10007814:	e01a      	b.n	1000784c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
10007816:	687b      	ldr	r3, [r7, #4]
10007818:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000781a:	697a      	ldr	r2, [r7, #20]
1000781c:	4613      	mov	r3, r2
1000781e:	005b      	lsls	r3, r3, #1
10007820:	4413      	add	r3, r2
10007822:	00db      	lsls	r3, r3, #3
10007824:	440b      	add	r3, r1
10007826:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
10007828:	68fb      	ldr	r3, [r7, #12]
1000782a:	691b      	ldr	r3, [r3, #16]
1000782c:	683a      	ldr	r2, [r7, #0]
1000782e:	429a      	cmp	r2, r3
10007830:	d003      	beq.n	1000783a <rproc_virtio_notified+0x54>
10007832:	683b      	ldr	r3, [r7, #0]
10007834:	f1b3 3fff 	cmp.w	r3, #4294967295
10007838:	d105      	bne.n	10007846 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
1000783a:	68fb      	ldr	r3, [r7, #12]
1000783c:	681b      	ldr	r3, [r3, #0]
1000783e:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
10007840:	68b8      	ldr	r0, [r7, #8]
10007842:	f001 fb95 	bl	10008f70 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
10007846:	697b      	ldr	r3, [r7, #20]
10007848:	3301      	adds	r3, #1
1000784a:	617b      	str	r3, [r7, #20]
1000784c:	697a      	ldr	r2, [r7, #20]
1000784e:	693b      	ldr	r3, [r7, #16]
10007850:	429a      	cmp	r2, r3
10007852:	d3e0      	bcc.n	10007816 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
10007854:	2300      	movs	r3, #0
}
10007856:	4618      	mov	r0, r3
10007858:	3718      	adds	r7, #24
1000785a:	46bd      	mov	sp, r7
1000785c:	bd80      	pop	{r7, pc}

1000785e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000785e:	b580      	push	{r7, lr}
10007860:	b084      	sub	sp, #16
10007862:	af00      	add	r7, sp, #0
10007864:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
10007866:	687b      	ldr	r3, [r7, #4]
10007868:	699b      	ldr	r3, [r3, #24]
1000786a:	2b00      	cmp	r3, #0
1000786c:	d00a      	beq.n	10007884 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000786e:	6878      	ldr	r0, [r7, #4]
10007870:	f7ff fe3a 	bl	100074e8 <rproc_virtio_get_status>
10007874:	4603      	mov	r3, r0
10007876:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
10007878:	7bfb      	ldrb	r3, [r7, #15]
1000787a:	f003 0304 	and.w	r3, r3, #4
1000787e:	2b00      	cmp	r3, #0
10007880:	d102      	bne.n	10007888 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
10007882:	e7f4      	b.n	1000786e <rproc_virtio_wait_remote_ready+0x10>
		return;
10007884:	bf00      	nop
10007886:	e000      	b.n	1000788a <rproc_virtio_wait_remote_ready+0x2c>
			return;
10007888:	bf00      	nop
		metal_cpu_yield();
	}
}
1000788a:	3710      	adds	r7, #16
1000788c:	46bd      	mov	sp, r7
1000788e:	bd80      	pop	{r7, pc}

10007890 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
10007890:	b490      	push	{r4, r7}
10007892:	b086      	sub	sp, #24
10007894:	af00      	add	r7, sp, #0
10007896:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10007898:	2300      	movs	r3, #0
1000789a:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000789c:	bf00      	nop
1000789e:	687b      	ldr	r3, [r7, #4]
100078a0:	617b      	str	r3, [r7, #20]
100078a2:	2301      	movs	r3, #1
100078a4:	60fb      	str	r3, [r7, #12]
100078a6:	68fb      	ldr	r3, [r7, #12]
100078a8:	461c      	mov	r4, r3
100078aa:	697a      	ldr	r2, [r7, #20]
100078ac:	f107 0310 	add.w	r3, r7, #16
100078b0:	6818      	ldr	r0, [r3, #0]
100078b2:	f3bf 8f5b 	dmb	ish
100078b6:	e852 1f00 	ldrex	r1, [r2]
100078ba:	4281      	cmp	r1, r0
100078bc:	d103      	bne.n	100078c6 <__metal_mutex_acquire+0x36>
100078be:	e842 4c00 	strex	ip, r4, [r2]
100078c2:	f1bc 0f00 	cmp.w	ip, #0
100078c6:	f3bf 8f5b 	dmb	ish
100078ca:	bf0c      	ite	eq
100078cc:	2201      	moveq	r2, #1
100078ce:	2200      	movne	r2, #0
100078d0:	2a00      	cmp	r2, #0
100078d2:	d100      	bne.n	100078d6 <__metal_mutex_acquire+0x46>
100078d4:	6019      	str	r1, [r3, #0]
100078d6:	4613      	mov	r3, r2
100078d8:	f083 0301 	eor.w	r3, r3, #1
100078dc:	b2db      	uxtb	r3, r3
100078de:	2b00      	cmp	r3, #0
100078e0:	d1dd      	bne.n	1000789e <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
100078e2:	bf00      	nop
100078e4:	bf00      	nop
100078e6:	3718      	adds	r7, #24
100078e8:	46bd      	mov	sp, r7
100078ea:	bc90      	pop	{r4, r7}
100078ec:	4770      	bx	lr

100078ee <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
100078ee:	b480      	push	{r7}
100078f0:	b085      	sub	sp, #20
100078f2:	af00      	add	r7, sp, #0
100078f4:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100078f6:	687b      	ldr	r3, [r7, #4]
100078f8:	60fb      	str	r3, [r7, #12]
100078fa:	2300      	movs	r3, #0
100078fc:	60bb      	str	r3, [r7, #8]
100078fe:	68bb      	ldr	r3, [r7, #8]
10007900:	461a      	mov	r2, r3
10007902:	68fb      	ldr	r3, [r7, #12]
10007904:	f3bf 8f5b 	dmb	ish
10007908:	601a      	str	r2, [r3, #0]
1000790a:	f3bf 8f5b 	dmb	ish
}
1000790e:	bf00      	nop
10007910:	3714      	adds	r7, #20
10007912:	46bd      	mov	sp, r7
10007914:	f85d 7b04 	ldr.w	r7, [sp], #4
10007918:	4770      	bx	lr

1000791a <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
1000791a:	b580      	push	{r7, lr}
1000791c:	b082      	sub	sp, #8
1000791e:	af00      	add	r7, sp, #0
10007920:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
10007922:	6878      	ldr	r0, [r7, #4]
10007924:	f7ff ffb4 	bl	10007890 <__metal_mutex_acquire>
}
10007928:	bf00      	nop
1000792a:	3708      	adds	r7, #8
1000792c:	46bd      	mov	sp, r7
1000792e:	bd80      	pop	{r7, pc}

10007930 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
10007930:	b580      	push	{r7, lr}
10007932:	b082      	sub	sp, #8
10007934:	af00      	add	r7, sp, #0
10007936:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10007938:	6878      	ldr	r0, [r7, #4]
1000793a:	f7ff ffd8 	bl	100078ee <__metal_mutex_release>
}
1000793e:	bf00      	nop
10007940:	3708      	adds	r7, #8
10007942:	46bd      	mov	sp, r7
10007944:	bd80      	pop	{r7, pc}

10007946 <metal_list_add_before>:
{
10007946:	b480      	push	{r7}
10007948:	b083      	sub	sp, #12
1000794a:	af00      	add	r7, sp, #0
1000794c:	6078      	str	r0, [r7, #4]
1000794e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10007950:	687b      	ldr	r3, [r7, #4]
10007952:	685a      	ldr	r2, [r3, #4]
10007954:	683b      	ldr	r3, [r7, #0]
10007956:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10007958:	683b      	ldr	r3, [r7, #0]
1000795a:	687a      	ldr	r2, [r7, #4]
1000795c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000795e:	683b      	ldr	r3, [r7, #0]
10007960:	681b      	ldr	r3, [r3, #0]
10007962:	683a      	ldr	r2, [r7, #0]
10007964:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10007966:	683b      	ldr	r3, [r7, #0]
10007968:	685b      	ldr	r3, [r3, #4]
1000796a:	683a      	ldr	r2, [r7, #0]
1000796c:	601a      	str	r2, [r3, #0]
}
1000796e:	bf00      	nop
10007970:	370c      	adds	r7, #12
10007972:	46bd      	mov	sp, r7
10007974:	f85d 7b04 	ldr.w	r7, [sp], #4
10007978:	4770      	bx	lr

1000797a <metal_list_add_tail>:
{
1000797a:	b580      	push	{r7, lr}
1000797c:	b082      	sub	sp, #8
1000797e:	af00      	add	r7, sp, #0
10007980:	6078      	str	r0, [r7, #4]
10007982:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10007984:	6839      	ldr	r1, [r7, #0]
10007986:	6878      	ldr	r0, [r7, #4]
10007988:	f7ff ffdd 	bl	10007946 <metal_list_add_before>
}
1000798c:	bf00      	nop
1000798e:	3708      	adds	r7, #8
10007990:	46bd      	mov	sp, r7
10007992:	bd80      	pop	{r7, pc}

10007994 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
10007994:	b480      	push	{r7}
10007996:	b083      	sub	sp, #12
10007998:	af00      	add	r7, sp, #0
1000799a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
1000799c:	687b      	ldr	r3, [r7, #4]
1000799e:	681b      	ldr	r3, [r3, #0]
100079a0:	687a      	ldr	r2, [r7, #4]
100079a2:	6852      	ldr	r2, [r2, #4]
100079a4:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
100079a6:	687b      	ldr	r3, [r7, #4]
100079a8:	685b      	ldr	r3, [r3, #4]
100079aa:	687a      	ldr	r2, [r7, #4]
100079ac:	6812      	ldr	r2, [r2, #0]
100079ae:	601a      	str	r2, [r3, #0]
	node->prev = node;
100079b0:	687b      	ldr	r3, [r7, #4]
100079b2:	687a      	ldr	r2, [r7, #4]
100079b4:	605a      	str	r2, [r3, #4]
	node->next = node;
100079b6:	687b      	ldr	r3, [r7, #4]
100079b8:	687a      	ldr	r2, [r7, #4]
100079ba:	601a      	str	r2, [r3, #0]
}
100079bc:	bf00      	nop
100079be:	370c      	adds	r7, #12
100079c0:	46bd      	mov	sp, r7
100079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
100079c6:	4770      	bx	lr

100079c8 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
100079c8:	b480      	push	{r7}
100079ca:	b083      	sub	sp, #12
100079cc:	af00      	add	r7, sp, #0
100079ce:	6078      	str	r0, [r7, #4]
100079d0:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
100079d2:	683b      	ldr	r3, [r7, #0]
100079d4:	095b      	lsrs	r3, r3, #5
100079d6:	009a      	lsls	r2, r3, #2
100079d8:	6879      	ldr	r1, [r7, #4]
100079da:	440a      	add	r2, r1
100079dc:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
100079de:	683a      	ldr	r2, [r7, #0]
100079e0:	f002 021f 	and.w	r2, r2, #31
100079e4:	2001      	movs	r0, #1
100079e6:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
100079ea:	009b      	lsls	r3, r3, #2
100079ec:	6878      	ldr	r0, [r7, #4]
100079ee:	4403      	add	r3, r0
100079f0:	430a      	orrs	r2, r1
100079f2:	601a      	str	r2, [r3, #0]
}
100079f4:	bf00      	nop
100079f6:	370c      	adds	r7, #12
100079f8:	46bd      	mov	sp, r7
100079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100079fe:	4770      	bx	lr

10007a00 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
10007a00:	b480      	push	{r7}
10007a02:	b083      	sub	sp, #12
10007a04:	af00      	add	r7, sp, #0
10007a06:	6078      	str	r0, [r7, #4]
10007a08:	6039      	str	r1, [r7, #0]
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
10007a0a:	683b      	ldr	r3, [r7, #0]
10007a0c:	095b      	lsrs	r3, r3, #5
10007a0e:	009b      	lsls	r3, r3, #2
10007a10:	687a      	ldr	r2, [r7, #4]
10007a12:	4413      	add	r3, r2
10007a14:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
10007a16:	683b      	ldr	r3, [r7, #0]
10007a18:	f003 031f 	and.w	r3, r3, #31
10007a1c:	fa22 f303 	lsr.w	r3, r2, r3
10007a20:	f003 0301 	and.w	r3, r3, #1
10007a24:	2b00      	cmp	r3, #0
10007a26:	bf14      	ite	ne
10007a28:	2301      	movne	r3, #1
10007a2a:	2300      	moveq	r3, #0
10007a2c:	b2db      	uxtb	r3, r3
}
10007a2e:	4618      	mov	r0, r3
10007a30:	370c      	adds	r7, #12
10007a32:	46bd      	mov	sp, r7
10007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
10007a38:	4770      	bx	lr

10007a3a <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
10007a3a:	b480      	push	{r7}
10007a3c:	b083      	sub	sp, #12
10007a3e:	af00      	add	r7, sp, #0
10007a40:	6078      	str	r0, [r7, #4]
10007a42:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10007a44:	683b      	ldr	r3, [r7, #0]
10007a46:	095b      	lsrs	r3, r3, #5
10007a48:	009a      	lsls	r2, r3, #2
10007a4a:	6879      	ldr	r1, [r7, #4]
10007a4c:	440a      	add	r2, r1
10007a4e:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10007a50:	683a      	ldr	r2, [r7, #0]
10007a52:	f002 021f 	and.w	r2, r2, #31
10007a56:	2001      	movs	r0, #1
10007a58:	fa00 f202 	lsl.w	r2, r0, r2
10007a5c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10007a5e:	009b      	lsls	r3, r3, #2
10007a60:	6878      	ldr	r0, [r7, #4]
10007a62:	4403      	add	r3, r0
10007a64:	400a      	ands	r2, r1
10007a66:	601a      	str	r2, [r3, #0]
}
10007a68:	bf00      	nop
10007a6a:	370c      	adds	r7, #12
10007a6c:	46bd      	mov	sp, r7
10007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007a72:	4770      	bx	lr

10007a74 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
10007a74:	b580      	push	{r7, lr}
10007a76:	b082      	sub	sp, #8
10007a78:	af00      	add	r7, sp, #0
10007a7a:	6078      	str	r0, [r7, #4]
10007a7c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
10007a7e:	6839      	ldr	r1, [r7, #0]
10007a80:	6878      	ldr	r0, [r7, #4]
10007a82:	f7ff ffbd 	bl	10007a00 <metal_bitmap_is_bit_set>
10007a86:	4603      	mov	r3, r0
10007a88:	2b00      	cmp	r3, #0
10007a8a:	bf0c      	ite	eq
10007a8c:	2301      	moveq	r3, #1
10007a8e:	2300      	movne	r3, #0
10007a90:	b2db      	uxtb	r3, r3
}
10007a92:	4618      	mov	r0, r3
10007a94:	3708      	adds	r7, #8
10007a96:	46bd      	mov	sp, r7
10007a98:	bd80      	pop	{r7, pc}

10007a9a <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
10007a9a:	b580      	push	{r7, lr}
10007a9c:	b086      	sub	sp, #24
10007a9e:	af00      	add	r7, sp, #0
10007aa0:	60f8      	str	r0, [r7, #12]
10007aa2:	60b9      	str	r1, [r7, #8]
10007aa4:	607a      	str	r2, [r7, #4]
	unsigned int bit;

	for (bit = start;
10007aa6:	68bb      	ldr	r3, [r7, #8]
10007aa8:	617b      	str	r3, [r7, #20]
10007aaa:	e002      	b.n	10007ab2 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
10007aac:	697b      	ldr	r3, [r7, #20]
10007aae:	3301      	adds	r3, #1
10007ab0:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
10007ab2:	697a      	ldr	r2, [r7, #20]
10007ab4:	687b      	ldr	r3, [r7, #4]
10007ab6:	429a      	cmp	r2, r3
10007ab8:	d207      	bcs.n	10007aca <metal_bitmap_next_clear_bit+0x30>
10007aba:	697b      	ldr	r3, [r7, #20]
10007abc:	4619      	mov	r1, r3
10007abe:	68f8      	ldr	r0, [r7, #12]
10007ac0:	f7ff ffd8 	bl	10007a74 <metal_bitmap_is_bit_clear>
10007ac4:	4603      	mov	r3, r0
10007ac6:	2b00      	cmp	r3, #0
10007ac8:	d0f0      	beq.n	10007aac <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
10007aca:	697b      	ldr	r3, [r7, #20]
}
10007acc:	4618      	mov	r0, r3
10007ace:	3718      	adds	r7, #24
10007ad0:	46bd      	mov	sp, r7
10007ad2:	bd80      	pop	{r7, pc}

10007ad4 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
10007ad4:	b580      	push	{r7, lr}
10007ad6:	b084      	sub	sp, #16
10007ad8:	af00      	add	r7, sp, #0
10007ada:	60f8      	str	r0, [r7, #12]
10007adc:	60b9      	str	r1, [r7, #8]
10007ade:	607a      	str	r2, [r7, #4]
10007ae0:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10007ae2:	68f8      	ldr	r0, [r7, #12]
10007ae4:	68bb      	ldr	r3, [r7, #8]
10007ae6:	2b00      	cmp	r3, #0
10007ae8:	d001      	beq.n	10007aee <rpmsg_initialize_ept+0x1a>
10007aea:	68bb      	ldr	r3, [r7, #8]
10007aec:	e000      	b.n	10007af0 <rpmsg_initialize_ept+0x1c>
10007aee:	4b0a      	ldr	r3, [pc, #40]	@ (10007b18 <rpmsg_initialize_ept+0x44>)
10007af0:	2220      	movs	r2, #32
10007af2:	4619      	mov	r1, r3
10007af4:	f001 ffc5 	bl	10009a82 <strncpy>
	ept->addr = src;
10007af8:	68fb      	ldr	r3, [r7, #12]
10007afa:	687a      	ldr	r2, [r7, #4]
10007afc:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
10007afe:	68fb      	ldr	r3, [r7, #12]
10007b00:	683a      	ldr	r2, [r7, #0]
10007b02:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
10007b04:	68fb      	ldr	r3, [r7, #12]
10007b06:	69ba      	ldr	r2, [r7, #24]
10007b08:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10007b0a:	68fb      	ldr	r3, [r7, #12]
10007b0c:	69fa      	ldr	r2, [r7, #28]
10007b0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
10007b10:	bf00      	nop
10007b12:	3710      	adds	r7, #16
10007b14:	46bd      	mov	sp, r7
10007b16:	bd80      	pop	{r7, pc}
10007b18:	1000b0e0 	.word	0x1000b0e0

10007b1c <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
10007b1c:	b580      	push	{r7, lr}
10007b1e:	b084      	sub	sp, #16
10007b20:	af00      	add	r7, sp, #0
10007b22:	6078      	str	r0, [r7, #4]
10007b24:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
10007b26:	f04f 33ff 	mov.w	r3, #4294967295
10007b2a:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
10007b2c:	683b      	ldr	r3, [r7, #0]
10007b2e:	461a      	mov	r2, r3
10007b30:	2100      	movs	r1, #0
10007b32:	6878      	ldr	r0, [r7, #4]
10007b34:	f7ff ffb1 	bl	10007a9a <metal_bitmap_next_clear_bit>
10007b38:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
10007b3a:	683b      	ldr	r3, [r7, #0]
10007b3c:	68ba      	ldr	r2, [r7, #8]
10007b3e:	429a      	cmp	r2, r3
10007b40:	d208      	bcs.n	10007b54 <rpmsg_get_address+0x38>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
10007b42:	68bb      	ldr	r3, [r7, #8]
10007b44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
10007b48:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
10007b4a:	68bb      	ldr	r3, [r7, #8]
10007b4c:	4619      	mov	r1, r3
10007b4e:	6878      	ldr	r0, [r7, #4]
10007b50:	f7ff ff3a 	bl	100079c8 <metal_bitmap_set_bit>
	}

	return addr;
10007b54:	68fb      	ldr	r3, [r7, #12]
}
10007b56:	4618      	mov	r0, r3
10007b58:	3710      	adds	r7, #16
10007b5a:	46bd      	mov	sp, r7
10007b5c:	bd80      	pop	{r7, pc}

10007b5e <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
10007b5e:	b580      	push	{r7, lr}
10007b60:	b084      	sub	sp, #16
10007b62:	af00      	add	r7, sp, #0
10007b64:	60f8      	str	r0, [r7, #12]
10007b66:	60b9      	str	r1, [r7, #8]
10007b68:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007b6a:	687b      	ldr	r3, [r7, #4]
10007b6c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10007b70:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10007b72:	687b      	ldr	r3, [r7, #4]
10007b74:	2b00      	cmp	r3, #0
10007b76:	db07      	blt.n	10007b88 <rpmsg_release_address+0x2a>
10007b78:	687a      	ldr	r2, [r7, #4]
10007b7a:	68bb      	ldr	r3, [r7, #8]
10007b7c:	429a      	cmp	r2, r3
10007b7e:	da03      	bge.n	10007b88 <rpmsg_release_address+0x2a>
		metal_bitmap_clear_bit(bitmap, addr);
10007b80:	6879      	ldr	r1, [r7, #4]
10007b82:	68f8      	ldr	r0, [r7, #12]
10007b84:	f7ff ff59 	bl	10007a3a <metal_bitmap_clear_bit>
}
10007b88:	bf00      	nop
10007b8a:	3710      	adds	r7, #16
10007b8c:	46bd      	mov	sp, r7
10007b8e:	bd80      	pop	{r7, pc}

10007b90 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
10007b90:	b580      	push	{r7, lr}
10007b92:	b084      	sub	sp, #16
10007b94:	af00      	add	r7, sp, #0
10007b96:	60f8      	str	r0, [r7, #12]
10007b98:	60b9      	str	r1, [r7, #8]
10007b9a:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007b9c:	687b      	ldr	r3, [r7, #4]
10007b9e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10007ba2:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10007ba4:	687b      	ldr	r3, [r7, #4]
10007ba6:	2b00      	cmp	r3, #0
10007ba8:	db09      	blt.n	10007bbe <rpmsg_is_address_set+0x2e>
10007baa:	687a      	ldr	r2, [r7, #4]
10007bac:	68bb      	ldr	r3, [r7, #8]
10007bae:	429a      	cmp	r2, r3
10007bb0:	da05      	bge.n	10007bbe <rpmsg_is_address_set+0x2e>
		return metal_bitmap_is_bit_set(bitmap, addr);
10007bb2:	6879      	ldr	r1, [r7, #4]
10007bb4:	68f8      	ldr	r0, [r7, #12]
10007bb6:	f7ff ff23 	bl	10007a00 <metal_bitmap_is_bit_set>
10007bba:	4603      	mov	r3, r0
10007bbc:	e000      	b.n	10007bc0 <rpmsg_is_address_set+0x30>
	else
		return RPMSG_ERR_PARAM;
10007bbe:	4b02      	ldr	r3, [pc, #8]	@ (10007bc8 <rpmsg_is_address_set+0x38>)
}
10007bc0:	4618      	mov	r0, r3
10007bc2:	3710      	adds	r7, #16
10007bc4:	46bd      	mov	sp, r7
10007bc6:	bd80      	pop	{r7, pc}
10007bc8:	fffff82d 	.word	0xfffff82d

10007bcc <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
10007bcc:	b580      	push	{r7, lr}
10007bce:	b084      	sub	sp, #16
10007bd0:	af00      	add	r7, sp, #0
10007bd2:	60f8      	str	r0, [r7, #12]
10007bd4:	60b9      	str	r1, [r7, #8]
10007bd6:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007bd8:	687b      	ldr	r3, [r7, #4]
10007bda:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10007bde:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size) {
10007be0:	687b      	ldr	r3, [r7, #4]
10007be2:	2b00      	cmp	r3, #0
10007be4:	db09      	blt.n	10007bfa <rpmsg_set_address+0x2e>
10007be6:	687a      	ldr	r2, [r7, #4]
10007be8:	68bb      	ldr	r3, [r7, #8]
10007bea:	429a      	cmp	r2, r3
10007bec:	da05      	bge.n	10007bfa <rpmsg_set_address+0x2e>
		metal_bitmap_set_bit(bitmap, addr);
10007bee:	6879      	ldr	r1, [r7, #4]
10007bf0:	68f8      	ldr	r0, [r7, #12]
10007bf2:	f7ff fee9 	bl	100079c8 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
10007bf6:	2300      	movs	r3, #0
10007bf8:	e000      	b.n	10007bfc <rpmsg_set_address+0x30>
	} else {
		return RPMSG_ERR_PARAM;
10007bfa:	4b02      	ldr	r3, [pc, #8]	@ (10007c04 <rpmsg_set_address+0x38>)
	}
}
10007bfc:	4618      	mov	r0, r3
10007bfe:	3710      	adds	r7, #16
10007c00:	46bd      	mov	sp, r7
10007c02:	bd80      	pop	{r7, pc}
10007c04:	fffff82d 	.word	0xfffff82d

10007c08 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
10007c08:	b590      	push	{r4, r7, lr}
10007c0a:	b089      	sub	sp, #36	@ 0x24
10007c0c:	af02      	add	r7, sp, #8
10007c0e:	60f8      	str	r0, [r7, #12]
10007c10:	60b9      	str	r1, [r7, #8]
10007c12:	607a      	str	r2, [r7, #4]
10007c14:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
10007c16:	68fb      	ldr	r3, [r7, #12]
10007c18:	2b00      	cmp	r3, #0
10007c1a:	d00a      	beq.n	10007c32 <rpmsg_send_offchannel_raw+0x2a>
10007c1c:	68fb      	ldr	r3, [r7, #12]
10007c1e:	6a1b      	ldr	r3, [r3, #32]
10007c20:	2b00      	cmp	r3, #0
10007c22:	d006      	beq.n	10007c32 <rpmsg_send_offchannel_raw+0x2a>
10007c24:	683b      	ldr	r3, [r7, #0]
10007c26:	2b00      	cmp	r3, #0
10007c28:	d003      	beq.n	10007c32 <rpmsg_send_offchannel_raw+0x2a>
10007c2a:	687b      	ldr	r3, [r7, #4]
10007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
10007c30:	d101      	bne.n	10007c36 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
10007c32:	4b0d      	ldr	r3, [pc, #52]	@ (10007c68 <rpmsg_send_offchannel_raw+0x60>)
10007c34:	e014      	b.n	10007c60 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
10007c36:	68fb      	ldr	r3, [r7, #12]
10007c38:	6a1b      	ldr	r3, [r3, #32]
10007c3a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
10007c3c:	697b      	ldr	r3, [r7, #20]
10007c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10007c40:	2b00      	cmp	r3, #0
10007c42:	d00c      	beq.n	10007c5e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
10007c44:	697b      	ldr	r3, [r7, #20]
10007c46:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
10007c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007c4a:	9301      	str	r3, [sp, #4]
10007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007c4e:	9300      	str	r3, [sp, #0]
10007c50:	683b      	ldr	r3, [r7, #0]
10007c52:	687a      	ldr	r2, [r7, #4]
10007c54:	68b9      	ldr	r1, [r7, #8]
10007c56:	6978      	ldr	r0, [r7, #20]
10007c58:	47a0      	blx	r4
10007c5a:	4603      	mov	r3, r0
10007c5c:	e000      	b.n	10007c60 <rpmsg_send_offchannel_raw+0x58>
						     len, wait);

	return RPMSG_ERR_PARAM;
10007c5e:	4b02      	ldr	r3, [pc, #8]	@ (10007c68 <rpmsg_send_offchannel_raw+0x60>)
}
10007c60:	4618      	mov	r0, r3
10007c62:	371c      	adds	r7, #28
10007c64:	46bd      	mov	sp, r7
10007c66:	bd90      	pop	{r4, r7, pc}
10007c68:	fffff82d 	.word	0xfffff82d

10007c6c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
10007c6c:	b580      	push	{r7, lr}
10007c6e:	b090      	sub	sp, #64	@ 0x40
10007c70:	af02      	add	r7, sp, #8
10007c72:	6078      	str	r0, [r7, #4]
10007c74:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
10007c76:	683b      	ldr	r3, [r7, #0]
10007c78:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
10007c7a:	687b      	ldr	r3, [r7, #4]
10007c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
10007c80:	6879      	ldr	r1, [r7, #4]
10007c82:	f107 030c 	add.w	r3, r7, #12
10007c86:	2220      	movs	r2, #32
10007c88:	4618      	mov	r0, r3
10007c8a:	f001 fefa 	bl	10009a82 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
10007c8e:	687b      	ldr	r3, [r7, #4]
10007c90:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10007c92:	f107 030c 	add.w	r3, r7, #12
10007c96:	2201      	movs	r2, #1
10007c98:	9201      	str	r2, [sp, #4]
10007c9a:	2228      	movs	r2, #40	@ 0x28
10007c9c:	9200      	str	r2, [sp, #0]
10007c9e:	2235      	movs	r2, #53	@ 0x35
10007ca0:	6878      	ldr	r0, [r7, #4]
10007ca2:	f7ff ffb1 	bl	10007c08 <rpmsg_send_offchannel_raw>
10007ca6:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
10007ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007caa:	2b00      	cmp	r3, #0
10007cac:	da01      	bge.n	10007cb2 <rpmsg_send_ns_message+0x46>
		return ret;
10007cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007cb0:	e000      	b.n	10007cb4 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
10007cb2:	2300      	movs	r3, #0
}
10007cb4:	4618      	mov	r0, r3
10007cb6:	3738      	adds	r7, #56	@ 0x38
10007cb8:	46bd      	mov	sp, r7
10007cba:	bd80      	pop	{r7, pc}

10007cbc <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
10007cbc:	b580      	push	{r7, lr}
10007cbe:	b088      	sub	sp, #32
10007cc0:	af00      	add	r7, sp, #0
10007cc2:	60f8      	str	r0, [r7, #12]
10007cc4:	60b9      	str	r1, [r7, #8]
10007cc6:	607a      	str	r2, [r7, #4]
10007cc8:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
10007cca:	68fb      	ldr	r3, [r7, #12]
10007ccc:	681b      	ldr	r3, [r3, #0]
10007cce:	61fb      	str	r3, [r7, #28]
10007cd0:	e04b      	b.n	10007d6a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
10007cd2:	2300      	movs	r3, #0
10007cd4:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
10007cd6:	69fb      	ldr	r3, [r7, #28]
10007cd8:	3b34      	subs	r3, #52	@ 0x34
10007cda:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
10007cdc:	687b      	ldr	r3, [r7, #4]
10007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
10007ce2:	d006      	beq.n	10007cf2 <rpmsg_get_endpoint+0x36>
10007ce4:	697b      	ldr	r3, [r7, #20]
10007ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007ce8:	687a      	ldr	r2, [r7, #4]
10007cea:	429a      	cmp	r2, r3
10007cec:	d101      	bne.n	10007cf2 <rpmsg_get_endpoint+0x36>
			return ept;
10007cee:	697b      	ldr	r3, [r7, #20]
10007cf0:	e040      	b.n	10007d74 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
10007cf2:	697b      	ldr	r3, [r7, #20]
10007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007cf6:	687a      	ldr	r2, [r7, #4]
10007cf8:	429a      	cmp	r2, r3
10007cfa:	d106      	bne.n	10007d0a <rpmsg_get_endpoint+0x4e>
10007cfc:	697b      	ldr	r3, [r7, #20]
10007cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007d00:	683a      	ldr	r2, [r7, #0]
10007d02:	429a      	cmp	r2, r3
10007d04:	d101      	bne.n	10007d0a <rpmsg_get_endpoint+0x4e>
			return ept;
10007d06:	697b      	ldr	r3, [r7, #20]
10007d08:	e034      	b.n	10007d74 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
10007d0a:	68bb      	ldr	r3, [r7, #8]
10007d0c:	2b00      	cmp	r3, #0
10007d0e:	d00c      	beq.n	10007d2a <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
10007d10:	697b      	ldr	r3, [r7, #20]
10007d12:	2220      	movs	r2, #32
10007d14:	68b9      	ldr	r1, [r7, #8]
10007d16:	4618      	mov	r0, r3
10007d18:	f001 fea1 	bl	10009a5e <strncmp>
10007d1c:	4603      	mov	r3, r0
10007d1e:	2b00      	cmp	r3, #0
10007d20:	bf0c      	ite	eq
10007d22:	2301      	moveq	r3, #1
10007d24:	2300      	movne	r3, #0
10007d26:	b2db      	uxtb	r3, r3
10007d28:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
10007d2a:	68bb      	ldr	r3, [r7, #8]
10007d2c:	2b00      	cmp	r3, #0
10007d2e:	d018      	beq.n	10007d62 <rpmsg_get_endpoint+0xa6>
10007d30:	69bb      	ldr	r3, [r7, #24]
10007d32:	2b00      	cmp	r3, #0
10007d34:	d015      	beq.n	10007d62 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10007d36:	683b      	ldr	r3, [r7, #0]
10007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
10007d3c:	d006      	beq.n	10007d4c <rpmsg_get_endpoint+0x90>
10007d3e:	697b      	ldr	r3, [r7, #20]
10007d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007d42:	683a      	ldr	r2, [r7, #0]
10007d44:	429a      	cmp	r2, r3
10007d46:	d101      	bne.n	10007d4c <rpmsg_get_endpoint+0x90>
			return ept;
10007d48:	697b      	ldr	r3, [r7, #20]
10007d4a:	e013      	b.n	10007d74 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
10007d4c:	687b      	ldr	r3, [r7, #4]
10007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
10007d52:	d107      	bne.n	10007d64 <rpmsg_get_endpoint+0xa8>
10007d54:	697b      	ldr	r3, [r7, #20]
10007d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
10007d5c:	d102      	bne.n	10007d64 <rpmsg_get_endpoint+0xa8>
			return ept;
10007d5e:	697b      	ldr	r3, [r7, #20]
10007d60:	e008      	b.n	10007d74 <rpmsg_get_endpoint+0xb8>
			continue;
10007d62:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
10007d64:	69fb      	ldr	r3, [r7, #28]
10007d66:	681b      	ldr	r3, [r3, #0]
10007d68:	61fb      	str	r3, [r7, #28]
10007d6a:	68fb      	ldr	r3, [r7, #12]
10007d6c:	69fa      	ldr	r2, [r7, #28]
10007d6e:	429a      	cmp	r2, r3
10007d70:	d1af      	bne.n	10007cd2 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
10007d72:	2300      	movs	r3, #0
}
10007d74:	4618      	mov	r0, r3
10007d76:	3720      	adds	r7, #32
10007d78:	46bd      	mov	sp, r7
10007d7a:	bd80      	pop	{r7, pc}

10007d7c <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
10007d7c:	b580      	push	{r7, lr}
10007d7e:	b084      	sub	sp, #16
10007d80:	af00      	add	r7, sp, #0
10007d82:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev = ept->rdev;
10007d84:	687b      	ldr	r3, [r7, #4]
10007d86:	6a1b      	ldr	r3, [r3, #32]
10007d88:	60fb      	str	r3, [r7, #12]

	metal_mutex_acquire(&rdev->lock);
10007d8a:	68fb      	ldr	r3, [r7, #12]
10007d8c:	3358      	adds	r3, #88	@ 0x58
10007d8e:	4618      	mov	r0, r3
10007d90:	f7ff fdc3 	bl	1000791a <metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
10007d94:	687b      	ldr	r3, [r7, #4]
10007d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007d98:	f1b3 3fff 	cmp.w	r3, #4294967295
10007d9c:	d008      	beq.n	10007db0 <rpmsg_unregister_endpoint+0x34>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007d9e:	68fb      	ldr	r3, [r7, #12]
10007da0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
10007da4:	687b      	ldr	r3, [r7, #4]
10007da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007da8:	461a      	mov	r2, r3
10007daa:	2180      	movs	r1, #128	@ 0x80
10007dac:	f7ff fed7 	bl	10007b5e <rpmsg_release_address>
	metal_list_del(&ept->node);
10007db0:	687b      	ldr	r3, [r7, #4]
10007db2:	3334      	adds	r3, #52	@ 0x34
10007db4:	4618      	mov	r0, r3
10007db6:	f7ff fded 	bl	10007994 <metal_list_del>
	ept->rdev = NULL;
10007dba:	687b      	ldr	r3, [r7, #4]
10007dbc:	2200      	movs	r2, #0
10007dbe:	621a      	str	r2, [r3, #32]
	metal_mutex_release(&rdev->lock);
10007dc0:	68fb      	ldr	r3, [r7, #12]
10007dc2:	3358      	adds	r3, #88	@ 0x58
10007dc4:	4618      	mov	r0, r3
10007dc6:	f7ff fdb3 	bl	10007930 <metal_mutex_release>
}
10007dca:	bf00      	nop
10007dcc:	3710      	adds	r7, #16
10007dce:	46bd      	mov	sp, r7
10007dd0:	bd80      	pop	{r7, pc}

10007dd2 <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
10007dd2:	b580      	push	{r7, lr}
10007dd4:	b082      	sub	sp, #8
10007dd6:	af00      	add	r7, sp, #0
10007dd8:	6078      	str	r0, [r7, #4]
10007dda:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
10007ddc:	683b      	ldr	r3, [r7, #0]
10007dde:	687a      	ldr	r2, [r7, #4]
10007de0:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
10007de2:	687a      	ldr	r2, [r7, #4]
10007de4:	683b      	ldr	r3, [r7, #0]
10007de6:	3334      	adds	r3, #52	@ 0x34
10007de8:	4619      	mov	r1, r3
10007dea:	4610      	mov	r0, r2
10007dec:	f7ff fdc5 	bl	1000797a <metal_list_add_tail>
}
10007df0:	bf00      	nop
10007df2:	3708      	adds	r7, #8
10007df4:	46bd      	mov	sp, r7
10007df6:	bd80      	pop	{r7, pc}

10007df8 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
10007df8:	b580      	push	{r7, lr}
10007dfa:	b088      	sub	sp, #32
10007dfc:	af02      	add	r7, sp, #8
10007dfe:	60f8      	str	r0, [r7, #12]
10007e00:	60b9      	str	r1, [r7, #8]
10007e02:	607a      	str	r2, [r7, #4]
10007e04:	603b      	str	r3, [r7, #0]
	int status = RPMSG_SUCCESS;
10007e06:	2300      	movs	r3, #0
10007e08:	617b      	str	r3, [r7, #20]
	uint32_t addr = src;
10007e0a:	683b      	ldr	r3, [r7, #0]
10007e0c:	613b      	str	r3, [r7, #16]

	if (!ept)
10007e0e:	68fb      	ldr	r3, [r7, #12]
10007e10:	2b00      	cmp	r3, #0
10007e12:	d101      	bne.n	10007e18 <rpmsg_create_ept+0x20>
		return RPMSG_ERR_PARAM;
10007e14:	4b37      	ldr	r3, [pc, #220]	@ (10007ef4 <rpmsg_create_ept+0xfc>)
10007e16:	e068      	b.n	10007eea <rpmsg_create_ept+0xf2>

	metal_mutex_acquire(&rdev->lock);
10007e18:	68bb      	ldr	r3, [r7, #8]
10007e1a:	3358      	adds	r3, #88	@ 0x58
10007e1c:	4618      	mov	r0, r3
10007e1e:	f7ff fd7c 	bl	1000791a <metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
10007e22:	683b      	ldr	r3, [r7, #0]
10007e24:	f1b3 3fff 	cmp.w	r3, #4294967295
10007e28:	d10d      	bne.n	10007e46 <rpmsg_create_ept+0x4e>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
10007e2a:	68bb      	ldr	r3, [r7, #8]
10007e2c:	3348      	adds	r3, #72	@ 0x48
10007e2e:	2180      	movs	r1, #128	@ 0x80
10007e30:	4618      	mov	r0, r3
10007e32:	f7ff fe73 	bl	10007b1c <rpmsg_get_address>
10007e36:	6138      	str	r0, [r7, #16]
		if (addr == RPMSG_ADDR_ANY) {
10007e38:	693b      	ldr	r3, [r7, #16]
10007e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
10007e3e:	d11f      	bne.n	10007e80 <rpmsg_create_ept+0x88>
			status = RPMSG_ERR_ADDR;
10007e40:	4b2d      	ldr	r3, [pc, #180]	@ (10007ef8 <rpmsg_create_ept+0x100>)
10007e42:	617b      	str	r3, [r7, #20]
			goto ret_status;
10007e44:	e04b      	b.n	10007ede <rpmsg_create_ept+0xe6>
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
10007e46:	683b      	ldr	r3, [r7, #0]
10007e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
10007e4c:	d318      	bcc.n	10007e80 <rpmsg_create_ept+0x88>
		status = rpmsg_is_address_set(rdev->bitmap,
10007e4e:	68bb      	ldr	r3, [r7, #8]
10007e50:	3348      	adds	r3, #72	@ 0x48
10007e52:	683a      	ldr	r2, [r7, #0]
10007e54:	2180      	movs	r1, #128	@ 0x80
10007e56:	4618      	mov	r0, r3
10007e58:	f7ff fe9a 	bl	10007b90 <rpmsg_is_address_set>
10007e5c:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
10007e5e:	697b      	ldr	r3, [r7, #20]
10007e60:	2b00      	cmp	r3, #0
10007e62:	d107      	bne.n	10007e74 <rpmsg_create_ept+0x7c>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007e64:	68bb      	ldr	r3, [r7, #8]
10007e66:	3348      	adds	r3, #72	@ 0x48
10007e68:	683a      	ldr	r2, [r7, #0]
10007e6a:	2180      	movs	r1, #128	@ 0x80
10007e6c:	4618      	mov	r0, r3
10007e6e:	f7ff fead 	bl	10007bcc <rpmsg_set_address>
10007e72:	e005      	b.n	10007e80 <rpmsg_create_ept+0x88>
					  src);
		} else if (status > 0) {
10007e74:	697b      	ldr	r3, [r7, #20]
10007e76:	2b00      	cmp	r3, #0
10007e78:	dd30      	ble.n	10007edc <rpmsg_create_ept+0xe4>
			status = RPMSG_ERR_ADDR;
10007e7a:	4b1f      	ldr	r3, [pc, #124]	@ (10007ef8 <rpmsg_create_ept+0x100>)
10007e7c:	617b      	str	r3, [r7, #20]
			goto ret_status;
10007e7e:	e02e      	b.n	10007ede <rpmsg_create_ept+0xe6>
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
10007e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007e82:	9301      	str	r3, [sp, #4]
10007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007e86:	9300      	str	r3, [sp, #0]
10007e88:	6a3b      	ldr	r3, [r7, #32]
10007e8a:	693a      	ldr	r2, [r7, #16]
10007e8c:	6879      	ldr	r1, [r7, #4]
10007e8e:	68f8      	ldr	r0, [r7, #12]
10007e90:	f7ff fe20 	bl	10007ad4 <rpmsg_initialize_ept>
	rpmsg_register_endpoint(rdev, ept);
10007e94:	68f9      	ldr	r1, [r7, #12]
10007e96:	68b8      	ldr	r0, [r7, #8]
10007e98:	f7ff ff9b 	bl	10007dd2 <rpmsg_register_endpoint>
	metal_mutex_release(&rdev->lock);
10007e9c:	68bb      	ldr	r3, [r7, #8]
10007e9e:	3358      	adds	r3, #88	@ 0x58
10007ea0:	4618      	mov	r0, r3
10007ea2:	f7ff fd45 	bl	10007930 <metal_mutex_release>

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
10007ea6:	68fb      	ldr	r3, [r7, #12]
10007ea8:	781b      	ldrb	r3, [r3, #0]
10007eaa:	2b00      	cmp	r3, #0
10007eac:	d00e      	beq.n	10007ecc <rpmsg_create_ept+0xd4>
10007eae:	68bb      	ldr	r3, [r7, #8]
10007eb0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
10007eb4:	2b00      	cmp	r3, #0
10007eb6:	d009      	beq.n	10007ecc <rpmsg_create_ept+0xd4>
	    ept->dest_addr == RPMSG_ADDR_ANY)
10007eb8:	68fb      	ldr	r3, [r7, #12]
10007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	if (ept->name[0] && rdev->support_ns &&
10007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
10007ec0:	d104      	bne.n	10007ecc <rpmsg_create_ept+0xd4>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
10007ec2:	2100      	movs	r1, #0
10007ec4:	68f8      	ldr	r0, [r7, #12]
10007ec6:	f7ff fed1 	bl	10007c6c <rpmsg_send_ns_message>
10007eca:	6178      	str	r0, [r7, #20]

	if (status)
10007ecc:	697b      	ldr	r3, [r7, #20]
10007ece:	2b00      	cmp	r3, #0
10007ed0:	d002      	beq.n	10007ed8 <rpmsg_create_ept+0xe0>
		rpmsg_unregister_endpoint(ept);
10007ed2:	68f8      	ldr	r0, [r7, #12]
10007ed4:	f7ff ff52 	bl	10007d7c <rpmsg_unregister_endpoint>
	return status;
10007ed8:	697b      	ldr	r3, [r7, #20]
10007eda:	e006      	b.n	10007eea <rpmsg_create_ept+0xf2>
			goto ret_status;
10007edc:	bf00      	nop

ret_status:
	metal_mutex_release(&rdev->lock);
10007ede:	68bb      	ldr	r3, [r7, #8]
10007ee0:	3358      	adds	r3, #88	@ 0x58
10007ee2:	4618      	mov	r0, r3
10007ee4:	f7ff fd24 	bl	10007930 <metal_mutex_release>
	return status;
10007ee8:	697b      	ldr	r3, [r7, #20]
}
10007eea:	4618      	mov	r0, r3
10007eec:	3718      	adds	r7, #24
10007eee:	46bd      	mov	sp, r7
10007ef0:	bd80      	pop	{r7, pc}
10007ef2:	bf00      	nop
10007ef4:	fffff82d 	.word	0xfffff82d
10007ef8:	fffff829 	.word	0xfffff829

10007efc <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
10007efc:	b480      	push	{r7}
10007efe:	b083      	sub	sp, #12
10007f00:	af00      	add	r7, sp, #0
10007f02:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
10007f04:	2300      	movs	r3, #0
}
10007f06:	4618      	mov	r0, r3
10007f08:	370c      	adds	r7, #12
10007f0a:	46bd      	mov	sp, r7
10007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
10007f10:	4770      	bx	lr

10007f12 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
10007f12:	b580      	push	{r7, lr}
10007f14:	b082      	sub	sp, #8
10007f16:	af00      	add	r7, sp, #0
10007f18:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
10007f1a:	6878      	ldr	r0, [r7, #4]
10007f1c:	f7ff ffee 	bl	10007efc <__metal_sleep_usec>
10007f20:	4603      	mov	r3, r0
}
10007f22:	4618      	mov	r0, r3
10007f24:	3708      	adds	r7, #8
10007f26:	46bd      	mov	sp, r7
10007f28:	bd80      	pop	{r7, pc}

10007f2a <metal_list_init>:
{
10007f2a:	b480      	push	{r7}
10007f2c:	b083      	sub	sp, #12
10007f2e:	af00      	add	r7, sp, #0
10007f30:	6078      	str	r0, [r7, #4]
	list->prev = list;
10007f32:	687b      	ldr	r3, [r7, #4]
10007f34:	687a      	ldr	r2, [r7, #4]
10007f36:	605a      	str	r2, [r3, #4]
	list->next = list;
10007f38:	687b      	ldr	r3, [r7, #4]
10007f3a:	687a      	ldr	r2, [r7, #4]
10007f3c:	601a      	str	r2, [r3, #0]
}
10007f3e:	bf00      	nop
10007f40:	370c      	adds	r7, #12
10007f42:	46bd      	mov	sp, r7
10007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
10007f48:	4770      	bx	lr

10007f4a <metal_io_virt_to_offset>:
{
10007f4a:	b480      	push	{r7}
10007f4c:	b085      	sub	sp, #20
10007f4e:	af00      	add	r7, sp, #0
10007f50:	6078      	str	r0, [r7, #4]
10007f52:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10007f54:	683b      	ldr	r3, [r7, #0]
10007f56:	687a      	ldr	r2, [r7, #4]
10007f58:	6812      	ldr	r2, [r2, #0]
10007f5a:	1a9b      	subs	r3, r3, r2
10007f5c:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007f5e:	687b      	ldr	r3, [r7, #4]
10007f60:	689b      	ldr	r3, [r3, #8]
10007f62:	68fa      	ldr	r2, [r7, #12]
10007f64:	429a      	cmp	r2, r3
10007f66:	d201      	bcs.n	10007f6c <metal_io_virt_to_offset+0x22>
10007f68:	68fb      	ldr	r3, [r7, #12]
10007f6a:	e001      	b.n	10007f70 <metal_io_virt_to_offset+0x26>
10007f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
10007f70:	4618      	mov	r0, r3
10007f72:	3714      	adds	r7, #20
10007f74:	46bd      	mov	sp, r7
10007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
10007f7a:	4770      	bx	lr

10007f7c <__metal_mutex_init>:
{
10007f7c:	b480      	push	{r7}
10007f7e:	b085      	sub	sp, #20
10007f80:	af00      	add	r7, sp, #0
10007f82:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10007f84:	687b      	ldr	r3, [r7, #4]
10007f86:	60fb      	str	r3, [r7, #12]
10007f88:	2300      	movs	r3, #0
10007f8a:	60bb      	str	r3, [r7, #8]
10007f8c:	68bb      	ldr	r3, [r7, #8]
10007f8e:	461a      	mov	r2, r3
10007f90:	68fb      	ldr	r3, [r7, #12]
10007f92:	f3bf 8f5b 	dmb	ish
10007f96:	601a      	str	r2, [r3, #0]
10007f98:	f3bf 8f5b 	dmb	ish
}
10007f9c:	bf00      	nop
10007f9e:	3714      	adds	r7, #20
10007fa0:	46bd      	mov	sp, r7
10007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
10007fa6:	4770      	bx	lr

10007fa8 <__metal_mutex_acquire>:
{
10007fa8:	b490      	push	{r4, r7}
10007faa:	b086      	sub	sp, #24
10007fac:	af00      	add	r7, sp, #0
10007fae:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10007fb0:	2300      	movs	r3, #0
10007fb2:	613b      	str	r3, [r7, #16]
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10007fb4:	bf00      	nop
10007fb6:	687b      	ldr	r3, [r7, #4]
10007fb8:	617b      	str	r3, [r7, #20]
10007fba:	2301      	movs	r3, #1
10007fbc:	60fb      	str	r3, [r7, #12]
10007fbe:	68fb      	ldr	r3, [r7, #12]
10007fc0:	461c      	mov	r4, r3
10007fc2:	697a      	ldr	r2, [r7, #20]
10007fc4:	f107 0310 	add.w	r3, r7, #16
10007fc8:	6818      	ldr	r0, [r3, #0]
10007fca:	f3bf 8f5b 	dmb	ish
10007fce:	e852 1f00 	ldrex	r1, [r2]
10007fd2:	4281      	cmp	r1, r0
10007fd4:	d103      	bne.n	10007fde <__metal_mutex_acquire+0x36>
10007fd6:	e842 4c00 	strex	ip, r4, [r2]
10007fda:	f1bc 0f00 	cmp.w	ip, #0
10007fde:	f3bf 8f5b 	dmb	ish
10007fe2:	bf0c      	ite	eq
10007fe4:	2201      	moveq	r2, #1
10007fe6:	2200      	movne	r2, #0
10007fe8:	2a00      	cmp	r2, #0
10007fea:	d100      	bne.n	10007fee <__metal_mutex_acquire+0x46>
10007fec:	6019      	str	r1, [r3, #0]
10007fee:	4613      	mov	r3, r2
10007ff0:	f083 0301 	eor.w	r3, r3, #1
10007ff4:	b2db      	uxtb	r3, r3
10007ff6:	2b00      	cmp	r3, #0
10007ff8:	d1dd      	bne.n	10007fb6 <__metal_mutex_acquire+0xe>
}
10007ffa:	bf00      	nop
10007ffc:	bf00      	nop
10007ffe:	3718      	adds	r7, #24
10008000:	46bd      	mov	sp, r7
10008002:	bc90      	pop	{r4, r7}
10008004:	4770      	bx	lr

10008006 <__metal_mutex_release>:
{
10008006:	b480      	push	{r7}
10008008:	b085      	sub	sp, #20
1000800a:	af00      	add	r7, sp, #0
1000800c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000800e:	687b      	ldr	r3, [r7, #4]
10008010:	60fb      	str	r3, [r7, #12]
10008012:	2300      	movs	r3, #0
10008014:	60bb      	str	r3, [r7, #8]
10008016:	68bb      	ldr	r3, [r7, #8]
10008018:	461a      	mov	r2, r3
1000801a:	68fb      	ldr	r3, [r7, #12]
1000801c:	f3bf 8f5b 	dmb	ish
10008020:	601a      	str	r2, [r3, #0]
10008022:	f3bf 8f5b 	dmb	ish
}
10008026:	bf00      	nop
10008028:	3714      	adds	r7, #20
1000802a:	46bd      	mov	sp, r7
1000802c:	f85d 7b04 	ldr.w	r7, [sp], #4
10008030:	4770      	bx	lr

10008032 <metal_mutex_init>:
{
10008032:	b580      	push	{r7, lr}
10008034:	b082      	sub	sp, #8
10008036:	af00      	add	r7, sp, #0
10008038:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000803a:	6878      	ldr	r0, [r7, #4]
1000803c:	f7ff ff9e 	bl	10007f7c <__metal_mutex_init>
}
10008040:	bf00      	nop
10008042:	3708      	adds	r7, #8
10008044:	46bd      	mov	sp, r7
10008046:	bd80      	pop	{r7, pc}

10008048 <metal_mutex_acquire>:
{
10008048:	b580      	push	{r7, lr}
1000804a:	b082      	sub	sp, #8
1000804c:	af00      	add	r7, sp, #0
1000804e:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
10008050:	6878      	ldr	r0, [r7, #4]
10008052:	f7ff ffa9 	bl	10007fa8 <__metal_mutex_acquire>
}
10008056:	bf00      	nop
10008058:	3708      	adds	r7, #8
1000805a:	46bd      	mov	sp, r7
1000805c:	bd80      	pop	{r7, pc}

1000805e <metal_mutex_release>:
{
1000805e:	b580      	push	{r7, lr}
10008060:	b082      	sub	sp, #8
10008062:	af00      	add	r7, sp, #0
10008064:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10008066:	6878      	ldr	r0, [r7, #4]
10008068:	f7ff ffcd 	bl	10008006 <__metal_mutex_release>
}
1000806c:	bf00      	nop
1000806e:	3708      	adds	r7, #8
10008070:	46bd      	mov	sp, r7
10008072:	bd80      	pop	{r7, pc}

10008074 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
10008074:	b480      	push	{r7}
10008076:	b083      	sub	sp, #12
10008078:	af00      	add	r7, sp, #0
1000807a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
1000807c:	687b      	ldr	r3, [r7, #4]
1000807e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10008080:	699b      	ldr	r3, [r3, #24]
}
10008082:	4618      	mov	r0, r3
10008084:	370c      	adds	r7, #12
10008086:	46bd      	mov	sp, r7
10008088:	f85d 7b04 	ldr.w	r7, [sp], #4
1000808c:	4770      	bx	lr

1000808e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000808e:	b580      	push	{r7, lr}
10008090:	b082      	sub	sp, #8
10008092:	af00      	add	r7, sp, #0
10008094:	6078      	str	r0, [r7, #4]
10008096:	460b      	mov	r3, r1
10008098:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000809a:	687b      	ldr	r3, [r7, #4]
1000809c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000809e:	6a1b      	ldr	r3, [r3, #32]
100080a0:	685b      	ldr	r3, [r3, #4]
100080a2:	687a      	ldr	r2, [r7, #4]
100080a4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
100080a6:	78f9      	ldrb	r1, [r7, #3]
100080a8:	4610      	mov	r0, r2
100080aa:	4798      	blx	r3
}
100080ac:	bf00      	nop
100080ae:	3708      	adds	r7, #8
100080b0:	46bd      	mov	sp, r7
100080b2:	bd80      	pop	{r7, pc}

100080b4 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
100080b4:	b580      	push	{r7, lr}
100080b6:	b082      	sub	sp, #8
100080b8:	af00      	add	r7, sp, #0
100080ba:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
100080bc:	687b      	ldr	r3, [r7, #4]
100080be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100080c0:	6a1b      	ldr	r3, [r3, #32]
100080c2:	681b      	ldr	r3, [r3, #0]
100080c4:	687a      	ldr	r2, [r7, #4]
100080c6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
100080c8:	4610      	mov	r0, r2
100080ca:	4798      	blx	r3
100080cc:	4603      	mov	r3, r0
}
100080ce:	4618      	mov	r0, r3
100080d0:	3708      	adds	r7, #8
100080d2:	46bd      	mov	sp, r7
100080d4:	bd80      	pop	{r7, pc}

100080d6 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
100080d6:	b580      	push	{r7, lr}
100080d8:	b082      	sub	sp, #8
100080da:	af00      	add	r7, sp, #0
100080dc:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
100080de:	687b      	ldr	r3, [r7, #4]
100080e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100080e2:	6a1b      	ldr	r3, [r3, #32]
100080e4:	689b      	ldr	r3, [r3, #8]
100080e6:	687a      	ldr	r2, [r7, #4]
100080e8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
100080ea:	4610      	mov	r0, r2
100080ec:	4798      	blx	r3
100080ee:	4603      	mov	r3, r0
}
100080f0:	4618      	mov	r0, r3
100080f2:	3708      	adds	r7, #8
100080f4:	46bd      	mov	sp, r7
100080f6:	bd80      	pop	{r7, pc}

100080f8 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
100080f8:	b580      	push	{r7, lr}
100080fa:	b086      	sub	sp, #24
100080fc:	af02      	add	r7, sp, #8
100080fe:	60f8      	str	r0, [r7, #12]
10008100:	60b9      	str	r1, [r7, #8]
10008102:	607a      	str	r2, [r7, #4]
10008104:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
10008106:	68fb      	ldr	r3, [r7, #12]
10008108:	6f98      	ldr	r0, [r3, #120]	@ 0x78
1000810a:	68b9      	ldr	r1, [r7, #8]
1000810c:	69bb      	ldr	r3, [r7, #24]
1000810e:	9300      	str	r3, [sp, #0]
10008110:	683b      	ldr	r3, [r7, #0]
10008112:	687a      	ldr	r2, [r7, #4]
10008114:	f000 fcb4 	bl	10008a80 <virtio_create_virtqueues>
10008118:	4603      	mov	r3, r0
					callbacks);
}
1000811a:	4618      	mov	r0, r3
1000811c:	3710      	adds	r7, #16
1000811e:	46bd      	mov	sp, r7
10008120:	bd80      	pop	{r7, pc}
	...

10008124 <rpmsg_initialize_ept>:
{
10008124:	b580      	push	{r7, lr}
10008126:	b084      	sub	sp, #16
10008128:	af00      	add	r7, sp, #0
1000812a:	60f8      	str	r0, [r7, #12]
1000812c:	60b9      	str	r1, [r7, #8]
1000812e:	607a      	str	r2, [r7, #4]
10008130:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10008132:	68f8      	ldr	r0, [r7, #12]
10008134:	68bb      	ldr	r3, [r7, #8]
10008136:	2b00      	cmp	r3, #0
10008138:	d001      	beq.n	1000813e <rpmsg_initialize_ept+0x1a>
1000813a:	68bb      	ldr	r3, [r7, #8]
1000813c:	e000      	b.n	10008140 <rpmsg_initialize_ept+0x1c>
1000813e:	4b0a      	ldr	r3, [pc, #40]	@ (10008168 <rpmsg_initialize_ept+0x44>)
10008140:	2220      	movs	r2, #32
10008142:	4619      	mov	r1, r3
10008144:	f001 fc9d 	bl	10009a82 <strncpy>
	ept->addr = src;
10008148:	68fb      	ldr	r3, [r7, #12]
1000814a:	687a      	ldr	r2, [r7, #4]
1000814c:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
1000814e:	68fb      	ldr	r3, [r7, #12]
10008150:	683a      	ldr	r2, [r7, #0]
10008152:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
10008154:	68fb      	ldr	r3, [r7, #12]
10008156:	69ba      	ldr	r2, [r7, #24]
10008158:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000815a:	68fb      	ldr	r3, [r7, #12]
1000815c:	69fa      	ldr	r2, [r7, #28]
1000815e:	631a      	str	r2, [r3, #48]	@ 0x30
}
10008160:	bf00      	nop
10008162:	3710      	adds	r7, #16
10008164:	46bd      	mov	sp, r7
10008166:	bd80      	pop	{r7, pc}
10008168:	1000b0e4 	.word	0x1000b0e4

1000816c <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
1000816c:	b580      	push	{r7, lr}
1000816e:	b082      	sub	sp, #8
10008170:	af00      	add	r7, sp, #0
10008172:	6078      	str	r0, [r7, #4]
10008174:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
10008176:	f04f 33ff 	mov.w	r3, #4294967295
1000817a:	683a      	ldr	r2, [r7, #0]
1000817c:	2100      	movs	r1, #0
1000817e:	6878      	ldr	r0, [r7, #4]
10008180:	f7ff fd9c 	bl	10007cbc <rpmsg_get_endpoint>
10008184:	4603      	mov	r3, r0
}
10008186:	4618      	mov	r0, r3
10008188:	3708      	adds	r7, #8
1000818a:	46bd      	mov	sp, r7
1000818c:	bd80      	pop	{r7, pc}

1000818e <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
1000818e:	b480      	push	{r7}
10008190:	b085      	sub	sp, #20
10008192:	af00      	add	r7, sp, #0
10008194:	60f8      	str	r0, [r7, #12]
10008196:	60b9      	str	r1, [r7, #8]
10008198:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000819a:	68fb      	ldr	r3, [r7, #12]
1000819c:	2b00      	cmp	r3, #0
1000819e:	d009      	beq.n	100081b4 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
100081a0:	68fb      	ldr	r3, [r7, #12]
100081a2:	68ba      	ldr	r2, [r7, #8]
100081a4:	601a      	str	r2, [r3, #0]
	shpool->size = size;
100081a6:	68fb      	ldr	r3, [r7, #12]
100081a8:	687a      	ldr	r2, [r7, #4]
100081aa:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
100081ac:	68fb      	ldr	r3, [r7, #12]
100081ae:	687a      	ldr	r2, [r7, #4]
100081b0:	605a      	str	r2, [r3, #4]
100081b2:	e000      	b.n	100081b6 <rpmsg_virtio_init_shm_pool+0x28>
		return;
100081b4:	bf00      	nop
}
100081b6:	3714      	adds	r7, #20
100081b8:	46bd      	mov	sp, r7
100081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100081be:	4770      	bx	lr

100081c0 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
100081c0:	b580      	push	{r7, lr}
100081c2:	b086      	sub	sp, #24
100081c4:	af00      	add	r7, sp, #0
100081c6:	60f8      	str	r0, [r7, #12]
100081c8:	60b9      	str	r1, [r7, #8]
100081ca:	607a      	str	r2, [r7, #4]
100081cc:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
100081ce:	68f8      	ldr	r0, [r7, #12]
100081d0:	f7ff ff50 	bl	10008074 <rpmsg_virtio_get_role>
100081d4:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100081d6:	697b      	ldr	r3, [r7, #20]
100081d8:	2b01      	cmp	r3, #1
100081da:	d106      	bne.n	100081ea <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
100081dc:	68fb      	ldr	r3, [r7, #12]
100081de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100081e0:	8879      	ldrh	r1, [r7, #2]
100081e2:	687a      	ldr	r2, [r7, #4]
100081e4:	4618      	mov	r0, r3
100081e6:	f000 fe1d 	bl	10008e24 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
100081ea:	bf00      	nop
100081ec:	3718      	adds	r7, #24
100081ee:	46bd      	mov	sp, r7
100081f0:	bd80      	pop	{r7, pc}

100081f2 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
100081f2:	b580      	push	{r7, lr}
100081f4:	b086      	sub	sp, #24
100081f6:	af00      	add	r7, sp, #0
100081f8:	60f8      	str	r0, [r7, #12]
100081fa:	60b9      	str	r1, [r7, #8]
100081fc:	607a      	str	r2, [r7, #4]
100081fe:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008200:	68f8      	ldr	r0, [r7, #12]
10008202:	f7ff ff37 	bl	10008074 <rpmsg_virtio_get_role>
10008206:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10008208:	697b      	ldr	r3, [r7, #20]
1000820a:	2b01      	cmp	r3, #1
1000820c:	d109      	bne.n	10008222 <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000820e:	68fb      	ldr	r3, [r7, #12]
10008210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008214:	8879      	ldrh	r1, [r7, #2]
10008216:	687a      	ldr	r2, [r7, #4]
10008218:	4618      	mov	r0, r3
1000821a:	f000 fe03 	bl	10008e24 <virtqueue_add_consumed_buffer>
1000821e:	4603      	mov	r3, r0
10008220:	e000      	b.n	10008224 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
10008222:	2300      	movs	r3, #0
}
10008224:	4618      	mov	r0, r3
10008226:	3718      	adds	r7, #24
10008228:	46bd      	mov	sp, r7
1000822a:	bd80      	pop	{r7, pc}

1000822c <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000822c:	b580      	push	{r7, lr}
1000822e:	b086      	sub	sp, #24
10008230:	af00      	add	r7, sp, #0
10008232:	60f8      	str	r0, [r7, #12]
10008234:	60b9      	str	r1, [r7, #8]
10008236:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008238:	68f8      	ldr	r0, [r7, #12]
1000823a:	f7ff ff1b 	bl	10008074 <rpmsg_virtio_get_role>
1000823e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10008240:	2300      	movs	r3, #0
10008242:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10008244:	693b      	ldr	r3, [r7, #16]
10008246:	2b01      	cmp	r3, #1
10008248:	d108      	bne.n	1000825c <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
1000824a:	68fb      	ldr	r3, [r7, #12]
1000824c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008250:	68ba      	ldr	r2, [r7, #8]
10008252:	6879      	ldr	r1, [r7, #4]
10008254:	4618      	mov	r0, r3
10008256:	f000 fd9d 	bl	10008d94 <virtqueue_get_available_buffer>
1000825a:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
1000825c:	697b      	ldr	r3, [r7, #20]
}
1000825e:	4618      	mov	r0, r3
10008260:	3718      	adds	r7, #24
10008262:	46bd      	mov	sp, r7
10008264:	bd80      	pop	{r7, pc}

10008266 <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10008266:	b580      	push	{r7, lr}
10008268:	b086      	sub	sp, #24
1000826a:	af00      	add	r7, sp, #0
1000826c:	60f8      	str	r0, [r7, #12]
1000826e:	60b9      	str	r1, [r7, #8]
10008270:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008272:	68f8      	ldr	r0, [r7, #12]
10008274:	f7ff fefe 	bl	10008074 <rpmsg_virtio_get_role>
10008278:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000827a:	2300      	movs	r3, #0
1000827c:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000827e:	693b      	ldr	r3, [r7, #16]
10008280:	2b01      	cmp	r3, #1
10008282:	d107      	bne.n	10008294 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
10008284:	68fb      	ldr	r3, [r7, #12]
10008286:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10008288:	68ba      	ldr	r2, [r7, #8]
1000828a:	6879      	ldr	r1, [r7, #4]
1000828c:	4618      	mov	r0, r3
1000828e:	f000 fd81 	bl	10008d94 <virtqueue_get_available_buffer>
10008292:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
10008294:	697b      	ldr	r3, [r7, #20]
}
10008296:	4618      	mov	r0, r3
10008298:	3718      	adds	r7, #24
1000829a:	46bd      	mov	sp, r7
1000829c:	bd80      	pop	{r7, pc}

1000829e <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000829e:	b580      	push	{r7, lr}
100082a0:	b084      	sub	sp, #16
100082a2:	af00      	add	r7, sp, #0
100082a4:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
100082a6:	6878      	ldr	r0, [r7, #4]
100082a8:	f7ff ff04 	bl	100080b4 <rpmsg_virtio_get_status>
100082ac:	4603      	mov	r3, r0
100082ae:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
100082b0:	7bfb      	ldrb	r3, [r7, #15]
100082b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100082b6:	2b00      	cmp	r3, #0
100082b8:	d004      	beq.n	100082c4 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
100082ba:	2100      	movs	r1, #0
100082bc:	6878      	ldr	r0, [r7, #4]
100082be:	f7ff fee6 	bl	1000808e <rpmsg_virtio_set_status>
100082c2:	e7f0      	b.n	100082a6 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
100082c4:	7bfb      	ldrb	r3, [r7, #15]
100082c6:	f003 0304 	and.w	r3, r3, #4
100082ca:	2b00      	cmp	r3, #0
100082cc:	d0eb      	beq.n	100082a6 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
100082ce:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
100082d0:	4618      	mov	r0, r3
100082d2:	3710      	adds	r7, #16
100082d4:	46bd      	mov	sp, r7
100082d6:	bd80      	pop	{r7, pc}

100082d8 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
100082d8:	b480      	push	{r7}
100082da:	b085      	sub	sp, #20
100082dc:	af00      	add	r7, sp, #0
100082de:	6078      	str	r0, [r7, #4]
100082e0:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
100082e2:	683b      	ldr	r3, [r7, #0]
100082e4:	3b10      	subs	r3, #16
100082e6:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
100082e8:	68fb      	ldr	r3, [r7, #12]
100082ea:	689b      	ldr	r3, [r3, #8]
100082ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
100082f0:	68fb      	ldr	r3, [r7, #12]
100082f2:	609a      	str	r2, [r3, #8]
}
100082f4:	bf00      	nop
100082f6:	3714      	adds	r7, #20
100082f8:	46bd      	mov	sp, r7
100082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100082fe:	4770      	bx	lr

10008300 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
10008300:	b580      	push	{r7, lr}
10008302:	b086      	sub	sp, #24
10008304:	af00      	add	r7, sp, #0
10008306:	6078      	str	r0, [r7, #4]
10008308:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000830a:	687b      	ldr	r3, [r7, #4]
1000830c:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000830e:	683b      	ldr	r3, [r7, #0]
10008310:	3b10      	subs	r3, #16
10008312:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
10008314:	693b      	ldr	r3, [r7, #16]
10008316:	689b      	ldr	r3, [r3, #8]
10008318:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
1000831a:	687b      	ldr	r3, [r7, #4]
1000831c:	3358      	adds	r3, #88	@ 0x58
1000831e:	4618      	mov	r0, r3
10008320:	f7ff fe92 	bl	10008048 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
10008324:	697b      	ldr	r3, [r7, #20]
10008326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10008328:	89fa      	ldrh	r2, [r7, #14]
1000832a:	4611      	mov	r1, r2
1000832c:	4618      	mov	r0, r3
1000832e:	f000 fd1f 	bl	10008d70 <virtqueue_get_buffer_length>
10008332:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10008334:	89fb      	ldrh	r3, [r7, #14]
10008336:	68ba      	ldr	r2, [r7, #8]
10008338:	6939      	ldr	r1, [r7, #16]
1000833a:	6978      	ldr	r0, [r7, #20]
1000833c:	f7ff ff40 	bl	100081c0 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
10008340:	687b      	ldr	r3, [r7, #4]
10008342:	3358      	adds	r3, #88	@ 0x58
10008344:	4618      	mov	r0, r3
10008346:	f7ff fe8a 	bl	1000805e <metal_mutex_release>
}
1000834a:	bf00      	nop
1000834c:	3718      	adds	r7, #24
1000834e:	46bd      	mov	sp, r7
10008350:	bd80      	pop	{r7, pc}

10008352 <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
10008352:	b580      	push	{r7, lr}
10008354:	b08a      	sub	sp, #40	@ 0x28
10008356:	af00      	add	r7, sp, #0
10008358:	60f8      	str	r0, [r7, #12]
1000835a:	60b9      	str	r1, [r7, #8]
1000835c:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000835e:	68fb      	ldr	r3, [r7, #12]
10008360:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
10008362:	6a38      	ldr	r0, [r7, #32]
10008364:	f7ff fea6 	bl	100080b4 <rpmsg_virtio_get_status>
10008368:	4603      	mov	r3, r0
1000836a:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
1000836c:	69fb      	ldr	r3, [r7, #28]
1000836e:	f003 0304 	and.w	r3, r3, #4
10008372:	2b00      	cmp	r3, #0
10008374:	d101      	bne.n	1000837a <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
10008376:	2300      	movs	r3, #0
10008378:	e039      	b.n	100083ee <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
1000837a:	687b      	ldr	r3, [r7, #4]
1000837c:	2b00      	cmp	r3, #0
1000837e:	d003      	beq.n	10008388 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
10008380:	f643 2398 	movw	r3, #15000	@ 0x3a98
10008384:	627b      	str	r3, [r7, #36]	@ 0x24
10008386:	e001      	b.n	1000838c <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
10008388:	2300      	movs	r3, #0
1000838a:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
1000838c:	68fb      	ldr	r3, [r7, #12]
1000838e:	3358      	adds	r3, #88	@ 0x58
10008390:	4618      	mov	r0, r3
10008392:	f7ff fe59 	bl	10008048 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
10008396:	f107 0316 	add.w	r3, r7, #22
1000839a:	461a      	mov	r2, r3
1000839c:	68b9      	ldr	r1, [r7, #8]
1000839e:	6a38      	ldr	r0, [r7, #32]
100083a0:	f7ff ff44 	bl	1000822c <rpmsg_virtio_get_tx_buffer>
100083a4:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
100083a6:	68fb      	ldr	r3, [r7, #12]
100083a8:	3358      	adds	r3, #88	@ 0x58
100083aa:	4618      	mov	r0, r3
100083ac:	f7ff fe57 	bl	1000805e <metal_mutex_release>
		if (rp_hdr || !tick_count)
100083b0:	69bb      	ldr	r3, [r7, #24]
100083b2:	2b00      	cmp	r3, #0
100083b4:	d10a      	bne.n	100083cc <rpmsg_virtio_get_tx_payload_buffer+0x7a>
100083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100083b8:	2b00      	cmp	r3, #0
100083ba:	d007      	beq.n	100083cc <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
100083bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
100083c0:	f7ff fda7 	bl	10007f12 <metal_sleep_usec>
		tick_count--;
100083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100083c6:	3b01      	subs	r3, #1
100083c8:	627b      	str	r3, [r7, #36]	@ 0x24
		metal_mutex_acquire(&rdev->lock);
100083ca:	e7df      	b.n	1000838c <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
100083cc:	69bb      	ldr	r3, [r7, #24]
100083ce:	2b00      	cmp	r3, #0
100083d0:	d101      	bne.n	100083d6 <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
100083d2:	2300      	movs	r3, #0
100083d4:	e00b      	b.n	100083ee <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
100083d6:	8afb      	ldrh	r3, [r7, #22]
100083d8:	461a      	mov	r2, r3
100083da:	69bb      	ldr	r3, [r7, #24]
100083dc:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
100083de:	68bb      	ldr	r3, [r7, #8]
100083e0:	681b      	ldr	r3, [r3, #0]
100083e2:	f1a3 0210 	sub.w	r2, r3, #16
100083e6:	68bb      	ldr	r3, [r7, #8]
100083e8:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
100083ea:	69bb      	ldr	r3, [r7, #24]
100083ec:	3310      	adds	r3, #16
}
100083ee:	4618      	mov	r0, r3
100083f0:	3728      	adds	r7, #40	@ 0x28
100083f2:	46bd      	mov	sp, r7
100083f4:	bd80      	pop	{r7, pc}
	...

100083f8 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
100083f8:	b580      	push	{r7, lr}
100083fa:	b08e      	sub	sp, #56	@ 0x38
100083fc:	af00      	add	r7, sp, #0
100083fe:	60f8      	str	r0, [r7, #12]
10008400:	60b9      	str	r1, [r7, #8]
10008402:	607a      	str	r2, [r7, #4]
10008404:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10008406:	68fb      	ldr	r3, [r7, #12]
10008408:	637b      	str	r3, [r7, #52]	@ 0x34

	hdr = RPMSG_LOCATE_HDR(data);
1000840a:	683b      	ldr	r3, [r7, #0]
1000840c:	3b10      	subs	r3, #16
1000840e:	633b      	str	r3, [r7, #48]	@ 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
10008410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008412:	689b      	ldr	r3, [r3, #8]
10008414:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
10008416:	687b      	ldr	r3, [r7, #4]
10008418:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
1000841a:	68bb      	ldr	r3, [r7, #8]
1000841c:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000841e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10008420:	b29b      	uxth	r3, r3
10008422:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
10008424:	2300      	movs	r3, #0
10008426:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
10008428:	2300      	movs	r3, #0
1000842a:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
1000842c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000842e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10008432:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
10008434:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10008436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10008438:	f7ff fd87 	bl	10007f4a <metal_io_virt_to_offset>
1000843c:	4601      	mov	r1, r0
1000843e:	f107 0210 	add.w	r2, r7, #16
10008442:	2310      	movs	r3, #16
10008444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10008446:	f7fe feb3 	bl	100071b0 <metal_io_block_write>
1000844a:	6278      	str	r0, [r7, #36]	@ 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000844c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000844e:	2b10      	cmp	r3, #16
10008450:	d006      	beq.n	10008460 <rpmsg_virtio_send_offchannel_nocopy+0x68>
10008452:	4b1b      	ldr	r3, [pc, #108]	@ (100084c0 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
10008454:	4a1b      	ldr	r2, [pc, #108]	@ (100084c4 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10008456:	f240 117d 	movw	r1, #381	@ 0x17d
1000845a:	481b      	ldr	r0, [pc, #108]	@ (100084c8 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000845c:	f001 f832 	bl	100094c4 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
10008460:	68fb      	ldr	r3, [r7, #12]
10008462:	3358      	adds	r3, #88	@ 0x58
10008464:	4618      	mov	r0, r3
10008466:	f7ff fdef 	bl	10008048 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
1000846a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008470:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
10008472:	4611      	mov	r1, r2
10008474:	4618      	mov	r0, r3
10008476:	f000 fc7b 	bl	10008d70 <virtqueue_get_buffer_length>
1000847a:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
1000847c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
1000847e:	6a3a      	ldr	r2, [r7, #32]
10008480:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10008482:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10008484:	f7ff feb5 	bl	100081f2 <rpmsg_virtio_enqueue_buffer>
10008488:	6278      	str	r0, [r7, #36]	@ 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
1000848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000848c:	2b00      	cmp	r3, #0
1000848e:	d006      	beq.n	1000849e <rpmsg_virtio_send_offchannel_nocopy+0xa6>
10008490:	4b0e      	ldr	r3, [pc, #56]	@ (100084cc <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
10008492:	4a0c      	ldr	r2, [pc, #48]	@ (100084c4 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10008494:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
10008498:	480b      	ldr	r0, [pc, #44]	@ (100084c8 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000849a:	f001 f813 	bl	100094c4 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
1000849e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100084a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100084a4:	4618      	mov	r0, r3
100084a6:	f000 fd37 	bl	10008f18 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
100084aa:	68fb      	ldr	r3, [r7, #12]
100084ac:	3358      	adds	r3, #88	@ 0x58
100084ae:	4618      	mov	r0, r3
100084b0:	f7ff fdd5 	bl	1000805e <metal_mutex_release>

	return len;
100084b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
100084b6:	4618      	mov	r0, r3
100084b8:	3738      	adds	r7, #56	@ 0x38
100084ba:	46bd      	mov	sp, r7
100084bc:	bd80      	pop	{r7, pc}
100084be:	bf00      	nop
100084c0:	1000b0e8 	.word	0x1000b0e8
100084c4:	1000b234 	.word	0x1000b234
100084c8:	1000b104 	.word	0x1000b104
100084cc:	1000b17c 	.word	0x1000b17c

100084d0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
100084d0:	b580      	push	{r7, lr}
100084d2:	b08c      	sub	sp, #48	@ 0x30
100084d4:	af02      	add	r7, sp, #8
100084d6:	60f8      	str	r0, [r7, #12]
100084d8:	60b9      	str	r1, [r7, #8]
100084da:	607a      	str	r2, [r7, #4]
100084dc:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
100084de:	68fb      	ldr	r3, [r7, #12]
100084e0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
100084e2:	f107 0314 	add.w	r3, r7, #20
100084e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100084e8:	4619      	mov	r1, r3
100084ea:	68f8      	ldr	r0, [r7, #12]
100084ec:	f7ff ff31 	bl	10008352 <rpmsg_virtio_get_tx_payload_buffer>
100084f0:	6238      	str	r0, [r7, #32]
	if (!buffer)
100084f2:	6a3b      	ldr	r3, [r7, #32]
100084f4:	2b00      	cmp	r3, #0
100084f6:	d101      	bne.n	100084fc <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
100084f8:	4b17      	ldr	r3, [pc, #92]	@ (10008558 <rpmsg_virtio_send_offchannel_raw+0x88>)
100084fa:	e029      	b.n	10008550 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
100084fc:	697b      	ldr	r3, [r7, #20]
100084fe:	461a      	mov	r2, r3
10008500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008502:	4293      	cmp	r3, r2
10008504:	dd01      	ble.n	1000850a <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
10008506:	697b      	ldr	r3, [r7, #20]
10008508:	633b      	str	r3, [r7, #48]	@ 0x30
	io = rvdev->shbuf_io;
1000850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000850c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10008510:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
10008512:	6a39      	ldr	r1, [r7, #32]
10008514:	69f8      	ldr	r0, [r7, #28]
10008516:	f7ff fd18 	bl	10007f4a <metal_io_virt_to_offset>
1000851a:	4601      	mov	r1, r0
1000851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000851e:	683a      	ldr	r2, [r7, #0]
10008520:	69f8      	ldr	r0, [r7, #28]
10008522:	f7fe fe45 	bl	100071b0 <metal_io_block_write>
10008526:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10008528:	69ba      	ldr	r2, [r7, #24]
1000852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000852c:	429a      	cmp	r2, r3
1000852e:	d006      	beq.n	1000853e <rpmsg_virtio_send_offchannel_raw+0x6e>
10008530:	4b0a      	ldr	r3, [pc, #40]	@ (1000855c <rpmsg_virtio_send_offchannel_raw+0x8c>)
10008532:	4a0b      	ldr	r2, [pc, #44]	@ (10008560 <rpmsg_virtio_send_offchannel_raw+0x90>)
10008534:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
10008538:	480a      	ldr	r0, [pc, #40]	@ (10008564 <rpmsg_virtio_send_offchannel_raw+0x94>)
1000853a:	f000 ffc3 	bl	100094c4 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
1000853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008540:	9300      	str	r3, [sp, #0]
10008542:	6a3b      	ldr	r3, [r7, #32]
10008544:	687a      	ldr	r2, [r7, #4]
10008546:	68b9      	ldr	r1, [r7, #8]
10008548:	68f8      	ldr	r0, [r7, #12]
1000854a:	f7ff ff55 	bl	100083f8 <rpmsg_virtio_send_offchannel_nocopy>
1000854e:	4603      	mov	r3, r0
}
10008550:	4618      	mov	r0, r3
10008552:	3728      	adds	r7, #40	@ 0x28
10008554:	46bd      	mov	sp, r7
10008556:	bd80      	pop	{r7, pc}
10008558:	fffff82e 	.word	0xfffff82e
1000855c:	1000b188 	.word	0x1000b188
10008560:	1000b258 	.word	0x1000b258
10008564:	1000b104 	.word	0x1000b104

10008568 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
10008568:	b480      	push	{r7}
1000856a:	b083      	sub	sp, #12
1000856c:	af00      	add	r7, sp, #0
1000856e:	6078      	str	r0, [r7, #4]
	(void)vq;
}
10008570:	bf00      	nop
10008572:	370c      	adds	r7, #12
10008574:	46bd      	mov	sp, r7
10008576:	f85d 7b04 	ldr.w	r7, [sp], #4
1000857a:	4770      	bx	lr

1000857c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
1000857c:	b590      	push	{r4, r7, lr}
1000857e:	b08d      	sub	sp, #52	@ 0x34
10008580:	af02      	add	r7, sp, #8
10008582:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
10008584:	687b      	ldr	r3, [r7, #4]
10008586:	681b      	ldr	r3, [r3, #0]
10008588:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000858a:	6a3b      	ldr	r3, [r7, #32]
1000858c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000858e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
10008590:	69fb      	ldr	r3, [r7, #28]
10008592:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
10008594:	69bb      	ldr	r3, [r7, #24]
10008596:	3358      	adds	r3, #88	@ 0x58
10008598:	4618      	mov	r0, r3
1000859a:	f7ff fd55 	bl	10008048 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000859e:	f107 020a 	add.w	r2, r7, #10
100085a2:	f107 030c 	add.w	r3, r7, #12
100085a6:	4619      	mov	r1, r3
100085a8:	69f8      	ldr	r0, [r7, #28]
100085aa:	f7ff fe5c 	bl	10008266 <rpmsg_virtio_get_rx_buffer>
100085ae:	6278      	str	r0, [r7, #36]	@ 0x24

	metal_mutex_release(&rdev->lock);
100085b0:	69bb      	ldr	r3, [r7, #24]
100085b2:	3358      	adds	r3, #88	@ 0x58
100085b4:	4618      	mov	r0, r3
100085b6:	f7ff fd52 	bl	1000805e <metal_mutex_release>

	while (rp_hdr) {
100085ba:	e062      	b.n	10008682 <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
100085bc:	897b      	ldrh	r3, [r7, #10]
100085be:	461a      	mov	r2, r3
100085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100085c2:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
100085c4:	69bb      	ldr	r3, [r7, #24]
100085c6:	3358      	adds	r3, #88	@ 0x58
100085c8:	4618      	mov	r0, r3
100085ca:	f7ff fd3d 	bl	10008048 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
100085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100085d0:	685b      	ldr	r3, [r3, #4]
100085d2:	4619      	mov	r1, r3
100085d4:	69b8      	ldr	r0, [r7, #24]
100085d6:	f7ff fdc9 	bl	1000816c <rpmsg_get_ept_from_addr>
100085da:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
100085dc:	69bb      	ldr	r3, [r7, #24]
100085de:	3358      	adds	r3, #88	@ 0x58
100085e0:	4618      	mov	r0, r3
100085e2:	f7ff fd3c 	bl	1000805e <metal_mutex_release>

		if (ept) {
100085e6:	697b      	ldr	r3, [r7, #20]
100085e8:	2b00      	cmp	r3, #0
100085ea:	d025      	beq.n	10008638 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
100085ec:	697b      	ldr	r3, [r7, #20]
100085ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100085f0:	f1b3 3fff 	cmp.w	r3, #4294967295
100085f4:	d103      	bne.n	100085fe <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
100085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100085f8:	681a      	ldr	r2, [r3, #0]
100085fa:	697b      	ldr	r3, [r7, #20]
100085fc:	629a      	str	r2, [r3, #40]	@ 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
100085fe:	697b      	ldr	r3, [r7, #20]
10008600:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
10008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008604:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
10008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000860a:	899b      	ldrh	r3, [r3, #12]
1000860c:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000860e:	4618      	mov	r0, r3
10008610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008612:	681a      	ldr	r2, [r3, #0]
10008614:	697b      	ldr	r3, [r7, #20]
10008616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10008618:	9300      	str	r3, [sp, #0]
1000861a:	4613      	mov	r3, r2
1000861c:	4602      	mov	r2, r0
1000861e:	6978      	ldr	r0, [r7, #20]
10008620:	47a0      	blx	r4
10008622:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
10008624:	693b      	ldr	r3, [r7, #16]
10008626:	2b00      	cmp	r3, #0
10008628:	da06      	bge.n	10008638 <rpmsg_virtio_rx_callback+0xbc>
1000862a:	4b1a      	ldr	r3, [pc, #104]	@ (10008694 <rpmsg_virtio_rx_callback+0x118>)
1000862c:	4a1a      	ldr	r2, [pc, #104]	@ (10008698 <rpmsg_virtio_rx_callback+0x11c>)
1000862e:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
10008632:	481a      	ldr	r0, [pc, #104]	@ (1000869c <rpmsg_virtio_rx_callback+0x120>)
10008634:	f000 ff46 	bl	100094c4 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
10008638:	69bb      	ldr	r3, [r7, #24]
1000863a:	3358      	adds	r3, #88	@ 0x58
1000863c:	4618      	mov	r0, r3
1000863e:	f7ff fd03 	bl	10008048 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
10008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008644:	689b      	ldr	r3, [r3, #8]
10008646:	2b00      	cmp	r3, #0
10008648:	db05      	blt.n	10008656 <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000864a:	68fa      	ldr	r2, [r7, #12]
1000864c:	897b      	ldrh	r3, [r7, #10]
1000864e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10008650:	69f8      	ldr	r0, [r7, #28]
10008652:	f7ff fdb5 	bl	100081c0 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10008656:	f107 020a 	add.w	r2, r7, #10
1000865a:	f107 030c 	add.w	r3, r7, #12
1000865e:	4619      	mov	r1, r3
10008660:	69f8      	ldr	r0, [r7, #28]
10008662:	f7ff fe00 	bl	10008266 <rpmsg_virtio_get_rx_buffer>
10008666:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!rp_hdr) {
10008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000866a:	2b00      	cmp	r3, #0
1000866c:	d104      	bne.n	10008678 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000866e:	69fb      	ldr	r3, [r7, #28]
10008670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10008672:	4618      	mov	r0, r3
10008674:	f000 fc50 	bl	10008f18 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
10008678:	69bb      	ldr	r3, [r7, #24]
1000867a:	3358      	adds	r3, #88	@ 0x58
1000867c:	4618      	mov	r0, r3
1000867e:	f7ff fcee 	bl	1000805e <metal_mutex_release>
	while (rp_hdr) {
10008682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008684:	2b00      	cmp	r3, #0
10008686:	d199      	bne.n	100085bc <rpmsg_virtio_rx_callback+0x40>
	}
}
10008688:	bf00      	nop
1000868a:	bf00      	nop
1000868c:	372c      	adds	r7, #44	@ 0x2c
1000868e:	46bd      	mov	sp, r7
10008690:	bd90      	pop	{r4, r7, pc}
10008692:	bf00      	nop
10008694:	1000b198 	.word	0x1000b198
10008698:	1000b27c 	.word	0x1000b27c
1000869c:	1000b104 	.word	0x1000b104

100086a0 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
100086a0:	b580      	push	{r7, lr}
100086a2:	b092      	sub	sp, #72	@ 0x48
100086a4:	af00      	add	r7, sp, #0
100086a6:	60f8      	str	r0, [r7, #12]
100086a8:	60b9      	str	r1, [r7, #8]
100086aa:	607a      	str	r2, [r7, #4]
100086ac:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
100086ae:	68fb      	ldr	r3, [r7, #12]
100086b0:	6a1b      	ldr	r3, [r3, #32]
100086b2:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
100086b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100086b6:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
100086b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100086ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
100086c0:	68bb      	ldr	r3, [r7, #8]
100086c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
100086c4:	687b      	ldr	r3, [r7, #4]
100086c6:	2b28      	cmp	r3, #40	@ 0x28
100086c8:	d001      	beq.n	100086ce <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
100086ca:	2300      	movs	r3, #0
100086cc:	e057      	b.n	1000877e <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
100086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
100086d0:	4619      	mov	r1, r3
100086d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
100086d4:	f7ff fc39 	bl	10007f4a <metal_io_virt_to_offset>
100086d8:	4601      	mov	r1, r0
100086da:	f107 0210 	add.w	r2, r7, #16
100086de:	2320      	movs	r3, #32
100086e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
100086e2:	f7fe fcf0 	bl	100070c6 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
100086e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100086e8:	6a1b      	ldr	r3, [r3, #32]
100086ea:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
100086ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100086ee:	3358      	adds	r3, #88	@ 0x58
100086f0:	4618      	mov	r0, r3
100086f2:	f7ff fca9 	bl	10008048 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
100086f6:	f107 0110 	add.w	r1, r7, #16
100086fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100086fc:	f04f 32ff 	mov.w	r2, #4294967295
10008700:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10008702:	f7ff fadb 	bl	10007cbc <rpmsg_get_endpoint>
10008706:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
10008708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000870c:	f003 0301 	and.w	r3, r3, #1
10008710:	2b00      	cmp	r3, #0
10008712:	d017      	beq.n	10008744 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
10008714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008716:	2b00      	cmp	r3, #0
10008718:	d003      	beq.n	10008722 <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
1000871a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000871c:	f04f 32ff 	mov.w	r2, #4294967295
10008720:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
10008722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008724:	3358      	adds	r3, #88	@ 0x58
10008726:	4618      	mov	r0, r3
10008728:	f7ff fc99 	bl	1000805e <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
1000872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000872e:	2b00      	cmp	r3, #0
10008730:	d024      	beq.n	1000877c <rpmsg_virtio_ns_callback+0xdc>
10008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008736:	2b00      	cmp	r3, #0
10008738:	d020      	beq.n	1000877c <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
1000873a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000873c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000873e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10008740:	4798      	blx	r3
10008742:	e01b      	b.n	1000877c <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
10008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008746:	2b00      	cmp	r3, #0
10008748:	d110      	bne.n	1000876c <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
1000874a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000874c:	3358      	adds	r3, #88	@ 0x58
1000874e:	4618      	mov	r0, r3
10008750:	f7ff fc85 	bl	1000805e <metal_mutex_release>
			if (rdev->ns_bind_cb)
10008754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10008758:	2b00      	cmp	r3, #0
1000875a:	d00f      	beq.n	1000877c <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
1000875c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000875e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10008760:	f107 0110 	add.w	r1, r7, #16
10008764:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008766:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10008768:	4798      	blx	r3
1000876a:	e007      	b.n	1000877c <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
1000876c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000876e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008770:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
10008772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008774:	3358      	adds	r3, #88	@ 0x58
10008776:	4618      	mov	r0, r3
10008778:	f7ff fc71 	bl	1000805e <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
1000877c:	2300      	movs	r3, #0
}
1000877e:	4618      	mov	r0, r3
10008780:	3748      	adds	r7, #72	@ 0x48
10008782:	46bd      	mov	sp, r7
10008784:	bd80      	pop	{r7, pc}
	...

10008788 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
10008788:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
1000878c:	b090      	sub	sp, #64	@ 0x40
1000878e:	af02      	add	r7, sp, #8
10008790:	60f8      	str	r0, [r7, #12]
10008792:	60b9      	str	r1, [r7, #8]
10008794:	607a      	str	r2, [r7, #4]
10008796:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
10008798:	68fb      	ldr	r3, [r7, #12]
1000879a:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
1000879c:	2278      	movs	r2, #120	@ 0x78
1000879e:	2100      	movs	r1, #0
100087a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100087a2:	f001 f947 	bl	10009a34 <memset>
	metal_mutex_init(&rdev->lock);
100087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087a8:	3358      	adds	r3, #88	@ 0x58
100087aa:	4618      	mov	r0, r3
100087ac:	f7ff fc41 	bl	10008032 <metal_mutex_init>
	rvdev->vdev = vdev;
100087b0:	68fb      	ldr	r3, [r7, #12]
100087b2:	68ba      	ldr	r2, [r7, #8]
100087b4:	679a      	str	r2, [r3, #120]	@ 0x78
	rdev->ns_bind_cb = ns_bind_cb;
100087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087b8:	687a      	ldr	r2, [r7, #4]
100087ba:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
100087bc:	68bb      	ldr	r3, [r7, #8]
100087be:	68fa      	ldr	r2, [r7, #12]
100087c0:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
100087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087c4:	4a4c      	ldr	r2, [pc, #304]	@ (100088f8 <rpmsg_init_vdev+0x170>)
100087c6:	661a      	str	r2, [r3, #96]	@ 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
100087c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087ca:	4a4c      	ldr	r2, [pc, #304]	@ (100088fc <rpmsg_init_vdev+0x174>)
100087cc:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
100087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087d0:	4a4b      	ldr	r2, [pc, #300]	@ (10008900 <rpmsg_init_vdev+0x178>)
100087d2:	669a      	str	r2, [r3, #104]	@ 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
100087d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087d6:	4a4b      	ldr	r2, [pc, #300]	@ (10008904 <rpmsg_init_vdev+0x17c>)
100087d8:	66da      	str	r2, [r3, #108]	@ 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
100087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087dc:	4a4a      	ldr	r2, [pc, #296]	@ (10008908 <rpmsg_init_vdev+0x180>)
100087de:	671a      	str	r2, [r3, #112]	@ 0x70
	role = rpmsg_virtio_get_role(rvdev);
100087e0:	68f8      	ldr	r0, [r7, #12]
100087e2:	f7ff fc47 	bl	10008074 <rpmsg_virtio_get_role>
100087e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100087e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100087ea:	2b01      	cmp	r3, #1
100087ec:	d102      	bne.n	100087f4 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
100087ee:	68f8      	ldr	r0, [r7, #12]
100087f0:	f7ff fd55 	bl	1000829e <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
100087f4:	68f8      	ldr	r0, [r7, #12]
100087f6:	f7ff fc6e 	bl	100080d6 <rpmsg_virtio_get_features>
100087fa:	4603      	mov	r3, r0
100087fc:	2200      	movs	r2, #0
100087fe:	4698      	mov	r8, r3
10008800:	4691      	mov	r9, r2
10008802:	68bb      	ldr	r3, [r7, #8]
10008804:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
10008808:	68bb      	ldr	r3, [r7, #8]
1000880a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000880e:	f002 0401 	and.w	r4, r2, #1
10008812:	2500      	movs	r5, #0
10008814:	ea54 0305 	orrs.w	r3, r4, r5
10008818:	bf14      	ite	ne
1000881a:	2301      	movne	r3, #1
1000881c:	2300      	moveq	r3, #0
1000881e:	b2da      	uxtb	r2, r3
10008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008822:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
10008826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008828:	2b01      	cmp	r3, #1
1000882a:	d113      	bne.n	10008854 <rpmsg_init_vdev+0xcc>
		vq_names[0] = "tx_vq";
1000882c:	4b37      	ldr	r3, [pc, #220]	@ (1000890c <rpmsg_init_vdev+0x184>)
1000882e:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
10008830:	4b37      	ldr	r3, [pc, #220]	@ (10008910 <rpmsg_init_vdev+0x188>)
10008832:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
10008834:	4b37      	ldr	r3, [pc, #220]	@ (10008914 <rpmsg_init_vdev+0x18c>)
10008836:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
10008838:	4b37      	ldr	r3, [pc, #220]	@ (10008918 <rpmsg_init_vdev+0x190>)
1000883a:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
1000883c:	68bb      	ldr	r3, [r7, #8]
1000883e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10008840:	3318      	adds	r3, #24
10008842:	681a      	ldr	r2, [r3, #0]
10008844:	68fb      	ldr	r3, [r7, #12]
10008846:	67da      	str	r2, [r3, #124]	@ 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
10008848:	68bb      	ldr	r3, [r7, #8]
1000884a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000884c:	681a      	ldr	r2, [r3, #0]
1000884e:	68fb      	ldr	r3, [r7, #12]
10008850:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
10008854:	68fb      	ldr	r3, [r7, #12]
10008856:	683a      	ldr	r2, [r7, #0]
10008858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
1000885c:	f107 021c 	add.w	r2, r7, #28
10008860:	f107 0314 	add.w	r3, r7, #20
10008864:	9300      	str	r3, [sp, #0]
10008866:	4613      	mov	r3, r2
10008868:	2202      	movs	r2, #2
1000886a:	2100      	movs	r1, #0
1000886c:	68f8      	ldr	r0, [r7, #12]
1000886e:	f7ff fc43 	bl	100080f8 <rpmsg_virtio_create_virtqueues>
10008872:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
10008874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008876:	2b00      	cmp	r3, #0
10008878:	d001      	beq.n	1000887e <rpmsg_init_vdev+0xf6>
		return status;
1000887a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000887c:	e037      	b.n	100088ee <rpmsg_init_vdev+0x166>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000887e:	68fb      	ldr	r3, [r7, #12]
10008880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008884:	4618      	mov	r0, r3
10008886:	f000 fb0f 	bl	10008ea8 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000888a:	2300      	movs	r3, #0
1000888c:	637b      	str	r3, [r7, #52]	@ 0x34
1000888e:	e00f      	b.n	100088b0 <rpmsg_init_vdev+0x128>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
10008890:	68bb      	ldr	r3, [r7, #8]
10008892:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10008894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008896:	4613      	mov	r3, r2
10008898:	005b      	lsls	r3, r3, #1
1000889a:	4413      	add	r3, r2
1000889c:	00db      	lsls	r3, r3, #3
1000889e:	440b      	add	r3, r1
100088a0:	681b      	ldr	r3, [r3, #0]
100088a2:	627b      	str	r3, [r7, #36]	@ 0x24
		vq->shm_io = shm_io;
100088a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100088a6:	683a      	ldr	r2, [r7, #0]
100088a8:	629a      	str	r2, [r3, #40]	@ 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
100088aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100088ac:	3301      	adds	r3, #1
100088ae:	637b      	str	r3, [r7, #52]	@ 0x34
100088b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100088b2:	2b01      	cmp	r3, #1
100088b4:	d9ec      	bls.n	10008890 <rpmsg_init_vdev+0x108>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
100088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100088b8:	4618      	mov	r0, r3
100088ba:	f7ff fb36 	bl	10007f2a <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
100088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100088c0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
100088c4:	2b00      	cmp	r3, #0
100088c6:	d011      	beq.n	100088ec <rpmsg_init_vdev+0x164>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
100088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100088ca:	f103 0008 	add.w	r0, r3, #8
100088ce:	2300      	movs	r3, #0
100088d0:	9301      	str	r3, [sp, #4]
100088d2:	4b12      	ldr	r3, [pc, #72]	@ (1000891c <rpmsg_init_vdev+0x194>)
100088d4:	9300      	str	r3, [sp, #0]
100088d6:	2335      	movs	r3, #53	@ 0x35
100088d8:	2235      	movs	r2, #53	@ 0x35
100088da:	4911      	ldr	r1, [pc, #68]	@ (10008920 <rpmsg_init_vdev+0x198>)
100088dc:	f7ff fc22 	bl	10008124 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
100088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100088e2:	3308      	adds	r3, #8
100088e4:	4619      	mov	r1, r3
100088e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100088e8:	f7ff fa73 	bl	10007dd2 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
100088ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
100088ee:	4618      	mov	r0, r3
100088f0:	3738      	adds	r7, #56	@ 0x38
100088f2:	46bd      	mov	sp, r7
100088f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
100088f8:	100084d1 	.word	0x100084d1
100088fc:	100082d9 	.word	0x100082d9
10008900:	10008301 	.word	0x10008301
10008904:	10008353 	.word	0x10008353
10008908:	100083f9 	.word	0x100083f9
1000890c:	1000b1a4 	.word	0x1000b1a4
10008910:	1000b1ac 	.word	0x1000b1ac
10008914:	10008569 	.word	0x10008569
10008918:	1000857d 	.word	0x1000857d
1000891c:	100086a1 	.word	0x100086a1
10008920:	1000b1b4 	.word	0x1000b1b4

10008924 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
10008924:	b480      	push	{r7}
10008926:	b083      	sub	sp, #12
10008928:	af00      	add	r7, sp, #0
1000892a:	6078      	str	r0, [r7, #4]
1000892c:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000892e:	bf00      	nop
10008930:	370c      	adds	r7, #12
10008932:	46bd      	mov	sp, r7
10008934:	f85d 7b04 	ldr.w	r7, [sp], #4
10008938:	4770      	bx	lr

1000893a <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000893a:	b480      	push	{r7}
1000893c:	b083      	sub	sp, #12
1000893e:	af00      	add	r7, sp, #0
10008940:	6078      	str	r0, [r7, #4]
10008942:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10008944:	bf00      	nop
10008946:	370c      	adds	r7, #12
10008948:	46bd      	mov	sp, r7
1000894a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000894e:	4770      	bx	lr

10008950 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
10008950:	b480      	push	{r7}
10008952:	b085      	sub	sp, #20
10008954:	af00      	add	r7, sp, #0
10008956:	60f8      	str	r0, [r7, #12]
10008958:	60b9      	str	r1, [r7, #8]
1000895a:	607a      	str	r2, [r7, #4]
1000895c:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000895e:	68fb      	ldr	r3, [r7, #12]
}
10008960:	4618      	mov	r0, r3
10008962:	3714      	adds	r7, #20
10008964:	46bd      	mov	sp, r7
10008966:	f85d 7b04 	ldr.w	r7, [sp], #4
1000896a:	4770      	bx	lr

1000896c <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
1000896c:	b580      	push	{r7, lr}
1000896e:	b086      	sub	sp, #24
10008970:	af02      	add	r7, sp, #8
10008972:	60f8      	str	r0, [r7, #12]
10008974:	60b9      	str	r1, [r7, #8]
10008976:	607a      	str	r2, [r7, #4]
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
10008978:	68fb      	ldr	r3, [r7, #12]
1000897a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1000897c:	68fb      	ldr	r3, [r7, #12]
1000897e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10008980:	2301      	movs	r3, #1
10008982:	9301      	str	r3, [sp, #4]
10008984:	687b      	ldr	r3, [r7, #4]
10008986:	9300      	str	r3, [sp, #0]
10008988:	68bb      	ldr	r3, [r7, #8]
1000898a:	68f8      	ldr	r0, [r7, #12]
1000898c:	f7ff f93c 	bl	10007c08 <rpmsg_send_offchannel_raw>
10008990:	4603      	mov	r3, r0
					 len, true);
}
10008992:	4618      	mov	r0, r3
10008994:	3710      	adds	r7, #16
10008996:	46bd      	mov	sp, r7
10008998:	bd80      	pop	{r7, pc}

1000899a <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
1000899a:	b580      	push	{r7, lr}
1000899c:	b086      	sub	sp, #24
1000899e:	af00      	add	r7, sp, #0
100089a0:	60f8      	str	r0, [r7, #12]
100089a2:	60b9      	str	r1, [r7, #8]
100089a4:	607a      	str	r2, [r7, #4]
100089a6:	603b      	str	r3, [r7, #0]
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
100089a8:	68fb      	ldr	r3, [r7, #12]
100089aa:	617b      	str	r3, [r7, #20]
  (void)src;

  huart->pRxBuffPtr = data;
100089ac:	697b      	ldr	r3, [r7, #20]
100089ae:	68ba      	ldr	r2, [r7, #8]
100089b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxXferSize = len;
100089b2:	687b      	ldr	r3, [r7, #4]
100089b4:	b29a      	uxth	r2, r3
100089b6:	697b      	ldr	r3, [r7, #20]
100089b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  if (huart->RxCpltCallback != NULL) {
100089bc:	697b      	ldr	r3, [r7, #20]
100089be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100089c0:	2b00      	cmp	r3, #0
100089c2:	d003      	beq.n	100089cc <VIRT_UART_read_cb+0x32>
    huart->RxCpltCallback(huart);
100089c4:	697b      	ldr	r3, [r7, #20]
100089c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100089c8:	6978      	ldr	r0, [r7, #20]
100089ca:	4798      	blx	r3
  }

  return 0;
100089cc:	2300      	movs	r3, #0
}
100089ce:	4618      	mov	r0, r3
100089d0:	3718      	adds	r7, #24
100089d2:	46bd      	mov	sp, r7
100089d4:	bd80      	pop	{r7, pc}
	...

100089d8 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
100089d8:	b580      	push	{r7, lr}
100089da:	b086      	sub	sp, #24
100089dc:	af02      	add	r7, sp, #8
100089de:	6078      	str	r0, [r7, #4]

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
100089e0:	6878      	ldr	r0, [r7, #4]
100089e2:	2300      	movs	r3, #0
100089e4:	9300      	str	r3, [sp, #0]
100089e6:	4b08      	ldr	r3, [pc, #32]	@ (10008a08 <VIRT_UART_Init+0x30>)
100089e8:	f04f 32ff 	mov.w	r2, #4294967295
100089ec:	4907      	ldr	r1, [pc, #28]	@ (10008a0c <VIRT_UART_Init+0x34>)
100089ee:	f000 fd2b 	bl	10009448 <OPENAMP_create_endpoint>
100089f2:	60f8      	str	r0, [r7, #12]
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
100089f4:	68fb      	ldr	r3, [r7, #12]
100089f6:	2b00      	cmp	r3, #0
100089f8:	da01      	bge.n	100089fe <VIRT_UART_Init+0x26>
    return VIRT_UART_ERROR;
100089fa:	2301      	movs	r3, #1
100089fc:	e000      	b.n	10008a00 <VIRT_UART_Init+0x28>
  }

  return VIRT_UART_OK;
100089fe:	2300      	movs	r3, #0
}
10008a00:	4618      	mov	r0, r3
10008a02:	3710      	adds	r7, #16
10008a04:	46bd      	mov	sp, r7
10008a06:	bd80      	pop	{r7, pc}
10008a08:	1000899b 	.word	0x1000899b
10008a0c:	1000b1b8 	.word	0x1000b1b8

10008a10 <VIRT_UART_RegisterCallback>:
}

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
10008a10:	b480      	push	{r7}
10008a12:	b087      	sub	sp, #28
10008a14:	af00      	add	r7, sp, #0
10008a16:	60f8      	str	r0, [r7, #12]
10008a18:	460b      	mov	r3, r1
10008a1a:	607a      	str	r2, [r7, #4]
10008a1c:	72fb      	strb	r3, [r7, #11]
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;
10008a1e:	2300      	movs	r3, #0
10008a20:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
10008a22:	7afb      	ldrb	r3, [r7, #11]
10008a24:	2b00      	cmp	r3, #0
10008a26:	d103      	bne.n	10008a30 <VIRT_UART_RegisterCallback+0x20>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
10008a28:	68fb      	ldr	r3, [r7, #12]
10008a2a:	687a      	ldr	r2, [r7, #4]
10008a2c:	64da      	str	r2, [r3, #76]	@ 0x4c
    break;
10008a2e:	e002      	b.n	10008a36 <VIRT_UART_RegisterCallback+0x26>

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
10008a30:	2301      	movs	r3, #1
10008a32:	75fb      	strb	r3, [r7, #23]
    break;
10008a34:	bf00      	nop
  }
  return status;
10008a36:	7dfb      	ldrb	r3, [r7, #23]
}
10008a38:	4618      	mov	r0, r3
10008a3a:	371c      	adds	r7, #28
10008a3c:	46bd      	mov	sp, r7
10008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008a42:	4770      	bx	lr

10008a44 <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
10008a44:	b580      	push	{r7, lr}
10008a46:	b086      	sub	sp, #24
10008a48:	af00      	add	r7, sp, #0
10008a4a:	60f8      	str	r0, [r7, #12]
10008a4c:	60b9      	str	r1, [r7, #8]
10008a4e:	4613      	mov	r3, r2
10008a50:	80fb      	strh	r3, [r7, #6]
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
10008a52:	88fb      	ldrh	r3, [r7, #6]
10008a54:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
10008a58:	d901      	bls.n	10008a5e <VIRT_UART_Transmit+0x1a>
	  return VIRT_UART_ERROR;
10008a5a:	2301      	movs	r3, #1
10008a5c:	e00c      	b.n	10008a78 <VIRT_UART_Transmit+0x34>

	res = OPENAMP_send(&huart->ept, pData, Size);
10008a5e:	68fb      	ldr	r3, [r7, #12]
10008a60:	88fa      	ldrh	r2, [r7, #6]
10008a62:	68b9      	ldr	r1, [r7, #8]
10008a64:	4618      	mov	r0, r3
10008a66:	f7ff ff81 	bl	1000896c <rpmsg_send>
10008a6a:	6178      	str	r0, [r7, #20]
	if (res <0) {
10008a6c:	697b      	ldr	r3, [r7, #20]
10008a6e:	2b00      	cmp	r3, #0
10008a70:	da01      	bge.n	10008a76 <VIRT_UART_Transmit+0x32>
		return VIRT_UART_ERROR;
10008a72:	2301      	movs	r3, #1
10008a74:	e000      	b.n	10008a78 <VIRT_UART_Transmit+0x34>
	}

	return VIRT_UART_OK;
10008a76:	2300      	movs	r3, #0
}
10008a78:	4618      	mov	r0, r3
10008a7a:	3718      	adds	r7, #24
10008a7c:	46bd      	mov	sp, r7
10008a7e:	bd80      	pop	{r7, pc}

10008a80 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
10008a80:	b590      	push	{r4, r7, lr}
10008a82:	b08f      	sub	sp, #60	@ 0x3c
10008a84:	af04      	add	r7, sp, #16
10008a86:	60f8      	str	r0, [r7, #12]
10008a88:	60b9      	str	r1, [r7, #8]
10008a8a:	607a      	str	r2, [r7, #4]
10008a8c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
10008a8e:	68fb      	ldr	r3, [r7, #12]
10008a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008a92:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
10008a94:	687a      	ldr	r2, [r7, #4]
10008a96:	6a3b      	ldr	r3, [r7, #32]
10008a98:	429a      	cmp	r2, r3
10008a9a:	d901      	bls.n	10008aa0 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
10008a9c:	4b1e      	ldr	r3, [pc, #120]	@ (10008b18 <virtio_create_virtqueues+0x98>)
10008a9e:	e036      	b.n	10008b0e <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
10008aa0:	2300      	movs	r3, #0
10008aa2:	627b      	str	r3, [r7, #36]	@ 0x24
10008aa4:	e02e      	b.n	10008b04 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
10008aa6:	68fb      	ldr	r3, [r7, #12]
10008aa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10008aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008aac:	4613      	mov	r3, r2
10008aae:	005b      	lsls	r3, r3, #1
10008ab0:	4413      	add	r3, r2
10008ab2:	00db      	lsls	r3, r3, #3
10008ab4:	440b      	add	r3, r1
10008ab6:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
10008ab8:	69fb      	ldr	r3, [r7, #28]
10008aba:	3304      	adds	r3, #4
10008abc:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008ac0:	b298      	uxth	r0, r3
10008ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008ac4:	009b      	lsls	r3, r3, #2
10008ac6:	683a      	ldr	r2, [r7, #0]
10008ac8:	4413      	add	r3, r2
10008aca:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
10008acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008ace:	009b      	lsls	r3, r3, #2
10008ad0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10008ad2:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008ad4:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
10008ad6:	68fa      	ldr	r2, [r7, #12]
10008ad8:	6a12      	ldr	r2, [r2, #32]
10008ada:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008adc:	69f9      	ldr	r1, [r7, #28]
10008ade:	6809      	ldr	r1, [r1, #0]
10008ae0:	9102      	str	r1, [sp, #8]
10008ae2:	9201      	str	r2, [sp, #4]
10008ae4:	9300      	str	r3, [sp, #0]
10008ae6:	69bb      	ldr	r3, [r7, #24]
10008ae8:	4622      	mov	r2, r4
10008aea:	4601      	mov	r1, r0
10008aec:	68f8      	ldr	r0, [r7, #12]
10008aee:	f000 f90e 	bl	10008d0e <virtqueue_create>
10008af2:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
10008af4:	697b      	ldr	r3, [r7, #20]
10008af6:	2b00      	cmp	r3, #0
10008af8:	d001      	beq.n	10008afe <virtio_create_virtqueues+0x7e>
			return ret;
10008afa:	697b      	ldr	r3, [r7, #20]
10008afc:	e007      	b.n	10008b0e <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
10008afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008b00:	3301      	adds	r3, #1
10008b02:	627b      	str	r3, [r7, #36]	@ 0x24
10008b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008b06:	687b      	ldr	r3, [r7, #4]
10008b08:	429a      	cmp	r2, r3
10008b0a:	d3cc      	bcc.n	10008aa6 <virtio_create_virtqueues+0x26>
	}
	return 0;
10008b0c:	2300      	movs	r3, #0
}
10008b0e:	4618      	mov	r0, r3
10008b10:	372c      	adds	r7, #44	@ 0x2c
10008b12:	46bd      	mov	sp, r7
10008b14:	bd90      	pop	{r4, r7, pc}
10008b16:	bf00      	nop
10008b18:	fffff440 	.word	0xfffff440

10008b1c <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
10008b1c:	b480      	push	{r7}
10008b1e:	b085      	sub	sp, #20
10008b20:	af00      	add	r7, sp, #0
10008b22:	60f8      	str	r0, [r7, #12]
10008b24:	60b9      	str	r1, [r7, #8]
10008b26:	607a      	str	r2, [r7, #4]
10008b28:	603b      	str	r3, [r7, #0]
	vr->num = num;
10008b2a:	68fb      	ldr	r3, [r7, #12]
10008b2c:	68ba      	ldr	r2, [r7, #8]
10008b2e:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
10008b30:	68fb      	ldr	r3, [r7, #12]
10008b32:	687a      	ldr	r2, [r7, #4]
10008b34:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
10008b36:	68bb      	ldr	r3, [r7, #8]
10008b38:	011b      	lsls	r3, r3, #4
10008b3a:	687a      	ldr	r2, [r7, #4]
10008b3c:	441a      	add	r2, r3
10008b3e:	68fb      	ldr	r3, [r7, #12]
10008b40:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
10008b42:	68fb      	ldr	r3, [r7, #12]
10008b44:	689a      	ldr	r2, [r3, #8]
10008b46:	68bb      	ldr	r3, [r7, #8]
10008b48:	005b      	lsls	r3, r3, #1
10008b4a:	4413      	add	r3, r2
10008b4c:	3304      	adds	r3, #4
10008b4e:	461a      	mov	r2, r3
10008b50:	683b      	ldr	r3, [r7, #0]
10008b52:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
10008b54:	1c5a      	adds	r2, r3, #1
10008b56:	683b      	ldr	r3, [r7, #0]
10008b58:	425b      	negs	r3, r3
10008b5a:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
10008b5c:	461a      	mov	r2, r3
10008b5e:	68fb      	ldr	r3, [r7, #12]
10008b60:	60da      	str	r2, [r3, #12]
}
10008b62:	bf00      	nop
10008b64:	3714      	adds	r7, #20
10008b66:	46bd      	mov	sp, r7
10008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b6c:	4770      	bx	lr

10008b6e <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
10008b6e:	b480      	push	{r7}
10008b70:	b083      	sub	sp, #12
10008b72:	af00      	add	r7, sp, #0
10008b74:	4603      	mov	r3, r0
10008b76:	80fb      	strh	r3, [r7, #6]
10008b78:	460b      	mov	r3, r1
10008b7a:	80bb      	strh	r3, [r7, #4]
10008b7c:	4613      	mov	r3, r2
10008b7e:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
10008b80:	88ba      	ldrh	r2, [r7, #4]
10008b82:	88fb      	ldrh	r3, [r7, #6]
10008b84:	1ad3      	subs	r3, r2, r3
10008b86:	b29b      	uxth	r3, r3
10008b88:	3b01      	subs	r3, #1
10008b8a:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
10008b8c:	88b9      	ldrh	r1, [r7, #4]
10008b8e:	887b      	ldrh	r3, [r7, #2]
10008b90:	1acb      	subs	r3, r1, r3
10008b92:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
10008b94:	429a      	cmp	r2, r3
10008b96:	bf34      	ite	cc
10008b98:	2301      	movcc	r3, #1
10008b9a:	2300      	movcs	r3, #0
10008b9c:	b2db      	uxtb	r3, r3
}
10008b9e:	4618      	mov	r0, r3
10008ba0:	370c      	adds	r7, #12
10008ba2:	46bd      	mov	sp, r7
10008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
10008ba8:	4770      	bx	lr

10008baa <metal_io_virt>:
{
10008baa:	b480      	push	{r7}
10008bac:	b083      	sub	sp, #12
10008bae:	af00      	add	r7, sp, #0
10008bb0:	6078      	str	r0, [r7, #4]
10008bb2:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10008bb4:	687b      	ldr	r3, [r7, #4]
10008bb6:	681b      	ldr	r3, [r3, #0]
		: NULL);
10008bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
10008bbc:	d00a      	beq.n	10008bd4 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10008bbe:	687b      	ldr	r3, [r7, #4]
10008bc0:	689b      	ldr	r3, [r3, #8]
10008bc2:	683a      	ldr	r2, [r7, #0]
10008bc4:	429a      	cmp	r2, r3
10008bc6:	d205      	bcs.n	10008bd4 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10008bc8:	687b      	ldr	r3, [r7, #4]
10008bca:	681b      	ldr	r3, [r3, #0]
10008bcc:	461a      	mov	r2, r3
10008bce:	683b      	ldr	r3, [r7, #0]
10008bd0:	4413      	add	r3, r2
		: NULL);
10008bd2:	e000      	b.n	10008bd6 <metal_io_virt+0x2c>
10008bd4:	2300      	movs	r3, #0
}
10008bd6:	4618      	mov	r0, r3
10008bd8:	370c      	adds	r7, #12
10008bda:	46bd      	mov	sp, r7
10008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
10008be0:	4770      	bx	lr

10008be2 <metal_io_phys>:
{
10008be2:	b580      	push	{r7, lr}
10008be4:	b084      	sub	sp, #16
10008be6:	af00      	add	r7, sp, #0
10008be8:	6078      	str	r0, [r7, #4]
10008bea:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
10008bec:	687b      	ldr	r3, [r7, #4]
10008bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008bf0:	2b00      	cmp	r3, #0
10008bf2:	d123      	bne.n	10008c3c <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
10008bf4:	687b      	ldr	r3, [r7, #4]
10008bf6:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
10008bf8:	2b1f      	cmp	r3, #31
10008bfa:	d805      	bhi.n	10008c08 <metal_io_phys+0x26>
10008bfc:	687b      	ldr	r3, [r7, #4]
10008bfe:	68db      	ldr	r3, [r3, #12]
10008c00:	683a      	ldr	r2, [r7, #0]
10008c02:	fa22 f303 	lsr.w	r3, r2, r3
10008c06:	e000      	b.n	10008c0a <metal_io_phys+0x28>
10008c08:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
10008c0a:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
10008c0c:	687b      	ldr	r3, [r7, #4]
10008c0e:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
10008c10:	2b00      	cmp	r3, #0
10008c12:	d010      	beq.n	10008c36 <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
10008c14:	687b      	ldr	r3, [r7, #4]
10008c16:	689b      	ldr	r3, [r3, #8]
10008c18:	683a      	ldr	r2, [r7, #0]
10008c1a:	429a      	cmp	r2, r3
10008c1c:	d20b      	bcs.n	10008c36 <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
10008c1e:	687b      	ldr	r3, [r7, #4]
10008c20:	685a      	ldr	r2, [r3, #4]
10008c22:	68fb      	ldr	r3, [r7, #12]
10008c24:	009b      	lsls	r3, r3, #2
10008c26:	4413      	add	r3, r2
10008c28:	681a      	ldr	r2, [r3, #0]
10008c2a:	687b      	ldr	r3, [r7, #4]
10008c2c:	6919      	ldr	r1, [r3, #16]
10008c2e:	683b      	ldr	r3, [r7, #0]
10008c30:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
10008c32:	4413      	add	r3, r2
10008c34:	e008      	b.n	10008c48 <metal_io_phys+0x66>
10008c36:	f04f 33ff 	mov.w	r3, #4294967295
10008c3a:	e005      	b.n	10008c48 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
10008c3c:	687b      	ldr	r3, [r7, #4]
10008c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008c40:	6839      	ldr	r1, [r7, #0]
10008c42:	6878      	ldr	r0, [r7, #4]
10008c44:	4798      	blx	r3
10008c46:	4603      	mov	r3, r0
}
10008c48:	4618      	mov	r0, r3
10008c4a:	3710      	adds	r7, #16
10008c4c:	46bd      	mov	sp, r7
10008c4e:	bd80      	pop	{r7, pc}

10008c50 <metal_io_phys_to_offset>:
{
10008c50:	b580      	push	{r7, lr}
10008c52:	b084      	sub	sp, #16
10008c54:	af00      	add	r7, sp, #0
10008c56:	6078      	str	r0, [r7, #4]
10008c58:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
10008c5a:	687b      	ldr	r3, [r7, #4]
10008c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10008c5e:	2b00      	cmp	r3, #0
10008c60:	d127      	bne.n	10008cb2 <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
10008c62:	687b      	ldr	r3, [r7, #4]
10008c64:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
10008c66:	f1b3 3fff 	cmp.w	r3, #4294967295
10008c6a:	d105      	bne.n	10008c78 <metal_io_phys_to_offset+0x28>
10008c6c:	687b      	ldr	r3, [r7, #4]
10008c6e:	685b      	ldr	r3, [r3, #4]
10008c70:	681b      	ldr	r3, [r3, #0]
10008c72:	683a      	ldr	r2, [r7, #0]
10008c74:	1ad3      	subs	r3, r2, r3
10008c76:	e003      	b.n	10008c80 <metal_io_phys_to_offset+0x30>
10008c78:	687b      	ldr	r3, [r7, #4]
10008c7a:	691a      	ldr	r2, [r3, #16]
10008c7c:	683b      	ldr	r3, [r7, #0]
10008c7e:	4013      	ands	r3, r2
		unsigned long offset =
10008c80:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
10008c82:	68f9      	ldr	r1, [r7, #12]
10008c84:	6878      	ldr	r0, [r7, #4]
10008c86:	f7ff ffac 	bl	10008be2 <metal_io_phys>
10008c8a:	4602      	mov	r2, r0
10008c8c:	683b      	ldr	r3, [r7, #0]
10008c8e:	4293      	cmp	r3, r2
10008c90:	d101      	bne.n	10008c96 <metal_io_phys_to_offset+0x46>
				return offset;
10008c92:	68fb      	ldr	r3, [r7, #12]
10008c94:	e013      	b.n	10008cbe <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
10008c96:	687b      	ldr	r3, [r7, #4]
10008c98:	691a      	ldr	r2, [r3, #16]
10008c9a:	68fb      	ldr	r3, [r7, #12]
10008c9c:	4413      	add	r3, r2
10008c9e:	3301      	adds	r3, #1
10008ca0:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
10008ca2:	687b      	ldr	r3, [r7, #4]
10008ca4:	689b      	ldr	r3, [r3, #8]
10008ca6:	68fa      	ldr	r2, [r7, #12]
10008ca8:	429a      	cmp	r2, r3
10008caa:	d3ea      	bcc.n	10008c82 <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
10008cac:	f04f 33ff 	mov.w	r3, #4294967295
10008cb0:	e005      	b.n	10008cbe <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
10008cb2:	687b      	ldr	r3, [r7, #4]
10008cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10008cb6:	6839      	ldr	r1, [r7, #0]
10008cb8:	6878      	ldr	r0, [r7, #4]
10008cba:	4798      	blx	r3
10008cbc:	4603      	mov	r3, r0
}
10008cbe:	4618      	mov	r0, r3
10008cc0:	3710      	adds	r7, #16
10008cc2:	46bd      	mov	sp, r7
10008cc4:	bd80      	pop	{r7, pc}

10008cc6 <metal_io_phys_to_virt>:
{
10008cc6:	b580      	push	{r7, lr}
10008cc8:	b082      	sub	sp, #8
10008cca:	af00      	add	r7, sp, #0
10008ccc:	6078      	str	r0, [r7, #4]
10008cce:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
10008cd0:	6839      	ldr	r1, [r7, #0]
10008cd2:	6878      	ldr	r0, [r7, #4]
10008cd4:	f7ff ffbc 	bl	10008c50 <metal_io_phys_to_offset>
10008cd8:	4603      	mov	r3, r0
10008cda:	4619      	mov	r1, r3
10008cdc:	6878      	ldr	r0, [r7, #4]
10008cde:	f7ff ff64 	bl	10008baa <metal_io_virt>
10008ce2:	4603      	mov	r3, r0
}
10008ce4:	4618      	mov	r0, r3
10008ce6:	3708      	adds	r7, #8
10008ce8:	46bd      	mov	sp, r7
10008cea:	bd80      	pop	{r7, pc}

10008cec <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
10008cec:	b580      	push	{r7, lr}
10008cee:	b084      	sub	sp, #16
10008cf0:	af00      	add	r7, sp, #0
10008cf2:	6078      	str	r0, [r7, #4]
10008cf4:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
10008cf6:	687b      	ldr	r3, [r7, #4]
10008cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008cfa:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
10008cfc:	6839      	ldr	r1, [r7, #0]
10008cfe:	68f8      	ldr	r0, [r7, #12]
10008d00:	f7ff ffe1 	bl	10008cc6 <metal_io_phys_to_virt>
10008d04:	4603      	mov	r3, r0
}
10008d06:	4618      	mov	r0, r3
10008d08:	3710      	adds	r7, #16
10008d0a:	46bd      	mov	sp, r7
10008d0c:	bd80      	pop	{r7, pc}

10008d0e <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
10008d0e:	b580      	push	{r7, lr}
10008d10:	b086      	sub	sp, #24
10008d12:	af00      	add	r7, sp, #0
10008d14:	60f8      	str	r0, [r7, #12]
10008d16:	607a      	str	r2, [r7, #4]
10008d18:	603b      	str	r3, [r7, #0]
10008d1a:	460b      	mov	r3, r1
10008d1c:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
10008d1e:	2300      	movs	r3, #0
10008d20:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
10008d22:	697b      	ldr	r3, [r7, #20]
10008d24:	2b00      	cmp	r3, #0
10008d26:	d11e      	bne.n	10008d66 <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
10008d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d2a:	68fa      	ldr	r2, [r7, #12]
10008d2c:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
10008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d30:	687a      	ldr	r2, [r7, #4]
10008d32:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
10008d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d36:	897a      	ldrh	r2, [r7, #10]
10008d38:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
10008d3a:	683b      	ldr	r3, [r7, #0]
10008d3c:	891a      	ldrh	r2, [r3, #8]
10008d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d40:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
10008d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d44:	895a      	ldrh	r2, [r3, #10]
10008d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d48:	849a      	strh	r2, [r3, #36]	@ 0x24
		vq->callback = callback;
10008d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d4c:	6a3a      	ldr	r2, [r7, #32]
10008d4e:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
10008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008d54:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
10008d56:	683b      	ldr	r3, [r7, #0]
10008d58:	6819      	ldr	r1, [r3, #0]
10008d5a:	683b      	ldr	r3, [r7, #0]
10008d5c:	685b      	ldr	r3, [r3, #4]
10008d5e:	461a      	mov	r2, r3
10008d60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10008d62:	f000 f8ef 	bl	10008f44 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
10008d66:	697b      	ldr	r3, [r7, #20]
}
10008d68:	4618      	mov	r0, r3
10008d6a:	3718      	adds	r7, #24
10008d6c:	46bd      	mov	sp, r7
10008d6e:	bd80      	pop	{r7, pc}

10008d70 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
10008d70:	b480      	push	{r7}
10008d72:	b083      	sub	sp, #12
10008d74:	af00      	add	r7, sp, #0
10008d76:	6078      	str	r0, [r7, #4]
10008d78:	460b      	mov	r3, r1
10008d7a:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
10008d7c:	687b      	ldr	r3, [r7, #4]
10008d7e:	699a      	ldr	r2, [r3, #24]
10008d80:	887b      	ldrh	r3, [r7, #2]
10008d82:	011b      	lsls	r3, r3, #4
10008d84:	4413      	add	r3, r2
10008d86:	689b      	ldr	r3, [r3, #8]
}
10008d88:	4618      	mov	r0, r3
10008d8a:	370c      	adds	r7, #12
10008d8c:	46bd      	mov	sp, r7
10008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008d92:	4770      	bx	lr

10008d94 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
10008d94:	b580      	push	{r7, lr}
10008d96:	b086      	sub	sp, #24
10008d98:	af00      	add	r7, sp, #0
10008d9a:	60f8      	str	r0, [r7, #12]
10008d9c:	60b9      	str	r1, [r7, #8]
10008d9e:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
10008da0:	2300      	movs	r3, #0
10008da2:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
10008da4:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10008da8:	68fb      	ldr	r3, [r7, #12]
10008daa:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10008dac:	68fb      	ldr	r3, [r7, #12]
10008dae:	69db      	ldr	r3, [r3, #28]
10008db0:	885b      	ldrh	r3, [r3, #2]
10008db2:	b29b      	uxth	r3, r3
10008db4:	429a      	cmp	r2, r3
10008db6:	d101      	bne.n	10008dbc <virtqueue_get_available_buffer+0x28>
		return NULL;
10008db8:	2300      	movs	r3, #0
10008dba:	e02f      	b.n	10008e1c <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
10008dbc:	68fb      	ldr	r3, [r7, #12]
10008dbe:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
10008dc0:	1c5a      	adds	r2, r3, #1
10008dc2:	b291      	uxth	r1, r2
10008dc4:	68fa      	ldr	r2, [r7, #12]
10008dc6:	8611      	strh	r1, [r2, #48]	@ 0x30
10008dc8:	b21a      	sxth	r2, r3
10008dca:	68fb      	ldr	r3, [r7, #12]
10008dcc:	895b      	ldrh	r3, [r3, #10]
10008dce:	3b01      	subs	r3, #1
10008dd0:	b29b      	uxth	r3, r3
10008dd2:	b21b      	sxth	r3, r3
10008dd4:	4013      	ands	r3, r2
10008dd6:	b21b      	sxth	r3, r3
10008dd8:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
10008dda:	68fb      	ldr	r3, [r7, #12]
10008ddc:	69da      	ldr	r2, [r3, #28]
10008dde:	8afb      	ldrh	r3, [r7, #22]
10008de0:	005b      	lsls	r3, r3, #1
10008de2:	4413      	add	r3, r2
10008de4:	889b      	ldrh	r3, [r3, #4]
10008de6:	b29a      	uxth	r2, r3
10008de8:	68bb      	ldr	r3, [r7, #8]
10008dea:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
10008dec:	68fb      	ldr	r3, [r7, #12]
10008dee:	699a      	ldr	r2, [r3, #24]
10008df0:	68bb      	ldr	r3, [r7, #8]
10008df2:	881b      	ldrh	r3, [r3, #0]
10008df4:	011b      	lsls	r3, r3, #4
10008df6:	18d1      	adds	r1, r2, r3
10008df8:	680a      	ldr	r2, [r1, #0]
10008dfa:	684b      	ldr	r3, [r1, #4]
10008dfc:	4613      	mov	r3, r2
10008dfe:	4619      	mov	r1, r3
10008e00:	68f8      	ldr	r0, [r7, #12]
10008e02:	f7ff ff73 	bl	10008cec <virtqueue_phys_to_virt>
10008e06:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
10008e08:	68fb      	ldr	r3, [r7, #12]
10008e0a:	699a      	ldr	r2, [r3, #24]
10008e0c:	68bb      	ldr	r3, [r7, #8]
10008e0e:	881b      	ldrh	r3, [r3, #0]
10008e10:	011b      	lsls	r3, r3, #4
10008e12:	4413      	add	r3, r2
10008e14:	689a      	ldr	r2, [r3, #8]
10008e16:	687b      	ldr	r3, [r7, #4]
10008e18:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
10008e1a:	693b      	ldr	r3, [r7, #16]
}
10008e1c:	4618      	mov	r0, r3
10008e1e:	3718      	adds	r7, #24
10008e20:	46bd      	mov	sp, r7
10008e22:	bd80      	pop	{r7, pc}

10008e24 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
10008e24:	b480      	push	{r7}
10008e26:	b087      	sub	sp, #28
10008e28:	af00      	add	r7, sp, #0
10008e2a:	60f8      	str	r0, [r7, #12]
10008e2c:	460b      	mov	r3, r1
10008e2e:	607a      	str	r2, [r7, #4]
10008e30:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
10008e32:	2300      	movs	r3, #0
10008e34:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
10008e36:	68fb      	ldr	r3, [r7, #12]
10008e38:	895b      	ldrh	r3, [r3, #10]
10008e3a:	897a      	ldrh	r2, [r7, #10]
10008e3c:	429a      	cmp	r2, r3
10008e3e:	d901      	bls.n	10008e44 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
10008e40:	4b18      	ldr	r3, [pc, #96]	@ (10008ea4 <virtqueue_add_consumed_buffer+0x80>)
10008e42:	e029      	b.n	10008e98 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
10008e44:	68fb      	ldr	r3, [r7, #12]
10008e46:	6a1b      	ldr	r3, [r3, #32]
10008e48:	885b      	ldrh	r3, [r3, #2]
10008e4a:	b29b      	uxth	r3, r3
10008e4c:	b21a      	sxth	r2, r3
10008e4e:	68fb      	ldr	r3, [r7, #12]
10008e50:	895b      	ldrh	r3, [r3, #10]
10008e52:	3b01      	subs	r3, #1
10008e54:	b29b      	uxth	r3, r3
10008e56:	b21b      	sxth	r3, r3
10008e58:	4013      	ands	r3, r2
10008e5a:	b21b      	sxth	r3, r3
10008e5c:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
10008e5e:	68fb      	ldr	r3, [r7, #12]
10008e60:	6a1a      	ldr	r2, [r3, #32]
10008e62:	8a7b      	ldrh	r3, [r7, #18]
10008e64:	00db      	lsls	r3, r3, #3
10008e66:	4413      	add	r3, r2
10008e68:	3304      	adds	r3, #4
10008e6a:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
10008e6c:	897a      	ldrh	r2, [r7, #10]
10008e6e:	697b      	ldr	r3, [r7, #20]
10008e70:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
10008e72:	697b      	ldr	r3, [r7, #20]
10008e74:	687a      	ldr	r2, [r7, #4]
10008e76:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
10008e78:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
10008e7c:	68fb      	ldr	r3, [r7, #12]
10008e7e:	6a1b      	ldr	r3, [r3, #32]
10008e80:	885a      	ldrh	r2, [r3, #2]
10008e82:	b292      	uxth	r2, r2
10008e84:	3201      	adds	r2, #1
10008e86:	b292      	uxth	r2, r2
10008e88:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
10008e8a:	68fb      	ldr	r3, [r7, #12]
10008e8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
10008e8e:	3301      	adds	r3, #1
10008e90:	b29a      	uxth	r2, r3
10008e92:	68fb      	ldr	r3, [r7, #12]
10008e94:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
10008e96:	2300      	movs	r3, #0
}
10008e98:	4618      	mov	r0, r3
10008e9a:	371c      	adds	r7, #28
10008e9c:	46bd      	mov	sp, r7
10008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008ea2:	4770      	bx	lr
10008ea4:	fffff441 	.word	0xfffff441

10008ea8 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10008ea8:	b480      	push	{r7}
10008eaa:	b083      	sub	sp, #12
10008eac:	af00      	add	r7, sp, #0
10008eae:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10008eb0:	6879      	ldr	r1, [r7, #4]
10008eb2:	6809      	ldr	r1, [r1, #0]
10008eb4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10008eb8:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10008ebc:	2300      	movs	r3, #0
10008ebe:	4313      	orrs	r3, r2
10008ec0:	d015      	beq.n	10008eee <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008ec2:	687b      	ldr	r3, [r7, #4]
10008ec4:	681b      	ldr	r3, [r3, #0]
10008ec6:	699b      	ldr	r3, [r3, #24]
10008ec8:	2b01      	cmp	r3, #1
10008eca:	d11f      	bne.n	10008f0c <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
10008ecc:	687b      	ldr	r3, [r7, #4]
10008ece:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10008ed0:	687b      	ldr	r3, [r7, #4]
10008ed2:	895b      	ldrh	r3, [r3, #10]
10008ed4:	1ad3      	subs	r3, r2, r3
10008ed6:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
10008ed8:	687b      	ldr	r3, [r7, #4]
10008eda:	6a1a      	ldr	r2, [r3, #32]
10008edc:	687b      	ldr	r3, [r7, #4]
10008ede:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
10008ee0:	3901      	subs	r1, #1
10008ee2:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
10008ee4:	00db      	lsls	r3, r3, #3
10008ee6:	4413      	add	r3, r2
10008ee8:	460a      	mov	r2, r1
10008eea:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
10008eec:	e00e      	b.n	10008f0c <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008eee:	687b      	ldr	r3, [r7, #4]
10008ef0:	681b      	ldr	r3, [r3, #0]
10008ef2:	699b      	ldr	r3, [r3, #24]
10008ef4:	2b01      	cmp	r3, #1
10008ef6:	d109      	bne.n	10008f0c <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
10008ef8:	687b      	ldr	r3, [r7, #4]
10008efa:	6a1b      	ldr	r3, [r3, #32]
10008efc:	881b      	ldrh	r3, [r3, #0]
10008efe:	b29a      	uxth	r2, r3
10008f00:	687b      	ldr	r3, [r7, #4]
10008f02:	6a1b      	ldr	r3, [r3, #32]
10008f04:	f042 0201 	orr.w	r2, r2, #1
10008f08:	b292      	uxth	r2, r2
10008f0a:	801a      	strh	r2, [r3, #0]
}
10008f0c:	bf00      	nop
10008f0e:	370c      	adds	r7, #12
10008f10:	46bd      	mov	sp, r7
10008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
10008f16:	4770      	bx	lr

10008f18 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
10008f18:	b580      	push	{r7, lr}
10008f1a:	b082      	sub	sp, #8
10008f1c:	af00      	add	r7, sp, #0
10008f1e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
10008f20:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
10008f24:	6878      	ldr	r0, [r7, #4]
10008f26:	f000 f835 	bl	10008f94 <vq_ring_must_notify>
10008f2a:	4603      	mov	r3, r0
10008f2c:	2b00      	cmp	r3, #0
10008f2e:	d002      	beq.n	10008f36 <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
10008f30:	6878      	ldr	r0, [r7, #4]
10008f32:	f000 f87d 	bl	10009030 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
10008f36:	687b      	ldr	r3, [r7, #4]
10008f38:	2200      	movs	r2, #0
10008f3a:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);
}
10008f3c:	bf00      	nop
10008f3e:	3708      	adds	r7, #8
10008f40:	46bd      	mov	sp, r7
10008f42:	bd80      	pop	{r7, pc}

10008f44 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
10008f44:	b580      	push	{r7, lr}
10008f46:	b086      	sub	sp, #24
10008f48:	af00      	add	r7, sp, #0
10008f4a:	60f8      	str	r0, [r7, #12]
10008f4c:	60b9      	str	r1, [r7, #8]
10008f4e:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
10008f50:	68fb      	ldr	r3, [r7, #12]
10008f52:	895b      	ldrh	r3, [r3, #10]
10008f54:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
10008f56:	68fb      	ldr	r3, [r7, #12]
10008f58:	3314      	adds	r3, #20
10008f5a:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
10008f5c:	6979      	ldr	r1, [r7, #20]
10008f5e:	687b      	ldr	r3, [r7, #4]
10008f60:	68ba      	ldr	r2, [r7, #8]
10008f62:	6938      	ldr	r0, [r7, #16]
10008f64:	f7ff fdda 	bl	10008b1c <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
10008f68:	bf00      	nop
10008f6a:	3718      	adds	r7, #24
10008f6c:	46bd      	mov	sp, r7
10008f6e:	bd80      	pop	{r7, pc}

10008f70 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
10008f70:	b580      	push	{r7, lr}
10008f72:	b082      	sub	sp, #8
10008f74:	af00      	add	r7, sp, #0
10008f76:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
10008f78:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
10008f7c:	687b      	ldr	r3, [r7, #4]
10008f7e:	68db      	ldr	r3, [r3, #12]
10008f80:	2b00      	cmp	r3, #0
10008f82:	d003      	beq.n	10008f8c <virtqueue_notification+0x1c>
		vq->callback(vq);
10008f84:	687b      	ldr	r3, [r7, #4]
10008f86:	68db      	ldr	r3, [r3, #12]
10008f88:	6878      	ldr	r0, [r7, #4]
10008f8a:	4798      	blx	r3
}
10008f8c:	bf00      	nop
10008f8e:	3708      	adds	r7, #8
10008f90:	46bd      	mov	sp, r7
10008f92:	bd80      	pop	{r7, pc}

10008f94 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
10008f94:	b580      	push	{r7, lr}
10008f96:	b084      	sub	sp, #16
10008f98:	af00      	add	r7, sp, #0
10008f9a:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10008f9c:	6879      	ldr	r1, [r7, #4]
10008f9e:	6809      	ldr	r1, [r1, #0]
10008fa0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10008fa4:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10008fa8:	2300      	movs	r3, #0
10008faa:	4313      	orrs	r3, r2
10008fac:	d02a      	beq.n	10009004 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008fae:	687b      	ldr	r3, [r7, #4]
10008fb0:	681b      	ldr	r3, [r3, #0]
10008fb2:	699b      	ldr	r3, [r3, #24]
10008fb4:	2b01      	cmp	r3, #1
10008fb6:	d136      	bne.n	10009026 <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
10008fb8:	687b      	ldr	r3, [r7, #4]
10008fba:	6a1b      	ldr	r3, [r3, #32]
10008fbc:	789a      	ldrb	r2, [r3, #2]
10008fbe:	78db      	ldrb	r3, [r3, #3]
10008fc0:	021b      	lsls	r3, r3, #8
10008fc2:	4313      	orrs	r3, r2
10008fc4:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
10008fc6:	687b      	ldr	r3, [r7, #4]
10008fc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
10008fca:	89fa      	ldrh	r2, [r7, #14]
10008fcc:	1ad3      	subs	r3, r2, r3
10008fce:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
10008fd0:	687b      	ldr	r3, [r7, #4]
10008fd2:	69da      	ldr	r2, [r3, #28]
10008fd4:	687b      	ldr	r3, [r7, #4]
10008fd6:	6959      	ldr	r1, [r3, #20]
10008fd8:	004b      	lsls	r3, r1, #1
10008fda:	4413      	add	r3, r2
10008fdc:	7918      	ldrb	r0, [r3, #4]
10008fde:	004b      	lsls	r3, r1, #1
10008fe0:	4413      	add	r3, r2
10008fe2:	795b      	ldrb	r3, [r3, #5]
10008fe4:	021b      	lsls	r3, r3, #8
10008fe6:	4303      	orrs	r3, r0
10008fe8:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
10008fea:	89ba      	ldrh	r2, [r7, #12]
10008fec:	89f9      	ldrh	r1, [r7, #14]
10008fee:	897b      	ldrh	r3, [r7, #10]
10008ff0:	4618      	mov	r0, r3
10008ff2:	f7ff fdbc 	bl	10008b6e <vring_need_event>
10008ff6:	4603      	mov	r3, r0
						prev_idx) != 0;
10008ff8:	2b00      	cmp	r3, #0
10008ffa:	bf14      	ite	ne
10008ffc:	2301      	movne	r3, #1
10008ffe:	2300      	moveq	r3, #0
10009000:	b2db      	uxtb	r3, r3
10009002:	e011      	b.n	10009028 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10009004:	687b      	ldr	r3, [r7, #4]
10009006:	681b      	ldr	r3, [r3, #0]
10009008:	699b      	ldr	r3, [r3, #24]
1000900a:	2b01      	cmp	r3, #1
1000900c:	d10b      	bne.n	10009026 <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000900e:	687b      	ldr	r3, [r7, #4]
10009010:	69db      	ldr	r3, [r3, #28]
10009012:	881b      	ldrh	r3, [r3, #0]
10009014:	b29b      	uxth	r3, r3
10009016:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
1000901a:	2b00      	cmp	r3, #0
1000901c:	bf0c      	ite	eq
1000901e:	2301      	moveq	r3, #1
10009020:	2300      	movne	r3, #0
10009022:	b2db      	uxtb	r3, r3
10009024:	e000      	b.n	10009028 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
10009026:	2300      	movs	r3, #0
}
10009028:	4618      	mov	r0, r3
1000902a:	3710      	adds	r7, #16
1000902c:	46bd      	mov	sp, r7
1000902e:	bd80      	pop	{r7, pc}

10009030 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
10009030:	b580      	push	{r7, lr}
10009032:	b082      	sub	sp, #8
10009034:	af00      	add	r7, sp, #0
10009036:	6078      	str	r0, [r7, #4]
	if (vq->notify)
10009038:	687b      	ldr	r3, [r7, #4]
1000903a:	691b      	ldr	r3, [r3, #16]
1000903c:	2b00      	cmp	r3, #0
1000903e:	d003      	beq.n	10009048 <vq_ring_notify+0x18>
		vq->notify(vq);
10009040:	687b      	ldr	r3, [r7, #4]
10009042:	691b      	ldr	r3, [r3, #16]
10009044:	6878      	ldr	r0, [r7, #4]
10009046:	4798      	blx	r3
}
10009048:	bf00      	nop
1000904a:	3708      	adds	r7, #8
1000904c:	46bd      	mov	sp, r7
1000904e:	bd80      	pop	{r7, pc}

10009050 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
10009050:	b580      	push	{r7, lr}
10009052:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
10009054:	4b0d      	ldr	r3, [pc, #52]	@ (1000908c <MAILBOX_Init+0x3c>)
10009056:	2201      	movs	r2, #1
10009058:	2100      	movs	r1, #0
1000905a:	480d      	ldr	r0, [pc, #52]	@ (10009090 <MAILBOX_Init+0x40>)
1000905c:	f7f9 f8f0 	bl	10002240 <HAL_IPCC_ActivateNotification>
10009060:	4603      	mov	r3, r0
10009062:	2b00      	cmp	r3, #0
10009064:	d002      	beq.n	1000906c <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
10009066:	f04f 33ff 	mov.w	r3, #4294967295
1000906a:	e00c      	b.n	10009086 <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
1000906c:	4b09      	ldr	r3, [pc, #36]	@ (10009094 <MAILBOX_Init+0x44>)
1000906e:	2201      	movs	r2, #1
10009070:	2101      	movs	r1, #1
10009072:	4807      	ldr	r0, [pc, #28]	@ (10009090 <MAILBOX_Init+0x40>)
10009074:	f7f9 f8e4 	bl	10002240 <HAL_IPCC_ActivateNotification>
10009078:	4603      	mov	r3, r0
1000907a:	2b00      	cmp	r3, #0
1000907c:	d002      	beq.n	10009084 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
1000907e:	f04f 33ff 	mov.w	r3, #4294967295
10009082:	e000      	b.n	10009086 <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
10009084:	2300      	movs	r3, #0
}
10009086:	4618      	mov	r0, r3
10009088:	bd80      	pop	{r7, pc}
1000908a:	bf00      	nop
1000908c:	10009151 	.word	0x10009151
10009090:	100201d0 	.word	0x100201d0
10009094:	1000917d 	.word	0x1000917d

10009098 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
10009098:	b580      	push	{r7, lr}
1000909a:	b084      	sub	sp, #16
1000909c:	af00      	add	r7, sp, #0
1000909e:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */
  int ret = -1;
100090a0:	f04f 33ff 	mov.w	r3, #4294967295
100090a4:	60fb      	str	r3, [r7, #12]

   /* USER CODE BEGIN PRE_MAILBOX_POLL */

   /* USER CODE END  PRE_MAILBOX_POLL */

   if (msg_received_ch1 == MBOX_BUF_FREE) {
100090a6:	4b0f      	ldr	r3, [pc, #60]	@ (100090e4 <MAILBOX_Poll+0x4c>)
100090a8:	681b      	ldr	r3, [r3, #0]
100090aa:	2b02      	cmp	r3, #2
100090ac:	d108      	bne.n	100090c0 <MAILBOX_Poll+0x28>
   /* USER CODE BEGIN MSG_CHANNEL1 */

   /* USER CODE END  MSG_CHANNEL1 */

    OPENAMP_log_dbg("Running virt0 (ch_1 buf free)\r\n");
    rproc_virtio_notified(vdev, VRING0_ID);
100090ae:	2100      	movs	r1, #0
100090b0:	6878      	ldr	r0, [r7, #4]
100090b2:	f7fe fb98 	bl	100077e6 <rproc_virtio_notified>
    ret = 0;
100090b6:	2300      	movs	r3, #0
100090b8:	60fb      	str	r3, [r7, #12]
    msg_received_ch1 = MBOX_NO_MSG;
100090ba:	4b0a      	ldr	r3, [pc, #40]	@ (100090e4 <MAILBOX_Poll+0x4c>)
100090bc:	2200      	movs	r2, #0
100090be:	601a      	str	r2, [r3, #0]
  }

  if (msg_received_ch2 == MBOX_NEW_MSG) {
100090c0:	4b09      	ldr	r3, [pc, #36]	@ (100090e8 <MAILBOX_Poll+0x50>)
100090c2:	681b      	ldr	r3, [r3, #0]
100090c4:	2b01      	cmp	r3, #1
100090c6:	d108      	bne.n	100090da <MAILBOX_Poll+0x42>
   /* USER CODE BEGIN MSG_CHANNEL2 */

   /* USER CODE END  MSG_CHANNEL2 */

    OPENAMP_log_dbg("Running virt1 (ch_2 new msg)\r\n");
    rproc_virtio_notified(vdev, VRING1_ID);
100090c8:	2101      	movs	r1, #1
100090ca:	6878      	ldr	r0, [r7, #4]
100090cc:	f7fe fb8b 	bl	100077e6 <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
100090d0:	4b05      	ldr	r3, [pc, #20]	@ (100090e8 <MAILBOX_Poll+0x50>)
100090d2:	2200      	movs	r2, #0
100090d4:	601a      	str	r2, [r3, #0]

    ret = 0;
100090d6:	2300      	movs	r3, #0
100090d8:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_MAILBOX_POLL */

  /* USER CODE END  POST_MAILBOX_POLL */

  return ret;
100090da:	68fb      	ldr	r3, [r7, #12]
}
100090dc:	4618      	mov	r0, r3
100090de:	3710      	adds	r7, #16
100090e0:	46bd      	mov	sp, r7
100090e2:	bd80      	pop	{r7, pc}
100090e4:	10020468 	.word	0x10020468
100090e8:	1002046c 	.word	0x1002046c

100090ec <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
100090ec:	b580      	push	{r7, lr}
100090ee:	b084      	sub	sp, #16
100090f0:	af00      	add	r7, sp, #0
100090f2:	6078      	str	r0, [r7, #4]
100090f4:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
100090f6:	683b      	ldr	r3, [r7, #0]
100090f8:	2b00      	cmp	r3, #0
100090fa:	d102      	bne.n	10009102 <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
100090fc:	2300      	movs	r3, #0
100090fe:	60fb      	str	r3, [r7, #12]
10009100:	e008      	b.n	10009114 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
10009102:	683b      	ldr	r3, [r7, #0]
10009104:	2b01      	cmp	r3, #1
10009106:	d102      	bne.n	1000910e <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10009108:	2301      	movs	r3, #1
1000910a:	60fb      	str	r3, [r7, #12]
1000910c:	e002      	b.n	10009114 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
1000910e:	f04f 33ff 	mov.w	r3, #4294967295
10009112:	e016      	b.n	10009142 <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
10009114:	2200      	movs	r2, #0
10009116:	68f9      	ldr	r1, [r7, #12]
10009118:	480c      	ldr	r0, [pc, #48]	@ (1000914c <MAILBOX_Notify+0x60>)
1000911a:	f7f9 f8df 	bl	100022dc <HAL_IPCC_GetChannelStatus>
1000911e:	4603      	mov	r3, r0
10009120:	2b01      	cmp	r3, #1
10009122:	d108      	bne.n	10009136 <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
10009124:	bf00      	nop
10009126:	2200      	movs	r2, #0
10009128:	68f9      	ldr	r1, [r7, #12]
1000912a:	4808      	ldr	r0, [pc, #32]	@ (1000914c <MAILBOX_Notify+0x60>)
1000912c:	f7f9 f8d6 	bl	100022dc <HAL_IPCC_GetChannelStatus>
10009130:	4603      	mov	r3, r0
10009132:	2b01      	cmp	r3, #1
10009134:	d0f7      	beq.n	10009126 <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
10009136:	2200      	movs	r2, #0
10009138:	68f9      	ldr	r1, [r7, #12]
1000913a:	4804      	ldr	r0, [pc, #16]	@ (1000914c <MAILBOX_Notify+0x60>)
1000913c:	f7f9 f902 	bl	10002344 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10009140:	2300      	movs	r3, #0
}
10009142:	4618      	mov	r0, r3
10009144:	3710      	adds	r7, #16
10009146:	46bd      	mov	sp, r7
10009148:	bd80      	pop	{r7, pc}
1000914a:	bf00      	nop
1000914c:	100201d0 	.word	0x100201d0

10009150 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10009150:	b580      	push	{r7, lr}
10009152:	b084      	sub	sp, #16
10009154:	af00      	add	r7, sp, #0
10009156:	60f8      	str	r0, [r7, #12]
10009158:	60b9      	str	r1, [r7, #8]
1000915a:	4613      	mov	r3, r2
1000915c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
1000915e:	4b06      	ldr	r3, [pc, #24]	@ (10009178 <IPCC_channel1_callback+0x28>)
10009160:	2202      	movs	r2, #2
10009162:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10009164:	2201      	movs	r2, #1
10009166:	68b9      	ldr	r1, [r7, #8]
10009168:	68f8      	ldr	r0, [r7, #12]
1000916a:	f7f9 f8eb 	bl	10002344 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
1000916e:	bf00      	nop
10009170:	3710      	adds	r7, #16
10009172:	46bd      	mov	sp, r7
10009174:	bd80      	pop	{r7, pc}
10009176:	bf00      	nop
10009178:	10020468 	.word	0x10020468

1000917c <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000917c:	b580      	push	{r7, lr}
1000917e:	b084      	sub	sp, #16
10009180:	af00      	add	r7, sp, #0
10009182:	60f8      	str	r0, [r7, #12]
10009184:	60b9      	str	r1, [r7, #8]
10009186:	4613      	mov	r3, r2
10009188:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
1000918a:	4b06      	ldr	r3, [pc, #24]	@ (100091a4 <IPCC_channel2_callback+0x28>)
1000918c:	2201      	movs	r2, #1
1000918e:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10009190:	2201      	movs	r2, #1
10009192:	68b9      	ldr	r1, [r7, #8]
10009194:	68f8      	ldr	r0, [r7, #12]
10009196:	f7f9 f8d5 	bl	10002344 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
1000919a:	bf00      	nop
1000919c:	3710      	adds	r7, #16
1000919e:	46bd      	mov	sp, r7
100091a0:	bd80      	pop	{r7, pc}
100091a2:	bf00      	nop
100091a4:	1002046c 	.word	0x1002046c

100091a8 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
100091a8:	b480      	push	{r7}
100091aa:	b083      	sub	sp, #12
100091ac:	af00      	add	r7, sp, #0
100091ae:	6078      	str	r0, [r7, #4]
100091b0:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
100091b2:	687b      	ldr	r3, [r7, #4]
100091b4:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
100091b6:	683a      	ldr	r2, [r7, #0]
100091b8:	429a      	cmp	r2, r3
100091ba:	d209      	bcs.n	100091d0 <metal_device_io_region+0x28>
100091bc:	683a      	ldr	r2, [r7, #0]
100091be:	4613      	mov	r3, r2
100091c0:	00db      	lsls	r3, r3, #3
100091c2:	1a9b      	subs	r3, r3, r2
100091c4:	00db      	lsls	r3, r3, #3
100091c6:	3308      	adds	r3, #8
100091c8:	687a      	ldr	r2, [r7, #4]
100091ca:	4413      	add	r3, r2
100091cc:	3304      	adds	r3, #4
100091ce:	e000      	b.n	100091d2 <metal_device_io_region+0x2a>
100091d0:	2300      	movs	r3, #0
}
100091d2:	4618      	mov	r0, r3
100091d4:	370c      	adds	r7, #12
100091d6:	46bd      	mov	sp, r7
100091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100091dc:	4770      	bx	lr
	...

100091e0 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
100091e0:	b590      	push	{r4, r7, lr}
100091e2:	b08d      	sub	sp, #52	@ 0x34
100091e4:	af04      	add	r7, sp, #16
100091e6:	6078      	str	r0, [r7, #4]
  int status = 0;
100091e8:	2300      	movs	r3, #0
100091ea:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
100091ec:	2300      	movs	r3, #0
100091ee:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
100091f0:	4a41      	ldr	r2, [pc, #260]	@ (100092f8 <OPENAMP_shmem_init+0x118>)
100091f2:	f107 0310 	add.w	r3, r7, #16
100091f6:	e892 0003 	ldmia.w	r2, {r0, r1}
100091fa:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
100091fe:	2300      	movs	r3, #0
10009200:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
10009202:	2300      	movs	r3, #0
10009204:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
10009206:	f107 0310 	add.w	r3, r7, #16
1000920a:	4618      	mov	r0, r3
1000920c:	f7fd fec0 	bl	10006f90 <metal_init>

  status = metal_register_generic_device(&shm_device);
10009210:	483a      	ldr	r0, [pc, #232]	@ (100092fc <OPENAMP_shmem_init+0x11c>)
10009212:	f7fd fd67 	bl	10006ce4 <metal_register_generic_device>
10009216:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10009218:	69fb      	ldr	r3, [r7, #28]
1000921a:	2b00      	cmp	r3, #0
1000921c:	d001      	beq.n	10009222 <OPENAMP_shmem_init+0x42>
    return status;
1000921e:	69fb      	ldr	r3, [r7, #28]
10009220:	e066      	b.n	100092f0 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
10009222:	f107 0318 	add.w	r3, r7, #24
10009226:	461a      	mov	r2, r3
10009228:	4935      	ldr	r1, [pc, #212]	@ (10009300 <OPENAMP_shmem_init+0x120>)
1000922a:	4836      	ldr	r0, [pc, #216]	@ (10009304 <OPENAMP_shmem_init+0x124>)
1000922c:	f7fd fd1c 	bl	10006c68 <metal_device_open>
10009230:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10009232:	69fb      	ldr	r3, [r7, #28]
10009234:	2b00      	cmp	r3, #0
10009236:	d001      	beq.n	1000923c <OPENAMP_shmem_init+0x5c>
    return status;
10009238:	69fb      	ldr	r3, [r7, #28]
1000923a:	e059      	b.n	100092f0 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
1000923c:	4a32      	ldr	r2, [pc, #200]	@ (10009308 <OPENAMP_shmem_init+0x128>)
1000923e:	4b33      	ldr	r3, [pc, #204]	@ (1000930c <OPENAMP_shmem_init+0x12c>)
10009240:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10009242:	69bb      	ldr	r3, [r7, #24]
10009244:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
10009248:	4a31      	ldr	r2, [pc, #196]	@ (10009310 <OPENAMP_shmem_init+0x130>)
1000924a:	4b2f      	ldr	r3, [pc, #188]	@ (10009308 <OPENAMP_shmem_init+0x128>)
1000924c:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000924e:	461a      	mov	r2, r3
10009250:	2300      	movs	r3, #0
10009252:	9302      	str	r3, [sp, #8]
10009254:	2300      	movs	r3, #0
10009256:	9301      	str	r3, [sp, #4]
10009258:	f04f 33ff 	mov.w	r3, #4294967295
1000925c:	9300      	str	r3, [sp, #0]
1000925e:	4613      	mov	r3, r2
10009260:	4a2a      	ldr	r2, [pc, #168]	@ (1000930c <OPENAMP_shmem_init+0x12c>)
10009262:	4929      	ldr	r1, [pc, #164]	@ (10009308 <OPENAMP_shmem_init+0x128>)
10009264:	f7fd fee2 	bl	1000702c <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
10009268:	69bb      	ldr	r3, [r7, #24]
1000926a:	2100      	movs	r1, #0
1000926c:	4618      	mov	r0, r3
1000926e:	f7ff ff9b 	bl	100091a8 <metal_device_io_region>
10009272:	4603      	mov	r3, r0
10009274:	4a27      	ldr	r2, [pc, #156]	@ (10009314 <OPENAMP_shmem_init+0x134>)
10009276:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
10009278:	4b26      	ldr	r3, [pc, #152]	@ (10009314 <OPENAMP_shmem_init+0x134>)
1000927a:	681b      	ldr	r3, [r3, #0]
1000927c:	2b00      	cmp	r3, #0
1000927e:	d102      	bne.n	10009286 <OPENAMP_shmem_init+0xa6>
    return -1;
10009280:	f04f 33ff 	mov.w	r3, #4294967295
10009284:	e034      	b.n	100092f0 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
10009286:	f107 0208 	add.w	r2, r7, #8
1000928a:	f107 030c 	add.w	r3, r7, #12
1000928e:	4619      	mov	r1, r3
10009290:	6878      	ldr	r0, [r7, #4]
10009292:	f000 f903 	bl	1000949c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
10009296:	68fb      	ldr	r3, [r7, #12]
10009298:	4a1f      	ldr	r2, [pc, #124]	@ (10009318 <OPENAMP_shmem_init+0x138>)
1000929a:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
1000929c:	4b1e      	ldr	r3, [pc, #120]	@ (10009318 <OPENAMP_shmem_init+0x138>)
1000929e:	681b      	ldr	r3, [r3, #0]
100092a0:	2b00      	cmp	r3, #0
100092a2:	d102      	bne.n	100092aa <OPENAMP_shmem_init+0xca>
  {
    return -1;
100092a4:	f04f 33ff 	mov.w	r3, #4294967295
100092a8:	e022      	b.n	100092f0 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
100092aa:	69bb      	ldr	r3, [r7, #24]
100092ac:	f103 0044 	add.w	r0, r3, #68	@ 0x44
100092b0:	4b19      	ldr	r3, [pc, #100]	@ (10009318 <OPENAMP_shmem_init+0x138>)
100092b2:	6819      	ldr	r1, [r3, #0]
100092b4:	4b18      	ldr	r3, [pc, #96]	@ (10009318 <OPENAMP_shmem_init+0x138>)
100092b6:	681a      	ldr	r2, [r3, #0]
100092b8:	68bb      	ldr	r3, [r7, #8]
100092ba:	461c      	mov	r4, r3
100092bc:	2300      	movs	r3, #0
100092be:	9302      	str	r3, [sp, #8]
100092c0:	2300      	movs	r3, #0
100092c2:	9301      	str	r3, [sp, #4]
100092c4:	f04f 33ff 	mov.w	r3, #4294967295
100092c8:	9300      	str	r3, [sp, #0]
100092ca:	4623      	mov	r3, r4
100092cc:	f7fd feae 	bl	1000702c <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
100092d0:	69bb      	ldr	r3, [r7, #24]
100092d2:	2101      	movs	r1, #1
100092d4:	4618      	mov	r0, r3
100092d6:	f7ff ff67 	bl	100091a8 <metal_device_io_region>
100092da:	4603      	mov	r3, r0
100092dc:	4a0f      	ldr	r2, [pc, #60]	@ (1000931c <OPENAMP_shmem_init+0x13c>)
100092de:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
100092e0:	4b0e      	ldr	r3, [pc, #56]	@ (1000931c <OPENAMP_shmem_init+0x13c>)
100092e2:	681b      	ldr	r3, [r3, #0]
100092e4:	2b00      	cmp	r3, #0
100092e6:	d102      	bne.n	100092ee <OPENAMP_shmem_init+0x10e>
    return -1;
100092e8:	f04f 33ff 	mov.w	r3, #4294967295
100092ec:	e000      	b.n	100092f0 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
100092ee:	2300      	movs	r3, #0
}
100092f0:	4618      	mov	r0, r3
100092f2:	3724      	adds	r7, #36	@ 0x24
100092f4:	46bd      	mov	sp, r7
100092f6:	bd90      	pop	{r4, r7, pc}
100092f8:	1000b1d8 	.word	0x1000b1d8
100092fc:	10020040 	.word	0x10020040
10009300:	1000b1c4 	.word	0x1000b1c4
10009304:	1000b1d0 	.word	0x1000b1d0
10009308:	10040000 	.word	0x10040000
1000930c:	10020514 	.word	0x10020514
10009310:	10050000 	.word	0x10050000
10009314:	10020470 	.word	0x10020470
10009318:	10020478 	.word	0x10020478
1000931c:	10020474 	.word	0x10020474

10009320 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10009320:	b590      	push	{r4, r7, lr}
10009322:	b08b      	sub	sp, #44	@ 0x2c
10009324:	af04      	add	r7, sp, #16
10009326:	6078      	str	r0, [r7, #4]
10009328:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
1000932a:	2300      	movs	r3, #0
1000932c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
1000932e:	2300      	movs	r3, #0
10009330:	613b      	str	r3, [r7, #16]
  int status = 0;
10009332:	2300      	movs	r3, #0
10009334:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
10009336:	f7ff fe8b 	bl	10009050 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
1000933a:	6878      	ldr	r0, [r7, #4]
1000933c:	f7ff ff50 	bl	100091e0 <OPENAMP_shmem_init>
10009340:	60f8      	str	r0, [r7, #12]
  if(status)
10009342:	68fb      	ldr	r3, [r7, #12]
10009344:	2b00      	cmp	r3, #0
10009346:	d001      	beq.n	1000934c <MX_OPENAMP_Init+0x2c>
  {
    return status;
10009348:	68fb      	ldr	r3, [r7, #12]
1000934a:	e068      	b.n	1000941e <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
1000934c:	6878      	ldr	r0, [r7, #4]
1000934e:	4b36      	ldr	r3, [pc, #216]	@ (10009428 <MX_OPENAMP_Init+0x108>)
10009350:	681b      	ldr	r3, [r3, #0]
10009352:	f103 0218 	add.w	r2, r3, #24
10009356:	4b35      	ldr	r3, [pc, #212]	@ (1000942c <MX_OPENAMP_Init+0x10c>)
10009358:	681b      	ldr	r3, [r3, #0]
1000935a:	2100      	movs	r1, #0
1000935c:	9102      	str	r1, [sp, #8]
1000935e:	4934      	ldr	r1, [pc, #208]	@ (10009430 <MX_OPENAMP_Init+0x110>)
10009360:	9101      	str	r1, [sp, #4]
10009362:	2100      	movs	r1, #0
10009364:	9100      	str	r1, [sp, #0]
10009366:	21ff      	movs	r1, #255	@ 0xff
10009368:	f7fe f95e 	bl	10007628 <rproc_virtio_create_vdev>
1000936c:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
1000936e:	693b      	ldr	r3, [r7, #16]
10009370:	2b00      	cmp	r3, #0
10009372:	d102      	bne.n	1000937a <MX_OPENAMP_Init+0x5a>
  {
    return -1;
10009374:	f04f 33ff 	mov.w	r3, #4294967295
10009378:	e051      	b.n	1000941e <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
1000937a:	6938      	ldr	r0, [r7, #16]
1000937c:	f7fe fa6f 	bl	1000785e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
10009380:	4b29      	ldr	r3, [pc, #164]	@ (10009428 <MX_OPENAMP_Init+0x108>)
10009382:	681b      	ldr	r3, [r3, #0]
10009384:	3334      	adds	r3, #52	@ 0x34
10009386:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10009388:	697b      	ldr	r3, [r7, #20]
1000938a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000938c:	697b      	ldr	r3, [r7, #20]
1000938e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10009390:	461c      	mov	r4, r3
10009392:	4b28      	ldr	r3, [pc, #160]	@ (10009434 <MX_OPENAMP_Init+0x114>)
10009394:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10009396:	697a      	ldr	r2, [r7, #20]
10009398:	6892      	ldr	r2, [r2, #8]
1000939a:	6979      	ldr	r1, [r7, #20]
1000939c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000939e:	9102      	str	r1, [sp, #8]
100093a0:	9201      	str	r2, [sp, #4]
100093a2:	9300      	str	r3, [sp, #0]
100093a4:	4623      	mov	r3, r4
100093a6:	4602      	mov	r2, r0
100093a8:	2100      	movs	r1, #0
100093aa:	6938      	ldr	r0, [r7, #16]
100093ac:	f7fe f9ea 	bl	10007784 <rproc_virtio_init_vring>
100093b0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
100093b2:	68fb      	ldr	r3, [r7, #12]
100093b4:	2b00      	cmp	r3, #0
100093b6:	d001      	beq.n	100093bc <MX_OPENAMP_Init+0x9c>
  {
    return status;
100093b8:	68fb      	ldr	r3, [r7, #12]
100093ba:	e030      	b.n	1000941e <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
100093bc:	4b1a      	ldr	r3, [pc, #104]	@ (10009428 <MX_OPENAMP_Init+0x108>)
100093be:	681b      	ldr	r3, [r3, #0]
100093c0:	3348      	adds	r3, #72	@ 0x48
100093c2:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
100093c4:	697b      	ldr	r3, [r7, #20]
100093c6:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
100093c8:	697b      	ldr	r3, [r7, #20]
100093ca:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
100093cc:	461c      	mov	r4, r3
100093ce:	4b19      	ldr	r3, [pc, #100]	@ (10009434 <MX_OPENAMP_Init+0x114>)
100093d0:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
100093d2:	697a      	ldr	r2, [r7, #20]
100093d4:	6892      	ldr	r2, [r2, #8]
100093d6:	6979      	ldr	r1, [r7, #20]
100093d8:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
100093da:	9102      	str	r1, [sp, #8]
100093dc:	9201      	str	r2, [sp, #4]
100093de:	9300      	str	r3, [sp, #0]
100093e0:	4623      	mov	r3, r4
100093e2:	4602      	mov	r2, r0
100093e4:	2101      	movs	r1, #1
100093e6:	6938      	ldr	r0, [r7, #16]
100093e8:	f7fe f9cc 	bl	10007784 <rproc_virtio_init_vring>
100093ec:	60f8      	str	r0, [r7, #12]
  if (status != 0)
100093ee:	68fb      	ldr	r3, [r7, #12]
100093f0:	2b00      	cmp	r3, #0
100093f2:	d001      	beq.n	100093f8 <MX_OPENAMP_Init+0xd8>
  {
    return status;
100093f4:	68fb      	ldr	r3, [r7, #12]
100093f6:	e012      	b.n	1000941e <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
100093f8:	4a0f      	ldr	r2, [pc, #60]	@ (10009438 <MX_OPENAMP_Init+0x118>)
100093fa:	4b10      	ldr	r3, [pc, #64]	@ (1000943c <MX_OPENAMP_Init+0x11c>)
100093fc:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
100093fe:	461a      	mov	r2, r3
10009400:	f04f 31ff 	mov.w	r1, #4294967295
10009404:	480e      	ldr	r0, [pc, #56]	@ (10009440 <MX_OPENAMP_Init+0x120>)
10009406:	f7fe fec2 	bl	1000818e <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
1000940a:	4b0a      	ldr	r3, [pc, #40]	@ (10009434 <MX_OPENAMP_Init+0x114>)
1000940c:	681b      	ldr	r3, [r3, #0]
1000940e:	4a0c      	ldr	r2, [pc, #48]	@ (10009440 <MX_OPENAMP_Init+0x120>)
10009410:	9200      	str	r2, [sp, #0]
10009412:	683a      	ldr	r2, [r7, #0]
10009414:	6939      	ldr	r1, [r7, #16]
10009416:	480b      	ldr	r0, [pc, #44]	@ (10009444 <MX_OPENAMP_Init+0x124>)
10009418:	f7ff f9b6 	bl	10008788 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
1000941c:	2300      	movs	r3, #0
}
1000941e:	4618      	mov	r0, r3
10009420:	371c      	adds	r7, #28
10009422:	46bd      	mov	sp, r7
10009424:	bd90      	pop	{r4, r7, pc}
10009426:	bf00      	nop
10009428:	10020478 	.word	0x10020478
1000942c:	10020474 	.word	0x10020474
10009430:	100090ed 	.word	0x100090ed
10009434:	10020470 	.word	0x10020470
10009438:	10050000 	.word	0x10050000
1000943c:	10040000 	.word	0x10040000
10009440:	1002047c 	.word	0x1002047c
10009444:	10020488 	.word	0x10020488

10009448 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
10009448:	b580      	push	{r7, lr}
1000944a:	b08a      	sub	sp, #40	@ 0x28
1000944c:	af04      	add	r7, sp, #16
1000944e:	60f8      	str	r0, [r7, #12]
10009450:	60b9      	str	r1, [r7, #8]
10009452:	607a      	str	r2, [r7, #4]
10009454:	603b      	str	r3, [r7, #0]
  int ret = 0;
10009456:	2300      	movs	r3, #0
10009458:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
1000945a:	6a3b      	ldr	r3, [r7, #32]
1000945c:	9302      	str	r3, [sp, #8]
1000945e:	683b      	ldr	r3, [r7, #0]
10009460:	9301      	str	r3, [sp, #4]
10009462:	687b      	ldr	r3, [r7, #4]
10009464:	9300      	str	r3, [sp, #0]
10009466:	f04f 33ff 	mov.w	r3, #4294967295
1000946a:	68ba      	ldr	r2, [r7, #8]
1000946c:	4904      	ldr	r1, [pc, #16]	@ (10009480 <OPENAMP_create_endpoint+0x38>)
1000946e:	68f8      	ldr	r0, [r7, #12]
10009470:	f7fe fcc2 	bl	10007df8 <rpmsg_create_ept>
10009474:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
10009476:	697b      	ldr	r3, [r7, #20]
}
10009478:	4618      	mov	r0, r3
1000947a:	3718      	adds	r7, #24
1000947c:	46bd      	mov	sp, r7
1000947e:	bd80      	pop	{r7, pc}
10009480:	10020488 	.word	0x10020488

10009484 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
10009484:	b580      	push	{r7, lr}
10009486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
10009488:	4b03      	ldr	r3, [pc, #12]	@ (10009498 <OPENAMP_check_for_message+0x14>)
1000948a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000948c:	4618      	mov	r0, r3
1000948e:	f7ff fe03 	bl	10009098 <MAILBOX_Poll>
}
10009492:	bf00      	nop
10009494:	bd80      	pop	{r7, pc}
10009496:	bf00      	nop
10009498:	10020488 	.word	0x10020488

1000949c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
1000949c:	b480      	push	{r7}
1000949e:	b085      	sub	sp, #20
100094a0:	af00      	add	r7, sp, #0
100094a2:	60f8      	str	r0, [r7, #12]
100094a4:	60b9      	str	r1, [r7, #8]
100094a6:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
100094a8:	687b      	ldr	r3, [r7, #4]
100094aa:	228c      	movs	r2, #140	@ 0x8c
100094ac:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
100094ae:	68bb      	ldr	r3, [r7, #8]
100094b0:	4a03      	ldr	r2, [pc, #12]	@ (100094c0 <resource_table_init+0x24>)
100094b2:	601a      	str	r2, [r3, #0]
}
100094b4:	bf00      	nop
100094b6:	3714      	adds	r7, #20
100094b8:	46bd      	mov	sp, r7
100094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100094be:	4770      	bx	lr
100094c0:	10020128 	.word	0x10020128

100094c4 <__assert_func>:
100094c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100094c6:	4614      	mov	r4, r2
100094c8:	461a      	mov	r2, r3
100094ca:	4b09      	ldr	r3, [pc, #36]	@ (100094f0 <__assert_func+0x2c>)
100094cc:	681b      	ldr	r3, [r3, #0]
100094ce:	4605      	mov	r5, r0
100094d0:	68d8      	ldr	r0, [r3, #12]
100094d2:	b14c      	cbz	r4, 100094e8 <__assert_func+0x24>
100094d4:	4b07      	ldr	r3, [pc, #28]	@ (100094f4 <__assert_func+0x30>)
100094d6:	9100      	str	r1, [sp, #0]
100094d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
100094dc:	4906      	ldr	r1, [pc, #24]	@ (100094f8 <__assert_func+0x34>)
100094de:	462b      	mov	r3, r5
100094e0:	f000 f9f8 	bl	100098d4 <fiprintf>
100094e4:	f000 fb71 	bl	10009bca <abort>
100094e8:	4b04      	ldr	r3, [pc, #16]	@ (100094fc <__assert_func+0x38>)
100094ea:	461c      	mov	r4, r3
100094ec:	e7f3      	b.n	100094d6 <__assert_func+0x12>
100094ee:	bf00      	nop
100094f0:	100200d8 	.word	0x100200d8
100094f4:	1000b295 	.word	0x1000b295
100094f8:	1000b2a2 	.word	0x1000b2a2
100094fc:	1000b2d0 	.word	0x1000b2d0

10009500 <atoi>:
10009500:	220a      	movs	r2, #10
10009502:	2100      	movs	r1, #0
10009504:	f000 b938 	b.w	10009778 <strtol>

10009508 <malloc>:
10009508:	4b02      	ldr	r3, [pc, #8]	@ (10009514 <malloc+0xc>)
1000950a:	4601      	mov	r1, r0
1000950c:	6818      	ldr	r0, [r3, #0]
1000950e:	f000 b82d 	b.w	1000956c <_malloc_r>
10009512:	bf00      	nop
10009514:	100200d8 	.word	0x100200d8

10009518 <free>:
10009518:	4b02      	ldr	r3, [pc, #8]	@ (10009524 <free+0xc>)
1000951a:	4601      	mov	r1, r0
1000951c:	6818      	ldr	r0, [r3, #0]
1000951e:	f000 bb5b 	b.w	10009bd8 <_free_r>
10009522:	bf00      	nop
10009524:	100200d8 	.word	0x100200d8

10009528 <sbrk_aligned>:
10009528:	b570      	push	{r4, r5, r6, lr}
1000952a:	4e0f      	ldr	r6, [pc, #60]	@ (10009568 <sbrk_aligned+0x40>)
1000952c:	460c      	mov	r4, r1
1000952e:	6831      	ldr	r1, [r6, #0]
10009530:	4605      	mov	r5, r0
10009532:	b911      	cbnz	r1, 1000953a <sbrk_aligned+0x12>
10009534:	f000 faec 	bl	10009b10 <_sbrk_r>
10009538:	6030      	str	r0, [r6, #0]
1000953a:	4621      	mov	r1, r4
1000953c:	4628      	mov	r0, r5
1000953e:	f000 fae7 	bl	10009b10 <_sbrk_r>
10009542:	1c43      	adds	r3, r0, #1
10009544:	d103      	bne.n	1000954e <sbrk_aligned+0x26>
10009546:	f04f 34ff 	mov.w	r4, #4294967295
1000954a:	4620      	mov	r0, r4
1000954c:	bd70      	pop	{r4, r5, r6, pc}
1000954e:	1cc4      	adds	r4, r0, #3
10009550:	f024 0403 	bic.w	r4, r4, #3
10009554:	42a0      	cmp	r0, r4
10009556:	d0f8      	beq.n	1000954a <sbrk_aligned+0x22>
10009558:	1a21      	subs	r1, r4, r0
1000955a:	4628      	mov	r0, r5
1000955c:	f000 fad8 	bl	10009b10 <_sbrk_r>
10009560:	3001      	adds	r0, #1
10009562:	d1f2      	bne.n	1000954a <sbrk_aligned+0x22>
10009564:	e7ef      	b.n	10009546 <sbrk_aligned+0x1e>
10009566:	bf00      	nop
10009568:	10020518 	.word	0x10020518

1000956c <_malloc_r>:
1000956c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10009570:	1ccd      	adds	r5, r1, #3
10009572:	f025 0503 	bic.w	r5, r5, #3
10009576:	3508      	adds	r5, #8
10009578:	2d0c      	cmp	r5, #12
1000957a:	bf38      	it	cc
1000957c:	250c      	movcc	r5, #12
1000957e:	2d00      	cmp	r5, #0
10009580:	4606      	mov	r6, r0
10009582:	db01      	blt.n	10009588 <_malloc_r+0x1c>
10009584:	42a9      	cmp	r1, r5
10009586:	d904      	bls.n	10009592 <_malloc_r+0x26>
10009588:	230c      	movs	r3, #12
1000958a:	6033      	str	r3, [r6, #0]
1000958c:	2000      	movs	r0, #0
1000958e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10009592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 10009668 <_malloc_r+0xfc>
10009596:	f000 f869 	bl	1000966c <__malloc_lock>
1000959a:	f8d8 3000 	ldr.w	r3, [r8]
1000959e:	461c      	mov	r4, r3
100095a0:	bb44      	cbnz	r4, 100095f4 <_malloc_r+0x88>
100095a2:	4629      	mov	r1, r5
100095a4:	4630      	mov	r0, r6
100095a6:	f7ff ffbf 	bl	10009528 <sbrk_aligned>
100095aa:	1c43      	adds	r3, r0, #1
100095ac:	4604      	mov	r4, r0
100095ae:	d158      	bne.n	10009662 <_malloc_r+0xf6>
100095b0:	f8d8 4000 	ldr.w	r4, [r8]
100095b4:	4627      	mov	r7, r4
100095b6:	2f00      	cmp	r7, #0
100095b8:	d143      	bne.n	10009642 <_malloc_r+0xd6>
100095ba:	2c00      	cmp	r4, #0
100095bc:	d04b      	beq.n	10009656 <_malloc_r+0xea>
100095be:	6823      	ldr	r3, [r4, #0]
100095c0:	4639      	mov	r1, r7
100095c2:	4630      	mov	r0, r6
100095c4:	eb04 0903 	add.w	r9, r4, r3
100095c8:	f000 faa2 	bl	10009b10 <_sbrk_r>
100095cc:	4581      	cmp	r9, r0
100095ce:	d142      	bne.n	10009656 <_malloc_r+0xea>
100095d0:	6821      	ldr	r1, [r4, #0]
100095d2:	1a6d      	subs	r5, r5, r1
100095d4:	4629      	mov	r1, r5
100095d6:	4630      	mov	r0, r6
100095d8:	f7ff ffa6 	bl	10009528 <sbrk_aligned>
100095dc:	3001      	adds	r0, #1
100095de:	d03a      	beq.n	10009656 <_malloc_r+0xea>
100095e0:	6823      	ldr	r3, [r4, #0]
100095e2:	442b      	add	r3, r5
100095e4:	6023      	str	r3, [r4, #0]
100095e6:	f8d8 3000 	ldr.w	r3, [r8]
100095ea:	685a      	ldr	r2, [r3, #4]
100095ec:	bb62      	cbnz	r2, 10009648 <_malloc_r+0xdc>
100095ee:	f8c8 7000 	str.w	r7, [r8]
100095f2:	e00f      	b.n	10009614 <_malloc_r+0xa8>
100095f4:	6822      	ldr	r2, [r4, #0]
100095f6:	1b52      	subs	r2, r2, r5
100095f8:	d420      	bmi.n	1000963c <_malloc_r+0xd0>
100095fa:	2a0b      	cmp	r2, #11
100095fc:	d917      	bls.n	1000962e <_malloc_r+0xc2>
100095fe:	1961      	adds	r1, r4, r5
10009600:	42a3      	cmp	r3, r4
10009602:	6025      	str	r5, [r4, #0]
10009604:	bf18      	it	ne
10009606:	6059      	strne	r1, [r3, #4]
10009608:	6863      	ldr	r3, [r4, #4]
1000960a:	bf08      	it	eq
1000960c:	f8c8 1000 	streq.w	r1, [r8]
10009610:	5162      	str	r2, [r4, r5]
10009612:	604b      	str	r3, [r1, #4]
10009614:	4630      	mov	r0, r6
10009616:	f000 f82f 	bl	10009678 <__malloc_unlock>
1000961a:	f104 000b 	add.w	r0, r4, #11
1000961e:	1d23      	adds	r3, r4, #4
10009620:	f020 0007 	bic.w	r0, r0, #7
10009624:	1ac2      	subs	r2, r0, r3
10009626:	bf1c      	itt	ne
10009628:	1a1b      	subne	r3, r3, r0
1000962a:	50a3      	strne	r3, [r4, r2]
1000962c:	e7af      	b.n	1000958e <_malloc_r+0x22>
1000962e:	6862      	ldr	r2, [r4, #4]
10009630:	42a3      	cmp	r3, r4
10009632:	bf0c      	ite	eq
10009634:	f8c8 2000 	streq.w	r2, [r8]
10009638:	605a      	strne	r2, [r3, #4]
1000963a:	e7eb      	b.n	10009614 <_malloc_r+0xa8>
1000963c:	4623      	mov	r3, r4
1000963e:	6864      	ldr	r4, [r4, #4]
10009640:	e7ae      	b.n	100095a0 <_malloc_r+0x34>
10009642:	463c      	mov	r4, r7
10009644:	687f      	ldr	r7, [r7, #4]
10009646:	e7b6      	b.n	100095b6 <_malloc_r+0x4a>
10009648:	461a      	mov	r2, r3
1000964a:	685b      	ldr	r3, [r3, #4]
1000964c:	42a3      	cmp	r3, r4
1000964e:	d1fb      	bne.n	10009648 <_malloc_r+0xdc>
10009650:	2300      	movs	r3, #0
10009652:	6053      	str	r3, [r2, #4]
10009654:	e7de      	b.n	10009614 <_malloc_r+0xa8>
10009656:	230c      	movs	r3, #12
10009658:	6033      	str	r3, [r6, #0]
1000965a:	4630      	mov	r0, r6
1000965c:	f000 f80c 	bl	10009678 <__malloc_unlock>
10009660:	e794      	b.n	1000958c <_malloc_r+0x20>
10009662:	6005      	str	r5, [r0, #0]
10009664:	e7d6      	b.n	10009614 <_malloc_r+0xa8>
10009666:	bf00      	nop
10009668:	1002051c 	.word	0x1002051c

1000966c <__malloc_lock>:
1000966c:	4801      	ldr	r0, [pc, #4]	@ (10009674 <__malloc_lock+0x8>)
1000966e:	f000 ba9c 	b.w	10009baa <__retarget_lock_acquire_recursive>
10009672:	bf00      	nop
10009674:	10020660 	.word	0x10020660

10009678 <__malloc_unlock>:
10009678:	4801      	ldr	r0, [pc, #4]	@ (10009680 <__malloc_unlock+0x8>)
1000967a:	f000 ba97 	b.w	10009bac <__retarget_lock_release_recursive>
1000967e:	bf00      	nop
10009680:	10020660 	.word	0x10020660

10009684 <_strtol_l.isra.0>:
10009684:	2b24      	cmp	r3, #36	@ 0x24
10009686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000968a:	4686      	mov	lr, r0
1000968c:	4690      	mov	r8, r2
1000968e:	d801      	bhi.n	10009694 <_strtol_l.isra.0+0x10>
10009690:	2b01      	cmp	r3, #1
10009692:	d106      	bne.n	100096a2 <_strtol_l.isra.0+0x1e>
10009694:	f000 fa5e 	bl	10009b54 <__errno>
10009698:	2316      	movs	r3, #22
1000969a:	6003      	str	r3, [r0, #0]
1000969c:	2000      	movs	r0, #0
1000969e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100096a2:	4834      	ldr	r0, [pc, #208]	@ (10009774 <_strtol_l.isra.0+0xf0>)
100096a4:	460d      	mov	r5, r1
100096a6:	462a      	mov	r2, r5
100096a8:	f815 4b01 	ldrb.w	r4, [r5], #1
100096ac:	5d06      	ldrb	r6, [r0, r4]
100096ae:	f016 0608 	ands.w	r6, r6, #8
100096b2:	d1f8      	bne.n	100096a6 <_strtol_l.isra.0+0x22>
100096b4:	2c2d      	cmp	r4, #45	@ 0x2d
100096b6:	d110      	bne.n	100096da <_strtol_l.isra.0+0x56>
100096b8:	782c      	ldrb	r4, [r5, #0]
100096ba:	2601      	movs	r6, #1
100096bc:	1c95      	adds	r5, r2, #2
100096be:	f033 0210 	bics.w	r2, r3, #16
100096c2:	d115      	bne.n	100096f0 <_strtol_l.isra.0+0x6c>
100096c4:	2c30      	cmp	r4, #48	@ 0x30
100096c6:	d10d      	bne.n	100096e4 <_strtol_l.isra.0+0x60>
100096c8:	782a      	ldrb	r2, [r5, #0]
100096ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
100096ce:	2a58      	cmp	r2, #88	@ 0x58
100096d0:	d108      	bne.n	100096e4 <_strtol_l.isra.0+0x60>
100096d2:	786c      	ldrb	r4, [r5, #1]
100096d4:	3502      	adds	r5, #2
100096d6:	2310      	movs	r3, #16
100096d8:	e00a      	b.n	100096f0 <_strtol_l.isra.0+0x6c>
100096da:	2c2b      	cmp	r4, #43	@ 0x2b
100096dc:	bf04      	itt	eq
100096de:	782c      	ldrbeq	r4, [r5, #0]
100096e0:	1c95      	addeq	r5, r2, #2
100096e2:	e7ec      	b.n	100096be <_strtol_l.isra.0+0x3a>
100096e4:	2b00      	cmp	r3, #0
100096e6:	d1f6      	bne.n	100096d6 <_strtol_l.isra.0+0x52>
100096e8:	2c30      	cmp	r4, #48	@ 0x30
100096ea:	bf14      	ite	ne
100096ec:	230a      	movne	r3, #10
100096ee:	2308      	moveq	r3, #8
100096f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
100096f4:	f10c 3cff 	add.w	ip, ip, #4294967295
100096f8:	2200      	movs	r2, #0
100096fa:	fbbc f9f3 	udiv	r9, ip, r3
100096fe:	4610      	mov	r0, r2
10009700:	fb03 ca19 	mls	sl, r3, r9, ip
10009704:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
10009708:	2f09      	cmp	r7, #9
1000970a:	d80f      	bhi.n	1000972c <_strtol_l.isra.0+0xa8>
1000970c:	463c      	mov	r4, r7
1000970e:	42a3      	cmp	r3, r4
10009710:	dd1b      	ble.n	1000974a <_strtol_l.isra.0+0xc6>
10009712:	1c57      	adds	r7, r2, #1
10009714:	d007      	beq.n	10009726 <_strtol_l.isra.0+0xa2>
10009716:	4581      	cmp	r9, r0
10009718:	d314      	bcc.n	10009744 <_strtol_l.isra.0+0xc0>
1000971a:	d101      	bne.n	10009720 <_strtol_l.isra.0+0x9c>
1000971c:	45a2      	cmp	sl, r4
1000971e:	db11      	blt.n	10009744 <_strtol_l.isra.0+0xc0>
10009720:	fb00 4003 	mla	r0, r0, r3, r4
10009724:	2201      	movs	r2, #1
10009726:	f815 4b01 	ldrb.w	r4, [r5], #1
1000972a:	e7eb      	b.n	10009704 <_strtol_l.isra.0+0x80>
1000972c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
10009730:	2f19      	cmp	r7, #25
10009732:	d801      	bhi.n	10009738 <_strtol_l.isra.0+0xb4>
10009734:	3c37      	subs	r4, #55	@ 0x37
10009736:	e7ea      	b.n	1000970e <_strtol_l.isra.0+0x8a>
10009738:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
1000973c:	2f19      	cmp	r7, #25
1000973e:	d804      	bhi.n	1000974a <_strtol_l.isra.0+0xc6>
10009740:	3c57      	subs	r4, #87	@ 0x57
10009742:	e7e4      	b.n	1000970e <_strtol_l.isra.0+0x8a>
10009744:	f04f 32ff 	mov.w	r2, #4294967295
10009748:	e7ed      	b.n	10009726 <_strtol_l.isra.0+0xa2>
1000974a:	1c53      	adds	r3, r2, #1
1000974c:	d108      	bne.n	10009760 <_strtol_l.isra.0+0xdc>
1000974e:	2322      	movs	r3, #34	@ 0x22
10009750:	f8ce 3000 	str.w	r3, [lr]
10009754:	4660      	mov	r0, ip
10009756:	f1b8 0f00 	cmp.w	r8, #0
1000975a:	d0a0      	beq.n	1000969e <_strtol_l.isra.0+0x1a>
1000975c:	1e69      	subs	r1, r5, #1
1000975e:	e006      	b.n	1000976e <_strtol_l.isra.0+0xea>
10009760:	b106      	cbz	r6, 10009764 <_strtol_l.isra.0+0xe0>
10009762:	4240      	negs	r0, r0
10009764:	f1b8 0f00 	cmp.w	r8, #0
10009768:	d099      	beq.n	1000969e <_strtol_l.isra.0+0x1a>
1000976a:	2a00      	cmp	r2, #0
1000976c:	d1f6      	bne.n	1000975c <_strtol_l.isra.0+0xd8>
1000976e:	f8c8 1000 	str.w	r1, [r8]
10009772:	e794      	b.n	1000969e <_strtol_l.isra.0+0x1a>
10009774:	1000b305 	.word	0x1000b305

10009778 <strtol>:
10009778:	4613      	mov	r3, r2
1000977a:	460a      	mov	r2, r1
1000977c:	4601      	mov	r1, r0
1000977e:	4802      	ldr	r0, [pc, #8]	@ (10009788 <strtol+0x10>)
10009780:	6800      	ldr	r0, [r0, #0]
10009782:	f7ff bf7f 	b.w	10009684 <_strtol_l.isra.0>
10009786:	bf00      	nop
10009788:	100200d8 	.word	0x100200d8

1000978c <std>:
1000978c:	2300      	movs	r3, #0
1000978e:	b510      	push	{r4, lr}
10009790:	4604      	mov	r4, r0
10009792:	e9c0 3300 	strd	r3, r3, [r0]
10009796:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000979a:	6083      	str	r3, [r0, #8]
1000979c:	8181      	strh	r1, [r0, #12]
1000979e:	6643      	str	r3, [r0, #100]	@ 0x64
100097a0:	81c2      	strh	r2, [r0, #14]
100097a2:	6183      	str	r3, [r0, #24]
100097a4:	4619      	mov	r1, r3
100097a6:	2208      	movs	r2, #8
100097a8:	305c      	adds	r0, #92	@ 0x5c
100097aa:	f000 f943 	bl	10009a34 <memset>
100097ae:	4b0d      	ldr	r3, [pc, #52]	@ (100097e4 <std+0x58>)
100097b0:	6263      	str	r3, [r4, #36]	@ 0x24
100097b2:	4b0d      	ldr	r3, [pc, #52]	@ (100097e8 <std+0x5c>)
100097b4:	62a3      	str	r3, [r4, #40]	@ 0x28
100097b6:	4b0d      	ldr	r3, [pc, #52]	@ (100097ec <std+0x60>)
100097b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
100097ba:	4b0d      	ldr	r3, [pc, #52]	@ (100097f0 <std+0x64>)
100097bc:	6323      	str	r3, [r4, #48]	@ 0x30
100097be:	4b0d      	ldr	r3, [pc, #52]	@ (100097f4 <std+0x68>)
100097c0:	6224      	str	r4, [r4, #32]
100097c2:	429c      	cmp	r4, r3
100097c4:	d006      	beq.n	100097d4 <std+0x48>
100097c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
100097ca:	4294      	cmp	r4, r2
100097cc:	d002      	beq.n	100097d4 <std+0x48>
100097ce:	33d0      	adds	r3, #208	@ 0xd0
100097d0:	429c      	cmp	r4, r3
100097d2:	d105      	bne.n	100097e0 <std+0x54>
100097d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
100097d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100097dc:	f000 b9e4 	b.w	10009ba8 <__retarget_lock_init_recursive>
100097e0:	bd10      	pop	{r4, pc}
100097e2:	bf00      	nop
100097e4:	10009935 	.word	0x10009935
100097e8:	10009957 	.word	0x10009957
100097ec:	1000998f 	.word	0x1000998f
100097f0:	100099b3 	.word	0x100099b3
100097f4:	10020520 	.word	0x10020520

100097f8 <stdio_exit_handler>:
100097f8:	4a02      	ldr	r2, [pc, #8]	@ (10009804 <stdio_exit_handler+0xc>)
100097fa:	4903      	ldr	r1, [pc, #12]	@ (10009808 <stdio_exit_handler+0x10>)
100097fc:	4803      	ldr	r0, [pc, #12]	@ (1000980c <stdio_exit_handler+0x14>)
100097fe:	f000 b87b 	b.w	100098f8 <_fwalk_sglue>
10009802:	bf00      	nop
10009804:	100200cc 	.word	0x100200cc
10009808:	1000a5c1 	.word	0x1000a5c1
1000980c:	100200dc 	.word	0x100200dc

10009810 <cleanup_stdio>:
10009810:	6841      	ldr	r1, [r0, #4]
10009812:	4b0c      	ldr	r3, [pc, #48]	@ (10009844 <cleanup_stdio+0x34>)
10009814:	4299      	cmp	r1, r3
10009816:	b510      	push	{r4, lr}
10009818:	4604      	mov	r4, r0
1000981a:	d001      	beq.n	10009820 <cleanup_stdio+0x10>
1000981c:	f000 fed0 	bl	1000a5c0 <_fflush_r>
10009820:	68a1      	ldr	r1, [r4, #8]
10009822:	4b09      	ldr	r3, [pc, #36]	@ (10009848 <cleanup_stdio+0x38>)
10009824:	4299      	cmp	r1, r3
10009826:	d002      	beq.n	1000982e <cleanup_stdio+0x1e>
10009828:	4620      	mov	r0, r4
1000982a:	f000 fec9 	bl	1000a5c0 <_fflush_r>
1000982e:	68e1      	ldr	r1, [r4, #12]
10009830:	4b06      	ldr	r3, [pc, #24]	@ (1000984c <cleanup_stdio+0x3c>)
10009832:	4299      	cmp	r1, r3
10009834:	d004      	beq.n	10009840 <cleanup_stdio+0x30>
10009836:	4620      	mov	r0, r4
10009838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000983c:	f000 bec0 	b.w	1000a5c0 <_fflush_r>
10009840:	bd10      	pop	{r4, pc}
10009842:	bf00      	nop
10009844:	10020520 	.word	0x10020520
10009848:	10020588 	.word	0x10020588
1000984c:	100205f0 	.word	0x100205f0

10009850 <global_stdio_init.part.0>:
10009850:	b510      	push	{r4, lr}
10009852:	4b0b      	ldr	r3, [pc, #44]	@ (10009880 <global_stdio_init.part.0+0x30>)
10009854:	4c0b      	ldr	r4, [pc, #44]	@ (10009884 <global_stdio_init.part.0+0x34>)
10009856:	4a0c      	ldr	r2, [pc, #48]	@ (10009888 <global_stdio_init.part.0+0x38>)
10009858:	601a      	str	r2, [r3, #0]
1000985a:	4620      	mov	r0, r4
1000985c:	2200      	movs	r2, #0
1000985e:	2104      	movs	r1, #4
10009860:	f7ff ff94 	bl	1000978c <std>
10009864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
10009868:	2201      	movs	r2, #1
1000986a:	2109      	movs	r1, #9
1000986c:	f7ff ff8e 	bl	1000978c <std>
10009870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
10009874:	2202      	movs	r2, #2
10009876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000987a:	2112      	movs	r1, #18
1000987c:	f7ff bf86 	b.w	1000978c <std>
10009880:	10020658 	.word	0x10020658
10009884:	10020520 	.word	0x10020520
10009888:	100097f9 	.word	0x100097f9

1000988c <__sfp_lock_acquire>:
1000988c:	4801      	ldr	r0, [pc, #4]	@ (10009894 <__sfp_lock_acquire+0x8>)
1000988e:	f000 b98c 	b.w	10009baa <__retarget_lock_acquire_recursive>
10009892:	bf00      	nop
10009894:	10020661 	.word	0x10020661

10009898 <__sfp_lock_release>:
10009898:	4801      	ldr	r0, [pc, #4]	@ (100098a0 <__sfp_lock_release+0x8>)
1000989a:	f000 b987 	b.w	10009bac <__retarget_lock_release_recursive>
1000989e:	bf00      	nop
100098a0:	10020661 	.word	0x10020661

100098a4 <__sinit>:
100098a4:	b510      	push	{r4, lr}
100098a6:	4604      	mov	r4, r0
100098a8:	f7ff fff0 	bl	1000988c <__sfp_lock_acquire>
100098ac:	6a23      	ldr	r3, [r4, #32]
100098ae:	b11b      	cbz	r3, 100098b8 <__sinit+0x14>
100098b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100098b4:	f7ff bff0 	b.w	10009898 <__sfp_lock_release>
100098b8:	4b04      	ldr	r3, [pc, #16]	@ (100098cc <__sinit+0x28>)
100098ba:	6223      	str	r3, [r4, #32]
100098bc:	4b04      	ldr	r3, [pc, #16]	@ (100098d0 <__sinit+0x2c>)
100098be:	681b      	ldr	r3, [r3, #0]
100098c0:	2b00      	cmp	r3, #0
100098c2:	d1f5      	bne.n	100098b0 <__sinit+0xc>
100098c4:	f7ff ffc4 	bl	10009850 <global_stdio_init.part.0>
100098c8:	e7f2      	b.n	100098b0 <__sinit+0xc>
100098ca:	bf00      	nop
100098cc:	10009811 	.word	0x10009811
100098d0:	10020658 	.word	0x10020658

100098d4 <fiprintf>:
100098d4:	b40e      	push	{r1, r2, r3}
100098d6:	b503      	push	{r0, r1, lr}
100098d8:	4601      	mov	r1, r0
100098da:	ab03      	add	r3, sp, #12
100098dc:	4805      	ldr	r0, [pc, #20]	@ (100098f4 <fiprintf+0x20>)
100098de:	f853 2b04 	ldr.w	r2, [r3], #4
100098e2:	6800      	ldr	r0, [r0, #0]
100098e4:	9301      	str	r3, [sp, #4]
100098e6:	f000 fb43 	bl	10009f70 <_vfiprintf_r>
100098ea:	b002      	add	sp, #8
100098ec:	f85d eb04 	ldr.w	lr, [sp], #4
100098f0:	b003      	add	sp, #12
100098f2:	4770      	bx	lr
100098f4:	100200d8 	.word	0x100200d8

100098f8 <_fwalk_sglue>:
100098f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100098fc:	4607      	mov	r7, r0
100098fe:	4688      	mov	r8, r1
10009900:	4614      	mov	r4, r2
10009902:	2600      	movs	r6, #0
10009904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10009908:	f1b9 0901 	subs.w	r9, r9, #1
1000990c:	d505      	bpl.n	1000991a <_fwalk_sglue+0x22>
1000990e:	6824      	ldr	r4, [r4, #0]
10009910:	2c00      	cmp	r4, #0
10009912:	d1f7      	bne.n	10009904 <_fwalk_sglue+0xc>
10009914:	4630      	mov	r0, r6
10009916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000991a:	89ab      	ldrh	r3, [r5, #12]
1000991c:	2b01      	cmp	r3, #1
1000991e:	d907      	bls.n	10009930 <_fwalk_sglue+0x38>
10009920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10009924:	3301      	adds	r3, #1
10009926:	d003      	beq.n	10009930 <_fwalk_sglue+0x38>
10009928:	4629      	mov	r1, r5
1000992a:	4638      	mov	r0, r7
1000992c:	47c0      	blx	r8
1000992e:	4306      	orrs	r6, r0
10009930:	3568      	adds	r5, #104	@ 0x68
10009932:	e7e9      	b.n	10009908 <_fwalk_sglue+0x10>

10009934 <__sread>:
10009934:	b510      	push	{r4, lr}
10009936:	460c      	mov	r4, r1
10009938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000993c:	f000 f8d6 	bl	10009aec <_read_r>
10009940:	2800      	cmp	r0, #0
10009942:	bfab      	itete	ge
10009944:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
10009946:	89a3      	ldrhlt	r3, [r4, #12]
10009948:	181b      	addge	r3, r3, r0
1000994a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
1000994e:	bfac      	ite	ge
10009950:	6563      	strge	r3, [r4, #84]	@ 0x54
10009952:	81a3      	strhlt	r3, [r4, #12]
10009954:	bd10      	pop	{r4, pc}

10009956 <__swrite>:
10009956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000995a:	461f      	mov	r7, r3
1000995c:	898b      	ldrh	r3, [r1, #12]
1000995e:	05db      	lsls	r3, r3, #23
10009960:	4605      	mov	r5, r0
10009962:	460c      	mov	r4, r1
10009964:	4616      	mov	r6, r2
10009966:	d505      	bpl.n	10009974 <__swrite+0x1e>
10009968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000996c:	2302      	movs	r3, #2
1000996e:	2200      	movs	r2, #0
10009970:	f000 f8aa 	bl	10009ac8 <_lseek_r>
10009974:	89a3      	ldrh	r3, [r4, #12]
10009976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000997a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
1000997e:	81a3      	strh	r3, [r4, #12]
10009980:	4632      	mov	r2, r6
10009982:	463b      	mov	r3, r7
10009984:	4628      	mov	r0, r5
10009986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000998a:	f000 b8d1 	b.w	10009b30 <_write_r>

1000998e <__sseek>:
1000998e:	b510      	push	{r4, lr}
10009990:	460c      	mov	r4, r1
10009992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009996:	f000 f897 	bl	10009ac8 <_lseek_r>
1000999a:	1c43      	adds	r3, r0, #1
1000999c:	89a3      	ldrh	r3, [r4, #12]
1000999e:	bf15      	itete	ne
100099a0:	6560      	strne	r0, [r4, #84]	@ 0x54
100099a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
100099a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
100099aa:	81a3      	strheq	r3, [r4, #12]
100099ac:	bf18      	it	ne
100099ae:	81a3      	strhne	r3, [r4, #12]
100099b0:	bd10      	pop	{r4, pc}

100099b2 <__sclose>:
100099b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100099b6:	f000 b877 	b.w	10009aa8 <_close_r>

100099ba <_vsniprintf_r>:
100099ba:	b530      	push	{r4, r5, lr}
100099bc:	4614      	mov	r4, r2
100099be:	2c00      	cmp	r4, #0
100099c0:	b09b      	sub	sp, #108	@ 0x6c
100099c2:	4605      	mov	r5, r0
100099c4:	461a      	mov	r2, r3
100099c6:	da05      	bge.n	100099d4 <_vsniprintf_r+0x1a>
100099c8:	238b      	movs	r3, #139	@ 0x8b
100099ca:	6003      	str	r3, [r0, #0]
100099cc:	f04f 30ff 	mov.w	r0, #4294967295
100099d0:	b01b      	add	sp, #108	@ 0x6c
100099d2:	bd30      	pop	{r4, r5, pc}
100099d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
100099d8:	f8ad 300c 	strh.w	r3, [sp, #12]
100099dc:	f04f 0300 	mov.w	r3, #0
100099e0:	9319      	str	r3, [sp, #100]	@ 0x64
100099e2:	bf14      	ite	ne
100099e4:	f104 33ff 	addne.w	r3, r4, #4294967295
100099e8:	4623      	moveq	r3, r4
100099ea:	9302      	str	r3, [sp, #8]
100099ec:	9305      	str	r3, [sp, #20]
100099ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
100099f2:	9100      	str	r1, [sp, #0]
100099f4:	9104      	str	r1, [sp, #16]
100099f6:	f8ad 300e 	strh.w	r3, [sp, #14]
100099fa:	4669      	mov	r1, sp
100099fc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
100099fe:	f000 f991 	bl	10009d24 <_svfiprintf_r>
10009a02:	1c43      	adds	r3, r0, #1
10009a04:	bfbc      	itt	lt
10009a06:	238b      	movlt	r3, #139	@ 0x8b
10009a08:	602b      	strlt	r3, [r5, #0]
10009a0a:	2c00      	cmp	r4, #0
10009a0c:	d0e0      	beq.n	100099d0 <_vsniprintf_r+0x16>
10009a0e:	9b00      	ldr	r3, [sp, #0]
10009a10:	2200      	movs	r2, #0
10009a12:	701a      	strb	r2, [r3, #0]
10009a14:	e7dc      	b.n	100099d0 <_vsniprintf_r+0x16>
	...

10009a18 <vsniprintf>:
10009a18:	b507      	push	{r0, r1, r2, lr}
10009a1a:	9300      	str	r3, [sp, #0]
10009a1c:	4613      	mov	r3, r2
10009a1e:	460a      	mov	r2, r1
10009a20:	4601      	mov	r1, r0
10009a22:	4803      	ldr	r0, [pc, #12]	@ (10009a30 <vsniprintf+0x18>)
10009a24:	6800      	ldr	r0, [r0, #0]
10009a26:	f7ff ffc8 	bl	100099ba <_vsniprintf_r>
10009a2a:	b003      	add	sp, #12
10009a2c:	f85d fb04 	ldr.w	pc, [sp], #4
10009a30:	100200d8 	.word	0x100200d8

10009a34 <memset>:
10009a34:	4402      	add	r2, r0
10009a36:	4603      	mov	r3, r0
10009a38:	4293      	cmp	r3, r2
10009a3a:	d100      	bne.n	10009a3e <memset+0xa>
10009a3c:	4770      	bx	lr
10009a3e:	f803 1b01 	strb.w	r1, [r3], #1
10009a42:	e7f9      	b.n	10009a38 <memset+0x4>

10009a44 <strchr>:
10009a44:	b2c9      	uxtb	r1, r1
10009a46:	4603      	mov	r3, r0
10009a48:	4618      	mov	r0, r3
10009a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
10009a4e:	b112      	cbz	r2, 10009a56 <strchr+0x12>
10009a50:	428a      	cmp	r2, r1
10009a52:	d1f9      	bne.n	10009a48 <strchr+0x4>
10009a54:	4770      	bx	lr
10009a56:	2900      	cmp	r1, #0
10009a58:	bf18      	it	ne
10009a5a:	2000      	movne	r0, #0
10009a5c:	4770      	bx	lr

10009a5e <strncmp>:
10009a5e:	b510      	push	{r4, lr}
10009a60:	b16a      	cbz	r2, 10009a7e <strncmp+0x20>
10009a62:	3901      	subs	r1, #1
10009a64:	1884      	adds	r4, r0, r2
10009a66:	f810 2b01 	ldrb.w	r2, [r0], #1
10009a6a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10009a6e:	429a      	cmp	r2, r3
10009a70:	d103      	bne.n	10009a7a <strncmp+0x1c>
10009a72:	42a0      	cmp	r0, r4
10009a74:	d001      	beq.n	10009a7a <strncmp+0x1c>
10009a76:	2a00      	cmp	r2, #0
10009a78:	d1f5      	bne.n	10009a66 <strncmp+0x8>
10009a7a:	1ad0      	subs	r0, r2, r3
10009a7c:	bd10      	pop	{r4, pc}
10009a7e:	4610      	mov	r0, r2
10009a80:	e7fc      	b.n	10009a7c <strncmp+0x1e>

10009a82 <strncpy>:
10009a82:	b510      	push	{r4, lr}
10009a84:	3901      	subs	r1, #1
10009a86:	4603      	mov	r3, r0
10009a88:	b132      	cbz	r2, 10009a98 <strncpy+0x16>
10009a8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10009a8e:	f803 4b01 	strb.w	r4, [r3], #1
10009a92:	3a01      	subs	r2, #1
10009a94:	2c00      	cmp	r4, #0
10009a96:	d1f7      	bne.n	10009a88 <strncpy+0x6>
10009a98:	441a      	add	r2, r3
10009a9a:	2100      	movs	r1, #0
10009a9c:	4293      	cmp	r3, r2
10009a9e:	d100      	bne.n	10009aa2 <strncpy+0x20>
10009aa0:	bd10      	pop	{r4, pc}
10009aa2:	f803 1b01 	strb.w	r1, [r3], #1
10009aa6:	e7f9      	b.n	10009a9c <strncpy+0x1a>

10009aa8 <_close_r>:
10009aa8:	b538      	push	{r3, r4, r5, lr}
10009aaa:	4d06      	ldr	r5, [pc, #24]	@ (10009ac4 <_close_r+0x1c>)
10009aac:	2300      	movs	r3, #0
10009aae:	4604      	mov	r4, r0
10009ab0:	4608      	mov	r0, r1
10009ab2:	602b      	str	r3, [r5, #0]
10009ab4:	f7f7 ffbc 	bl	10001a30 <_close>
10009ab8:	1c43      	adds	r3, r0, #1
10009aba:	d102      	bne.n	10009ac2 <_close_r+0x1a>
10009abc:	682b      	ldr	r3, [r5, #0]
10009abe:	b103      	cbz	r3, 10009ac2 <_close_r+0x1a>
10009ac0:	6023      	str	r3, [r4, #0]
10009ac2:	bd38      	pop	{r3, r4, r5, pc}
10009ac4:	1002065c 	.word	0x1002065c

10009ac8 <_lseek_r>:
10009ac8:	b538      	push	{r3, r4, r5, lr}
10009aca:	4d07      	ldr	r5, [pc, #28]	@ (10009ae8 <_lseek_r+0x20>)
10009acc:	4604      	mov	r4, r0
10009ace:	4608      	mov	r0, r1
10009ad0:	4611      	mov	r1, r2
10009ad2:	2200      	movs	r2, #0
10009ad4:	602a      	str	r2, [r5, #0]
10009ad6:	461a      	mov	r2, r3
10009ad8:	f7f7 ffd1 	bl	10001a7e <_lseek>
10009adc:	1c43      	adds	r3, r0, #1
10009ade:	d102      	bne.n	10009ae6 <_lseek_r+0x1e>
10009ae0:	682b      	ldr	r3, [r5, #0]
10009ae2:	b103      	cbz	r3, 10009ae6 <_lseek_r+0x1e>
10009ae4:	6023      	str	r3, [r4, #0]
10009ae6:	bd38      	pop	{r3, r4, r5, pc}
10009ae8:	1002065c 	.word	0x1002065c

10009aec <_read_r>:
10009aec:	b538      	push	{r3, r4, r5, lr}
10009aee:	4d07      	ldr	r5, [pc, #28]	@ (10009b0c <_read_r+0x20>)
10009af0:	4604      	mov	r4, r0
10009af2:	4608      	mov	r0, r1
10009af4:	4611      	mov	r1, r2
10009af6:	2200      	movs	r2, #0
10009af8:	602a      	str	r2, [r5, #0]
10009afa:	461a      	mov	r2, r3
10009afc:	f7f7 ff5f 	bl	100019be <_read>
10009b00:	1c43      	adds	r3, r0, #1
10009b02:	d102      	bne.n	10009b0a <_read_r+0x1e>
10009b04:	682b      	ldr	r3, [r5, #0]
10009b06:	b103      	cbz	r3, 10009b0a <_read_r+0x1e>
10009b08:	6023      	str	r3, [r4, #0]
10009b0a:	bd38      	pop	{r3, r4, r5, pc}
10009b0c:	1002065c 	.word	0x1002065c

10009b10 <_sbrk_r>:
10009b10:	b538      	push	{r3, r4, r5, lr}
10009b12:	4d06      	ldr	r5, [pc, #24]	@ (10009b2c <_sbrk_r+0x1c>)
10009b14:	2300      	movs	r3, #0
10009b16:	4604      	mov	r4, r0
10009b18:	4608      	mov	r0, r1
10009b1a:	602b      	str	r3, [r5, #0]
10009b1c:	f7f7 ffbc 	bl	10001a98 <_sbrk>
10009b20:	1c43      	adds	r3, r0, #1
10009b22:	d102      	bne.n	10009b2a <_sbrk_r+0x1a>
10009b24:	682b      	ldr	r3, [r5, #0]
10009b26:	b103      	cbz	r3, 10009b2a <_sbrk_r+0x1a>
10009b28:	6023      	str	r3, [r4, #0]
10009b2a:	bd38      	pop	{r3, r4, r5, pc}
10009b2c:	1002065c 	.word	0x1002065c

10009b30 <_write_r>:
10009b30:	b538      	push	{r3, r4, r5, lr}
10009b32:	4d07      	ldr	r5, [pc, #28]	@ (10009b50 <_write_r+0x20>)
10009b34:	4604      	mov	r4, r0
10009b36:	4608      	mov	r0, r1
10009b38:	4611      	mov	r1, r2
10009b3a:	2200      	movs	r2, #0
10009b3c:	602a      	str	r2, [r5, #0]
10009b3e:	461a      	mov	r2, r3
10009b40:	f7f7 ff5a 	bl	100019f8 <_write>
10009b44:	1c43      	adds	r3, r0, #1
10009b46:	d102      	bne.n	10009b4e <_write_r+0x1e>
10009b48:	682b      	ldr	r3, [r5, #0]
10009b4a:	b103      	cbz	r3, 10009b4e <_write_r+0x1e>
10009b4c:	6023      	str	r3, [r4, #0]
10009b4e:	bd38      	pop	{r3, r4, r5, pc}
10009b50:	1002065c 	.word	0x1002065c

10009b54 <__errno>:
10009b54:	4b01      	ldr	r3, [pc, #4]	@ (10009b5c <__errno+0x8>)
10009b56:	6818      	ldr	r0, [r3, #0]
10009b58:	4770      	bx	lr
10009b5a:	bf00      	nop
10009b5c:	100200d8 	.word	0x100200d8

10009b60 <__libc_init_array>:
10009b60:	b570      	push	{r4, r5, r6, lr}
10009b62:	4d0d      	ldr	r5, [pc, #52]	@ (10009b98 <__libc_init_array+0x38>)
10009b64:	4c0d      	ldr	r4, [pc, #52]	@ (10009b9c <__libc_init_array+0x3c>)
10009b66:	1b64      	subs	r4, r4, r5
10009b68:	10a4      	asrs	r4, r4, #2
10009b6a:	2600      	movs	r6, #0
10009b6c:	42a6      	cmp	r6, r4
10009b6e:	d109      	bne.n	10009b84 <__libc_init_array+0x24>
10009b70:	4d0b      	ldr	r5, [pc, #44]	@ (10009ba0 <__libc_init_array+0x40>)
10009b72:	4c0c      	ldr	r4, [pc, #48]	@ (10009ba4 <__libc_init_array+0x44>)
10009b74:	f000 fef8 	bl	1000a968 <_init>
10009b78:	1b64      	subs	r4, r4, r5
10009b7a:	10a4      	asrs	r4, r4, #2
10009b7c:	2600      	movs	r6, #0
10009b7e:	42a6      	cmp	r6, r4
10009b80:	d105      	bne.n	10009b8e <__libc_init_array+0x2e>
10009b82:	bd70      	pop	{r4, r5, r6, pc}
10009b84:	f855 3b04 	ldr.w	r3, [r5], #4
10009b88:	4798      	blx	r3
10009b8a:	3601      	adds	r6, #1
10009b8c:	e7ee      	b.n	10009b6c <__libc_init_array+0xc>
10009b8e:	f855 3b04 	ldr.w	r3, [r5], #4
10009b92:	4798      	blx	r3
10009b94:	3601      	adds	r6, #1
10009b96:	e7f2      	b.n	10009b7e <__libc_init_array+0x1e>
10009b98:	1000b410 	.word	0x1000b410
10009b9c:	1000b410 	.word	0x1000b410
10009ba0:	1000b410 	.word	0x1000b410
10009ba4:	1000b414 	.word	0x1000b414

10009ba8 <__retarget_lock_init_recursive>:
10009ba8:	4770      	bx	lr

10009baa <__retarget_lock_acquire_recursive>:
10009baa:	4770      	bx	lr

10009bac <__retarget_lock_release_recursive>:
10009bac:	4770      	bx	lr

10009bae <memcpy>:
10009bae:	440a      	add	r2, r1
10009bb0:	4291      	cmp	r1, r2
10009bb2:	f100 33ff 	add.w	r3, r0, #4294967295
10009bb6:	d100      	bne.n	10009bba <memcpy+0xc>
10009bb8:	4770      	bx	lr
10009bba:	b510      	push	{r4, lr}
10009bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
10009bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
10009bc4:	4291      	cmp	r1, r2
10009bc6:	d1f9      	bne.n	10009bbc <memcpy+0xe>
10009bc8:	bd10      	pop	{r4, pc}

10009bca <abort>:
10009bca:	b508      	push	{r3, lr}
10009bcc:	2006      	movs	r0, #6
10009bce:	f000 fdf5 	bl	1000a7bc <raise>
10009bd2:	2001      	movs	r0, #1
10009bd4:	f7f7 fee8 	bl	100019a8 <_exit>

10009bd8 <_free_r>:
10009bd8:	b538      	push	{r3, r4, r5, lr}
10009bda:	4605      	mov	r5, r0
10009bdc:	2900      	cmp	r1, #0
10009bde:	d041      	beq.n	10009c64 <_free_r+0x8c>
10009be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
10009be4:	1f0c      	subs	r4, r1, #4
10009be6:	2b00      	cmp	r3, #0
10009be8:	bfb8      	it	lt
10009bea:	18e4      	addlt	r4, r4, r3
10009bec:	f7ff fd3e 	bl	1000966c <__malloc_lock>
10009bf0:	4a1d      	ldr	r2, [pc, #116]	@ (10009c68 <_free_r+0x90>)
10009bf2:	6813      	ldr	r3, [r2, #0]
10009bf4:	b933      	cbnz	r3, 10009c04 <_free_r+0x2c>
10009bf6:	6063      	str	r3, [r4, #4]
10009bf8:	6014      	str	r4, [r2, #0]
10009bfa:	4628      	mov	r0, r5
10009bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10009c00:	f7ff bd3a 	b.w	10009678 <__malloc_unlock>
10009c04:	42a3      	cmp	r3, r4
10009c06:	d908      	bls.n	10009c1a <_free_r+0x42>
10009c08:	6820      	ldr	r0, [r4, #0]
10009c0a:	1821      	adds	r1, r4, r0
10009c0c:	428b      	cmp	r3, r1
10009c0e:	bf01      	itttt	eq
10009c10:	6819      	ldreq	r1, [r3, #0]
10009c12:	685b      	ldreq	r3, [r3, #4]
10009c14:	1809      	addeq	r1, r1, r0
10009c16:	6021      	streq	r1, [r4, #0]
10009c18:	e7ed      	b.n	10009bf6 <_free_r+0x1e>
10009c1a:	461a      	mov	r2, r3
10009c1c:	685b      	ldr	r3, [r3, #4]
10009c1e:	b10b      	cbz	r3, 10009c24 <_free_r+0x4c>
10009c20:	42a3      	cmp	r3, r4
10009c22:	d9fa      	bls.n	10009c1a <_free_r+0x42>
10009c24:	6811      	ldr	r1, [r2, #0]
10009c26:	1850      	adds	r0, r2, r1
10009c28:	42a0      	cmp	r0, r4
10009c2a:	d10b      	bne.n	10009c44 <_free_r+0x6c>
10009c2c:	6820      	ldr	r0, [r4, #0]
10009c2e:	4401      	add	r1, r0
10009c30:	1850      	adds	r0, r2, r1
10009c32:	4283      	cmp	r3, r0
10009c34:	6011      	str	r1, [r2, #0]
10009c36:	d1e0      	bne.n	10009bfa <_free_r+0x22>
10009c38:	6818      	ldr	r0, [r3, #0]
10009c3a:	685b      	ldr	r3, [r3, #4]
10009c3c:	6053      	str	r3, [r2, #4]
10009c3e:	4408      	add	r0, r1
10009c40:	6010      	str	r0, [r2, #0]
10009c42:	e7da      	b.n	10009bfa <_free_r+0x22>
10009c44:	d902      	bls.n	10009c4c <_free_r+0x74>
10009c46:	230c      	movs	r3, #12
10009c48:	602b      	str	r3, [r5, #0]
10009c4a:	e7d6      	b.n	10009bfa <_free_r+0x22>
10009c4c:	6820      	ldr	r0, [r4, #0]
10009c4e:	1821      	adds	r1, r4, r0
10009c50:	428b      	cmp	r3, r1
10009c52:	bf04      	itt	eq
10009c54:	6819      	ldreq	r1, [r3, #0]
10009c56:	685b      	ldreq	r3, [r3, #4]
10009c58:	6063      	str	r3, [r4, #4]
10009c5a:	bf04      	itt	eq
10009c5c:	1809      	addeq	r1, r1, r0
10009c5e:	6021      	streq	r1, [r4, #0]
10009c60:	6054      	str	r4, [r2, #4]
10009c62:	e7ca      	b.n	10009bfa <_free_r+0x22>
10009c64:	bd38      	pop	{r3, r4, r5, pc}
10009c66:	bf00      	nop
10009c68:	1002051c 	.word	0x1002051c

10009c6c <__ssputs_r>:
10009c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10009c70:	688e      	ldr	r6, [r1, #8]
10009c72:	461f      	mov	r7, r3
10009c74:	42be      	cmp	r6, r7
10009c76:	680b      	ldr	r3, [r1, #0]
10009c78:	4682      	mov	sl, r0
10009c7a:	460c      	mov	r4, r1
10009c7c:	4690      	mov	r8, r2
10009c7e:	d82d      	bhi.n	10009cdc <__ssputs_r+0x70>
10009c80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10009c84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
10009c88:	d026      	beq.n	10009cd8 <__ssputs_r+0x6c>
10009c8a:	6965      	ldr	r5, [r4, #20]
10009c8c:	6909      	ldr	r1, [r1, #16]
10009c8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
10009c92:	eba3 0901 	sub.w	r9, r3, r1
10009c96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
10009c9a:	1c7b      	adds	r3, r7, #1
10009c9c:	444b      	add	r3, r9
10009c9e:	106d      	asrs	r5, r5, #1
10009ca0:	429d      	cmp	r5, r3
10009ca2:	bf38      	it	cc
10009ca4:	461d      	movcc	r5, r3
10009ca6:	0553      	lsls	r3, r2, #21
10009ca8:	d527      	bpl.n	10009cfa <__ssputs_r+0x8e>
10009caa:	4629      	mov	r1, r5
10009cac:	f7ff fc5e 	bl	1000956c <_malloc_r>
10009cb0:	4606      	mov	r6, r0
10009cb2:	b360      	cbz	r0, 10009d0e <__ssputs_r+0xa2>
10009cb4:	6921      	ldr	r1, [r4, #16]
10009cb6:	464a      	mov	r2, r9
10009cb8:	f7ff ff79 	bl	10009bae <memcpy>
10009cbc:	89a3      	ldrh	r3, [r4, #12]
10009cbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
10009cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10009cc6:	81a3      	strh	r3, [r4, #12]
10009cc8:	6126      	str	r6, [r4, #16]
10009cca:	6165      	str	r5, [r4, #20]
10009ccc:	444e      	add	r6, r9
10009cce:	eba5 0509 	sub.w	r5, r5, r9
10009cd2:	6026      	str	r6, [r4, #0]
10009cd4:	60a5      	str	r5, [r4, #8]
10009cd6:	463e      	mov	r6, r7
10009cd8:	42be      	cmp	r6, r7
10009cda:	d900      	bls.n	10009cde <__ssputs_r+0x72>
10009cdc:	463e      	mov	r6, r7
10009cde:	6820      	ldr	r0, [r4, #0]
10009ce0:	4632      	mov	r2, r6
10009ce2:	4641      	mov	r1, r8
10009ce4:	f000 fd28 	bl	1000a738 <memmove>
10009ce8:	68a3      	ldr	r3, [r4, #8]
10009cea:	1b9b      	subs	r3, r3, r6
10009cec:	60a3      	str	r3, [r4, #8]
10009cee:	6823      	ldr	r3, [r4, #0]
10009cf0:	4433      	add	r3, r6
10009cf2:	6023      	str	r3, [r4, #0]
10009cf4:	2000      	movs	r0, #0
10009cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10009cfa:	462a      	mov	r2, r5
10009cfc:	f000 fd7a 	bl	1000a7f4 <_realloc_r>
10009d00:	4606      	mov	r6, r0
10009d02:	2800      	cmp	r0, #0
10009d04:	d1e0      	bne.n	10009cc8 <__ssputs_r+0x5c>
10009d06:	6921      	ldr	r1, [r4, #16]
10009d08:	4650      	mov	r0, sl
10009d0a:	f7ff ff65 	bl	10009bd8 <_free_r>
10009d0e:	230c      	movs	r3, #12
10009d10:	f8ca 3000 	str.w	r3, [sl]
10009d14:	89a3      	ldrh	r3, [r4, #12]
10009d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009d1a:	81a3      	strh	r3, [r4, #12]
10009d1c:	f04f 30ff 	mov.w	r0, #4294967295
10009d20:	e7e9      	b.n	10009cf6 <__ssputs_r+0x8a>
	...

10009d24 <_svfiprintf_r>:
10009d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009d28:	4698      	mov	r8, r3
10009d2a:	898b      	ldrh	r3, [r1, #12]
10009d2c:	061b      	lsls	r3, r3, #24
10009d2e:	b09d      	sub	sp, #116	@ 0x74
10009d30:	4607      	mov	r7, r0
10009d32:	460d      	mov	r5, r1
10009d34:	4614      	mov	r4, r2
10009d36:	d510      	bpl.n	10009d5a <_svfiprintf_r+0x36>
10009d38:	690b      	ldr	r3, [r1, #16]
10009d3a:	b973      	cbnz	r3, 10009d5a <_svfiprintf_r+0x36>
10009d3c:	2140      	movs	r1, #64	@ 0x40
10009d3e:	f7ff fc15 	bl	1000956c <_malloc_r>
10009d42:	6028      	str	r0, [r5, #0]
10009d44:	6128      	str	r0, [r5, #16]
10009d46:	b930      	cbnz	r0, 10009d56 <_svfiprintf_r+0x32>
10009d48:	230c      	movs	r3, #12
10009d4a:	603b      	str	r3, [r7, #0]
10009d4c:	f04f 30ff 	mov.w	r0, #4294967295
10009d50:	b01d      	add	sp, #116	@ 0x74
10009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009d56:	2340      	movs	r3, #64	@ 0x40
10009d58:	616b      	str	r3, [r5, #20]
10009d5a:	2300      	movs	r3, #0
10009d5c:	9309      	str	r3, [sp, #36]	@ 0x24
10009d5e:	2320      	movs	r3, #32
10009d60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
10009d64:	f8cd 800c 	str.w	r8, [sp, #12]
10009d68:	2330      	movs	r3, #48	@ 0x30
10009d6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 10009f08 <_svfiprintf_r+0x1e4>
10009d6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
10009d72:	f04f 0901 	mov.w	r9, #1
10009d76:	4623      	mov	r3, r4
10009d78:	469a      	mov	sl, r3
10009d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
10009d7e:	b10a      	cbz	r2, 10009d84 <_svfiprintf_r+0x60>
10009d80:	2a25      	cmp	r2, #37	@ 0x25
10009d82:	d1f9      	bne.n	10009d78 <_svfiprintf_r+0x54>
10009d84:	ebba 0b04 	subs.w	fp, sl, r4
10009d88:	d00b      	beq.n	10009da2 <_svfiprintf_r+0x7e>
10009d8a:	465b      	mov	r3, fp
10009d8c:	4622      	mov	r2, r4
10009d8e:	4629      	mov	r1, r5
10009d90:	4638      	mov	r0, r7
10009d92:	f7ff ff6b 	bl	10009c6c <__ssputs_r>
10009d96:	3001      	adds	r0, #1
10009d98:	f000 80a7 	beq.w	10009eea <_svfiprintf_r+0x1c6>
10009d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10009d9e:	445a      	add	r2, fp
10009da0:	9209      	str	r2, [sp, #36]	@ 0x24
10009da2:	f89a 3000 	ldrb.w	r3, [sl]
10009da6:	2b00      	cmp	r3, #0
10009da8:	f000 809f 	beq.w	10009eea <_svfiprintf_r+0x1c6>
10009dac:	2300      	movs	r3, #0
10009dae:	f04f 32ff 	mov.w	r2, #4294967295
10009db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
10009db6:	f10a 0a01 	add.w	sl, sl, #1
10009dba:	9304      	str	r3, [sp, #16]
10009dbc:	9307      	str	r3, [sp, #28]
10009dbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
10009dc2:	931a      	str	r3, [sp, #104]	@ 0x68
10009dc4:	4654      	mov	r4, sl
10009dc6:	2205      	movs	r2, #5
10009dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
10009dcc:	484e      	ldr	r0, [pc, #312]	@ (10009f08 <_svfiprintf_r+0x1e4>)
10009dce:	f7f6 f947 	bl	10000060 <memchr>
10009dd2:	9a04      	ldr	r2, [sp, #16]
10009dd4:	b9d8      	cbnz	r0, 10009e0e <_svfiprintf_r+0xea>
10009dd6:	06d0      	lsls	r0, r2, #27
10009dd8:	bf44      	itt	mi
10009dda:	2320      	movmi	r3, #32
10009ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10009de0:	0711      	lsls	r1, r2, #28
10009de2:	bf44      	itt	mi
10009de4:	232b      	movmi	r3, #43	@ 0x2b
10009de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10009dea:	f89a 3000 	ldrb.w	r3, [sl]
10009dee:	2b2a      	cmp	r3, #42	@ 0x2a
10009df0:	d015      	beq.n	10009e1e <_svfiprintf_r+0xfa>
10009df2:	9a07      	ldr	r2, [sp, #28]
10009df4:	4654      	mov	r4, sl
10009df6:	2000      	movs	r0, #0
10009df8:	f04f 0c0a 	mov.w	ip, #10
10009dfc:	4621      	mov	r1, r4
10009dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
10009e02:	3b30      	subs	r3, #48	@ 0x30
10009e04:	2b09      	cmp	r3, #9
10009e06:	d94b      	bls.n	10009ea0 <_svfiprintf_r+0x17c>
10009e08:	b1b0      	cbz	r0, 10009e38 <_svfiprintf_r+0x114>
10009e0a:	9207      	str	r2, [sp, #28]
10009e0c:	e014      	b.n	10009e38 <_svfiprintf_r+0x114>
10009e0e:	eba0 0308 	sub.w	r3, r0, r8
10009e12:	fa09 f303 	lsl.w	r3, r9, r3
10009e16:	4313      	orrs	r3, r2
10009e18:	9304      	str	r3, [sp, #16]
10009e1a:	46a2      	mov	sl, r4
10009e1c:	e7d2      	b.n	10009dc4 <_svfiprintf_r+0xa0>
10009e1e:	9b03      	ldr	r3, [sp, #12]
10009e20:	1d19      	adds	r1, r3, #4
10009e22:	681b      	ldr	r3, [r3, #0]
10009e24:	9103      	str	r1, [sp, #12]
10009e26:	2b00      	cmp	r3, #0
10009e28:	bfbb      	ittet	lt
10009e2a:	425b      	neglt	r3, r3
10009e2c:	f042 0202 	orrlt.w	r2, r2, #2
10009e30:	9307      	strge	r3, [sp, #28]
10009e32:	9307      	strlt	r3, [sp, #28]
10009e34:	bfb8      	it	lt
10009e36:	9204      	strlt	r2, [sp, #16]
10009e38:	7823      	ldrb	r3, [r4, #0]
10009e3a:	2b2e      	cmp	r3, #46	@ 0x2e
10009e3c:	d10a      	bne.n	10009e54 <_svfiprintf_r+0x130>
10009e3e:	7863      	ldrb	r3, [r4, #1]
10009e40:	2b2a      	cmp	r3, #42	@ 0x2a
10009e42:	d132      	bne.n	10009eaa <_svfiprintf_r+0x186>
10009e44:	9b03      	ldr	r3, [sp, #12]
10009e46:	1d1a      	adds	r2, r3, #4
10009e48:	681b      	ldr	r3, [r3, #0]
10009e4a:	9203      	str	r2, [sp, #12]
10009e4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
10009e50:	3402      	adds	r4, #2
10009e52:	9305      	str	r3, [sp, #20]
10009e54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 10009f18 <_svfiprintf_r+0x1f4>
10009e58:	7821      	ldrb	r1, [r4, #0]
10009e5a:	2203      	movs	r2, #3
10009e5c:	4650      	mov	r0, sl
10009e5e:	f7f6 f8ff 	bl	10000060 <memchr>
10009e62:	b138      	cbz	r0, 10009e74 <_svfiprintf_r+0x150>
10009e64:	9b04      	ldr	r3, [sp, #16]
10009e66:	eba0 000a 	sub.w	r0, r0, sl
10009e6a:	2240      	movs	r2, #64	@ 0x40
10009e6c:	4082      	lsls	r2, r0
10009e6e:	4313      	orrs	r3, r2
10009e70:	3401      	adds	r4, #1
10009e72:	9304      	str	r3, [sp, #16]
10009e74:	f814 1b01 	ldrb.w	r1, [r4], #1
10009e78:	4824      	ldr	r0, [pc, #144]	@ (10009f0c <_svfiprintf_r+0x1e8>)
10009e7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
10009e7e:	2206      	movs	r2, #6
10009e80:	f7f6 f8ee 	bl	10000060 <memchr>
10009e84:	2800      	cmp	r0, #0
10009e86:	d036      	beq.n	10009ef6 <_svfiprintf_r+0x1d2>
10009e88:	4b21      	ldr	r3, [pc, #132]	@ (10009f10 <_svfiprintf_r+0x1ec>)
10009e8a:	bb1b      	cbnz	r3, 10009ed4 <_svfiprintf_r+0x1b0>
10009e8c:	9b03      	ldr	r3, [sp, #12]
10009e8e:	3307      	adds	r3, #7
10009e90:	f023 0307 	bic.w	r3, r3, #7
10009e94:	3308      	adds	r3, #8
10009e96:	9303      	str	r3, [sp, #12]
10009e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10009e9a:	4433      	add	r3, r6
10009e9c:	9309      	str	r3, [sp, #36]	@ 0x24
10009e9e:	e76a      	b.n	10009d76 <_svfiprintf_r+0x52>
10009ea0:	fb0c 3202 	mla	r2, ip, r2, r3
10009ea4:	460c      	mov	r4, r1
10009ea6:	2001      	movs	r0, #1
10009ea8:	e7a8      	b.n	10009dfc <_svfiprintf_r+0xd8>
10009eaa:	2300      	movs	r3, #0
10009eac:	3401      	adds	r4, #1
10009eae:	9305      	str	r3, [sp, #20]
10009eb0:	4619      	mov	r1, r3
10009eb2:	f04f 0c0a 	mov.w	ip, #10
10009eb6:	4620      	mov	r0, r4
10009eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
10009ebc:	3a30      	subs	r2, #48	@ 0x30
10009ebe:	2a09      	cmp	r2, #9
10009ec0:	d903      	bls.n	10009eca <_svfiprintf_r+0x1a6>
10009ec2:	2b00      	cmp	r3, #0
10009ec4:	d0c6      	beq.n	10009e54 <_svfiprintf_r+0x130>
10009ec6:	9105      	str	r1, [sp, #20]
10009ec8:	e7c4      	b.n	10009e54 <_svfiprintf_r+0x130>
10009eca:	fb0c 2101 	mla	r1, ip, r1, r2
10009ece:	4604      	mov	r4, r0
10009ed0:	2301      	movs	r3, #1
10009ed2:	e7f0      	b.n	10009eb6 <_svfiprintf_r+0x192>
10009ed4:	ab03      	add	r3, sp, #12
10009ed6:	9300      	str	r3, [sp, #0]
10009ed8:	462a      	mov	r2, r5
10009eda:	4b0e      	ldr	r3, [pc, #56]	@ (10009f14 <_svfiprintf_r+0x1f0>)
10009edc:	a904      	add	r1, sp, #16
10009ede:	4638      	mov	r0, r7
10009ee0:	f3af 8000 	nop.w
10009ee4:	1c42      	adds	r2, r0, #1
10009ee6:	4606      	mov	r6, r0
10009ee8:	d1d6      	bne.n	10009e98 <_svfiprintf_r+0x174>
10009eea:	89ab      	ldrh	r3, [r5, #12]
10009eec:	065b      	lsls	r3, r3, #25
10009eee:	f53f af2d 	bmi.w	10009d4c <_svfiprintf_r+0x28>
10009ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
10009ef4:	e72c      	b.n	10009d50 <_svfiprintf_r+0x2c>
10009ef6:	ab03      	add	r3, sp, #12
10009ef8:	9300      	str	r3, [sp, #0]
10009efa:	462a      	mov	r2, r5
10009efc:	4b05      	ldr	r3, [pc, #20]	@ (10009f14 <_svfiprintf_r+0x1f0>)
10009efe:	a904      	add	r1, sp, #16
10009f00:	4638      	mov	r0, r7
10009f02:	f000 f9bb 	bl	1000a27c <_printf_i>
10009f06:	e7ed      	b.n	10009ee4 <_svfiprintf_r+0x1c0>
10009f08:	1000b2d1 	.word	0x1000b2d1
10009f0c:	1000b2db 	.word	0x1000b2db
10009f10:	00000000 	.word	0x00000000
10009f14:	10009c6d 	.word	0x10009c6d
10009f18:	1000b2d7 	.word	0x1000b2d7

10009f1c <__sfputc_r>:
10009f1c:	6893      	ldr	r3, [r2, #8]
10009f1e:	3b01      	subs	r3, #1
10009f20:	2b00      	cmp	r3, #0
10009f22:	b410      	push	{r4}
10009f24:	6093      	str	r3, [r2, #8]
10009f26:	da08      	bge.n	10009f3a <__sfputc_r+0x1e>
10009f28:	6994      	ldr	r4, [r2, #24]
10009f2a:	42a3      	cmp	r3, r4
10009f2c:	db01      	blt.n	10009f32 <__sfputc_r+0x16>
10009f2e:	290a      	cmp	r1, #10
10009f30:	d103      	bne.n	10009f3a <__sfputc_r+0x1e>
10009f32:	f85d 4b04 	ldr.w	r4, [sp], #4
10009f36:	f000 bb6b 	b.w	1000a610 <__swbuf_r>
10009f3a:	6813      	ldr	r3, [r2, #0]
10009f3c:	1c58      	adds	r0, r3, #1
10009f3e:	6010      	str	r0, [r2, #0]
10009f40:	7019      	strb	r1, [r3, #0]
10009f42:	4608      	mov	r0, r1
10009f44:	f85d 4b04 	ldr.w	r4, [sp], #4
10009f48:	4770      	bx	lr

10009f4a <__sfputs_r>:
10009f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009f4c:	4606      	mov	r6, r0
10009f4e:	460f      	mov	r7, r1
10009f50:	4614      	mov	r4, r2
10009f52:	18d5      	adds	r5, r2, r3
10009f54:	42ac      	cmp	r4, r5
10009f56:	d101      	bne.n	10009f5c <__sfputs_r+0x12>
10009f58:	2000      	movs	r0, #0
10009f5a:	e007      	b.n	10009f6c <__sfputs_r+0x22>
10009f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
10009f60:	463a      	mov	r2, r7
10009f62:	4630      	mov	r0, r6
10009f64:	f7ff ffda 	bl	10009f1c <__sfputc_r>
10009f68:	1c43      	adds	r3, r0, #1
10009f6a:	d1f3      	bne.n	10009f54 <__sfputs_r+0xa>
10009f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10009f70 <_vfiprintf_r>:
10009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009f74:	460d      	mov	r5, r1
10009f76:	b09d      	sub	sp, #116	@ 0x74
10009f78:	4614      	mov	r4, r2
10009f7a:	4698      	mov	r8, r3
10009f7c:	4606      	mov	r6, r0
10009f7e:	b118      	cbz	r0, 10009f88 <_vfiprintf_r+0x18>
10009f80:	6a03      	ldr	r3, [r0, #32]
10009f82:	b90b      	cbnz	r3, 10009f88 <_vfiprintf_r+0x18>
10009f84:	f7ff fc8e 	bl	100098a4 <__sinit>
10009f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10009f8a:	07d9      	lsls	r1, r3, #31
10009f8c:	d405      	bmi.n	10009f9a <_vfiprintf_r+0x2a>
10009f8e:	89ab      	ldrh	r3, [r5, #12]
10009f90:	059a      	lsls	r2, r3, #22
10009f92:	d402      	bmi.n	10009f9a <_vfiprintf_r+0x2a>
10009f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10009f96:	f7ff fe08 	bl	10009baa <__retarget_lock_acquire_recursive>
10009f9a:	89ab      	ldrh	r3, [r5, #12]
10009f9c:	071b      	lsls	r3, r3, #28
10009f9e:	d501      	bpl.n	10009fa4 <_vfiprintf_r+0x34>
10009fa0:	692b      	ldr	r3, [r5, #16]
10009fa2:	b99b      	cbnz	r3, 10009fcc <_vfiprintf_r+0x5c>
10009fa4:	4629      	mov	r1, r5
10009fa6:	4630      	mov	r0, r6
10009fa8:	f000 fb70 	bl	1000a68c <__swsetup_r>
10009fac:	b170      	cbz	r0, 10009fcc <_vfiprintf_r+0x5c>
10009fae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10009fb0:	07dc      	lsls	r4, r3, #31
10009fb2:	d504      	bpl.n	10009fbe <_vfiprintf_r+0x4e>
10009fb4:	f04f 30ff 	mov.w	r0, #4294967295
10009fb8:	b01d      	add	sp, #116	@ 0x74
10009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009fbe:	89ab      	ldrh	r3, [r5, #12]
10009fc0:	0598      	lsls	r0, r3, #22
10009fc2:	d4f7      	bmi.n	10009fb4 <_vfiprintf_r+0x44>
10009fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10009fc6:	f7ff fdf1 	bl	10009bac <__retarget_lock_release_recursive>
10009fca:	e7f3      	b.n	10009fb4 <_vfiprintf_r+0x44>
10009fcc:	2300      	movs	r3, #0
10009fce:	9309      	str	r3, [sp, #36]	@ 0x24
10009fd0:	2320      	movs	r3, #32
10009fd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
10009fd6:	f8cd 800c 	str.w	r8, [sp, #12]
10009fda:	2330      	movs	r3, #48	@ 0x30
10009fdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 1000a18c <_vfiprintf_r+0x21c>
10009fe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
10009fe4:	f04f 0901 	mov.w	r9, #1
10009fe8:	4623      	mov	r3, r4
10009fea:	469a      	mov	sl, r3
10009fec:	f813 2b01 	ldrb.w	r2, [r3], #1
10009ff0:	b10a      	cbz	r2, 10009ff6 <_vfiprintf_r+0x86>
10009ff2:	2a25      	cmp	r2, #37	@ 0x25
10009ff4:	d1f9      	bne.n	10009fea <_vfiprintf_r+0x7a>
10009ff6:	ebba 0b04 	subs.w	fp, sl, r4
10009ffa:	d00b      	beq.n	1000a014 <_vfiprintf_r+0xa4>
10009ffc:	465b      	mov	r3, fp
10009ffe:	4622      	mov	r2, r4
1000a000:	4629      	mov	r1, r5
1000a002:	4630      	mov	r0, r6
1000a004:	f7ff ffa1 	bl	10009f4a <__sfputs_r>
1000a008:	3001      	adds	r0, #1
1000a00a:	f000 80a7 	beq.w	1000a15c <_vfiprintf_r+0x1ec>
1000a00e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000a010:	445a      	add	r2, fp
1000a012:	9209      	str	r2, [sp, #36]	@ 0x24
1000a014:	f89a 3000 	ldrb.w	r3, [sl]
1000a018:	2b00      	cmp	r3, #0
1000a01a:	f000 809f 	beq.w	1000a15c <_vfiprintf_r+0x1ec>
1000a01e:	2300      	movs	r3, #0
1000a020:	f04f 32ff 	mov.w	r2, #4294967295
1000a024:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000a028:	f10a 0a01 	add.w	sl, sl, #1
1000a02c:	9304      	str	r3, [sp, #16]
1000a02e:	9307      	str	r3, [sp, #28]
1000a030:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
1000a034:	931a      	str	r3, [sp, #104]	@ 0x68
1000a036:	4654      	mov	r4, sl
1000a038:	2205      	movs	r2, #5
1000a03a:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a03e:	4853      	ldr	r0, [pc, #332]	@ (1000a18c <_vfiprintf_r+0x21c>)
1000a040:	f7f6 f80e 	bl	10000060 <memchr>
1000a044:	9a04      	ldr	r2, [sp, #16]
1000a046:	b9d8      	cbnz	r0, 1000a080 <_vfiprintf_r+0x110>
1000a048:	06d1      	lsls	r1, r2, #27
1000a04a:	bf44      	itt	mi
1000a04c:	2320      	movmi	r3, #32
1000a04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a052:	0713      	lsls	r3, r2, #28
1000a054:	bf44      	itt	mi
1000a056:	232b      	movmi	r3, #43	@ 0x2b
1000a058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a05c:	f89a 3000 	ldrb.w	r3, [sl]
1000a060:	2b2a      	cmp	r3, #42	@ 0x2a
1000a062:	d015      	beq.n	1000a090 <_vfiprintf_r+0x120>
1000a064:	9a07      	ldr	r2, [sp, #28]
1000a066:	4654      	mov	r4, sl
1000a068:	2000      	movs	r0, #0
1000a06a:	f04f 0c0a 	mov.w	ip, #10
1000a06e:	4621      	mov	r1, r4
1000a070:	f811 3b01 	ldrb.w	r3, [r1], #1
1000a074:	3b30      	subs	r3, #48	@ 0x30
1000a076:	2b09      	cmp	r3, #9
1000a078:	d94b      	bls.n	1000a112 <_vfiprintf_r+0x1a2>
1000a07a:	b1b0      	cbz	r0, 1000a0aa <_vfiprintf_r+0x13a>
1000a07c:	9207      	str	r2, [sp, #28]
1000a07e:	e014      	b.n	1000a0aa <_vfiprintf_r+0x13a>
1000a080:	eba0 0308 	sub.w	r3, r0, r8
1000a084:	fa09 f303 	lsl.w	r3, r9, r3
1000a088:	4313      	orrs	r3, r2
1000a08a:	9304      	str	r3, [sp, #16]
1000a08c:	46a2      	mov	sl, r4
1000a08e:	e7d2      	b.n	1000a036 <_vfiprintf_r+0xc6>
1000a090:	9b03      	ldr	r3, [sp, #12]
1000a092:	1d19      	adds	r1, r3, #4
1000a094:	681b      	ldr	r3, [r3, #0]
1000a096:	9103      	str	r1, [sp, #12]
1000a098:	2b00      	cmp	r3, #0
1000a09a:	bfbb      	ittet	lt
1000a09c:	425b      	neglt	r3, r3
1000a09e:	f042 0202 	orrlt.w	r2, r2, #2
1000a0a2:	9307      	strge	r3, [sp, #28]
1000a0a4:	9307      	strlt	r3, [sp, #28]
1000a0a6:	bfb8      	it	lt
1000a0a8:	9204      	strlt	r2, [sp, #16]
1000a0aa:	7823      	ldrb	r3, [r4, #0]
1000a0ac:	2b2e      	cmp	r3, #46	@ 0x2e
1000a0ae:	d10a      	bne.n	1000a0c6 <_vfiprintf_r+0x156>
1000a0b0:	7863      	ldrb	r3, [r4, #1]
1000a0b2:	2b2a      	cmp	r3, #42	@ 0x2a
1000a0b4:	d132      	bne.n	1000a11c <_vfiprintf_r+0x1ac>
1000a0b6:	9b03      	ldr	r3, [sp, #12]
1000a0b8:	1d1a      	adds	r2, r3, #4
1000a0ba:	681b      	ldr	r3, [r3, #0]
1000a0bc:	9203      	str	r2, [sp, #12]
1000a0be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
1000a0c2:	3402      	adds	r4, #2
1000a0c4:	9305      	str	r3, [sp, #20]
1000a0c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 1000a19c <_vfiprintf_r+0x22c>
1000a0ca:	7821      	ldrb	r1, [r4, #0]
1000a0cc:	2203      	movs	r2, #3
1000a0ce:	4650      	mov	r0, sl
1000a0d0:	f7f5 ffc6 	bl	10000060 <memchr>
1000a0d4:	b138      	cbz	r0, 1000a0e6 <_vfiprintf_r+0x176>
1000a0d6:	9b04      	ldr	r3, [sp, #16]
1000a0d8:	eba0 000a 	sub.w	r0, r0, sl
1000a0dc:	2240      	movs	r2, #64	@ 0x40
1000a0de:	4082      	lsls	r2, r0
1000a0e0:	4313      	orrs	r3, r2
1000a0e2:	3401      	adds	r4, #1
1000a0e4:	9304      	str	r3, [sp, #16]
1000a0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a0ea:	4829      	ldr	r0, [pc, #164]	@ (1000a190 <_vfiprintf_r+0x220>)
1000a0ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
1000a0f0:	2206      	movs	r2, #6
1000a0f2:	f7f5 ffb5 	bl	10000060 <memchr>
1000a0f6:	2800      	cmp	r0, #0
1000a0f8:	d03f      	beq.n	1000a17a <_vfiprintf_r+0x20a>
1000a0fa:	4b26      	ldr	r3, [pc, #152]	@ (1000a194 <_vfiprintf_r+0x224>)
1000a0fc:	bb1b      	cbnz	r3, 1000a146 <_vfiprintf_r+0x1d6>
1000a0fe:	9b03      	ldr	r3, [sp, #12]
1000a100:	3307      	adds	r3, #7
1000a102:	f023 0307 	bic.w	r3, r3, #7
1000a106:	3308      	adds	r3, #8
1000a108:	9303      	str	r3, [sp, #12]
1000a10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a10c:	443b      	add	r3, r7
1000a10e:	9309      	str	r3, [sp, #36]	@ 0x24
1000a110:	e76a      	b.n	10009fe8 <_vfiprintf_r+0x78>
1000a112:	fb0c 3202 	mla	r2, ip, r2, r3
1000a116:	460c      	mov	r4, r1
1000a118:	2001      	movs	r0, #1
1000a11a:	e7a8      	b.n	1000a06e <_vfiprintf_r+0xfe>
1000a11c:	2300      	movs	r3, #0
1000a11e:	3401      	adds	r4, #1
1000a120:	9305      	str	r3, [sp, #20]
1000a122:	4619      	mov	r1, r3
1000a124:	f04f 0c0a 	mov.w	ip, #10
1000a128:	4620      	mov	r0, r4
1000a12a:	f810 2b01 	ldrb.w	r2, [r0], #1
1000a12e:	3a30      	subs	r2, #48	@ 0x30
1000a130:	2a09      	cmp	r2, #9
1000a132:	d903      	bls.n	1000a13c <_vfiprintf_r+0x1cc>
1000a134:	2b00      	cmp	r3, #0
1000a136:	d0c6      	beq.n	1000a0c6 <_vfiprintf_r+0x156>
1000a138:	9105      	str	r1, [sp, #20]
1000a13a:	e7c4      	b.n	1000a0c6 <_vfiprintf_r+0x156>
1000a13c:	fb0c 2101 	mla	r1, ip, r1, r2
1000a140:	4604      	mov	r4, r0
1000a142:	2301      	movs	r3, #1
1000a144:	e7f0      	b.n	1000a128 <_vfiprintf_r+0x1b8>
1000a146:	ab03      	add	r3, sp, #12
1000a148:	9300      	str	r3, [sp, #0]
1000a14a:	462a      	mov	r2, r5
1000a14c:	4b12      	ldr	r3, [pc, #72]	@ (1000a198 <_vfiprintf_r+0x228>)
1000a14e:	a904      	add	r1, sp, #16
1000a150:	4630      	mov	r0, r6
1000a152:	f3af 8000 	nop.w
1000a156:	4607      	mov	r7, r0
1000a158:	1c78      	adds	r0, r7, #1
1000a15a:	d1d6      	bne.n	1000a10a <_vfiprintf_r+0x19a>
1000a15c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a15e:	07d9      	lsls	r1, r3, #31
1000a160:	d405      	bmi.n	1000a16e <_vfiprintf_r+0x1fe>
1000a162:	89ab      	ldrh	r3, [r5, #12]
1000a164:	059a      	lsls	r2, r3, #22
1000a166:	d402      	bmi.n	1000a16e <_vfiprintf_r+0x1fe>
1000a168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a16a:	f7ff fd1f 	bl	10009bac <__retarget_lock_release_recursive>
1000a16e:	89ab      	ldrh	r3, [r5, #12]
1000a170:	065b      	lsls	r3, r3, #25
1000a172:	f53f af1f 	bmi.w	10009fb4 <_vfiprintf_r+0x44>
1000a176:	9809      	ldr	r0, [sp, #36]	@ 0x24
1000a178:	e71e      	b.n	10009fb8 <_vfiprintf_r+0x48>
1000a17a:	ab03      	add	r3, sp, #12
1000a17c:	9300      	str	r3, [sp, #0]
1000a17e:	462a      	mov	r2, r5
1000a180:	4b05      	ldr	r3, [pc, #20]	@ (1000a198 <_vfiprintf_r+0x228>)
1000a182:	a904      	add	r1, sp, #16
1000a184:	4630      	mov	r0, r6
1000a186:	f000 f879 	bl	1000a27c <_printf_i>
1000a18a:	e7e4      	b.n	1000a156 <_vfiprintf_r+0x1e6>
1000a18c:	1000b2d1 	.word	0x1000b2d1
1000a190:	1000b2db 	.word	0x1000b2db
1000a194:	00000000 	.word	0x00000000
1000a198:	10009f4b 	.word	0x10009f4b
1000a19c:	1000b2d7 	.word	0x1000b2d7

1000a1a0 <_printf_common>:
1000a1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000a1a4:	4616      	mov	r6, r2
1000a1a6:	4698      	mov	r8, r3
1000a1a8:	688a      	ldr	r2, [r1, #8]
1000a1aa:	690b      	ldr	r3, [r1, #16]
1000a1ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
1000a1b0:	4293      	cmp	r3, r2
1000a1b2:	bfb8      	it	lt
1000a1b4:	4613      	movlt	r3, r2
1000a1b6:	6033      	str	r3, [r6, #0]
1000a1b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
1000a1bc:	4607      	mov	r7, r0
1000a1be:	460c      	mov	r4, r1
1000a1c0:	b10a      	cbz	r2, 1000a1c6 <_printf_common+0x26>
1000a1c2:	3301      	adds	r3, #1
1000a1c4:	6033      	str	r3, [r6, #0]
1000a1c6:	6823      	ldr	r3, [r4, #0]
1000a1c8:	0699      	lsls	r1, r3, #26
1000a1ca:	bf42      	ittt	mi
1000a1cc:	6833      	ldrmi	r3, [r6, #0]
1000a1ce:	3302      	addmi	r3, #2
1000a1d0:	6033      	strmi	r3, [r6, #0]
1000a1d2:	6825      	ldr	r5, [r4, #0]
1000a1d4:	f015 0506 	ands.w	r5, r5, #6
1000a1d8:	d106      	bne.n	1000a1e8 <_printf_common+0x48>
1000a1da:	f104 0a19 	add.w	sl, r4, #25
1000a1de:	68e3      	ldr	r3, [r4, #12]
1000a1e0:	6832      	ldr	r2, [r6, #0]
1000a1e2:	1a9b      	subs	r3, r3, r2
1000a1e4:	42ab      	cmp	r3, r5
1000a1e6:	dc26      	bgt.n	1000a236 <_printf_common+0x96>
1000a1e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
1000a1ec:	6822      	ldr	r2, [r4, #0]
1000a1ee:	3b00      	subs	r3, #0
1000a1f0:	bf18      	it	ne
1000a1f2:	2301      	movne	r3, #1
1000a1f4:	0692      	lsls	r2, r2, #26
1000a1f6:	d42b      	bmi.n	1000a250 <_printf_common+0xb0>
1000a1f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1000a1fc:	4641      	mov	r1, r8
1000a1fe:	4638      	mov	r0, r7
1000a200:	47c8      	blx	r9
1000a202:	3001      	adds	r0, #1
1000a204:	d01e      	beq.n	1000a244 <_printf_common+0xa4>
1000a206:	6823      	ldr	r3, [r4, #0]
1000a208:	6922      	ldr	r2, [r4, #16]
1000a20a:	f003 0306 	and.w	r3, r3, #6
1000a20e:	2b04      	cmp	r3, #4
1000a210:	bf02      	ittt	eq
1000a212:	68e5      	ldreq	r5, [r4, #12]
1000a214:	6833      	ldreq	r3, [r6, #0]
1000a216:	1aed      	subeq	r5, r5, r3
1000a218:	68a3      	ldr	r3, [r4, #8]
1000a21a:	bf0c      	ite	eq
1000a21c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000a220:	2500      	movne	r5, #0
1000a222:	4293      	cmp	r3, r2
1000a224:	bfc4      	itt	gt
1000a226:	1a9b      	subgt	r3, r3, r2
1000a228:	18ed      	addgt	r5, r5, r3
1000a22a:	2600      	movs	r6, #0
1000a22c:	341a      	adds	r4, #26
1000a22e:	42b5      	cmp	r5, r6
1000a230:	d11a      	bne.n	1000a268 <_printf_common+0xc8>
1000a232:	2000      	movs	r0, #0
1000a234:	e008      	b.n	1000a248 <_printf_common+0xa8>
1000a236:	2301      	movs	r3, #1
1000a238:	4652      	mov	r2, sl
1000a23a:	4641      	mov	r1, r8
1000a23c:	4638      	mov	r0, r7
1000a23e:	47c8      	blx	r9
1000a240:	3001      	adds	r0, #1
1000a242:	d103      	bne.n	1000a24c <_printf_common+0xac>
1000a244:	f04f 30ff 	mov.w	r0, #4294967295
1000a248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a24c:	3501      	adds	r5, #1
1000a24e:	e7c6      	b.n	1000a1de <_printf_common+0x3e>
1000a250:	18e1      	adds	r1, r4, r3
1000a252:	1c5a      	adds	r2, r3, #1
1000a254:	2030      	movs	r0, #48	@ 0x30
1000a256:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
1000a25a:	4422      	add	r2, r4
1000a25c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
1000a260:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
1000a264:	3302      	adds	r3, #2
1000a266:	e7c7      	b.n	1000a1f8 <_printf_common+0x58>
1000a268:	2301      	movs	r3, #1
1000a26a:	4622      	mov	r2, r4
1000a26c:	4641      	mov	r1, r8
1000a26e:	4638      	mov	r0, r7
1000a270:	47c8      	blx	r9
1000a272:	3001      	adds	r0, #1
1000a274:	d0e6      	beq.n	1000a244 <_printf_common+0xa4>
1000a276:	3601      	adds	r6, #1
1000a278:	e7d9      	b.n	1000a22e <_printf_common+0x8e>
	...

1000a27c <_printf_i>:
1000a27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000a280:	7e0f      	ldrb	r7, [r1, #24]
1000a282:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1000a284:	2f78      	cmp	r7, #120	@ 0x78
1000a286:	4691      	mov	r9, r2
1000a288:	4680      	mov	r8, r0
1000a28a:	460c      	mov	r4, r1
1000a28c:	469a      	mov	sl, r3
1000a28e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
1000a292:	d807      	bhi.n	1000a2a4 <_printf_i+0x28>
1000a294:	2f62      	cmp	r7, #98	@ 0x62
1000a296:	d80a      	bhi.n	1000a2ae <_printf_i+0x32>
1000a298:	2f00      	cmp	r7, #0
1000a29a:	f000 80d1 	beq.w	1000a440 <_printf_i+0x1c4>
1000a29e:	2f58      	cmp	r7, #88	@ 0x58
1000a2a0:	f000 80b8 	beq.w	1000a414 <_printf_i+0x198>
1000a2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000a2a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
1000a2ac:	e03a      	b.n	1000a324 <_printf_i+0xa8>
1000a2ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
1000a2b2:	2b15      	cmp	r3, #21
1000a2b4:	d8f6      	bhi.n	1000a2a4 <_printf_i+0x28>
1000a2b6:	a101      	add	r1, pc, #4	@ (adr r1, 1000a2bc <_printf_i+0x40>)
1000a2b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000a2bc:	1000a315 	.word	0x1000a315
1000a2c0:	1000a329 	.word	0x1000a329
1000a2c4:	1000a2a5 	.word	0x1000a2a5
1000a2c8:	1000a2a5 	.word	0x1000a2a5
1000a2cc:	1000a2a5 	.word	0x1000a2a5
1000a2d0:	1000a2a5 	.word	0x1000a2a5
1000a2d4:	1000a329 	.word	0x1000a329
1000a2d8:	1000a2a5 	.word	0x1000a2a5
1000a2dc:	1000a2a5 	.word	0x1000a2a5
1000a2e0:	1000a2a5 	.word	0x1000a2a5
1000a2e4:	1000a2a5 	.word	0x1000a2a5
1000a2e8:	1000a427 	.word	0x1000a427
1000a2ec:	1000a353 	.word	0x1000a353
1000a2f0:	1000a3e1 	.word	0x1000a3e1
1000a2f4:	1000a2a5 	.word	0x1000a2a5
1000a2f8:	1000a2a5 	.word	0x1000a2a5
1000a2fc:	1000a449 	.word	0x1000a449
1000a300:	1000a2a5 	.word	0x1000a2a5
1000a304:	1000a353 	.word	0x1000a353
1000a308:	1000a2a5 	.word	0x1000a2a5
1000a30c:	1000a2a5 	.word	0x1000a2a5
1000a310:	1000a3e9 	.word	0x1000a3e9
1000a314:	6833      	ldr	r3, [r6, #0]
1000a316:	1d1a      	adds	r2, r3, #4
1000a318:	681b      	ldr	r3, [r3, #0]
1000a31a:	6032      	str	r2, [r6, #0]
1000a31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000a320:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
1000a324:	2301      	movs	r3, #1
1000a326:	e09c      	b.n	1000a462 <_printf_i+0x1e6>
1000a328:	6833      	ldr	r3, [r6, #0]
1000a32a:	6820      	ldr	r0, [r4, #0]
1000a32c:	1d19      	adds	r1, r3, #4
1000a32e:	6031      	str	r1, [r6, #0]
1000a330:	0606      	lsls	r6, r0, #24
1000a332:	d501      	bpl.n	1000a338 <_printf_i+0xbc>
1000a334:	681d      	ldr	r5, [r3, #0]
1000a336:	e003      	b.n	1000a340 <_printf_i+0xc4>
1000a338:	0645      	lsls	r5, r0, #25
1000a33a:	d5fb      	bpl.n	1000a334 <_printf_i+0xb8>
1000a33c:	f9b3 5000 	ldrsh.w	r5, [r3]
1000a340:	2d00      	cmp	r5, #0
1000a342:	da03      	bge.n	1000a34c <_printf_i+0xd0>
1000a344:	232d      	movs	r3, #45	@ 0x2d
1000a346:	426d      	negs	r5, r5
1000a348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000a34c:	4858      	ldr	r0, [pc, #352]	@ (1000a4b0 <_printf_i+0x234>)
1000a34e:	230a      	movs	r3, #10
1000a350:	e011      	b.n	1000a376 <_printf_i+0xfa>
1000a352:	6821      	ldr	r1, [r4, #0]
1000a354:	6833      	ldr	r3, [r6, #0]
1000a356:	0608      	lsls	r0, r1, #24
1000a358:	f853 5b04 	ldr.w	r5, [r3], #4
1000a35c:	d402      	bmi.n	1000a364 <_printf_i+0xe8>
1000a35e:	0649      	lsls	r1, r1, #25
1000a360:	bf48      	it	mi
1000a362:	b2ad      	uxthmi	r5, r5
1000a364:	2f6f      	cmp	r7, #111	@ 0x6f
1000a366:	4852      	ldr	r0, [pc, #328]	@ (1000a4b0 <_printf_i+0x234>)
1000a368:	6033      	str	r3, [r6, #0]
1000a36a:	bf14      	ite	ne
1000a36c:	230a      	movne	r3, #10
1000a36e:	2308      	moveq	r3, #8
1000a370:	2100      	movs	r1, #0
1000a372:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
1000a376:	6866      	ldr	r6, [r4, #4]
1000a378:	60a6      	str	r6, [r4, #8]
1000a37a:	2e00      	cmp	r6, #0
1000a37c:	db05      	blt.n	1000a38a <_printf_i+0x10e>
1000a37e:	6821      	ldr	r1, [r4, #0]
1000a380:	432e      	orrs	r6, r5
1000a382:	f021 0104 	bic.w	r1, r1, #4
1000a386:	6021      	str	r1, [r4, #0]
1000a388:	d04b      	beq.n	1000a422 <_printf_i+0x1a6>
1000a38a:	4616      	mov	r6, r2
1000a38c:	fbb5 f1f3 	udiv	r1, r5, r3
1000a390:	fb03 5711 	mls	r7, r3, r1, r5
1000a394:	5dc7      	ldrb	r7, [r0, r7]
1000a396:	f806 7d01 	strb.w	r7, [r6, #-1]!
1000a39a:	462f      	mov	r7, r5
1000a39c:	42bb      	cmp	r3, r7
1000a39e:	460d      	mov	r5, r1
1000a3a0:	d9f4      	bls.n	1000a38c <_printf_i+0x110>
1000a3a2:	2b08      	cmp	r3, #8
1000a3a4:	d10b      	bne.n	1000a3be <_printf_i+0x142>
1000a3a6:	6823      	ldr	r3, [r4, #0]
1000a3a8:	07df      	lsls	r7, r3, #31
1000a3aa:	d508      	bpl.n	1000a3be <_printf_i+0x142>
1000a3ac:	6923      	ldr	r3, [r4, #16]
1000a3ae:	6861      	ldr	r1, [r4, #4]
1000a3b0:	4299      	cmp	r1, r3
1000a3b2:	bfde      	ittt	le
1000a3b4:	2330      	movle	r3, #48	@ 0x30
1000a3b6:	f806 3c01 	strble.w	r3, [r6, #-1]
1000a3ba:	f106 36ff 	addle.w	r6, r6, #4294967295
1000a3be:	1b92      	subs	r2, r2, r6
1000a3c0:	6122      	str	r2, [r4, #16]
1000a3c2:	f8cd a000 	str.w	sl, [sp]
1000a3c6:	464b      	mov	r3, r9
1000a3c8:	aa03      	add	r2, sp, #12
1000a3ca:	4621      	mov	r1, r4
1000a3cc:	4640      	mov	r0, r8
1000a3ce:	f7ff fee7 	bl	1000a1a0 <_printf_common>
1000a3d2:	3001      	adds	r0, #1
1000a3d4:	d14a      	bne.n	1000a46c <_printf_i+0x1f0>
1000a3d6:	f04f 30ff 	mov.w	r0, #4294967295
1000a3da:	b004      	add	sp, #16
1000a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a3e0:	6823      	ldr	r3, [r4, #0]
1000a3e2:	f043 0320 	orr.w	r3, r3, #32
1000a3e6:	6023      	str	r3, [r4, #0]
1000a3e8:	4832      	ldr	r0, [pc, #200]	@ (1000a4b4 <_printf_i+0x238>)
1000a3ea:	2778      	movs	r7, #120	@ 0x78
1000a3ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
1000a3f0:	6823      	ldr	r3, [r4, #0]
1000a3f2:	6831      	ldr	r1, [r6, #0]
1000a3f4:	061f      	lsls	r7, r3, #24
1000a3f6:	f851 5b04 	ldr.w	r5, [r1], #4
1000a3fa:	d402      	bmi.n	1000a402 <_printf_i+0x186>
1000a3fc:	065f      	lsls	r7, r3, #25
1000a3fe:	bf48      	it	mi
1000a400:	b2ad      	uxthmi	r5, r5
1000a402:	6031      	str	r1, [r6, #0]
1000a404:	07d9      	lsls	r1, r3, #31
1000a406:	bf44      	itt	mi
1000a408:	f043 0320 	orrmi.w	r3, r3, #32
1000a40c:	6023      	strmi	r3, [r4, #0]
1000a40e:	b11d      	cbz	r5, 1000a418 <_printf_i+0x19c>
1000a410:	2310      	movs	r3, #16
1000a412:	e7ad      	b.n	1000a370 <_printf_i+0xf4>
1000a414:	4826      	ldr	r0, [pc, #152]	@ (1000a4b0 <_printf_i+0x234>)
1000a416:	e7e9      	b.n	1000a3ec <_printf_i+0x170>
1000a418:	6823      	ldr	r3, [r4, #0]
1000a41a:	f023 0320 	bic.w	r3, r3, #32
1000a41e:	6023      	str	r3, [r4, #0]
1000a420:	e7f6      	b.n	1000a410 <_printf_i+0x194>
1000a422:	4616      	mov	r6, r2
1000a424:	e7bd      	b.n	1000a3a2 <_printf_i+0x126>
1000a426:	6833      	ldr	r3, [r6, #0]
1000a428:	6825      	ldr	r5, [r4, #0]
1000a42a:	6961      	ldr	r1, [r4, #20]
1000a42c:	1d18      	adds	r0, r3, #4
1000a42e:	6030      	str	r0, [r6, #0]
1000a430:	062e      	lsls	r6, r5, #24
1000a432:	681b      	ldr	r3, [r3, #0]
1000a434:	d501      	bpl.n	1000a43a <_printf_i+0x1be>
1000a436:	6019      	str	r1, [r3, #0]
1000a438:	e002      	b.n	1000a440 <_printf_i+0x1c4>
1000a43a:	0668      	lsls	r0, r5, #25
1000a43c:	d5fb      	bpl.n	1000a436 <_printf_i+0x1ba>
1000a43e:	8019      	strh	r1, [r3, #0]
1000a440:	2300      	movs	r3, #0
1000a442:	6123      	str	r3, [r4, #16]
1000a444:	4616      	mov	r6, r2
1000a446:	e7bc      	b.n	1000a3c2 <_printf_i+0x146>
1000a448:	6833      	ldr	r3, [r6, #0]
1000a44a:	1d1a      	adds	r2, r3, #4
1000a44c:	6032      	str	r2, [r6, #0]
1000a44e:	681e      	ldr	r6, [r3, #0]
1000a450:	6862      	ldr	r2, [r4, #4]
1000a452:	2100      	movs	r1, #0
1000a454:	4630      	mov	r0, r6
1000a456:	f7f5 fe03 	bl	10000060 <memchr>
1000a45a:	b108      	cbz	r0, 1000a460 <_printf_i+0x1e4>
1000a45c:	1b80      	subs	r0, r0, r6
1000a45e:	6060      	str	r0, [r4, #4]
1000a460:	6863      	ldr	r3, [r4, #4]
1000a462:	6123      	str	r3, [r4, #16]
1000a464:	2300      	movs	r3, #0
1000a466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000a46a:	e7aa      	b.n	1000a3c2 <_printf_i+0x146>
1000a46c:	6923      	ldr	r3, [r4, #16]
1000a46e:	4632      	mov	r2, r6
1000a470:	4649      	mov	r1, r9
1000a472:	4640      	mov	r0, r8
1000a474:	47d0      	blx	sl
1000a476:	3001      	adds	r0, #1
1000a478:	d0ad      	beq.n	1000a3d6 <_printf_i+0x15a>
1000a47a:	6823      	ldr	r3, [r4, #0]
1000a47c:	079b      	lsls	r3, r3, #30
1000a47e:	d413      	bmi.n	1000a4a8 <_printf_i+0x22c>
1000a480:	68e0      	ldr	r0, [r4, #12]
1000a482:	9b03      	ldr	r3, [sp, #12]
1000a484:	4298      	cmp	r0, r3
1000a486:	bfb8      	it	lt
1000a488:	4618      	movlt	r0, r3
1000a48a:	e7a6      	b.n	1000a3da <_printf_i+0x15e>
1000a48c:	2301      	movs	r3, #1
1000a48e:	4632      	mov	r2, r6
1000a490:	4649      	mov	r1, r9
1000a492:	4640      	mov	r0, r8
1000a494:	47d0      	blx	sl
1000a496:	3001      	adds	r0, #1
1000a498:	d09d      	beq.n	1000a3d6 <_printf_i+0x15a>
1000a49a:	3501      	adds	r5, #1
1000a49c:	68e3      	ldr	r3, [r4, #12]
1000a49e:	9903      	ldr	r1, [sp, #12]
1000a4a0:	1a5b      	subs	r3, r3, r1
1000a4a2:	42ab      	cmp	r3, r5
1000a4a4:	dcf2      	bgt.n	1000a48c <_printf_i+0x210>
1000a4a6:	e7eb      	b.n	1000a480 <_printf_i+0x204>
1000a4a8:	2500      	movs	r5, #0
1000a4aa:	f104 0619 	add.w	r6, r4, #25
1000a4ae:	e7f5      	b.n	1000a49c <_printf_i+0x220>
1000a4b0:	1000b2e2 	.word	0x1000b2e2
1000a4b4:	1000b2f3 	.word	0x1000b2f3

1000a4b8 <__sflush_r>:
1000a4b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1000a4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000a4c0:	0716      	lsls	r6, r2, #28
1000a4c2:	4605      	mov	r5, r0
1000a4c4:	460c      	mov	r4, r1
1000a4c6:	d454      	bmi.n	1000a572 <__sflush_r+0xba>
1000a4c8:	684b      	ldr	r3, [r1, #4]
1000a4ca:	2b00      	cmp	r3, #0
1000a4cc:	dc02      	bgt.n	1000a4d4 <__sflush_r+0x1c>
1000a4ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
1000a4d0:	2b00      	cmp	r3, #0
1000a4d2:	dd48      	ble.n	1000a566 <__sflush_r+0xae>
1000a4d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000a4d6:	2e00      	cmp	r6, #0
1000a4d8:	d045      	beq.n	1000a566 <__sflush_r+0xae>
1000a4da:	2300      	movs	r3, #0
1000a4dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
1000a4e0:	682f      	ldr	r7, [r5, #0]
1000a4e2:	6a21      	ldr	r1, [r4, #32]
1000a4e4:	602b      	str	r3, [r5, #0]
1000a4e6:	d030      	beq.n	1000a54a <__sflush_r+0x92>
1000a4e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1000a4ea:	89a3      	ldrh	r3, [r4, #12]
1000a4ec:	0759      	lsls	r1, r3, #29
1000a4ee:	d505      	bpl.n	1000a4fc <__sflush_r+0x44>
1000a4f0:	6863      	ldr	r3, [r4, #4]
1000a4f2:	1ad2      	subs	r2, r2, r3
1000a4f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1000a4f6:	b10b      	cbz	r3, 1000a4fc <__sflush_r+0x44>
1000a4f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1000a4fa:	1ad2      	subs	r2, r2, r3
1000a4fc:	2300      	movs	r3, #0
1000a4fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000a500:	6a21      	ldr	r1, [r4, #32]
1000a502:	4628      	mov	r0, r5
1000a504:	47b0      	blx	r6
1000a506:	1c43      	adds	r3, r0, #1
1000a508:	89a3      	ldrh	r3, [r4, #12]
1000a50a:	d106      	bne.n	1000a51a <__sflush_r+0x62>
1000a50c:	6829      	ldr	r1, [r5, #0]
1000a50e:	291d      	cmp	r1, #29
1000a510:	d82b      	bhi.n	1000a56a <__sflush_r+0xb2>
1000a512:	4a2a      	ldr	r2, [pc, #168]	@ (1000a5bc <__sflush_r+0x104>)
1000a514:	40ca      	lsrs	r2, r1
1000a516:	07d6      	lsls	r6, r2, #31
1000a518:	d527      	bpl.n	1000a56a <__sflush_r+0xb2>
1000a51a:	2200      	movs	r2, #0
1000a51c:	6062      	str	r2, [r4, #4]
1000a51e:	04d9      	lsls	r1, r3, #19
1000a520:	6922      	ldr	r2, [r4, #16]
1000a522:	6022      	str	r2, [r4, #0]
1000a524:	d504      	bpl.n	1000a530 <__sflush_r+0x78>
1000a526:	1c42      	adds	r2, r0, #1
1000a528:	d101      	bne.n	1000a52e <__sflush_r+0x76>
1000a52a:	682b      	ldr	r3, [r5, #0]
1000a52c:	b903      	cbnz	r3, 1000a530 <__sflush_r+0x78>
1000a52e:	6560      	str	r0, [r4, #84]	@ 0x54
1000a530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000a532:	602f      	str	r7, [r5, #0]
1000a534:	b1b9      	cbz	r1, 1000a566 <__sflush_r+0xae>
1000a536:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000a53a:	4299      	cmp	r1, r3
1000a53c:	d002      	beq.n	1000a544 <__sflush_r+0x8c>
1000a53e:	4628      	mov	r0, r5
1000a540:	f7ff fb4a 	bl	10009bd8 <_free_r>
1000a544:	2300      	movs	r3, #0
1000a546:	6363      	str	r3, [r4, #52]	@ 0x34
1000a548:	e00d      	b.n	1000a566 <__sflush_r+0xae>
1000a54a:	2301      	movs	r3, #1
1000a54c:	4628      	mov	r0, r5
1000a54e:	47b0      	blx	r6
1000a550:	4602      	mov	r2, r0
1000a552:	1c50      	adds	r0, r2, #1
1000a554:	d1c9      	bne.n	1000a4ea <__sflush_r+0x32>
1000a556:	682b      	ldr	r3, [r5, #0]
1000a558:	2b00      	cmp	r3, #0
1000a55a:	d0c6      	beq.n	1000a4ea <__sflush_r+0x32>
1000a55c:	2b1d      	cmp	r3, #29
1000a55e:	d001      	beq.n	1000a564 <__sflush_r+0xac>
1000a560:	2b16      	cmp	r3, #22
1000a562:	d11e      	bne.n	1000a5a2 <__sflush_r+0xea>
1000a564:	602f      	str	r7, [r5, #0]
1000a566:	2000      	movs	r0, #0
1000a568:	e022      	b.n	1000a5b0 <__sflush_r+0xf8>
1000a56a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a56e:	b21b      	sxth	r3, r3
1000a570:	e01b      	b.n	1000a5aa <__sflush_r+0xf2>
1000a572:	690f      	ldr	r7, [r1, #16]
1000a574:	2f00      	cmp	r7, #0
1000a576:	d0f6      	beq.n	1000a566 <__sflush_r+0xae>
1000a578:	0793      	lsls	r3, r2, #30
1000a57a:	680e      	ldr	r6, [r1, #0]
1000a57c:	bf08      	it	eq
1000a57e:	694b      	ldreq	r3, [r1, #20]
1000a580:	600f      	str	r7, [r1, #0]
1000a582:	bf18      	it	ne
1000a584:	2300      	movne	r3, #0
1000a586:	eba6 0807 	sub.w	r8, r6, r7
1000a58a:	608b      	str	r3, [r1, #8]
1000a58c:	f1b8 0f00 	cmp.w	r8, #0
1000a590:	dde9      	ble.n	1000a566 <__sflush_r+0xae>
1000a592:	6a21      	ldr	r1, [r4, #32]
1000a594:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
1000a596:	4643      	mov	r3, r8
1000a598:	463a      	mov	r2, r7
1000a59a:	4628      	mov	r0, r5
1000a59c:	47b0      	blx	r6
1000a59e:	2800      	cmp	r0, #0
1000a5a0:	dc08      	bgt.n	1000a5b4 <__sflush_r+0xfc>
1000a5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a5a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a5aa:	81a3      	strh	r3, [r4, #12]
1000a5ac:	f04f 30ff 	mov.w	r0, #4294967295
1000a5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000a5b4:	4407      	add	r7, r0
1000a5b6:	eba8 0800 	sub.w	r8, r8, r0
1000a5ba:	e7e7      	b.n	1000a58c <__sflush_r+0xd4>
1000a5bc:	20400001 	.word	0x20400001

1000a5c0 <_fflush_r>:
1000a5c0:	b538      	push	{r3, r4, r5, lr}
1000a5c2:	690b      	ldr	r3, [r1, #16]
1000a5c4:	4605      	mov	r5, r0
1000a5c6:	460c      	mov	r4, r1
1000a5c8:	b913      	cbnz	r3, 1000a5d0 <_fflush_r+0x10>
1000a5ca:	2500      	movs	r5, #0
1000a5cc:	4628      	mov	r0, r5
1000a5ce:	bd38      	pop	{r3, r4, r5, pc}
1000a5d0:	b118      	cbz	r0, 1000a5da <_fflush_r+0x1a>
1000a5d2:	6a03      	ldr	r3, [r0, #32]
1000a5d4:	b90b      	cbnz	r3, 1000a5da <_fflush_r+0x1a>
1000a5d6:	f7ff f965 	bl	100098a4 <__sinit>
1000a5da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a5de:	2b00      	cmp	r3, #0
1000a5e0:	d0f3      	beq.n	1000a5ca <_fflush_r+0xa>
1000a5e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1000a5e4:	07d0      	lsls	r0, r2, #31
1000a5e6:	d404      	bmi.n	1000a5f2 <_fflush_r+0x32>
1000a5e8:	0599      	lsls	r1, r3, #22
1000a5ea:	d402      	bmi.n	1000a5f2 <_fflush_r+0x32>
1000a5ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000a5ee:	f7ff fadc 	bl	10009baa <__retarget_lock_acquire_recursive>
1000a5f2:	4628      	mov	r0, r5
1000a5f4:	4621      	mov	r1, r4
1000a5f6:	f7ff ff5f 	bl	1000a4b8 <__sflush_r>
1000a5fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1000a5fc:	07da      	lsls	r2, r3, #31
1000a5fe:	4605      	mov	r5, r0
1000a600:	d4e4      	bmi.n	1000a5cc <_fflush_r+0xc>
1000a602:	89a3      	ldrh	r3, [r4, #12]
1000a604:	059b      	lsls	r3, r3, #22
1000a606:	d4e1      	bmi.n	1000a5cc <_fflush_r+0xc>
1000a608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000a60a:	f7ff facf 	bl	10009bac <__retarget_lock_release_recursive>
1000a60e:	e7dd      	b.n	1000a5cc <_fflush_r+0xc>

1000a610 <__swbuf_r>:
1000a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a612:	460e      	mov	r6, r1
1000a614:	4614      	mov	r4, r2
1000a616:	4605      	mov	r5, r0
1000a618:	b118      	cbz	r0, 1000a622 <__swbuf_r+0x12>
1000a61a:	6a03      	ldr	r3, [r0, #32]
1000a61c:	b90b      	cbnz	r3, 1000a622 <__swbuf_r+0x12>
1000a61e:	f7ff f941 	bl	100098a4 <__sinit>
1000a622:	69a3      	ldr	r3, [r4, #24]
1000a624:	60a3      	str	r3, [r4, #8]
1000a626:	89a3      	ldrh	r3, [r4, #12]
1000a628:	071a      	lsls	r2, r3, #28
1000a62a:	d501      	bpl.n	1000a630 <__swbuf_r+0x20>
1000a62c:	6923      	ldr	r3, [r4, #16]
1000a62e:	b943      	cbnz	r3, 1000a642 <__swbuf_r+0x32>
1000a630:	4621      	mov	r1, r4
1000a632:	4628      	mov	r0, r5
1000a634:	f000 f82a 	bl	1000a68c <__swsetup_r>
1000a638:	b118      	cbz	r0, 1000a642 <__swbuf_r+0x32>
1000a63a:	f04f 37ff 	mov.w	r7, #4294967295
1000a63e:	4638      	mov	r0, r7
1000a640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a642:	6823      	ldr	r3, [r4, #0]
1000a644:	6922      	ldr	r2, [r4, #16]
1000a646:	1a98      	subs	r0, r3, r2
1000a648:	6963      	ldr	r3, [r4, #20]
1000a64a:	b2f6      	uxtb	r6, r6
1000a64c:	4283      	cmp	r3, r0
1000a64e:	4637      	mov	r7, r6
1000a650:	dc05      	bgt.n	1000a65e <__swbuf_r+0x4e>
1000a652:	4621      	mov	r1, r4
1000a654:	4628      	mov	r0, r5
1000a656:	f7ff ffb3 	bl	1000a5c0 <_fflush_r>
1000a65a:	2800      	cmp	r0, #0
1000a65c:	d1ed      	bne.n	1000a63a <__swbuf_r+0x2a>
1000a65e:	68a3      	ldr	r3, [r4, #8]
1000a660:	3b01      	subs	r3, #1
1000a662:	60a3      	str	r3, [r4, #8]
1000a664:	6823      	ldr	r3, [r4, #0]
1000a666:	1c5a      	adds	r2, r3, #1
1000a668:	6022      	str	r2, [r4, #0]
1000a66a:	701e      	strb	r6, [r3, #0]
1000a66c:	6962      	ldr	r2, [r4, #20]
1000a66e:	1c43      	adds	r3, r0, #1
1000a670:	429a      	cmp	r2, r3
1000a672:	d004      	beq.n	1000a67e <__swbuf_r+0x6e>
1000a674:	89a3      	ldrh	r3, [r4, #12]
1000a676:	07db      	lsls	r3, r3, #31
1000a678:	d5e1      	bpl.n	1000a63e <__swbuf_r+0x2e>
1000a67a:	2e0a      	cmp	r6, #10
1000a67c:	d1df      	bne.n	1000a63e <__swbuf_r+0x2e>
1000a67e:	4621      	mov	r1, r4
1000a680:	4628      	mov	r0, r5
1000a682:	f7ff ff9d 	bl	1000a5c0 <_fflush_r>
1000a686:	2800      	cmp	r0, #0
1000a688:	d0d9      	beq.n	1000a63e <__swbuf_r+0x2e>
1000a68a:	e7d6      	b.n	1000a63a <__swbuf_r+0x2a>

1000a68c <__swsetup_r>:
1000a68c:	b538      	push	{r3, r4, r5, lr}
1000a68e:	4b29      	ldr	r3, [pc, #164]	@ (1000a734 <__swsetup_r+0xa8>)
1000a690:	4605      	mov	r5, r0
1000a692:	6818      	ldr	r0, [r3, #0]
1000a694:	460c      	mov	r4, r1
1000a696:	b118      	cbz	r0, 1000a6a0 <__swsetup_r+0x14>
1000a698:	6a03      	ldr	r3, [r0, #32]
1000a69a:	b90b      	cbnz	r3, 1000a6a0 <__swsetup_r+0x14>
1000a69c:	f7ff f902 	bl	100098a4 <__sinit>
1000a6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a6a4:	0719      	lsls	r1, r3, #28
1000a6a6:	d422      	bmi.n	1000a6ee <__swsetup_r+0x62>
1000a6a8:	06da      	lsls	r2, r3, #27
1000a6aa:	d407      	bmi.n	1000a6bc <__swsetup_r+0x30>
1000a6ac:	2209      	movs	r2, #9
1000a6ae:	602a      	str	r2, [r5, #0]
1000a6b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a6b4:	81a3      	strh	r3, [r4, #12]
1000a6b6:	f04f 30ff 	mov.w	r0, #4294967295
1000a6ba:	e033      	b.n	1000a724 <__swsetup_r+0x98>
1000a6bc:	0758      	lsls	r0, r3, #29
1000a6be:	d512      	bpl.n	1000a6e6 <__swsetup_r+0x5a>
1000a6c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000a6c2:	b141      	cbz	r1, 1000a6d6 <__swsetup_r+0x4a>
1000a6c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000a6c8:	4299      	cmp	r1, r3
1000a6ca:	d002      	beq.n	1000a6d2 <__swsetup_r+0x46>
1000a6cc:	4628      	mov	r0, r5
1000a6ce:	f7ff fa83 	bl	10009bd8 <_free_r>
1000a6d2:	2300      	movs	r3, #0
1000a6d4:	6363      	str	r3, [r4, #52]	@ 0x34
1000a6d6:	89a3      	ldrh	r3, [r4, #12]
1000a6d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
1000a6dc:	81a3      	strh	r3, [r4, #12]
1000a6de:	2300      	movs	r3, #0
1000a6e0:	6063      	str	r3, [r4, #4]
1000a6e2:	6923      	ldr	r3, [r4, #16]
1000a6e4:	6023      	str	r3, [r4, #0]
1000a6e6:	89a3      	ldrh	r3, [r4, #12]
1000a6e8:	f043 0308 	orr.w	r3, r3, #8
1000a6ec:	81a3      	strh	r3, [r4, #12]
1000a6ee:	6923      	ldr	r3, [r4, #16]
1000a6f0:	b94b      	cbnz	r3, 1000a706 <__swsetup_r+0x7a>
1000a6f2:	89a3      	ldrh	r3, [r4, #12]
1000a6f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
1000a6f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
1000a6fc:	d003      	beq.n	1000a706 <__swsetup_r+0x7a>
1000a6fe:	4621      	mov	r1, r4
1000a700:	4628      	mov	r0, r5
1000a702:	f000 f8cb 	bl	1000a89c <__smakebuf_r>
1000a706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a70a:	f013 0201 	ands.w	r2, r3, #1
1000a70e:	d00a      	beq.n	1000a726 <__swsetup_r+0x9a>
1000a710:	2200      	movs	r2, #0
1000a712:	60a2      	str	r2, [r4, #8]
1000a714:	6962      	ldr	r2, [r4, #20]
1000a716:	4252      	negs	r2, r2
1000a718:	61a2      	str	r2, [r4, #24]
1000a71a:	6922      	ldr	r2, [r4, #16]
1000a71c:	b942      	cbnz	r2, 1000a730 <__swsetup_r+0xa4>
1000a71e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
1000a722:	d1c5      	bne.n	1000a6b0 <__swsetup_r+0x24>
1000a724:	bd38      	pop	{r3, r4, r5, pc}
1000a726:	0799      	lsls	r1, r3, #30
1000a728:	bf58      	it	pl
1000a72a:	6962      	ldrpl	r2, [r4, #20]
1000a72c:	60a2      	str	r2, [r4, #8]
1000a72e:	e7f4      	b.n	1000a71a <__swsetup_r+0x8e>
1000a730:	2000      	movs	r0, #0
1000a732:	e7f7      	b.n	1000a724 <__swsetup_r+0x98>
1000a734:	100200d8 	.word	0x100200d8

1000a738 <memmove>:
1000a738:	4288      	cmp	r0, r1
1000a73a:	b510      	push	{r4, lr}
1000a73c:	eb01 0402 	add.w	r4, r1, r2
1000a740:	d902      	bls.n	1000a748 <memmove+0x10>
1000a742:	4284      	cmp	r4, r0
1000a744:	4623      	mov	r3, r4
1000a746:	d807      	bhi.n	1000a758 <memmove+0x20>
1000a748:	1e43      	subs	r3, r0, #1
1000a74a:	42a1      	cmp	r1, r4
1000a74c:	d008      	beq.n	1000a760 <memmove+0x28>
1000a74e:	f811 2b01 	ldrb.w	r2, [r1], #1
1000a752:	f803 2f01 	strb.w	r2, [r3, #1]!
1000a756:	e7f8      	b.n	1000a74a <memmove+0x12>
1000a758:	4402      	add	r2, r0
1000a75a:	4601      	mov	r1, r0
1000a75c:	428a      	cmp	r2, r1
1000a75e:	d100      	bne.n	1000a762 <memmove+0x2a>
1000a760:	bd10      	pop	{r4, pc}
1000a762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1000a766:	f802 4d01 	strb.w	r4, [r2, #-1]!
1000a76a:	e7f7      	b.n	1000a75c <memmove+0x24>

1000a76c <_raise_r>:
1000a76c:	291f      	cmp	r1, #31
1000a76e:	b538      	push	{r3, r4, r5, lr}
1000a770:	4605      	mov	r5, r0
1000a772:	460c      	mov	r4, r1
1000a774:	d904      	bls.n	1000a780 <_raise_r+0x14>
1000a776:	2316      	movs	r3, #22
1000a778:	6003      	str	r3, [r0, #0]
1000a77a:	f04f 30ff 	mov.w	r0, #4294967295
1000a77e:	bd38      	pop	{r3, r4, r5, pc}
1000a780:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
1000a782:	b112      	cbz	r2, 1000a78a <_raise_r+0x1e>
1000a784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000a788:	b94b      	cbnz	r3, 1000a79e <_raise_r+0x32>
1000a78a:	4628      	mov	r0, r5
1000a78c:	f000 f830 	bl	1000a7f0 <_getpid_r>
1000a790:	4622      	mov	r2, r4
1000a792:	4601      	mov	r1, r0
1000a794:	4628      	mov	r0, r5
1000a796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000a79a:	f000 b817 	b.w	1000a7cc <_kill_r>
1000a79e:	2b01      	cmp	r3, #1
1000a7a0:	d00a      	beq.n	1000a7b8 <_raise_r+0x4c>
1000a7a2:	1c59      	adds	r1, r3, #1
1000a7a4:	d103      	bne.n	1000a7ae <_raise_r+0x42>
1000a7a6:	2316      	movs	r3, #22
1000a7a8:	6003      	str	r3, [r0, #0]
1000a7aa:	2001      	movs	r0, #1
1000a7ac:	e7e7      	b.n	1000a77e <_raise_r+0x12>
1000a7ae:	2100      	movs	r1, #0
1000a7b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
1000a7b4:	4620      	mov	r0, r4
1000a7b6:	4798      	blx	r3
1000a7b8:	2000      	movs	r0, #0
1000a7ba:	e7e0      	b.n	1000a77e <_raise_r+0x12>

1000a7bc <raise>:
1000a7bc:	4b02      	ldr	r3, [pc, #8]	@ (1000a7c8 <raise+0xc>)
1000a7be:	4601      	mov	r1, r0
1000a7c0:	6818      	ldr	r0, [r3, #0]
1000a7c2:	f7ff bfd3 	b.w	1000a76c <_raise_r>
1000a7c6:	bf00      	nop
1000a7c8:	100200d8 	.word	0x100200d8

1000a7cc <_kill_r>:
1000a7cc:	b538      	push	{r3, r4, r5, lr}
1000a7ce:	4d07      	ldr	r5, [pc, #28]	@ (1000a7ec <_kill_r+0x20>)
1000a7d0:	2300      	movs	r3, #0
1000a7d2:	4604      	mov	r4, r0
1000a7d4:	4608      	mov	r0, r1
1000a7d6:	4611      	mov	r1, r2
1000a7d8:	602b      	str	r3, [r5, #0]
1000a7da:	f7f7 f8d5 	bl	10001988 <_kill>
1000a7de:	1c43      	adds	r3, r0, #1
1000a7e0:	d102      	bne.n	1000a7e8 <_kill_r+0x1c>
1000a7e2:	682b      	ldr	r3, [r5, #0]
1000a7e4:	b103      	cbz	r3, 1000a7e8 <_kill_r+0x1c>
1000a7e6:	6023      	str	r3, [r4, #0]
1000a7e8:	bd38      	pop	{r3, r4, r5, pc}
1000a7ea:	bf00      	nop
1000a7ec:	1002065c 	.word	0x1002065c

1000a7f0 <_getpid_r>:
1000a7f0:	f7f7 b8c2 	b.w	10001978 <_getpid>

1000a7f4 <_realloc_r>:
1000a7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000a7f8:	4607      	mov	r7, r0
1000a7fa:	4614      	mov	r4, r2
1000a7fc:	460d      	mov	r5, r1
1000a7fe:	b921      	cbnz	r1, 1000a80a <_realloc_r+0x16>
1000a800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000a804:	4611      	mov	r1, r2
1000a806:	f7fe beb1 	b.w	1000956c <_malloc_r>
1000a80a:	b92a      	cbnz	r2, 1000a818 <_realloc_r+0x24>
1000a80c:	f7ff f9e4 	bl	10009bd8 <_free_r>
1000a810:	4625      	mov	r5, r4
1000a812:	4628      	mov	r0, r5
1000a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000a818:	f000 f89e 	bl	1000a958 <_malloc_usable_size_r>
1000a81c:	4284      	cmp	r4, r0
1000a81e:	4606      	mov	r6, r0
1000a820:	d802      	bhi.n	1000a828 <_realloc_r+0x34>
1000a822:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000a826:	d8f4      	bhi.n	1000a812 <_realloc_r+0x1e>
1000a828:	4621      	mov	r1, r4
1000a82a:	4638      	mov	r0, r7
1000a82c:	f7fe fe9e 	bl	1000956c <_malloc_r>
1000a830:	4680      	mov	r8, r0
1000a832:	b908      	cbnz	r0, 1000a838 <_realloc_r+0x44>
1000a834:	4645      	mov	r5, r8
1000a836:	e7ec      	b.n	1000a812 <_realloc_r+0x1e>
1000a838:	42b4      	cmp	r4, r6
1000a83a:	4622      	mov	r2, r4
1000a83c:	4629      	mov	r1, r5
1000a83e:	bf28      	it	cs
1000a840:	4632      	movcs	r2, r6
1000a842:	f7ff f9b4 	bl	10009bae <memcpy>
1000a846:	4629      	mov	r1, r5
1000a848:	4638      	mov	r0, r7
1000a84a:	f7ff f9c5 	bl	10009bd8 <_free_r>
1000a84e:	e7f1      	b.n	1000a834 <_realloc_r+0x40>

1000a850 <__swhatbuf_r>:
1000a850:	b570      	push	{r4, r5, r6, lr}
1000a852:	460c      	mov	r4, r1
1000a854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000a858:	2900      	cmp	r1, #0
1000a85a:	b096      	sub	sp, #88	@ 0x58
1000a85c:	4615      	mov	r5, r2
1000a85e:	461e      	mov	r6, r3
1000a860:	da0d      	bge.n	1000a87e <__swhatbuf_r+0x2e>
1000a862:	89a3      	ldrh	r3, [r4, #12]
1000a864:	f013 0f80 	tst.w	r3, #128	@ 0x80
1000a868:	f04f 0100 	mov.w	r1, #0
1000a86c:	bf14      	ite	ne
1000a86e:	2340      	movne	r3, #64	@ 0x40
1000a870:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
1000a874:	2000      	movs	r0, #0
1000a876:	6031      	str	r1, [r6, #0]
1000a878:	602b      	str	r3, [r5, #0]
1000a87a:	b016      	add	sp, #88	@ 0x58
1000a87c:	bd70      	pop	{r4, r5, r6, pc}
1000a87e:	466a      	mov	r2, sp
1000a880:	f000 f848 	bl	1000a914 <_fstat_r>
1000a884:	2800      	cmp	r0, #0
1000a886:	dbec      	blt.n	1000a862 <__swhatbuf_r+0x12>
1000a888:	9901      	ldr	r1, [sp, #4]
1000a88a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
1000a88e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
1000a892:	4259      	negs	r1, r3
1000a894:	4159      	adcs	r1, r3
1000a896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1000a89a:	e7eb      	b.n	1000a874 <__swhatbuf_r+0x24>

1000a89c <__smakebuf_r>:
1000a89c:	898b      	ldrh	r3, [r1, #12]
1000a89e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a8a0:	079d      	lsls	r5, r3, #30
1000a8a2:	4606      	mov	r6, r0
1000a8a4:	460c      	mov	r4, r1
1000a8a6:	d507      	bpl.n	1000a8b8 <__smakebuf_r+0x1c>
1000a8a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
1000a8ac:	6023      	str	r3, [r4, #0]
1000a8ae:	6123      	str	r3, [r4, #16]
1000a8b0:	2301      	movs	r3, #1
1000a8b2:	6163      	str	r3, [r4, #20]
1000a8b4:	b003      	add	sp, #12
1000a8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a8b8:	ab01      	add	r3, sp, #4
1000a8ba:	466a      	mov	r2, sp
1000a8bc:	f7ff ffc8 	bl	1000a850 <__swhatbuf_r>
1000a8c0:	9f00      	ldr	r7, [sp, #0]
1000a8c2:	4605      	mov	r5, r0
1000a8c4:	4639      	mov	r1, r7
1000a8c6:	4630      	mov	r0, r6
1000a8c8:	f7fe fe50 	bl	1000956c <_malloc_r>
1000a8cc:	b948      	cbnz	r0, 1000a8e2 <__smakebuf_r+0x46>
1000a8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a8d2:	059a      	lsls	r2, r3, #22
1000a8d4:	d4ee      	bmi.n	1000a8b4 <__smakebuf_r+0x18>
1000a8d6:	f023 0303 	bic.w	r3, r3, #3
1000a8da:	f043 0302 	orr.w	r3, r3, #2
1000a8de:	81a3      	strh	r3, [r4, #12]
1000a8e0:	e7e2      	b.n	1000a8a8 <__smakebuf_r+0xc>
1000a8e2:	89a3      	ldrh	r3, [r4, #12]
1000a8e4:	6020      	str	r0, [r4, #0]
1000a8e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000a8ea:	81a3      	strh	r3, [r4, #12]
1000a8ec:	9b01      	ldr	r3, [sp, #4]
1000a8ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
1000a8f2:	b15b      	cbz	r3, 1000a90c <__smakebuf_r+0x70>
1000a8f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000a8f8:	4630      	mov	r0, r6
1000a8fa:	f000 f81d 	bl	1000a938 <_isatty_r>
1000a8fe:	b128      	cbz	r0, 1000a90c <__smakebuf_r+0x70>
1000a900:	89a3      	ldrh	r3, [r4, #12]
1000a902:	f023 0303 	bic.w	r3, r3, #3
1000a906:	f043 0301 	orr.w	r3, r3, #1
1000a90a:	81a3      	strh	r3, [r4, #12]
1000a90c:	89a3      	ldrh	r3, [r4, #12]
1000a90e:	431d      	orrs	r5, r3
1000a910:	81a5      	strh	r5, [r4, #12]
1000a912:	e7cf      	b.n	1000a8b4 <__smakebuf_r+0x18>

1000a914 <_fstat_r>:
1000a914:	b538      	push	{r3, r4, r5, lr}
1000a916:	4d07      	ldr	r5, [pc, #28]	@ (1000a934 <_fstat_r+0x20>)
1000a918:	2300      	movs	r3, #0
1000a91a:	4604      	mov	r4, r0
1000a91c:	4608      	mov	r0, r1
1000a91e:	4611      	mov	r1, r2
1000a920:	602b      	str	r3, [r5, #0]
1000a922:	f7f7 f891 	bl	10001a48 <_fstat>
1000a926:	1c43      	adds	r3, r0, #1
1000a928:	d102      	bne.n	1000a930 <_fstat_r+0x1c>
1000a92a:	682b      	ldr	r3, [r5, #0]
1000a92c:	b103      	cbz	r3, 1000a930 <_fstat_r+0x1c>
1000a92e:	6023      	str	r3, [r4, #0]
1000a930:	bd38      	pop	{r3, r4, r5, pc}
1000a932:	bf00      	nop
1000a934:	1002065c 	.word	0x1002065c

1000a938 <_isatty_r>:
1000a938:	b538      	push	{r3, r4, r5, lr}
1000a93a:	4d06      	ldr	r5, [pc, #24]	@ (1000a954 <_isatty_r+0x1c>)
1000a93c:	2300      	movs	r3, #0
1000a93e:	4604      	mov	r4, r0
1000a940:	4608      	mov	r0, r1
1000a942:	602b      	str	r3, [r5, #0]
1000a944:	f7f7 f890 	bl	10001a68 <_isatty>
1000a948:	1c43      	adds	r3, r0, #1
1000a94a:	d102      	bne.n	1000a952 <_isatty_r+0x1a>
1000a94c:	682b      	ldr	r3, [r5, #0]
1000a94e:	b103      	cbz	r3, 1000a952 <_isatty_r+0x1a>
1000a950:	6023      	str	r3, [r4, #0]
1000a952:	bd38      	pop	{r3, r4, r5, pc}
1000a954:	1002065c 	.word	0x1002065c

1000a958 <_malloc_usable_size_r>:
1000a958:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000a95c:	1f18      	subs	r0, r3, #4
1000a95e:	2b00      	cmp	r3, #0
1000a960:	bfbc      	itt	lt
1000a962:	580b      	ldrlt	r3, [r1, r0]
1000a964:	18c0      	addlt	r0, r0, r3
1000a966:	4770      	bx	lr

1000a968 <_init>:
1000a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a96a:	bf00      	nop
1000a96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a96e:	bc08      	pop	{r3}
1000a970:	469e      	mov	lr, r3
1000a972:	4770      	bx	lr

1000a974 <_fini>:
1000a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a976:	bf00      	nop
1000a978:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a97a:	bc08      	pop	{r3}
1000a97c:	469e      	mov	lr, r3
1000a97e:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000a980 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000a980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 1000a9b8 <LoopForever+0x2>
  movs  r1, #0
1000a984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000a986:	e003      	b.n	1000a990 <LoopCopyDataInit>

1000a988 <CopyDataInit>:
  ldr  r3, =_sidata
1000a988:	4b0c      	ldr	r3, [pc, #48]	@ (1000a9bc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000a98a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000a98c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000a98e:	3104      	adds	r1, #4

1000a990 <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000a990:	480b      	ldr	r0, [pc, #44]	@ (1000a9c0 <LoopForever+0xa>)
  ldr  r3, =_edata
1000a992:	4b0c      	ldr	r3, [pc, #48]	@ (1000a9c4 <LoopForever+0xe>)
  adds  r2, r0, r1
1000a994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000a996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000a998:	d3f6      	bcc.n	1000a988 <CopyDataInit>
  ldr  r2, =_sbss
1000a99a:	4a0b      	ldr	r2, [pc, #44]	@ (1000a9c8 <LoopForever+0x12>)
  b  LoopFillZerobss
1000a99c:	e002      	b.n	1000a9a4 <LoopFillZerobss>

1000a99e <FillZerobss>:
  movs  r3, #0
1000a99e:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000a9a0:	f842 3b04 	str.w	r3, [r2], #4

1000a9a4 <LoopFillZerobss>:
  ldr  r3, = _ebss
1000a9a4:	4b09      	ldr	r3, [pc, #36]	@ (1000a9cc <LoopForever+0x16>)
  cmp  r2, r3
1000a9a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000a9a8:	d3f9      	bcc.n	1000a99e <FillZerobss>
  bl  SystemInit
1000a9aa:	f7f5 fba9 	bl	10000100 <SystemInit>
 bl __libc_init_array
1000a9ae:	f7ff f8d7 	bl	10009b60 <__libc_init_array>
  bl main
1000a9b2:	f7f5 fbcb 	bl	1000014c <main>

1000a9b6 <LoopForever>:
    b LoopForever
1000a9b6:	e7fe      	b.n	1000a9b6 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000a9b8:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000a9bc:	1000b418 	.word	0x1000b418
  ldr  r0, =_sdata
1000a9c0:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000a9c4:	10020128 	.word	0x10020128
  ldr  r2, =_sbss
1000a9c8:	100201b4 	.word	0x100201b4
  ldr  r3, = _ebss
1000a9cc:	10020664 	.word	0x10020664
