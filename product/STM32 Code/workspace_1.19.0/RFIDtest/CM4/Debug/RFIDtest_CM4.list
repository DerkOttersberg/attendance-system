
RFIDtest_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b8  10000000  10000000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000a9b8  1000a9b8  0000c9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a80  1000aa08  1000aa08  0000ca08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000b488  1000b488  0000e1b4  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  1000b488  1000b488  0000d488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  1000b490  1000b490  0000e1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000b490  1000b490  0000d490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  1000b494  1000b494  0000d494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000128  10020000  1000b498  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020128  1000b5c0  0000e128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          000004b0  100201b4  1000b64c  0000e1b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  10020664  1000bafc  0000e1b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000e1b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c686  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000044c3  00000000  00000000  0002a86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011c0  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d26  00000000  00000000  0002fef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004a035  00000000  00000000  00030c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b061  00000000  00000000  0007ac4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001ce0ab  00000000  00000000  00095cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00263d57  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000050dc  00000000  00000000  00263d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  00268e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201b4 	.word	0x100201b4
1000001c:	00000000 	.word	0x00000000
10000020:	1000a9a0 	.word	0x1000a9a0

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201b8 	.word	0x100201b8
1000003c:	1000a9a0 	.word	0x1000a9a0

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000100:	b480      	push	{r7}
10000102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000104:	4b0f      	ldr	r3, [pc, #60]	@ (10000144 <SystemInit+0x44>)
10000106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000010a:	4a0e      	ldr	r2, [pc, #56]	@ (10000144 <SystemInit+0x44>)
1000010c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000114:	4b0c      	ldr	r3, [pc, #48]	@ (10000148 <SystemInit+0x48>)
10000116:	2200      	movs	r2, #0
10000118:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000011a:	4b0b      	ldr	r3, [pc, #44]	@ (10000148 <SystemInit+0x48>)
1000011c:	2200      	movs	r2, #0
1000011e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000120:	4b09      	ldr	r3, [pc, #36]	@ (10000148 <SystemInit+0x48>)
10000122:	2200      	movs	r2, #0
10000124:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000126:	4b08      	ldr	r3, [pc, #32]	@ (10000148 <SystemInit+0x48>)
10000128:	2200      	movs	r2, #0
1000012a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000012c:	4b06      	ldr	r3, [pc, #24]	@ (10000148 <SystemInit+0x48>)
1000012e:	2200      	movs	r2, #0
10000130:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000132:	4b05      	ldr	r3, [pc, #20]	@ (10000148 <SystemInit+0x48>)
10000134:	2200      	movs	r2, #0
10000136:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000138:	bf00      	nop
1000013a:	46bd      	mov	sp, r7
1000013c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000140:	4770      	bx	lr
10000142:	bf00      	nop
10000144:	e000ed00 	.word	0xe000ed00
10000148:	5000d0c0 	.word	0x5000d0c0

1000014c <main>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
1000014c:	b580      	push	{r7, lr}
1000014e:	b082      	sub	sp, #8
10000150:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    HAL_Init();
10000152:	f001 fcf5 	bl	10001b40 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    if(IS_ENGINEERING_BOOT_MODE())
10000156:	4b41      	ldr	r3, [pc, #260]	@ (1000025c <main+0x110>)
10000158:	681b      	ldr	r3, [r3, #0]
1000015a:	f003 0307 	and.w	r3, r3, #7
1000015e:	2b04      	cmp	r3, #4
10000160:	d101      	bne.n	10000166 <main+0x1a>
    {
        SystemClock_Config();
10000162:	f000 fc13 	bl	1000098c <SystemClock_Config>
    }

    if(IS_ENGINEERING_BOOT_MODE())
10000166:	4b3d      	ldr	r3, [pc, #244]	@ (1000025c <main+0x110>)
10000168:	681b      	ldr	r3, [r3, #0]
1000016a:	f003 0307 	and.w	r3, r3, #7
1000016e:	2b04      	cmp	r3, #4
10000170:	d102      	bne.n	10000178 <main+0x2c>
    {
        PeriphCommonClock_Config();
10000172:	f000 fd81 	bl	10000c78 <PeriphCommonClock_Config>
10000176:	e005      	b.n	10000184 <main+0x38>
    }
    else
    {
        MX_IPCC_Init();
10000178:	f000 fdac 	bl	10000cd4 <MX_IPCC_Init>
        MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
1000017c:	2100      	movs	r1, #0
1000017e:	2001      	movs	r0, #1
10000180:	f009 f8ea 	bl	10009358 <MX_OPENAMP_Init>
    }

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    MX_GPIO_Init();
10000184:	f000 fe21 	bl	10000dca <MX_GPIO_Init>
    MX_DMA_Init();
10000188:	f000 fe0e 	bl	10000da8 <MX_DMA_Init>
    MX_SPI5_Init();
1000018c:	f000 fdb6 	bl	10000cfc <MX_SPI5_Init>

    /* USER CODE BEGIN 2 */
    // Initialize MFRC522
    mfrc522.hspi = &hspi5;
10000190:	4b33      	ldr	r3, [pc, #204]	@ (10000260 <main+0x114>)
10000192:	4a34      	ldr	r2, [pc, #208]	@ (10000264 <main+0x118>)
10000194:	601a      	str	r2, [r3, #0]
    mfrc522.CS_GPIO_Port = GPIOD;
10000196:	4b32      	ldr	r3, [pc, #200]	@ (10000260 <main+0x114>)
10000198:	f04f 2250 	mov.w	r2, #1342197760	@ 0x50005000
1000019c:	605a      	str	r2, [r3, #4]
    mfrc522.CS_Pin = GPIO_PIN_14;
1000019e:	4b30      	ldr	r3, [pc, #192]	@ (10000260 <main+0x114>)
100001a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
100001a4:	811a      	strh	r2, [r3, #8]
    mfrc522.RST_GPIO_Port = GPIOD;
100001a6:	4b2e      	ldr	r3, [pc, #184]	@ (10000260 <main+0x114>)
100001a8:	f04f 2250 	mov.w	r2, #1342197760	@ 0x50005000
100001ac:	60da      	str	r2, [r3, #12]
    mfrc522.RST_Pin = GPIO_PIN_15;
100001ae:	4b2c      	ldr	r3, [pc, #176]	@ (10000260 <main+0x114>)
100001b0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
100001b4:	821a      	strh	r2, [r3, #16]

    MFRC522_Init(&mfrc522);
100001b6:	482a      	ldr	r0, [pc, #168]	@ (10000260 <main+0x114>)
100001b8:	f000 fe4a 	bl	10000e50 <MFRC522_Init>

    // Initialize Virtual UART
    VIRT_UART_Init(&huart0);
100001bc:	482a      	ldr	r0, [pc, #168]	@ (10000268 <main+0x11c>)
100001be:	f008 fc27 	bl	10008a10 <VIRT_UART_Init>
    if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART_RxCpltCallback) != VIRT_UART_OK) {
100001c2:	4a2a      	ldr	r2, [pc, #168]	@ (1000026c <main+0x120>)
100001c4:	2100      	movs	r1, #0
100001c6:	4828      	ldr	r0, [pc, #160]	@ (10000268 <main+0x11c>)
100001c8:	f008 fc3e 	bl	10008a48 <VIRT_UART_RegisterCallback>
100001cc:	4603      	mov	r3, r0
100001ce:	2b00      	cmp	r3, #0
100001d0:	d001      	beq.n	100001d6 <main+0x8a>
        Error_Handler();
100001d2:	f000 fe37 	bl	10000e44 <Error_Handler>
    }

    // Send startup message
    qprint("\r\n=== M4 Core Started ===\r\n");
100001d6:	4826      	ldr	r0, [pc, #152]	@ (10000270 <main+0x124>)
100001d8:	f000 fba6 	bl	10000928 <qprint>
    qprint("RFID Reader Ready\r\n");
100001dc:	4825      	ldr	r0, [pc, #148]	@ (10000274 <main+0x128>)
100001de:	f000 fba3 	bl	10000928 <qprint>
    qprint("Available commands:\r\n");
100001e2:	4825      	ldr	r0, [pc, #148]	@ (10000278 <main+0x12c>)
100001e4:	f000 fba0 	bl	10000928 <qprint>
    qprint("  scan        - Scan for card once\r\n");
100001e8:	4824      	ldr	r0, [pc, #144]	@ (1000027c <main+0x130>)
100001ea:	f000 fb9d 	bl	10000928 <qprint>
    qprint("  status      - Get system status\r\n");
100001ee:	4824      	ldr	r0, [pc, #144]	@ (10000280 <main+0x134>)
100001f0:	f000 fb9a 	bl	10000928 <qprint>
    qprint("  read:N      - Read block N (e.g., read:4)\r\n");
100001f4:	4823      	ldr	r0, [pc, #140]	@ (10000284 <main+0x138>)
100001f6:	f000 fb97 	bl	10000928 <qprint>
    qprint("  write:N:DATA - Write to block N\r\n");
100001fa:	4823      	ldr	r0, [pc, #140]	@ (10000288 <main+0x13c>)
100001fc:	f000 fb94 	bl	10000928 <qprint>
    qprint("===================\r\n\r\n");
10000200:	4822      	ldr	r0, [pc, #136]	@ (1000028c <main+0x140>)
10000202:	f000 fb91 	bl	10000928 <qprint>

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    uint32_t lastAutoScan = 0;
10000206:	2300      	movs	r3, #0
10000208:	607b      	str	r3, [r7, #4]
    uint8_t autoScanEnabled = 1; // Auto-scan by default
1000020a:	2301      	movs	r3, #1
1000020c:	70fb      	strb	r3, [r7, #3]
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

        // Check for incoming messages
        OPENAMP_check_for_message();
1000020e:	f009 f955 	bl	100094bc <OPENAMP_check_for_message>

        // Process any pending commands from A7
        if (commandReady) {
10000212:	4b1f      	ldr	r3, [pc, #124]	@ (10000290 <main+0x144>)
10000214:	781b      	ldrb	r3, [r3, #0]
10000216:	b2db      	uxtb	r3, r3
10000218:	2b00      	cmp	r3, #0
1000021a:	d00e      	beq.n	1000023a <main+0xee>
            commandReady = 0;
1000021c:	4b1c      	ldr	r3, [pc, #112]	@ (10000290 <main+0x144>)
1000021e:	2200      	movs	r2, #0
10000220:	701a      	strb	r2, [r3, #0]
            ProcessCommand(rxBuffer);
10000222:	481c      	ldr	r0, [pc, #112]	@ (10000294 <main+0x148>)
10000224:	f000 f886 	bl	10000334 <ProcessCommand>
            rxIndex = 0;
10000228:	4b1b      	ldr	r3, [pc, #108]	@ (10000298 <main+0x14c>)
1000022a:	2200      	movs	r2, #0
1000022c:	801a      	strh	r2, [r3, #0]
            memset(rxBuffer, 0, RX_BUFFER_SIZE);
1000022e:	f44f 7280 	mov.w	r2, #256	@ 0x100
10000232:	2100      	movs	r1, #0
10000234:	4817      	ldr	r0, [pc, #92]	@ (10000294 <main+0x148>)
10000236:	f009 fc19 	bl	10009a6c <memset>
        }

        // Auto-scan mode (can be disabled via command)
        if (autoScanEnabled && (HAL_GetTick() - lastAutoScan > 100)) {
1000023a:	78fb      	ldrb	r3, [r7, #3]
1000023c:	2b00      	cmp	r3, #0
1000023e:	d0e6      	beq.n	1000020e <main+0xc2>
10000240:	f001 fce2 	bl	10001c08 <HAL_GetTick>
10000244:	4602      	mov	r2, r0
10000246:	687b      	ldr	r3, [r7, #4]
10000248:	1ad3      	subs	r3, r2, r3
1000024a:	2b64      	cmp	r3, #100	@ 0x64
1000024c:	d9df      	bls.n	1000020e <main+0xc2>
            lastAutoScan = HAL_GetTick();
1000024e:	f001 fcdb 	bl	10001c08 <HAL_GetTick>
10000252:	6078      	str	r0, [r7, #4]

            //uint8_t tagType[2];
            //MFRC522_Status_t status = MFRC522_Request(PICC_CMD_REQA, tagType);
            ExecuteScanOnce();
10000254:	f000 f948 	bl	100004e8 <ExecuteScanOnce>
        OPENAMP_check_for_message();
10000258:	e7d9      	b.n	1000020e <main+0xc2>
1000025a:	bf00      	nop
1000025c:	50020000 	.word	0x50020000
10000260:	100202e4 	.word	0x100202e4
10000264:	1002020c 	.word	0x1002020c
10000268:	10020294 	.word	0x10020294
1000026c:	1000029d 	.word	0x1000029d
10000270:	1000aa08 	.word	0x1000aa08
10000274:	1000aa24 	.word	0x1000aa24
10000278:	1000aa38 	.word	0x1000aa38
1000027c:	1000aa50 	.word	0x1000aa50
10000280:	1000aa78 	.word	0x1000aa78
10000284:	1000aa9c 	.word	0x1000aa9c
10000288:	1000aacc 	.word	0x1000aacc
1000028c:	1000aaf0 	.word	0x1000aaf0
10000290:	1002041a 	.word	0x1002041a
10000294:	10020318 	.word	0x10020318
10000298:	10020418 	.word	0x10020418

1000029c <VIRT_UART_RxCpltCallback>:
/**
 * @brief Callback when data received from A7 core
 * The data is already in huart->pRxBuffPtr
 */
void VIRT_UART_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
1000029c:	b480      	push	{r7}
1000029e:	b085      	sub	sp, #20
100002a0:	af00      	add	r7, sp, #0
100002a2:	6078      	str	r0, [r7, #4]
    // Data is automatically in the RX buffer
    // huart->RxXferSize contains the number of bytes received

    for (uint16_t i = 0; i < huart->RxXferSize; i++) {
100002a4:	2300      	movs	r3, #0
100002a6:	81fb      	strh	r3, [r7, #14]
100002a8:	e031      	b.n	1000030e <VIRT_UART_RxCpltCallback+0x72>
        uint8_t data = huart->pRxBuffPtr[i];
100002aa:	687b      	ldr	r3, [r7, #4]
100002ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100002ae:	89fb      	ldrh	r3, [r7, #14]
100002b0:	4413      	add	r3, r2
100002b2:	781b      	ldrb	r3, [r3, #0]
100002b4:	737b      	strb	r3, [r7, #13]

        if (data == '\n' || data == '\r') {
100002b6:	7b7b      	ldrb	r3, [r7, #13]
100002b8:	2b0a      	cmp	r3, #10
100002ba:	d002      	beq.n	100002c2 <VIRT_UART_RxCpltCallback+0x26>
100002bc:	7b7b      	ldrb	r3, [r7, #13]
100002be:	2b0d      	cmp	r3, #13
100002c0:	d112      	bne.n	100002e8 <VIRT_UART_RxCpltCallback+0x4c>
            // End of command
            if (rxIndex > 0) {
100002c2:	4b19      	ldr	r3, [pc, #100]	@ (10000328 <VIRT_UART_RxCpltCallback+0x8c>)
100002c4:	881b      	ldrh	r3, [r3, #0]
100002c6:	b29b      	uxth	r3, r3
100002c8:	2b00      	cmp	r3, #0
100002ca:	d01d      	beq.n	10000308 <VIRT_UART_RxCpltCallback+0x6c>
                rxBuffer[rxIndex] = '\0';
100002cc:	4b16      	ldr	r3, [pc, #88]	@ (10000328 <VIRT_UART_RxCpltCallback+0x8c>)
100002ce:	881b      	ldrh	r3, [r3, #0]
100002d0:	b29b      	uxth	r3, r3
100002d2:	461a      	mov	r2, r3
100002d4:	4b15      	ldr	r3, [pc, #84]	@ (1000032c <VIRT_UART_RxCpltCallback+0x90>)
100002d6:	2100      	movs	r1, #0
100002d8:	5499      	strb	r1, [r3, r2]
                commandReady = 1;
100002da:	4b15      	ldr	r3, [pc, #84]	@ (10000330 <VIRT_UART_RxCpltCallback+0x94>)
100002dc:	2201      	movs	r2, #1
100002de:	701a      	strb	r2, [r3, #0]
                rxIndex = 0;  // Reset for next command
100002e0:	4b11      	ldr	r3, [pc, #68]	@ (10000328 <VIRT_UART_RxCpltCallback+0x8c>)
100002e2:	2200      	movs	r2, #0
100002e4:	801a      	strh	r2, [r3, #0]
            if (rxIndex > 0) {
100002e6:	e00f      	b.n	10000308 <VIRT_UART_RxCpltCallback+0x6c>
            }
        } else if (rxIndex < RX_BUFFER_SIZE - 1) {
100002e8:	4b0f      	ldr	r3, [pc, #60]	@ (10000328 <VIRT_UART_RxCpltCallback+0x8c>)
100002ea:	881b      	ldrh	r3, [r3, #0]
100002ec:	b29b      	uxth	r3, r3
100002ee:	2bfe      	cmp	r3, #254	@ 0xfe
100002f0:	d80a      	bhi.n	10000308 <VIRT_UART_RxCpltCallback+0x6c>
            // Add to buffer
            rxBuffer[rxIndex++] = data;
100002f2:	4b0d      	ldr	r3, [pc, #52]	@ (10000328 <VIRT_UART_RxCpltCallback+0x8c>)
100002f4:	881b      	ldrh	r3, [r3, #0]
100002f6:	b29b      	uxth	r3, r3
100002f8:	1c5a      	adds	r2, r3, #1
100002fa:	b291      	uxth	r1, r2
100002fc:	4a0a      	ldr	r2, [pc, #40]	@ (10000328 <VIRT_UART_RxCpltCallback+0x8c>)
100002fe:	8011      	strh	r1, [r2, #0]
10000300:	4619      	mov	r1, r3
10000302:	4a0a      	ldr	r2, [pc, #40]	@ (1000032c <VIRT_UART_RxCpltCallback+0x90>)
10000304:	7b7b      	ldrb	r3, [r7, #13]
10000306:	5453      	strb	r3, [r2, r1]
    for (uint16_t i = 0; i < huart->RxXferSize; i++) {
10000308:	89fb      	ldrh	r3, [r7, #14]
1000030a:	3301      	adds	r3, #1
1000030c:	81fb      	strh	r3, [r7, #14]
1000030e:	687b      	ldr	r3, [r7, #4]
10000310:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
10000314:	89fa      	ldrh	r2, [r7, #14]
10000316:	429a      	cmp	r2, r3
10000318:	d3c7      	bcc.n	100002aa <VIRT_UART_RxCpltCallback+0xe>
        }
    }
}
1000031a:	bf00      	nop
1000031c:	bf00      	nop
1000031e:	3714      	adds	r7, #20
10000320:	46bd      	mov	sp, r7
10000322:	f85d 7b04 	ldr.w	r7, [sp], #4
10000326:	4770      	bx	lr
10000328:	10020418 	.word	0x10020418
1000032c:	10020318 	.word	0x10020318
10000330:	1002041a 	.word	0x1002041a

10000334 <ProcessCommand>:

/**
 * @brief Process incoming command from A7
 */
void ProcessCommand(char* cmd)
{
10000334:	b580      	push	{r7, lr}
10000336:	b086      	sub	sp, #24
10000338:	af00      	add	r7, sp, #0
1000033a:	6078      	str	r0, [r7, #4]
    // Trim whitespace
    while (*cmd == ' ' || *cmd == '\t') cmd++;
1000033c:	e002      	b.n	10000344 <ProcessCommand+0x10>
1000033e:	687b      	ldr	r3, [r7, #4]
10000340:	3301      	adds	r3, #1
10000342:	607b      	str	r3, [r7, #4]
10000344:	687b      	ldr	r3, [r7, #4]
10000346:	781b      	ldrb	r3, [r3, #0]
10000348:	2b20      	cmp	r3, #32
1000034a:	d0f8      	beq.n	1000033e <ProcessCommand+0xa>
1000034c:	687b      	ldr	r3, [r7, #4]
1000034e:	781b      	ldrb	r3, [r3, #0]
10000350:	2b09      	cmp	r3, #9
10000352:	d0f4      	beq.n	1000033e <ProcessCommand+0xa>

    qprint("RX: %s\r\n", cmd);
10000354:	6879      	ldr	r1, [r7, #4]
10000356:	484e      	ldr	r0, [pc, #312]	@ (10000490 <ProcessCommand+0x15c>)
10000358:	f000 fae6 	bl	10000928 <qprint>

    if (strncmp(cmd, "scan", 4) == 0) {
1000035c:	2204      	movs	r2, #4
1000035e:	494d      	ldr	r1, [pc, #308]	@ (10000494 <ProcessCommand+0x160>)
10000360:	6878      	ldr	r0, [r7, #4]
10000362:	f009 fb98 	bl	10009a96 <strncmp>
10000366:	4603      	mov	r3, r0
10000368:	2b00      	cmp	r3, #0
1000036a:	d105      	bne.n	10000378 <ProcessCommand+0x44>
        qprint(">> Scanning for card...\r\n");
1000036c:	484a      	ldr	r0, [pc, #296]	@ (10000498 <ProcessCommand+0x164>)
1000036e:	f000 fadb 	bl	10000928 <qprint>
        ExecuteScanOnce();
10000372:	f000 f8b9 	bl	100004e8 <ExecuteScanOnce>
        qprint("   help           - Show this help\r\n");

    } else {
        qprint("ERROR: Unknown command '%s'. Type 'help' for commands.\r\n", cmd);
    }
}
10000376:	e087      	b.n	10000488 <ProcessCommand+0x154>
    } else if (strncmp(cmd, "status", 6) == 0) {
10000378:	2206      	movs	r2, #6
1000037a:	4948      	ldr	r1, [pc, #288]	@ (1000049c <ProcessCommand+0x168>)
1000037c:	6878      	ldr	r0, [r7, #4]
1000037e:	f009 fb8a 	bl	10009a96 <strncmp>
10000382:	4603      	mov	r3, r0
10000384:	2b00      	cmp	r3, #0
10000386:	d110      	bne.n	100003aa <ProcessCommand+0x76>
        qprint(">> Status:\r\n");
10000388:	4845      	ldr	r0, [pc, #276]	@ (100004a0 <ProcessCommand+0x16c>)
1000038a:	f000 facd 	bl	10000928 <qprint>
        qprint("   M4 Core: Running\r\n");
1000038e:	4845      	ldr	r0, [pc, #276]	@ (100004a4 <ProcessCommand+0x170>)
10000390:	f000 faca 	bl	10000928 <qprint>
        qprint("   RFID: OK\r\n");
10000394:	4844      	ldr	r0, [pc, #272]	@ (100004a8 <ProcessCommand+0x174>)
10000396:	f000 fac7 	bl	10000928 <qprint>
        qprint("   Uptime: %lu ms\r\n", HAL_GetTick());
1000039a:	f001 fc35 	bl	10001c08 <HAL_GetTick>
1000039e:	4603      	mov	r3, r0
100003a0:	4619      	mov	r1, r3
100003a2:	4842      	ldr	r0, [pc, #264]	@ (100004ac <ProcessCommand+0x178>)
100003a4:	f000 fac0 	bl	10000928 <qprint>
}
100003a8:	e06e      	b.n	10000488 <ProcessCommand+0x154>
    } else if (strncmp(cmd, "read:", 5) == 0) {
100003aa:	2205      	movs	r2, #5
100003ac:	4940      	ldr	r1, [pc, #256]	@ (100004b0 <ProcessCommand+0x17c>)
100003ae:	6878      	ldr	r0, [r7, #4]
100003b0:	f009 fb71 	bl	10009a96 <strncmp>
100003b4:	4603      	mov	r3, r0
100003b6:	2b00      	cmp	r3, #0
100003b8:	d110      	bne.n	100003dc <ProcessCommand+0xa8>
        uint8_t blockNum = atoi(cmd + 5);
100003ba:	687b      	ldr	r3, [r7, #4]
100003bc:	3305      	adds	r3, #5
100003be:	4618      	mov	r0, r3
100003c0:	f009 f8ba 	bl	10009538 <atoi>
100003c4:	4603      	mov	r3, r0
100003c6:	73bb      	strb	r3, [r7, #14]
        qprint(">> Reading block %d...\r\n", blockNum);
100003c8:	7bbb      	ldrb	r3, [r7, #14]
100003ca:	4619      	mov	r1, r3
100003cc:	4839      	ldr	r0, [pc, #228]	@ (100004b4 <ProcessCommand+0x180>)
100003ce:	f000 faab 	bl	10000928 <qprint>
        ExecuteReadBlock(blockNum);
100003d2:	7bbb      	ldrb	r3, [r7, #14]
100003d4:	4618      	mov	r0, r3
100003d6:	f000 f96f 	bl	100006b8 <ExecuteReadBlock>
}
100003da:	e055      	b.n	10000488 <ProcessCommand+0x154>
    } else if (strncmp(cmd, "write:", 6) == 0) {
100003dc:	2206      	movs	r2, #6
100003de:	4936      	ldr	r1, [pc, #216]	@ (100004b8 <ProcessCommand+0x184>)
100003e0:	6878      	ldr	r0, [r7, #4]
100003e2:	f009 fb58 	bl	10009a96 <strncmp>
100003e6:	4603      	mov	r3, r0
100003e8:	2b00      	cmp	r3, #0
100003ea:	d12e      	bne.n	1000044a <ProcessCommand+0x116>
        char* blockStr = cmd + 6;
100003ec:	687b      	ldr	r3, [r7, #4]
100003ee:	3306      	adds	r3, #6
100003f0:	617b      	str	r3, [r7, #20]
        char* dataStr = strchr(blockStr, ':');
100003f2:	213a      	movs	r1, #58	@ 0x3a
100003f4:	6978      	ldr	r0, [r7, #20]
100003f6:	f009 fb41 	bl	10009a7c <strchr>
100003fa:	6138      	str	r0, [r7, #16]
        if (dataStr != NULL) {
100003fc:	693b      	ldr	r3, [r7, #16]
100003fe:	2b00      	cmp	r3, #0
10000400:	d01f      	beq.n	10000442 <ProcessCommand+0x10e>
            *dataStr = '\0';
10000402:	693b      	ldr	r3, [r7, #16]
10000404:	2200      	movs	r2, #0
10000406:	701a      	strb	r2, [r3, #0]
            dataStr++;
10000408:	693b      	ldr	r3, [r7, #16]
1000040a:	3301      	adds	r3, #1
1000040c:	613b      	str	r3, [r7, #16]
            uint8_t blockNum = atoi(blockStr);
1000040e:	6978      	ldr	r0, [r7, #20]
10000410:	f009 f892 	bl	10009538 <atoi>
10000414:	4603      	mov	r3, r0
10000416:	73fb      	strb	r3, [r7, #15]
            memset(cmdWriteData, ' ', 16);
10000418:	2210      	movs	r2, #16
1000041a:	2120      	movs	r1, #32
1000041c:	4827      	ldr	r0, [pc, #156]	@ (100004bc <ProcessCommand+0x188>)
1000041e:	f009 fb25 	bl	10009a6c <memset>
            strncpy((char*)cmdWriteData, dataStr, 16);
10000422:	2210      	movs	r2, #16
10000424:	6939      	ldr	r1, [r7, #16]
10000426:	4825      	ldr	r0, [pc, #148]	@ (100004bc <ProcessCommand+0x188>)
10000428:	f009 fb47 	bl	10009aba <strncpy>
            qprint(">> Writing to block %d...\r\n", blockNum);
1000042c:	7bfb      	ldrb	r3, [r7, #15]
1000042e:	4619      	mov	r1, r3
10000430:	4823      	ldr	r0, [pc, #140]	@ (100004c0 <ProcessCommand+0x18c>)
10000432:	f000 fa79 	bl	10000928 <qprint>
            ExecuteWriteBlock(blockNum, cmdWriteData);
10000436:	7bfb      	ldrb	r3, [r7, #15]
10000438:	4920      	ldr	r1, [pc, #128]	@ (100004bc <ProcessCommand+0x188>)
1000043a:	4618      	mov	r0, r3
1000043c:	f000 f9e6 	bl	1000080c <ExecuteWriteBlock>
}
10000440:	e022      	b.n	10000488 <ProcessCommand+0x154>
            qprint("ERROR: Invalid write format. Use: write:BLOCK:DATA\r\n");
10000442:	4820      	ldr	r0, [pc, #128]	@ (100004c4 <ProcessCommand+0x190>)
10000444:	f000 fa70 	bl	10000928 <qprint>
}
10000448:	e01e      	b.n	10000488 <ProcessCommand+0x154>
    } else if (strncmp(cmd, "help", 4) == 0) {
1000044a:	2204      	movs	r2, #4
1000044c:	491e      	ldr	r1, [pc, #120]	@ (100004c8 <ProcessCommand+0x194>)
1000044e:	6878      	ldr	r0, [r7, #4]
10000450:	f009 fb21 	bl	10009a96 <strncmp>
10000454:	4603      	mov	r3, r0
10000456:	2b00      	cmp	r3, #0
10000458:	d112      	bne.n	10000480 <ProcessCommand+0x14c>
        qprint(">> Available commands:\r\n");
1000045a:	481c      	ldr	r0, [pc, #112]	@ (100004cc <ProcessCommand+0x198>)
1000045c:	f000 fa64 	bl	10000928 <qprint>
        qprint("   scan           - Scan for card once\r\n");
10000460:	481b      	ldr	r0, [pc, #108]	@ (100004d0 <ProcessCommand+0x19c>)
10000462:	f000 fa61 	bl	10000928 <qprint>
        qprint("   status         - Get system status\r\n");
10000466:	481b      	ldr	r0, [pc, #108]	@ (100004d4 <ProcessCommand+0x1a0>)
10000468:	f000 fa5e 	bl	10000928 <qprint>
        qprint("   read:N         - Read block N\r\n");
1000046c:	481a      	ldr	r0, [pc, #104]	@ (100004d8 <ProcessCommand+0x1a4>)
1000046e:	f000 fa5b 	bl	10000928 <qprint>
        qprint("   write:N:DATA   - Write DATA to block N\r\n");
10000472:	481a      	ldr	r0, [pc, #104]	@ (100004dc <ProcessCommand+0x1a8>)
10000474:	f000 fa58 	bl	10000928 <qprint>
        qprint("   help           - Show this help\r\n");
10000478:	4819      	ldr	r0, [pc, #100]	@ (100004e0 <ProcessCommand+0x1ac>)
1000047a:	f000 fa55 	bl	10000928 <qprint>
}
1000047e:	e003      	b.n	10000488 <ProcessCommand+0x154>
        qprint("ERROR: Unknown command '%s'. Type 'help' for commands.\r\n", cmd);
10000480:	6879      	ldr	r1, [r7, #4]
10000482:	4818      	ldr	r0, [pc, #96]	@ (100004e4 <ProcessCommand+0x1b0>)
10000484:	f000 fa50 	bl	10000928 <qprint>
}
10000488:	bf00      	nop
1000048a:	3718      	adds	r7, #24
1000048c:	46bd      	mov	sp, r7
1000048e:	bd80      	pop	{r7, pc}
10000490:	1000ab08 	.word	0x1000ab08
10000494:	1000ab14 	.word	0x1000ab14
10000498:	1000ab1c 	.word	0x1000ab1c
1000049c:	1000ab38 	.word	0x1000ab38
100004a0:	1000ab40 	.word	0x1000ab40
100004a4:	1000ab50 	.word	0x1000ab50
100004a8:	1000ab68 	.word	0x1000ab68
100004ac:	1000ab78 	.word	0x1000ab78
100004b0:	1000ab8c 	.word	0x1000ab8c
100004b4:	1000ab94 	.word	0x1000ab94
100004b8:	1000abb0 	.word	0x1000abb0
100004bc:	1002041c 	.word	0x1002041c
100004c0:	1000abb8 	.word	0x1000abb8
100004c4:	1000abd4 	.word	0x1000abd4
100004c8:	1000ac0c 	.word	0x1000ac0c
100004cc:	1000ac14 	.word	0x1000ac14
100004d0:	1000ac30 	.word	0x1000ac30
100004d4:	1000ac5c 	.word	0x1000ac5c
100004d8:	1000ac84 	.word	0x1000ac84
100004dc:	1000aca8 	.word	0x1000aca8
100004e0:	1000acd4 	.word	0x1000acd4
100004e4:	1000acfc 	.word	0x1000acfc

100004e8 <ExecuteScanOnce>:

/**
 * @brief Execute a single card scan
 */
void ExecuteScanOnce(void)
{
100004e8:	b580      	push	{r7, lr}
100004ea:	b082      	sub	sp, #8
100004ec:	af00      	add	r7, sp, #0
    uint8_t tagType[2];
    MFRC522_Status_t status = MFRC522_Request(PICC_CMD_REQA, tagType);
100004ee:	463b      	mov	r3, r7
100004f0:	4619      	mov	r1, r3
100004f2:	2026      	movs	r0, #38	@ 0x26
100004f4:	f000 fec8 	bl	10001288 <MFRC522_Request>
100004f8:	4603      	mov	r3, r0
100004fa:	713b      	strb	r3, [r7, #4]

    if (status == MFRC522_OK) {
100004fc:	793b      	ldrb	r3, [r7, #4]
100004fe:	2b00      	cmp	r3, #0
10000500:	f040 80b1 	bne.w	10000666 <ExecuteScanOnce+0x17e>
        qprint("\r\n=== Card Detected ===\r\n");
10000504:	485b      	ldr	r0, [pc, #364]	@ (10000674 <ExecuteScanOnce+0x18c>)
10000506:	f000 fa0f 	bl	10000928 <qprint>

        // Anti-collision detection, get card UID
        status = MFRC522_Anticoll(&uid);
1000050a:	485b      	ldr	r0, [pc, #364]	@ (10000678 <ExecuteScanOnce+0x190>)
1000050c:	f000 fee1 	bl	100012d2 <MFRC522_Anticoll>
10000510:	4603      	mov	r3, r0
10000512:	713b      	strb	r3, [r7, #4]

        if (status == MFRC522_OK) {
10000514:	793b      	ldrb	r3, [r7, #4]
10000516:	2b00      	cmp	r3, #0
10000518:	f040 8097 	bne.w	1000064a <ExecuteScanOnce+0x162>
            qprint("Card UID: ");
1000051c:	4857      	ldr	r0, [pc, #348]	@ (1000067c <ExecuteScanOnce+0x194>)
1000051e:	f000 fa03 	bl	10000928 <qprint>
            for (uint8_t i = 0; i < uid.size; i++) {
10000522:	2300      	movs	r3, #0
10000524:	71fb      	strb	r3, [r7, #7]
10000526:	e00a      	b.n	1000053e <ExecuteScanOnce+0x56>
                qprint("%02X ", uid.uidByte[i]);
10000528:	79fb      	ldrb	r3, [r7, #7]
1000052a:	4a53      	ldr	r2, [pc, #332]	@ (10000678 <ExecuteScanOnce+0x190>)
1000052c:	4413      	add	r3, r2
1000052e:	785b      	ldrb	r3, [r3, #1]
10000530:	4619      	mov	r1, r3
10000532:	4853      	ldr	r0, [pc, #332]	@ (10000680 <ExecuteScanOnce+0x198>)
10000534:	f000 f9f8 	bl	10000928 <qprint>
            for (uint8_t i = 0; i < uid.size; i++) {
10000538:	79fb      	ldrb	r3, [r7, #7]
1000053a:	3301      	adds	r3, #1
1000053c:	71fb      	strb	r3, [r7, #7]
1000053e:	4b4e      	ldr	r3, [pc, #312]	@ (10000678 <ExecuteScanOnce+0x190>)
10000540:	781b      	ldrb	r3, [r3, #0]
10000542:	79fa      	ldrb	r2, [r7, #7]
10000544:	429a      	cmp	r2, r3
10000546:	d3ef      	bcc.n	10000528 <ExecuteScanOnce+0x40>
            }
            qprint("\r\n");
10000548:	484e      	ldr	r0, [pc, #312]	@ (10000684 <ExecuteScanOnce+0x19c>)
1000054a:	f000 f9ed 	bl	10000928 <qprint>

            // Select the card
            status = MFRC522_SelectTag(&uid);
1000054e:	484a      	ldr	r0, [pc, #296]	@ (10000678 <ExecuteScanOnce+0x190>)
10000550:	f000 ff0b 	bl	1000136a <MFRC522_SelectTag>
10000554:	4603      	mov	r3, r0
10000556:	713b      	strb	r3, [r7, #4]

            if (status == MFRC522_OK) {
10000558:	793b      	ldrb	r3, [r7, #4]
1000055a:	2b00      	cmp	r3, #0
1000055c:	d175      	bne.n	1000064a <ExecuteScanOnce+0x162>
                PICC_Type_t cardType = MFRC522_GetType(uid.sak);
1000055e:	4b46      	ldr	r3, [pc, #280]	@ (10000678 <ExecuteScanOnce+0x190>)
10000560:	7adb      	ldrb	r3, [r3, #11]
10000562:	4618      	mov	r0, r3
10000564:	f001 f858 	bl	10001618 <MFRC522_GetType>
10000568:	4603      	mov	r3, r0
1000056a:	70fb      	strb	r3, [r7, #3]
                qprint("Card Type: %s\r\n", MFRC522_GetTypeName(cardType));
1000056c:	78fb      	ldrb	r3, [r7, #3]
1000056e:	4618      	mov	r0, r3
10000570:	f001 f8aa 	bl	100016c8 <MFRC522_GetTypeName>
10000574:	4603      	mov	r3, r0
10000576:	4619      	mov	r1, r3
10000578:	4843      	ldr	r0, [pc, #268]	@ (10000688 <ExecuteScanOnce+0x1a0>)
1000057a:	f000 f9d5 	bl	10000928 <qprint>
                qprint("SAK: 0x%02X\r\n", uid.sak);
1000057e:	4b3e      	ldr	r3, [pc, #248]	@ (10000678 <ExecuteScanOnce+0x190>)
10000580:	7adb      	ldrb	r3, [r3, #11]
10000582:	4619      	mov	r1, r3
10000584:	4841      	ldr	r0, [pc, #260]	@ (1000068c <ExecuteScanOnce+0x1a4>)
10000586:	f000 f9cf 	bl	10000928 <qprint>

                // Example: Read block 4 (first data block of sector 1)
                uint8_t blockAddr = 4;
1000058a:	2304      	movs	r3, #4
1000058c:	70bb      	strb	r3, [r7, #2]

                // Authenticate with Key A
                status = MFRC522_Auth(PICC_CMD_MF_AUTH_KEY_A, blockAddr, keyA, &uid);
1000058e:	78b9      	ldrb	r1, [r7, #2]
10000590:	4b39      	ldr	r3, [pc, #228]	@ (10000678 <ExecuteScanOnce+0x190>)
10000592:	4a3f      	ldr	r2, [pc, #252]	@ (10000690 <ExecuteScanOnce+0x1a8>)
10000594:	2060      	movs	r0, #96	@ 0x60
10000596:	f000 ff38 	bl	1000140a <MFRC522_Auth>
1000059a:	4603      	mov	r3, r0
1000059c:	713b      	strb	r3, [r7, #4]

                if (status == MFRC522_OK) {
1000059e:	793b      	ldrb	r3, [r7, #4]
100005a0:	2b00      	cmp	r3, #0
100005a2:	d14f      	bne.n	10000644 <ExecuteScanOnce+0x15c>
                    qprint("Authentication successful!\r\n");
100005a4:	483b      	ldr	r0, [pc, #236]	@ (10000694 <ExecuteScanOnce+0x1ac>)
100005a6:	f000 f9bf 	bl	10000928 <qprint>

                    // Read the block
                    status = MFRC522_Read(blockAddr, readBuffer);
100005aa:	78bb      	ldrb	r3, [r7, #2]
100005ac:	493a      	ldr	r1, [pc, #232]	@ (10000698 <ExecuteScanOnce+0x1b0>)
100005ae:	4618      	mov	r0, r3
100005b0:	f000 ff7e 	bl	100014b0 <MFRC522_Read>
100005b4:	4603      	mov	r3, r0
100005b6:	713b      	strb	r3, [r7, #4]

                    if (status == MFRC522_OK) {
100005b8:	793b      	ldrb	r3, [r7, #4]
100005ba:	2b00      	cmp	r3, #0
100005bc:	d13c      	bne.n	10000638 <ExecuteScanOnce+0x150>
                        qprint("Block %d data: ", blockAddr);
100005be:	78bb      	ldrb	r3, [r7, #2]
100005c0:	4619      	mov	r1, r3
100005c2:	4836      	ldr	r0, [pc, #216]	@ (1000069c <ExecuteScanOnce+0x1b4>)
100005c4:	f000 f9b0 	bl	10000928 <qprint>
                        for (uint8_t i = 0; i < 16; i++) {
100005c8:	2300      	movs	r3, #0
100005ca:	71bb      	strb	r3, [r7, #6]
100005cc:	e009      	b.n	100005e2 <ExecuteScanOnce+0xfa>
                            qprint("%02X ", readBuffer[i]);
100005ce:	79bb      	ldrb	r3, [r7, #6]
100005d0:	4a31      	ldr	r2, [pc, #196]	@ (10000698 <ExecuteScanOnce+0x1b0>)
100005d2:	5cd3      	ldrb	r3, [r2, r3]
100005d4:	4619      	mov	r1, r3
100005d6:	482a      	ldr	r0, [pc, #168]	@ (10000680 <ExecuteScanOnce+0x198>)
100005d8:	f000 f9a6 	bl	10000928 <qprint>
                        for (uint8_t i = 0; i < 16; i++) {
100005dc:	79bb      	ldrb	r3, [r7, #6]
100005de:	3301      	adds	r3, #1
100005e0:	71bb      	strb	r3, [r7, #6]
100005e2:	79bb      	ldrb	r3, [r7, #6]
100005e4:	2b0f      	cmp	r3, #15
100005e6:	d9f2      	bls.n	100005ce <ExecuteScanOnce+0xe6>
                        }
                        qprint("\r\n");
100005e8:	4826      	ldr	r0, [pc, #152]	@ (10000684 <ExecuteScanOnce+0x19c>)
100005ea:	f000 f99d 	bl	10000928 <qprint>

                        // Print as ASCII (if printable)
                        qprint("ASCII: ");
100005ee:	482c      	ldr	r0, [pc, #176]	@ (100006a0 <ExecuteScanOnce+0x1b8>)
100005f0:	f000 f99a 	bl	10000928 <qprint>
                        for (uint8_t i = 0; i < 16; i++) {
100005f4:	2300      	movs	r3, #0
100005f6:	717b      	strb	r3, [r7, #5]
100005f8:	e017      	b.n	1000062a <ExecuteScanOnce+0x142>
                            if (readBuffer[i] >= 0x20 && readBuffer[i] <= 0x7E) {
100005fa:	797b      	ldrb	r3, [r7, #5]
100005fc:	4a26      	ldr	r2, [pc, #152]	@ (10000698 <ExecuteScanOnce+0x1b0>)
100005fe:	5cd3      	ldrb	r3, [r2, r3]
10000600:	2b1f      	cmp	r3, #31
10000602:	d90c      	bls.n	1000061e <ExecuteScanOnce+0x136>
10000604:	797b      	ldrb	r3, [r7, #5]
10000606:	4a24      	ldr	r2, [pc, #144]	@ (10000698 <ExecuteScanOnce+0x1b0>)
10000608:	5cd3      	ldrb	r3, [r2, r3]
1000060a:	2b7e      	cmp	r3, #126	@ 0x7e
1000060c:	d807      	bhi.n	1000061e <ExecuteScanOnce+0x136>
                                qprint("%c", readBuffer[i]);
1000060e:	797b      	ldrb	r3, [r7, #5]
10000610:	4a21      	ldr	r2, [pc, #132]	@ (10000698 <ExecuteScanOnce+0x1b0>)
10000612:	5cd3      	ldrb	r3, [r2, r3]
10000614:	4619      	mov	r1, r3
10000616:	4823      	ldr	r0, [pc, #140]	@ (100006a4 <ExecuteScanOnce+0x1bc>)
10000618:	f000 f986 	bl	10000928 <qprint>
1000061c:	e002      	b.n	10000624 <ExecuteScanOnce+0x13c>
                            } else {
                                qprint(".");
1000061e:	4822      	ldr	r0, [pc, #136]	@ (100006a8 <ExecuteScanOnce+0x1c0>)
10000620:	f000 f982 	bl	10000928 <qprint>
                        for (uint8_t i = 0; i < 16; i++) {
10000624:	797b      	ldrb	r3, [r7, #5]
10000626:	3301      	adds	r3, #1
10000628:	717b      	strb	r3, [r7, #5]
1000062a:	797b      	ldrb	r3, [r7, #5]
1000062c:	2b0f      	cmp	r3, #15
1000062e:	d9e4      	bls.n	100005fa <ExecuteScanOnce+0x112>
                            }
                        }
                        qprint("\r\n");
10000630:	4814      	ldr	r0, [pc, #80]	@ (10000684 <ExecuteScanOnce+0x19c>)
10000632:	f000 f979 	bl	10000928 <qprint>
10000636:	e008      	b.n	1000064a <ExecuteScanOnce+0x162>

                    } else {
                        qprint("Failed to read block %d\r\n", blockAddr);
10000638:	78bb      	ldrb	r3, [r7, #2]
1000063a:	4619      	mov	r1, r3
1000063c:	481b      	ldr	r0, [pc, #108]	@ (100006ac <ExecuteScanOnce+0x1c4>)
1000063e:	f000 f973 	bl	10000928 <qprint>
10000642:	e002      	b.n	1000064a <ExecuteScanOnce+0x162>
                    }

                } else {
                    qprint("Authentication failed!\r\n");
10000644:	481a      	ldr	r0, [pc, #104]	@ (100006b0 <ExecuteScanOnce+0x1c8>)
10000646:	f000 f96f 	bl	10000928 <qprint>
                }
            }
        }

        // CRITICAL: Halt the card and stop crypto
        MFRC522_Halt();
1000064a:	f000 ffca 	bl	100015e2 <MFRC522_Halt>

        // Clear the MFCrypto1On bit to stop encryption
        MFRC522_ClearBitMask(MFRC522_REG_STATUS_2, 0x08);
1000064e:	2108      	movs	r1, #8
10000650:	2008      	movs	r0, #8
10000652:	f000 fce0 	bl	10001016 <MFRC522_ClearBitMask>

        qprint("=== End ===\r\n\r\n");
10000656:	4817      	ldr	r0, [pc, #92]	@ (100006b4 <ExecuteScanOnce+0x1cc>)
10000658:	f000 f966 	bl	10000928 <qprint>

        // Wait a bit to prevent multiple rapid reads of the same card
        HAL_Delay(500);
1000065c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
10000660:	f001 fade 	bl	10001c20 <HAL_Delay>

    } else {
        // No card detected, small delay before next attempt
        HAL_Delay(50);
    }
}
10000664:	e002      	b.n	1000066c <ExecuteScanOnce+0x184>
        HAL_Delay(50);
10000666:	2032      	movs	r0, #50	@ 0x32
10000668:	f001 fada 	bl	10001c20 <HAL_Delay>
}
1000066c:	bf00      	nop
1000066e:	3708      	adds	r7, #8
10000670:	46bd      	mov	sp, r7
10000672:	bd80      	pop	{r7, pc}
10000674:	1000ad38 	.word	0x1000ad38
10000678:	100202f8 	.word	0x100202f8
1000067c:	1000ad54 	.word	0x1000ad54
10000680:	1000ad60 	.word	0x1000ad60
10000684:	1000ad68 	.word	0x1000ad68
10000688:	1000ad6c 	.word	0x1000ad6c
1000068c:	1000ad7c 	.word	0x1000ad7c
10000690:	10020004 	.word	0x10020004
10000694:	1000ad8c 	.word	0x1000ad8c
10000698:	10020304 	.word	0x10020304
1000069c:	1000adac 	.word	0x1000adac
100006a0:	1000adbc 	.word	0x1000adbc
100006a4:	1000adc4 	.word	0x1000adc4
100006a8:	1000adc8 	.word	0x1000adc8
100006ac:	1000adcc 	.word	0x1000adcc
100006b0:	1000ade8 	.word	0x1000ade8
100006b4:	1000ae04 	.word	0x1000ae04

100006b8 <ExecuteReadBlock>:

/**
 * @brief Read a specific block
 */
void ExecuteReadBlock(uint8_t blockAddr)
{
100006b8:	b580      	push	{r7, lr}
100006ba:	b084      	sub	sp, #16
100006bc:	af00      	add	r7, sp, #0
100006be:	4603      	mov	r3, r0
100006c0:	71fb      	strb	r3, [r7, #7]
    uint8_t tagType[2];
    MFRC522_Status_t status = MFRC522_Request(PICC_CMD_REQA, tagType);
100006c2:	f107 0308 	add.w	r3, r7, #8
100006c6:	4619      	mov	r1, r3
100006c8:	2026      	movs	r0, #38	@ 0x26
100006ca:	f000 fddd 	bl	10001288 <MFRC522_Request>
100006ce:	4603      	mov	r3, r0
100006d0:	737b      	strb	r3, [r7, #13]

    if (status != MFRC522_OK) {
100006d2:	7b7b      	ldrb	r3, [r7, #13]
100006d4:	2b00      	cmp	r3, #0
100006d6:	d003      	beq.n	100006e0 <ExecuteReadBlock+0x28>
        qprint("ERROR: No card present\r\n");
100006d8:	483e      	ldr	r0, [pc, #248]	@ (100007d4 <ExecuteReadBlock+0x11c>)
100006da:	f000 f925 	bl	10000928 <qprint>
        return;
100006de:	e076      	b.n	100007ce <ExecuteReadBlock+0x116>
    }

    status = MFRC522_Anticoll(&uid);
100006e0:	483d      	ldr	r0, [pc, #244]	@ (100007d8 <ExecuteReadBlock+0x120>)
100006e2:	f000 fdf6 	bl	100012d2 <MFRC522_Anticoll>
100006e6:	4603      	mov	r3, r0
100006e8:	737b      	strb	r3, [r7, #13]
    if (status != MFRC522_OK) {
100006ea:	7b7b      	ldrb	r3, [r7, #13]
100006ec:	2b00      	cmp	r3, #0
100006ee:	d003      	beq.n	100006f8 <ExecuteReadBlock+0x40>
        qprint("ERROR: Anticollision failed\r\n");
100006f0:	483a      	ldr	r0, [pc, #232]	@ (100007dc <ExecuteReadBlock+0x124>)
100006f2:	f000 f919 	bl	10000928 <qprint>
        return;
100006f6:	e06a      	b.n	100007ce <ExecuteReadBlock+0x116>
    }

    status = MFRC522_SelectTag(&uid);
100006f8:	4837      	ldr	r0, [pc, #220]	@ (100007d8 <ExecuteReadBlock+0x120>)
100006fa:	f000 fe36 	bl	1000136a <MFRC522_SelectTag>
100006fe:	4603      	mov	r3, r0
10000700:	737b      	strb	r3, [r7, #13]
    if (status != MFRC522_OK) {
10000702:	7b7b      	ldrb	r3, [r7, #13]
10000704:	2b00      	cmp	r3, #0
10000706:	d003      	beq.n	10000710 <ExecuteReadBlock+0x58>
        qprint("ERROR: Card select failed\r\n");
10000708:	4835      	ldr	r0, [pc, #212]	@ (100007e0 <ExecuteReadBlock+0x128>)
1000070a:	f000 f90d 	bl	10000928 <qprint>
        return;
1000070e:	e05e      	b.n	100007ce <ExecuteReadBlock+0x116>
    }

    // Authenticate
    status = MFRC522_Auth(PICC_CMD_MF_AUTH_KEY_A, blockAddr, keyA, &uid);
10000710:	79f9      	ldrb	r1, [r7, #7]
10000712:	4b31      	ldr	r3, [pc, #196]	@ (100007d8 <ExecuteReadBlock+0x120>)
10000714:	4a33      	ldr	r2, [pc, #204]	@ (100007e4 <ExecuteReadBlock+0x12c>)
10000716:	2060      	movs	r0, #96	@ 0x60
10000718:	f000 fe77 	bl	1000140a <MFRC522_Auth>
1000071c:	4603      	mov	r3, r0
1000071e:	737b      	strb	r3, [r7, #13]
    if (status != MFRC522_OK) {
10000720:	7b7b      	ldrb	r3, [r7, #13]
10000722:	2b00      	cmp	r3, #0
10000724:	d005      	beq.n	10000732 <ExecuteReadBlock+0x7a>
        qprint("ERROR: Authentication failed\r\n");
10000726:	4830      	ldr	r0, [pc, #192]	@ (100007e8 <ExecuteReadBlock+0x130>)
10000728:	f000 f8fe 	bl	10000928 <qprint>
        MFRC522_Halt();
1000072c:	f000 ff59 	bl	100015e2 <MFRC522_Halt>
        return;
10000730:	e04d      	b.n	100007ce <ExecuteReadBlock+0x116>
    }

    // Read block
    status = MFRC522_Read(blockAddr, readBuffer);
10000732:	79fb      	ldrb	r3, [r7, #7]
10000734:	492d      	ldr	r1, [pc, #180]	@ (100007ec <ExecuteReadBlock+0x134>)
10000736:	4618      	mov	r0, r3
10000738:	f000 feba 	bl	100014b0 <MFRC522_Read>
1000073c:	4603      	mov	r3, r0
1000073e:	737b      	strb	r3, [r7, #13]
    if (status == MFRC522_OK) {
10000740:	7b7b      	ldrb	r3, [r7, #13]
10000742:	2b00      	cmp	r3, #0
10000744:	d13e      	bne.n	100007c4 <ExecuteReadBlock+0x10c>
        qprint("Block %d HEX: ", blockAddr);
10000746:	79fb      	ldrb	r3, [r7, #7]
10000748:	4619      	mov	r1, r3
1000074a:	4829      	ldr	r0, [pc, #164]	@ (100007f0 <ExecuteReadBlock+0x138>)
1000074c:	f000 f8ec 	bl	10000928 <qprint>
        for (uint8_t i = 0; i < 16; i++) {
10000750:	2300      	movs	r3, #0
10000752:	73fb      	strb	r3, [r7, #15]
10000754:	e009      	b.n	1000076a <ExecuteReadBlock+0xb2>
            qprint("%02X ", readBuffer[i]);
10000756:	7bfb      	ldrb	r3, [r7, #15]
10000758:	4a24      	ldr	r2, [pc, #144]	@ (100007ec <ExecuteReadBlock+0x134>)
1000075a:	5cd3      	ldrb	r3, [r2, r3]
1000075c:	4619      	mov	r1, r3
1000075e:	4825      	ldr	r0, [pc, #148]	@ (100007f4 <ExecuteReadBlock+0x13c>)
10000760:	f000 f8e2 	bl	10000928 <qprint>
        for (uint8_t i = 0; i < 16; i++) {
10000764:	7bfb      	ldrb	r3, [r7, #15]
10000766:	3301      	adds	r3, #1
10000768:	73fb      	strb	r3, [r7, #15]
1000076a:	7bfb      	ldrb	r3, [r7, #15]
1000076c:	2b0f      	cmp	r3, #15
1000076e:	d9f2      	bls.n	10000756 <ExecuteReadBlock+0x9e>
        }
        qprint("\r\n");
10000770:	4821      	ldr	r0, [pc, #132]	@ (100007f8 <ExecuteReadBlock+0x140>)
10000772:	f000 f8d9 	bl	10000928 <qprint>

        qprint("Block %d ASCII: ", blockAddr);
10000776:	79fb      	ldrb	r3, [r7, #7]
10000778:	4619      	mov	r1, r3
1000077a:	4820      	ldr	r0, [pc, #128]	@ (100007fc <ExecuteReadBlock+0x144>)
1000077c:	f000 f8d4 	bl	10000928 <qprint>
        for (uint8_t i = 0; i < 16; i++) {
10000780:	2300      	movs	r3, #0
10000782:	73bb      	strb	r3, [r7, #14]
10000784:	e017      	b.n	100007b6 <ExecuteReadBlock+0xfe>
            if (readBuffer[i] >= 0x20 && readBuffer[i] <= 0x7E) {
10000786:	7bbb      	ldrb	r3, [r7, #14]
10000788:	4a18      	ldr	r2, [pc, #96]	@ (100007ec <ExecuteReadBlock+0x134>)
1000078a:	5cd3      	ldrb	r3, [r2, r3]
1000078c:	2b1f      	cmp	r3, #31
1000078e:	d90c      	bls.n	100007aa <ExecuteReadBlock+0xf2>
10000790:	7bbb      	ldrb	r3, [r7, #14]
10000792:	4a16      	ldr	r2, [pc, #88]	@ (100007ec <ExecuteReadBlock+0x134>)
10000794:	5cd3      	ldrb	r3, [r2, r3]
10000796:	2b7e      	cmp	r3, #126	@ 0x7e
10000798:	d807      	bhi.n	100007aa <ExecuteReadBlock+0xf2>
                qprint("%c", readBuffer[i]);
1000079a:	7bbb      	ldrb	r3, [r7, #14]
1000079c:	4a13      	ldr	r2, [pc, #76]	@ (100007ec <ExecuteReadBlock+0x134>)
1000079e:	5cd3      	ldrb	r3, [r2, r3]
100007a0:	4619      	mov	r1, r3
100007a2:	4817      	ldr	r0, [pc, #92]	@ (10000800 <ExecuteReadBlock+0x148>)
100007a4:	f000 f8c0 	bl	10000928 <qprint>
100007a8:	e002      	b.n	100007b0 <ExecuteReadBlock+0xf8>
            } else {
                qprint(".");
100007aa:	4816      	ldr	r0, [pc, #88]	@ (10000804 <ExecuteReadBlock+0x14c>)
100007ac:	f000 f8bc 	bl	10000928 <qprint>
        for (uint8_t i = 0; i < 16; i++) {
100007b0:	7bbb      	ldrb	r3, [r7, #14]
100007b2:	3301      	adds	r3, #1
100007b4:	73bb      	strb	r3, [r7, #14]
100007b6:	7bbb      	ldrb	r3, [r7, #14]
100007b8:	2b0f      	cmp	r3, #15
100007ba:	d9e4      	bls.n	10000786 <ExecuteReadBlock+0xce>
            }
        }
        qprint("\r\n");
100007bc:	480e      	ldr	r0, [pc, #56]	@ (100007f8 <ExecuteReadBlock+0x140>)
100007be:	f000 f8b3 	bl	10000928 <qprint>
100007c2:	e002      	b.n	100007ca <ExecuteReadBlock+0x112>
    } else {
        qprint("ERROR: Read failed\r\n");
100007c4:	4810      	ldr	r0, [pc, #64]	@ (10000808 <ExecuteReadBlock+0x150>)
100007c6:	f000 f8af 	bl	10000928 <qprint>
    }

    MFRC522_Halt();
100007ca:	f000 ff0a 	bl	100015e2 <MFRC522_Halt>
}
100007ce:	3710      	adds	r7, #16
100007d0:	46bd      	mov	sp, r7
100007d2:	bd80      	pop	{r7, pc}
100007d4:	1000ae14 	.word	0x1000ae14
100007d8:	100202f8 	.word	0x100202f8
100007dc:	1000ae30 	.word	0x1000ae30
100007e0:	1000ae50 	.word	0x1000ae50
100007e4:	10020004 	.word	0x10020004
100007e8:	1000ae6c 	.word	0x1000ae6c
100007ec:	10020304 	.word	0x10020304
100007f0:	1000ae8c 	.word	0x1000ae8c
100007f4:	1000ad60 	.word	0x1000ad60
100007f8:	1000ad68 	.word	0x1000ad68
100007fc:	1000ae9c 	.word	0x1000ae9c
10000800:	1000adc4 	.word	0x1000adc4
10000804:	1000adc8 	.word	0x1000adc8
10000808:	1000aeb0 	.word	0x1000aeb0

1000080c <ExecuteWriteBlock>:

/**
 * @brief Write data to a specific block
 */
void ExecuteWriteBlock(uint8_t blockAddr, uint8_t* data)
{
1000080c:	b580      	push	{r7, lr}
1000080e:	b084      	sub	sp, #16
10000810:	af00      	add	r7, sp, #0
10000812:	4603      	mov	r3, r0
10000814:	6039      	str	r1, [r7, #0]
10000816:	71fb      	strb	r3, [r7, #7]
    uint8_t tagType[2];
    MFRC522_Status_t status = MFRC522_Request(PICC_CMD_REQA, tagType);
10000818:	f107 030c 	add.w	r3, r7, #12
1000081c:	4619      	mov	r1, r3
1000081e:	2026      	movs	r0, #38	@ 0x26
10000820:	f000 fd32 	bl	10001288 <MFRC522_Request>
10000824:	4603      	mov	r3, r0
10000826:	73bb      	strb	r3, [r7, #14]

    if (status != MFRC522_OK) {
10000828:	7bbb      	ldrb	r3, [r7, #14]
1000082a:	2b00      	cmp	r3, #0
1000082c:	d003      	beq.n	10000836 <ExecuteWriteBlock+0x2a>
        qprint("ERROR: No card present\r\n");
1000082e:	4832      	ldr	r0, [pc, #200]	@ (100008f8 <ExecuteWriteBlock+0xec>)
10000830:	f000 f87a 	bl	10000928 <qprint>
        return;
10000834:	e05d      	b.n	100008f2 <ExecuteWriteBlock+0xe6>
    }

    status = MFRC522_Anticoll(&uid);
10000836:	4831      	ldr	r0, [pc, #196]	@ (100008fc <ExecuteWriteBlock+0xf0>)
10000838:	f000 fd4b 	bl	100012d2 <MFRC522_Anticoll>
1000083c:	4603      	mov	r3, r0
1000083e:	73bb      	strb	r3, [r7, #14]
    if (status != MFRC522_OK) {
10000840:	7bbb      	ldrb	r3, [r7, #14]
10000842:	2b00      	cmp	r3, #0
10000844:	d003      	beq.n	1000084e <ExecuteWriteBlock+0x42>
        qprint("ERROR: Anticollision failed\r\n");
10000846:	482e      	ldr	r0, [pc, #184]	@ (10000900 <ExecuteWriteBlock+0xf4>)
10000848:	f000 f86e 	bl	10000928 <qprint>
        return;
1000084c:	e051      	b.n	100008f2 <ExecuteWriteBlock+0xe6>
    }

    status = MFRC522_SelectTag(&uid);
1000084e:	482b      	ldr	r0, [pc, #172]	@ (100008fc <ExecuteWriteBlock+0xf0>)
10000850:	f000 fd8b 	bl	1000136a <MFRC522_SelectTag>
10000854:	4603      	mov	r3, r0
10000856:	73bb      	strb	r3, [r7, #14]
    if (status != MFRC522_OK) {
10000858:	7bbb      	ldrb	r3, [r7, #14]
1000085a:	2b00      	cmp	r3, #0
1000085c:	d003      	beq.n	10000866 <ExecuteWriteBlock+0x5a>
        qprint("ERROR: Card select failed\r\n");
1000085e:	4829      	ldr	r0, [pc, #164]	@ (10000904 <ExecuteWriteBlock+0xf8>)
10000860:	f000 f862 	bl	10000928 <qprint>
        return;
10000864:	e045      	b.n	100008f2 <ExecuteWriteBlock+0xe6>
    }

    // Authenticate
    status = MFRC522_Auth(PICC_CMD_MF_AUTH_KEY_A, blockAddr, keyA, &uid);
10000866:	79f9      	ldrb	r1, [r7, #7]
10000868:	4b24      	ldr	r3, [pc, #144]	@ (100008fc <ExecuteWriteBlock+0xf0>)
1000086a:	4a27      	ldr	r2, [pc, #156]	@ (10000908 <ExecuteWriteBlock+0xfc>)
1000086c:	2060      	movs	r0, #96	@ 0x60
1000086e:	f000 fdcc 	bl	1000140a <MFRC522_Auth>
10000872:	4603      	mov	r3, r0
10000874:	73bb      	strb	r3, [r7, #14]
    if (status != MFRC522_OK) {
10000876:	7bbb      	ldrb	r3, [r7, #14]
10000878:	2b00      	cmp	r3, #0
1000087a:	d005      	beq.n	10000888 <ExecuteWriteBlock+0x7c>
        qprint("ERROR: Authentication failed\r\n");
1000087c:	4823      	ldr	r0, [pc, #140]	@ (1000090c <ExecuteWriteBlock+0x100>)
1000087e:	f000 f853 	bl	10000928 <qprint>
        MFRC522_Halt();
10000882:	f000 feae 	bl	100015e2 <MFRC522_Halt>
        return;
10000886:	e034      	b.n	100008f2 <ExecuteWriteBlock+0xe6>
    }

    // Write block
    status = MFRC522_Write(blockAddr, data);
10000888:	79fb      	ldrb	r3, [r7, #7]
1000088a:	6839      	ldr	r1, [r7, #0]
1000088c:	4618      	mov	r0, r3
1000088e:	f000 fe3b 	bl	10001508 <MFRC522_Write>
10000892:	4603      	mov	r3, r0
10000894:	73bb      	strb	r3, [r7, #14]
    if (status == MFRC522_OK) {
10000896:	7bbb      	ldrb	r3, [r7, #14]
10000898:	2b00      	cmp	r3, #0
1000089a:	d125      	bne.n	100008e8 <ExecuteWriteBlock+0xdc>
        qprint("SUCCESS: Block %d written\r\n", blockAddr);
1000089c:	79fb      	ldrb	r3, [r7, #7]
1000089e:	4619      	mov	r1, r3
100008a0:	481b      	ldr	r0, [pc, #108]	@ (10000910 <ExecuteWriteBlock+0x104>)
100008a2:	f000 f841 	bl	10000928 <qprint>

        // Verify by reading back
        status = MFRC522_Read(blockAddr, readBuffer);
100008a6:	79fb      	ldrb	r3, [r7, #7]
100008a8:	491a      	ldr	r1, [pc, #104]	@ (10000914 <ExecuteWriteBlock+0x108>)
100008aa:	4618      	mov	r0, r3
100008ac:	f000 fe00 	bl	100014b0 <MFRC522_Read>
100008b0:	4603      	mov	r3, r0
100008b2:	73bb      	strb	r3, [r7, #14]
        if (status == MFRC522_OK) {
100008b4:	7bbb      	ldrb	r3, [r7, #14]
100008b6:	2b00      	cmp	r3, #0
100008b8:	d119      	bne.n	100008ee <ExecuteWriteBlock+0xe2>
            qprint("Verify: ");
100008ba:	4817      	ldr	r0, [pc, #92]	@ (10000918 <ExecuteWriteBlock+0x10c>)
100008bc:	f000 f834 	bl	10000928 <qprint>
            for (uint8_t i = 0; i < 16; i++) {
100008c0:	2300      	movs	r3, #0
100008c2:	73fb      	strb	r3, [r7, #15]
100008c4:	e009      	b.n	100008da <ExecuteWriteBlock+0xce>
                qprint("%02X ", readBuffer[i]);
100008c6:	7bfb      	ldrb	r3, [r7, #15]
100008c8:	4a12      	ldr	r2, [pc, #72]	@ (10000914 <ExecuteWriteBlock+0x108>)
100008ca:	5cd3      	ldrb	r3, [r2, r3]
100008cc:	4619      	mov	r1, r3
100008ce:	4813      	ldr	r0, [pc, #76]	@ (1000091c <ExecuteWriteBlock+0x110>)
100008d0:	f000 f82a 	bl	10000928 <qprint>
            for (uint8_t i = 0; i < 16; i++) {
100008d4:	7bfb      	ldrb	r3, [r7, #15]
100008d6:	3301      	adds	r3, #1
100008d8:	73fb      	strb	r3, [r7, #15]
100008da:	7bfb      	ldrb	r3, [r7, #15]
100008dc:	2b0f      	cmp	r3, #15
100008de:	d9f2      	bls.n	100008c6 <ExecuteWriteBlock+0xba>
            }
            qprint("\r\n");
100008e0:	480f      	ldr	r0, [pc, #60]	@ (10000920 <ExecuteWriteBlock+0x114>)
100008e2:	f000 f821 	bl	10000928 <qprint>
100008e6:	e002      	b.n	100008ee <ExecuteWriteBlock+0xe2>
        }
    } else {
        qprint("ERROR: Write failed\r\n");
100008e8:	480e      	ldr	r0, [pc, #56]	@ (10000924 <ExecuteWriteBlock+0x118>)
100008ea:	f000 f81d 	bl	10000928 <qprint>
    }

    MFRC522_Halt();
100008ee:	f000 fe78 	bl	100015e2 <MFRC522_Halt>
}
100008f2:	3710      	adds	r7, #16
100008f4:	46bd      	mov	sp, r7
100008f6:	bd80      	pop	{r7, pc}
100008f8:	1000ae14 	.word	0x1000ae14
100008fc:	100202f8 	.word	0x100202f8
10000900:	1000ae30 	.word	0x1000ae30
10000904:	1000ae50 	.word	0x1000ae50
10000908:	10020004 	.word	0x10020004
1000090c:	1000ae6c 	.word	0x1000ae6c
10000910:	1000aec8 	.word	0x1000aec8
10000914:	10020304 	.word	0x10020304
10000918:	1000aee4 	.word	0x1000aee4
1000091c:	1000ad60 	.word	0x1000ad60
10000920:	1000ad68 	.word	0x1000ad68
10000924:	1000aef0 	.word	0x1000aef0

10000928 <qprint>:

/**
 * @brief Print to A7 via Virtual UART
 */
void qprint(const char* format, ...) {
10000928:	b40f      	push	{r0, r1, r2, r3}
1000092a:	b580      	push	{r7, lr}
1000092c:	b0c2      	sub	sp, #264	@ 0x108
1000092e:	af00      	add	r7, sp, #0
    OPENAMP_check_for_message();
10000930:	f008 fdc4 	bl	100094bc <OPENAMP_check_for_message>
    char buffer[256];
    va_list args;
    va_start(args, format);
10000934:	f507 728a 	add.w	r2, r7, #276	@ 0x114
10000938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
1000093c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
10000940:	601a      	str	r2, [r3, #0]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
10000942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
10000946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
1000094a:	1d38      	adds	r0, r7, #4
1000094c:	681b      	ldr	r3, [r3, #0]
1000094e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
10000952:	f44f 7180 	mov.w	r1, #256	@ 0x100
10000956:	f009 f87b 	bl	10009a50 <vsniprintf>
1000095a:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);

    if (len > 0) {
1000095e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
10000962:	2b00      	cmp	r3, #0
10000964:	dd07      	ble.n	10000976 <qprint+0x4e>
        VIRT_UART_Transmit(&huart0, (uint8_t*)buffer, len);
10000966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
1000096a:	b29a      	uxth	r2, r3
1000096c:	1d3b      	adds	r3, r7, #4
1000096e:	4619      	mov	r1, r3
10000970:	4805      	ldr	r0, [pc, #20]	@ (10000988 <qprint+0x60>)
10000972:	f008 f883 	bl	10008a7c <VIRT_UART_Transmit>
    }
}
10000976:	bf00      	nop
10000978:	f507 7784 	add.w	r7, r7, #264	@ 0x108
1000097c:	46bd      	mov	sp, r7
1000097e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
10000982:	b004      	add	sp, #16
10000984:	4770      	bx	lr
10000986:	bf00      	nop
10000988:	10020294 	.word	0x10020294

1000098c <SystemClock_Config>:

/* USER CODE END 4 */

/* System configuration functions remain the same */
void SystemClock_Config(void)
{
1000098c:	b580      	push	{r7, lr}
1000098e:	b0d2      	sub	sp, #328	@ 0x148
10000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000992:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000996:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000099a:	4618      	mov	r0, r3
1000099c:	f44f 738a 	mov.w	r3, #276	@ 0x114
100009a0:	461a      	mov	r2, r3
100009a2:	2100      	movs	r1, #0
100009a4:	f009 f862 	bl	10009a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100009a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100009ac:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100009b0:	4618      	mov	r0, r3
100009b2:	2330      	movs	r3, #48	@ 0x30
100009b4:	461a      	mov	r2, r3
100009b6:	2100      	movs	r1, #0
100009b8:	f009 f858 	bl	10009a6c <memset>

  HAL_PWR_EnableBkUpAccess();
100009bc:	f001 fe40 	bl	10002640 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
100009c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100009c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100009c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
100009cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100009d0:	f043 0320 	orr.w	r3, r3, #32
100009d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
100009d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100009dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100009e0:	2217      	movs	r2, #23
100009e2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
100009e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100009e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100009ec:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
100009f0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
100009f2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100009f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100009fa:	2201      	movs	r2, #1
100009fc:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100009fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a06:	2201      	movs	r2, #1
10000a08:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000a0a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a12:	2200      	movs	r2, #0
10000a14:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
10000a16:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a1e:	2210      	movs	r2, #16
10000a20:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000a22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a2a:	2200      	movs	r2, #0
10000a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000a2e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a36:	2202      	movs	r2, #2
10000a38:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000a3a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a3e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a42:	2201      	movs	r2, #1
10000a44:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000a46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a4e:	2203      	movs	r2, #3
10000a50:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000a52:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a56:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a5a:	2242      	movs	r2, #66	@ 0x42
10000a5c:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
10000a5e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a66:	2202      	movs	r2, #2
10000a68:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000a6a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a72:	2201      	movs	r2, #1
10000a74:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000a76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a7e:	2201      	movs	r2, #1
10000a80:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000a82:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a8a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
10000a8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000a92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000a96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000a9a:	2201      	movs	r2, #1
10000a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000aa0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000aa4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000aa8:	2202      	movs	r2, #2
10000aaa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
10000aae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000ab2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000ab6:	2201      	movs	r2, #1
10000ab8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000abc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000ac0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000ac4:	2202      	movs	r2, #2
10000ac6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000aca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000ace:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000ad2:	2222      	movs	r2, #34	@ 0x22
10000ad4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000ad8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000adc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000ae0:	2202      	movs	r2, #2
10000ae2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10000ae6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000aea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000aee:	2211      	movs	r2, #17
10000af0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000af4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000af8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000afc:	2225      	movs	r2, #37	@ 0x25
10000afe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000b02:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
10000b0e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
10000b12:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b16:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b1a:	f641 2204 	movw	r2, #6660	@ 0x1a04
10000b1e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000b22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b2a:	2201      	movs	r2, #1
10000b2c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000b30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b38:	2202      	movs	r2, #2
10000b3a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
10000b3e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b46:	2201      	movs	r2, #1
10000b48:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000b4c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b50:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b54:	2204      	movs	r2, #4
10000b56:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000b5a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b62:	2263      	movs	r2, #99	@ 0x63
10000b64:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000b68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b6c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b70:	2206      	movs	r2, #6
10000b72:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000b76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b7a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b7e:	2208      	movs	r2, #8
10000b80:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000b84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b88:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b8c:	2208      	movs	r2, #8
10000b8e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
10000b92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000b96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000b9a:	2200      	movs	r2, #0
10000b9c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10000ba0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000ba4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000ba8:	2200      	movs	r2, #0
10000baa:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
10000bae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000bb2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000bb6:	2200      	movs	r2, #0
10000bb8:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000bbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
10000bc0:	4618      	mov	r0, r3
10000bc2:	f001 fd4d 	bl	10002660 <HAL_RCC_OscConfig>
10000bc6:	4603      	mov	r3, r0
10000bc8:	2b00      	cmp	r3, #0
10000bca:	d001      	beq.n	10000bd0 <SystemClock_Config+0x244>
  {
    Error_Handler();
10000bcc:	f000 f93a 	bl	10000e44 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000bd0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000bd4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000bd8:	22fe      	movs	r2, #254	@ 0xfe
10000bda:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000bdc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000be0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000be4:	2202      	movs	r2, #2
10000be6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000be8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000bec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000bf0:	2200      	movs	r2, #0
10000bf2:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000bf4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000bf8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000bfc:	2203      	movs	r2, #3
10000bfe:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000c00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000c04:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000c08:	2200      	movs	r2, #0
10000c0a:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000c0c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000c10:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000c14:	2201      	movs	r2, #1
10000c16:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000c18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000c1c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000c20:	2202      	movs	r2, #2
10000c22:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000c24:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000c28:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000c2c:	2201      	movs	r2, #1
10000c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000c30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000c34:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000c38:	2201      	movs	r2, #1
10000c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000c3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000c40:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000c44:	2201      	movs	r2, #1
10000c46:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000c48:	1d3b      	adds	r3, r7, #4
10000c4a:	4618      	mov	r0, r3
10000c4c:	f002 faa6 	bl	1000319c <HAL_RCC_ClockConfig>
10000c50:	4603      	mov	r3, r0
10000c52:	2b00      	cmp	r3, #0
10000c54:	d001      	beq.n	10000c5a <SystemClock_Config+0x2ce>
  {
    Error_Handler();
10000c56:	f000 f8f5 	bl	10000e44 <Error_Handler>
  }

  __HAL_RCC_RTC_HSEDIV(24);
10000c5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10000c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
10000c64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000c68:	f043 0317 	orr.w	r3, r3, #23
10000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
}
10000c6e:	bf00      	nop
10000c70:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
10000c74:	46bd      	mov	sp, r7
10000c76:	bd80      	pop	{r7, pc}

10000c78 <PeriphCommonClock_Config>:

void PeriphCommonClock_Config(void)
{
10000c78:	b580      	push	{r7, lr}
10000c7a:	b0d6      	sub	sp, #344	@ 0x158
10000c7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000c7e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
10000c82:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
10000c86:	4618      	mov	r0, r3
10000c88:	f44f 73ac 	mov.w	r3, #344	@ 0x158
10000c8c:	461a      	mov	r2, r3
10000c8e:	2100      	movs	r1, #0
10000c90:	f008 feec 	bl	10009a6c <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
10000c94:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
10000c98:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
10000c9c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
10000ca0:	f04f 0300 	mov.w	r3, #0
10000ca4:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
10000ca8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
10000cac:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
10000cb0:	2202      	movs	r2, #2
10000cb2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10000cb6:	463b      	mov	r3, r7
10000cb8:	4618      	mov	r0, r3
10000cba:	f003 faed 	bl	10004298 <HAL_RCCEx_PeriphCLKConfig>
10000cbe:	4603      	mov	r3, r0
10000cc0:	2b00      	cmp	r3, #0
10000cc2:	d001      	beq.n	10000cc8 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
10000cc4:	f000 f8be 	bl	10000e44 <Error_Handler>
  }
}
10000cc8:	bf00      	nop
10000cca:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
10000cce:	46bd      	mov	sp, r7
10000cd0:	bd80      	pop	{r7, pc}
	...

10000cd4 <MX_IPCC_Init>:

static void MX_IPCC_Init(void)
{
10000cd4:	b580      	push	{r7, lr}
10000cd6:	af00      	add	r7, sp, #0
  hipcc.Instance = IPCC;
10000cd8:	4b06      	ldr	r3, [pc, #24]	@ (10000cf4 <MX_IPCC_Init+0x20>)
10000cda:	4a07      	ldr	r2, [pc, #28]	@ (10000cf8 <MX_IPCC_Init+0x24>)
10000cdc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
10000cde:	4805      	ldr	r0, [pc, #20]	@ (10000cf4 <MX_IPCC_Init+0x20>)
10000ce0:	f001 fa98 	bl	10002214 <HAL_IPCC_Init>
10000ce4:	4603      	mov	r3, r0
10000ce6:	2b00      	cmp	r3, #0
10000ce8:	d001      	beq.n	10000cee <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
10000cea:	f000 f8ab 	bl	10000e44 <Error_Handler>
  }
}
10000cee:	bf00      	nop
10000cf0:	bd80      	pop	{r7, pc}
10000cf2:	bf00      	nop
10000cf4:	100201d0 	.word	0x100201d0
10000cf8:	4c001000 	.word	0x4c001000

10000cfc <MX_SPI5_Init>:

static void MX_SPI5_Init(void)
{
10000cfc:	b580      	push	{r7, lr}
10000cfe:	af00      	add	r7, sp, #0
  hspi5.Instance = SPI5;
10000d00:	4b27      	ldr	r3, [pc, #156]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d02:	4a28      	ldr	r2, [pc, #160]	@ (10000da4 <MX_SPI5_Init+0xa8>)
10000d04:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
10000d06:	4b26      	ldr	r3, [pc, #152]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d08:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
10000d0c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
10000d0e:	4b24      	ldr	r3, [pc, #144]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d10:	2200      	movs	r2, #0
10000d12:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
10000d14:	4b22      	ldr	r3, [pc, #136]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d16:	2207      	movs	r2, #7
10000d18:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
10000d1a:	4b21      	ldr	r3, [pc, #132]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d1c:	2200      	movs	r2, #0
10000d1e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
10000d20:	4b1f      	ldr	r3, [pc, #124]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d22:	2200      	movs	r2, #0
10000d24:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
10000d26:	4b1e      	ldr	r3, [pc, #120]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
10000d2c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
10000d2e:	4b1c      	ldr	r3, [pc, #112]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d30:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
10000d34:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
10000d36:	4b1a      	ldr	r3, [pc, #104]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d38:	2200      	movs	r2, #0
10000d3a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
10000d3c:	4b18      	ldr	r3, [pc, #96]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d3e:	2200      	movs	r2, #0
10000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10000d42:	4b17      	ldr	r3, [pc, #92]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d44:	2200      	movs	r2, #0
10000d46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
10000d48:	4b15      	ldr	r3, [pc, #84]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d4a:	2200      	movs	r2, #0
10000d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
10000d4e:	4b14      	ldr	r3, [pc, #80]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
10000d54:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
10000d56:	4b12      	ldr	r3, [pc, #72]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d58:	2200      	movs	r2, #0
10000d5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
10000d5c:	4b10      	ldr	r3, [pc, #64]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d5e:	2200      	movs	r2, #0
10000d60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
10000d62:	4b0f      	ldr	r3, [pc, #60]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d64:	2200      	movs	r2, #0
10000d66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
10000d68:	4b0d      	ldr	r3, [pc, #52]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d6a:	2200      	movs	r2, #0
10000d6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
10000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d70:	2200      	movs	r2, #0
10000d72:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
10000d74:	4b0a      	ldr	r3, [pc, #40]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d76:	2200      	movs	r2, #0
10000d78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
10000d7a:	4b09      	ldr	r3, [pc, #36]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d7c:	2200      	movs	r2, #0
10000d7e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
10000d80:	4b07      	ldr	r3, [pc, #28]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d82:	2200      	movs	r2, #0
10000d84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
10000d86:	4b06      	ldr	r3, [pc, #24]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d88:	2200      	movs	r2, #0
10000d8a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
10000d8c:	4804      	ldr	r0, [pc, #16]	@ (10000da0 <MX_SPI5_Init+0xa4>)
10000d8e:	f005 f917 	bl	10005fc0 <HAL_SPI_Init>
10000d92:	4603      	mov	r3, r0
10000d94:	2b00      	cmp	r3, #0
10000d96:	d001      	beq.n	10000d9c <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
10000d98:	f000 f854 	bl	10000e44 <Error_Handler>
  }
}
10000d9c:	bf00      	nop
10000d9e:	bd80      	pop	{r7, pc}
10000da0:	1002020c 	.word	0x1002020c
10000da4:	44009000 	.word	0x44009000

10000da8 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
10000da8:	b480      	push	{r7}
10000daa:	af00      	add	r7, sp, #0
  __HAL_RCC_DMAMUX_CLK_ENABLE();
10000dac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000db0:	2204      	movs	r2, #4
10000db2:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98
  __HAL_RCC_DMA1_CLK_ENABLE();
10000db6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000dba:	2201      	movs	r2, #1
10000dbc:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98
}
10000dc0:	bf00      	nop
10000dc2:	46bd      	mov	sp, r7
10000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
10000dc8:	4770      	bx	lr

10000dca <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
10000dca:	b580      	push	{r7, lr}
10000dcc:	b086      	sub	sp, #24
10000dce:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000dd0:	1d3b      	adds	r3, r7, #4
10000dd2:	2200      	movs	r2, #0
10000dd4:	601a      	str	r2, [r3, #0]
10000dd6:	605a      	str	r2, [r3, #4]
10000dd8:	609a      	str	r2, [r3, #8]
10000dda:	60da      	str	r2, [r3, #12]
10000ddc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOD_CLK_ENABLE();
10000dde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000de2:	2208      	movs	r2, #8
10000de4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOC_CLK_ENABLE();
10000de8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000dec:	2204      	movs	r2, #4
10000dee:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
10000df2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000df6:	2280      	movs	r2, #128	@ 0x80
10000df8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
10000dfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e00:	2220      	movs	r2, #32
10000e02:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
10000e06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000e0a:	2201      	movs	r2, #1
10000e0c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

  HAL_GPIO_WritePin(GPIOD, RFID_RST_Pin|RFID_CS_Pin, GPIO_PIN_SET);
10000e10:	2201      	movs	r2, #1
10000e12:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
10000e16:	f04f 2050 	mov.w	r0, #1342197760	@ 0x50005000
10000e1a:	f001 f9e1 	bl	100021e0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = RFID_RST_Pin|RFID_CS_Pin;
10000e1e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
10000e22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10000e24:	2301      	movs	r3, #1
10000e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10000e28:	2300      	movs	r3, #0
10000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10000e2c:	2300      	movs	r3, #0
10000e2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
10000e30:	1d3b      	adds	r3, r7, #4
10000e32:	4619      	mov	r1, r3
10000e34:	f04f 2050 	mov.w	r0, #1342197760	@ 0x50005000
10000e38:	f001 f828 	bl	10001e8c <HAL_GPIO_Init>
}
10000e3c:	bf00      	nop
10000e3e:	3718      	adds	r7, #24
10000e40:	46bd      	mov	sp, r7
10000e42:	bd80      	pop	{r7, pc}

10000e44 <Error_Handler>:

void Error_Handler(void)
{
10000e44:	b480      	push	{r7}
10000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000e48:	b672      	cpsid	i
}
10000e4a:	bf00      	nop
  __disable_irq();
  while (1)
10000e4c:	bf00      	nop
10000e4e:	e7fd      	b.n	10000e4c <Error_Handler+0x8>

10000e50 <MFRC522_Init>:
#define MFRC522_CS_HIGH()  HAL_GPIO_WritePin(mfrc522_config.CS_GPIO_Port, mfrc522_config.CS_Pin, GPIO_PIN_SET)
#define MFRC522_RST_LOW()  HAL_GPIO_WritePin(mfrc522_config.RST_GPIO_Port, mfrc522_config.RST_Pin, GPIO_PIN_RESET)
#define MFRC522_RST_HIGH() HAL_GPIO_WritePin(mfrc522_config.RST_GPIO_Port, mfrc522_config.RST_Pin, GPIO_PIN_SET)

/* Initialize MFRC522 */
void MFRC522_Init(MFRC522_Config_t *config) {
10000e50:	b580      	push	{r7, lr}
10000e52:	b082      	sub	sp, #8
10000e54:	af00      	add	r7, sp, #0
10000e56:	6078      	str	r0, [r7, #4]
    memcpy(&mfrc522_config, config, sizeof(MFRC522_Config_t));
10000e58:	2214      	movs	r2, #20
10000e5a:	6879      	ldr	r1, [r7, #4]
10000e5c:	481a      	ldr	r0, [pc, #104]	@ (10000ec8 <MFRC522_Init+0x78>)
10000e5e:	f008 fec2 	bl	10009be6 <memcpy>

    MFRC522_CS_HIGH();
10000e62:	4b19      	ldr	r3, [pc, #100]	@ (10000ec8 <MFRC522_Init+0x78>)
10000e64:	685b      	ldr	r3, [r3, #4]
10000e66:	4a18      	ldr	r2, [pc, #96]	@ (10000ec8 <MFRC522_Init+0x78>)
10000e68:	8911      	ldrh	r1, [r2, #8]
10000e6a:	2201      	movs	r2, #1
10000e6c:	4618      	mov	r0, r3
10000e6e:	f001 f9b7 	bl	100021e0 <HAL_GPIO_WritePin>
    MFRC522_RST_HIGH();
10000e72:	4b15      	ldr	r3, [pc, #84]	@ (10000ec8 <MFRC522_Init+0x78>)
10000e74:	68db      	ldr	r3, [r3, #12]
10000e76:	4a14      	ldr	r2, [pc, #80]	@ (10000ec8 <MFRC522_Init+0x78>)
10000e78:	8a11      	ldrh	r1, [r2, #16]
10000e7a:	2201      	movs	r2, #1
10000e7c:	4618      	mov	r0, r3
10000e7e:	f001 f9af 	bl	100021e0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
10000e82:	200a      	movs	r0, #10
10000e84:	f000 fecc 	bl	10001c20 <HAL_Delay>

    MFRC522_Reset();
10000e88:	f000 f820 	bl	10000ecc <MFRC522_Reset>

    // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
    MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
10000e8c:	218d      	movs	r1, #141	@ 0x8d
10000e8e:	202a      	movs	r0, #42	@ 0x2a
10000e90:	f000 f83c 	bl	10000f0c <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
10000e94:	213e      	movs	r1, #62	@ 0x3e
10000e96:	202b      	movs	r0, #43	@ 0x2b
10000e98:	f000 f838 	bl	10000f0c <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
10000e9c:	211e      	movs	r1, #30
10000e9e:	202d      	movs	r0, #45	@ 0x2d
10000ea0:	f000 f834 	bl	10000f0c <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
10000ea4:	2100      	movs	r1, #0
10000ea6:	202c      	movs	r0, #44	@ 0x2c
10000ea8:	f000 f830 	bl	10000f0c <MFRC522_WriteRegister>

    MFRC522_WriteRegister(MFRC522_REG_TX_ASK, 0x40);
10000eac:	2140      	movs	r1, #64	@ 0x40
10000eae:	2015      	movs	r0, #21
10000eb0:	f000 f82c 	bl	10000f0c <MFRC522_WriteRegister>
    MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
10000eb4:	213d      	movs	r1, #61	@ 0x3d
10000eb6:	2011      	movs	r0, #17
10000eb8:	f000 f828 	bl	10000f0c <MFRC522_WriteRegister>

    MFRC522_AntennaOn();
10000ebc:	f000 f811 	bl	10000ee2 <MFRC522_AntennaOn>
}
10000ec0:	bf00      	nop
10000ec2:	3708      	adds	r7, #8
10000ec4:	46bd      	mov	sp, r7
10000ec6:	bd80      	pop	{r7, pc}
10000ec8:	1002042c 	.word	0x1002042c

10000ecc <MFRC522_Reset>:

/* Reset the MFRC522 */
void MFRC522_Reset(void) {
10000ecc:	b580      	push	{r7, lr}
10000ece:	af00      	add	r7, sp, #0
    MFRC522_WriteRegister(MFRC522_REG_COMMAND, MFRC522_CMD_SOFT_RESET);
10000ed0:	210f      	movs	r1, #15
10000ed2:	2001      	movs	r0, #1
10000ed4:	f000 f81a 	bl	10000f0c <MFRC522_WriteRegister>
    HAL_Delay(50);
10000ed8:	2032      	movs	r0, #50	@ 0x32
10000eda:	f000 fea1 	bl	10001c20 <HAL_Delay>
}
10000ede:	bf00      	nop
10000ee0:	bd80      	pop	{r7, pc}

10000ee2 <MFRC522_AntennaOn>:
    *version = MFRC522_ReadRegister(MFRC522_REG_VERSION);
    return (*version == 0x91 || *version == 0x92);
}

/* Turn on antenna */
void MFRC522_AntennaOn(void) {
10000ee2:	b580      	push	{r7, lr}
10000ee4:	b082      	sub	sp, #8
10000ee6:	af00      	add	r7, sp, #0
    uint8_t temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
10000ee8:	2014      	movs	r0, #20
10000eea:	f000 f83f 	bl	10000f6c <MFRC522_ReadRegister>
10000eee:	4603      	mov	r3, r0
10000ef0:	71fb      	strb	r3, [r7, #7]
    if (!(temp & 0x03)) {
10000ef2:	79fb      	ldrb	r3, [r7, #7]
10000ef4:	f003 0303 	and.w	r3, r3, #3
10000ef8:	2b00      	cmp	r3, #0
10000efa:	d103      	bne.n	10000f04 <MFRC522_AntennaOn+0x22>
        MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
10000efc:	2103      	movs	r1, #3
10000efe:	2014      	movs	r0, #20
10000f00:	f000 f86e 	bl	10000fe0 <MFRC522_SetBitMask>
    }
}
10000f04:	bf00      	nop
10000f06:	3708      	adds	r7, #8
10000f08:	46bd      	mov	sp, r7
10000f0a:	bd80      	pop	{r7, pc}

10000f0c <MFRC522_WriteRegister>:
void MFRC522_AntennaOff(void) {
    MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

/* Write to MFRC522 register */
void MFRC522_WriteRegister(uint8_t reg, uint8_t value) {
10000f0c:	b580      	push	{r7, lr}
10000f0e:	b084      	sub	sp, #16
10000f10:	af00      	add	r7, sp, #0
10000f12:	4603      	mov	r3, r0
10000f14:	460a      	mov	r2, r1
10000f16:	71fb      	strb	r3, [r7, #7]
10000f18:	4613      	mov	r3, r2
10000f1a:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2];
    txData[0] = (reg << 1) & 0x7E;
10000f1c:	79fb      	ldrb	r3, [r7, #7]
10000f1e:	005b      	lsls	r3, r3, #1
10000f20:	b2db      	uxtb	r3, r3
10000f22:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
10000f26:	b2db      	uxtb	r3, r3
10000f28:	733b      	strb	r3, [r7, #12]
    txData[1] = value;
10000f2a:	79bb      	ldrb	r3, [r7, #6]
10000f2c:	737b      	strb	r3, [r7, #13]

    MFRC522_CS_LOW();
10000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (10000f68 <MFRC522_WriteRegister+0x5c>)
10000f30:	685b      	ldr	r3, [r3, #4]
10000f32:	4a0d      	ldr	r2, [pc, #52]	@ (10000f68 <MFRC522_WriteRegister+0x5c>)
10000f34:	8911      	ldrh	r1, [r2, #8]
10000f36:	2200      	movs	r2, #0
10000f38:	4618      	mov	r0, r3
10000f3a:	f001 f951 	bl	100021e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(mfrc522_config.hspi, txData, 2, 100);
10000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (10000f68 <MFRC522_WriteRegister+0x5c>)
10000f40:	6818      	ldr	r0, [r3, #0]
10000f42:	f107 010c 	add.w	r1, r7, #12
10000f46:	2364      	movs	r3, #100	@ 0x64
10000f48:	2202      	movs	r2, #2
10000f4a:	f005 f95d 	bl	10006208 <HAL_SPI_Transmit>
    MFRC522_CS_HIGH();
10000f4e:	4b06      	ldr	r3, [pc, #24]	@ (10000f68 <MFRC522_WriteRegister+0x5c>)
10000f50:	685b      	ldr	r3, [r3, #4]
10000f52:	4a05      	ldr	r2, [pc, #20]	@ (10000f68 <MFRC522_WriteRegister+0x5c>)
10000f54:	8911      	ldrh	r1, [r2, #8]
10000f56:	2201      	movs	r2, #1
10000f58:	4618      	mov	r0, r3
10000f5a:	f001 f941 	bl	100021e0 <HAL_GPIO_WritePin>
}
10000f5e:	bf00      	nop
10000f60:	3710      	adds	r7, #16
10000f62:	46bd      	mov	sp, r7
10000f64:	bd80      	pop	{r7, pc}
10000f66:	bf00      	nop
10000f68:	1002042c 	.word	0x1002042c

10000f6c <MFRC522_ReadRegister>:

/* Read from MFRC522 register */
uint8_t MFRC522_ReadRegister(uint8_t reg) {
10000f6c:	b580      	push	{r7, lr}
10000f6e:	b084      	sub	sp, #16
10000f70:	af00      	add	r7, sp, #0
10000f72:	4603      	mov	r3, r0
10000f74:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = ((reg << 1) & 0x7E) | 0x80;
10000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
10000f7a:	005b      	lsls	r3, r3, #1
10000f7c:	b25b      	sxtb	r3, r3
10000f7e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
10000f82:	b25b      	sxtb	r3, r3
10000f84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
10000f88:	b25b      	sxtb	r3, r3
10000f8a:	b2db      	uxtb	r3, r3
10000f8c:	73fb      	strb	r3, [r7, #15]
    uint8_t rxData = 0;
10000f8e:	2300      	movs	r3, #0
10000f90:	73bb      	strb	r3, [r7, #14]

    MFRC522_CS_LOW();
10000f92:	4b12      	ldr	r3, [pc, #72]	@ (10000fdc <MFRC522_ReadRegister+0x70>)
10000f94:	685b      	ldr	r3, [r3, #4]
10000f96:	4a11      	ldr	r2, [pc, #68]	@ (10000fdc <MFRC522_ReadRegister+0x70>)
10000f98:	8911      	ldrh	r1, [r2, #8]
10000f9a:	2200      	movs	r2, #0
10000f9c:	4618      	mov	r0, r3
10000f9e:	f001 f91f 	bl	100021e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(mfrc522_config.hspi, &txData, 1, 100);
10000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (10000fdc <MFRC522_ReadRegister+0x70>)
10000fa4:	6818      	ldr	r0, [r3, #0]
10000fa6:	f107 010f 	add.w	r1, r7, #15
10000faa:	2364      	movs	r3, #100	@ 0x64
10000fac:	2201      	movs	r2, #1
10000fae:	f005 f92b 	bl	10006208 <HAL_SPI_Transmit>
    HAL_SPI_Receive(mfrc522_config.hspi, &rxData, 1, 100);
10000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (10000fdc <MFRC522_ReadRegister+0x70>)
10000fb4:	6818      	ldr	r0, [r3, #0]
10000fb6:	f107 010e 	add.w	r1, r7, #14
10000fba:	2364      	movs	r3, #100	@ 0x64
10000fbc:	2201      	movs	r2, #1
10000fbe:	f005 fb1c 	bl	100065fa <HAL_SPI_Receive>
    MFRC522_CS_HIGH();
10000fc2:	4b06      	ldr	r3, [pc, #24]	@ (10000fdc <MFRC522_ReadRegister+0x70>)
10000fc4:	685b      	ldr	r3, [r3, #4]
10000fc6:	4a05      	ldr	r2, [pc, #20]	@ (10000fdc <MFRC522_ReadRegister+0x70>)
10000fc8:	8911      	ldrh	r1, [r2, #8]
10000fca:	2201      	movs	r2, #1
10000fcc:	4618      	mov	r0, r3
10000fce:	f001 f907 	bl	100021e0 <HAL_GPIO_WritePin>

    return rxData;
10000fd2:	7bbb      	ldrb	r3, [r7, #14]
}
10000fd4:	4618      	mov	r0, r3
10000fd6:	3710      	adds	r7, #16
10000fd8:	46bd      	mov	sp, r7
10000fda:	bd80      	pop	{r7, pc}
10000fdc:	1002042c 	.word	0x1002042c

10000fe0 <MFRC522_SetBitMask>:

/* Set bit mask in register */
void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
10000fe0:	b580      	push	{r7, lr}
10000fe2:	b084      	sub	sp, #16
10000fe4:	af00      	add	r7, sp, #0
10000fe6:	4603      	mov	r3, r0
10000fe8:	460a      	mov	r2, r1
10000fea:	71fb      	strb	r3, [r7, #7]
10000fec:	4613      	mov	r3, r2
10000fee:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadRegister(reg);
10000ff0:	79fb      	ldrb	r3, [r7, #7]
10000ff2:	4618      	mov	r0, r3
10000ff4:	f7ff ffba 	bl	10000f6c <MFRC522_ReadRegister>
10000ff8:	4603      	mov	r3, r0
10000ffa:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteRegister(reg, tmp | mask);
10000ffc:	7bfa      	ldrb	r2, [r7, #15]
10000ffe:	79bb      	ldrb	r3, [r7, #6]
10001000:	4313      	orrs	r3, r2
10001002:	b2da      	uxtb	r2, r3
10001004:	79fb      	ldrb	r3, [r7, #7]
10001006:	4611      	mov	r1, r2
10001008:	4618      	mov	r0, r3
1000100a:	f7ff ff7f 	bl	10000f0c <MFRC522_WriteRegister>
}
1000100e:	bf00      	nop
10001010:	3710      	adds	r7, #16
10001012:	46bd      	mov	sp, r7
10001014:	bd80      	pop	{r7, pc}

10001016 <MFRC522_ClearBitMask>:

/* Clear bit mask in register */
void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask) {
10001016:	b580      	push	{r7, lr}
10001018:	b084      	sub	sp, #16
1000101a:	af00      	add	r7, sp, #0
1000101c:	4603      	mov	r3, r0
1000101e:	460a      	mov	r2, r1
10001020:	71fb      	strb	r3, [r7, #7]
10001022:	4613      	mov	r3, r2
10001024:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp = MFRC522_ReadRegister(reg);
10001026:	79fb      	ldrb	r3, [r7, #7]
10001028:	4618      	mov	r0, r3
1000102a:	f7ff ff9f 	bl	10000f6c <MFRC522_ReadRegister>
1000102e:	4603      	mov	r3, r0
10001030:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteRegister(reg, tmp & (~mask));
10001032:	f997 3006 	ldrsb.w	r3, [r7, #6]
10001036:	43db      	mvns	r3, r3
10001038:	b25a      	sxtb	r2, r3
1000103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
1000103e:	4013      	ands	r3, r2
10001040:	b25b      	sxtb	r3, r3
10001042:	b2da      	uxtb	r2, r3
10001044:	79fb      	ldrb	r3, [r7, #7]
10001046:	4611      	mov	r1, r2
10001048:	4618      	mov	r0, r3
1000104a:	f7ff ff5f 	bl	10000f0c <MFRC522_WriteRegister>
}
1000104e:	bf00      	nop
10001050:	3710      	adds	r7, #16
10001052:	46bd      	mov	sp, r7
10001054:	bd80      	pop	{r7, pc}

10001056 <MFRC522_CalculateCRC>:

/* Calculate CRC */
void MFRC522_CalculateCRC(uint8_t *data, uint8_t len, uint8_t *result) {
10001056:	b590      	push	{r4, r7, lr}
10001058:	b087      	sub	sp, #28
1000105a:	af00      	add	r7, sp, #0
1000105c:	60f8      	str	r0, [r7, #12]
1000105e:	460b      	mov	r3, r1
10001060:	607a      	str	r2, [r7, #4]
10001062:	72fb      	strb	r3, [r7, #11]
    MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);
10001064:	2104      	movs	r1, #4
10001066:	2005      	movs	r0, #5
10001068:	f7ff ffd5 	bl	10001016 <MFRC522_ClearBitMask>
    MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
1000106c:	2180      	movs	r1, #128	@ 0x80
1000106e:	200a      	movs	r0, #10
10001070:	f7ff ffb6 	bl	10000fe0 <MFRC522_SetBitMask>

    for (uint8_t i = 0; i < len; i++) {
10001074:	2300      	movs	r3, #0
10001076:	75fb      	strb	r3, [r7, #23]
10001078:	e00a      	b.n	10001090 <MFRC522_CalculateCRC+0x3a>
        MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, data[i]);
1000107a:	7dfb      	ldrb	r3, [r7, #23]
1000107c:	68fa      	ldr	r2, [r7, #12]
1000107e:	4413      	add	r3, r2
10001080:	781b      	ldrb	r3, [r3, #0]
10001082:	4619      	mov	r1, r3
10001084:	2009      	movs	r0, #9
10001086:	f7ff ff41 	bl	10000f0c <MFRC522_WriteRegister>
    for (uint8_t i = 0; i < len; i++) {
1000108a:	7dfb      	ldrb	r3, [r7, #23]
1000108c:	3301      	adds	r3, #1
1000108e:	75fb      	strb	r3, [r7, #23]
10001090:	7dfa      	ldrb	r2, [r7, #23]
10001092:	7afb      	ldrb	r3, [r7, #11]
10001094:	429a      	cmp	r2, r3
10001096:	d3f0      	bcc.n	1000107a <MFRC522_CalculateCRC+0x24>
    }

    MFRC522_WriteRegister(MFRC522_REG_COMMAND, MFRC522_CMD_CALC_CRC);
10001098:	2103      	movs	r1, #3
1000109a:	2001      	movs	r0, #1
1000109c:	f7ff ff36 	bl	10000f0c <MFRC522_WriteRegister>

    uint16_t timeout = 5000;
100010a0:	f241 3388 	movw	r3, #5000	@ 0x1388
100010a4:	82bb      	strh	r3, [r7, #20]
    uint8_t n;
    do {
        n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
100010a6:	2005      	movs	r0, #5
100010a8:	f7ff ff60 	bl	10000f6c <MFRC522_ReadRegister>
100010ac:	4603      	mov	r3, r0
100010ae:	74fb      	strb	r3, [r7, #19]
        timeout--;
100010b0:	8abb      	ldrh	r3, [r7, #20]
100010b2:	3b01      	subs	r3, #1
100010b4:	82bb      	strh	r3, [r7, #20]
    } while ((timeout != 0) && !(n & 0x04));
100010b6:	8abb      	ldrh	r3, [r7, #20]
100010b8:	2b00      	cmp	r3, #0
100010ba:	d004      	beq.n	100010c6 <MFRC522_CalculateCRC+0x70>
100010bc:	7cfb      	ldrb	r3, [r7, #19]
100010be:	f003 0304 	and.w	r3, r3, #4
100010c2:	2b00      	cmp	r3, #0
100010c4:	d0ef      	beq.n	100010a6 <MFRC522_CalculateCRC+0x50>

    result[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
100010c6:	2022      	movs	r0, #34	@ 0x22
100010c8:	f7ff ff50 	bl	10000f6c <MFRC522_ReadRegister>
100010cc:	4603      	mov	r3, r0
100010ce:	461a      	mov	r2, r3
100010d0:	687b      	ldr	r3, [r7, #4]
100010d2:	701a      	strb	r2, [r3, #0]
    result[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_H);
100010d4:	687b      	ldr	r3, [r7, #4]
100010d6:	1c5c      	adds	r4, r3, #1
100010d8:	2021      	movs	r0, #33	@ 0x21
100010da:	f7ff ff47 	bl	10000f6c <MFRC522_ReadRegister>
100010de:	4603      	mov	r3, r0
100010e0:	7023      	strb	r3, [r4, #0]
}
100010e2:	bf00      	nop
100010e4:	371c      	adds	r7, #28
100010e6:	46bd      	mov	sp, r7
100010e8:	bd90      	pop	{r4, r7, pc}

100010ea <MFRC522_ToCard>:

/* Communicate with PICC */
MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen,
                                 uint8_t *backData, uint16_t *backLen) {
100010ea:	b590      	push	{r4, r7, lr}
100010ec:	b087      	sub	sp, #28
100010ee:	af00      	add	r7, sp, #0
100010f0:	60b9      	str	r1, [r7, #8]
100010f2:	607b      	str	r3, [r7, #4]
100010f4:	4603      	mov	r3, r0
100010f6:	73fb      	strb	r3, [r7, #15]
100010f8:	4613      	mov	r3, r2
100010fa:	73bb      	strb	r3, [r7, #14]
    MFRC522_Status_t status = MFRC522_ERR;
100010fc:	2302      	movs	r3, #2
100010fe:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x00;
10001100:	2300      	movs	r3, #0
10001102:	75bb      	strb	r3, [r7, #22]
    uint8_t waitIRq = 0x00;
10001104:	2300      	movs	r3, #0
10001106:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (command) {
10001108:	7bfb      	ldrb	r3, [r7, #15]
1000110a:	2b0c      	cmp	r3, #12
1000110c:	d006      	beq.n	1000111c <MFRC522_ToCard+0x32>
1000110e:	2b0e      	cmp	r3, #14
10001110:	d109      	bne.n	10001126 <MFRC522_ToCard+0x3c>
        case MFRC522_CMD_MF_AUTHENT:
            irqEn = 0x12;
10001112:	2312      	movs	r3, #18
10001114:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x10;
10001116:	2310      	movs	r3, #16
10001118:	757b      	strb	r3, [r7, #21]
            break;
1000111a:	e005      	b.n	10001128 <MFRC522_ToCard+0x3e>
        case MFRC522_CMD_TRANSCEIVE:
            irqEn = 0x77;
1000111c:	2377      	movs	r3, #119	@ 0x77
1000111e:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x30;
10001120:	2330      	movs	r3, #48	@ 0x30
10001122:	757b      	strb	r3, [r7, #21]
            break;
10001124:	e000      	b.n	10001128 <MFRC522_ToCard+0x3e>
        default:
            break;
10001126:	bf00      	nop
    }

    MFRC522_WriteRegister(MFRC522_REG_COMM_IEN, irqEn | 0x80);
10001128:	7dbb      	ldrb	r3, [r7, #22]
1000112a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
1000112e:	b2db      	uxtb	r3, r3
10001130:	4619      	mov	r1, r3
10001132:	2002      	movs	r0, #2
10001134:	f7ff feea 	bl	10000f0c <MFRC522_WriteRegister>
    MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
10001138:	2180      	movs	r1, #128	@ 0x80
1000113a:	2004      	movs	r0, #4
1000113c:	f7ff ff6b 	bl	10001016 <MFRC522_ClearBitMask>
    MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
10001140:	2180      	movs	r1, #128	@ 0x80
10001142:	200a      	movs	r0, #10
10001144:	f7ff ff4c 	bl	10000fe0 <MFRC522_SetBitMask>
    MFRC522_WriteRegister(MFRC522_REG_COMMAND, MFRC522_CMD_IDLE);
10001148:	2100      	movs	r1, #0
1000114a:	2001      	movs	r0, #1
1000114c:	f7ff fede 	bl	10000f0c <MFRC522_WriteRegister>

    for (i = 0; i < sendLen; i++) {
10001150:	2300      	movs	r3, #0
10001152:	827b      	strh	r3, [r7, #18]
10001154:	e00a      	b.n	1000116c <MFRC522_ToCard+0x82>
        MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
10001156:	8a7b      	ldrh	r3, [r7, #18]
10001158:	68ba      	ldr	r2, [r7, #8]
1000115a:	4413      	add	r3, r2
1000115c:	781b      	ldrb	r3, [r3, #0]
1000115e:	4619      	mov	r1, r3
10001160:	2009      	movs	r0, #9
10001162:	f7ff fed3 	bl	10000f0c <MFRC522_WriteRegister>
    for (i = 0; i < sendLen; i++) {
10001166:	8a7b      	ldrh	r3, [r7, #18]
10001168:	3301      	adds	r3, #1
1000116a:	827b      	strh	r3, [r7, #18]
1000116c:	7bbb      	ldrb	r3, [r7, #14]
1000116e:	b29b      	uxth	r3, r3
10001170:	8a7a      	ldrh	r2, [r7, #18]
10001172:	429a      	cmp	r2, r3
10001174:	d3ef      	bcc.n	10001156 <MFRC522_ToCard+0x6c>
    }

    MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
10001176:	7bfb      	ldrb	r3, [r7, #15]
10001178:	4619      	mov	r1, r3
1000117a:	2001      	movs	r0, #1
1000117c:	f7ff fec6 	bl	10000f0c <MFRC522_WriteRegister>

    if (command == MFRC522_CMD_TRANSCEIVE) {
10001180:	7bfb      	ldrb	r3, [r7, #15]
10001182:	2b0c      	cmp	r3, #12
10001184:	d103      	bne.n	1000118e <MFRC522_ToCard+0xa4>
        MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);
10001186:	2180      	movs	r1, #128	@ 0x80
10001188:	200d      	movs	r0, #13
1000118a:	f7ff ff29 	bl	10000fe0 <MFRC522_SetBitMask>
    }

    i = 2000;
1000118e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
10001192:	827b      	strh	r3, [r7, #18]
    do {
        n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
10001194:	2004      	movs	r0, #4
10001196:	f7ff fee9 	bl	10000f6c <MFRC522_ReadRegister>
1000119a:	4603      	mov	r3, r0
1000119c:	753b      	strb	r3, [r7, #20]
        i--;
1000119e:	8a7b      	ldrh	r3, [r7, #18]
100011a0:	3b01      	subs	r3, #1
100011a2:	827b      	strh	r3, [r7, #18]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
100011a4:	8a7b      	ldrh	r3, [r7, #18]
100011a6:	2b00      	cmp	r3, #0
100011a8:	d00a      	beq.n	100011c0 <MFRC522_ToCard+0xd6>
100011aa:	7d3b      	ldrb	r3, [r7, #20]
100011ac:	f003 0301 	and.w	r3, r3, #1
100011b0:	2b00      	cmp	r3, #0
100011b2:	d105      	bne.n	100011c0 <MFRC522_ToCard+0xd6>
100011b4:	7d3a      	ldrb	r2, [r7, #20]
100011b6:	7d7b      	ldrb	r3, [r7, #21]
100011b8:	4013      	ands	r3, r2
100011ba:	b2db      	uxtb	r3, r3
100011bc:	2b00      	cmp	r3, #0
100011be:	d0e9      	beq.n	10001194 <MFRC522_ToCard+0xaa>

    MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);
100011c0:	2180      	movs	r1, #128	@ 0x80
100011c2:	200d      	movs	r0, #13
100011c4:	f7ff ff27 	bl	10001016 <MFRC522_ClearBitMask>

    if (i != 0) {
100011c8:	8a7b      	ldrh	r3, [r7, #18]
100011ca:	2b00      	cmp	r3, #0
100011cc:	d057      	beq.n	1000127e <MFRC522_ToCard+0x194>
        if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
100011ce:	2006      	movs	r0, #6
100011d0:	f7ff fecc 	bl	10000f6c <MFRC522_ReadRegister>
100011d4:	4603      	mov	r3, r0
100011d6:	f003 031b 	and.w	r3, r3, #27
100011da:	2b00      	cmp	r3, #0
100011dc:	d14d      	bne.n	1000127a <MFRC522_ToCard+0x190>
            status = MFRC522_OK;
100011de:	2300      	movs	r3, #0
100011e0:	75fb      	strb	r3, [r7, #23]

            if (n & irqEn & 0x01) {
100011e2:	7d3a      	ldrb	r2, [r7, #20]
100011e4:	7dbb      	ldrb	r3, [r7, #22]
100011e6:	4013      	ands	r3, r2
100011e8:	b2db      	uxtb	r3, r3
100011ea:	f003 0301 	and.w	r3, r3, #1
100011ee:	2b00      	cmp	r3, #0
100011f0:	d001      	beq.n	100011f6 <MFRC522_ToCard+0x10c>
                status = MFRC522_NOTAGERR;
100011f2:	2301      	movs	r3, #1
100011f4:	75fb      	strb	r3, [r7, #23]
            }

            if (command == MFRC522_CMD_TRANSCEIVE) {
100011f6:	7bfb      	ldrb	r3, [r7, #15]
100011f8:	2b0c      	cmp	r3, #12
100011fa:	d140      	bne.n	1000127e <MFRC522_ToCard+0x194>
                n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
100011fc:	200a      	movs	r0, #10
100011fe:	f7ff feb5 	bl	10000f6c <MFRC522_ReadRegister>
10001202:	4603      	mov	r3, r0
10001204:	753b      	strb	r3, [r7, #20]
                lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
10001206:	200c      	movs	r0, #12
10001208:	f7ff feb0 	bl	10000f6c <MFRC522_ReadRegister>
1000120c:	4603      	mov	r3, r0
1000120e:	f003 0307 	and.w	r3, r3, #7
10001212:	747b      	strb	r3, [r7, #17]

                if (lastBits) {
10001214:	7c7b      	ldrb	r3, [r7, #17]
10001216:	2b00      	cmp	r3, #0
10001218:	d00b      	beq.n	10001232 <MFRC522_ToCard+0x148>
                    *backLen = (n - 1) * 8 + lastBits;
1000121a:	7d3b      	ldrb	r3, [r7, #20]
1000121c:	3b01      	subs	r3, #1
1000121e:	b29b      	uxth	r3, r3
10001220:	00db      	lsls	r3, r3, #3
10001222:	b29a      	uxth	r2, r3
10001224:	7c7b      	ldrb	r3, [r7, #17]
10001226:	b29b      	uxth	r3, r3
10001228:	4413      	add	r3, r2
1000122a:	b29a      	uxth	r2, r3
1000122c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000122e:	801a      	strh	r2, [r3, #0]
10001230:	e005      	b.n	1000123e <MFRC522_ToCard+0x154>
                } else {
                    *backLen = n * 8;
10001232:	7d3b      	ldrb	r3, [r7, #20]
10001234:	b29b      	uxth	r3, r3
10001236:	00db      	lsls	r3, r3, #3
10001238:	b29a      	uxth	r2, r3
1000123a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000123c:	801a      	strh	r2, [r3, #0]
                }

                if (n == 0) {
1000123e:	7d3b      	ldrb	r3, [r7, #20]
10001240:	2b00      	cmp	r3, #0
10001242:	d101      	bne.n	10001248 <MFRC522_ToCard+0x15e>
                    n = 1;
10001244:	2301      	movs	r3, #1
10001246:	753b      	strb	r3, [r7, #20]
                }
                if (n > 16) {
10001248:	7d3b      	ldrb	r3, [r7, #20]
1000124a:	2b10      	cmp	r3, #16
1000124c:	d901      	bls.n	10001252 <MFRC522_ToCard+0x168>
                    n = 16;
1000124e:	2310      	movs	r3, #16
10001250:	753b      	strb	r3, [r7, #20]
                }

                for (i = 0; i < n; i++) {
10001252:	2300      	movs	r3, #0
10001254:	827b      	strh	r3, [r7, #18]
10001256:	e00a      	b.n	1000126e <MFRC522_ToCard+0x184>
                    backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
10001258:	8a7b      	ldrh	r3, [r7, #18]
1000125a:	687a      	ldr	r2, [r7, #4]
1000125c:	18d4      	adds	r4, r2, r3
1000125e:	2009      	movs	r0, #9
10001260:	f7ff fe84 	bl	10000f6c <MFRC522_ReadRegister>
10001264:	4603      	mov	r3, r0
10001266:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; i++) {
10001268:	8a7b      	ldrh	r3, [r7, #18]
1000126a:	3301      	adds	r3, #1
1000126c:	827b      	strh	r3, [r7, #18]
1000126e:	7d3b      	ldrb	r3, [r7, #20]
10001270:	b29b      	uxth	r3, r3
10001272:	8a7a      	ldrh	r2, [r7, #18]
10001274:	429a      	cmp	r2, r3
10001276:	d3ef      	bcc.n	10001258 <MFRC522_ToCard+0x16e>
10001278:	e001      	b.n	1000127e <MFRC522_ToCard+0x194>
                }
            }
        } else {
            status = MFRC522_ERR;
1000127a:	2302      	movs	r3, #2
1000127c:	75fb      	strb	r3, [r7, #23]
        }
    }

    return status;
1000127e:	7dfb      	ldrb	r3, [r7, #23]
}
10001280:	4618      	mov	r0, r3
10001282:	371c      	adds	r7, #28
10001284:	46bd      	mov	sp, r7
10001286:	bd90      	pop	{r4, r7, pc}

10001288 <MFRC522_Request>:

/* Request tag */
MFRC522_Status_t MFRC522_Request(uint8_t reqMode, uint8_t *tagType) {
10001288:	b580      	push	{r7, lr}
1000128a:	b086      	sub	sp, #24
1000128c:	af02      	add	r7, sp, #8
1000128e:	4603      	mov	r3, r0
10001290:	6039      	str	r1, [r7, #0]
10001292:	71fb      	strb	r3, [r7, #7]
    MFRC522_Status_t status;
    uint16_t backBits;

    MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);
10001294:	2107      	movs	r1, #7
10001296:	200d      	movs	r0, #13
10001298:	f7ff fe38 	bl	10000f0c <MFRC522_WriteRegister>

    tagType[0] = reqMode;
1000129c:	683b      	ldr	r3, [r7, #0]
1000129e:	79fa      	ldrb	r2, [r7, #7]
100012a0:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, tagType, 1, tagType, &backBits);
100012a2:	f107 030c 	add.w	r3, r7, #12
100012a6:	9300      	str	r3, [sp, #0]
100012a8:	683b      	ldr	r3, [r7, #0]
100012aa:	2201      	movs	r2, #1
100012ac:	6839      	ldr	r1, [r7, #0]
100012ae:	200c      	movs	r0, #12
100012b0:	f7ff ff1b 	bl	100010ea <MFRC522_ToCard>
100012b4:	4603      	mov	r3, r0
100012b6:	73fb      	strb	r3, [r7, #15]

    if ((status != MFRC522_OK) || (backBits != 0x10)) {
100012b8:	7bfb      	ldrb	r3, [r7, #15]
100012ba:	2b00      	cmp	r3, #0
100012bc:	d102      	bne.n	100012c4 <MFRC522_Request+0x3c>
100012be:	89bb      	ldrh	r3, [r7, #12]
100012c0:	2b10      	cmp	r3, #16
100012c2:	d001      	beq.n	100012c8 <MFRC522_Request+0x40>
        status = MFRC522_ERR;
100012c4:	2302      	movs	r3, #2
100012c6:	73fb      	strb	r3, [r7, #15]
    }

    return status;
100012c8:	7bfb      	ldrb	r3, [r7, #15]
}
100012ca:	4618      	mov	r0, r3
100012cc:	3710      	adds	r7, #16
100012ce:	46bd      	mov	sp, r7
100012d0:	bd80      	pop	{r7, pc}

100012d2 <MFRC522_Anticoll>:

/* Anti-collision detection */
MFRC522_Status_t MFRC522_Anticoll(Uid_t *uid) {
100012d2:	b580      	push	{r7, lr}
100012d4:	b086      	sub	sp, #24
100012d6:	af02      	add	r7, sp, #8
100012d8:	6078      	str	r0, [r7, #4]
    MFRC522_Status_t status;
    uint8_t i;
    uint8_t serNumCheck = 0;
100012da:	2300      	movs	r3, #0
100012dc:	737b      	strb	r3, [r7, #13]
    uint16_t unLen;

    MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);
100012de:	2100      	movs	r1, #0
100012e0:	200d      	movs	r0, #13
100012e2:	f7ff fe13 	bl	10000f0c <MFRC522_WriteRegister>

    uint8_t serNum[2];
    serNum[0] = PICC_CMD_SEL_CL1;
100012e6:	2393      	movs	r3, #147	@ 0x93
100012e8:	723b      	strb	r3, [r7, #8]
    serNum[1] = 0x20;
100012ea:	2320      	movs	r3, #32
100012ec:	727b      	strb	r3, [r7, #9]

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, serNum, 2, serNum, &unLen);
100012ee:	f107 0208 	add.w	r2, r7, #8
100012f2:	f107 0108 	add.w	r1, r7, #8
100012f6:	f107 030a 	add.w	r3, r7, #10
100012fa:	9300      	str	r3, [sp, #0]
100012fc:	4613      	mov	r3, r2
100012fe:	2202      	movs	r2, #2
10001300:	200c      	movs	r0, #12
10001302:	f7ff fef2 	bl	100010ea <MFRC522_ToCard>
10001306:	4603      	mov	r3, r0
10001308:	73fb      	strb	r3, [r7, #15]

    if (status == MFRC522_OK) {
1000130a:	7bfb      	ldrb	r3, [r7, #15]
1000130c:	2b00      	cmp	r3, #0
1000130e:	d127      	bne.n	10001360 <MFRC522_Anticoll+0x8e>
        for (i = 0; i < 4; i++) {
10001310:	2300      	movs	r3, #0
10001312:	73bb      	strb	r3, [r7, #14]
10001314:	e014      	b.n	10001340 <MFRC522_Anticoll+0x6e>
            uid->uidByte[i] = serNum[i];
10001316:	7bba      	ldrb	r2, [r7, #14]
10001318:	7bbb      	ldrb	r3, [r7, #14]
1000131a:	3210      	adds	r2, #16
1000131c:	443a      	add	r2, r7
1000131e:	f812 1c08 	ldrb.w	r1, [r2, #-8]
10001322:	687a      	ldr	r2, [r7, #4]
10001324:	4413      	add	r3, r2
10001326:	460a      	mov	r2, r1
10001328:	705a      	strb	r2, [r3, #1]
            serNumCheck ^= serNum[i];
1000132a:	7bbb      	ldrb	r3, [r7, #14]
1000132c:	3310      	adds	r3, #16
1000132e:	443b      	add	r3, r7
10001330:	f813 2c08 	ldrb.w	r2, [r3, #-8]
10001334:	7b7b      	ldrb	r3, [r7, #13]
10001336:	4053      	eors	r3, r2
10001338:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++) {
1000133a:	7bbb      	ldrb	r3, [r7, #14]
1000133c:	3301      	adds	r3, #1
1000133e:	73bb      	strb	r3, [r7, #14]
10001340:	7bbb      	ldrb	r3, [r7, #14]
10001342:	2b03      	cmp	r3, #3
10001344:	d9e7      	bls.n	10001316 <MFRC522_Anticoll+0x44>
        }

        if (serNumCheck != serNum[i]) {
10001346:	7bbb      	ldrb	r3, [r7, #14]
10001348:	3310      	adds	r3, #16
1000134a:	443b      	add	r3, r7
1000134c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
10001350:	7b7a      	ldrb	r2, [r7, #13]
10001352:	429a      	cmp	r2, r3
10001354:	d001      	beq.n	1000135a <MFRC522_Anticoll+0x88>
            status = MFRC522_ERR;
10001356:	2302      	movs	r3, #2
10001358:	73fb      	strb	r3, [r7, #15]
        }

        uid->size = 4;
1000135a:	687b      	ldr	r3, [r7, #4]
1000135c:	2204      	movs	r2, #4
1000135e:	701a      	strb	r2, [r3, #0]
    }

    return status;
10001360:	7bfb      	ldrb	r3, [r7, #15]
}
10001362:	4618      	mov	r0, r3
10001364:	3710      	adds	r7, #16
10001366:	46bd      	mov	sp, r7
10001368:	bd80      	pop	{r7, pc}

1000136a <MFRC522_SelectTag>:

/* Select tag */
MFRC522_Status_t MFRC522_SelectTag(Uid_t *uid) {
1000136a:	b580      	push	{r7, lr}
1000136c:	b088      	sub	sp, #32
1000136e:	af02      	add	r7, sp, #8
10001370:	6078      	str	r0, [r7, #4]
    MFRC522_Status_t status;
    uint8_t i;
    uint16_t recvBits;
    uint8_t buffer[9];

    buffer[0] = PICC_CMD_SEL_CL1;
10001372:	2393      	movs	r3, #147	@ 0x93
10001374:	723b      	strb	r3, [r7, #8]
    buffer[1] = 0x70;
10001376:	2370      	movs	r3, #112	@ 0x70
10001378:	727b      	strb	r3, [r7, #9]

    for (i = 0; i < 4; i++) {
1000137a:	2300      	movs	r3, #0
1000137c:	75bb      	strb	r3, [r7, #22]
1000137e:	e00c      	b.n	1000139a <MFRC522_SelectTag+0x30>
        buffer[i + 2] = uid->uidByte[i];
10001380:	7dba      	ldrb	r2, [r7, #22]
10001382:	7dbb      	ldrb	r3, [r7, #22]
10001384:	3302      	adds	r3, #2
10001386:	6879      	ldr	r1, [r7, #4]
10001388:	440a      	add	r2, r1
1000138a:	7852      	ldrb	r2, [r2, #1]
1000138c:	3318      	adds	r3, #24
1000138e:	443b      	add	r3, r7
10001390:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (i = 0; i < 4; i++) {
10001394:	7dbb      	ldrb	r3, [r7, #22]
10001396:	3301      	adds	r3, #1
10001398:	75bb      	strb	r3, [r7, #22]
1000139a:	7dbb      	ldrb	r3, [r7, #22]
1000139c:	2b03      	cmp	r3, #3
1000139e:	d9ef      	bls.n	10001380 <MFRC522_SelectTag+0x16>
    }

    buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
100013a0:	7aba      	ldrb	r2, [r7, #10]
100013a2:	7afb      	ldrb	r3, [r7, #11]
100013a4:	4053      	eors	r3, r2
100013a6:	b2da      	uxtb	r2, r3
100013a8:	7b3b      	ldrb	r3, [r7, #12]
100013aa:	4053      	eors	r3, r2
100013ac:	b2da      	uxtb	r2, r3
100013ae:	7b7b      	ldrb	r3, [r7, #13]
100013b0:	4053      	eors	r3, r2
100013b2:	b2db      	uxtb	r3, r3
100013b4:	73bb      	strb	r3, [r7, #14]

    MFRC522_CalculateCRC(buffer, 7, &buffer[7]);
100013b6:	f107 0308 	add.w	r3, r7, #8
100013ba:	1dda      	adds	r2, r3, #7
100013bc:	f107 0308 	add.w	r3, r7, #8
100013c0:	2107      	movs	r1, #7
100013c2:	4618      	mov	r0, r3
100013c4:	f7ff fe47 	bl	10001056 <MFRC522_CalculateCRC>

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
100013c8:	f107 0208 	add.w	r2, r7, #8
100013cc:	f107 0108 	add.w	r1, r7, #8
100013d0:	f107 0314 	add.w	r3, r7, #20
100013d4:	9300      	str	r3, [sp, #0]
100013d6:	4613      	mov	r3, r2
100013d8:	2209      	movs	r2, #9
100013da:	200c      	movs	r0, #12
100013dc:	f7ff fe85 	bl	100010ea <MFRC522_ToCard>
100013e0:	4603      	mov	r3, r0
100013e2:	75fb      	strb	r3, [r7, #23]

    if ((status == MFRC522_OK) && (recvBits == 0x18)) {
100013e4:	7dfb      	ldrb	r3, [r7, #23]
100013e6:	2b00      	cmp	r3, #0
100013e8:	d108      	bne.n	100013fc <MFRC522_SelectTag+0x92>
100013ea:	8abb      	ldrh	r3, [r7, #20]
100013ec:	2b18      	cmp	r3, #24
100013ee:	d105      	bne.n	100013fc <MFRC522_SelectTag+0x92>
        uid->sak = buffer[0];
100013f0:	7a3a      	ldrb	r2, [r7, #8]
100013f2:	687b      	ldr	r3, [r7, #4]
100013f4:	72da      	strb	r2, [r3, #11]
        status = MFRC522_OK;
100013f6:	2300      	movs	r3, #0
100013f8:	75fb      	strb	r3, [r7, #23]
100013fa:	e001      	b.n	10001400 <MFRC522_SelectTag+0x96>
    } else {
        status = MFRC522_ERR;
100013fc:	2302      	movs	r3, #2
100013fe:	75fb      	strb	r3, [r7, #23]
    }

    return status;
10001400:	7dfb      	ldrb	r3, [r7, #23]
}
10001402:	4618      	mov	r0, r3
10001404:	3718      	adds	r7, #24
10001406:	46bd      	mov	sp, r7
10001408:	bd80      	pop	{r7, pc}

1000140a <MFRC522_Auth>:

/* Authenticate */
MFRC522_Status_t MFRC522_Auth(uint8_t authMode, uint8_t blockAddr, uint8_t *key, Uid_t *uid) {
1000140a:	b580      	push	{r7, lr}
1000140c:	b08a      	sub	sp, #40	@ 0x28
1000140e:	af02      	add	r7, sp, #8
10001410:	60ba      	str	r2, [r7, #8]
10001412:	607b      	str	r3, [r7, #4]
10001414:	4603      	mov	r3, r0
10001416:	73fb      	strb	r3, [r7, #15]
10001418:	460b      	mov	r3, r1
1000141a:	73bb      	strb	r3, [r7, #14]
    MFRC522_Status_t status;
    uint16_t recvBits;
    uint8_t i;
    uint8_t buff[12];

    buff[0] = authMode;
1000141c:	7bfb      	ldrb	r3, [r7, #15]
1000141e:	743b      	strb	r3, [r7, #16]
    buff[1] = blockAddr;
10001420:	7bbb      	ldrb	r3, [r7, #14]
10001422:	747b      	strb	r3, [r7, #17]

    for (i = 0; i < 6; i++) {
10001424:	2300      	movs	r3, #0
10001426:	77bb      	strb	r3, [r7, #30]
10001428:	e00c      	b.n	10001444 <MFRC522_Auth+0x3a>
        buff[i + 2] = key[i];
1000142a:	7fbb      	ldrb	r3, [r7, #30]
1000142c:	68ba      	ldr	r2, [r7, #8]
1000142e:	441a      	add	r2, r3
10001430:	7fbb      	ldrb	r3, [r7, #30]
10001432:	3302      	adds	r3, #2
10001434:	7812      	ldrb	r2, [r2, #0]
10001436:	3320      	adds	r3, #32
10001438:	443b      	add	r3, r7
1000143a:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (i = 0; i < 6; i++) {
1000143e:	7fbb      	ldrb	r3, [r7, #30]
10001440:	3301      	adds	r3, #1
10001442:	77bb      	strb	r3, [r7, #30]
10001444:	7fbb      	ldrb	r3, [r7, #30]
10001446:	2b05      	cmp	r3, #5
10001448:	d9ef      	bls.n	1000142a <MFRC522_Auth+0x20>
    }

    for (i = 0; i < 4; i++) {
1000144a:	2300      	movs	r3, #0
1000144c:	77bb      	strb	r3, [r7, #30]
1000144e:	e00c      	b.n	1000146a <MFRC522_Auth+0x60>
        buff[i + 8] = uid->uidByte[i];
10001450:	7fba      	ldrb	r2, [r7, #30]
10001452:	7fbb      	ldrb	r3, [r7, #30]
10001454:	3308      	adds	r3, #8
10001456:	6879      	ldr	r1, [r7, #4]
10001458:	440a      	add	r2, r1
1000145a:	7852      	ldrb	r2, [r2, #1]
1000145c:	3320      	adds	r3, #32
1000145e:	443b      	add	r3, r7
10001460:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (i = 0; i < 4; i++) {
10001464:	7fbb      	ldrb	r3, [r7, #30]
10001466:	3301      	adds	r3, #1
10001468:	77bb      	strb	r3, [r7, #30]
1000146a:	7fbb      	ldrb	r3, [r7, #30]
1000146c:	2b03      	cmp	r3, #3
1000146e:	d9ef      	bls.n	10001450 <MFRC522_Auth+0x46>
    }

    status = MFRC522_ToCard(MFRC522_CMD_MF_AUTHENT, buff, 12, buff, &recvBits);
10001470:	f107 0210 	add.w	r2, r7, #16
10001474:	f107 0110 	add.w	r1, r7, #16
10001478:	f107 031c 	add.w	r3, r7, #28
1000147c:	9300      	str	r3, [sp, #0]
1000147e:	4613      	mov	r3, r2
10001480:	220c      	movs	r2, #12
10001482:	200e      	movs	r0, #14
10001484:	f7ff fe31 	bl	100010ea <MFRC522_ToCard>
10001488:	4603      	mov	r3, r0
1000148a:	77fb      	strb	r3, [r7, #31]

    if ((status != MFRC522_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS_2) & 0x08))) {
1000148c:	7ffb      	ldrb	r3, [r7, #31]
1000148e:	2b00      	cmp	r3, #0
10001490:	d107      	bne.n	100014a2 <MFRC522_Auth+0x98>
10001492:	2008      	movs	r0, #8
10001494:	f7ff fd6a 	bl	10000f6c <MFRC522_ReadRegister>
10001498:	4603      	mov	r3, r0
1000149a:	f003 0308 	and.w	r3, r3, #8
1000149e:	2b00      	cmp	r3, #0
100014a0:	d101      	bne.n	100014a6 <MFRC522_Auth+0x9c>
        status = MFRC522_ERR;
100014a2:	2302      	movs	r3, #2
100014a4:	77fb      	strb	r3, [r7, #31]
    }

    return status;
100014a6:	7ffb      	ldrb	r3, [r7, #31]
}
100014a8:	4618      	mov	r0, r3
100014aa:	3720      	adds	r7, #32
100014ac:	46bd      	mov	sp, r7
100014ae:	bd80      	pop	{r7, pc}

100014b0 <MFRC522_Read>:

/* Read block */
MFRC522_Status_t MFRC522_Read(uint8_t blockAddr, uint8_t *recvData) {
100014b0:	b580      	push	{r7, lr}
100014b2:	b086      	sub	sp, #24
100014b4:	af02      	add	r7, sp, #8
100014b6:	4603      	mov	r3, r0
100014b8:	6039      	str	r1, [r7, #0]
100014ba:	71fb      	strb	r3, [r7, #7]
    MFRC522_Status_t status;
    uint16_t unLen;

    recvData[0] = PICC_CMD_MF_READ;
100014bc:	683b      	ldr	r3, [r7, #0]
100014be:	2230      	movs	r2, #48	@ 0x30
100014c0:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
100014c2:	683b      	ldr	r3, [r7, #0]
100014c4:	3301      	adds	r3, #1
100014c6:	79fa      	ldrb	r2, [r7, #7]
100014c8:	701a      	strb	r2, [r3, #0]

    MFRC522_CalculateCRC(recvData, 2, &recvData[2]);
100014ca:	683b      	ldr	r3, [r7, #0]
100014cc:	3302      	adds	r3, #2
100014ce:	461a      	mov	r2, r3
100014d0:	2102      	movs	r1, #2
100014d2:	6838      	ldr	r0, [r7, #0]
100014d4:	f7ff fdbf 	bl	10001056 <MFRC522_CalculateCRC>

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, recvData, 4, recvData, &unLen);
100014d8:	f107 030c 	add.w	r3, r7, #12
100014dc:	9300      	str	r3, [sp, #0]
100014de:	683b      	ldr	r3, [r7, #0]
100014e0:	2204      	movs	r2, #4
100014e2:	6839      	ldr	r1, [r7, #0]
100014e4:	200c      	movs	r0, #12
100014e6:	f7ff fe00 	bl	100010ea <MFRC522_ToCard>
100014ea:	4603      	mov	r3, r0
100014ec:	73fb      	strb	r3, [r7, #15]

    if ((status != MFRC522_OK) || (unLen != 0x90)) {
100014ee:	7bfb      	ldrb	r3, [r7, #15]
100014f0:	2b00      	cmp	r3, #0
100014f2:	d102      	bne.n	100014fa <MFRC522_Read+0x4a>
100014f4:	89bb      	ldrh	r3, [r7, #12]
100014f6:	2b90      	cmp	r3, #144	@ 0x90
100014f8:	d001      	beq.n	100014fe <MFRC522_Read+0x4e>
        status = MFRC522_ERR;
100014fa:	2302      	movs	r3, #2
100014fc:	73fb      	strb	r3, [r7, #15]
    }

    return status;
100014fe:	7bfb      	ldrb	r3, [r7, #15]
}
10001500:	4618      	mov	r0, r3
10001502:	3710      	adds	r7, #16
10001504:	46bd      	mov	sp, r7
10001506:	bd80      	pop	{r7, pc}

10001508 <MFRC522_Write>:

/* Write block */
MFRC522_Status_t MFRC522_Write(uint8_t blockAddr, uint8_t *writeData) {
10001508:	b580      	push	{r7, lr}
1000150a:	b08a      	sub	sp, #40	@ 0x28
1000150c:	af02      	add	r7, sp, #8
1000150e:	4603      	mov	r3, r0
10001510:	6039      	str	r1, [r7, #0]
10001512:	71fb      	strb	r3, [r7, #7]
    MFRC522_Status_t status;
    uint16_t recvBits;
    uint8_t i;
    uint8_t buff[18];

    buff[0] = PICC_CMD_MF_WRITE;
10001514:	23a0      	movs	r3, #160	@ 0xa0
10001516:	723b      	strb	r3, [r7, #8]
    buff[1] = blockAddr;
10001518:	79fb      	ldrb	r3, [r7, #7]
1000151a:	727b      	strb	r3, [r7, #9]
    MFRC522_CalculateCRC(buff, 2, &buff[2]);
1000151c:	f107 0308 	add.w	r3, r7, #8
10001520:	1c9a      	adds	r2, r3, #2
10001522:	f107 0308 	add.w	r3, r7, #8
10001526:	2102      	movs	r1, #2
10001528:	4618      	mov	r0, r3
1000152a:	f7ff fd94 	bl	10001056 <MFRC522_CalculateCRC>

    status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buff, 4, buff, &recvBits);
1000152e:	f107 0208 	add.w	r2, r7, #8
10001532:	f107 0108 	add.w	r1, r7, #8
10001536:	f107 031c 	add.w	r3, r7, #28
1000153a:	9300      	str	r3, [sp, #0]
1000153c:	4613      	mov	r3, r2
1000153e:	2204      	movs	r2, #4
10001540:	200c      	movs	r0, #12
10001542:	f7ff fdd2 	bl	100010ea <MFRC522_ToCard>
10001546:	4603      	mov	r3, r0
10001548:	77fb      	strb	r3, [r7, #31]

    if ((status != MFRC522_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) {
1000154a:	7ffb      	ldrb	r3, [r7, #31]
1000154c:	2b00      	cmp	r3, #0
1000154e:	d107      	bne.n	10001560 <MFRC522_Write+0x58>
10001550:	8bbb      	ldrh	r3, [r7, #28]
10001552:	2b04      	cmp	r3, #4
10001554:	d104      	bne.n	10001560 <MFRC522_Write+0x58>
10001556:	7a3b      	ldrb	r3, [r7, #8]
10001558:	f003 030f 	and.w	r3, r3, #15
1000155c:	2b0a      	cmp	r3, #10
1000155e:	d001      	beq.n	10001564 <MFRC522_Write+0x5c>
        status = MFRC522_ERR;
10001560:	2302      	movs	r3, #2
10001562:	77fb      	strb	r3, [r7, #31]
    }

    if (status == MFRC522_OK) {
10001564:	7ffb      	ldrb	r3, [r7, #31]
10001566:	2b00      	cmp	r3, #0
10001568:	d136      	bne.n	100015d8 <MFRC522_Write+0xd0>
        for (i = 0; i < 16; i++) {
1000156a:	2300      	movs	r3, #0
1000156c:	77bb      	strb	r3, [r7, #30]
1000156e:	e00b      	b.n	10001588 <MFRC522_Write+0x80>
            buff[i] = writeData[i];
10001570:	7fbb      	ldrb	r3, [r7, #30]
10001572:	683a      	ldr	r2, [r7, #0]
10001574:	441a      	add	r2, r3
10001576:	7fbb      	ldrb	r3, [r7, #30]
10001578:	7812      	ldrb	r2, [r2, #0]
1000157a:	3320      	adds	r3, #32
1000157c:	443b      	add	r3, r7
1000157e:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (i = 0; i < 16; i++) {
10001582:	7fbb      	ldrb	r3, [r7, #30]
10001584:	3301      	adds	r3, #1
10001586:	77bb      	strb	r3, [r7, #30]
10001588:	7fbb      	ldrb	r3, [r7, #30]
1000158a:	2b0f      	cmp	r3, #15
1000158c:	d9f0      	bls.n	10001570 <MFRC522_Write+0x68>
        }

        MFRC522_CalculateCRC(buff, 16, &buff[16]);
1000158e:	f107 0308 	add.w	r3, r7, #8
10001592:	f103 0210 	add.w	r2, r3, #16
10001596:	f107 0308 	add.w	r3, r7, #8
1000159a:	2110      	movs	r1, #16
1000159c:	4618      	mov	r0, r3
1000159e:	f7ff fd5a 	bl	10001056 <MFRC522_CalculateCRC>
        status = MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buff, 18, buff, &recvBits);
100015a2:	f107 0208 	add.w	r2, r7, #8
100015a6:	f107 0108 	add.w	r1, r7, #8
100015aa:	f107 031c 	add.w	r3, r7, #28
100015ae:	9300      	str	r3, [sp, #0]
100015b0:	4613      	mov	r3, r2
100015b2:	2212      	movs	r2, #18
100015b4:	200c      	movs	r0, #12
100015b6:	f7ff fd98 	bl	100010ea <MFRC522_ToCard>
100015ba:	4603      	mov	r3, r0
100015bc:	77fb      	strb	r3, [r7, #31]

        if ((status != MFRC522_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) {
100015be:	7ffb      	ldrb	r3, [r7, #31]
100015c0:	2b00      	cmp	r3, #0
100015c2:	d107      	bne.n	100015d4 <MFRC522_Write+0xcc>
100015c4:	8bbb      	ldrh	r3, [r7, #28]
100015c6:	2b04      	cmp	r3, #4
100015c8:	d104      	bne.n	100015d4 <MFRC522_Write+0xcc>
100015ca:	7a3b      	ldrb	r3, [r7, #8]
100015cc:	f003 030f 	and.w	r3, r3, #15
100015d0:	2b0a      	cmp	r3, #10
100015d2:	d001      	beq.n	100015d8 <MFRC522_Write+0xd0>
            status = MFRC522_ERR;
100015d4:	2302      	movs	r3, #2
100015d6:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
100015d8:	7ffb      	ldrb	r3, [r7, #31]
}
100015da:	4618      	mov	r0, r3
100015dc:	3720      	adds	r7, #32
100015de:	46bd      	mov	sp, r7
100015e0:	bd80      	pop	{r7, pc}

100015e2 <MFRC522_Halt>:

/* Halt tag */
void MFRC522_Halt(void) {
100015e2:	b580      	push	{r7, lr}
100015e4:	b084      	sub	sp, #16
100015e6:	af02      	add	r7, sp, #8
    uint16_t unLen;
    uint8_t buff[4];

    buff[0] = PICC_CMD_HLTA;
100015e8:	2350      	movs	r3, #80	@ 0x50
100015ea:	703b      	strb	r3, [r7, #0]
    buff[1] = 0;
100015ec:	2300      	movs	r3, #0
100015ee:	707b      	strb	r3, [r7, #1]
    MFRC522_CalculateCRC(buff, 2, &buff[2]);
100015f0:	463b      	mov	r3, r7
100015f2:	1c9a      	adds	r2, r3, #2
100015f4:	463b      	mov	r3, r7
100015f6:	2102      	movs	r1, #2
100015f8:	4618      	mov	r0, r3
100015fa:	f7ff fd2c 	bl	10001056 <MFRC522_CalculateCRC>

    MFRC522_ToCard(MFRC522_CMD_TRANSCEIVE, buff, 4, buff, &unLen);
100015fe:	463a      	mov	r2, r7
10001600:	4639      	mov	r1, r7
10001602:	1dbb      	adds	r3, r7, #6
10001604:	9300      	str	r3, [sp, #0]
10001606:	4613      	mov	r3, r2
10001608:	2204      	movs	r2, #4
1000160a:	200c      	movs	r0, #12
1000160c:	f7ff fd6d 	bl	100010ea <MFRC522_ToCard>
}
10001610:	bf00      	nop
10001612:	3708      	adds	r7, #8
10001614:	46bd      	mov	sp, r7
10001616:	bd80      	pop	{r7, pc}

10001618 <MFRC522_GetType>:

/* Get card type */
PICC_Type_t MFRC522_GetType(uint8_t sak) {
10001618:	b480      	push	{r7}
1000161a:	b083      	sub	sp, #12
1000161c:	af00      	add	r7, sp, #0
1000161e:	4603      	mov	r3, r0
10001620:	71fb      	strb	r3, [r7, #7]
    if (sak & 0x04) {
10001622:	79fb      	ldrb	r3, [r7, #7]
10001624:	f003 0304 	and.w	r3, r3, #4
10001628:	2b00      	cmp	r3, #0
1000162a:	d001      	beq.n	10001630 <MFRC522_GetType+0x18>
        return PICC_TYPE_NOT_COMPLETE;
1000162c:	2307      	movs	r3, #7
1000162e:	e044      	b.n	100016ba <MFRC522_GetType+0xa2>
    }

    switch (sak) {
10001630:	79fb      	ldrb	r3, [r7, #7]
10001632:	2b18      	cmp	r3, #24
10001634:	d840      	bhi.n	100016b8 <MFRC522_GetType+0xa0>
10001636:	a201      	add	r2, pc, #4	@ (adr r2, 1000163c <MFRC522_GetType+0x24>)
10001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000163c:	100016ad 	.word	0x100016ad
10001640:	100016b5 	.word	0x100016b5
10001644:	100016b9 	.word	0x100016b9
10001648:	100016b9 	.word	0x100016b9
1000164c:	100016b9 	.word	0x100016b9
10001650:	100016b9 	.word	0x100016b9
10001654:	100016b9 	.word	0x100016b9
10001658:	100016b9 	.word	0x100016b9
1000165c:	100016a5 	.word	0x100016a5
10001660:	100016a1 	.word	0x100016a1
10001664:	100016b9 	.word	0x100016b9
10001668:	100016b9 	.word	0x100016b9
1000166c:	100016b9 	.word	0x100016b9
10001670:	100016b9 	.word	0x100016b9
10001674:	100016b9 	.word	0x100016b9
10001678:	100016b9 	.word	0x100016b9
1000167c:	100016b1 	.word	0x100016b1
10001680:	100016b1 	.word	0x100016b1
10001684:	100016b9 	.word	0x100016b9
10001688:	100016b9 	.word	0x100016b9
1000168c:	100016b9 	.word	0x100016b9
10001690:	100016b9 	.word	0x100016b9
10001694:	100016b9 	.word	0x100016b9
10001698:	100016b9 	.word	0x100016b9
1000169c:	100016a9 	.word	0x100016a9
        case 0x09: return PICC_TYPE_MIFARE_MINI;
100016a0:	2301      	movs	r3, #1
100016a2:	e00a      	b.n	100016ba <MFRC522_GetType+0xa2>
        case 0x08: return PICC_TYPE_MIFARE_1K;
100016a4:	2302      	movs	r3, #2
100016a6:	e008      	b.n	100016ba <MFRC522_GetType+0xa2>
        case 0x18: return PICC_TYPE_MIFARE_4K;
100016a8:	2303      	movs	r3, #3
100016aa:	e006      	b.n	100016ba <MFRC522_GetType+0xa2>
        case 0x00: return PICC_TYPE_MIFARE_UL;
100016ac:	2304      	movs	r3, #4
100016ae:	e004      	b.n	100016ba <MFRC522_GetType+0xa2>
        case 0x10:
        case 0x11: return PICC_TYPE_MIFARE_PLUS;
100016b0:	2305      	movs	r3, #5
100016b2:	e002      	b.n	100016ba <MFRC522_GetType+0xa2>
        case 0x01: return PICC_TYPE_TNP3XXX;
100016b4:	2306      	movs	r3, #6
100016b6:	e000      	b.n	100016ba <MFRC522_GetType+0xa2>
        default: return PICC_TYPE_UNKNOWN;
100016b8:	2300      	movs	r3, #0
    }
}
100016ba:	4618      	mov	r0, r3
100016bc:	370c      	adds	r7, #12
100016be:	46bd      	mov	sp, r7
100016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100016c4:	4770      	bx	lr
100016c6:	bf00      	nop

100016c8 <MFRC522_GetTypeName>:

/* Get card type name */
const char* MFRC522_GetTypeName(PICC_Type_t type) {
100016c8:	b480      	push	{r7}
100016ca:	b083      	sub	sp, #12
100016cc:	af00      	add	r7, sp, #0
100016ce:	4603      	mov	r3, r0
100016d0:	71fb      	strb	r3, [r7, #7]
    switch (type) {
100016d2:	79fb      	ldrb	r3, [r7, #7]
100016d4:	3b01      	subs	r3, #1
100016d6:	2b06      	cmp	r3, #6
100016d8:	d81e      	bhi.n	10001718 <MFRC522_GetTypeName+0x50>
100016da:	a201      	add	r2, pc, #4	@ (adr r2, 100016e0 <MFRC522_GetTypeName+0x18>)
100016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100016e0:	100016fd 	.word	0x100016fd
100016e4:	10001701 	.word	0x10001701
100016e8:	10001705 	.word	0x10001705
100016ec:	10001709 	.word	0x10001709
100016f0:	1000170d 	.word	0x1000170d
100016f4:	10001711 	.word	0x10001711
100016f8:	10001715 	.word	0x10001715
        case PICC_TYPE_MIFARE_MINI: return "MIFARE Mini";
100016fc:	4b0a      	ldr	r3, [pc, #40]	@ (10001728 <MFRC522_GetTypeName+0x60>)
100016fe:	e00c      	b.n	1000171a <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_1K: return "MIFARE 1KB";
10001700:	4b0a      	ldr	r3, [pc, #40]	@ (1000172c <MFRC522_GetTypeName+0x64>)
10001702:	e00a      	b.n	1000171a <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_4K: return "MIFARE 4KB";
10001704:	4b0a      	ldr	r3, [pc, #40]	@ (10001730 <MFRC522_GetTypeName+0x68>)
10001706:	e008      	b.n	1000171a <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_UL: return "MIFARE Ultralight";
10001708:	4b0a      	ldr	r3, [pc, #40]	@ (10001734 <MFRC522_GetTypeName+0x6c>)
1000170a:	e006      	b.n	1000171a <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_MIFARE_PLUS: return "MIFARE Plus";
1000170c:	4b0a      	ldr	r3, [pc, #40]	@ (10001738 <MFRC522_GetTypeName+0x70>)
1000170e:	e004      	b.n	1000171a <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_TNP3XXX: return "MIFARE TNP3XXX";
10001710:	4b0a      	ldr	r3, [pc, #40]	@ (1000173c <MFRC522_GetTypeName+0x74>)
10001712:	e002      	b.n	1000171a <MFRC522_GetTypeName+0x52>
        case PICC_TYPE_NOT_COMPLETE: return "SAK incomplete";
10001714:	4b0a      	ldr	r3, [pc, #40]	@ (10001740 <MFRC522_GetTypeName+0x78>)
10001716:	e000      	b.n	1000171a <MFRC522_GetTypeName+0x52>
        default: return "Unknown";
10001718:	4b0a      	ldr	r3, [pc, #40]	@ (10001744 <MFRC522_GetTypeName+0x7c>)
    }
}
1000171a:	4618      	mov	r0, r3
1000171c:	370c      	adds	r7, #12
1000171e:	46bd      	mov	sp, r7
10001720:	f85d 7b04 	ldr.w	r7, [sp], #4
10001724:	4770      	bx	lr
10001726:	bf00      	nop
10001728:	1000af08 	.word	0x1000af08
1000172c:	1000af14 	.word	0x1000af14
10001730:	1000af20 	.word	0x1000af20
10001734:	1000af2c 	.word	0x1000af2c
10001738:	1000af40 	.word	0x1000af40
1000173c:	1000af4c 	.word	0x1000af4c
10001740:	1000af5c 	.word	0x1000af5c
10001744:	1000af6c 	.word	0x1000af6c

10001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10001748:	b580      	push	{r7, lr}
1000174a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
1000174c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001750:	f44f 6200 	mov.w	r2, #2048	@ 0x800
10001754:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10001758:	2200      	movs	r2, #0
1000175a:	2101      	movs	r1, #1
1000175c:	f06f 000b 	mvn.w	r0, #11
10001760:	f000 fb5d 	bl	10001e1e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10001764:	2200      	movs	r2, #0
10001766:	2101      	movs	r1, #1
10001768:	f06f 000a 	mvn.w	r0, #10
1000176c:	f000 fb57 	bl	10001e1e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10001770:	2200      	movs	r2, #0
10001772:	2101      	movs	r1, #1
10001774:	f06f 0009 	mvn.w	r0, #9
10001778:	f000 fb51 	bl	10001e1e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
1000177c:	2200      	movs	r2, #0
1000177e:	2101      	movs	r1, #1
10001780:	f06f 0004 	mvn.w	r0, #4
10001784:	f000 fb4b 	bl	10001e1e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
10001788:	2200      	movs	r2, #0
1000178a:	2101      	movs	r1, #1
1000178c:	f06f 0003 	mvn.w	r0, #3
10001790:	f000 fb45 	bl	10001e1e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
10001794:	2200      	movs	r2, #0
10001796:	2101      	movs	r1, #1
10001798:	f06f 0001 	mvn.w	r0, #1
1000179c:	f000 fb3f 	bl	10001e1e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
100017a0:	2200      	movs	r2, #0
100017a2:	2100      	movs	r1, #0
100017a4:	2091      	movs	r0, #145	@ 0x91
100017a6:	f000 fb3a 	bl	10001e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
100017aa:	2091      	movs	r0, #145	@ 0x91
100017ac:	f000 fb53 	bl	10001e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100017b0:	bf00      	nop
100017b2:	bd80      	pop	{r7, pc}

100017b4 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
100017b4:	b580      	push	{r7, lr}
100017b6:	b082      	sub	sp, #8
100017b8:	af00      	add	r7, sp, #0
100017ba:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
100017bc:	687b      	ldr	r3, [r7, #4]
100017be:	681b      	ldr	r3, [r3, #0]
100017c0:	4a0e      	ldr	r2, [pc, #56]	@ (100017fc <HAL_IPCC_MspInit+0x48>)
100017c2:	4293      	cmp	r3, r2
100017c4:	d115      	bne.n	100017f2 <HAL_IPCC_MspInit+0x3e>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
100017c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
100017ce:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
100017d2:	2200      	movs	r2, #0
100017d4:	2101      	movs	r1, #1
100017d6:	2067      	movs	r0, #103	@ 0x67
100017d8:	f000 fb21 	bl	10001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
100017dc:	2067      	movs	r0, #103	@ 0x67
100017de:	f000 fb3a 	bl	10001e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
100017e2:	2200      	movs	r2, #0
100017e4:	2101      	movs	r1, #1
100017e6:	2068      	movs	r0, #104	@ 0x68
100017e8:	f000 fb19 	bl	10001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
100017ec:	2068      	movs	r0, #104	@ 0x68
100017ee:	f000 fb32 	bl	10001e56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
100017f2:	bf00      	nop
100017f4:	3708      	adds	r7, #8
100017f6:	46bd      	mov	sp, r7
100017f8:	bd80      	pop	{r7, pc}
100017fa:	bf00      	nop
100017fc:	4c001000 	.word	0x4c001000

10001800 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
10001800:	b580      	push	{r7, lr}
10001802:	b0de      	sub	sp, #376	@ 0x178
10001804:	af00      	add	r7, sp, #0
10001806:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
1000180a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
1000180e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001810:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
10001814:	2200      	movs	r2, #0
10001816:	601a      	str	r2, [r3, #0]
10001818:	605a      	str	r2, [r3, #4]
1000181a:	609a      	str	r2, [r3, #8]
1000181c:	60da      	str	r2, [r3, #12]
1000181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10001820:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10001824:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
10001828:	4618      	mov	r0, r3
1000182a:	f44f 73ac 	mov.w	r3, #344	@ 0x158
1000182e:	461a      	mov	r2, r3
10001830:	2100      	movs	r1, #0
10001832:	f008 f91b 	bl	10009a6c <memset>
  if(hspi->Instance==SPI5)
10001836:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
1000183a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
1000183e:	681b      	ldr	r3, [r3, #0]
10001840:	681b      	ldr	r3, [r3, #0]
10001842:	4a32      	ldr	r2, [pc, #200]	@ (1000190c <HAL_SPI_MspInit+0x10c>)
10001844:	4293      	cmp	r3, r2
10001846:	d15b      	bne.n	10001900 <HAL_SPI_MspInit+0x100>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10001848:	4b31      	ldr	r3, [pc, #196]	@ (10001910 <HAL_SPI_MspInit+0x110>)
1000184a:	681b      	ldr	r3, [r3, #0]
1000184c:	f003 0307 	and.w	r3, r3, #7
10001850:	2b04      	cmp	r3, #4
10001852:	d11a      	bne.n	1000188a <HAL_SPI_MspInit+0x8a>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI45;
10001854:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10001858:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
1000185c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
10001860:	f04f 0300 	mov.w	r3, #0
10001864:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PCLK2;
10001868:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
1000186c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
10001870:	2200      	movs	r2, #0
10001872:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
10001876:	f107 0308 	add.w	r3, r7, #8
1000187a:	4618      	mov	r0, r3
1000187c:	f002 fd0c 	bl	10004298 <HAL_RCCEx_PeriphCLKConfig>
10001880:	4603      	mov	r3, r0
10001882:	2b00      	cmp	r3, #0
10001884:	d001      	beq.n	1000188a <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
10001886:	f7ff fadd 	bl	10000e44 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
1000188a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000188e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
10001892:	f8c3 2a88 	str.w	r2, [r3, #2696]	@ 0xa88

    __HAL_RCC_GPIOH_CLK_ENABLE();
10001896:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000189a:	2280      	movs	r2, #128	@ 0x80
1000189c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
100018a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018a4:	2220      	movs	r2, #32
100018a6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    /**SPI5 GPIO Configuration
    PH6     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
100018aa:	2340      	movs	r3, #64	@ 0x40
100018ac:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100018b0:	2302      	movs	r3, #2
100018b2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100018b6:	2300      	movs	r3, #0
100018b8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
100018bc:	2301      	movs	r3, #1
100018be:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
100018c2:	2305      	movs	r3, #5
100018c4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
100018c8:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
100018cc:	4619      	mov	r1, r3
100018ce:	4811      	ldr	r0, [pc, #68]	@ (10001914 <HAL_SPI_MspInit+0x114>)
100018d0:	f000 fadc 	bl	10001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
100018d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
100018d8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100018dc:	2302      	movs	r3, #2
100018de:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100018e2:	2300      	movs	r3, #0
100018e4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
100018e8:	2301      	movs	r3, #1
100018ea:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
100018ee:	2305      	movs	r3, #5
100018f0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
100018f4:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
100018f8:	4619      	mov	r1, r3
100018fa:	4807      	ldr	r0, [pc, #28]	@ (10001918 <HAL_SPI_MspInit+0x118>)
100018fc:	f000 fac6 	bl	10001e8c <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
10001900:	bf00      	nop
10001902:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
10001906:	46bd      	mov	sp, r7
10001908:	bd80      	pop	{r7, pc}
1000190a:	bf00      	nop
1000190c:	44009000 	.word	0x44009000
10001910:	50020000 	.word	0x50020000
10001914:	50009000 	.word	0x50009000
10001918:	50007000 	.word	0x50007000

1000191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
1000191c:	b480      	push	{r7}
1000191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10001920:	bf00      	nop
10001922:	e7fd      	b.n	10001920 <NMI_Handler+0x4>

10001924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10001924:	b480      	push	{r7}
10001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10001928:	bf00      	nop
1000192a:	e7fd      	b.n	10001928 <HardFault_Handler+0x4>

1000192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000192c:	b480      	push	{r7}
1000192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10001930:	bf00      	nop
10001932:	e7fd      	b.n	10001930 <MemManage_Handler+0x4>

10001934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10001934:	b480      	push	{r7}
10001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10001938:	bf00      	nop
1000193a:	e7fd      	b.n	10001938 <BusFault_Handler+0x4>

1000193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
1000193c:	b480      	push	{r7}
1000193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10001940:	bf00      	nop
10001942:	e7fd      	b.n	10001940 <UsageFault_Handler+0x4>

10001944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10001944:	b480      	push	{r7}
10001946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10001948:	bf00      	nop
1000194a:	46bd      	mov	sp, r7
1000194c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001950:	4770      	bx	lr

10001952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10001952:	b480      	push	{r7}
10001954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10001956:	bf00      	nop
10001958:	46bd      	mov	sp, r7
1000195a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000195e:	4770      	bx	lr

10001960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10001960:	b480      	push	{r7}
10001962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10001964:	bf00      	nop
10001966:	46bd      	mov	sp, r7
10001968:	f85d 7b04 	ldr.w	r7, [sp], #4
1000196c:	4770      	bx	lr

1000196e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1000196e:	b580      	push	{r7, lr}
10001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10001972:	f000 f935 	bl	10001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10001976:	bf00      	nop
10001978:	bd80      	pop	{r7, pc}
	...

1000197c <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
1000197c:	b580      	push	{r7, lr}
1000197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10001980:	4802      	ldr	r0, [pc, #8]	@ (1000198c <IPCC_RX1_IRQHandler+0x10>)
10001982:	f000 fd8f 	bl	100024a4 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
10001986:	bf00      	nop
10001988:	bd80      	pop	{r7, pc}
1000198a:	bf00      	nop
1000198c:	100201d0 	.word	0x100201d0

10001990 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
10001990:	b580      	push	{r7, lr}
10001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10001994:	4802      	ldr	r0, [pc, #8]	@ (100019a0 <IPCC_TX1_IRQHandler+0x10>)
10001996:	f000 fd37 	bl	10002408 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
1000199a:	bf00      	nop
1000199c:	bd80      	pop	{r7, pc}
1000199e:	bf00      	nop
100019a0:	100201d0 	.word	0x100201d0

100019a4 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
100019a4:	b580      	push	{r7, lr}
100019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
100019a8:	f002 f816 	bl	100039d8 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
100019ac:	bf00      	nop
100019ae:	bd80      	pop	{r7, pc}

100019b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
100019b0:	b480      	push	{r7}
100019b2:	af00      	add	r7, sp, #0
  return 1;
100019b4:	2301      	movs	r3, #1
}
100019b6:	4618      	mov	r0, r3
100019b8:	46bd      	mov	sp, r7
100019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100019be:	4770      	bx	lr

100019c0 <_kill>:

int _kill(int pid, int sig)
{
100019c0:	b580      	push	{r7, lr}
100019c2:	b082      	sub	sp, #8
100019c4:	af00      	add	r7, sp, #0
100019c6:	6078      	str	r0, [r7, #4]
100019c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
100019ca:	f008 f8df 	bl	10009b8c <__errno>
100019ce:	4603      	mov	r3, r0
100019d0:	2216      	movs	r2, #22
100019d2:	601a      	str	r2, [r3, #0]
  return -1;
100019d4:	f04f 33ff 	mov.w	r3, #4294967295
}
100019d8:	4618      	mov	r0, r3
100019da:	3708      	adds	r7, #8
100019dc:	46bd      	mov	sp, r7
100019de:	bd80      	pop	{r7, pc}

100019e0 <_exit>:

void _exit (int status)
{
100019e0:	b580      	push	{r7, lr}
100019e2:	b082      	sub	sp, #8
100019e4:	af00      	add	r7, sp, #0
100019e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
100019e8:	f04f 31ff 	mov.w	r1, #4294967295
100019ec:	6878      	ldr	r0, [r7, #4]
100019ee:	f7ff ffe7 	bl	100019c0 <_kill>
  while (1) {}    /* Make sure we hang here */
100019f2:	bf00      	nop
100019f4:	e7fd      	b.n	100019f2 <_exit+0x12>

100019f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100019f6:	b580      	push	{r7, lr}
100019f8:	b086      	sub	sp, #24
100019fa:	af00      	add	r7, sp, #0
100019fc:	60f8      	str	r0, [r7, #12]
100019fe:	60b9      	str	r1, [r7, #8]
10001a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001a02:	2300      	movs	r3, #0
10001a04:	617b      	str	r3, [r7, #20]
10001a06:	e00a      	b.n	10001a1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
10001a08:	f3af 8000 	nop.w
10001a0c:	4601      	mov	r1, r0
10001a0e:	68bb      	ldr	r3, [r7, #8]
10001a10:	1c5a      	adds	r2, r3, #1
10001a12:	60ba      	str	r2, [r7, #8]
10001a14:	b2ca      	uxtb	r2, r1
10001a16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001a18:	697b      	ldr	r3, [r7, #20]
10001a1a:	3301      	adds	r3, #1
10001a1c:	617b      	str	r3, [r7, #20]
10001a1e:	697a      	ldr	r2, [r7, #20]
10001a20:	687b      	ldr	r3, [r7, #4]
10001a22:	429a      	cmp	r2, r3
10001a24:	dbf0      	blt.n	10001a08 <_read+0x12>
  }

  return len;
10001a26:	687b      	ldr	r3, [r7, #4]
}
10001a28:	4618      	mov	r0, r3
10001a2a:	3718      	adds	r7, #24
10001a2c:	46bd      	mov	sp, r7
10001a2e:	bd80      	pop	{r7, pc}

10001a30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10001a30:	b580      	push	{r7, lr}
10001a32:	b086      	sub	sp, #24
10001a34:	af00      	add	r7, sp, #0
10001a36:	60f8      	str	r0, [r7, #12]
10001a38:	60b9      	str	r1, [r7, #8]
10001a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001a3c:	2300      	movs	r3, #0
10001a3e:	617b      	str	r3, [r7, #20]
10001a40:	e009      	b.n	10001a56 <_write+0x26>
  {
    __io_putchar(*ptr++);
10001a42:	68bb      	ldr	r3, [r7, #8]
10001a44:	1c5a      	adds	r2, r3, #1
10001a46:	60ba      	str	r2, [r7, #8]
10001a48:	781b      	ldrb	r3, [r3, #0]
10001a4a:	4618      	mov	r0, r3
10001a4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001a50:	697b      	ldr	r3, [r7, #20]
10001a52:	3301      	adds	r3, #1
10001a54:	617b      	str	r3, [r7, #20]
10001a56:	697a      	ldr	r2, [r7, #20]
10001a58:	687b      	ldr	r3, [r7, #4]
10001a5a:	429a      	cmp	r2, r3
10001a5c:	dbf1      	blt.n	10001a42 <_write+0x12>
  }
  return len;
10001a5e:	687b      	ldr	r3, [r7, #4]
}
10001a60:	4618      	mov	r0, r3
10001a62:	3718      	adds	r7, #24
10001a64:	46bd      	mov	sp, r7
10001a66:	bd80      	pop	{r7, pc}

10001a68 <_close>:

int _close(int file)
{
10001a68:	b480      	push	{r7}
10001a6a:	b083      	sub	sp, #12
10001a6c:	af00      	add	r7, sp, #0
10001a6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10001a70:	f04f 33ff 	mov.w	r3, #4294967295
}
10001a74:	4618      	mov	r0, r3
10001a76:	370c      	adds	r7, #12
10001a78:	46bd      	mov	sp, r7
10001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a7e:	4770      	bx	lr

10001a80 <_fstat>:


int _fstat(int file, struct stat *st)
{
10001a80:	b480      	push	{r7}
10001a82:	b083      	sub	sp, #12
10001a84:	af00      	add	r7, sp, #0
10001a86:	6078      	str	r0, [r7, #4]
10001a88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10001a8a:	683b      	ldr	r3, [r7, #0]
10001a8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
10001a90:	605a      	str	r2, [r3, #4]
  return 0;
10001a92:	2300      	movs	r3, #0
}
10001a94:	4618      	mov	r0, r3
10001a96:	370c      	adds	r7, #12
10001a98:	46bd      	mov	sp, r7
10001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a9e:	4770      	bx	lr

10001aa0 <_isatty>:

int _isatty(int file)
{
10001aa0:	b480      	push	{r7}
10001aa2:	b083      	sub	sp, #12
10001aa4:	af00      	add	r7, sp, #0
10001aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10001aa8:	2301      	movs	r3, #1
}
10001aaa:	4618      	mov	r0, r3
10001aac:	370c      	adds	r7, #12
10001aae:	46bd      	mov	sp, r7
10001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ab4:	4770      	bx	lr

10001ab6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10001ab6:	b480      	push	{r7}
10001ab8:	b085      	sub	sp, #20
10001aba:	af00      	add	r7, sp, #0
10001abc:	60f8      	str	r0, [r7, #12]
10001abe:	60b9      	str	r1, [r7, #8]
10001ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10001ac2:	2300      	movs	r3, #0
}
10001ac4:	4618      	mov	r0, r3
10001ac6:	3714      	adds	r7, #20
10001ac8:	46bd      	mov	sp, r7
10001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ace:	4770      	bx	lr

10001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10001ad0:	b580      	push	{r7, lr}
10001ad2:	b086      	sub	sp, #24
10001ad4:	af00      	add	r7, sp, #0
10001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10001ad8:	4a14      	ldr	r2, [pc, #80]	@ (10001b2c <_sbrk+0x5c>)
10001ada:	4b15      	ldr	r3, [pc, #84]	@ (10001b30 <_sbrk+0x60>)
10001adc:	1ad3      	subs	r3, r2, r3
10001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10001ae0:	697b      	ldr	r3, [r7, #20]
10001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10001ae4:	4b13      	ldr	r3, [pc, #76]	@ (10001b34 <_sbrk+0x64>)
10001ae6:	681b      	ldr	r3, [r3, #0]
10001ae8:	2b00      	cmp	r3, #0
10001aea:	d102      	bne.n	10001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10001aec:	4b11      	ldr	r3, [pc, #68]	@ (10001b34 <_sbrk+0x64>)
10001aee:	4a12      	ldr	r2, [pc, #72]	@ (10001b38 <_sbrk+0x68>)
10001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10001af2:	4b10      	ldr	r3, [pc, #64]	@ (10001b34 <_sbrk+0x64>)
10001af4:	681a      	ldr	r2, [r3, #0]
10001af6:	687b      	ldr	r3, [r7, #4]
10001af8:	4413      	add	r3, r2
10001afa:	693a      	ldr	r2, [r7, #16]
10001afc:	429a      	cmp	r2, r3
10001afe:	d207      	bcs.n	10001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
10001b00:	f008 f844 	bl	10009b8c <__errno>
10001b04:	4603      	mov	r3, r0
10001b06:	220c      	movs	r2, #12
10001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10001b0a:	f04f 33ff 	mov.w	r3, #4294967295
10001b0e:	e009      	b.n	10001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10001b10:	4b08      	ldr	r3, [pc, #32]	@ (10001b34 <_sbrk+0x64>)
10001b12:	681b      	ldr	r3, [r3, #0]
10001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10001b16:	4b07      	ldr	r3, [pc, #28]	@ (10001b34 <_sbrk+0x64>)
10001b18:	681a      	ldr	r2, [r3, #0]
10001b1a:	687b      	ldr	r3, [r7, #4]
10001b1c:	4413      	add	r3, r2
10001b1e:	4a05      	ldr	r2, [pc, #20]	@ (10001b34 <_sbrk+0x64>)
10001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10001b22:	68fb      	ldr	r3, [r7, #12]
}
10001b24:	4618      	mov	r0, r3
10001b26:	3718      	adds	r7, #24
10001b28:	46bd      	mov	sp, r7
10001b2a:	bd80      	pop	{r7, pc}
10001b2c:	10040000 	.word	0x10040000
10001b30:	00000400 	.word	0x00000400
10001b34:	10020440 	.word	0x10020440
10001b38:	10020668 	.word	0x10020668

10001b3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10001b3c:	e7fe      	b.n	10001b3c <ADC1_IRQHandler>
	...

10001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10001b40:	b580      	push	{r7, lr}
10001b42:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10001b44:	2003      	movs	r0, #3
10001b46:	f000 f95f 	bl	10001e08 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001b4a:	f001 ff04 	bl	10003956 <HAL_RCC_GetSystemCoreClockFreq>
10001b4e:	4603      	mov	r3, r0
10001b50:	4a07      	ldr	r2, [pc, #28]	@ (10001b70 <HAL_Init+0x30>)
10001b52:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10001b54:	2001      	movs	r0, #1
10001b56:	f000 f80d 	bl	10001b74 <HAL_InitTick>
10001b5a:	4603      	mov	r3, r0
10001b5c:	2b00      	cmp	r3, #0
10001b5e:	d001      	beq.n	10001b64 <HAL_Init+0x24>
  {
    return HAL_ERROR;
10001b60:	2301      	movs	r3, #1
10001b62:	e002      	b.n	10001b6a <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10001b64:	f7ff fdf0 	bl	10001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10001b68:	2300      	movs	r3, #0
}
10001b6a:	4618      	mov	r0, r3
10001b6c:	bd80      	pop	{r7, pc}
10001b6e:	bf00      	nop
10001b70:	10020000 	.word	0x10020000

10001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10001b74:	b580      	push	{r7, lr}
10001b76:	b082      	sub	sp, #8
10001b78:	af00      	add	r7, sp, #0
10001b7a:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10001b7c:	4b15      	ldr	r3, [pc, #84]	@ (10001bd4 <HAL_InitTick+0x60>)
10001b7e:	781b      	ldrb	r3, [r3, #0]
10001b80:	2b00      	cmp	r3, #0
10001b82:	d101      	bne.n	10001b88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10001b84:	2301      	movs	r3, #1
10001b86:	e021      	b.n	10001bcc <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10001b88:	4b13      	ldr	r3, [pc, #76]	@ (10001bd8 <HAL_InitTick+0x64>)
10001b8a:	681a      	ldr	r2, [r3, #0]
10001b8c:	4b11      	ldr	r3, [pc, #68]	@ (10001bd4 <HAL_InitTick+0x60>)
10001b8e:	781b      	ldrb	r3, [r3, #0]
10001b90:	4619      	mov	r1, r3
10001b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
10001b96:	fbb3 f3f1 	udiv	r3, r3, r1
10001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
10001b9e:	4618      	mov	r0, r3
10001ba0:	f000 f967 	bl	10001e72 <HAL_SYSTICK_Config>
10001ba4:	4603      	mov	r3, r0
10001ba6:	2b00      	cmp	r3, #0
10001ba8:	d001      	beq.n	10001bae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10001baa:	2301      	movs	r3, #1
10001bac:	e00e      	b.n	10001bcc <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10001bae:	687b      	ldr	r3, [r7, #4]
10001bb0:	2b0f      	cmp	r3, #15
10001bb2:	d80a      	bhi.n	10001bca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10001bb4:	2200      	movs	r2, #0
10001bb6:	6879      	ldr	r1, [r7, #4]
10001bb8:	f04f 30ff 	mov.w	r0, #4294967295
10001bbc:	f000 f92f 	bl	10001e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10001bc0:	4a06      	ldr	r2, [pc, #24]	@ (10001bdc <HAL_InitTick+0x68>)
10001bc2:	687b      	ldr	r3, [r7, #4]
10001bc4:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10001bc6:	2300      	movs	r3, #0
10001bc8:	e000      	b.n	10001bcc <HAL_InitTick+0x58>
    return HAL_ERROR;
10001bca:	2301      	movs	r3, #1
}
10001bcc:	4618      	mov	r0, r3
10001bce:	3708      	adds	r7, #8
10001bd0:	46bd      	mov	sp, r7
10001bd2:	bd80      	pop	{r7, pc}
10001bd4:	10020010 	.word	0x10020010
10001bd8:	10020000 	.word	0x10020000
10001bdc:	1002000c 	.word	0x1002000c

10001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10001be0:	b480      	push	{r7}
10001be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10001be4:	4b06      	ldr	r3, [pc, #24]	@ (10001c00 <HAL_IncTick+0x20>)
10001be6:	781b      	ldrb	r3, [r3, #0]
10001be8:	461a      	mov	r2, r3
10001bea:	4b06      	ldr	r3, [pc, #24]	@ (10001c04 <HAL_IncTick+0x24>)
10001bec:	681b      	ldr	r3, [r3, #0]
10001bee:	4413      	add	r3, r2
10001bf0:	4a04      	ldr	r2, [pc, #16]	@ (10001c04 <HAL_IncTick+0x24>)
10001bf2:	6013      	str	r3, [r2, #0]
}
10001bf4:	bf00      	nop
10001bf6:	46bd      	mov	sp, r7
10001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bfc:	4770      	bx	lr
10001bfe:	bf00      	nop
10001c00:	10020010 	.word	0x10020010
10001c04:	10020444 	.word	0x10020444

10001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10001c08:	b480      	push	{r7}
10001c0a:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10001c0c:	4b03      	ldr	r3, [pc, #12]	@ (10001c1c <HAL_GetTick+0x14>)
10001c0e:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10001c10:	4618      	mov	r0, r3
10001c12:	46bd      	mov	sp, r7
10001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c18:	4770      	bx	lr
10001c1a:	bf00      	nop
10001c1c:	10020444 	.word	0x10020444

10001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10001c20:	b580      	push	{r7, lr}
10001c22:	b084      	sub	sp, #16
10001c24:	af00      	add	r7, sp, #0
10001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10001c28:	f7ff ffee 	bl	10001c08 <HAL_GetTick>
10001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10001c2e:	687b      	ldr	r3, [r7, #4]
10001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10001c32:	68fb      	ldr	r3, [r7, #12]
10001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
10001c38:	d005      	beq.n	10001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (10001c64 <HAL_Delay+0x44>)
10001c3c:	781b      	ldrb	r3, [r3, #0]
10001c3e:	461a      	mov	r2, r3
10001c40:	68fb      	ldr	r3, [r7, #12]
10001c42:	4413      	add	r3, r2
10001c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10001c46:	bf00      	nop
10001c48:	f7ff ffde 	bl	10001c08 <HAL_GetTick>
10001c4c:	4602      	mov	r2, r0
10001c4e:	68bb      	ldr	r3, [r7, #8]
10001c50:	1ad3      	subs	r3, r2, r3
10001c52:	68fa      	ldr	r2, [r7, #12]
10001c54:	429a      	cmp	r2, r3
10001c56:	d8f7      	bhi.n	10001c48 <HAL_Delay+0x28>
  {
  }
}
10001c58:	bf00      	nop
10001c5a:	bf00      	nop
10001c5c:	3710      	adds	r7, #16
10001c5e:	46bd      	mov	sp, r7
10001c60:	bd80      	pop	{r7, pc}
10001c62:	bf00      	nop
10001c64:	10020010 	.word	0x10020010

10001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10001c68:	b480      	push	{r7}
10001c6a:	b085      	sub	sp, #20
10001c6c:	af00      	add	r7, sp, #0
10001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10001c70:	687b      	ldr	r3, [r7, #4]
10001c72:	f003 0307 	and.w	r3, r3, #7
10001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10001c78:	4b0c      	ldr	r3, [pc, #48]	@ (10001cac <__NVIC_SetPriorityGrouping+0x44>)
10001c7a:	68db      	ldr	r3, [r3, #12]
10001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10001c7e:	68ba      	ldr	r2, [r7, #8]
10001c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10001c84:	4013      	ands	r3, r2
10001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10001c88:	68fb      	ldr	r3, [r7, #12]
10001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10001c8c:	68bb      	ldr	r3, [r7, #8]
10001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10001c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10001c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
10001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10001c9a:	4a04      	ldr	r2, [pc, #16]	@ (10001cac <__NVIC_SetPriorityGrouping+0x44>)
10001c9c:	68bb      	ldr	r3, [r7, #8]
10001c9e:	60d3      	str	r3, [r2, #12]
}
10001ca0:	bf00      	nop
10001ca2:	3714      	adds	r7, #20
10001ca4:	46bd      	mov	sp, r7
10001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
10001caa:	4770      	bx	lr
10001cac:	e000ed00 	.word	0xe000ed00

10001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10001cb0:	b480      	push	{r7}
10001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10001cb4:	4b04      	ldr	r3, [pc, #16]	@ (10001cc8 <__NVIC_GetPriorityGrouping+0x18>)
10001cb6:	68db      	ldr	r3, [r3, #12]
10001cb8:	0a1b      	lsrs	r3, r3, #8
10001cba:	f003 0307 	and.w	r3, r3, #7
}
10001cbe:	4618      	mov	r0, r3
10001cc0:	46bd      	mov	sp, r7
10001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
10001cc6:	4770      	bx	lr
10001cc8:	e000ed00 	.word	0xe000ed00

10001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001ccc:	b480      	push	{r7}
10001cce:	b083      	sub	sp, #12
10001cd0:	af00      	add	r7, sp, #0
10001cd2:	4603      	mov	r3, r0
10001cd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10001cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001cda:	2b00      	cmp	r3, #0
10001cdc:	db0b      	blt.n	10001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10001cde:	88fb      	ldrh	r3, [r7, #6]
10001ce0:	f003 021f 	and.w	r2, r3, #31
10001ce4:	4907      	ldr	r1, [pc, #28]	@ (10001d04 <__NVIC_EnableIRQ+0x38>)
10001ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001cea:	095b      	lsrs	r3, r3, #5
10001cec:	2001      	movs	r0, #1
10001cee:	fa00 f202 	lsl.w	r2, r0, r2
10001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10001cf6:	bf00      	nop
10001cf8:	370c      	adds	r7, #12
10001cfa:	46bd      	mov	sp, r7
10001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d00:	4770      	bx	lr
10001d02:	bf00      	nop
10001d04:	e000e100 	.word	0xe000e100

10001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10001d08:	b480      	push	{r7}
10001d0a:	b083      	sub	sp, #12
10001d0c:	af00      	add	r7, sp, #0
10001d0e:	4603      	mov	r3, r0
10001d10:	6039      	str	r1, [r7, #0]
10001d12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10001d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001d18:	2b00      	cmp	r3, #0
10001d1a:	db0a      	blt.n	10001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10001d1c:	683b      	ldr	r3, [r7, #0]
10001d1e:	b2da      	uxtb	r2, r3
10001d20:	490c      	ldr	r1, [pc, #48]	@ (10001d54 <__NVIC_SetPriority+0x4c>)
10001d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001d26:	0112      	lsls	r2, r2, #4
10001d28:	b2d2      	uxtb	r2, r2
10001d2a:	440b      	add	r3, r1
10001d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10001d30:	e00a      	b.n	10001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10001d32:	683b      	ldr	r3, [r7, #0]
10001d34:	b2da      	uxtb	r2, r3
10001d36:	4908      	ldr	r1, [pc, #32]	@ (10001d58 <__NVIC_SetPriority+0x50>)
10001d38:	88fb      	ldrh	r3, [r7, #6]
10001d3a:	f003 030f 	and.w	r3, r3, #15
10001d3e:	3b04      	subs	r3, #4
10001d40:	0112      	lsls	r2, r2, #4
10001d42:	b2d2      	uxtb	r2, r2
10001d44:	440b      	add	r3, r1
10001d46:	761a      	strb	r2, [r3, #24]
}
10001d48:	bf00      	nop
10001d4a:	370c      	adds	r7, #12
10001d4c:	46bd      	mov	sp, r7
10001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d52:	4770      	bx	lr
10001d54:	e000e100 	.word	0xe000e100
10001d58:	e000ed00 	.word	0xe000ed00

10001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001d5c:	b480      	push	{r7}
10001d5e:	b089      	sub	sp, #36	@ 0x24
10001d60:	af00      	add	r7, sp, #0
10001d62:	60f8      	str	r0, [r7, #12]
10001d64:	60b9      	str	r1, [r7, #8]
10001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10001d68:	68fb      	ldr	r3, [r7, #12]
10001d6a:	f003 0307 	and.w	r3, r3, #7
10001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10001d70:	69fb      	ldr	r3, [r7, #28]
10001d72:	f1c3 0307 	rsb	r3, r3, #7
10001d76:	2b04      	cmp	r3, #4
10001d78:	bf28      	it	cs
10001d7a:	2304      	movcs	r3, #4
10001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10001d7e:	69fb      	ldr	r3, [r7, #28]
10001d80:	3304      	adds	r3, #4
10001d82:	2b06      	cmp	r3, #6
10001d84:	d902      	bls.n	10001d8c <NVIC_EncodePriority+0x30>
10001d86:	69fb      	ldr	r3, [r7, #28]
10001d88:	3b03      	subs	r3, #3
10001d8a:	e000      	b.n	10001d8e <NVIC_EncodePriority+0x32>
10001d8c:	2300      	movs	r3, #0
10001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001d90:	f04f 32ff 	mov.w	r2, #4294967295
10001d94:	69bb      	ldr	r3, [r7, #24]
10001d96:	fa02 f303 	lsl.w	r3, r2, r3
10001d9a:	43da      	mvns	r2, r3
10001d9c:	68bb      	ldr	r3, [r7, #8]
10001d9e:	401a      	ands	r2, r3
10001da0:	697b      	ldr	r3, [r7, #20]
10001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10001da4:	f04f 31ff 	mov.w	r1, #4294967295
10001da8:	697b      	ldr	r3, [r7, #20]
10001daa:	fa01 f303 	lsl.w	r3, r1, r3
10001dae:	43d9      	mvns	r1, r3
10001db0:	687b      	ldr	r3, [r7, #4]
10001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001db4:	4313      	orrs	r3, r2
         );
}
10001db6:	4618      	mov	r0, r3
10001db8:	3724      	adds	r7, #36	@ 0x24
10001dba:	46bd      	mov	sp, r7
10001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dc0:	4770      	bx	lr
	...

10001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10001dc4:	b580      	push	{r7, lr}
10001dc6:	b082      	sub	sp, #8
10001dc8:	af00      	add	r7, sp, #0
10001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10001dcc:	687b      	ldr	r3, [r7, #4]
10001dce:	3b01      	subs	r3, #1
10001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10001dd4:	d301      	bcc.n	10001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10001dd6:	2301      	movs	r3, #1
10001dd8:	e00f      	b.n	10001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10001dda:	4a0a      	ldr	r2, [pc, #40]	@ (10001e04 <SysTick_Config+0x40>)
10001ddc:	687b      	ldr	r3, [r7, #4]
10001dde:	3b01      	subs	r3, #1
10001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10001de2:	210f      	movs	r1, #15
10001de4:	f04f 30ff 	mov.w	r0, #4294967295
10001de8:	f7ff ff8e 	bl	10001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10001dec:	4b05      	ldr	r3, [pc, #20]	@ (10001e04 <SysTick_Config+0x40>)
10001dee:	2200      	movs	r2, #0
10001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10001df2:	4b04      	ldr	r3, [pc, #16]	@ (10001e04 <SysTick_Config+0x40>)
10001df4:	2207      	movs	r2, #7
10001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10001df8:	2300      	movs	r3, #0
}
10001dfa:	4618      	mov	r0, r3
10001dfc:	3708      	adds	r7, #8
10001dfe:	46bd      	mov	sp, r7
10001e00:	bd80      	pop	{r7, pc}
10001e02:	bf00      	nop
10001e04:	e000e010 	.word	0xe000e010

10001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10001e08:	b580      	push	{r7, lr}
10001e0a:	b082      	sub	sp, #8
10001e0c:	af00      	add	r7, sp, #0
10001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10001e10:	6878      	ldr	r0, [r7, #4]
10001e12:	f7ff ff29 	bl	10001c68 <__NVIC_SetPriorityGrouping>
}
10001e16:	bf00      	nop
10001e18:	3708      	adds	r7, #8
10001e1a:	46bd      	mov	sp, r7
10001e1c:	bd80      	pop	{r7, pc}

10001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001e1e:	b580      	push	{r7, lr}
10001e20:	b086      	sub	sp, #24
10001e22:	af00      	add	r7, sp, #0
10001e24:	4603      	mov	r3, r0
10001e26:	60b9      	str	r1, [r7, #8]
10001e28:	607a      	str	r2, [r7, #4]
10001e2a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10001e2c:	2300      	movs	r3, #0
10001e2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10001e30:	f7ff ff3e 	bl	10001cb0 <__NVIC_GetPriorityGrouping>
10001e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10001e36:	687a      	ldr	r2, [r7, #4]
10001e38:	68b9      	ldr	r1, [r7, #8]
10001e3a:	6978      	ldr	r0, [r7, #20]
10001e3c:	f7ff ff8e 	bl	10001d5c <NVIC_EncodePriority>
10001e40:	4602      	mov	r2, r0
10001e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10001e46:	4611      	mov	r1, r2
10001e48:	4618      	mov	r0, r3
10001e4a:	f7ff ff5d 	bl	10001d08 <__NVIC_SetPriority>
}
10001e4e:	bf00      	nop
10001e50:	3718      	adds	r7, #24
10001e52:	46bd      	mov	sp, r7
10001e54:	bd80      	pop	{r7, pc}

10001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001e56:	b580      	push	{r7, lr}
10001e58:	b082      	sub	sp, #8
10001e5a:	af00      	add	r7, sp, #0
10001e5c:	4603      	mov	r3, r0
10001e5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10001e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001e64:	4618      	mov	r0, r3
10001e66:	f7ff ff31 	bl	10001ccc <__NVIC_EnableIRQ>
}
10001e6a:	bf00      	nop
10001e6c:	3708      	adds	r7, #8
10001e6e:	46bd      	mov	sp, r7
10001e70:	bd80      	pop	{r7, pc}

10001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10001e72:	b580      	push	{r7, lr}
10001e74:	b082      	sub	sp, #8
10001e76:	af00      	add	r7, sp, #0
10001e78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10001e7a:	6878      	ldr	r0, [r7, #4]
10001e7c:	f7ff ffa2 	bl	10001dc4 <SysTick_Config>
10001e80:	4603      	mov	r3, r0
}
10001e82:	4618      	mov	r0, r3
10001e84:	3708      	adds	r7, #8
10001e86:	46bd      	mov	sp, r7
10001e88:	bd80      	pop	{r7, pc}
	...

10001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10001e8c:	b480      	push	{r7}
10001e8e:	b089      	sub	sp, #36	@ 0x24
10001e90:	af00      	add	r7, sp, #0
10001e92:	6078      	str	r0, [r7, #4]
10001e94:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10001e96:	4b8a      	ldr	r3, [pc, #552]	@ (100020c0 <HAL_GPIO_Init+0x234>)
10001e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10001e9a:	2300      	movs	r3, #0
10001e9c:	61fb      	str	r3, [r7, #28]
10001e9e:	e191      	b.n	100021c4 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10001ea0:	2201      	movs	r2, #1
10001ea2:	69fb      	ldr	r3, [r7, #28]
10001ea4:	fa02 f303 	lsl.w	r3, r2, r3
10001ea8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10001eaa:	683b      	ldr	r3, [r7, #0]
10001eac:	681b      	ldr	r3, [r3, #0]
10001eae:	693a      	ldr	r2, [r7, #16]
10001eb0:	4013      	ands	r3, r2
10001eb2:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10001eb4:	68fa      	ldr	r2, [r7, #12]
10001eb6:	693b      	ldr	r3, [r7, #16]
10001eb8:	429a      	cmp	r2, r3
10001eba:	f040 8180 	bne.w	100021be <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001ebe:	683b      	ldr	r3, [r7, #0]
10001ec0:	685b      	ldr	r3, [r3, #4]
10001ec2:	2b02      	cmp	r3, #2
10001ec4:	d003      	beq.n	10001ece <HAL_GPIO_Init+0x42>
10001ec6:	683b      	ldr	r3, [r7, #0]
10001ec8:	685b      	ldr	r3, [r3, #4]
10001eca:	2b12      	cmp	r3, #18
10001ecc:	d123      	bne.n	10001f16 <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10001ece:	69fb      	ldr	r3, [r7, #28]
10001ed0:	08da      	lsrs	r2, r3, #3
10001ed2:	687b      	ldr	r3, [r7, #4]
10001ed4:	3208      	adds	r2, #8
10001ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10001edc:	69fb      	ldr	r3, [r7, #28]
10001ede:	f003 0307 	and.w	r3, r3, #7
10001ee2:	009b      	lsls	r3, r3, #2
10001ee4:	220f      	movs	r2, #15
10001ee6:	fa02 f303 	lsl.w	r3, r2, r3
10001eea:	43db      	mvns	r3, r3
10001eec:	69ba      	ldr	r2, [r7, #24]
10001eee:	4013      	ands	r3, r2
10001ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10001ef2:	683b      	ldr	r3, [r7, #0]
10001ef4:	691a      	ldr	r2, [r3, #16]
10001ef6:	69fb      	ldr	r3, [r7, #28]
10001ef8:	f003 0307 	and.w	r3, r3, #7
10001efc:	009b      	lsls	r3, r3, #2
10001efe:	fa02 f303 	lsl.w	r3, r2, r3
10001f02:	69ba      	ldr	r2, [r7, #24]
10001f04:	4313      	orrs	r3, r2
10001f06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10001f08:	69fb      	ldr	r3, [r7, #28]
10001f0a:	08da      	lsrs	r2, r3, #3
10001f0c:	687b      	ldr	r3, [r7, #4]
10001f0e:	3208      	adds	r2, #8
10001f10:	69b9      	ldr	r1, [r7, #24]
10001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10001f16:	687b      	ldr	r3, [r7, #4]
10001f18:	681b      	ldr	r3, [r3, #0]
10001f1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10001f1c:	69fb      	ldr	r3, [r7, #28]
10001f1e:	005b      	lsls	r3, r3, #1
10001f20:	2203      	movs	r2, #3
10001f22:	fa02 f303 	lsl.w	r3, r2, r3
10001f26:	43db      	mvns	r3, r3
10001f28:	69ba      	ldr	r2, [r7, #24]
10001f2a:	4013      	ands	r3, r2
10001f2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10001f2e:	683b      	ldr	r3, [r7, #0]
10001f30:	685b      	ldr	r3, [r3, #4]
10001f32:	f003 0203 	and.w	r2, r3, #3
10001f36:	69fb      	ldr	r3, [r7, #28]
10001f38:	005b      	lsls	r3, r3, #1
10001f3a:	fa02 f303 	lsl.w	r3, r2, r3
10001f3e:	69ba      	ldr	r2, [r7, #24]
10001f40:	4313      	orrs	r3, r2
10001f42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10001f44:	687b      	ldr	r3, [r7, #4]
10001f46:	69ba      	ldr	r2, [r7, #24]
10001f48:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001f4a:	683b      	ldr	r3, [r7, #0]
10001f4c:	685b      	ldr	r3, [r3, #4]
10001f4e:	2b01      	cmp	r3, #1
10001f50:	d00b      	beq.n	10001f6a <HAL_GPIO_Init+0xde>
10001f52:	683b      	ldr	r3, [r7, #0]
10001f54:	685b      	ldr	r3, [r3, #4]
10001f56:	2b02      	cmp	r3, #2
10001f58:	d007      	beq.n	10001f6a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001f5a:	683b      	ldr	r3, [r7, #0]
10001f5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001f5e:	2b11      	cmp	r3, #17
10001f60:	d003      	beq.n	10001f6a <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001f62:	683b      	ldr	r3, [r7, #0]
10001f64:	685b      	ldr	r3, [r3, #4]
10001f66:	2b12      	cmp	r3, #18
10001f68:	d130      	bne.n	10001fcc <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10001f6a:	687b      	ldr	r3, [r7, #4]
10001f6c:	689b      	ldr	r3, [r3, #8]
10001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10001f70:	69fb      	ldr	r3, [r7, #28]
10001f72:	005b      	lsls	r3, r3, #1
10001f74:	2203      	movs	r2, #3
10001f76:	fa02 f303 	lsl.w	r3, r2, r3
10001f7a:	43db      	mvns	r3, r3
10001f7c:	69ba      	ldr	r2, [r7, #24]
10001f7e:	4013      	ands	r3, r2
10001f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10001f82:	683b      	ldr	r3, [r7, #0]
10001f84:	68da      	ldr	r2, [r3, #12]
10001f86:	69fb      	ldr	r3, [r7, #28]
10001f88:	005b      	lsls	r3, r3, #1
10001f8a:	fa02 f303 	lsl.w	r3, r2, r3
10001f8e:	69ba      	ldr	r2, [r7, #24]
10001f90:	4313      	orrs	r3, r2
10001f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10001f94:	687b      	ldr	r3, [r7, #4]
10001f96:	69ba      	ldr	r2, [r7, #24]
10001f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10001f9a:	687b      	ldr	r3, [r7, #4]
10001f9c:	685b      	ldr	r3, [r3, #4]
10001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10001fa0:	2201      	movs	r2, #1
10001fa2:	69fb      	ldr	r3, [r7, #28]
10001fa4:	fa02 f303 	lsl.w	r3, r2, r3
10001fa8:	43db      	mvns	r3, r3
10001faa:	69ba      	ldr	r2, [r7, #24]
10001fac:	4013      	ands	r3, r2
10001fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10001fb0:	683b      	ldr	r3, [r7, #0]
10001fb2:	685b      	ldr	r3, [r3, #4]
10001fb4:	091b      	lsrs	r3, r3, #4
10001fb6:	f003 0201 	and.w	r2, r3, #1
10001fba:	69fb      	ldr	r3, [r7, #28]
10001fbc:	fa02 f303 	lsl.w	r3, r2, r3
10001fc0:	69ba      	ldr	r2, [r7, #24]
10001fc2:	4313      	orrs	r3, r2
10001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10001fc6:	687b      	ldr	r3, [r7, #4]
10001fc8:	69ba      	ldr	r2, [r7, #24]
10001fca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10001fcc:	687b      	ldr	r3, [r7, #4]
10001fce:	68db      	ldr	r3, [r3, #12]
10001fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10001fd2:	69fb      	ldr	r3, [r7, #28]
10001fd4:	005b      	lsls	r3, r3, #1
10001fd6:	2203      	movs	r2, #3
10001fd8:	fa02 f303 	lsl.w	r3, r2, r3
10001fdc:	43db      	mvns	r3, r3
10001fde:	69ba      	ldr	r2, [r7, #24]
10001fe0:	4013      	ands	r3, r2
10001fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10001fe4:	683b      	ldr	r3, [r7, #0]
10001fe6:	689a      	ldr	r2, [r3, #8]
10001fe8:	69fb      	ldr	r3, [r7, #28]
10001fea:	005b      	lsls	r3, r3, #1
10001fec:	fa02 f303 	lsl.w	r3, r2, r3
10001ff0:	69ba      	ldr	r2, [r7, #24]
10001ff2:	4313      	orrs	r3, r2
10001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10001ff6:	687b      	ldr	r3, [r7, #4]
10001ff8:	69ba      	ldr	r2, [r7, #24]
10001ffa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10001ffc:	683b      	ldr	r3, [r7, #0]
10001ffe:	685b      	ldr	r3, [r3, #4]
10002000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
10002004:	2b00      	cmp	r3, #0
10002006:	f000 80da 	beq.w	100021be <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
1000200a:	4a2e      	ldr	r2, [pc, #184]	@ (100020c4 <HAL_GPIO_Init+0x238>)
1000200c:	69fb      	ldr	r3, [r7, #28]
1000200e:	089b      	lsrs	r3, r3, #2
10002010:	3318      	adds	r3, #24
10002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10002018:	69fb      	ldr	r3, [r7, #28]
1000201a:	f003 0303 	and.w	r3, r3, #3
1000201e:	00db      	lsls	r3, r3, #3
10002020:	22ff      	movs	r2, #255	@ 0xff
10002022:	fa02 f303 	lsl.w	r3, r2, r3
10002026:	43db      	mvns	r3, r3
10002028:	69ba      	ldr	r2, [r7, #24]
1000202a:	4013      	ands	r3, r2
1000202c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
1000202e:	687b      	ldr	r3, [r7, #4]
10002030:	4a25      	ldr	r2, [pc, #148]	@ (100020c8 <HAL_GPIO_Init+0x23c>)
10002032:	4293      	cmp	r3, r2
10002034:	d05e      	beq.n	100020f4 <HAL_GPIO_Init+0x268>
10002036:	687b      	ldr	r3, [r7, #4]
10002038:	4a24      	ldr	r2, [pc, #144]	@ (100020cc <HAL_GPIO_Init+0x240>)
1000203a:	4293      	cmp	r3, r2
1000203c:	d03d      	beq.n	100020ba <HAL_GPIO_Init+0x22e>
1000203e:	687b      	ldr	r3, [r7, #4]
10002040:	4a23      	ldr	r2, [pc, #140]	@ (100020d0 <HAL_GPIO_Init+0x244>)
10002042:	4293      	cmp	r3, r2
10002044:	d037      	beq.n	100020b6 <HAL_GPIO_Init+0x22a>
10002046:	687b      	ldr	r3, [r7, #4]
10002048:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
1000204c:	d031      	beq.n	100020b2 <HAL_GPIO_Init+0x226>
1000204e:	687b      	ldr	r3, [r7, #4]
10002050:	4a20      	ldr	r2, [pc, #128]	@ (100020d4 <HAL_GPIO_Init+0x248>)
10002052:	4293      	cmp	r3, r2
10002054:	d02b      	beq.n	100020ae <HAL_GPIO_Init+0x222>
10002056:	687b      	ldr	r3, [r7, #4]
10002058:	4a1f      	ldr	r2, [pc, #124]	@ (100020d8 <HAL_GPIO_Init+0x24c>)
1000205a:	4293      	cmp	r3, r2
1000205c:	d025      	beq.n	100020aa <HAL_GPIO_Init+0x21e>
1000205e:	687b      	ldr	r3, [r7, #4]
10002060:	4a1e      	ldr	r2, [pc, #120]	@ (100020dc <HAL_GPIO_Init+0x250>)
10002062:	4293      	cmp	r3, r2
10002064:	d01f      	beq.n	100020a6 <HAL_GPIO_Init+0x21a>
10002066:	687b      	ldr	r3, [r7, #4]
10002068:	4a1d      	ldr	r2, [pc, #116]	@ (100020e0 <HAL_GPIO_Init+0x254>)
1000206a:	4293      	cmp	r3, r2
1000206c:	d019      	beq.n	100020a2 <HAL_GPIO_Init+0x216>
1000206e:	687b      	ldr	r3, [r7, #4]
10002070:	4a1c      	ldr	r2, [pc, #112]	@ (100020e4 <HAL_GPIO_Init+0x258>)
10002072:	4293      	cmp	r3, r2
10002074:	d013      	beq.n	1000209e <HAL_GPIO_Init+0x212>
10002076:	687b      	ldr	r3, [r7, #4]
10002078:	4a1b      	ldr	r2, [pc, #108]	@ (100020e8 <HAL_GPIO_Init+0x25c>)
1000207a:	4293      	cmp	r3, r2
1000207c:	d00d      	beq.n	1000209a <HAL_GPIO_Init+0x20e>
1000207e:	687b      	ldr	r3, [r7, #4]
10002080:	4a1a      	ldr	r2, [pc, #104]	@ (100020ec <HAL_GPIO_Init+0x260>)
10002082:	4293      	cmp	r3, r2
10002084:	d007      	beq.n	10002096 <HAL_GPIO_Init+0x20a>
10002086:	687b      	ldr	r3, [r7, #4]
10002088:	4a19      	ldr	r2, [pc, #100]	@ (100020f0 <HAL_GPIO_Init+0x264>)
1000208a:	4293      	cmp	r3, r2
1000208c:	d101      	bne.n	10002092 <HAL_GPIO_Init+0x206>
1000208e:	230b      	movs	r3, #11
10002090:	e031      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
10002092:	2319      	movs	r3, #25
10002094:	e02f      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
10002096:	230a      	movs	r3, #10
10002098:	e02d      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
1000209a:	2309      	movs	r3, #9
1000209c:	e02b      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
1000209e:	2308      	movs	r3, #8
100020a0:	e029      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
100020a2:	2307      	movs	r3, #7
100020a4:	e027      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
100020a6:	2306      	movs	r3, #6
100020a8:	e025      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
100020aa:	2305      	movs	r3, #5
100020ac:	e023      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
100020ae:	2304      	movs	r3, #4
100020b0:	e021      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
100020b2:	2303      	movs	r3, #3
100020b4:	e01f      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
100020b6:	2302      	movs	r3, #2
100020b8:	e01d      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
100020ba:	2301      	movs	r3, #1
100020bc:	e01b      	b.n	100020f6 <HAL_GPIO_Init+0x26a>
100020be:	bf00      	nop
100020c0:	5000d0c0 	.word	0x5000d0c0
100020c4:	5000d000 	.word	0x5000d000
100020c8:	50002000 	.word	0x50002000
100020cc:	50003000 	.word	0x50003000
100020d0:	50004000 	.word	0x50004000
100020d4:	50006000 	.word	0x50006000
100020d8:	50007000 	.word	0x50007000
100020dc:	50008000 	.word	0x50008000
100020e0:	50009000 	.word	0x50009000
100020e4:	5000a000 	.word	0x5000a000
100020e8:	5000b000 	.word	0x5000b000
100020ec:	5000c000 	.word	0x5000c000
100020f0:	54004000 	.word	0x54004000
100020f4:	2300      	movs	r3, #0
100020f6:	69fa      	ldr	r2, [r7, #28]
100020f8:	f002 0203 	and.w	r2, r2, #3
100020fc:	00d2      	lsls	r2, r2, #3
100020fe:	4093      	lsls	r3, r2
10002100:	461a      	mov	r2, r3
10002102:	69bb      	ldr	r3, [r7, #24]
10002104:	4313      	orrs	r3, r2
10002106:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10002108:	4934      	ldr	r1, [pc, #208]	@ (100021dc <HAL_GPIO_Init+0x350>)
1000210a:	69fb      	ldr	r3, [r7, #28]
1000210c:	089b      	lsrs	r3, r3, #2
1000210e:	3318      	adds	r3, #24
10002110:	69ba      	ldr	r2, [r7, #24]
10002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10002116:	697b      	ldr	r3, [r7, #20]
10002118:	681b      	ldr	r3, [r3, #0]
1000211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000211c:	68fb      	ldr	r3, [r7, #12]
1000211e:	43db      	mvns	r3, r3
10002120:	69ba      	ldr	r2, [r7, #24]
10002122:	4013      	ands	r3, r2
10002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10002126:	683b      	ldr	r3, [r7, #0]
10002128:	685b      	ldr	r3, [r3, #4]
1000212a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
1000212e:	2b00      	cmp	r3, #0
10002130:	d003      	beq.n	1000213a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10002132:	69ba      	ldr	r2, [r7, #24]
10002134:	68fb      	ldr	r3, [r7, #12]
10002136:	4313      	orrs	r3, r2
10002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
1000213a:	697b      	ldr	r3, [r7, #20]
1000213c:	69ba      	ldr	r2, [r7, #24]
1000213e:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10002140:	697b      	ldr	r3, [r7, #20]
10002142:	685b      	ldr	r3, [r3, #4]
10002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10002146:	68fb      	ldr	r3, [r7, #12]
10002148:	43db      	mvns	r3, r3
1000214a:	69ba      	ldr	r2, [r7, #24]
1000214c:	4013      	ands	r3, r2
1000214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10002150:	683b      	ldr	r3, [r7, #0]
10002152:	685b      	ldr	r3, [r3, #4]
10002154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
10002158:	2b00      	cmp	r3, #0
1000215a:	d003      	beq.n	10002164 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
1000215c:	69ba      	ldr	r2, [r7, #24]
1000215e:	68fb      	ldr	r3, [r7, #12]
10002160:	4313      	orrs	r3, r2
10002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10002164:	697b      	ldr	r3, [r7, #20]
10002166:	69ba      	ldr	r2, [r7, #24]
10002168:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
1000216a:	4b1c      	ldr	r3, [pc, #112]	@ (100021dc <HAL_GPIO_Init+0x350>)
1000216c:	681b      	ldr	r3, [r3, #0]
1000216e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10002170:	68fb      	ldr	r3, [r7, #12]
10002172:	43db      	mvns	r3, r3
10002174:	69ba      	ldr	r2, [r7, #24]
10002176:	4013      	ands	r3, r2
10002178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
1000217a:	683b      	ldr	r3, [r7, #0]
1000217c:	685b      	ldr	r3, [r3, #4]
1000217e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
10002182:	2b00      	cmp	r3, #0
10002184:	d003      	beq.n	1000218e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10002186:	69ba      	ldr	r2, [r7, #24]
10002188:	68fb      	ldr	r3, [r7, #12]
1000218a:	4313      	orrs	r3, r2
1000218c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
1000218e:	4a13      	ldr	r2, [pc, #76]	@ (100021dc <HAL_GPIO_Init+0x350>)
10002190:	69bb      	ldr	r3, [r7, #24]
10002192:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10002194:	4b11      	ldr	r3, [pc, #68]	@ (100021dc <HAL_GPIO_Init+0x350>)
10002196:	685b      	ldr	r3, [r3, #4]
10002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000219a:	68fb      	ldr	r3, [r7, #12]
1000219c:	43db      	mvns	r3, r3
1000219e:	69ba      	ldr	r2, [r7, #24]
100021a0:	4013      	ands	r3, r2
100021a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
100021a4:	683b      	ldr	r3, [r7, #0]
100021a6:	685b      	ldr	r3, [r3, #4]
100021a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
100021ac:	2b00      	cmp	r3, #0
100021ae:	d003      	beq.n	100021b8 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
100021b0:	69ba      	ldr	r2, [r7, #24]
100021b2:	68fb      	ldr	r3, [r7, #12]
100021b4:	4313      	orrs	r3, r2
100021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
100021b8:	4a08      	ldr	r2, [pc, #32]	@ (100021dc <HAL_GPIO_Init+0x350>)
100021ba:	69bb      	ldr	r3, [r7, #24]
100021bc:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
100021be:	69fb      	ldr	r3, [r7, #28]
100021c0:	3301      	adds	r3, #1
100021c2:	61fb      	str	r3, [r7, #28]
100021c4:	69fb      	ldr	r3, [r7, #28]
100021c6:	2b0f      	cmp	r3, #15
100021c8:	f67f ae6a 	bls.w	10001ea0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
100021cc:	bf00      	nop
100021ce:	bf00      	nop
100021d0:	3724      	adds	r7, #36	@ 0x24
100021d2:	46bd      	mov	sp, r7
100021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100021d8:	4770      	bx	lr
100021da:	bf00      	nop
100021dc:	5000d000 	.word	0x5000d000

100021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
100021e0:	b480      	push	{r7}
100021e2:	b083      	sub	sp, #12
100021e4:	af00      	add	r7, sp, #0
100021e6:	6078      	str	r0, [r7, #4]
100021e8:	460b      	mov	r3, r1
100021ea:	807b      	strh	r3, [r7, #2]
100021ec:	4613      	mov	r3, r2
100021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
100021f0:	787b      	ldrb	r3, [r7, #1]
100021f2:	2b00      	cmp	r3, #0
100021f4:	d003      	beq.n	100021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
100021f6:	887a      	ldrh	r2, [r7, #2]
100021f8:	687b      	ldr	r3, [r7, #4]
100021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
100021fc:	e003      	b.n	10002206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
100021fe:	887b      	ldrh	r3, [r7, #2]
10002200:	041a      	lsls	r2, r3, #16
10002202:	687b      	ldr	r3, [r7, #4]
10002204:	619a      	str	r2, [r3, #24]
}
10002206:	bf00      	nop
10002208:	370c      	adds	r7, #12
1000220a:	46bd      	mov	sp, r7
1000220c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002210:	4770      	bx	lr
	...

10002214 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10002214:	b580      	push	{r7, lr}
10002216:	b084      	sub	sp, #16
10002218:	af00      	add	r7, sp, #0
1000221a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
1000221c:	2300      	movs	r3, #0
1000221e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10002220:	687b      	ldr	r3, [r7, #4]
10002222:	2b00      	cmp	r3, #0
10002224:	d01e      	beq.n	10002264 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10002226:	4b13      	ldr	r3, [pc, #76]	@ (10002274 <HAL_IPCC_Init+0x60>)
10002228:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
1000222a:	687b      	ldr	r3, [r7, #4]
1000222c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10002230:	b2db      	uxtb	r3, r3
10002232:	2b00      	cmp	r3, #0
10002234:	d102      	bne.n	1000223c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10002236:	6878      	ldr	r0, [r7, #4]
10002238:	f7ff fabc 	bl	100017b4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
1000223c:	68b8      	ldr	r0, [r7, #8]
1000223e:	f000 f9eb 	bl	10002618 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10002242:	68bb      	ldr	r3, [r7, #8]
10002244:	681b      	ldr	r3, [r3, #0]
10002246:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
1000224a:	68bb      	ldr	r3, [r7, #8]
1000224c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
1000224e:	6878      	ldr	r0, [r7, #4]
10002250:	f000 f9bc 	bl	100025cc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10002254:	687b      	ldr	r3, [r7, #4]
10002256:	2200      	movs	r2, #0
10002258:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
1000225a:	687b      	ldr	r3, [r7, #4]
1000225c:	2201      	movs	r2, #1
1000225e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
10002262:	e001      	b.n	10002268 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10002264:	2301      	movs	r3, #1
10002266:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10002268:	7bfb      	ldrb	r3, [r7, #15]
}
1000226a:	4618      	mov	r0, r3
1000226c:	3710      	adds	r7, #16
1000226e:	46bd      	mov	sp, r7
10002270:	bd80      	pop	{r7, pc}
10002272:	bf00      	nop
10002274:	4c001010 	.word	0x4c001010

10002278 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10002278:	b580      	push	{r7, lr}
1000227a:	b086      	sub	sp, #24
1000227c:	af00      	add	r7, sp, #0
1000227e:	60f8      	str	r0, [r7, #12]
10002280:	60b9      	str	r1, [r7, #8]
10002282:	603b      	str	r3, [r7, #0]
10002284:	4613      	mov	r3, r2
10002286:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10002288:	2300      	movs	r3, #0
1000228a:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
1000228c:	68fb      	ldr	r3, [r7, #12]
1000228e:	2b00      	cmp	r3, #0
10002290:	d039      	beq.n	10002306 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10002292:	68fb      	ldr	r3, [r7, #12]
10002294:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10002298:	b2db      	uxtb	r3, r3
1000229a:	2b01      	cmp	r3, #1
1000229c:	d130      	bne.n	10002300 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000229e:	79fb      	ldrb	r3, [r7, #7]
100022a0:	2b00      	cmp	r3, #0
100022a2:	d113      	bne.n	100022cc <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
100022a4:	68fa      	ldr	r2, [r7, #12]
100022a6:	68bb      	ldr	r3, [r7, #8]
100022a8:	3306      	adds	r3, #6
100022aa:	009b      	lsls	r3, r3, #2
100022ac:	4413      	add	r3, r2
100022ae:	683a      	ldr	r2, [r7, #0]
100022b0:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100022b2:	68fb      	ldr	r3, [r7, #12]
100022b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100022b6:	68bb      	ldr	r3, [r7, #8]
100022b8:	f003 030f 	and.w	r3, r3, #15
100022bc:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
100022c0:	fa01 f303 	lsl.w	r3, r1, r3
100022c4:	431a      	orrs	r2, r3
100022c6:	68fb      	ldr	r3, [r7, #12]
100022c8:	635a      	str	r2, [r3, #52]	@ 0x34
100022ca:	e010      	b.n	100022ee <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
100022cc:	68fa      	ldr	r2, [r7, #12]
100022ce:	68bb      	ldr	r3, [r7, #8]
100022d0:	009b      	lsls	r3, r3, #2
100022d2:	4413      	add	r3, r2
100022d4:	683a      	ldr	r2, [r7, #0]
100022d6:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100022d8:	68fb      	ldr	r3, [r7, #12]
100022da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100022dc:	68bb      	ldr	r3, [r7, #8]
100022de:	f003 030f 	and.w	r3, r3, #15
100022e2:	2101      	movs	r1, #1
100022e4:	fa01 f303 	lsl.w	r3, r1, r3
100022e8:	431a      	orrs	r2, r3
100022ea:	68fb      	ldr	r3, [r7, #12]
100022ec:	635a      	str	r2, [r3, #52]	@ 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
100022ee:	79fb      	ldrb	r3, [r7, #7]
100022f0:	2b01      	cmp	r3, #1
100022f2:	d10a      	bne.n	1000230a <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100022f4:	79fb      	ldrb	r3, [r7, #7]
100022f6:	4619      	mov	r1, r3
100022f8:	68b8      	ldr	r0, [r7, #8]
100022fa:	f000 f939 	bl	10002570 <IPCC_UnmaskInterrupt>
100022fe:	e004      	b.n	1000230a <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10002300:	2301      	movs	r3, #1
10002302:	75fb      	strb	r3, [r7, #23]
10002304:	e001      	b.n	1000230a <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10002306:	2301      	movs	r3, #1
10002308:	75fb      	strb	r3, [r7, #23]
  }
  return err;
1000230a:	7dfb      	ldrb	r3, [r7, #23]
}
1000230c:	4618      	mov	r0, r3
1000230e:	3718      	adds	r7, #24
10002310:	46bd      	mov	sp, r7
10002312:	bd80      	pop	{r7, pc}

10002314 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10002314:	b480      	push	{r7}
10002316:	b089      	sub	sp, #36	@ 0x24
10002318:	af00      	add	r7, sp, #0
1000231a:	60f8      	str	r0, [r7, #12]
1000231c:	60b9      	str	r1, [r7, #8]
1000231e:	4613      	mov	r3, r2
10002320:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10002322:	4b14      	ldr	r3, [pc, #80]	@ (10002374 <HAL_IPCC_GetChannelStatus+0x60>)
10002324:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10002326:	4b14      	ldr	r3, [pc, #80]	@ (10002378 <HAL_IPCC_GetChannelStatus+0x64>)
10002328:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000232a:	79fb      	ldrb	r3, [r7, #7]
1000232c:	2b00      	cmp	r3, #0
1000232e:	d10a      	bne.n	10002346 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10002330:	69bb      	ldr	r3, [r7, #24]
10002332:	68da      	ldr	r2, [r3, #12]
10002334:	68bb      	ldr	r3, [r7, #8]
10002336:	f003 030f 	and.w	r3, r3, #15
1000233a:	2101      	movs	r1, #1
1000233c:	fa01 f303 	lsl.w	r3, r1, r3
10002340:	4013      	ands	r3, r2
10002342:	61fb      	str	r3, [r7, #28]
10002344:	e009      	b.n	1000235a <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10002346:	697b      	ldr	r3, [r7, #20]
10002348:	68da      	ldr	r2, [r3, #12]
1000234a:	68bb      	ldr	r3, [r7, #8]
1000234c:	f003 030f 	and.w	r3, r3, #15
10002350:	2101      	movs	r1, #1
10002352:	fa01 f303 	lsl.w	r3, r1, r3
10002356:	4013      	ands	r3, r2
10002358:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
1000235a:	69fb      	ldr	r3, [r7, #28]
1000235c:	2b00      	cmp	r3, #0
1000235e:	bf14      	ite	ne
10002360:	2301      	movne	r3, #1
10002362:	2300      	moveq	r3, #0
10002364:	b2db      	uxtb	r3, r3
}
10002366:	4618      	mov	r0, r3
10002368:	3724      	adds	r7, #36	@ 0x24
1000236a:	46bd      	mov	sp, r7
1000236c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002370:	4770      	bx	lr
10002372:	bf00      	nop
10002374:	4c001010 	.word	0x4c001010
10002378:	4c001000 	.word	0x4c001000

1000237c <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000237c:	b580      	push	{r7, lr}
1000237e:	b088      	sub	sp, #32
10002380:	af00      	add	r7, sp, #0
10002382:	60f8      	str	r0, [r7, #12]
10002384:	60b9      	str	r1, [r7, #8]
10002386:	4613      	mov	r3, r2
10002388:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
1000238a:	2300      	movs	r3, #0
1000238c:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000238e:	4b1d      	ldr	r3, [pc, #116]	@ (10002404 <HAL_IPCC_NotifyCPU+0x88>)
10002390:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10002392:	68fb      	ldr	r3, [r7, #12]
10002394:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10002398:	b2db      	uxtb	r3, r3
1000239a:	2b01      	cmp	r3, #1
1000239c:	d12a      	bne.n	100023f4 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
1000239e:	69bb      	ldr	r3, [r7, #24]
100023a0:	689a      	ldr	r2, [r3, #8]
100023a2:	79fb      	ldrb	r3, [r7, #7]
100023a4:	2b00      	cmp	r3, #0
100023a6:	d102      	bne.n	100023ae <HAL_IPCC_NotifyCPU+0x32>
100023a8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
100023ac:	e000      	b.n	100023b0 <HAL_IPCC_NotifyCPU+0x34>
100023ae:	2101      	movs	r1, #1
100023b0:	68bb      	ldr	r3, [r7, #8]
100023b2:	f003 030f 	and.w	r3, r3, #15
100023b6:	fa01 f303 	lsl.w	r3, r1, r3
100023ba:	431a      	orrs	r2, r3
100023bc:	69bb      	ldr	r3, [r7, #24]
100023be:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
100023c0:	79fb      	ldrb	r3, [r7, #7]
100023c2:	2b00      	cmp	r3, #0
100023c4:	d102      	bne.n	100023cc <HAL_IPCC_NotifyCPU+0x50>
100023c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
100023ca:	e000      	b.n	100023ce <HAL_IPCC_NotifyCPU+0x52>
100023cc:	2201      	movs	r2, #1
100023ce:	68bb      	ldr	r3, [r7, #8]
100023d0:	f003 030f 	and.w	r3, r3, #15
100023d4:	fa02 f303 	lsl.w	r3, r2, r3
100023d8:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
100023da:	68fb      	ldr	r3, [r7, #12]
100023dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100023de:	697b      	ldr	r3, [r7, #20]
100023e0:	4013      	ands	r3, r2
100023e2:	697a      	ldr	r2, [r7, #20]
100023e4:	429a      	cmp	r2, r3
100023e6:	d107      	bne.n	100023f8 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100023e8:	79fb      	ldrb	r3, [r7, #7]
100023ea:	4619      	mov	r1, r3
100023ec:	68b8      	ldr	r0, [r7, #8]
100023ee:	f000 f8bf 	bl	10002570 <IPCC_UnmaskInterrupt>
100023f2:	e001      	b.n	100023f8 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
100023f4:	2301      	movs	r3, #1
100023f6:	77fb      	strb	r3, [r7, #31]
  }

  return err;
100023f8:	7ffb      	ldrb	r3, [r7, #31]
}
100023fa:	4618      	mov	r0, r3
100023fc:	3720      	adds	r7, #32
100023fe:	46bd      	mov	sp, r7
10002400:	bd80      	pop	{r7, pc}
10002402:	bf00      	nop
10002404:	4c001010 	.word	0x4c001010

10002408 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10002408:	b580      	push	{r7, lr}
1000240a:	b086      	sub	sp, #24
1000240c:	af00      	add	r7, sp, #0
1000240e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10002410:	2300      	movs	r3, #0
10002412:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10002414:	4b22      	ldr	r3, [pc, #136]	@ (100024a0 <HAL_IPCC_TX_IRQHandler+0x98>)
10002416:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10002418:	68fb      	ldr	r3, [r7, #12]
1000241a:	685b      	ldr	r3, [r3, #4]
1000241c:	43db      	mvns	r3, r3
1000241e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
10002422:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10002424:	68fb      	ldr	r3, [r7, #12]
10002426:	68db      	ldr	r3, [r3, #12]
10002428:	041b      	lsls	r3, r3, #16
1000242a:	43db      	mvns	r3, r3
1000242c:	697a      	ldr	r2, [r7, #20]
1000242e:	4013      	ands	r3, r2
10002430:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10002432:	e02c      	b.n	1000248e <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10002434:	693b      	ldr	r3, [r7, #16]
10002436:	f003 030f 	and.w	r3, r3, #15
1000243a:	3310      	adds	r3, #16
1000243c:	2201      	movs	r2, #1
1000243e:	fa02 f303 	lsl.w	r3, r2, r3
10002442:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10002444:	697a      	ldr	r2, [r7, #20]
10002446:	68bb      	ldr	r3, [r7, #8]
10002448:	4013      	ands	r3, r2
1000244a:	2b00      	cmp	r3, #0
1000244c:	d01c      	beq.n	10002488 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
1000244e:	68fb      	ldr	r3, [r7, #12]
10002450:	685a      	ldr	r2, [r3, #4]
10002452:	68bb      	ldr	r3, [r7, #8]
10002454:	431a      	orrs	r2, r3
10002456:	68fb      	ldr	r3, [r7, #12]
10002458:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
1000245a:	687a      	ldr	r2, [r7, #4]
1000245c:	693b      	ldr	r3, [r7, #16]
1000245e:	3306      	adds	r3, #6
10002460:	009b      	lsls	r3, r3, #2
10002462:	4413      	add	r3, r2
10002464:	685b      	ldr	r3, [r3, #4]
10002466:	2b00      	cmp	r3, #0
10002468:	d009      	beq.n	1000247e <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
1000246a:	687a      	ldr	r2, [r7, #4]
1000246c:	693b      	ldr	r3, [r7, #16]
1000246e:	3306      	adds	r3, #6
10002470:	009b      	lsls	r3, r3, #2
10002472:	4413      	add	r3, r2
10002474:	685b      	ldr	r3, [r3, #4]
10002476:	2200      	movs	r2, #0
10002478:	6939      	ldr	r1, [r7, #16]
1000247a:	6878      	ldr	r0, [r7, #4]
1000247c:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
1000247e:	68bb      	ldr	r3, [r7, #8]
10002480:	43db      	mvns	r3, r3
10002482:	697a      	ldr	r2, [r7, #20]
10002484:	4013      	ands	r3, r2
10002486:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
10002488:	693b      	ldr	r3, [r7, #16]
1000248a:	3301      	adds	r3, #1
1000248c:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000248e:	697b      	ldr	r3, [r7, #20]
10002490:	2b00      	cmp	r3, #0
10002492:	d1cf      	bne.n	10002434 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
10002494:	bf00      	nop
10002496:	bf00      	nop
10002498:	3718      	adds	r7, #24
1000249a:	46bd      	mov	sp, r7
1000249c:	bd80      	pop	{r7, pc}
1000249e:	bf00      	nop
100024a0:	4c001010 	.word	0x4c001010

100024a4 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
100024a4:	b580      	push	{r7, lr}
100024a6:	b088      	sub	sp, #32
100024a8:	af00      	add	r7, sp, #0
100024aa:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
100024ac:	2300      	movs	r3, #0
100024ae:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100024b0:	4b20      	ldr	r3, [pc, #128]	@ (10002534 <HAL_IPCC_RX_IRQHandler+0x90>)
100024b2:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
100024b4:	4b20      	ldr	r3, [pc, #128]	@ (10002538 <HAL_IPCC_RX_IRQHandler+0x94>)
100024b6:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
100024b8:	697b      	ldr	r3, [r7, #20]
100024ba:	685b      	ldr	r3, [r3, #4]
100024bc:	43db      	mvns	r3, r3
100024be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
100024c2:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
100024c4:	693b      	ldr	r3, [r7, #16]
100024c6:	68db      	ldr	r3, [r3, #12]
100024c8:	69fa      	ldr	r2, [r7, #28]
100024ca:	4013      	ands	r3, r2
100024cc:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100024ce:	e029      	b.n	10002524 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
100024d0:	69bb      	ldr	r3, [r7, #24]
100024d2:	f003 030f 	and.w	r3, r3, #15
100024d6:	2201      	movs	r2, #1
100024d8:	fa02 f303 	lsl.w	r3, r2, r3
100024dc:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
100024de:	69fa      	ldr	r2, [r7, #28]
100024e0:	68fb      	ldr	r3, [r7, #12]
100024e2:	4013      	ands	r3, r2
100024e4:	2b00      	cmp	r3, #0
100024e6:	d01a      	beq.n	1000251e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
100024e8:	697b      	ldr	r3, [r7, #20]
100024ea:	685a      	ldr	r2, [r3, #4]
100024ec:	68fb      	ldr	r3, [r7, #12]
100024ee:	431a      	orrs	r2, r3
100024f0:	697b      	ldr	r3, [r7, #20]
100024f2:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
100024f4:	687a      	ldr	r2, [r7, #4]
100024f6:	69bb      	ldr	r3, [r7, #24]
100024f8:	009b      	lsls	r3, r3, #2
100024fa:	4413      	add	r3, r2
100024fc:	685b      	ldr	r3, [r3, #4]
100024fe:	2b00      	cmp	r3, #0
10002500:	d008      	beq.n	10002514 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10002502:	687a      	ldr	r2, [r7, #4]
10002504:	69bb      	ldr	r3, [r7, #24]
10002506:	009b      	lsls	r3, r3, #2
10002508:	4413      	add	r3, r2
1000250a:	685b      	ldr	r3, [r3, #4]
1000250c:	2201      	movs	r2, #1
1000250e:	69b9      	ldr	r1, [r7, #24]
10002510:	6878      	ldr	r0, [r7, #4]
10002512:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10002514:	68fb      	ldr	r3, [r7, #12]
10002516:	43db      	mvns	r3, r3
10002518:	69fa      	ldr	r2, [r7, #28]
1000251a:	4013      	ands	r3, r2
1000251c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
1000251e:	69bb      	ldr	r3, [r7, #24]
10002520:	3301      	adds	r3, #1
10002522:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10002524:	69fb      	ldr	r3, [r7, #28]
10002526:	2b00      	cmp	r3, #0
10002528:	d1d2      	bne.n	100024d0 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
1000252a:	bf00      	nop
1000252c:	bf00      	nop
1000252e:	3720      	adds	r7, #32
10002530:	46bd      	mov	sp, r7
10002532:	bd80      	pop	{r7, pc}
10002534:	4c001010 	.word	0x4c001010
10002538:	4c001000 	.word	0x4c001000

1000253c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000253c:	b480      	push	{r7}
1000253e:	b085      	sub	sp, #20
10002540:	af00      	add	r7, sp, #0
10002542:	60f8      	str	r0, [r7, #12]
10002544:	60b9      	str	r1, [r7, #8]
10002546:	4613      	mov	r3, r2
10002548:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
1000254a:	bf00      	nop
1000254c:	3714      	adds	r7, #20
1000254e:	46bd      	mov	sp, r7
10002550:	f85d 7b04 	ldr.w	r7, [sp], #4
10002554:	4770      	bx	lr

10002556 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10002556:	b480      	push	{r7}
10002558:	b085      	sub	sp, #20
1000255a:	af00      	add	r7, sp, #0
1000255c:	60f8      	str	r0, [r7, #12]
1000255e:	60b9      	str	r1, [r7, #8]
10002560:	4613      	mov	r3, r2
10002562:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10002564:	bf00      	nop
10002566:	3714      	adds	r7, #20
10002568:	46bd      	mov	sp, r7
1000256a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000256e:	4770      	bx	lr

10002570 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10002570:	b480      	push	{r7}
10002572:	b085      	sub	sp, #20
10002574:	af00      	add	r7, sp, #0
10002576:	6078      	str	r0, [r7, #4]
10002578:	460b      	mov	r3, r1
1000257a:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000257c:	4b12      	ldr	r3, [pc, #72]	@ (100025c8 <IPCC_UnmaskInterrupt+0x58>)
1000257e:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10002580:	78fb      	ldrb	r3, [r7, #3]
10002582:	2b00      	cmp	r3, #0
10002584:	d10d      	bne.n	100025a2 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10002586:	68fb      	ldr	r3, [r7, #12]
10002588:	685a      	ldr	r2, [r3, #4]
1000258a:	687b      	ldr	r3, [r7, #4]
1000258c:	f003 030f 	and.w	r3, r3, #15
10002590:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10002594:	fa01 f303 	lsl.w	r3, r1, r3
10002598:	43db      	mvns	r3, r3
1000259a:	401a      	ands	r2, r3
1000259c:	68fb      	ldr	r3, [r7, #12]
1000259e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
100025a0:	e00b      	b.n	100025ba <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100025a2:	68fb      	ldr	r3, [r7, #12]
100025a4:	685a      	ldr	r2, [r3, #4]
100025a6:	687b      	ldr	r3, [r7, #4]
100025a8:	f003 030f 	and.w	r3, r3, #15
100025ac:	2101      	movs	r1, #1
100025ae:	fa01 f303 	lsl.w	r3, r1, r3
100025b2:	43db      	mvns	r3, r3
100025b4:	401a      	ands	r2, r3
100025b6:	68fb      	ldr	r3, [r7, #12]
100025b8:	605a      	str	r2, [r3, #4]
}
100025ba:	bf00      	nop
100025bc:	3714      	adds	r7, #20
100025be:	46bd      	mov	sp, r7
100025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100025c4:	4770      	bx	lr
100025c6:	bf00      	nop
100025c8:	4c001010 	.word	0x4c001010

100025cc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
100025cc:	b480      	push	{r7}
100025ce:	b085      	sub	sp, #20
100025d0:	af00      	add	r7, sp, #0
100025d2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
100025d4:	2300      	movs	r3, #0
100025d6:	60fb      	str	r3, [r7, #12]
100025d8:	e00f      	b.n	100025fa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
100025da:	687a      	ldr	r2, [r7, #4]
100025dc:	68fb      	ldr	r3, [r7, #12]
100025de:	009b      	lsls	r3, r3, #2
100025e0:	4413      	add	r3, r2
100025e2:	4a0b      	ldr	r2, [pc, #44]	@ (10002610 <IPCC_SetDefaultCallbacks+0x44>)
100025e4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
100025e6:	687a      	ldr	r2, [r7, #4]
100025e8:	68fb      	ldr	r3, [r7, #12]
100025ea:	3306      	adds	r3, #6
100025ec:	009b      	lsls	r3, r3, #2
100025ee:	4413      	add	r3, r2
100025f0:	4a08      	ldr	r2, [pc, #32]	@ (10002614 <IPCC_SetDefaultCallbacks+0x48>)
100025f2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
100025f4:	68fb      	ldr	r3, [r7, #12]
100025f6:	3301      	adds	r3, #1
100025f8:	60fb      	str	r3, [r7, #12]
100025fa:	68fb      	ldr	r3, [r7, #12]
100025fc:	2b05      	cmp	r3, #5
100025fe:	d9ec      	bls.n	100025da <IPCC_SetDefaultCallbacks+0xe>
  }
}
10002600:	bf00      	nop
10002602:	bf00      	nop
10002604:	3714      	adds	r7, #20
10002606:	46bd      	mov	sp, r7
10002608:	f85d 7b04 	ldr.w	r7, [sp], #4
1000260c:	4770      	bx	lr
1000260e:	bf00      	nop
10002610:	1000253d 	.word	0x1000253d
10002614:	10002557 	.word	0x10002557

10002618 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10002618:	b480      	push	{r7}
1000261a:	b083      	sub	sp, #12
1000261c:	af00      	add	r7, sp, #0
1000261e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10002620:	687b      	ldr	r3, [r7, #4]
10002622:	2200      	movs	r2, #0
10002624:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10002626:	687b      	ldr	r3, [r7, #4]
10002628:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
1000262c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
1000262e:	687b      	ldr	r3, [r7, #4]
10002630:	223f      	movs	r2, #63	@ 0x3f
10002632:	609a      	str	r2, [r3, #8]
}
10002634:	bf00      	nop
10002636:	370c      	adds	r7, #12
10002638:	46bd      	mov	sp, r7
1000263a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000263e:	4770      	bx	lr

10002640 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10002640:	b480      	push	{r7}
10002642:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10002644:	4b05      	ldr	r3, [pc, #20]	@ (1000265c <HAL_PWR_EnableBkUpAccess+0x1c>)
10002646:	681b      	ldr	r3, [r3, #0]
10002648:	4a04      	ldr	r2, [pc, #16]	@ (1000265c <HAL_PWR_EnableBkUpAccess+0x1c>)
1000264a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000264e:	6013      	str	r3, [r2, #0]
}
10002650:	bf00      	nop
10002652:	46bd      	mov	sp, r7
10002654:	f85d 7b04 	ldr.w	r7, [sp], #4
10002658:	4770      	bx	lr
1000265a:	bf00      	nop
1000265c:	50001000 	.word	0x50001000

10002660 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10002660:	b580      	push	{r7, lr}
10002662:	b084      	sub	sp, #16
10002664:	af00      	add	r7, sp, #0
10002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10002668:	2300      	movs	r3, #0
1000266a:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
1000266c:	687b      	ldr	r3, [r7, #4]
1000266e:	2b00      	cmp	r3, #0
10002670:	d101      	bne.n	10002676 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10002672:	2301      	movs	r3, #1
10002674:	e320      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10002676:	687b      	ldr	r3, [r7, #4]
10002678:	681b      	ldr	r3, [r3, #0]
1000267a:	f003 0301 	and.w	r3, r3, #1
1000267e:	2b00      	cmp	r3, #0
10002680:	f000 8081 	beq.w	10002786 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10002684:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002688:	6a1b      	ldr	r3, [r3, #32]
1000268a:	f003 0303 	and.w	r3, r3, #3
1000268e:	2b01      	cmp	r3, #1
10002690:	d107      	bne.n	100026a2 <HAL_RCC_OscConfig+0x42>
10002692:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002696:	6a1b      	ldr	r3, [r3, #32]
10002698:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000269c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100026a0:	d054      	beq.n	1000274c <HAL_RCC_OscConfig+0xec>
100026a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100026a8:	f003 0307 	and.w	r3, r3, #7
100026ac:	2b01      	cmp	r3, #1
100026ae:	d107      	bne.n	100026c0 <HAL_RCC_OscConfig+0x60>
100026b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100026b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100026ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100026be:	d045      	beq.n	1000274c <HAL_RCC_OscConfig+0xec>
100026c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100026c6:	f003 0303 	and.w	r3, r3, #3
100026ca:	2b01      	cmp	r3, #1
100026cc:	d107      	bne.n	100026de <HAL_RCC_OscConfig+0x7e>
100026ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100026d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100026d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100026dc:	d036      	beq.n	1000274c <HAL_RCC_OscConfig+0xec>
100026de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100026e4:	f003 0303 	and.w	r3, r3, #3
100026e8:	2b01      	cmp	r3, #1
100026ea:	d10f      	bne.n	1000270c <HAL_RCC_OscConfig+0xac>
100026ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100026f4:	f003 0302 	and.w	r3, r3, #2
100026f8:	2b02      	cmp	r3, #2
100026fa:	d027      	beq.n	1000274c <HAL_RCC_OscConfig+0xec>
100026fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002704:	f003 0302 	and.w	r3, r3, #2
10002708:	2b02      	cmp	r3, #2
1000270a:	d01f      	beq.n	1000274c <HAL_RCC_OscConfig+0xec>
1000270c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002710:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002714:	f003 0303 	and.w	r3, r3, #3
10002718:	2b01      	cmp	r3, #1
1000271a:	d107      	bne.n	1000272c <HAL_RCC_OscConfig+0xcc>
1000271c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002720:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002724:	f003 0302 	and.w	r3, r3, #2
10002728:	2b02      	cmp	r3, #2
1000272a:	d00f      	beq.n	1000274c <HAL_RCC_OscConfig+0xec>
1000272c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002730:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002734:	f003 0303 	and.w	r3, r3, #3
10002738:	2b01      	cmp	r3, #1
1000273a:	d117      	bne.n	1000276c <HAL_RCC_OscConfig+0x10c>
1000273c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002740:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002744:	f003 0302 	and.w	r3, r3, #2
10002748:	2b02      	cmp	r3, #2
1000274a:	d10f      	bne.n	1000276c <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
1000274c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002750:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000275c:	d112      	bne.n	10002784 <HAL_RCC_OscConfig+0x124>
1000275e:	687b      	ldr	r3, [r7, #4]
10002760:	685b      	ldr	r3, [r3, #4]
10002762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002766:	d00d      	beq.n	10002784 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10002768:	2301      	movs	r3, #1
1000276a:	e2a5      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
1000276c:	687b      	ldr	r3, [r7, #4]
1000276e:	685b      	ldr	r3, [r3, #4]
10002770:	4618      	mov	r0, r3
10002772:	f000 faa7 	bl	10002cc4 <HAL_RCC_HSEConfig>
10002776:	4603      	mov	r3, r0
10002778:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
1000277a:	7bfb      	ldrb	r3, [r7, #15]
1000277c:	2b00      	cmp	r3, #0
1000277e:	d002      	beq.n	10002786 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10002780:	7bfb      	ldrb	r3, [r7, #15]
10002782:	e299      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10002784:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10002786:	687b      	ldr	r3, [r7, #4]
10002788:	681b      	ldr	r3, [r3, #0]
1000278a:	f003 0302 	and.w	r3, r3, #2
1000278e:	2b00      	cmp	r3, #0
10002790:	f000 814e 	beq.w	10002a30 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10002794:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002798:	6a1b      	ldr	r3, [r3, #32]
1000279a:	f003 0303 	and.w	r3, r3, #3
1000279e:	2b00      	cmp	r3, #0
100027a0:	d107      	bne.n	100027b2 <HAL_RCC_OscConfig+0x152>
100027a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027a6:	6a1b      	ldr	r3, [r3, #32]
100027a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100027ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100027b0:	d055      	beq.n	1000285e <HAL_RCC_OscConfig+0x1fe>
100027b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100027b8:	f003 0307 	and.w	r3, r3, #7
100027bc:	2b00      	cmp	r3, #0
100027be:	d107      	bne.n	100027d0 <HAL_RCC_OscConfig+0x170>
100027c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100027c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100027ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100027ce:	d046      	beq.n	1000285e <HAL_RCC_OscConfig+0x1fe>
100027d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100027d6:	f003 0303 	and.w	r3, r3, #3
100027da:	2b00      	cmp	r3, #0
100027dc:	d107      	bne.n	100027ee <HAL_RCC_OscConfig+0x18e>
100027de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100027e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100027e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100027ec:	d037      	beq.n	1000285e <HAL_RCC_OscConfig+0x1fe>
100027ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100027f4:	f003 0303 	and.w	r3, r3, #3
100027f8:	2b00      	cmp	r3, #0
100027fa:	d10f      	bne.n	1000281c <HAL_RCC_OscConfig+0x1bc>
100027fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002804:	f003 0302 	and.w	r3, r3, #2
10002808:	2b02      	cmp	r3, #2
1000280a:	d028      	beq.n	1000285e <HAL_RCC_OscConfig+0x1fe>
1000280c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002814:	f003 0302 	and.w	r3, r3, #2
10002818:	2b02      	cmp	r3, #2
1000281a:	d020      	beq.n	1000285e <HAL_RCC_OscConfig+0x1fe>
1000281c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002820:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002824:	f003 0303 	and.w	r3, r3, #3
10002828:	2b00      	cmp	r3, #0
1000282a:	d107      	bne.n	1000283c <HAL_RCC_OscConfig+0x1dc>
1000282c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002830:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002834:	f003 0302 	and.w	r3, r3, #2
10002838:	2b02      	cmp	r3, #2
1000283a:	d010      	beq.n	1000285e <HAL_RCC_OscConfig+0x1fe>
1000283c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002840:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002844:	f003 0303 	and.w	r3, r3, #3
10002848:	2b00      	cmp	r3, #0
1000284a:	f040 8088 	bne.w	1000295e <HAL_RCC_OscConfig+0x2fe>
1000284e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002852:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002856:	f003 0302 	and.w	r3, r3, #2
1000285a:	2b02      	cmp	r3, #2
1000285c:	d17f      	bne.n	1000295e <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000285e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002862:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002866:	f003 0301 	and.w	r3, r3, #1
1000286a:	2b01      	cmp	r3, #1
1000286c:	d105      	bne.n	1000287a <HAL_RCC_OscConfig+0x21a>
1000286e:	687b      	ldr	r3, [r7, #4]
10002870:	68db      	ldr	r3, [r3, #12]
10002872:	2b01      	cmp	r3, #1
10002874:	d001      	beq.n	1000287a <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10002876:	2301      	movs	r3, #1
10002878:	e21e      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
1000287a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000287e:	699b      	ldr	r3, [r3, #24]
10002880:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10002884:	687b      	ldr	r3, [r7, #4]
10002886:	691b      	ldr	r3, [r3, #16]
10002888:	021b      	lsls	r3, r3, #8
1000288a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000288e:	4313      	orrs	r3, r2
10002890:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10002892:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002898:	f003 0303 	and.w	r3, r3, #3
1000289c:	2b00      	cmp	r3, #0
1000289e:	d10f      	bne.n	100028c0 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100028a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100028a8:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100028ac:	2b02      	cmp	r3, #2
100028ae:	d047      	beq.n	10002940 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100028b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100028b8:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100028bc:	2b02      	cmp	r3, #2
100028be:	d03f      	beq.n	10002940 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100028c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028c4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100028c8:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100028cc:	2b00      	cmp	r3, #0
100028ce:	d107      	bne.n	100028e0 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100028d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028d4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100028d8:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
100028dc:	2b02      	cmp	r3, #2
100028de:	d02f      	beq.n	10002940 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100028e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028e4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100028e8:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
100028ec:	2b00      	cmp	r3, #0
100028ee:	d107      	bne.n	10002900 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
100028f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028f4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100028f8:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
100028fc:	2b02      	cmp	r3, #2
100028fe:	d01f      	beq.n	10002940 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10002900:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002904:	699b      	ldr	r3, [r3, #24]
10002906:	f023 0203 	bic.w	r2, r3, #3
1000290a:	687b      	ldr	r3, [r7, #4]
1000290c:	695b      	ldr	r3, [r3, #20]
1000290e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002912:	4313      	orrs	r3, r2
10002914:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10002916:	f7ff f977 	bl	10001c08 <HAL_GetTick>
1000291a:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000291c:	e008      	b.n	10002930 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000291e:	f7ff f973 	bl	10001c08 <HAL_GetTick>
10002922:	4602      	mov	r2, r0
10002924:	68bb      	ldr	r3, [r7, #8]
10002926:	1ad3      	subs	r3, r2, r3
10002928:	2b64      	cmp	r3, #100	@ 0x64
1000292a:	d901      	bls.n	10002930 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
1000292c:	2303      	movs	r3, #3
1000292e:	e1c3      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10002930:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002934:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002938:	f003 0304 	and.w	r3, r3, #4
1000293c:	2b04      	cmp	r3, #4
1000293e:	d1ee      	bne.n	1000291e <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10002940:	f001 f809 	bl	10003956 <HAL_RCC_GetSystemCoreClockFreq>
10002944:	4603      	mov	r3, r0
10002946:	4ab3      	ldr	r2, [pc, #716]	@ (10002c14 <HAL_RCC_OscConfig+0x5b4>)
10002948:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
1000294a:	4bb3      	ldr	r3, [pc, #716]	@ (10002c18 <HAL_RCC_OscConfig+0x5b8>)
1000294c:	681b      	ldr	r3, [r3, #0]
1000294e:	4618      	mov	r0, r3
10002950:	f7ff f910 	bl	10001b74 <HAL_InitTick>
10002954:	4603      	mov	r3, r0
10002956:	2b00      	cmp	r3, #0
10002958:	d069      	beq.n	10002a2e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
1000295a:	2301      	movs	r3, #1
1000295c:	e1ac      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
1000295e:	687b      	ldr	r3, [r7, #4]
10002960:	68db      	ldr	r3, [r3, #12]
10002962:	2b00      	cmp	r3, #0
10002964:	d049      	beq.n	100029fa <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10002966:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000296a:	68db      	ldr	r3, [r3, #12]
1000296c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002970:	f043 0301 	orr.w	r3, r3, #1
10002974:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002976:	f7ff f947 	bl	10001c08 <HAL_GetTick>
1000297a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000297c:	e008      	b.n	10002990 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000297e:	f7ff f943 	bl	10001c08 <HAL_GetTick>
10002982:	4602      	mov	r2, r0
10002984:	68bb      	ldr	r3, [r7, #8]
10002986:	1ad3      	subs	r3, r2, r3
10002988:	2b64      	cmp	r3, #100	@ 0x64
1000298a:	d901      	bls.n	10002990 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
1000298c:	2303      	movs	r3, #3
1000298e:	e193      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002990:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002994:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002998:	f003 0301 	and.w	r3, r3, #1
1000299c:	2b01      	cmp	r3, #1
1000299e:	d1ee      	bne.n	1000297e <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100029a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029a4:	699b      	ldr	r3, [r3, #24]
100029a6:	f023 0203 	bic.w	r2, r3, #3
100029aa:	687b      	ldr	r3, [r7, #4]
100029ac:	695b      	ldr	r3, [r3, #20]
100029ae:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100029b2:	4313      	orrs	r3, r2
100029b4:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100029b6:	f7ff f927 	bl	10001c08 <HAL_GetTick>
100029ba:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100029bc:	e008      	b.n	100029d0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100029be:	f7ff f923 	bl	10001c08 <HAL_GetTick>
100029c2:	4602      	mov	r2, r0
100029c4:	68bb      	ldr	r3, [r7, #8]
100029c6:	1ad3      	subs	r3, r2, r3
100029c8:	2b64      	cmp	r3, #100	@ 0x64
100029ca:	d901      	bls.n	100029d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
100029cc:	2303      	movs	r3, #3
100029ce:	e173      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100029d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029d4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100029d8:	f003 0304 	and.w	r3, r3, #4
100029dc:	2b04      	cmp	r3, #4
100029de:	d1ee      	bne.n	100029be <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100029e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029e4:	699b      	ldr	r3, [r3, #24]
100029e6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
100029ea:	687b      	ldr	r3, [r7, #4]
100029ec:	691b      	ldr	r3, [r3, #16]
100029ee:	021b      	lsls	r3, r3, #8
100029f0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100029f4:	4313      	orrs	r3, r2
100029f6:	618b      	str	r3, [r1, #24]
100029f8:	e01a      	b.n	10002a30 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
100029fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029fe:	2201      	movs	r2, #1
10002a00:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002a02:	f7ff f901 	bl	10001c08 <HAL_GetTick>
10002a06:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10002a08:	e008      	b.n	10002a1c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10002a0a:	f7ff f8fd 	bl	10001c08 <HAL_GetTick>
10002a0e:	4602      	mov	r2, r0
10002a10:	68bb      	ldr	r3, [r7, #8]
10002a12:	1ad3      	subs	r3, r2, r3
10002a14:	2b64      	cmp	r3, #100	@ 0x64
10002a16:	d901      	bls.n	10002a1c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10002a18:	2303      	movs	r3, #3
10002a1a:	e14d      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10002a1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a20:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002a24:	f003 0301 	and.w	r3, r3, #1
10002a28:	2b01      	cmp	r3, #1
10002a2a:	d0ee      	beq.n	10002a0a <HAL_RCC_OscConfig+0x3aa>
10002a2c:	e000      	b.n	10002a30 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10002a2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10002a30:	687b      	ldr	r3, [r7, #4]
10002a32:	681b      	ldr	r3, [r3, #0]
10002a34:	f003 0310 	and.w	r3, r3, #16
10002a38:	2b00      	cmp	r3, #0
10002a3a:	f000 8091 	beq.w	10002b60 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10002a3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a42:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002a46:	f003 0303 	and.w	r3, r3, #3
10002a4a:	2b02      	cmp	r3, #2
10002a4c:	d107      	bne.n	10002a5e <HAL_RCC_OscConfig+0x3fe>
10002a4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a52:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002a56:	f003 0302 	and.w	r3, r3, #2
10002a5a:	2b02      	cmp	r3, #2
10002a5c:	d01e      	beq.n	10002a9c <HAL_RCC_OscConfig+0x43c>
10002a5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002a64:	f003 0303 	and.w	r3, r3, #3
10002a68:	2b02      	cmp	r3, #2
10002a6a:	d107      	bne.n	10002a7c <HAL_RCC_OscConfig+0x41c>
10002a6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002a72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002a76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002a7a:	d00f      	beq.n	10002a9c <HAL_RCC_OscConfig+0x43c>
10002a7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a80:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002a84:	f003 0303 	and.w	r3, r3, #3
10002a88:	2b02      	cmp	r3, #2
10002a8a:	d122      	bne.n	10002ad2 <HAL_RCC_OscConfig+0x472>
10002a8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a90:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002a94:	f003 0302 	and.w	r3, r3, #2
10002a98:	2b02      	cmp	r3, #2
10002a9a:	d11a      	bne.n	10002ad2 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10002a9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002aa0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002aa4:	f003 0310 	and.w	r3, r3, #16
10002aa8:	2b10      	cmp	r3, #16
10002aaa:	d105      	bne.n	10002ab8 <HAL_RCC_OscConfig+0x458>
10002aac:	687b      	ldr	r3, [r7, #4]
10002aae:	69db      	ldr	r3, [r3, #28]
10002ab0:	2b10      	cmp	r3, #16
10002ab2:	d001      	beq.n	10002ab8 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10002ab4:	2301      	movs	r3, #1
10002ab6:	e0ff      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10002ab8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002abc:	69db      	ldr	r3, [r3, #28]
10002abe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10002ac2:	687b      	ldr	r3, [r7, #4]
10002ac4:	6a1b      	ldr	r3, [r3, #32]
10002ac6:	021b      	lsls	r3, r3, #8
10002ac8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002acc:	4313      	orrs	r3, r2
10002ace:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10002ad0:	e046      	b.n	10002b60 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10002ad2:	687b      	ldr	r3, [r7, #4]
10002ad4:	69db      	ldr	r3, [r3, #28]
10002ad6:	2b00      	cmp	r3, #0
10002ad8:	d029      	beq.n	10002b2e <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10002ada:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ade:	68db      	ldr	r3, [r3, #12]
10002ae0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ae4:	f043 0310 	orr.w	r3, r3, #16
10002ae8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002aea:	f7ff f88d 	bl	10001c08 <HAL_GetTick>
10002aee:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002af0:	e008      	b.n	10002b04 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10002af2:	f7ff f889 	bl	10001c08 <HAL_GetTick>
10002af6:	4602      	mov	r2, r0
10002af8:	68bb      	ldr	r3, [r7, #8]
10002afa:	1ad3      	subs	r3, r2, r3
10002afc:	2b64      	cmp	r3, #100	@ 0x64
10002afe:	d901      	bls.n	10002b04 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10002b00:	2303      	movs	r3, #3
10002b02:	e0d9      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002b04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b08:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002b0c:	f003 0310 	and.w	r3, r3, #16
10002b10:	2b10      	cmp	r3, #16
10002b12:	d1ee      	bne.n	10002af2 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10002b14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b18:	69db      	ldr	r3, [r3, #28]
10002b1a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10002b1e:	687b      	ldr	r3, [r7, #4]
10002b20:	6a1b      	ldr	r3, [r3, #32]
10002b22:	021b      	lsls	r3, r3, #8
10002b24:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002b28:	4313      	orrs	r3, r2
10002b2a:	61cb      	str	r3, [r1, #28]
10002b2c:	e018      	b.n	10002b60 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10002b2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b32:	2210      	movs	r2, #16
10002b34:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002b36:	f7ff f867 	bl	10001c08 <HAL_GetTick>
10002b3a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10002b3c:	e008      	b.n	10002b50 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10002b3e:	f7ff f863 	bl	10001c08 <HAL_GetTick>
10002b42:	4602      	mov	r2, r0
10002b44:	68bb      	ldr	r3, [r7, #8]
10002b46:	1ad3      	subs	r3, r2, r3
10002b48:	2b64      	cmp	r3, #100	@ 0x64
10002b4a:	d901      	bls.n	10002b50 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10002b4c:	2303      	movs	r3, #3
10002b4e:	e0b3      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10002b50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b54:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002b58:	f003 0310 	and.w	r3, r3, #16
10002b5c:	2b10      	cmp	r3, #16
10002b5e:	d0ee      	beq.n	10002b3e <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10002b60:	687b      	ldr	r3, [r7, #4]
10002b62:	681b      	ldr	r3, [r3, #0]
10002b64:	f003 0308 	and.w	r3, r3, #8
10002b68:	2b00      	cmp	r3, #0
10002b6a:	d042      	beq.n	10002bf2 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10002b6c:	687b      	ldr	r3, [r7, #4]
10002b6e:	699b      	ldr	r3, [r3, #24]
10002b70:	2b00      	cmp	r3, #0
10002b72:	d01f      	beq.n	10002bb4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10002b74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b78:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002b7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b80:	f043 0301 	orr.w	r3, r3, #1
10002b84:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002b88:	f7ff f83e 	bl	10001c08 <HAL_GetTick>
10002b8c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10002b8e:	e008      	b.n	10002ba2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10002b90:	f7ff f83a 	bl	10001c08 <HAL_GetTick>
10002b94:	4602      	mov	r2, r0
10002b96:	68bb      	ldr	r3, [r7, #8]
10002b98:	1ad3      	subs	r3, r2, r3
10002b9a:	2b64      	cmp	r3, #100	@ 0x64
10002b9c:	d901      	bls.n	10002ba2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10002b9e:	2303      	movs	r3, #3
10002ba0:	e08a      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10002ba2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ba6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002baa:	f003 0302 	and.w	r3, r3, #2
10002bae:	2b02      	cmp	r3, #2
10002bb0:	d1ee      	bne.n	10002b90 <HAL_RCC_OscConfig+0x530>
10002bb2:	e01e      	b.n	10002bf2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10002bb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bb8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002bbc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002bc0:	f023 0301 	bic.w	r3, r3, #1
10002bc4:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002bc8:	f7ff f81e 	bl	10001c08 <HAL_GetTick>
10002bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002bce:	e008      	b.n	10002be2 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10002bd0:	f7ff f81a 	bl	10001c08 <HAL_GetTick>
10002bd4:	4602      	mov	r2, r0
10002bd6:	68bb      	ldr	r3, [r7, #8]
10002bd8:	1ad3      	subs	r3, r2, r3
10002bda:	2b64      	cmp	r3, #100	@ 0x64
10002bdc:	d901      	bls.n	10002be2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10002bde:	2303      	movs	r3, #3
10002be0:	e06a      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002be2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002be6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10002bea:	f003 0302 	and.w	r3, r3, #2
10002bee:	2b02      	cmp	r3, #2
10002bf0:	d0ee      	beq.n	10002bd0 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10002bf2:	687b      	ldr	r3, [r7, #4]
10002bf4:	681b      	ldr	r3, [r3, #0]
10002bf6:	f003 0304 	and.w	r3, r3, #4
10002bfa:	2b00      	cmp	r3, #0
10002bfc:	d02b      	beq.n	10002c56 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10002bfe:	4b07      	ldr	r3, [pc, #28]	@ (10002c1c <HAL_RCC_OscConfig+0x5bc>)
10002c00:	681b      	ldr	r3, [r3, #0]
10002c02:	4a06      	ldr	r2, [pc, #24]	@ (10002c1c <HAL_RCC_OscConfig+0x5bc>)
10002c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10002c08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10002c0a:	f7fe fffd 	bl	10001c08 <HAL_GetTick>
10002c0e:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002c10:	e00f      	b.n	10002c32 <HAL_RCC_OscConfig+0x5d2>
10002c12:	bf00      	nop
10002c14:	10020000 	.word	0x10020000
10002c18:	1002000c 	.word	0x1002000c
10002c1c:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10002c20:	f7fe fff2 	bl	10001c08 <HAL_GetTick>
10002c24:	4602      	mov	r2, r0
10002c26:	68bb      	ldr	r3, [r7, #8]
10002c28:	1ad3      	subs	r3, r2, r3
10002c2a:	2b64      	cmp	r3, #100	@ 0x64
10002c2c:	d901      	bls.n	10002c32 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10002c2e:	2303      	movs	r3, #3
10002c30:	e042      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002c32:	4b23      	ldr	r3, [pc, #140]	@ (10002cc0 <HAL_RCC_OscConfig+0x660>)
10002c34:	681b      	ldr	r3, [r3, #0]
10002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002c3a:	2b00      	cmp	r3, #0
10002c3c:	d0f0      	beq.n	10002c20 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10002c3e:	687b      	ldr	r3, [r7, #4]
10002c40:	689b      	ldr	r3, [r3, #8]
10002c42:	4618      	mov	r0, r3
10002c44:	f000 f8a9 	bl	10002d9a <HAL_RCC_LSEConfig>
10002c48:	4603      	mov	r3, r0
10002c4a:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10002c4c:	7bfb      	ldrb	r3, [r7, #15]
10002c4e:	2b00      	cmp	r3, #0
10002c50:	d001      	beq.n	10002c56 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10002c52:	7bfb      	ldrb	r3, [r7, #15]
10002c54:	e030      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10002c56:	687b      	ldr	r3, [r7, #4]
10002c58:	3324      	adds	r3, #36	@ 0x24
10002c5a:	4618      	mov	r0, r3
10002c5c:	f000 f91a 	bl	10002e94 <RCC_PLL1_Config>
10002c60:	4603      	mov	r3, r0
10002c62:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002c64:	7bfb      	ldrb	r3, [r7, #15]
10002c66:	2b00      	cmp	r3, #0
10002c68:	d001      	beq.n	10002c6e <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10002c6a:	7bfb      	ldrb	r3, [r7, #15]
10002c6c:	e024      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10002c6e:	687b      	ldr	r3, [r7, #4]
10002c70:	3360      	adds	r3, #96	@ 0x60
10002c72:	4618      	mov	r0, r3
10002c74:	f000 fecc 	bl	10003a10 <RCCEx_PLL2_Config>
10002c78:	4603      	mov	r3, r0
10002c7a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002c7c:	7bfb      	ldrb	r3, [r7, #15]
10002c7e:	2b00      	cmp	r3, #0
10002c80:	d001      	beq.n	10002c86 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10002c82:	7bfb      	ldrb	r3, [r7, #15]
10002c84:	e018      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10002c86:	687b      	ldr	r3, [r7, #4]
10002c88:	339c      	adds	r3, #156	@ 0x9c
10002c8a:	4618      	mov	r0, r3
10002c8c:	f001 f842 	bl	10003d14 <RCCEx_PLL3_Config>
10002c90:	4603      	mov	r3, r0
10002c92:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002c94:	7bfb      	ldrb	r3, [r7, #15]
10002c96:	2b00      	cmp	r3, #0
10002c98:	d001      	beq.n	10002c9e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10002c9a:	7bfb      	ldrb	r3, [r7, #15]
10002c9c:	e00c      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10002c9e:	687b      	ldr	r3, [r7, #4]
10002ca0:	33d8      	adds	r3, #216	@ 0xd8
10002ca2:	4618      	mov	r0, r3
10002ca4:	f001 f9a0 	bl	10003fe8 <RCCEx_PLL4_Config>
10002ca8:	4603      	mov	r3, r0
10002caa:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002cac:	7bfb      	ldrb	r3, [r7, #15]
10002cae:	2b00      	cmp	r3, #0
10002cb0:	d001      	beq.n	10002cb6 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10002cb2:	7bfb      	ldrb	r3, [r7, #15]
10002cb4:	e000      	b.n	10002cb8 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10002cb6:	2300      	movs	r3, #0
}
10002cb8:	4618      	mov	r0, r3
10002cba:	3710      	adds	r7, #16
10002cbc:	46bd      	mov	sp, r7
10002cbe:	bd80      	pop	{r7, pc}
10002cc0:	50001000 	.word	0x50001000

10002cc4 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10002cc4:	b580      	push	{r7, lr}
10002cc6:	b084      	sub	sp, #16
10002cc8:	af00      	add	r7, sp, #0
10002cca:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10002ccc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
10002cd4:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002cd6:	f7fe ff97 	bl	10001c08 <HAL_GetTick>
10002cda:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10002cdc:	e008      	b.n	10002cf0 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10002cde:	f7fe ff93 	bl	10001c08 <HAL_GetTick>
10002ce2:	4602      	mov	r2, r0
10002ce4:	68fb      	ldr	r3, [r7, #12]
10002ce6:	1ad3      	subs	r3, r2, r3
10002ce8:	2b64      	cmp	r3, #100	@ 0x64
10002cea:	d901      	bls.n	10002cf0 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10002cec:	2303      	movs	r3, #3
10002cee:	e050      	b.n	10002d92 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10002cf0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002cf4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002d00:	d0ed      	beq.n	10002cde <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10002d02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d06:	f44f 6290 	mov.w	r2, #1152	@ 0x480
10002d0a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10002d0c:	687b      	ldr	r3, [r7, #4]
10002d0e:	2b00      	cmp	r3, #0
10002d10:	d03e      	beq.n	10002d90 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10002d12:	687b      	ldr	r3, [r7, #4]
10002d14:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
10002d18:	d108      	bne.n	10002d2c <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10002d1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d1e:	68db      	ldr	r3, [r3, #12]
10002d20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10002d28:	60d3      	str	r3, [r2, #12]
10002d2a:	e013      	b.n	10002d54 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10002d2c:	687b      	ldr	r3, [r7, #4]
10002d2e:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
10002d32:	d10f      	bne.n	10002d54 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10002d34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d38:	68db      	ldr	r3, [r3, #12]
10002d3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10002d42:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10002d44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d48:	68db      	ldr	r3, [r3, #12]
10002d4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10002d52:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10002d54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d58:	68db      	ldr	r3, [r3, #12]
10002d5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10002d62:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002d64:	f7fe ff50 	bl	10001c08 <HAL_GetTick>
10002d68:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002d6a:	e008      	b.n	10002d7e <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10002d6c:	f7fe ff4c 	bl	10001c08 <HAL_GetTick>
10002d70:	4602      	mov	r2, r0
10002d72:	68fb      	ldr	r3, [r7, #12]
10002d74:	1ad3      	subs	r3, r2, r3
10002d76:	2b64      	cmp	r3, #100	@ 0x64
10002d78:	d901      	bls.n	10002d7e <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10002d7a:	2303      	movs	r3, #3
10002d7c:	e009      	b.n	10002d92 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002d7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d82:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002d8e:	d1ed      	bne.n	10002d6c <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10002d90:	2300      	movs	r3, #0
}
10002d92:	4618      	mov	r0, r3
10002d94:	3710      	adds	r7, #16
10002d96:	46bd      	mov	sp, r7
10002d98:	bd80      	pop	{r7, pc}

10002d9a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10002d9a:	b580      	push	{r7, lr}
10002d9c:	b084      	sub	sp, #16
10002d9e:	af00      	add	r7, sp, #0
10002da0:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10002da2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002daa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002dae:	f023 0301 	bic.w	r3, r3, #1
10002db2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002db6:	f7fe ff27 	bl	10001c08 <HAL_GetTick>
10002dba:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10002dbc:	e00a      	b.n	10002dd4 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10002dbe:	f7fe ff23 	bl	10001c08 <HAL_GetTick>
10002dc2:	4602      	mov	r2, r0
10002dc4:	68fb      	ldr	r3, [r7, #12]
10002dc6:	1ad3      	subs	r3, r2, r3
10002dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
10002dcc:	4293      	cmp	r3, r2
10002dce:	d901      	bls.n	10002dd4 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10002dd0:	2303      	movs	r3, #3
10002dd2:	e05b      	b.n	10002e8c <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10002dd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002ddc:	f003 0304 	and.w	r3, r3, #4
10002de0:	2b04      	cmp	r3, #4
10002de2:	d0ec      	beq.n	10002dbe <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10002de4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002dec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002df0:	f023 030a 	bic.w	r3, r3, #10
10002df4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10002df8:	687b      	ldr	r3, [r7, #4]
10002dfa:	2b00      	cmp	r3, #0
10002dfc:	d045      	beq.n	10002e8a <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10002dfe:	687b      	ldr	r3, [r7, #4]
10002e00:	2b03      	cmp	r3, #3
10002e02:	d10a      	bne.n	10002e1a <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10002e04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002e0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e10:	f043 0302 	orr.w	r3, r3, #2
10002e14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10002e18:	e016      	b.n	10002e48 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10002e1a:	687b      	ldr	r3, [r7, #4]
10002e1c:	2b0b      	cmp	r3, #11
10002e1e:	d113      	bne.n	10002e48 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10002e20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002e28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e2c:	f043 0308 	orr.w	r3, r3, #8
10002e30:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10002e34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002e3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e40:	f043 0302 	orr.w	r3, r3, #2
10002e44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10002e48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002e50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e54:	f043 0301 	orr.w	r3, r3, #1
10002e58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002e5c:	f7fe fed4 	bl	10001c08 <HAL_GetTick>
10002e60:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10002e62:	e00a      	b.n	10002e7a <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10002e64:	f7fe fed0 	bl	10001c08 <HAL_GetTick>
10002e68:	4602      	mov	r2, r0
10002e6a:	68fb      	ldr	r3, [r7, #12]
10002e6c:	1ad3      	subs	r3, r2, r3
10002e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
10002e72:	4293      	cmp	r3, r2
10002e74:	d901      	bls.n	10002e7a <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10002e76:	2303      	movs	r3, #3
10002e78:	e008      	b.n	10002e8c <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10002e7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10002e82:	f003 0304 	and.w	r3, r3, #4
10002e86:	2b04      	cmp	r3, #4
10002e88:	d1ec      	bne.n	10002e64 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10002e8a:	2300      	movs	r3, #0
}
10002e8c:	4618      	mov	r0, r3
10002e8e:	3710      	adds	r7, #16
10002e90:	46bd      	mov	sp, r7
10002e92:	bd80      	pop	{r7, pc}

10002e94 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10002e94:	b580      	push	{r7, lr}
10002e96:	b084      	sub	sp, #16
10002e98:	af00      	add	r7, sp, #0
10002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10002e9c:	687b      	ldr	r3, [r7, #4]
10002e9e:	681b      	ldr	r3, [r3, #0]
10002ea0:	2b00      	cmp	r3, #0
10002ea2:	f000 8174 	beq.w	1000318e <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10002ea6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002eaa:	6a1b      	ldr	r3, [r3, #32]
10002eac:	f003 0303 	and.w	r3, r3, #3
10002eb0:	2b02      	cmp	r3, #2
10002eb2:	d108      	bne.n	10002ec6 <RCC_PLL1_Config+0x32>
10002eb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002eb8:	6a1b      	ldr	r3, [r3, #32]
10002eba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002ec2:	f000 8162 	beq.w	1000318a <RCC_PLL1_Config+0x2f6>
10002ec6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002eca:	6a1b      	ldr	r3, [r3, #32]
10002ecc:	f003 0303 	and.w	r3, r3, #3
10002ed0:	2b03      	cmp	r3, #3
10002ed2:	d108      	bne.n	10002ee6 <RCC_PLL1_Config+0x52>
10002ed4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ed8:	6a1b      	ldr	r3, [r3, #32]
10002eda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002ede:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002ee2:	f000 8152 	beq.w	1000318a <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10002ee6:	687b      	ldr	r3, [r7, #4]
10002ee8:	681b      	ldr	r3, [r3, #0]
10002eea:	2b02      	cmp	r3, #2
10002eec:	f040 8123 	bne.w	10003136 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002ef0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002ef8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002f00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10002f04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002f0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002f10:	f023 0301 	bic.w	r3, r3, #1
10002f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002f18:	f7fe fe76 	bl	10001c08 <HAL_GetTick>
10002f1c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002f1e:	e008      	b.n	10002f32 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002f20:	f7fe fe72 	bl	10001c08 <HAL_GetTick>
10002f24:	4602      	mov	r2, r0
10002f26:	68fb      	ldr	r3, [r7, #12]
10002f28:	1ad3      	subs	r3, r2, r3
10002f2a:	2b64      	cmp	r3, #100	@ 0x64
10002f2c:	d901      	bls.n	10002f32 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10002f2e:	2303      	movs	r3, #3
10002f30:	e12e      	b.n	10003190 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002f32:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002f3a:	f003 0302 	and.w	r3, r3, #2
10002f3e:	2b02      	cmp	r3, #2
10002f40:	d0ee      	beq.n	10002f20 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10002f42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002f48:	f003 0307 	and.w	r3, r3, #7
10002f4c:	2b02      	cmp	r3, #2
10002f4e:	d112      	bne.n	10002f76 <RCC_PLL1_Config+0xe2>
10002f50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002f56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002f5e:	d10a      	bne.n	10002f76 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10002f60:	687b      	ldr	r3, [r7, #4]
10002f62:	685a      	ldr	r2, [r3, #4]
10002f64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002f6a:	f003 0303 	and.w	r3, r3, #3
10002f6e:	429a      	cmp	r2, r3
10002f70:	d00c      	beq.n	10002f8c <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10002f72:	2301      	movs	r3, #1
10002f74:	e10c      	b.n	10003190 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10002f76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002f7c:	f023 0203 	bic.w	r2, r3, #3
10002f80:	687b      	ldr	r3, [r7, #4]
10002f82:	685b      	ldr	r3, [r3, #4]
10002f84:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002f88:	4313      	orrs	r3, r2
10002f8a:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10002f8c:	e008      	b.n	10002fa0 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002f8e:	f7fe fe3b 	bl	10001c08 <HAL_GetTick>
10002f92:	4602      	mov	r2, r0
10002f94:	68fb      	ldr	r3, [r7, #12]
10002f96:	1ad3      	subs	r3, r2, r3
10002f98:	2b64      	cmp	r3, #100	@ 0x64
10002f9a:	d901      	bls.n	10002fa0 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10002f9c:	2303      	movs	r3, #3
10002f9e:	e0f7      	b.n	10003190 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10002fa0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002fa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002fae:	d1ee      	bne.n	10002f8e <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10002fb0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fb4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10002fb8:	4b77      	ldr	r3, [pc, #476]	@ (10003198 <RCC_PLL1_Config+0x304>)
10002fba:	4013      	ands	r3, r2
10002fbc:	687a      	ldr	r2, [r7, #4]
10002fbe:	68d2      	ldr	r2, [r2, #12]
10002fc0:	1e51      	subs	r1, r2, #1
10002fc2:	687a      	ldr	r2, [r7, #4]
10002fc4:	6892      	ldr	r2, [r2, #8]
10002fc6:	3a01      	subs	r2, #1
10002fc8:	0412      	lsls	r2, r2, #16
10002fca:	430a      	orrs	r2, r1
10002fcc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002fd0:	4313      	orrs	r3, r2
10002fd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
10002fd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10002fde:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10002fe2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10002fe6:	687a      	ldr	r2, [r7, #4]
10002fe8:	6912      	ldr	r2, [r2, #16]
10002fea:	1e51      	subs	r1, r2, #1
10002fec:	687a      	ldr	r2, [r7, #4]
10002fee:	6952      	ldr	r2, [r2, #20]
10002ff0:	3a01      	subs	r2, #1
10002ff2:	0212      	lsls	r2, r2, #8
10002ff4:	4311      	orrs	r1, r2
10002ff6:	687a      	ldr	r2, [r7, #4]
10002ff8:	6992      	ldr	r2, [r2, #24]
10002ffa:	3a01      	subs	r2, #1
10002ffc:	0412      	lsls	r2, r2, #16
10002ffe:	430a      	orrs	r2, r1
10003000:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003004:	4313      	orrs	r3, r2
10003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000300a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000300e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10003012:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
1000301a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000301e:	687b      	ldr	r3, [r7, #4]
10003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003022:	2b02      	cmp	r3, #2
10003024:	d003      	beq.n	1000302e <RCC_PLL1_Config+0x19a>
10003026:	687b      	ldr	r3, [r7, #4]
10003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000302a:	2b00      	cmp	r3, #0
1000302c:	d10c      	bne.n	10003048 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000302e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10003036:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000303a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000303e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003042:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
10003046:	e00f      	b.n	10003068 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10003048:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000304c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10003050:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003054:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003058:	687a      	ldr	r2, [r7, #4]
1000305a:	6a12      	ldr	r2, [r2, #32]
1000305c:	00d2      	lsls	r2, r2, #3
1000305e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003062:	4313      	orrs	r3, r2
10003064:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10003068:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000306c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10003070:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10003078:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000307c:	687b      	ldr	r3, [r7, #4]
1000307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003080:	2b02      	cmp	r3, #2
10003082:	d124      	bne.n	100030ce <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10003084:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
1000308c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003090:	687b      	ldr	r3, [r7, #4]
10003092:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10003094:	687b      	ldr	r3, [r7, #4]
10003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003098:	4319      	orrs	r1, r3
1000309a:	687b      	ldr	r3, [r7, #4]
1000309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000309e:	4319      	orrs	r1, r3
100030a0:	687b      	ldr	r3, [r7, #4]
100030a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100030a4:	4319      	orrs	r1, r3
100030a6:	687b      	ldr	r3, [r7, #4]
100030a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100030aa:	041b      	lsls	r3, r3, #16
100030ac:	430b      	orrs	r3, r1
100030ae:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100030b2:	4313      	orrs	r3, r2
100030b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
100030b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100030c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030c4:	f043 0304 	orr.w	r3, r3, #4
100030c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
100030cc:	e009      	b.n	100030e2 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
100030ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100030d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030da:	f023 0304 	bic.w	r3, r3, #4
100030de:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
100030e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100030ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030ee:	f043 0301 	orr.w	r3, r3, #1
100030f2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100030f6:	f7fe fd87 	bl	10001c08 <HAL_GetTick>
100030fa:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100030fc:	e008      	b.n	10003110 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100030fe:	f7fe fd83 	bl	10001c08 <HAL_GetTick>
10003102:	4602      	mov	r2, r0
10003104:	68fb      	ldr	r3, [r7, #12]
10003106:	1ad3      	subs	r3, r2, r3
10003108:	2b64      	cmp	r3, #100	@ 0x64
1000310a:	d901      	bls.n	10003110 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
1000310c:	2303      	movs	r3, #3
1000310e:	e03f      	b.n	10003190 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10003110:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003118:	f003 0302 	and.w	r3, r3, #2
1000311c:	2b02      	cmp	r3, #2
1000311e:	d1ee      	bne.n	100030fe <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10003120:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003128:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000312c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10003130:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10003134:	e02b      	b.n	1000318e <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10003136:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000313e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003146:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
1000314a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000314e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003152:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003156:	f023 0301 	bic.w	r3, r3, #1
1000315a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000315e:	f7fe fd53 	bl	10001c08 <HAL_GetTick>
10003162:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10003164:	e008      	b.n	10003178 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003166:	f7fe fd4f 	bl	10001c08 <HAL_GetTick>
1000316a:	4602      	mov	r2, r0
1000316c:	68fb      	ldr	r3, [r7, #12]
1000316e:	1ad3      	subs	r3, r2, r3
10003170:	2b64      	cmp	r3, #100	@ 0x64
10003172:	d901      	bls.n	10003178 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10003174:	2303      	movs	r3, #3
10003176:	e00b      	b.n	10003190 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10003178:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000317c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003180:	f003 0302 	and.w	r3, r3, #2
10003184:	2b02      	cmp	r3, #2
10003186:	d0ee      	beq.n	10003166 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10003188:	e001      	b.n	1000318e <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000318a:	2301      	movs	r3, #1
1000318c:	e000      	b.n	10003190 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000318e:	2300      	movs	r3, #0

}
10003190:	4618      	mov	r0, r3
10003192:	3710      	adds	r7, #16
10003194:	46bd      	mov	sp, r7
10003196:	bd80      	pop	{r7, pc}
10003198:	ffc0fe00 	.word	0xffc0fe00

1000319c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
1000319c:	b580      	push	{r7, lr}
1000319e:	b084      	sub	sp, #16
100031a0:	af00      	add	r7, sp, #0
100031a2:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100031a4:	2300      	movs	r3, #0
100031a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100031a8:	687b      	ldr	r3, [r7, #4]
100031aa:	2b00      	cmp	r3, #0
100031ac:	d101      	bne.n	100031b2 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
100031ae:	2301      	movs	r3, #1
100031b0:	e102      	b.n	100033b8 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
100031b2:	687b      	ldr	r3, [r7, #4]
100031b4:	681b      	ldr	r3, [r3, #0]
100031b6:	f003 0301 	and.w	r3, r3, #1
100031ba:	2b00      	cmp	r3, #0
100031bc:	d00b      	beq.n	100031d6 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
100031be:	687b      	ldr	r3, [r7, #4]
100031c0:	3304      	adds	r3, #4
100031c2:	4618      	mov	r0, r3
100031c4:	f000 f8fc 	bl	100033c0 <RCC_MPUConfig>
100031c8:	4603      	mov	r3, r0
100031ca:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100031cc:	7bfb      	ldrb	r3, [r7, #15]
100031ce:	2b00      	cmp	r3, #0
100031d0:	d001      	beq.n	100031d6 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
100031d2:	7bfb      	ldrb	r3, [r7, #15]
100031d4:	e0f0      	b.n	100033b8 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
100031d6:	687b      	ldr	r3, [r7, #4]
100031d8:	681b      	ldr	r3, [r3, #0]
100031da:	f003 0302 	and.w	r3, r3, #2
100031de:	2b00      	cmp	r3, #0
100031e0:	d00b      	beq.n	100031fa <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
100031e2:	687b      	ldr	r3, [r7, #4]
100031e4:	330c      	adds	r3, #12
100031e6:	4618      	mov	r0, r3
100031e8:	f000 f960 	bl	100034ac <RCC_AXISSConfig>
100031ec:	4603      	mov	r3, r0
100031ee:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100031f0:	7bfb      	ldrb	r3, [r7, #15]
100031f2:	2b00      	cmp	r3, #0
100031f4:	d001      	beq.n	100031fa <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
100031f6:	7bfb      	ldrb	r3, [r7, #15]
100031f8:	e0de      	b.n	100033b8 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100031fa:	687b      	ldr	r3, [r7, #4]
100031fc:	681b      	ldr	r3, [r3, #0]
100031fe:	f003 0304 	and.w	r3, r3, #4
10003202:	2b00      	cmp	r3, #0
10003204:	d00b      	beq.n	1000321e <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10003206:	687b      	ldr	r3, [r7, #4]
10003208:	3314      	adds	r3, #20
1000320a:	4618      	mov	r0, r3
1000320c:	f000 f9e6 	bl	100035dc <RCC_MCUConfig>
10003210:	4603      	mov	r3, r0
10003212:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10003214:	7bfb      	ldrb	r3, [r7, #15]
10003216:	2b00      	cmp	r3, #0
10003218:	d001      	beq.n	1000321e <HAL_RCC_ClockConfig+0x82>
    {
      return status;
1000321a:	7bfb      	ldrb	r3, [r7, #15]
1000321c:	e0cc      	b.n	100033b8 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000321e:	687b      	ldr	r3, [r7, #4]
10003220:	681b      	ldr	r3, [r3, #0]
10003222:	f003 0308 	and.w	r3, r3, #8
10003226:	2b00      	cmp	r3, #0
10003228:	d020      	beq.n	1000326c <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
1000322a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000322e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10003230:	f023 0207 	bic.w	r2, r3, #7
10003234:	687b      	ldr	r3, [r7, #4]
10003236:	69db      	ldr	r3, [r3, #28]
10003238:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000323c:	4313      	orrs	r3, r2
1000323e:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003240:	f7fe fce2 	bl	10001c08 <HAL_GetTick>
10003244:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10003246:	e009      	b.n	1000325c <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003248:	f7fe fcde 	bl	10001c08 <HAL_GetTick>
1000324c:	4602      	mov	r2, r0
1000324e:	68bb      	ldr	r3, [r7, #8]
10003250:	1ad3      	subs	r3, r2, r3
10003252:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003256:	d901      	bls.n	1000325c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10003258:	2303      	movs	r3, #3
1000325a:	e0ad      	b.n	100033b8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
1000325c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10003262:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003266:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000326a:	d1ed      	bne.n	10003248 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
1000326c:	687b      	ldr	r3, [r7, #4]
1000326e:	681b      	ldr	r3, [r3, #0]
10003270:	f003 0310 	and.w	r3, r3, #16
10003274:	2b00      	cmp	r3, #0
10003276:	d020      	beq.n	100032ba <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10003278:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
1000327e:	f023 0207 	bic.w	r2, r3, #7
10003282:	687b      	ldr	r3, [r7, #4]
10003284:	6a1b      	ldr	r3, [r3, #32]
10003286:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000328a:	4313      	orrs	r3, r2
1000328c:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000328e:	f7fe fcbb 	bl	10001c08 <HAL_GetTick>
10003292:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10003294:	e009      	b.n	100032aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003296:	f7fe fcb7 	bl	10001c08 <HAL_GetTick>
1000329a:	4602      	mov	r2, r0
1000329c:	68bb      	ldr	r3, [r7, #8]
1000329e:	1ad3      	subs	r3, r2, r3
100032a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100032a4:	d901      	bls.n	100032aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100032a6:	2303      	movs	r3, #3
100032a8:	e086      	b.n	100033b8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100032aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100032b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100032b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100032b8:	d1ed      	bne.n	10003296 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
100032ba:	687b      	ldr	r3, [r7, #4]
100032bc:	681b      	ldr	r3, [r3, #0]
100032be:	f003 0320 	and.w	r3, r3, #32
100032c2:	2b00      	cmp	r3, #0
100032c4:	d023      	beq.n	1000330e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
100032c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032ca:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
100032ce:	f023 0207 	bic.w	r2, r3, #7
100032d2:	687b      	ldr	r3, [r7, #4]
100032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100032d6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100032da:	4313      	orrs	r3, r2
100032dc:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100032e0:	f7fe fc92 	bl	10001c08 <HAL_GetTick>
100032e4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100032e6:	e009      	b.n	100032fc <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100032e8:	f7fe fc8e 	bl	10001c08 <HAL_GetTick>
100032ec:	4602      	mov	r2, r0
100032ee:	68bb      	ldr	r3, [r7, #8]
100032f0:	1ad3      	subs	r3, r2, r3
100032f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100032f6:	d901      	bls.n	100032fc <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
100032f8:	2303      	movs	r3, #3
100032fa:	e05d      	b.n	100033b8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100032fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003300:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10003304:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003308:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000330c:	d1ec      	bne.n	100032e8 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000330e:	687b      	ldr	r3, [r7, #4]
10003310:	681b      	ldr	r3, [r3, #0]
10003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10003316:	2b00      	cmp	r3, #0
10003318:	d023      	beq.n	10003362 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
1000331a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000331e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10003322:	f023 0207 	bic.w	r2, r3, #7
10003326:	687b      	ldr	r3, [r7, #4]
10003328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000332a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000332e:	4313      	orrs	r3, r2
10003330:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003334:	f7fe fc68 	bl	10001c08 <HAL_GetTick>
10003338:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000333a:	e009      	b.n	10003350 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000333c:	f7fe fc64 	bl	10001c08 <HAL_GetTick>
10003340:	4602      	mov	r2, r0
10003342:	68bb      	ldr	r3, [r7, #8]
10003344:	1ad3      	subs	r3, r2, r3
10003346:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000334a:	d901      	bls.n	10003350 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
1000334c:	2303      	movs	r3, #3
1000334e:	e033      	b.n	100033b8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10003350:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003354:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10003358:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000335c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003360:	d1ec      	bne.n	1000333c <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10003362:	687b      	ldr	r3, [r7, #4]
10003364:	681b      	ldr	r3, [r3, #0]
10003366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
1000336a:	2b00      	cmp	r3, #0
1000336c:	d023      	beq.n	100033b6 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
1000336e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003372:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10003376:	f023 0207 	bic.w	r2, r3, #7
1000337a:	687b      	ldr	r3, [r7, #4]
1000337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000337e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003382:	4313      	orrs	r3, r2
10003384:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003388:	f7fe fc3e 	bl	10001c08 <HAL_GetTick>
1000338c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000338e:	e009      	b.n	100033a4 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003390:	f7fe fc3a 	bl	10001c08 <HAL_GetTick>
10003394:	4602      	mov	r2, r0
10003396:	68bb      	ldr	r3, [r7, #8]
10003398:	1ad3      	subs	r3, r2, r3
1000339a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000339e:	d901      	bls.n	100033a4 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
100033a0:	2303      	movs	r3, #3
100033a2:	e009      	b.n	100033b8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100033a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033a8:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
100033ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100033b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100033b4:	d1ec      	bne.n	10003390 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
100033b6:	2300      	movs	r3, #0
}
100033b8:	4618      	mov	r0, r3
100033ba:	3710      	adds	r7, #16
100033bc:	46bd      	mov	sp, r7
100033be:	bd80      	pop	{r7, pc}

100033c0 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
100033c0:	b580      	push	{r7, lr}
100033c2:	b084      	sub	sp, #16
100033c4:	af00      	add	r7, sp, #0
100033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
100033c8:	687b      	ldr	r3, [r7, #4]
100033ca:	681b      	ldr	r3, [r3, #0]
100033cc:	2b03      	cmp	r3, #3
100033ce:	d840      	bhi.n	10003452 <RCC_MPUConfig+0x92>
100033d0:	a201      	add	r2, pc, #4	@ (adr r2, 100033d8 <RCC_MPUConfig+0x18>)
100033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100033d6:	bf00      	nop
100033d8:	100033e9 	.word	0x100033e9
100033dc:	100033fd 	.word	0x100033fd
100033e0:	10003413 	.word	0x10003413
100033e4:	10003427 	.word	0x10003427
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100033e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033ec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100033f0:	f003 0301 	and.w	r3, r3, #1
100033f4:	2b01      	cmp	r3, #1
100033f6:	d02e      	beq.n	10003456 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
100033f8:	2301      	movs	r3, #1
100033fa:	e053      	b.n	100034a4 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100033fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003400:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10003408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000340c:	d025      	beq.n	1000345a <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000340e:	2301      	movs	r3, #1
10003410:	e048      	b.n	100034a4 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10003412:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000341a:	f003 0302 	and.w	r3, r3, #2
1000341e:	2b02      	cmp	r3, #2
10003420:	d01d      	beq.n	1000345e <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10003422:	2301      	movs	r3, #1
10003424:	e03e      	b.n	100034a4 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10003426:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000342e:	f003 0302 	and.w	r3, r3, #2
10003432:	2b02      	cmp	r3, #2
10003434:	d001      	beq.n	1000343a <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10003436:	2301      	movs	r3, #1
10003438:	e034      	b.n	100034a4 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
1000343a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003440:	f023 0207 	bic.w	r2, r3, #7
10003444:	687b      	ldr	r3, [r7, #4]
10003446:	685b      	ldr	r3, [r3, #4]
10003448:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000344c:	4313      	orrs	r3, r2
1000344e:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
10003450:	e006      	b.n	10003460 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10003452:	2301      	movs	r3, #1
10003454:	e026      	b.n	100034a4 <RCC_MPUConfig+0xe4>
      break;
10003456:	bf00      	nop
10003458:	e002      	b.n	10003460 <RCC_MPUConfig+0xa0>
      break;
1000345a:	bf00      	nop
1000345c:	e000      	b.n	10003460 <RCC_MPUConfig+0xa0>
      break;
1000345e:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10003460:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003464:	6a1b      	ldr	r3, [r3, #32]
10003466:	f023 0203 	bic.w	r2, r3, #3
1000346a:	687b      	ldr	r3, [r7, #4]
1000346c:	681b      	ldr	r3, [r3, #0]
1000346e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003472:	4313      	orrs	r3, r2
10003474:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003476:	f7fe fbc7 	bl	10001c08 <HAL_GetTick>
1000347a:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000347c:	e009      	b.n	10003492 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000347e:	f7fe fbc3 	bl	10001c08 <HAL_GetTick>
10003482:	4602      	mov	r2, r0
10003484:	68fb      	ldr	r3, [r7, #12]
10003486:	1ad3      	subs	r3, r2, r3
10003488:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000348c:	d901      	bls.n	10003492 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
1000348e:	2303      	movs	r3, #3
10003490:	e008      	b.n	100034a4 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10003492:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003496:	6a1b      	ldr	r3, [r3, #32]
10003498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000349c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100034a0:	d1ed      	bne.n	1000347e <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
100034a2:	2300      	movs	r3, #0
}
100034a4:	4618      	mov	r0, r3
100034a6:	3710      	adds	r7, #16
100034a8:	46bd      	mov	sp, r7
100034aa:	bd80      	pop	{r7, pc}

100034ac <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
100034ac:	b580      	push	{r7, lr}
100034ae:	b084      	sub	sp, #16
100034b0:	af00      	add	r7, sp, #0
100034b2:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
100034b4:	687b      	ldr	r3, [r7, #4]
100034b6:	681b      	ldr	r3, [r3, #0]
100034b8:	2b02      	cmp	r3, #2
100034ba:	d01b      	beq.n	100034f4 <RCC_AXISSConfig+0x48>
100034bc:	2b02      	cmp	r3, #2
100034be:	d823      	bhi.n	10003508 <RCC_AXISSConfig+0x5c>
100034c0:	2b00      	cmp	r3, #0
100034c2:	d002      	beq.n	100034ca <RCC_AXISSConfig+0x1e>
100034c4:	2b01      	cmp	r3, #1
100034c6:	d00a      	beq.n	100034de <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
100034c8:	e01e      	b.n	10003508 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100034ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034ce:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100034d2:	f003 0301 	and.w	r3, r3, #1
100034d6:	2b01      	cmp	r3, #1
100034d8:	d018      	beq.n	1000350c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
100034da:	2301      	movs	r3, #1
100034dc:	e079      	b.n	100035d2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100034de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034e2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100034e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100034ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100034ee:	d00f      	beq.n	10003510 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
100034f0:	2301      	movs	r3, #1
100034f2:	e06e      	b.n	100035d2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100034f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100034fc:	f003 0302 	and.w	r3, r3, #2
10003500:	2b02      	cmp	r3, #2
10003502:	d007      	beq.n	10003514 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10003504:	2301      	movs	r3, #1
10003506:	e064      	b.n	100035d2 <RCC_AXISSConfig+0x126>
      break;
10003508:	bf00      	nop
1000350a:	e004      	b.n	10003516 <RCC_AXISSConfig+0x6a>
      break;
1000350c:	bf00      	nop
1000350e:	e002      	b.n	10003516 <RCC_AXISSConfig+0x6a>
      break;
10003510:	bf00      	nop
10003512:	e000      	b.n	10003516 <RCC_AXISSConfig+0x6a>
      break;
10003514:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10003516:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000351c:	f023 0207 	bic.w	r2, r3, #7
10003520:	687b      	ldr	r3, [r7, #4]
10003522:	681b      	ldr	r3, [r3, #0]
10003524:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003528:	4313      	orrs	r3, r2
1000352a:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
1000352c:	687b      	ldr	r3, [r7, #4]
1000352e:	681b      	ldr	r3, [r3, #0]
10003530:	2b03      	cmp	r3, #3
10003532:	d016      	beq.n	10003562 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003534:	f7fe fb68 	bl	10001c08 <HAL_GetTick>
10003538:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000353a:	e009      	b.n	10003550 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000353c:	f7fe fb64 	bl	10001c08 <HAL_GetTick>
10003540:	4602      	mov	r2, r0
10003542:	68fb      	ldr	r3, [r7, #12]
10003544:	1ad3      	subs	r3, r2, r3
10003546:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000354a:	d901      	bls.n	10003550 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
1000354c:	2303      	movs	r3, #3
1000354e:	e040      	b.n	100035d2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10003550:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000355a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000355e:	d1ed      	bne.n	1000353c <RCC_AXISSConfig+0x90>
10003560:	e015      	b.n	1000358e <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10003562:	f7fe fb51 	bl	10001c08 <HAL_GetTick>
10003566:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10003568:	e009      	b.n	1000357e <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000356a:	f7fe fb4d 	bl	10001c08 <HAL_GetTick>
1000356e:	4602      	mov	r2, r0
10003570:	68fb      	ldr	r3, [r7, #12]
10003572:	1ad3      	subs	r3, r2, r3
10003574:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003578:	d901      	bls.n	1000357e <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
1000357a:	2303      	movs	r3, #3
1000357c:	e029      	b.n	100035d2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
1000357e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000358c:	d0ed      	beq.n	1000356a <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
1000358e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003594:	f023 0207 	bic.w	r2, r3, #7
10003598:	687b      	ldr	r3, [r7, #4]
1000359a:	685b      	ldr	r3, [r3, #4]
1000359c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100035a0:	4313      	orrs	r3, r2
100035a2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100035a4:	f7fe fb30 	bl	10001c08 <HAL_GetTick>
100035a8:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100035aa:	e009      	b.n	100035c0 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100035ac:	f7fe fb2c 	bl	10001c08 <HAL_GetTick>
100035b0:	4602      	mov	r2, r0
100035b2:	68fb      	ldr	r3, [r7, #12]
100035b4:	1ad3      	subs	r3, r2, r3
100035b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100035ba:	d901      	bls.n	100035c0 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
100035bc:	2303      	movs	r3, #3
100035be:	e008      	b.n	100035d2 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100035c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100035c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100035ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100035ce:	d1ed      	bne.n	100035ac <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
100035d0:	2300      	movs	r3, #0
}
100035d2:	4618      	mov	r0, r3
100035d4:	3710      	adds	r7, #16
100035d6:	46bd      	mov	sp, r7
100035d8:	bd80      	pop	{r7, pc}
	...

100035dc <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
100035dc:	b580      	push	{r7, lr}
100035de:	b084      	sub	sp, #16
100035e0:	af00      	add	r7, sp, #0
100035e2:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
100035e4:	687b      	ldr	r3, [r7, #4]
100035e6:	681b      	ldr	r3, [r3, #0]
100035e8:	2b03      	cmp	r3, #3
100035ea:	d834      	bhi.n	10003656 <RCC_MCUConfig+0x7a>
100035ec:	a201      	add	r2, pc, #4	@ (adr r2, 100035f4 <RCC_MCUConfig+0x18>)
100035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100035f2:	bf00      	nop
100035f4:	10003605 	.word	0x10003605
100035f8:	10003619 	.word	0x10003619
100035fc:	1000362f 	.word	0x1000362f
10003600:	10003643 	.word	0x10003643
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10003604:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003608:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000360c:	f003 0301 	and.w	r3, r3, #1
10003610:	2b01      	cmp	r3, #1
10003612:	d022      	beq.n	1000365a <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10003614:	2301      	movs	r3, #1
10003616:	e081      	b.n	1000371c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10003618:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000361c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10003620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10003624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10003628:	d019      	beq.n	1000365e <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
1000362a:	2301      	movs	r3, #1
1000362c:	e076      	b.n	1000371c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000362e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003632:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10003636:	f003 0310 	and.w	r3, r3, #16
1000363a:	2b10      	cmp	r3, #16
1000363c:	d011      	beq.n	10003662 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
1000363e:	2301      	movs	r3, #1
10003640:	e06c      	b.n	1000371c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003642:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003646:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000364a:	f003 0302 	and.w	r3, r3, #2
1000364e:	2b02      	cmp	r3, #2
10003650:	d009      	beq.n	10003666 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10003652:	2301      	movs	r3, #1
10003654:	e062      	b.n	1000371c <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10003656:	bf00      	nop
10003658:	e006      	b.n	10003668 <RCC_MCUConfig+0x8c>
      break;
1000365a:	bf00      	nop
1000365c:	e004      	b.n	10003668 <RCC_MCUConfig+0x8c>
      break;
1000365e:	bf00      	nop
10003660:	e002      	b.n	10003668 <RCC_MCUConfig+0x8c>
      break;
10003662:	bf00      	nop
10003664:	e000      	b.n	10003668 <RCC_MCUConfig+0x8c>
      break;
10003666:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10003668:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000366c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000366e:	f023 0203 	bic.w	r2, r3, #3
10003672:	687b      	ldr	r3, [r7, #4]
10003674:	681b      	ldr	r3, [r3, #0]
10003676:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000367a:	4313      	orrs	r3, r2
1000367c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000367e:	f7fe fac3 	bl	10001c08 <HAL_GetTick>
10003682:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10003684:	e009      	b.n	1000369a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10003686:	f7fe fabf 	bl	10001c08 <HAL_GetTick>
1000368a:	4602      	mov	r2, r0
1000368c:	68fb      	ldr	r3, [r7, #12]
1000368e:	1ad3      	subs	r3, r2, r3
10003690:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10003694:	d901      	bls.n	1000369a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10003696:	2303      	movs	r3, #3
10003698:	e040      	b.n	1000371c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
1000369a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000369e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100036a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100036a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100036a8:	d1ed      	bne.n	10003686 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100036aa:	f000 f954 	bl	10003956 <HAL_RCC_GetSystemCoreClockFreq>
100036ae:	4603      	mov	r3, r0
100036b0:	4a1c      	ldr	r2, [pc, #112]	@ (10003724 <RCC_MCUConfig+0x148>)
100036b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100036b4:	4b1c      	ldr	r3, [pc, #112]	@ (10003728 <RCC_MCUConfig+0x14c>)
100036b6:	681b      	ldr	r3, [r3, #0]
100036b8:	4618      	mov	r0, r3
100036ba:	f7fe fa5b 	bl	10001b74 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
100036be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036c2:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100036c6:	f023 020f 	bic.w	r2, r3, #15
100036ca:	687b      	ldr	r3, [r7, #4]
100036cc:	685b      	ldr	r3, [r3, #4]
100036ce:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100036d2:	4313      	orrs	r3, r2
100036d4:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100036d8:	f7fe fa96 	bl	10001c08 <HAL_GetTick>
100036dc:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100036de:	e009      	b.n	100036f4 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100036e0:	f7fe fa92 	bl	10001c08 <HAL_GetTick>
100036e4:	4602      	mov	r2, r0
100036e6:	68fb      	ldr	r3, [r7, #12]
100036e8:	1ad3      	subs	r3, r2, r3
100036ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100036ee:	d901      	bls.n	100036f4 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
100036f0:	2303      	movs	r3, #3
100036f2:	e013      	b.n	1000371c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
100036f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036f8:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100036fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003700:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003704:	d1ec      	bne.n	100036e0 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10003706:	f000 f926 	bl	10003956 <HAL_RCC_GetSystemCoreClockFreq>
1000370a:	4603      	mov	r3, r0
1000370c:	4a05      	ldr	r2, [pc, #20]	@ (10003724 <RCC_MCUConfig+0x148>)
1000370e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10003710:	4b05      	ldr	r3, [pc, #20]	@ (10003728 <RCC_MCUConfig+0x14c>)
10003712:	681b      	ldr	r3, [r3, #0]
10003714:	4618      	mov	r0, r3
10003716:	f7fe fa2d 	bl	10001b74 <HAL_InitTick>
#endif

  return HAL_OK;
1000371a:	2300      	movs	r3, #0
}
1000371c:	4618      	mov	r0, r3
1000371e:	3710      	adds	r7, #16
10003720:	46bd      	mov	sp, r7
10003722:	bd80      	pop	{r7, pc}
10003724:	10020000 	.word	0x10020000
10003728:	1002000c 	.word	0x1002000c

1000372c <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
1000372c:	b480      	push	{r7}
1000372e:	b089      	sub	sp, #36	@ 0x24
10003730:	af00      	add	r7, sp, #0
10003732:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10003734:	2300      	movs	r3, #0
10003736:	61bb      	str	r3, [r7, #24]
10003738:	2301      	movs	r3, #1
1000373a:	617b      	str	r3, [r7, #20]
1000373c:	2300      	movs	r3, #0
1000373e:	613b      	str	r3, [r7, #16]
10003740:	2300      	movs	r3, #0
10003742:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10003744:	f04f 0300 	mov.w	r3, #0
10003748:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
1000374a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000374e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10003752:	f003 0303 	and.w	r3, r3, #3
10003756:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10003758:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000375c:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10003760:	0c1b      	lsrs	r3, r3, #16
10003762:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10003766:	3301      	adds	r3, #1
10003768:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
1000376a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000376e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003772:	0c1b      	lsrs	r3, r3, #16
10003774:	f003 0301 	and.w	r3, r3, #1
10003778:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
1000377a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000377e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003782:	08db      	lsrs	r3, r3, #3
10003784:	f3c3 030c 	ubfx	r3, r3, #0, #13
10003788:	693a      	ldr	r2, [r7, #16]
1000378a:	fb02 f303 	mul.w	r3, r2, r3
1000378e:	ee07 3a90 	vmov	s15, r3
10003792:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003796:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
1000379a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000379e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
100037a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
100037a6:	3301      	adds	r3, #1
100037a8:	ee07 3a90 	vmov	s15, r3
100037ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100037b0:	edd7 6a02 	vldr	s13, [r7, #8]
100037b4:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 10003910 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
100037b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
100037bc:	ee77 7a27 	vadd.f32	s15, s14, s15
100037c0:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100037c4:	69bb      	ldr	r3, [r7, #24]
100037c6:	2b03      	cmp	r3, #3
100037c8:	d85b      	bhi.n	10003882 <HAL_RCC_GetPLL3ClockFreq+0x156>
100037ca:	a201      	add	r2, pc, #4	@ (adr r2, 100037d0 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
100037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100037d0:	100037e1 	.word	0x100037e1
100037d4:	1000383f 	.word	0x1000383f
100037d8:	1000385d 	.word	0x1000385d
100037dc:	1000387b 	.word	0x1000387b
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100037e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037e4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100037e8:	f003 0304 	and.w	r3, r3, #4
100037ec:	2b04      	cmp	r3, #4
100037ee:	d117      	bne.n	10003820 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100037f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037f4:	699b      	ldr	r3, [r3, #24]
100037f6:	f003 0303 	and.w	r3, r3, #3
100037fa:	4a46      	ldr	r2, [pc, #280]	@ (10003914 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100037fc:	fa22 f303 	lsr.w	r3, r2, r3
10003800:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10003802:	68fa      	ldr	r2, [r7, #12]
10003804:	697b      	ldr	r3, [r7, #20]
10003806:	fbb2 f3f3 	udiv	r3, r2, r3
1000380a:	ee07 3a90 	vmov	s15, r3
1000380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003812:	ed97 7a07 	vldr	s14, [r7, #28]
10003816:	ee67 7a27 	vmul.f32	s15, s14, s15
1000381a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
1000381e:	e030      	b.n	10003882 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10003820:	4a3c      	ldr	r2, [pc, #240]	@ (10003914 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10003822:	697b      	ldr	r3, [r7, #20]
10003824:	fbb2 f3f3 	udiv	r3, r2, r3
10003828:	ee07 3a90 	vmov	s15, r3
1000382c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003830:	ed97 7a07 	vldr	s14, [r7, #28]
10003834:	ee67 7a27 	vmul.f32	s15, s14, s15
10003838:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000383c:	e021      	b.n	10003882 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
1000383e:	4a36      	ldr	r2, [pc, #216]	@ (10003918 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10003840:	697b      	ldr	r3, [r7, #20]
10003842:	fbb2 f3f3 	udiv	r3, r2, r3
10003846:	ee07 3a90 	vmov	s15, r3
1000384a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000384e:	ed97 7a07 	vldr	s14, [r7, #28]
10003852:	ee67 7a27 	vmul.f32	s15, s14, s15
10003856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000385a:	e012      	b.n	10003882 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
1000385c:	4a2f      	ldr	r2, [pc, #188]	@ (1000391c <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
1000385e:	697b      	ldr	r3, [r7, #20]
10003860:	fbb2 f3f3 	udiv	r3, r2, r3
10003864:	ee07 3a90 	vmov	s15, r3
10003868:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000386c:	ed97 7a07 	vldr	s14, [r7, #28]
10003870:	ee67 7a27 	vmul.f32	s15, s14, s15
10003874:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10003878:	e003      	b.n	10003882 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
1000387a:	f04f 0300 	mov.w	r3, #0
1000387e:	61fb      	str	r3, [r7, #28]
      break;
10003880:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10003882:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003886:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
1000388a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000388e:	3301      	adds	r3, #1
10003890:	ee07 3a90 	vmov	s15, r3
10003894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003898:	edd7 6a07 	vldr	s13, [r7, #28]
1000389c:	eec6 7a87 	vdiv.f32	s15, s13, s14
100038a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100038a4:	ee17 2a90 	vmov	r2, s15
100038a8:	687b      	ldr	r3, [r7, #4]
100038aa:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100038ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038b0:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100038b4:	0a1b      	lsrs	r3, r3, #8
100038b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100038ba:	3301      	adds	r3, #1
100038bc:	ee07 3a90 	vmov	s15, r3
100038c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100038c4:	edd7 6a07 	vldr	s13, [r7, #28]
100038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
100038cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100038d0:	ee17 2a90 	vmov	r2, s15
100038d4:	687b      	ldr	r3, [r7, #4]
100038d6:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
100038d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038dc:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100038e0:	0c1b      	lsrs	r3, r3, #16
100038e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100038e6:	3301      	adds	r3, #1
100038e8:	ee07 3a90 	vmov	s15, r3
100038ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100038f0:	edd7 6a07 	vldr	s13, [r7, #28]
100038f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
100038f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100038fc:	ee17 2a90 	vmov	r2, s15
10003900:	687b      	ldr	r3, [r7, #4]
10003902:	609a      	str	r2, [r3, #8]
}
10003904:	bf00      	nop
10003906:	3724      	adds	r7, #36	@ 0x24
10003908:	46bd      	mov	sp, r7
1000390a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000390e:	4770      	bx	lr
10003910:	46000000 	.word	0x46000000
10003914:	03d09000 	.word	0x03d09000
10003918:	016e3600 	.word	0x016e3600
1000391c:	003d0900 	.word	0x003d0900

10003920 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10003920:	b580      	push	{r7, lr}
10003922:	b082      	sub	sp, #8
10003924:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10003926:	2300      	movs	r3, #0
10003928:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
1000392a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000392e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10003932:	f003 030f 	and.w	r3, r3, #15
10003936:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10003938:	687b      	ldr	r3, [r7, #4]
1000393a:	2b09      	cmp	r3, #9
1000393c:	d901      	bls.n	10003942 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
1000393e:	2309      	movs	r3, #9
10003940:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10003942:	f000 f80f 	bl	10003964 <HAL_RCC_GetMCUSSFreq>
10003946:	4602      	mov	r2, r0
10003948:	687b      	ldr	r3, [r7, #4]
1000394a:	fa22 f303 	lsr.w	r3, r2, r3
}
1000394e:	4618      	mov	r0, r3
10003950:	3708      	adds	r7, #8
10003952:	46bd      	mov	sp, r7
10003954:	bd80      	pop	{r7, pc}

10003956 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10003956:	b580      	push	{r7, lr}
10003958:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
1000395a:	f7ff ffe1 	bl	10003920 <HAL_RCC_GetMCUFreq>
1000395e:	4603      	mov	r3, r0
#endif
}
10003960:	4618      	mov	r0, r3
10003962:	bd80      	pop	{r7, pc}

10003964 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10003964:	b580      	push	{r7, lr}
10003966:	b084      	sub	sp, #16
10003968:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
1000396a:	2300      	movs	r3, #0
1000396c:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
1000396e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003974:	f003 0303 	and.w	r3, r3, #3
10003978:	2b03      	cmp	r3, #3
1000397a:	d822      	bhi.n	100039c2 <HAL_RCC_GetMCUSSFreq+0x5e>
1000397c:	a201      	add	r2, pc, #4	@ (adr r2, 10003984 <HAL_RCC_GetMCUSSFreq+0x20>)
1000397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003982:	bf00      	nop
10003984:	100039a3 	.word	0x100039a3
10003988:	100039b7 	.word	0x100039b7
1000398c:	100039bd 	.word	0x100039bd
10003990:	10003995 	.word	0x10003995
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10003994:	463b      	mov	r3, r7
10003996:	4618      	mov	r0, r3
10003998:	f7ff fec8 	bl	1000372c <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
1000399c:	683b      	ldr	r3, [r7, #0]
1000399e:	60fb      	str	r3, [r7, #12]
      break;
100039a0:	e00f      	b.n	100039c2 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100039a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039a6:	699b      	ldr	r3, [r3, #24]
100039a8:	f003 0303 	and.w	r3, r3, #3
100039ac:	4a07      	ldr	r2, [pc, #28]	@ (100039cc <HAL_RCC_GetMCUSSFreq+0x68>)
100039ae:	fa22 f303 	lsr.w	r3, r2, r3
100039b2:	60fb      	str	r3, [r7, #12]

      break;
100039b4:	e005      	b.n	100039c2 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
100039b6:	4b06      	ldr	r3, [pc, #24]	@ (100039d0 <HAL_RCC_GetMCUSSFreq+0x6c>)
100039b8:	60fb      	str	r3, [r7, #12]
      break;
100039ba:	e002      	b.n	100039c2 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
100039bc:	4b05      	ldr	r3, [pc, #20]	@ (100039d4 <HAL_RCC_GetMCUSSFreq+0x70>)
100039be:	60fb      	str	r3, [r7, #12]
      break;
100039c0:	bf00      	nop
  }

  return mcussfreq;
100039c2:	68fb      	ldr	r3, [r7, #12]
}
100039c4:	4618      	mov	r0, r3
100039c6:	3710      	adds	r7, #16
100039c8:	46bd      	mov	sp, r7
100039ca:	bd80      	pop	{r7, pc}
100039cc:	03d09000 	.word	0x03d09000
100039d0:	016e3600 	.word	0x016e3600
100039d4:	003d0900 	.word	0x003d0900

100039d8 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
100039d8:	b580      	push	{r7, lr}
100039da:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
100039dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039e0:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	@ 0xc18
100039e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
100039e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
100039ec:	d107      	bne.n	100039fe <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
100039ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100039f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
100039f6:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
100039fa:	f000 f802 	bl	10003a02 <HAL_RCC_WAKEUP_Callback>
  }
}
100039fe:	bf00      	nop
10003a00:	bd80      	pop	{r7, pc}

10003a02 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10003a02:	b480      	push	{r7}
10003a04:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10003a06:	bf00      	nop
10003a08:	46bd      	mov	sp, r7
10003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
10003a0e:	4770      	bx	lr

10003a10 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10003a10:	b580      	push	{r7, lr}
10003a12:	b084      	sub	sp, #16
10003a14:	af00      	add	r7, sp, #0
10003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10003a18:	687b      	ldr	r3, [r7, #4]
10003a1a:	681b      	ldr	r3, [r3, #0]
10003a1c:	2b00      	cmp	r3, #0
10003a1e:	f000 8171 	beq.w	10003d04 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10003a22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003a28:	f003 0307 	and.w	r3, r3, #7
10003a2c:	2b02      	cmp	r3, #2
10003a2e:	d108      	bne.n	10003a42 <RCCEx_PLL2_Config+0x32>
10003a30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003a36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003a3e:	f000 815f 	beq.w	10003d00 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10003a42:	687b      	ldr	r3, [r7, #4]
10003a44:	681b      	ldr	r3, [r3, #0]
10003a46:	2b02      	cmp	r3, #2
10003a48:	f040 8130 	bne.w	10003cac <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10003a4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003a52:	f003 0303 	and.w	r3, r3, #3
10003a56:	2b00      	cmp	r3, #0
10003a58:	d008      	beq.n	10003a6c <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10003a5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003a60:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10003a64:	2b01      	cmp	r3, #1
10003a66:	d001      	beq.n	10003a6c <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10003a68:	2301      	movs	r3, #1
10003a6a:	e14c      	b.n	10003d06 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003a6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003a74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003a7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10003a80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003a88:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a8c:	f023 0301 	bic.w	r3, r3, #1
10003a90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003a94:	f7fe f8b8 	bl	10001c08 <HAL_GetTick>
10003a98:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003a9a:	e008      	b.n	10003aae <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003a9c:	f7fe f8b4 	bl	10001c08 <HAL_GetTick>
10003aa0:	4602      	mov	r2, r0
10003aa2:	68fb      	ldr	r3, [r7, #12]
10003aa4:	1ad3      	subs	r3, r2, r3
10003aa6:	2b64      	cmp	r3, #100	@ 0x64
10003aa8:	d901      	bls.n	10003aae <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10003aaa:	2303      	movs	r3, #3
10003aac:	e12b      	b.n	10003d06 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003aae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003ab6:	f003 0302 	and.w	r3, r3, #2
10003aba:	2b02      	cmp	r3, #2
10003abc:	d0ee      	beq.n	10003a9c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10003abe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ac2:	6a1b      	ldr	r3, [r3, #32]
10003ac4:	f003 0303 	and.w	r3, r3, #3
10003ac8:	2b02      	cmp	r3, #2
10003aca:	d107      	bne.n	10003adc <RCCEx_PLL2_Config+0xcc>
10003acc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ad0:	6a1b      	ldr	r3, [r3, #32]
10003ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003ada:	d00e      	beq.n	10003afa <RCCEx_PLL2_Config+0xea>
10003adc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ae0:	6a1b      	ldr	r3, [r3, #32]
10003ae2:	f003 0303 	and.w	r3, r3, #3
10003ae6:	2b03      	cmp	r3, #3
10003ae8:	d112      	bne.n	10003b10 <RCCEx_PLL2_Config+0x100>
10003aea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003aee:	6a1b      	ldr	r3, [r3, #32]
10003af0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003af4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003af8:	d10a      	bne.n	10003b10 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10003afa:	687b      	ldr	r3, [r7, #4]
10003afc:	685a      	ldr	r2, [r3, #4]
10003afe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003b04:	f003 0303 	and.w	r3, r3, #3
10003b08:	429a      	cmp	r2, r3
10003b0a:	d00c      	beq.n	10003b26 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10003b0c:	2301      	movs	r3, #1
10003b0e:	e0fa      	b.n	10003d06 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10003b10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10003b16:	f023 0203 	bic.w	r2, r3, #3
10003b1a:	687b      	ldr	r3, [r7, #4]
10003b1c:	685b      	ldr	r3, [r3, #4]
10003b1e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003b22:	4313      	orrs	r3, r2
10003b24:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10003b26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
10003b2e:	4b78      	ldr	r3, [pc, #480]	@ (10003d10 <RCCEx_PLL2_Config+0x300>)
10003b30:	4013      	ands	r3, r2
10003b32:	687a      	ldr	r2, [r7, #4]
10003b34:	68d2      	ldr	r2, [r2, #12]
10003b36:	1e51      	subs	r1, r2, #1
10003b38:	687a      	ldr	r2, [r7, #4]
10003b3a:	6892      	ldr	r2, [r2, #8]
10003b3c:	3a01      	subs	r2, #1
10003b3e:	0412      	lsls	r2, r2, #16
10003b40:	430a      	orrs	r2, r1
10003b42:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003b46:	4313      	orrs	r3, r2
10003b48:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
10003b4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10003b54:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10003b58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10003b5c:	687a      	ldr	r2, [r7, #4]
10003b5e:	6912      	ldr	r2, [r2, #16]
10003b60:	1e51      	subs	r1, r2, #1
10003b62:	687a      	ldr	r2, [r7, #4]
10003b64:	6952      	ldr	r2, [r2, #20]
10003b66:	3a01      	subs	r2, #1
10003b68:	0212      	lsls	r2, r2, #8
10003b6a:	4311      	orrs	r1, r2
10003b6c:	687a      	ldr	r2, [r7, #4]
10003b6e:	6992      	ldr	r2, [r2, #24]
10003b70:	3a01      	subs	r2, #1
10003b72:	0412      	lsls	r2, r2, #16
10003b74:	430a      	orrs	r2, r1
10003b76:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003b7a:	4313      	orrs	r3, r2
10003b7c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10003b80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003b88:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10003b90:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10003b94:	687b      	ldr	r3, [r7, #4]
10003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003b98:	2b02      	cmp	r3, #2
10003b9a:	d003      	beq.n	10003ba4 <RCCEx_PLL2_Config+0x194>
10003b9c:	687b      	ldr	r3, [r7, #4]
10003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003ba0:	2b00      	cmp	r3, #0
10003ba2:	d10c      	bne.n	10003bbe <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10003ba4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ba8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003bac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003bb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003bb4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003bb8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
10003bbc:	e00f      	b.n	10003bde <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10003bbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003bca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003bce:	687a      	ldr	r2, [r7, #4]
10003bd0:	6a12      	ldr	r2, [r2, #32]
10003bd2:	00d2      	lsls	r2, r2, #3
10003bd4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003bd8:	4313      	orrs	r3, r2
10003bda:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10003bde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003be2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10003be6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10003bee:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003bf2:	687b      	ldr	r3, [r7, #4]
10003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003bf6:	2b02      	cmp	r3, #2
10003bf8:	d124      	bne.n	10003c44 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10003bfa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
10003c02:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003c06:	687b      	ldr	r3, [r7, #4]
10003c08:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10003c0a:	687b      	ldr	r3, [r7, #4]
10003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003c0e:	4319      	orrs	r1, r3
10003c10:	687b      	ldr	r3, [r7, #4]
10003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003c14:	4319      	orrs	r1, r3
10003c16:	687b      	ldr	r3, [r7, #4]
10003c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10003c1a:	4319      	orrs	r1, r3
10003c1c:	687b      	ldr	r3, [r7, #4]
10003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003c20:	041b      	lsls	r3, r3, #16
10003c22:	430b      	orrs	r3, r1
10003c24:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003c28:	4313      	orrs	r3, r2
10003c2a:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10003c2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c3a:	f043 0304 	orr.w	r3, r3, #4
10003c3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
10003c42:	e009      	b.n	10003c58 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10003c44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c50:	f023 0304 	bic.w	r3, r3, #4
10003c54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10003c58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c64:	f043 0301 	orr.w	r3, r3, #1
10003c68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003c6c:	f7fd ffcc 	bl	10001c08 <HAL_GetTick>
10003c70:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10003c72:	e008      	b.n	10003c86 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003c74:	f7fd ffc8 	bl	10001c08 <HAL_GetTick>
10003c78:	4602      	mov	r2, r0
10003c7a:	68fb      	ldr	r3, [r7, #12]
10003c7c:	1ad3      	subs	r3, r2, r3
10003c7e:	2b64      	cmp	r3, #100	@ 0x64
10003c80:	d901      	bls.n	10003c86 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10003c82:	2303      	movs	r3, #3
10003c84:	e03f      	b.n	10003d06 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10003c86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c8e:	f003 0302 	and.w	r3, r3, #2
10003c92:	2b02      	cmp	r3, #2
10003c94:	d1ee      	bne.n	10003c74 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003c96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003c9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ca2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10003ca6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10003caa:	e02b      	b.n	10003d04 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003cac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003cb4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003cbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10003cc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003cc8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ccc:	f023 0301 	bic.w	r3, r3, #1
10003cd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003cd4:	f7fd ff98 	bl	10001c08 <HAL_GetTick>
10003cd8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003cda:	e008      	b.n	10003cee <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003cdc:	f7fd ff94 	bl	10001c08 <HAL_GetTick>
10003ce0:	4602      	mov	r2, r0
10003ce2:	68fb      	ldr	r3, [r7, #12]
10003ce4:	1ad3      	subs	r3, r2, r3
10003ce6:	2b64      	cmp	r3, #100	@ 0x64
10003ce8:	d901      	bls.n	10003cee <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10003cea:	2303      	movs	r3, #3
10003cec:	e00b      	b.n	10003d06 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003cee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003cf6:	f003 0302 	and.w	r3, r3, #2
10003cfa:	2b02      	cmp	r3, #2
10003cfc:	d0ee      	beq.n	10003cdc <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10003cfe:	e001      	b.n	10003d04 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003d00:	2301      	movs	r3, #1
10003d02:	e000      	b.n	10003d06 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10003d04:	2300      	movs	r3, #0

}
10003d06:	4618      	mov	r0, r3
10003d08:	3710      	adds	r7, #16
10003d0a:	46bd      	mov	sp, r7
10003d0c:	bd80      	pop	{r7, pc}
10003d0e:	bf00      	nop
10003d10:	ffc0fe00 	.word	0xffc0fe00

10003d14 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10003d14:	b580      	push	{r7, lr}
10003d16:	b084      	sub	sp, #16
10003d18:	af00      	add	r7, sp, #0
10003d1a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10003d1c:	687b      	ldr	r3, [r7, #4]
10003d1e:	681b      	ldr	r3, [r3, #0]
10003d20:	2b00      	cmp	r3, #0
10003d22:	f000 815a 	beq.w	10003fda <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10003d26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003d2c:	f003 0303 	and.w	r3, r3, #3
10003d30:	2b03      	cmp	r3, #3
10003d32:	d108      	bne.n	10003d46 <RCCEx_PLL3_Config+0x32>
10003d34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003d42:	f000 8148 	beq.w	10003fd6 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10003d46:	687b      	ldr	r3, [r7, #4]
10003d48:	681b      	ldr	r3, [r3, #0]
10003d4a:	2b02      	cmp	r3, #2
10003d4c:	f040 8119 	bne.w	10003f82 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003d50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d54:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d58:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003d60:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10003d64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d68:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d70:	f023 0301 	bic.w	r3, r3, #1
10003d74:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003d78:	f7fd ff46 	bl	10001c08 <HAL_GetTick>
10003d7c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003d7e:	e008      	b.n	10003d92 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003d80:	f7fd ff42 	bl	10001c08 <HAL_GetTick>
10003d84:	4602      	mov	r2, r0
10003d86:	68fb      	ldr	r3, [r7, #12]
10003d88:	1ad3      	subs	r3, r2, r3
10003d8a:	2b64      	cmp	r3, #100	@ 0x64
10003d8c:	d901      	bls.n	10003d92 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10003d8e:	2303      	movs	r3, #3
10003d90:	e124      	b.n	10003fdc <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003d92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d96:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003d9a:	f003 0302 	and.w	r3, r3, #2
10003d9e:	2b02      	cmp	r3, #2
10003da0:	d0ee      	beq.n	10003d80 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10003da2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003da6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10003daa:	f023 0203 	bic.w	r2, r3, #3
10003dae:	687b      	ldr	r3, [r7, #4]
10003db0:	685b      	ldr	r3, [r3, #4]
10003db2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003db6:	4313      	orrs	r3, r2
10003db8:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003dbc:	e008      	b.n	10003dd0 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003dbe:	f7fd ff23 	bl	10001c08 <HAL_GetTick>
10003dc2:	4602      	mov	r2, r0
10003dc4:	68fb      	ldr	r3, [r7, #12]
10003dc6:	1ad3      	subs	r3, r2, r3
10003dc8:	2b64      	cmp	r3, #100	@ 0x64
10003dca:	d901      	bls.n	10003dd0 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10003dcc:	2303      	movs	r3, #3
10003dce:	e105      	b.n	10003fdc <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003dd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003dd4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10003dd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10003ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10003de0:	d1ed      	bne.n	10003dbe <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10003de2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003de6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10003dea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10003dee:	687b      	ldr	r3, [r7, #4]
10003df0:	69db      	ldr	r3, [r3, #28]
10003df2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003df6:	4313      	orrs	r3, r2
10003df8:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10003dfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e00:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
10003e04:	4b77      	ldr	r3, [pc, #476]	@ (10003fe4 <RCCEx_PLL3_Config+0x2d0>)
10003e06:	4013      	ands	r3, r2
10003e08:	687a      	ldr	r2, [r7, #4]
10003e0a:	68d2      	ldr	r2, [r2, #12]
10003e0c:	1e51      	subs	r1, r2, #1
10003e0e:	687a      	ldr	r2, [r7, #4]
10003e10:	6892      	ldr	r2, [r2, #8]
10003e12:	3a01      	subs	r2, #1
10003e14:	0412      	lsls	r2, r2, #16
10003e16:	430a      	orrs	r2, r1
10003e18:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003e1c:	4313      	orrs	r3, r2
10003e1e:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
10003e22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e26:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10003e2a:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10003e2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10003e32:	687a      	ldr	r2, [r7, #4]
10003e34:	6912      	ldr	r2, [r2, #16]
10003e36:	1e51      	subs	r1, r2, #1
10003e38:	687a      	ldr	r2, [r7, #4]
10003e3a:	6952      	ldr	r2, [r2, #20]
10003e3c:	3a01      	subs	r2, #1
10003e3e:	0212      	lsls	r2, r2, #8
10003e40:	4311      	orrs	r1, r2
10003e42:	687a      	ldr	r2, [r7, #4]
10003e44:	6992      	ldr	r2, [r2, #24]
10003e46:	3a01      	subs	r2, #1
10003e48:	0412      	lsls	r2, r2, #16
10003e4a:	430a      	orrs	r2, r1
10003e4c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003e50:	4313      	orrs	r3, r2
10003e52:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10003e56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e5a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003e5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10003e66:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10003e6a:	687b      	ldr	r3, [r7, #4]
10003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003e6e:	2b02      	cmp	r3, #2
10003e70:	d003      	beq.n	10003e7a <RCCEx_PLL3_Config+0x166>
10003e72:	687b      	ldr	r3, [r7, #4]
10003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003e76:	2b00      	cmp	r3, #0
10003e78:	d10c      	bne.n	10003e94 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10003e7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e7e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003e82:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003e8a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003e8e:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
10003e92:	e00f      	b.n	10003eb4 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10003e94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e98:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003e9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003ea0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003ea4:	687a      	ldr	r2, [r7, #4]
10003ea6:	6a12      	ldr	r2, [r2, #32]
10003ea8:	00d2      	lsls	r2, r2, #3
10003eaa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003eae:	4313      	orrs	r3, r2
10003eb0:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10003eb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003eb8:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10003ebc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10003ec4:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003ec8:	687b      	ldr	r3, [r7, #4]
10003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003ecc:	2b02      	cmp	r3, #2
10003ece:	d124      	bne.n	10003f1a <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10003ed0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ed4:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
10003ed8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10003edc:	687b      	ldr	r3, [r7, #4]
10003ede:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10003ee0:	687b      	ldr	r3, [r7, #4]
10003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003ee4:	4319      	orrs	r1, r3
10003ee6:	687b      	ldr	r3, [r7, #4]
10003ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003eea:	4319      	orrs	r1, r3
10003eec:	687b      	ldr	r3, [r7, #4]
10003eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10003ef0:	4319      	orrs	r1, r3
10003ef2:	687b      	ldr	r3, [r7, #4]
10003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003ef6:	041b      	lsls	r3, r3, #16
10003ef8:	430b      	orrs	r3, r1
10003efa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003efe:	4313      	orrs	r3, r2
10003f00:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10003f04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f08:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f10:	f043 0304 	orr.w	r3, r3, #4
10003f14:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
10003f18:	e009      	b.n	10003f2e <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10003f1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f1e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f26:	f023 0304 	bic.w	r3, r3, #4
10003f2a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10003f2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f32:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f3a:	f043 0301 	orr.w	r3, r3, #1
10003f3e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003f42:	f7fd fe61 	bl	10001c08 <HAL_GetTick>
10003f46:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003f48:	e008      	b.n	10003f5c <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003f4a:	f7fd fe5d 	bl	10001c08 <HAL_GetTick>
10003f4e:	4602      	mov	r2, r0
10003f50:	68fb      	ldr	r3, [r7, #12]
10003f52:	1ad3      	subs	r3, r2, r3
10003f54:	2b64      	cmp	r3, #100	@ 0x64
10003f56:	d901      	bls.n	10003f5c <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10003f58:	2303      	movs	r3, #3
10003f5a:	e03f      	b.n	10003fdc <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10003f5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f60:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f64:	f003 0302 	and.w	r3, r3, #2
10003f68:	2b02      	cmp	r3, #2
10003f6a:	d1ee      	bne.n	10003f4a <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003f6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f70:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f78:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10003f7c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10003f80:	e02b      	b.n	10003fda <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003f82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f86:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003f92:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10003f96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f9a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fa2:	f023 0301 	bic.w	r3, r3, #1
10003fa6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003faa:	f7fd fe2d 	bl	10001c08 <HAL_GetTick>
10003fae:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003fb0:	e008      	b.n	10003fc4 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003fb2:	f7fd fe29 	bl	10001c08 <HAL_GetTick>
10003fb6:	4602      	mov	r2, r0
10003fb8:	68fb      	ldr	r3, [r7, #12]
10003fba:	1ad3      	subs	r3, r2, r3
10003fbc:	2b64      	cmp	r3, #100	@ 0x64
10003fbe:	d901      	bls.n	10003fc4 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10003fc0:	2303      	movs	r3, #3
10003fc2:	e00b      	b.n	10003fdc <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003fc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fc8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003fcc:	f003 0302 	and.w	r3, r3, #2
10003fd0:	2b02      	cmp	r3, #2
10003fd2:	d0ee      	beq.n	10003fb2 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10003fd4:	e001      	b.n	10003fda <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003fd6:	2301      	movs	r3, #1
10003fd8:	e000      	b.n	10003fdc <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10003fda:	2300      	movs	r3, #0
}
10003fdc:	4618      	mov	r0, r3
10003fde:	3710      	adds	r7, #16
10003fe0:	46bd      	mov	sp, r7
10003fe2:	bd80      	pop	{r7, pc}
10003fe4:	ffc0fe00 	.word	0xffc0fe00

10003fe8 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10003fe8:	b580      	push	{r7, lr}
10003fea:	b084      	sub	sp, #16
10003fec:	af00      	add	r7, sp, #0
10003fee:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10003ff0:	687b      	ldr	r3, [r7, #4]
10003ff2:	681b      	ldr	r3, [r3, #0]
10003ff4:	2b00      	cmp	r3, #0
10003ff6:	f000 8147 	beq.w	10004288 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10003ffa:	687b      	ldr	r3, [r7, #4]
10003ffc:	681b      	ldr	r3, [r3, #0]
10003ffe:	2b02      	cmp	r3, #2
10004000:	f040 8119 	bne.w	10004236 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10004004:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004008:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000400c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10004014:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10004018:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000401c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004020:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004024:	f023 0301 	bic.w	r3, r3, #1
10004028:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000402c:	f7fd fdec 	bl	10001c08 <HAL_GetTick>
10004030:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10004032:	e008      	b.n	10004046 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004034:	f7fd fde8 	bl	10001c08 <HAL_GetTick>
10004038:	4602      	mov	r2, r0
1000403a:	68fb      	ldr	r3, [r7, #12]
1000403c:	1ad3      	subs	r3, r2, r3
1000403e:	2b64      	cmp	r3, #100	@ 0x64
10004040:	d901      	bls.n	10004046 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10004042:	2303      	movs	r3, #3
10004044:	e121      	b.n	1000428a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10004046:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000404a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000404e:	f003 0302 	and.w	r3, r3, #2
10004052:	2b02      	cmp	r3, #2
10004054:	d0ee      	beq.n	10004034 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10004056:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000405a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
1000405e:	f023 0203 	bic.w	r2, r3, #3
10004062:	687b      	ldr	r3, [r7, #4]
10004064:	685b      	ldr	r3, [r3, #4]
10004066:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000406a:	4313      	orrs	r3, r2
1000406c:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10004070:	e008      	b.n	10004084 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004072:	f7fd fdc9 	bl	10001c08 <HAL_GetTick>
10004076:	4602      	mov	r2, r0
10004078:	68fb      	ldr	r3, [r7, #12]
1000407a:	1ad3      	subs	r3, r2, r3
1000407c:	2b64      	cmp	r3, #100	@ 0x64
1000407e:	d901      	bls.n	10004084 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10004080:	2303      	movs	r3, #3
10004082:	e102      	b.n	1000428a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10004084:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004088:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
1000408c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004094:	d1ed      	bne.n	10004072 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10004096:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000409a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
1000409e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
100040a2:	687b      	ldr	r3, [r7, #4]
100040a4:	69db      	ldr	r3, [r3, #28]
100040a6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100040aa:	4313      	orrs	r3, r2
100040ac:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
100040b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040b4:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
100040b8:	4b76      	ldr	r3, [pc, #472]	@ (10004294 <RCCEx_PLL4_Config+0x2ac>)
100040ba:	4013      	ands	r3, r2
100040bc:	687a      	ldr	r2, [r7, #4]
100040be:	68d2      	ldr	r2, [r2, #12]
100040c0:	1e51      	subs	r1, r2, #1
100040c2:	687a      	ldr	r2, [r7, #4]
100040c4:	6892      	ldr	r2, [r2, #8]
100040c6:	3a01      	subs	r2, #1
100040c8:	0412      	lsls	r2, r2, #16
100040ca:	430a      	orrs	r2, r1
100040cc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100040d0:	4313      	orrs	r3, r2
100040d2:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
100040d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040da:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
100040de:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100040e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100040e6:	687a      	ldr	r2, [r7, #4]
100040e8:	6912      	ldr	r2, [r2, #16]
100040ea:	1e51      	subs	r1, r2, #1
100040ec:	687a      	ldr	r2, [r7, #4]
100040ee:	6952      	ldr	r2, [r2, #20]
100040f0:	3a01      	subs	r2, #1
100040f2:	0212      	lsls	r2, r2, #8
100040f4:	4311      	orrs	r1, r2
100040f6:	687a      	ldr	r2, [r7, #4]
100040f8:	6992      	ldr	r2, [r2, #24]
100040fa:	3a01      	subs	r2, #1
100040fc:	0412      	lsls	r2, r2, #16
100040fe:	430a      	orrs	r2, r1
10004100:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004104:	4313      	orrs	r3, r2
10004106:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
1000410a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000410e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10004112:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
1000411a:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
1000411e:	687b      	ldr	r3, [r7, #4]
10004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004122:	2b02      	cmp	r3, #2
10004124:	d003      	beq.n	1000412e <RCCEx_PLL4_Config+0x146>
10004126:	687b      	ldr	r3, [r7, #4]
10004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000412a:	2b00      	cmp	r3, #0
1000412c:	d10c      	bne.n	10004148 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
1000412e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004132:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10004136:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000413a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000413e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10004142:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
10004146:	e00f      	b.n	10004168 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10004148:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000414c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10004150:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10004154:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10004158:	687a      	ldr	r2, [r7, #4]
1000415a:	6a12      	ldr	r2, [r2, #32]
1000415c:	00d2      	lsls	r2, r2, #3
1000415e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004162:	4313      	orrs	r3, r2
10004164:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10004168:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000416c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10004170:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10004178:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000417c:	687b      	ldr	r3, [r7, #4]
1000417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004180:	2b02      	cmp	r3, #2
10004182:	d124      	bne.n	100041ce <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10004184:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004188:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
1000418c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10004190:	687b      	ldr	r3, [r7, #4]
10004192:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10004194:	687b      	ldr	r3, [r7, #4]
10004196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10004198:	4319      	orrs	r1, r3
1000419a:	687b      	ldr	r3, [r7, #4]
1000419c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000419e:	4319      	orrs	r1, r3
100041a0:	687b      	ldr	r3, [r7, #4]
100041a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100041a4:	4319      	orrs	r1, r3
100041a6:	687b      	ldr	r3, [r7, #4]
100041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100041aa:	041b      	lsls	r3, r3, #16
100041ac:	430b      	orrs	r3, r1
100041ae:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100041b2:	4313      	orrs	r3, r2
100041b4:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
100041b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041bc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100041c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041c4:	f043 0304 	orr.w	r3, r3, #4
100041c8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
100041cc:	e009      	b.n	100041e2 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
100041ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041d2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100041d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041da:	f023 0304 	bic.w	r3, r3, #4
100041de:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
100041e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041e6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100041ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041ee:	f043 0301 	orr.w	r3, r3, #1
100041f2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100041f6:	f7fd fd07 	bl	10001c08 <HAL_GetTick>
100041fa:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100041fc:	e008      	b.n	10004210 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100041fe:	f7fd fd03 	bl	10001c08 <HAL_GetTick>
10004202:	4602      	mov	r2, r0
10004204:	68fb      	ldr	r3, [r7, #12]
10004206:	1ad3      	subs	r3, r2, r3
10004208:	2b64      	cmp	r3, #100	@ 0x64
1000420a:	d901      	bls.n	10004210 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
1000420c:	2303      	movs	r3, #3
1000420e:	e03c      	b.n	1000428a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10004210:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004214:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004218:	f003 0302 	and.w	r3, r3, #2
1000421c:	2b02      	cmp	r3, #2
1000421e:	d1ee      	bne.n	100041fe <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10004220:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004224:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004228:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000422c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10004230:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10004234:	e028      	b.n	10004288 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10004236:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000423a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000423e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10004246:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
1000424a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000424e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004252:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004256:	f023 0301 	bic.w	r3, r3, #1
1000425a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000425e:	f7fd fcd3 	bl	10001c08 <HAL_GetTick>
10004262:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10004264:	e008      	b.n	10004278 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004266:	f7fd fccf 	bl	10001c08 <HAL_GetTick>
1000426a:	4602      	mov	r2, r0
1000426c:	68fb      	ldr	r3, [r7, #12]
1000426e:	1ad3      	subs	r3, r2, r3
10004270:	2b64      	cmp	r3, #100	@ 0x64
10004272:	d901      	bls.n	10004278 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10004274:	2303      	movs	r3, #3
10004276:	e008      	b.n	1000428a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10004278:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000427c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004280:	f003 0302 	and.w	r3, r3, #2
10004284:	2b02      	cmp	r3, #2
10004286:	d0ee      	beq.n	10004266 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10004288:	2300      	movs	r3, #0
}
1000428a:	4618      	mov	r0, r3
1000428c:	3710      	adds	r7, #16
1000428e:	46bd      	mov	sp, r7
10004290:	bd80      	pop	{r7, pc}
10004292:	bf00      	nop
10004294:	ffc0fe00 	.word	0xffc0fe00

10004298 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
1000429c:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
100042a0:	af00      	add	r7, sp, #0
100042a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042aa:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
100042ac:	2300      	movs	r3, #0
100042ae:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
100042b2:	2300      	movs	r3, #0
100042b4:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
100042b8:	2300      	movs	r3, #0
100042ba:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
100042be:	2300      	movs	r3, #0
100042c0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
100042c4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042cc:	681b      	ldr	r3, [r3, #0]
100042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
100042d2:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
100042d6:	2500      	movs	r5, #0
100042d8:	ea54 0305 	orrs.w	r3, r4, r5
100042dc:	d011      	beq.n	10004302 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
100042de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
100042e6:	f023 0103 	bic.w	r1, r3, #3
100042ea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042f2:	681b      	ldr	r3, [r3, #0]
100042f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
100042f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042fc:	430b      	orrs	r3, r1
100042fe:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10004302:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004306:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000430a:	681b      	ldr	r3, [r3, #0]
1000430c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004310:	f002 0810 	and.w	r8, r2, #16
10004314:	f04f 0900 	mov.w	r9, #0
10004318:	ea58 0309 	orrs.w	r3, r8, r9
1000431c:	d038      	beq.n	10004390 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
1000431e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004322:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004326:	681b      	ldr	r3, [r3, #0]
10004328:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
1000432c:	2b01      	cmp	r3, #1
1000432e:	d11d      	bne.n	1000436c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004330:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004334:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004338:	681b      	ldr	r3, [r3, #0]
1000433a:	3380      	adds	r3, #128	@ 0x80
1000433c:	4618      	mov	r0, r3
1000433e:	f7ff fe53 	bl	10003fe8 <RCCEx_PLL4_Config>
10004342:	4603      	mov	r3, r0
10004344:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004348:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000434c:	2b00      	cmp	r3, #0
1000434e:	d003      	beq.n	10004358 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10004350:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004354:	f001 be2a 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004358:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000435c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004360:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004368:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
1000436c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004370:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
10004374:	f023 0107 	bic.w	r1, r3, #7
10004378:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000437c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004380:	681b      	ldr	r3, [r3, #0]
10004382:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10004386:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000438a:	430b      	orrs	r3, r1
1000438c:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10004390:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004394:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004398:	681b      	ldr	r3, [r3, #0]
1000439a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000439e:	f002 0a20 	and.w	sl, r2, #32
100043a2:	f04f 0b00 	mov.w	fp, #0
100043a6:	ea5a 030b 	orrs.w	r3, sl, fp
100043aa:	d038      	beq.n	1000441e <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
100043ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043b4:	681b      	ldr	r3, [r3, #0]
100043b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
100043ba:	2b01      	cmp	r3, #1
100043bc:	d11d      	bne.n	100043fa <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100043be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043c6:	681b      	ldr	r3, [r3, #0]
100043c8:	3380      	adds	r3, #128	@ 0x80
100043ca:	4618      	mov	r0, r3
100043cc:	f7ff fe0c 	bl	10003fe8 <RCCEx_PLL4_Config>
100043d0:	4603      	mov	r3, r0
100043d2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100043d6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043da:	2b00      	cmp	r3, #0
100043dc:	d003      	beq.n	100043e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
100043de:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100043e2:	f001 bde3 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100043e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043ea:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100043ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100043f6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
100043fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043fe:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
10004402:	f023 0107 	bic.w	r1, r3, #7
10004406:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000440a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000440e:	681b      	ldr	r3, [r3, #0]
10004410:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10004414:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004418:	430b      	orrs	r3, r1
1000441a:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
1000441e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004422:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004426:	681b      	ldr	r3, [r3, #0]
10004428:	e9d3 2300 	ldrd	r2, r3, [r3]
1000442c:	2100      	movs	r1, #0
1000442e:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
10004432:	f003 0320 	and.w	r3, r3, #32
10004436:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
1000443a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
1000443e:	460b      	mov	r3, r1
10004440:	4313      	orrs	r3, r2
10004442:	d038      	beq.n	100044b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10004444:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004448:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000444c:	681b      	ldr	r3, [r3, #0]
1000444e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10004452:	2b01      	cmp	r3, #1
10004454:	d11d      	bne.n	10004492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004456:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000445a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000445e:	681b      	ldr	r3, [r3, #0]
10004460:	3344      	adds	r3, #68	@ 0x44
10004462:	4618      	mov	r0, r3
10004464:	f7ff fc56 	bl	10003d14 <RCCEx_PLL3_Config>
10004468:	4603      	mov	r3, r0
1000446a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000446e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004472:	2b00      	cmp	r3, #0
10004474:	d003      	beq.n	1000447e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10004476:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000447a:	f001 bd97 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000447e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004482:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004486:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000448a:	f043 0320 	orr.w	r3, r3, #32
1000448e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10004492:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004496:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
1000449a:	f023 0107 	bic.w	r1, r3, #7
1000449e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044a6:	681b      	ldr	r3, [r3, #0]
100044a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
100044ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044b0:	430b      	orrs	r3, r1
100044b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
100044b6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044be:	681b      	ldr	r3, [r3, #0]
100044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
100044c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
100044c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
100044cc:	2300      	movs	r3, #0
100044ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
100044d2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
100044d6:	460b      	mov	r3, r1
100044d8:	4313      	orrs	r3, r2
100044da:	d07e      	beq.n	100045da <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
100044dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044e4:	681b      	ldr	r3, [r3, #0]
100044e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
100044ea:	2b04      	cmp	r3, #4
100044ec:	d044      	beq.n	10004578 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
100044ee:	2b04      	cmp	r3, #4
100044f0:	d861      	bhi.n	100045b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
100044f2:	2b00      	cmp	r3, #0
100044f4:	d002      	beq.n	100044fc <HAL_RCCEx_PeriphCLKConfig+0x264>
100044f6:	2b01      	cmp	r3, #1
100044f8:	d01f      	beq.n	1000453a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
100044fa:	e05c      	b.n	100045b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100044fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004500:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004504:	681b      	ldr	r3, [r3, #0]
10004506:	3380      	adds	r3, #128	@ 0x80
10004508:	4618      	mov	r0, r3
1000450a:	f7ff fd6d 	bl	10003fe8 <RCCEx_PLL4_Config>
1000450e:	4603      	mov	r3, r0
10004510:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004514:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004518:	2b00      	cmp	r3, #0
1000451a:	d003      	beq.n	10004524 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
1000451c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004520:	f001 bd44 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004524:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004528:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000452c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004530:	f043 0320 	orr.w	r3, r3, #32
10004534:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004538:	e03d      	b.n	100045b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000453a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000453e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004542:	681b      	ldr	r3, [r3, #0]
10004544:	3344      	adds	r3, #68	@ 0x44
10004546:	4618      	mov	r0, r3
10004548:	f7ff fbe4 	bl	10003d14 <RCCEx_PLL3_Config>
1000454c:	4603      	mov	r3, r0
1000454e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004552:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004556:	2b00      	cmp	r3, #0
10004558:	d003      	beq.n	10004562 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
1000455a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000455e:	f001 bd25 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004562:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004566:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000456a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000456e:	f043 0320 	orr.w	r3, r3, #32
10004572:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004576:	e01e      	b.n	100045b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004578:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000457c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004580:	681b      	ldr	r3, [r3, #0]
10004582:	3344      	adds	r3, #68	@ 0x44
10004584:	4618      	mov	r0, r3
10004586:	f7ff fbc5 	bl	10003d14 <RCCEx_PLL3_Config>
1000458a:	4603      	mov	r3, r0
1000458c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004590:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004594:	2b00      	cmp	r3, #0
10004596:	d003      	beq.n	100045a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10004598:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000459c:	f001 bd06 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100045a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045a4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100045a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100045b0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100045b4:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
100045b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045ba:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
100045be:	f023 0107 	bic.w	r1, r3, #7
100045c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045ca:	681b      	ldr	r3, [r3, #0]
100045cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
100045d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045d4:	430b      	orrs	r3, r1
100045d6:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
100045da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045e2:	681b      	ldr	r3, [r3, #0]
100045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
100045e8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
100045ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
100045f0:	2300      	movs	r3, #0
100045f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
100045f6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
100045fa:	460b      	mov	r3, r1
100045fc:	4313      	orrs	r3, r2
100045fe:	d07e      	beq.n	100046fe <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10004600:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004604:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004608:	681b      	ldr	r3, [r3, #0]
1000460a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
1000460e:	2b05      	cmp	r3, #5
10004610:	d044      	beq.n	1000469c <HAL_RCCEx_PeriphCLKConfig+0x404>
10004612:	2b05      	cmp	r3, #5
10004614:	d861      	bhi.n	100046da <HAL_RCCEx_PeriphCLKConfig+0x442>
10004616:	2b00      	cmp	r3, #0
10004618:	d002      	beq.n	10004620 <HAL_RCCEx_PeriphCLKConfig+0x388>
1000461a:	2b01      	cmp	r3, #1
1000461c:	d01f      	beq.n	1000465e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
1000461e:	e05c      	b.n	100046da <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004620:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004624:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004628:	681b      	ldr	r3, [r3, #0]
1000462a:	3380      	adds	r3, #128	@ 0x80
1000462c:	4618      	mov	r0, r3
1000462e:	f7ff fcdb 	bl	10003fe8 <RCCEx_PLL4_Config>
10004632:	4603      	mov	r3, r0
10004634:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004638:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000463c:	2b00      	cmp	r3, #0
1000463e:	d003      	beq.n	10004648 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10004640:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004644:	f001 bcb2 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004648:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000464c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004650:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004654:	f043 0320 	orr.w	r3, r3, #32
10004658:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000465c:	e03d      	b.n	100046da <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000465e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004662:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004666:	681b      	ldr	r3, [r3, #0]
10004668:	3344      	adds	r3, #68	@ 0x44
1000466a:	4618      	mov	r0, r3
1000466c:	f7ff fb52 	bl	10003d14 <RCCEx_PLL3_Config>
10004670:	4603      	mov	r3, r0
10004672:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004676:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000467a:	2b00      	cmp	r3, #0
1000467c:	d003      	beq.n	10004686 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
1000467e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004682:	f001 bc93 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004686:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000468a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000468e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004692:	f043 0320 	orr.w	r3, r3, #32
10004696:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000469a:	e01e      	b.n	100046da <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000469c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046a4:	681b      	ldr	r3, [r3, #0]
100046a6:	3344      	adds	r3, #68	@ 0x44
100046a8:	4618      	mov	r0, r3
100046aa:	f7ff fb33 	bl	10003d14 <RCCEx_PLL3_Config>
100046ae:	4603      	mov	r3, r0
100046b0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100046b4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100046b8:	2b00      	cmp	r3, #0
100046ba:	d003      	beq.n	100046c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
100046bc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100046c0:	f001 bc74 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100046c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046c8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100046cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100046d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100046d4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100046d8:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
100046da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046de:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
100046e2:	f023 0107 	bic.w	r1, r3, #7
100046e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046ee:	681b      	ldr	r3, [r3, #0]
100046f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
100046f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100046f8:	430b      	orrs	r3, r1
100046fa:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
100046fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004702:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004706:	681b      	ldr	r3, [r3, #0]
10004708:	e9d3 2300 	ldrd	r2, r3, [r3]
1000470c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
10004710:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
10004714:	2300      	movs	r3, #0
10004716:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
1000471a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
1000471e:	460b      	mov	r3, r1
10004720:	4313      	orrs	r3, r2
10004722:	d07e      	beq.n	10004822 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10004724:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004728:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000472c:	681b      	ldr	r3, [r3, #0]
1000472e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10004732:	2b04      	cmp	r3, #4
10004734:	d044      	beq.n	100047c0 <HAL_RCCEx_PeriphCLKConfig+0x528>
10004736:	2b04      	cmp	r3, #4
10004738:	d861      	bhi.n	100047fe <HAL_RCCEx_PeriphCLKConfig+0x566>
1000473a:	2b00      	cmp	r3, #0
1000473c:	d002      	beq.n	10004744 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
1000473e:	2b01      	cmp	r3, #1
10004740:	d01f      	beq.n	10004782 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
10004742:	e05c      	b.n	100047fe <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004744:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004748:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000474c:	681b      	ldr	r3, [r3, #0]
1000474e:	3380      	adds	r3, #128	@ 0x80
10004750:	4618      	mov	r0, r3
10004752:	f7ff fc49 	bl	10003fe8 <RCCEx_PLL4_Config>
10004756:	4603      	mov	r3, r0
10004758:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000475c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004760:	2b00      	cmp	r3, #0
10004762:	d003      	beq.n	1000476c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10004764:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004768:	f001 bc20 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000476c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004770:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004774:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004778:	f043 0320 	orr.w	r3, r3, #32
1000477c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004780:	e03d      	b.n	100047fe <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004782:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004786:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000478a:	681b      	ldr	r3, [r3, #0]
1000478c:	3344      	adds	r3, #68	@ 0x44
1000478e:	4618      	mov	r0, r3
10004790:	f7ff fac0 	bl	10003d14 <RCCEx_PLL3_Config>
10004794:	4603      	mov	r3, r0
10004796:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000479a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000479e:	2b00      	cmp	r3, #0
100047a0:	d003      	beq.n	100047aa <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
100047a2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047a6:	f001 bc01 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100047aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047ae:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100047b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047b6:	f043 0320 	orr.w	r3, r3, #32
100047ba:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100047be:	e01e      	b.n	100047fe <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100047c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047c8:	681b      	ldr	r3, [r3, #0]
100047ca:	3344      	adds	r3, #68	@ 0x44
100047cc:	4618      	mov	r0, r3
100047ce:	f7ff faa1 	bl	10003d14 <RCCEx_PLL3_Config>
100047d2:	4603      	mov	r3, r0
100047d4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100047d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047dc:	2b00      	cmp	r3, #0
100047de:	d003      	beq.n	100047e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
100047e0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100047e4:	f001 bbe2 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100047e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047ec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100047f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100047f8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100047fc:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
100047fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004802:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
10004806:	f023 0107 	bic.w	r1, r3, #7
1000480a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000480e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004812:	681b      	ldr	r3, [r3, #0]
10004814:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10004818:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000481c:	430b      	orrs	r3, r1
1000481e:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
10004822:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004826:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000482a:	681b      	ldr	r3, [r3, #0]
1000482c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004830:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
10004834:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
10004838:	2300      	movs	r3, #0
1000483a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
1000483e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
10004842:	460b      	mov	r3, r1
10004844:	4313      	orrs	r3, r2
10004846:	d07e      	beq.n	10004946 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10004848:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000484c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004850:	681b      	ldr	r3, [r3, #0]
10004852:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10004856:	2b04      	cmp	r3, #4
10004858:	d044      	beq.n	100048e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
1000485a:	2b04      	cmp	r3, #4
1000485c:	d861      	bhi.n	10004922 <HAL_RCCEx_PeriphCLKConfig+0x68a>
1000485e:	2b00      	cmp	r3, #0
10004860:	d002      	beq.n	10004868 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
10004862:	2b01      	cmp	r3, #1
10004864:	d01f      	beq.n	100048a6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
10004866:	e05c      	b.n	10004922 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004868:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000486c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004870:	681b      	ldr	r3, [r3, #0]
10004872:	3380      	adds	r3, #128	@ 0x80
10004874:	4618      	mov	r0, r3
10004876:	f7ff fbb7 	bl	10003fe8 <RCCEx_PLL4_Config>
1000487a:	4603      	mov	r3, r0
1000487c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004880:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004884:	2b00      	cmp	r3, #0
10004886:	d003      	beq.n	10004890 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10004888:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000488c:	f001 bb8e 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004890:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004894:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004898:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000489c:	f043 0320 	orr.w	r3, r3, #32
100048a0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100048a4:	e03d      	b.n	10004922 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100048a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048ae:	681b      	ldr	r3, [r3, #0]
100048b0:	3344      	adds	r3, #68	@ 0x44
100048b2:	4618      	mov	r0, r3
100048b4:	f7ff fa2e 	bl	10003d14 <RCCEx_PLL3_Config>
100048b8:	4603      	mov	r3, r0
100048ba:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100048be:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100048c2:	2b00      	cmp	r3, #0
100048c4:	d003      	beq.n	100048ce <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
100048c6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100048ca:	f001 bb6f 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100048ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100048d2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100048d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100048da:	f043 0320 	orr.w	r3, r3, #32
100048de:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100048e2:	e01e      	b.n	10004922 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100048e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048ec:	681b      	ldr	r3, [r3, #0]
100048ee:	3344      	adds	r3, #68	@ 0x44
100048f0:	4618      	mov	r0, r3
100048f2:	f7ff fa0f 	bl	10003d14 <RCCEx_PLL3_Config>
100048f6:	4603      	mov	r3, r0
100048f8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100048fc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004900:	2b00      	cmp	r3, #0
10004902:	d003      	beq.n	1000490c <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10004904:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004908:	f001 bb50 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000490c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004910:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004914:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000491c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004920:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
10004922:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004926:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
1000492a:	f023 0107 	bic.w	r1, r3, #7
1000492e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004932:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004936:	681b      	ldr	r3, [r3, #0]
10004938:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
1000493c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004940:	430b      	orrs	r3, r1
10004942:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10004946:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000494a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000494e:	681b      	ldr	r3, [r3, #0]
10004950:	e9d3 2300 	ldrd	r2, r3, [r3]
10004954:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
10004958:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
1000495c:	2300      	movs	r3, #0
1000495e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
10004962:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
10004966:	460b      	mov	r3, r1
10004968:	4313      	orrs	r3, r2
1000496a:	d07e      	beq.n	10004a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
1000496c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004970:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004974:	681b      	ldr	r3, [r3, #0]
10004976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
1000497a:	2b04      	cmp	r3, #4
1000497c:	d044      	beq.n	10004a08 <HAL_RCCEx_PeriphCLKConfig+0x770>
1000497e:	2b04      	cmp	r3, #4
10004980:	d861      	bhi.n	10004a46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10004982:	2b00      	cmp	r3, #0
10004984:	d002      	beq.n	1000498c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
10004986:	2b01      	cmp	r3, #1
10004988:	d01f      	beq.n	100049ca <HAL_RCCEx_PeriphCLKConfig+0x732>
1000498a:	e05c      	b.n	10004a46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000498c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004990:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004994:	681b      	ldr	r3, [r3, #0]
10004996:	3380      	adds	r3, #128	@ 0x80
10004998:	4618      	mov	r0, r3
1000499a:	f7ff fb25 	bl	10003fe8 <RCCEx_PLL4_Config>
1000499e:	4603      	mov	r3, r0
100049a0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100049a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049a8:	2b00      	cmp	r3, #0
100049aa:	d003      	beq.n	100049b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
100049ac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049b0:	f001 bafc 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100049b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049b8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100049bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049c0:	f043 0310 	orr.w	r3, r3, #16
100049c4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100049c8:	e03d      	b.n	10004a46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100049ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100049ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100049d2:	681b      	ldr	r3, [r3, #0]
100049d4:	3344      	adds	r3, #68	@ 0x44
100049d6:	4618      	mov	r0, r3
100049d8:	f7ff f99c 	bl	10003d14 <RCCEx_PLL3_Config>
100049dc:	4603      	mov	r3, r0
100049de:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100049e2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049e6:	2b00      	cmp	r3, #0
100049e8:	d003      	beq.n	100049f2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
100049ea:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049ee:	f001 badd 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100049f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049f6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100049fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049fe:	f043 0320 	orr.w	r3, r3, #32
10004a02:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004a06:	e01e      	b.n	10004a46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004a08:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a10:	681b      	ldr	r3, [r3, #0]
10004a12:	3344      	adds	r3, #68	@ 0x44
10004a14:	4618      	mov	r0, r3
10004a16:	f7ff f97d 	bl	10003d14 <RCCEx_PLL3_Config>
10004a1a:	4603      	mov	r3, r0
10004a1c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004a20:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a24:	2b00      	cmp	r3, #0
10004a26:	d003      	beq.n	10004a30 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10004a28:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a2c:	f001 babe 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004a30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a34:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004a38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004a40:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004a44:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10004a46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a4a:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
10004a4e:	f023 0107 	bic.w	r1, r3, #7
10004a52:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a5a:	681b      	ldr	r3, [r3, #0]
10004a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
10004a60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a64:	430b      	orrs	r3, r1
10004a66:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10004a6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a72:	681b      	ldr	r3, [r3, #0]
10004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a78:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
10004a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
10004a80:	2300      	movs	r3, #0
10004a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
10004a86:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
10004a8a:	460b      	mov	r3, r1
10004a8c:	4313      	orrs	r3, r2
10004a8e:	d07e      	beq.n	10004b8e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10004a90:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a98:	681b      	ldr	r3, [r3, #0]
10004a9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10004a9e:	2b04      	cmp	r3, #4
10004aa0:	d044      	beq.n	10004b2c <HAL_RCCEx_PeriphCLKConfig+0x894>
10004aa2:	2b04      	cmp	r3, #4
10004aa4:	d861      	bhi.n	10004b6a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
10004aa6:	2b00      	cmp	r3, #0
10004aa8:	d002      	beq.n	10004ab0 <HAL_RCCEx_PeriphCLKConfig+0x818>
10004aaa:	2b01      	cmp	r3, #1
10004aac:	d01f      	beq.n	10004aee <HAL_RCCEx_PeriphCLKConfig+0x856>
10004aae:	e05c      	b.n	10004b6a <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004ab0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ab4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ab8:	681b      	ldr	r3, [r3, #0]
10004aba:	3380      	adds	r3, #128	@ 0x80
10004abc:	4618      	mov	r0, r3
10004abe:	f7ff fa93 	bl	10003fe8 <RCCEx_PLL4_Config>
10004ac2:	4603      	mov	r3, r0
10004ac4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004ac8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004acc:	2b00      	cmp	r3, #0
10004ace:	d003      	beq.n	10004ad8 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10004ad0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ad4:	f001 ba6a 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004ad8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004adc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004ae0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004ae4:	f043 0310 	orr.w	r3, r3, #16
10004ae8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004aec:	e03d      	b.n	10004b6a <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004aee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004af2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004af6:	681b      	ldr	r3, [r3, #0]
10004af8:	3344      	adds	r3, #68	@ 0x44
10004afa:	4618      	mov	r0, r3
10004afc:	f7ff f90a 	bl	10003d14 <RCCEx_PLL3_Config>
10004b00:	4603      	mov	r3, r0
10004b02:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004b06:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b0a:	2b00      	cmp	r3, #0
10004b0c:	d003      	beq.n	10004b16 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
10004b0e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b12:	f001 ba4b 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004b16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b1a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004b1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b22:	f043 0320 	orr.w	r3, r3, #32
10004b26:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004b2a:	e01e      	b.n	10004b6a <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004b2c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b34:	681b      	ldr	r3, [r3, #0]
10004b36:	3344      	adds	r3, #68	@ 0x44
10004b38:	4618      	mov	r0, r3
10004b3a:	f7ff f8eb 	bl	10003d14 <RCCEx_PLL3_Config>
10004b3e:	4603      	mov	r3, r0
10004b40:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004b44:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b48:	2b00      	cmp	r3, #0
10004b4a:	d003      	beq.n	10004b54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10004b4c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b50:	f001 ba2c 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004b54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b58:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004b5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004b64:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004b68:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
10004b6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b6e:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
10004b72:	f023 0107 	bic.w	r1, r3, #7
10004b76:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b7e:	681b      	ldr	r3, [r3, #0]
10004b80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10004b84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b88:	430b      	orrs	r3, r1
10004b8a:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10004b8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b96:	681b      	ldr	r3, [r3, #0]
10004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
10004b9c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
10004ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
10004ba4:	2300      	movs	r3, #0
10004ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
10004baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
10004bae:	460b      	mov	r3, r1
10004bb0:	4313      	orrs	r3, r2
10004bb2:	d038      	beq.n	10004c26 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10004bb4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004bbc:	681b      	ldr	r3, [r3, #0]
10004bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10004bc2:	2b01      	cmp	r3, #1
10004bc4:	d11d      	bne.n	10004c02 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004bc6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004bce:	681b      	ldr	r3, [r3, #0]
10004bd0:	3380      	adds	r3, #128	@ 0x80
10004bd2:	4618      	mov	r0, r3
10004bd4:	f7ff fa08 	bl	10003fe8 <RCCEx_PLL4_Config>
10004bd8:	4603      	mov	r3, r0
10004bda:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004bde:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004be2:	2b00      	cmp	r3, #0
10004be4:	d003      	beq.n	10004bee <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10004be6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004bea:	f001 b9df 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004bee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bf2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004bf6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004bfa:	f043 0320 	orr.w	r3, r3, #32
10004bfe:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10004c02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c06:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
10004c0a:	f023 0107 	bic.w	r1, r3, #7
10004c0e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c16:	681b      	ldr	r3, [r3, #0]
10004c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10004c1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c20:	430b      	orrs	r3, r1
10004c22:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10004c26:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c2e:	681b      	ldr	r3, [r3, #0]
10004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
10004c34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
10004c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
10004c3c:	2300      	movs	r3, #0
10004c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
10004c42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
10004c46:	460b      	mov	r3, r1
10004c48:	4313      	orrs	r3, r2
10004c4a:	d05b      	beq.n	10004d04 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10004c4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c54:	681b      	ldr	r3, [r3, #0]
10004c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10004c5a:	2b01      	cmp	r3, #1
10004c5c:	d002      	beq.n	10004c64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
10004c5e:	2b05      	cmp	r3, #5
10004c60:	d01f      	beq.n	10004ca2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
10004c62:	e03d      	b.n	10004ce0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004c64:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c6c:	681b      	ldr	r3, [r3, #0]
10004c6e:	3380      	adds	r3, #128	@ 0x80
10004c70:	4618      	mov	r0, r3
10004c72:	f7ff f9b9 	bl	10003fe8 <RCCEx_PLL4_Config>
10004c76:	4603      	mov	r3, r0
10004c78:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004c7c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c80:	2b00      	cmp	r3, #0
10004c82:	d003      	beq.n	10004c8c <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10004c84:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c88:	f001 b990 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004c8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c90:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004c94:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c98:	f043 0320 	orr.w	r3, r3, #32
10004c9c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004ca0:	e01e      	b.n	10004ce0 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004ca2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ca6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004caa:	681b      	ldr	r3, [r3, #0]
10004cac:	3344      	adds	r3, #68	@ 0x44
10004cae:	4618      	mov	r0, r3
10004cb0:	f7ff f830 	bl	10003d14 <RCCEx_PLL3_Config>
10004cb4:	4603      	mov	r3, r0
10004cb6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004cba:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004cbe:	2b00      	cmp	r3, #0
10004cc0:	d003      	beq.n	10004cca <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10004cc2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004cc6:	f001 b971 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004cca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004cce:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004cd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004cd6:	f043 0320 	orr.w	r3, r3, #32
10004cda:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004cde:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10004ce0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ce4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10004ce8:	f023 0107 	bic.w	r1, r3, #7
10004cec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004cf4:	681b      	ldr	r3, [r3, #0]
10004cf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10004cfa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004cfe:	430b      	orrs	r3, r1
10004d00:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10004d04:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d0c:	681b      	ldr	r3, [r3, #0]
10004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004d12:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
10004d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
10004d1a:	2300      	movs	r3, #0
10004d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
10004d20:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
10004d24:	460b      	mov	r3, r1
10004d26:	4313      	orrs	r3, r2
10004d28:	d038      	beq.n	10004d9c <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10004d2a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d32:	681b      	ldr	r3, [r3, #0]
10004d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10004d38:	2b01      	cmp	r3, #1
10004d3a:	d11d      	bne.n	10004d78 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004d3c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d44:	681b      	ldr	r3, [r3, #0]
10004d46:	3380      	adds	r3, #128	@ 0x80
10004d48:	4618      	mov	r0, r3
10004d4a:	f7ff f94d 	bl	10003fe8 <RCCEx_PLL4_Config>
10004d4e:	4603      	mov	r3, r0
10004d50:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004d54:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004d58:	2b00      	cmp	r3, #0
10004d5a:	d003      	beq.n	10004d64 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
10004d5c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004d60:	f001 b924 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004d64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d68:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004d6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d70:	f043 0320 	orr.w	r3, r3, #32
10004d74:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10004d78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d7c:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
10004d80:	f023 0107 	bic.w	r1, r3, #7
10004d84:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004d8c:	681b      	ldr	r3, [r3, #0]
10004d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10004d92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d96:	430b      	orrs	r3, r1
10004d98:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10004d9c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004da0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004da4:	681b      	ldr	r3, [r3, #0]
10004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
10004daa:	f002 0302 	and.w	r3, r2, #2
10004dae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
10004db2:	2300      	movs	r3, #0
10004db4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
10004db8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
10004dbc:	460b      	mov	r3, r1
10004dbe:	4313      	orrs	r3, r2
10004dc0:	d038      	beq.n	10004e34 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10004dc2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004dc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004dca:	681b      	ldr	r3, [r3, #0]
10004dcc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10004dd0:	2b01      	cmp	r3, #1
10004dd2:	d11d      	bne.n	10004e10 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004dd4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004dd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ddc:	681b      	ldr	r3, [r3, #0]
10004dde:	3380      	adds	r3, #128	@ 0x80
10004de0:	4618      	mov	r0, r3
10004de2:	f7ff f901 	bl	10003fe8 <RCCEx_PLL4_Config>
10004de6:	4603      	mov	r3, r0
10004de8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004dec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004df0:	2b00      	cmp	r3, #0
10004df2:	d003      	beq.n	10004dfc <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10004df4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004df8:	f001 b8d8 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004dfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e00:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004e04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004e08:	f043 0320 	orr.w	r3, r3, #32
10004e0c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10004e10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e14:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
10004e18:	f023 0107 	bic.w	r1, r3, #7
10004e1c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e24:	681b      	ldr	r3, [r3, #0]
10004e26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10004e2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004e2e:	430b      	orrs	r3, r1
10004e30:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10004e34:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e3c:	681b      	ldr	r3, [r3, #0]
10004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004e42:	f002 0304 	and.w	r3, r2, #4
10004e46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
10004e4a:	2300      	movs	r3, #0
10004e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
10004e50:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
10004e54:	460b      	mov	r3, r1
10004e56:	4313      	orrs	r3, r2
10004e58:	d038      	beq.n	10004ecc <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10004e5a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e62:	681b      	ldr	r3, [r3, #0]
10004e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10004e68:	2b01      	cmp	r3, #1
10004e6a:	d11d      	bne.n	10004ea8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004e6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e74:	681b      	ldr	r3, [r3, #0]
10004e76:	3380      	adds	r3, #128	@ 0x80
10004e78:	4618      	mov	r0, r3
10004e7a:	f7ff f8b5 	bl	10003fe8 <RCCEx_PLL4_Config>
10004e7e:	4603      	mov	r3, r0
10004e80:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004e84:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004e88:	2b00      	cmp	r3, #0
10004e8a:	d003      	beq.n	10004e94 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
10004e8c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004e90:	f001 b88c 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004e94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e98:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004e9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004ea0:	f043 0320 	orr.w	r3, r3, #32
10004ea4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10004ea8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004eac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10004eb0:	f023 0107 	bic.w	r1, r3, #7
10004eb4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ebc:	681b      	ldr	r3, [r3, #0]
10004ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10004ec2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004ec6:	430b      	orrs	r3, r1
10004ec8:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10004ecc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ed0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ed4:	681b      	ldr	r3, [r3, #0]
10004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
10004eda:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
10004ede:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
10004ee2:	2300      	movs	r3, #0
10004ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
10004ee8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
10004eec:	460b      	mov	r3, r1
10004eee:	4313      	orrs	r3, r2
10004ef0:	d038      	beq.n	10004f64 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10004ef2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ef6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004efa:	681b      	ldr	r3, [r3, #0]
10004efc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10004f00:	2b01      	cmp	r3, #1
10004f02:	d11d      	bne.n	10004f40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004f04:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f0c:	681b      	ldr	r3, [r3, #0]
10004f0e:	3380      	adds	r3, #128	@ 0x80
10004f10:	4618      	mov	r0, r3
10004f12:	f7ff f869 	bl	10003fe8 <RCCEx_PLL4_Config>
10004f16:	4603      	mov	r3, r0
10004f18:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004f1c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004f20:	2b00      	cmp	r3, #0
10004f22:	d003      	beq.n	10004f2c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10004f24:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004f28:	f001 b840 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004f2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f30:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004f34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f38:	f043 0320 	orr.w	r3, r3, #32
10004f3c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10004f40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f44:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
10004f48:	f023 0107 	bic.w	r1, r3, #7
10004f4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f54:	681b      	ldr	r3, [r3, #0]
10004f56:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10004f5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004f5e:	430b      	orrs	r3, r1
10004f60:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10004f64:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f6c:	681b      	ldr	r3, [r3, #0]
10004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004f72:	f002 0301 	and.w	r3, r2, #1
10004f76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
10004f7a:	2300      	movs	r3, #0
10004f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
10004f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
10004f84:	460b      	mov	r3, r1
10004f86:	4313      	orrs	r3, r2
10004f88:	d05b      	beq.n	10005042 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
10004f8a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004f8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004f92:	681b      	ldr	r3, [r3, #0]
10004f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10004f98:	2b01      	cmp	r3, #1
10004f9a:	d002      	beq.n	10004fa2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10004f9c:	2b04      	cmp	r3, #4
10004f9e:	d01f      	beq.n	10004fe0 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10004fa0:	e03d      	b.n	1000501e <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004fa2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004fa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004faa:	681b      	ldr	r3, [r3, #0]
10004fac:	3344      	adds	r3, #68	@ 0x44
10004fae:	4618      	mov	r0, r3
10004fb0:	f7fe feb0 	bl	10003d14 <RCCEx_PLL3_Config>
10004fb4:	4603      	mov	r3, r0
10004fb6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004fba:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004fbe:	2b00      	cmp	r3, #0
10004fc0:	d003      	beq.n	10004fca <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10004fc2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004fc6:	f000 bff1 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004fca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004fce:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004fd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004fd6:	f043 0320 	orr.w	r3, r3, #32
10004fda:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004fde:	e01e      	b.n	1000501e <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004fe0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004fe4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004fe8:	681b      	ldr	r3, [r3, #0]
10004fea:	3380      	adds	r3, #128	@ 0x80
10004fec:	4618      	mov	r0, r3
10004fee:	f7fe fffb 	bl	10003fe8 <RCCEx_PLL4_Config>
10004ff2:	4603      	mov	r3, r0
10004ff4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004ff8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004ffc:	2b00      	cmp	r3, #0
10004ffe:	d003      	beq.n	10005008 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10005000:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005004:	f000 bfd2 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005008:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000500c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005010:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005014:	f043 0320 	orr.w	r3, r3, #32
10005018:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000501c:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
1000501e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005022:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10005026:	f023 0107 	bic.w	r1, r3, #7
1000502a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000502e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005032:	681b      	ldr	r3, [r3, #0]
10005034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10005038:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000503c:	430b      	orrs	r3, r1
1000503e:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10005042:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005046:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000504a:	681b      	ldr	r3, [r3, #0]
1000504c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005050:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
10005054:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
10005058:	2300      	movs	r3, #0
1000505a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
1000505e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
10005062:	460b      	mov	r3, r1
10005064:	4313      	orrs	r3, r2
10005066:	d05b      	beq.n	10005120 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10005068:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000506c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005070:	681b      	ldr	r3, [r3, #0]
10005072:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10005076:	2b01      	cmp	r3, #1
10005078:	d002      	beq.n	10005080 <HAL_RCCEx_PeriphCLKConfig+0xde8>
1000507a:	2b02      	cmp	r3, #2
1000507c:	d01f      	beq.n	100050be <HAL_RCCEx_PeriphCLKConfig+0xe26>
1000507e:	e03d      	b.n	100050fc <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005080:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005084:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005088:	681b      	ldr	r3, [r3, #0]
1000508a:	3344      	adds	r3, #68	@ 0x44
1000508c:	4618      	mov	r0, r3
1000508e:	f7fe fe41 	bl	10003d14 <RCCEx_PLL3_Config>
10005092:	4603      	mov	r3, r0
10005094:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005098:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000509c:	2b00      	cmp	r3, #0
1000509e:	d003      	beq.n	100050a8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
100050a0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100050a4:	f000 bf82 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100050a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050ac:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100050b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100050b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100050b8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100050bc:	e01e      	b.n	100050fc <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100050be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100050c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100050c6:	681b      	ldr	r3, [r3, #0]
100050c8:	3380      	adds	r3, #128	@ 0x80
100050ca:	4618      	mov	r0, r3
100050cc:	f7fe ff8c 	bl	10003fe8 <RCCEx_PLL4_Config>
100050d0:	4603      	mov	r3, r0
100050d2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100050d6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100050da:	2b00      	cmp	r3, #0
100050dc:	d003      	beq.n	100050e6 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
100050de:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100050e2:	f000 bf63 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100050e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050ea:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100050ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100050f2:	f043 0310 	orr.w	r3, r3, #16
100050f6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100050fa:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
100050fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005100:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
10005104:	f023 0107 	bic.w	r1, r3, #7
10005108:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000510c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005110:	681b      	ldr	r3, [r3, #0]
10005112:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10005116:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000511a:	430b      	orrs	r3, r1
1000511c:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10005120:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005124:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005128:	681b      	ldr	r3, [r3, #0]
1000512a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000512e:	2100      	movs	r1, #0
10005130:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
10005134:	f003 0301 	and.w	r3, r3, #1
10005138:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
1000513c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
10005140:	460b      	mov	r3, r1
10005142:	4313      	orrs	r3, r2
10005144:	d05b      	beq.n	100051fe <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10005146:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000514a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000514e:	681b      	ldr	r3, [r3, #0]
10005150:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10005154:	2b01      	cmp	r3, #1
10005156:	d002      	beq.n	1000515e <HAL_RCCEx_PeriphCLKConfig+0xec6>
10005158:	2b02      	cmp	r3, #2
1000515a:	d01f      	beq.n	1000519c <HAL_RCCEx_PeriphCLKConfig+0xf04>
1000515c:	e03d      	b.n	100051da <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000515e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005162:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005166:	681b      	ldr	r3, [r3, #0]
10005168:	3344      	adds	r3, #68	@ 0x44
1000516a:	4618      	mov	r0, r3
1000516c:	f7fe fdd2 	bl	10003d14 <RCCEx_PLL3_Config>
10005170:	4603      	mov	r3, r0
10005172:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005176:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000517a:	2b00      	cmp	r3, #0
1000517c:	d003      	beq.n	10005186 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
1000517e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005182:	f000 bf13 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005186:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000518a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000518e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005196:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000519a:	e01e      	b.n	100051da <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000519c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051a4:	681b      	ldr	r3, [r3, #0]
100051a6:	3380      	adds	r3, #128	@ 0x80
100051a8:	4618      	mov	r0, r3
100051aa:	f7fe ff1d 	bl	10003fe8 <RCCEx_PLL4_Config>
100051ae:	4603      	mov	r3, r0
100051b0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100051b4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100051b8:	2b00      	cmp	r3, #0
100051ba:	d003      	beq.n	100051c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
100051bc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100051c0:	f000 bef4 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100051c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100051c8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100051cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100051d0:	f043 0310 	orr.w	r3, r3, #16
100051d4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100051d8:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
100051da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100051de:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
100051e2:	f023 0107 	bic.w	r1, r3, #7
100051e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100051ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100051ee:	681b      	ldr	r3, [r3, #0]
100051f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
100051f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100051f8:	430b      	orrs	r3, r1
100051fa:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
100051fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005202:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005206:	681b      	ldr	r3, [r3, #0]
10005208:	e9d3 2300 	ldrd	r2, r3, [r3]
1000520c:	2100      	movs	r1, #0
1000520e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
10005212:	f003 0302 	and.w	r3, r3, #2
10005216:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
1000521a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
1000521e:	460b      	mov	r3, r1
10005220:	4313      	orrs	r3, r2
10005222:	d05b      	beq.n	100052dc <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10005224:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005228:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000522c:	681b      	ldr	r3, [r3, #0]
1000522e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10005232:	2b00      	cmp	r3, #0
10005234:	d002      	beq.n	1000523c <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10005236:	2b01      	cmp	r3, #1
10005238:	d01f      	beq.n	1000527a <HAL_RCCEx_PeriphCLKConfig+0xfe2>
1000523a:	e03d      	b.n	100052b8 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000523c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005240:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005244:	681b      	ldr	r3, [r3, #0]
10005246:	3380      	adds	r3, #128	@ 0x80
10005248:	4618      	mov	r0, r3
1000524a:	f7fe fecd 	bl	10003fe8 <RCCEx_PLL4_Config>
1000524e:	4603      	mov	r3, r0
10005250:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005254:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005258:	2b00      	cmp	r3, #0
1000525a:	d003      	beq.n	10005264 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
1000525c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005260:	f000 bea4 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005264:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005268:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000526c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005270:	f043 0310 	orr.w	r3, r3, #16
10005274:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005278:	e01e      	b.n	100052b8 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000527a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000527e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005282:	681b      	ldr	r3, [r3, #0]
10005284:	3344      	adds	r3, #68	@ 0x44
10005286:	4618      	mov	r0, r3
10005288:	f7fe fd44 	bl	10003d14 <RCCEx_PLL3_Config>
1000528c:	4603      	mov	r3, r0
1000528e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005292:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005296:	2b00      	cmp	r3, #0
10005298:	d003      	beq.n	100052a2 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
1000529a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000529e:	f000 be85 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100052a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052a6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100052aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100052ae:	f043 0320 	orr.w	r3, r3, #32
100052b2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100052b6:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
100052b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052bc:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
100052c0:	f023 0103 	bic.w	r1, r3, #3
100052c4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100052c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100052cc:	681b      	ldr	r3, [r3, #0]
100052ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
100052d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100052d6:	430b      	orrs	r3, r1
100052d8:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
100052dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100052e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100052e4:	681b      	ldr	r3, [r3, #0]
100052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
100052ea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
100052ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
100052f2:	2300      	movs	r3, #0
100052f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
100052f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
100052fc:	460b      	mov	r3, r1
100052fe:	4313      	orrs	r3, r2
10005300:	d05b      	beq.n	100053ba <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10005302:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005306:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000530a:	681b      	ldr	r3, [r3, #0]
1000530c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10005310:	2b01      	cmp	r3, #1
10005312:	d002      	beq.n	1000531a <HAL_RCCEx_PeriphCLKConfig+0x1082>
10005314:	2b02      	cmp	r3, #2
10005316:	d01f      	beq.n	10005358 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10005318:	e03d      	b.n	10005396 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000531a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000531e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005322:	681b      	ldr	r3, [r3, #0]
10005324:	3344      	adds	r3, #68	@ 0x44
10005326:	4618      	mov	r0, r3
10005328:	f7fe fcf4 	bl	10003d14 <RCCEx_PLL3_Config>
1000532c:	4603      	mov	r3, r0
1000532e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005332:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005336:	2b00      	cmp	r3, #0
10005338:	d003      	beq.n	10005342 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
1000533a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000533e:	f000 be35 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005342:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005346:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000534a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000534e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005352:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005356:	e01e      	b.n	10005396 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005358:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000535c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005360:	681b      	ldr	r3, [r3, #0]
10005362:	3380      	adds	r3, #128	@ 0x80
10005364:	4618      	mov	r0, r3
10005366:	f7fe fe3f 	bl	10003fe8 <RCCEx_PLL4_Config>
1000536a:	4603      	mov	r3, r0
1000536c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005370:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005374:	2b00      	cmp	r3, #0
10005376:	d003      	beq.n	10005380 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10005378:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000537c:	f000 be16 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005380:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005384:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005388:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000538c:	f043 0310 	orr.w	r3, r3, #16
10005390:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005394:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10005396:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000539a:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
1000539e:	f023 0103 	bic.w	r1, r3, #3
100053a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100053aa:	681b      	ldr	r3, [r3, #0]
100053ac:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
100053b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100053b4:	430b      	orrs	r3, r1
100053b6:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
100053ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100053c2:	681b      	ldr	r3, [r3, #0]
100053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
100053c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
100053cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
100053d0:	2300      	movs	r3, #0
100053d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
100053d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
100053da:	460b      	mov	r3, r1
100053dc:	4313      	orrs	r3, r2
100053de:	d05b      	beq.n	10005498 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
100053e0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100053e8:	681b      	ldr	r3, [r3, #0]
100053ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
100053ee:	2b01      	cmp	r3, #1
100053f0:	d002      	beq.n	100053f8 <HAL_RCCEx_PeriphCLKConfig+0x1160>
100053f2:	2b02      	cmp	r3, #2
100053f4:	d01f      	beq.n	10005436 <HAL_RCCEx_PeriphCLKConfig+0x119e>
100053f6:	e03d      	b.n	10005474 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100053f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100053fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005400:	681b      	ldr	r3, [r3, #0]
10005402:	3344      	adds	r3, #68	@ 0x44
10005404:	4618      	mov	r0, r3
10005406:	f7fe fc85 	bl	10003d14 <RCCEx_PLL3_Config>
1000540a:	4603      	mov	r3, r0
1000540c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005410:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005414:	2b00      	cmp	r3, #0
10005416:	d003      	beq.n	10005420 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10005418:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000541c:	f000 bdc6 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10005420:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005424:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005428:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000542c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005430:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005434:	e01e      	b.n	10005474 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005436:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000543a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000543e:	681b      	ldr	r3, [r3, #0]
10005440:	3380      	adds	r3, #128	@ 0x80
10005442:	4618      	mov	r0, r3
10005444:	f7fe fdd0 	bl	10003fe8 <RCCEx_PLL4_Config>
10005448:	4603      	mov	r3, r0
1000544a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000544e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005452:	2b00      	cmp	r3, #0
10005454:	d003      	beq.n	1000545e <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10005456:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000545a:	f000 bda7 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000545e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005462:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005466:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000546a:	f043 0310 	orr.w	r3, r3, #16
1000546e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005472:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10005474:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005478:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
1000547c:	f023 0103 	bic.w	r1, r3, #3
10005480:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005484:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005488:	681b      	ldr	r3, [r3, #0]
1000548a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
1000548e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005492:	430b      	orrs	r3, r1
10005494:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10005498:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000549c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100054a0:	681b      	ldr	r3, [r3, #0]
100054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
100054a6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
100054aa:	67bb      	str	r3, [r7, #120]	@ 0x78
100054ac:	2300      	movs	r3, #0
100054ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
100054b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
100054b4:	460b      	mov	r3, r1
100054b6:	4313      	orrs	r3, r2
100054b8:	d07e      	beq.n	100055b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
100054ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100054be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100054c2:	681b      	ldr	r3, [r3, #0]
100054c4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
100054c8:	2b03      	cmp	r3, #3
100054ca:	d044      	beq.n	10005556 <HAL_RCCEx_PeriphCLKConfig+0x12be>
100054cc:	2b03      	cmp	r3, #3
100054ce:	d861      	bhi.n	10005594 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
100054d0:	2b01      	cmp	r3, #1
100054d2:	d002      	beq.n	100054da <HAL_RCCEx_PeriphCLKConfig+0x1242>
100054d4:	2b02      	cmp	r3, #2
100054d6:	d01f      	beq.n	10005518 <HAL_RCCEx_PeriphCLKConfig+0x1280>
100054d8:	e05c      	b.n	10005594 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100054da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100054de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100054e2:	681b      	ldr	r3, [r3, #0]
100054e4:	3344      	adds	r3, #68	@ 0x44
100054e6:	4618      	mov	r0, r3
100054e8:	f7fe fc14 	bl	10003d14 <RCCEx_PLL3_Config>
100054ec:	4603      	mov	r3, r0
100054ee:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100054f2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100054f6:	2b00      	cmp	r3, #0
100054f8:	d003      	beq.n	10005502 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
100054fa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100054fe:	f000 bd55 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005502:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005506:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000550a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000550e:	f043 0320 	orr.w	r3, r3, #32
10005512:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005516:	e03d      	b.n	10005594 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005518:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000551c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005520:	681b      	ldr	r3, [r3, #0]
10005522:	3380      	adds	r3, #128	@ 0x80
10005524:	4618      	mov	r0, r3
10005526:	f7fe fd5f 	bl	10003fe8 <RCCEx_PLL4_Config>
1000552a:	4603      	mov	r3, r0
1000552c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005530:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005534:	2b00      	cmp	r3, #0
10005536:	d003      	beq.n	10005540 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10005538:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000553c:	f000 bd36 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005540:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005544:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005548:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000554c:	f043 0320 	orr.w	r3, r3, #32
10005550:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005554:	e01e      	b.n	10005594 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005556:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000555a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000555e:	681b      	ldr	r3, [r3, #0]
10005560:	3380      	adds	r3, #128	@ 0x80
10005562:	4618      	mov	r0, r3
10005564:	f7fe fd40 	bl	10003fe8 <RCCEx_PLL4_Config>
10005568:	4603      	mov	r3, r0
1000556a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000556e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005572:	2b00      	cmp	r3, #0
10005574:	d003      	beq.n	1000557e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10005576:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000557a:	f000 bd17 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000557e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005582:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005586:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000558a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000558e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005592:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10005594:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005598:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
1000559c:	f023 0103 	bic.w	r1, r3, #3
100055a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100055a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100055a8:	681b      	ldr	r3, [r3, #0]
100055aa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
100055ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100055b2:	430b      	orrs	r3, r1
100055b4:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
100055b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100055bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100055c0:	681b      	ldr	r3, [r3, #0]
100055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
100055c6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
100055ca:	673b      	str	r3, [r7, #112]	@ 0x70
100055cc:	2300      	movs	r3, #0
100055ce:	677b      	str	r3, [r7, #116]	@ 0x74
100055d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
100055d4:	460b      	mov	r3, r1
100055d6:	4313      	orrs	r3, r2
100055d8:	d05b      	beq.n	10005692 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
100055da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100055de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100055e2:	681b      	ldr	r3, [r3, #0]
100055e4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
100055e8:	2b00      	cmp	r3, #0
100055ea:	d002      	beq.n	100055f2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
100055ec:	2b01      	cmp	r3, #1
100055ee:	d01f      	beq.n	10005630 <HAL_RCCEx_PeriphCLKConfig+0x1398>
100055f0:	e03d      	b.n	1000566e <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100055f2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100055f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100055fa:	681b      	ldr	r3, [r3, #0]
100055fc:	3380      	adds	r3, #128	@ 0x80
100055fe:	4618      	mov	r0, r3
10005600:	f7fe fcf2 	bl	10003fe8 <RCCEx_PLL4_Config>
10005604:	4603      	mov	r3, r0
10005606:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000560a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000560e:	2b00      	cmp	r3, #0
10005610:	d003      	beq.n	1000561a <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10005612:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005616:	f000 bcc9 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000561a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000561e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005622:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005626:	f043 0310 	orr.w	r3, r3, #16
1000562a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000562e:	e01e      	b.n	1000566e <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005630:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005634:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005638:	681b      	ldr	r3, [r3, #0]
1000563a:	3344      	adds	r3, #68	@ 0x44
1000563c:	4618      	mov	r0, r3
1000563e:	f7fe fb69 	bl	10003d14 <RCCEx_PLL3_Config>
10005642:	4603      	mov	r3, r0
10005644:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005648:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000564c:	2b00      	cmp	r3, #0
1000564e:	d003      	beq.n	10005658 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10005650:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005654:	f000 bcaa 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005658:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000565c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005660:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005664:	f043 0320 	orr.w	r3, r3, #32
10005668:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000566c:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
1000566e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005672:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
10005676:	f023 0103 	bic.w	r1, r3, #3
1000567a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000567e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005682:	681b      	ldr	r3, [r3, #0]
10005684:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10005688:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000568c:	430b      	orrs	r3, r1
1000568e:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10005692:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005696:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000569a:	681b      	ldr	r3, [r3, #0]
1000569c:	e9d3 2300 	ldrd	r2, r3, [r3]
100056a0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
100056a4:	66bb      	str	r3, [r7, #104]	@ 0x68
100056a6:	2300      	movs	r3, #0
100056a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
100056aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
100056ae:	460b      	mov	r3, r1
100056b0:	4313      	orrs	r3, r2
100056b2:	d011      	beq.n	100056d8 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
100056b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100056b8:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
100056bc:	f023 0103 	bic.w	r1, r3, #3
100056c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100056c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100056c8:	681b      	ldr	r3, [r3, #0]
100056ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
100056ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100056d2:	430b      	orrs	r3, r1
100056d4:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
100056d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100056dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100056e0:	681b      	ldr	r3, [r3, #0]
100056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
100056e6:	f402 7300 	and.w	r3, r2, #512	@ 0x200
100056ea:	663b      	str	r3, [r7, #96]	@ 0x60
100056ec:	2300      	movs	r3, #0
100056ee:	667b      	str	r3, [r7, #100]	@ 0x64
100056f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
100056f4:	460b      	mov	r3, r1
100056f6:	4313      	orrs	r3, r2
100056f8:	d038      	beq.n	1000576c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
100056fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100056fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005702:	681b      	ldr	r3, [r3, #0]
10005704:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10005708:	2b01      	cmp	r3, #1
1000570a:	d11d      	bne.n	10005748 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000570c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005710:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005714:	681b      	ldr	r3, [r3, #0]
10005716:	3380      	adds	r3, #128	@ 0x80
10005718:	4618      	mov	r0, r3
1000571a:	f7fe fc65 	bl	10003fe8 <RCCEx_PLL4_Config>
1000571e:	4603      	mov	r3, r0
10005720:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10005724:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005728:	2b00      	cmp	r3, #0
1000572a:	d003      	beq.n	10005734 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
1000572c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005730:	f000 bc3c 	b.w	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005734:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005738:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000573c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005744:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10005748:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000574c:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10005750:	f023 0103 	bic.w	r1, r3, #3
10005754:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005758:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000575c:	681b      	ldr	r3, [r3, #0]
1000575e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10005762:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005766:	430b      	orrs	r3, r1
10005768:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
1000576c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005770:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005774:	681b      	ldr	r3, [r3, #0]
10005776:	e9d3 2300 	ldrd	r2, r3, [r3]
1000577a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
1000577e:	65bb      	str	r3, [r7, #88]	@ 0x58
10005780:	2300      	movs	r3, #0
10005782:	65fb      	str	r3, [r7, #92]	@ 0x5c
10005784:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
10005788:	460b      	mov	r3, r1
1000578a:	4313      	orrs	r3, r2
1000578c:	d037      	beq.n	100057fe <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
1000578e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005792:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005796:	681b      	ldr	r3, [r3, #0]
10005798:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
1000579c:	2b00      	cmp	r3, #0
1000579e:	d11c      	bne.n	100057da <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100057a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100057a8:	681b      	ldr	r3, [r3, #0]
100057aa:	3380      	adds	r3, #128	@ 0x80
100057ac:	4618      	mov	r0, r3
100057ae:	f7fe fc1b 	bl	10003fe8 <RCCEx_PLL4_Config>
100057b2:	4603      	mov	r3, r0
100057b4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100057b8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100057bc:	2b00      	cmp	r3, #0
100057be:	d002      	beq.n	100057c6 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
100057c0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100057c4:	e3f2      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100057c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100057ca:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100057ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100057d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100057d6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
100057da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100057de:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
100057e2:	f023 0110 	bic.w	r1, r3, #16
100057e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100057ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100057ee:	681b      	ldr	r3, [r3, #0]
100057f0:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
100057f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100057f8:	430b      	orrs	r3, r1
100057fa:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
100057fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005802:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005806:	681b      	ldr	r3, [r3, #0]
10005808:	e9d3 2300 	ldrd	r2, r3, [r3]
1000580c:	2100      	movs	r1, #0
1000580e:	6539      	str	r1, [r7, #80]	@ 0x50
10005810:	f003 0304 	and.w	r3, r3, #4
10005814:	657b      	str	r3, [r7, #84]	@ 0x54
10005816:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
1000581a:	460b      	mov	r3, r1
1000581c:	4313      	orrs	r3, r2
1000581e:	d037      	beq.n	10005890 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10005820:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005824:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005828:	681b      	ldr	r3, [r3, #0]
1000582a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
1000582e:	2b01      	cmp	r3, #1
10005830:	d11c      	bne.n	1000586c <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005832:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005836:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000583a:	681b      	ldr	r3, [r3, #0]
1000583c:	3380      	adds	r3, #128	@ 0x80
1000583e:	4618      	mov	r0, r3
10005840:	f7fe fbd2 	bl	10003fe8 <RCCEx_PLL4_Config>
10005844:	4603      	mov	r3, r0
10005846:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000584a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000584e:	2b00      	cmp	r3, #0
10005850:	d002      	beq.n	10005858 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
10005852:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005856:	e3a9      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005858:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000585c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005860:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005868:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
1000586c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005870:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10005874:	f023 0103 	bic.w	r1, r3, #3
10005878:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000587c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005880:	681b      	ldr	r3, [r3, #0]
10005882:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
10005886:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000588a:	430b      	orrs	r3, r1
1000588c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10005890:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005894:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005898:	681b      	ldr	r3, [r3, #0]
1000589a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000589e:	2100      	movs	r1, #0
100058a0:	64b9      	str	r1, [r7, #72]	@ 0x48
100058a2:	f003 0308 	and.w	r3, r3, #8
100058a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
100058a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
100058ac:	460b      	mov	r3, r1
100058ae:	4313      	orrs	r3, r2
100058b0:	d037      	beq.n	10005922 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
100058b2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100058b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100058ba:	681b      	ldr	r3, [r3, #0]
100058bc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
100058c0:	2b01      	cmp	r3, #1
100058c2:	d11c      	bne.n	100058fe <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100058c4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100058c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100058cc:	681b      	ldr	r3, [r3, #0]
100058ce:	3380      	adds	r3, #128	@ 0x80
100058d0:	4618      	mov	r0, r3
100058d2:	f7fe fb89 	bl	10003fe8 <RCCEx_PLL4_Config>
100058d6:	4603      	mov	r3, r0
100058d8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100058dc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100058e0:	2b00      	cmp	r3, #0
100058e2:	d002      	beq.n	100058ea <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
100058e4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100058e8:	e360      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100058ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100058ee:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100058f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100058f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100058fa:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
100058fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005902:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
10005906:	f023 0103 	bic.w	r1, r3, #3
1000590a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000590e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005912:	681b      	ldr	r3, [r3, #0]
10005914:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10005918:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000591c:	430b      	orrs	r3, r1
1000591e:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
10005922:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005926:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000592a:	681b      	ldr	r3, [r3, #0]
1000592c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005930:	2100      	movs	r1, #0
10005932:	6439      	str	r1, [r7, #64]	@ 0x40
10005934:	f003 0310 	and.w	r3, r3, #16
10005938:	647b      	str	r3, [r7, #68]	@ 0x44
1000593a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
1000593e:	460b      	mov	r3, r1
10005940:	4313      	orrs	r3, r2
10005942:	d011      	beq.n	10005968 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10005944:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005948:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
1000594c:	f023 0103 	bic.w	r1, r3, #3
10005950:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005954:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005958:	681b      	ldr	r3, [r3, #0]
1000595a:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
1000595e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005962:	430b      	orrs	r3, r1
10005964:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10005968:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000596c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005970:	681b      	ldr	r3, [r3, #0]
10005972:	e9d3 2300 	ldrd	r2, r3, [r3]
10005976:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
1000597a:	63bb      	str	r3, [r7, #56]	@ 0x38
1000597c:	2300      	movs	r3, #0
1000597e:	63fb      	str	r3, [r7, #60]	@ 0x3c
10005980:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
10005984:	460b      	mov	r3, r1
10005986:	4313      	orrs	r3, r2
10005988:	d037      	beq.n	100059fa <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
1000598a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000598e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005992:	681b      	ldr	r3, [r3, #0]
10005994:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
10005998:	2b01      	cmp	r3, #1
1000599a:	d11c      	bne.n	100059d6 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000599c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100059a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100059a4:	681b      	ldr	r3, [r3, #0]
100059a6:	3380      	adds	r3, #128	@ 0x80
100059a8:	4618      	mov	r0, r3
100059aa:	f7fe fb1d 	bl	10003fe8 <RCCEx_PLL4_Config>
100059ae:	4603      	mov	r3, r0
100059b0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100059b4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100059b8:	2b00      	cmp	r3, #0
100059ba:	d002      	beq.n	100059c2 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
100059bc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100059c0:	e2f4      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100059c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100059c6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100059ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100059ce:	f043 0310 	orr.w	r3, r3, #16
100059d2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
100059d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100059da:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
100059de:	f023 0101 	bic.w	r1, r3, #1
100059e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100059e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100059ea:	681b      	ldr	r3, [r3, #0]
100059ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
100059f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100059f4:	430b      	orrs	r3, r1
100059f6:	f8c2 3924 	str.w	r3, [r2, #2340]	@ 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
100059fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100059fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005a02:	681b      	ldr	r3, [r3, #0]
10005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
10005a08:	f002 0308 	and.w	r3, r2, #8
10005a0c:	633b      	str	r3, [r7, #48]	@ 0x30
10005a0e:	2300      	movs	r3, #0
10005a10:	637b      	str	r3, [r7, #52]	@ 0x34
10005a12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
10005a16:	460b      	mov	r3, r1
10005a18:	4313      	orrs	r3, r2
10005a1a:	d059      	beq.n	10005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10005a1c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005a20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005a24:	681b      	ldr	r3, [r3, #0]
10005a26:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10005a2a:	2b00      	cmp	r3, #0
10005a2c:	d002      	beq.n	10005a34 <HAL_RCCEx_PeriphCLKConfig+0x179c>
10005a2e:	2b02      	cmp	r3, #2
10005a30:	d01e      	beq.n	10005a70 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
10005a32:	e03b      	b.n	10005aac <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005a34:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005a38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005a3c:	681b      	ldr	r3, [r3, #0]
10005a3e:	3380      	adds	r3, #128	@ 0x80
10005a40:	4618      	mov	r0, r3
10005a42:	f7fe fad1 	bl	10003fe8 <RCCEx_PLL4_Config>
10005a46:	4603      	mov	r3, r0
10005a48:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005a4c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005a50:	2b00      	cmp	r3, #0
10005a52:	d002      	beq.n	10005a5a <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10005a54:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005a58:	e2a8      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005a5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005a5e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005a62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005a6a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
10005a6e:	e01d      	b.n	10005aac <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005a70:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005a74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005a78:	681b      	ldr	r3, [r3, #0]
10005a7a:	3344      	adds	r3, #68	@ 0x44
10005a7c:	4618      	mov	r0, r3
10005a7e:	f7fe f949 	bl	10003d14 <RCCEx_PLL3_Config>
10005a82:	4603      	mov	r3, r0
10005a84:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005a88:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005a8c:	2b00      	cmp	r3, #0
10005a8e:	d002      	beq.n	10005a96 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10005a90:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005a94:	e28a      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005a96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005a9a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005a9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005aa2:	f043 0320 	orr.w	r3, r3, #32
10005aa6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005aaa:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
10005aac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ab0:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
10005ab4:	f023 0103 	bic.w	r1, r3, #3
10005ab8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005abc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005ac0:	681b      	ldr	r3, [r3, #0]
10005ac2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10005ac6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005aca:	430b      	orrs	r3, r1
10005acc:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10005ad0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005ad4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005ad8:	681b      	ldr	r3, [r3, #0]
10005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
10005ade:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
10005ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
10005ae4:	2300      	movs	r3, #0
10005ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
10005ae8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
10005aec:	460b      	mov	r3, r1
10005aee:	4313      	orrs	r3, r2
10005af0:	d058      	beq.n	10005ba4 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10005af2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005af6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005afa:	681b      	ldr	r3, [r3, #0]
10005afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005b00:	2b01      	cmp	r3, #1
10005b02:	d01f      	beq.n	10005b44 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10005b04:	2b02      	cmp	r3, #2
10005b06:	d13b      	bne.n	10005b80 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005b08:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005b0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005b10:	681b      	ldr	r3, [r3, #0]
10005b12:	3344      	adds	r3, #68	@ 0x44
10005b14:	4618      	mov	r0, r3
10005b16:	f7fe f8fd 	bl	10003d14 <RCCEx_PLL3_Config>
10005b1a:	4603      	mov	r3, r0
10005b1c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005b20:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005b24:	2b00      	cmp	r3, #0
10005b26:	d002      	beq.n	10005b2e <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10005b28:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005b2c:	e23e      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005b2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b32:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005b36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005b3a:	f043 0320 	orr.w	r3, r3, #32
10005b3e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005b42:	e01d      	b.n	10005b80 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005b44:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005b48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005b4c:	681b      	ldr	r3, [r3, #0]
10005b4e:	3380      	adds	r3, #128	@ 0x80
10005b50:	4618      	mov	r0, r3
10005b52:	f7fe fa49 	bl	10003fe8 <RCCEx_PLL4_Config>
10005b56:	4603      	mov	r3, r0
10005b58:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005b5c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005b60:	2b00      	cmp	r3, #0
10005b62:	d002      	beq.n	10005b6a <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
10005b64:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005b68:	e220      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005b6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b6e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005b72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005b76:	f043 0310 	orr.w	r3, r3, #16
10005b7a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005b7e:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10005b80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b84:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
10005b88:	f023 0207 	bic.w	r2, r3, #7
10005b8c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005b90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005b94:	681b      	ldr	r3, [r3, #0]
10005b96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005b9a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005b9e:	4313      	orrs	r3, r2
10005ba0:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10005ba4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005ba8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005bac:	681b      	ldr	r3, [r3, #0]
10005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
10005bb2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
10005bb6:	623b      	str	r3, [r7, #32]
10005bb8:	2300      	movs	r3, #0
10005bba:	627b      	str	r3, [r7, #36]	@ 0x24
10005bbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10005bc0:	460b      	mov	r3, r1
10005bc2:	4313      	orrs	r3, r2
10005bc4:	d037      	beq.n	10005c36 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10005bc6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005bca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005bce:	681b      	ldr	r3, [r3, #0]
10005bd0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10005bd4:	2b01      	cmp	r3, #1
10005bd6:	d11c      	bne.n	10005c12 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005bd8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005bdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005be0:	681b      	ldr	r3, [r3, #0]
10005be2:	3380      	adds	r3, #128	@ 0x80
10005be4:	4618      	mov	r0, r3
10005be6:	f7fe f9ff 	bl	10003fe8 <RCCEx_PLL4_Config>
10005bea:	4603      	mov	r3, r0
10005bec:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10005bf0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005bf4:	2b00      	cmp	r3, #0
10005bf6:	d002      	beq.n	10005bfe <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10005bf8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005bfc:	e1d6      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005bfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005c02:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005c06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005c0a:	f043 0320 	orr.w	r3, r3, #32
10005c0e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10005c12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005c16:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
10005c1a:	f023 0207 	bic.w	r2, r3, #7
10005c1e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005c22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005c26:	681b      	ldr	r3, [r3, #0]
10005c28:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10005c2c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005c30:	4313      	orrs	r3, r2
10005c32:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10005c36:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005c3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005c3e:	681b      	ldr	r3, [r3, #0]
10005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
10005c44:	f002 0340 	and.w	r3, r2, #64	@ 0x40
10005c48:	61bb      	str	r3, [r7, #24]
10005c4a:	2300      	movs	r3, #0
10005c4c:	61fb      	str	r3, [r7, #28]
10005c4e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
10005c52:	460b      	mov	r3, r1
10005c54:	4313      	orrs	r3, r2
10005c56:	d058      	beq.n	10005d0a <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
10005c58:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005c5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005c60:	681b      	ldr	r3, [r3, #0]
10005c62:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10005c66:	2b01      	cmp	r3, #1
10005c68:	d01f      	beq.n	10005caa <HAL_RCCEx_PeriphCLKConfig+0x1a12>
10005c6a:	2b02      	cmp	r3, #2
10005c6c:	d13b      	bne.n	10005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005c6e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005c72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005c76:	681b      	ldr	r3, [r3, #0]
10005c78:	3344      	adds	r3, #68	@ 0x44
10005c7a:	4618      	mov	r0, r3
10005c7c:	f7fe f84a 	bl	10003d14 <RCCEx_PLL3_Config>
10005c80:	4603      	mov	r3, r0
10005c82:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005c86:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005c8a:	2b00      	cmp	r3, #0
10005c8c:	d002      	beq.n	10005c94 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
10005c8e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005c92:	e18b      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005c94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005c98:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005c9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005ca0:	f043 0320 	orr.w	r3, r3, #32
10005ca4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10005ca8:	e01d      	b.n	10005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005caa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005cae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005cb2:	681b      	ldr	r3, [r3, #0]
10005cb4:	3380      	adds	r3, #128	@ 0x80
10005cb6:	4618      	mov	r0, r3
10005cb8:	f7fe f996 	bl	10003fe8 <RCCEx_PLL4_Config>
10005cbc:	4603      	mov	r3, r0
10005cbe:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10005cc2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005cc6:	2b00      	cmp	r3, #0
10005cc8:	d002      	beq.n	10005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
10005cca:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005cce:	e16d      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005cd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005cd4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005cd8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005cdc:	f043 0310 	orr.w	r3, r3, #16
10005ce0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10005ce4:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10005ce6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005cea:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
10005cee:	f023 0207 	bic.w	r2, r3, #7
10005cf2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005cf6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005cfa:	681b      	ldr	r3, [r3, #0]
10005cfc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10005d00:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005d04:	4313      	orrs	r3, r2
10005d06:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10005d0a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005d0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005d12:	681b      	ldr	r3, [r3, #0]
10005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
10005d18:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
10005d1c:	613b      	str	r3, [r7, #16]
10005d1e:	2300      	movs	r3, #0
10005d20:	617b      	str	r3, [r7, #20]
10005d22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10005d26:	460b      	mov	r3, r1
10005d28:	4313      	orrs	r3, r2
10005d2a:	f000 80c6 	beq.w	10005eba <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10005d2e:	4ba2      	ldr	r3, [pc, #648]	@ (10005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10005d30:	681b      	ldr	r3, [r3, #0]
10005d32:	4aa1      	ldr	r2, [pc, #644]	@ (10005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10005d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10005d38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10005d3a:	f7fb ff65 	bl	10001c08 <HAL_GetTick>
10005d3e:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10005d42:	e00a      	b.n	10005d5a <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10005d44:	f7fb ff60 	bl	10001c08 <HAL_GetTick>
10005d48:	4602      	mov	r2, r0
10005d4a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10005d4e:	1ad3      	subs	r3, r2, r3
10005d50:	2b64      	cmp	r3, #100	@ 0x64
10005d52:	d902      	bls.n	10005d5a <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
10005d54:	2303      	movs	r3, #3
10005d56:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10005d5a:	4b97      	ldr	r3, [pc, #604]	@ (10005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10005d5c:	681b      	ldr	r3, [r3, #0]
10005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10005d62:	2b00      	cmp	r3, #0
10005d64:	d0ee      	beq.n	10005d44 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
10005d66:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005d6a:	2b00      	cmp	r3, #0
10005d6c:	f040 80a2 	bne.w	10005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10005d70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d74:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
10005d78:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005d7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005d80:	681b      	ldr	r3, [r3, #0]
10005d82:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
10005d86:	4053      	eors	r3, r2
10005d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10005d8c:	2b00      	cmp	r3, #0
10005d8e:	f000 8086 	beq.w	10005e9e <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10005d92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005d9a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
10005d9e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
10005da2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005daa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005dae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10005db2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
10005db6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005dba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005dbe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005dc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10005dc6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10005dca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005dce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005dd2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
10005dd6:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10005dda:	f003 0330 	and.w	r3, r3, #48	@ 0x30
10005dde:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005de2:	4313      	orrs	r3, r2
10005de4:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10005de8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005dec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005df0:	2204      	movs	r2, #4
10005df2:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10005df4:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10005df8:	f003 020b 	and.w	r2, r3, #11
10005dfc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005e00:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005e04:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10005e06:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005e0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005e0e:	2200      	movs	r2, #0
10005e10:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10005e12:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005e16:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005e1a:	2200      	movs	r2, #0
10005e1c:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
10005e1e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005e22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005e26:	2200      	movs	r2, #0
10005e28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10005e2c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005e30:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10005e34:	2200      	movs	r2, #0
10005e36:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
10005e3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
10005e3e:	4618      	mov	r0, r3
10005e40:	f7fc fc0e 	bl	10002660 <HAL_RCC_OscConfig>
10005e44:	4603      	mov	r3, r0
10005e46:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        if (ret != HAL_OK)
10005e4a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005e4e:	2b00      	cmp	r3, #0
10005e50:	d002      	beq.n	10005e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
10005e52:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005e56:	e0a9      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10005e58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005e60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
10005e64:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005e68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005e6c:	681b      	ldr	r3, [r3, #0]
10005e6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
10005e72:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005e76:	4313      	orrs	r3, r2
10005e78:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10005e7c:	4b4f      	ldr	r3, [pc, #316]	@ (10005fbc <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
10005e7e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
10005e82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e86:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
10005e8a:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
10005e8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
10005e92:	400b      	ands	r3, r1
10005e94:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005e98:	4313      	orrs	r3, r2
10005e9a:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
10005e9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10005ea6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
10005eae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10005eb2:	e002      	b.n	10005eba <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10005eb4:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10005eb8:	e078      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
10005eba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005ebe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005ec2:	681b      	ldr	r3, [r3, #0]
10005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
10005ec8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
10005ecc:	60bb      	str	r3, [r7, #8]
10005ece:	2300      	movs	r3, #0
10005ed0:	60fb      	str	r3, [r7, #12]
10005ed2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10005ed6:	460b      	mov	r3, r1
10005ed8:	4313      	orrs	r3, r2
10005eda:	d02a      	beq.n	10005f32 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10005edc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ee0:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10005ee4:	f023 0201 	bic.w	r2, r3, #1
10005ee8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005eec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005ef0:	681b      	ldr	r3, [r3, #0]
10005ef2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
10005ef6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005efa:	4313      	orrs	r3, r2
10005efc:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005f00:	f7fb fe82 	bl	10001c08 <HAL_GetTick>
10005f04:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10005f08:	e00a      	b.n	10005f20 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005f0a:	f7fb fe7d 	bl	10001c08 <HAL_GetTick>
10005f0e:	4602      	mov	r2, r0
10005f10:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10005f14:	1ad3      	subs	r3, r2, r3
10005f16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10005f1a:	d901      	bls.n	10005f20 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10005f1c:	2303      	movs	r3, #3
10005f1e:	e045      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10005f20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005f24:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10005f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005f30:	d1eb      	bne.n	10005f0a <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10005f32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005f36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005f3a:	681b      	ldr	r3, [r3, #0]
10005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
10005f40:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
10005f44:	603b      	str	r3, [r7, #0]
10005f46:	2300      	movs	r3, #0
10005f48:	607b      	str	r3, [r7, #4]
10005f4a:	e9d7 1200 	ldrd	r1, r2, [r7]
10005f4e:	460b      	mov	r3, r1
10005f50:	4313      	orrs	r3, r2
10005f52:	d02a      	beq.n	10005faa <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10005f54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005f58:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10005f5c:	f023 0201 	bic.w	r2, r3, #1
10005f60:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005f64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005f68:	681b      	ldr	r3, [r3, #0]
10005f6a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
10005f6e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005f72:	4313      	orrs	r3, r2
10005f74:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005f78:	f7fb fe46 	bl	10001c08 <HAL_GetTick>
10005f7c:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10005f80:	e00a      	b.n	10005f98 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005f82:	f7fb fe41 	bl	10001c08 <HAL_GetTick>
10005f86:	4602      	mov	r2, r0
10005f88:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10005f8c:	1ad3      	subs	r3, r2, r3
10005f8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10005f92:	d901      	bls.n	10005f98 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10005f94:	2303      	movs	r3, #3
10005f96:	e009      	b.n	10005fac <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10005f98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005f9c:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10005fa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005fa8:	d1eb      	bne.n	10005f82 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
10005faa:	2300      	movs	r3, #0
}
10005fac:	4618      	mov	r0, r3
10005fae:	f507 7712 	add.w	r7, r7, #584	@ 0x248
10005fb2:	46bd      	mov	sp, r7
10005fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10005fb8:	50001000 	.word	0x50001000
10005fbc:	7fecfdc0 	.word	0x7fecfdc0

10005fc0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
10005fc0:	b580      	push	{r7, lr}
10005fc2:	b084      	sub	sp, #16
10005fc4:	af00      	add	r7, sp, #0
10005fc6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
10005fc8:	687b      	ldr	r3, [r7, #4]
10005fca:	2b00      	cmp	r3, #0
10005fcc:	d101      	bne.n	10005fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
10005fce:	2301      	movs	r3, #1
10005fd0:	e10f      	b.n	100061f2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10005fd2:	687b      	ldr	r3, [r7, #4]
10005fd4:	2200      	movs	r2, #0
10005fd6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
10005fd8:	687b      	ldr	r3, [r7, #4]
10005fda:	681b      	ldr	r3, [r3, #0]
10005fdc:	4a87      	ldr	r2, [pc, #540]	@ (100061fc <HAL_SPI_Init+0x23c>)
10005fde:	4293      	cmp	r3, r2
10005fe0:	d00f      	beq.n	10006002 <HAL_SPI_Init+0x42>
10005fe2:	687b      	ldr	r3, [r7, #4]
10005fe4:	681b      	ldr	r3, [r3, #0]
10005fe6:	4a86      	ldr	r2, [pc, #536]	@ (10006200 <HAL_SPI_Init+0x240>)
10005fe8:	4293      	cmp	r3, r2
10005fea:	d00a      	beq.n	10006002 <HAL_SPI_Init+0x42>
10005fec:	687b      	ldr	r3, [r7, #4]
10005fee:	681b      	ldr	r3, [r3, #0]
10005ff0:	4a84      	ldr	r2, [pc, #528]	@ (10006204 <HAL_SPI_Init+0x244>)
10005ff2:	4293      	cmp	r3, r2
10005ff4:	d005      	beq.n	10006002 <HAL_SPI_Init+0x42>
10005ff6:	687b      	ldr	r3, [r7, #4]
10005ff8:	68db      	ldr	r3, [r3, #12]
10005ffa:	2b0f      	cmp	r3, #15
10005ffc:	d901      	bls.n	10006002 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
10005ffe:	2301      	movs	r3, #1
10006000:	e0f7      	b.n	100061f2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
10006002:	6878      	ldr	r0, [r7, #4]
10006004:	f000 fd54 	bl	10006ab0 <SPI_GetPacketSize>
10006008:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
1000600a:	687b      	ldr	r3, [r7, #4]
1000600c:	681b      	ldr	r3, [r3, #0]
1000600e:	4a7b      	ldr	r2, [pc, #492]	@ (100061fc <HAL_SPI_Init+0x23c>)
10006010:	4293      	cmp	r3, r2
10006012:	d00c      	beq.n	1000602e <HAL_SPI_Init+0x6e>
10006014:	687b      	ldr	r3, [r7, #4]
10006016:	681b      	ldr	r3, [r3, #0]
10006018:	4a79      	ldr	r2, [pc, #484]	@ (10006200 <HAL_SPI_Init+0x240>)
1000601a:	4293      	cmp	r3, r2
1000601c:	d007      	beq.n	1000602e <HAL_SPI_Init+0x6e>
1000601e:	687b      	ldr	r3, [r7, #4]
10006020:	681b      	ldr	r3, [r3, #0]
10006022:	4a78      	ldr	r2, [pc, #480]	@ (10006204 <HAL_SPI_Init+0x244>)
10006024:	4293      	cmp	r3, r2
10006026:	d002      	beq.n	1000602e <HAL_SPI_Init+0x6e>
10006028:	68fb      	ldr	r3, [r7, #12]
1000602a:	2b08      	cmp	r3, #8
1000602c:	d811      	bhi.n	10006052 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
1000602e:	687b      	ldr	r3, [r7, #4]
10006030:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
10006032:	4a72      	ldr	r2, [pc, #456]	@ (100061fc <HAL_SPI_Init+0x23c>)
10006034:	4293      	cmp	r3, r2
10006036:	d009      	beq.n	1000604c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
10006038:	687b      	ldr	r3, [r7, #4]
1000603a:	681b      	ldr	r3, [r3, #0]
1000603c:	4a70      	ldr	r2, [pc, #448]	@ (10006200 <HAL_SPI_Init+0x240>)
1000603e:	4293      	cmp	r3, r2
10006040:	d004      	beq.n	1000604c <HAL_SPI_Init+0x8c>
10006042:	687b      	ldr	r3, [r7, #4]
10006044:	681b      	ldr	r3, [r3, #0]
10006046:	4a6f      	ldr	r2, [pc, #444]	@ (10006204 <HAL_SPI_Init+0x244>)
10006048:	4293      	cmp	r3, r2
1000604a:	d104      	bne.n	10006056 <HAL_SPI_Init+0x96>
1000604c:	68fb      	ldr	r3, [r7, #12]
1000604e:	2b10      	cmp	r3, #16
10006050:	d901      	bls.n	10006056 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
10006052:	2301      	movs	r3, #1
10006054:	e0cd      	b.n	100061f2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
10006056:	687b      	ldr	r3, [r7, #4]
10006058:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
1000605c:	b2db      	uxtb	r3, r3
1000605e:	2b00      	cmp	r3, #0
10006060:	d106      	bne.n	10006070 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
10006062:	687b      	ldr	r3, [r7, #4]
10006064:	2200      	movs	r2, #0
10006066:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
1000606a:	6878      	ldr	r0, [r7, #4]
1000606c:	f7fb fbc8 	bl	10001800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
10006070:	687b      	ldr	r3, [r7, #4]
10006072:	2202      	movs	r2, #2
10006074:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
10006078:	687b      	ldr	r3, [r7, #4]
1000607a:	681b      	ldr	r3, [r3, #0]
1000607c:	681a      	ldr	r2, [r3, #0]
1000607e:	687b      	ldr	r3, [r7, #4]
10006080:	681b      	ldr	r3, [r3, #0]
10006082:	f022 0201 	bic.w	r2, r2, #1
10006086:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
10006088:	687b      	ldr	r3, [r7, #4]
1000608a:	681b      	ldr	r3, [r3, #0]
1000608c:	689b      	ldr	r3, [r3, #8]
1000608e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
10006092:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
10006094:	687b      	ldr	r3, [r7, #4]
10006096:	699b      	ldr	r3, [r3, #24]
10006098:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
1000609c:	d119      	bne.n	100060d2 <HAL_SPI_Init+0x112>
1000609e:	687b      	ldr	r3, [r7, #4]
100060a0:	685b      	ldr	r3, [r3, #4]
100060a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
100060a6:	d103      	bne.n	100060b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
100060a8:	687b      	ldr	r3, [r7, #4]
100060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
100060ac:	2b00      	cmp	r3, #0
100060ae:	d008      	beq.n	100060c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
100060b0:	687b      	ldr	r3, [r7, #4]
100060b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
100060b4:	2b00      	cmp	r3, #0
100060b6:	d10c      	bne.n	100060d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
100060b8:	687b      	ldr	r3, [r7, #4]
100060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
100060bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
100060c0:	d107      	bne.n	100060d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
100060c2:	687b      	ldr	r3, [r7, #4]
100060c4:	681b      	ldr	r3, [r3, #0]
100060c6:	681a      	ldr	r2, [r3, #0]
100060c8:	687b      	ldr	r3, [r7, #4]
100060ca:	681b      	ldr	r3, [r3, #0]
100060cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
100060d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
100060d2:	687b      	ldr	r3, [r7, #4]
100060d4:	685b      	ldr	r3, [r3, #4]
100060d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
100060da:	2b00      	cmp	r3, #0
100060dc:	d00f      	beq.n	100060fe <HAL_SPI_Init+0x13e>
100060de:	687b      	ldr	r3, [r7, #4]
100060e0:	68db      	ldr	r3, [r3, #12]
100060e2:	2b06      	cmp	r3, #6
100060e4:	d90b      	bls.n	100060fe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
100060e6:	687b      	ldr	r3, [r7, #4]
100060e8:	681b      	ldr	r3, [r3, #0]
100060ea:	681b      	ldr	r3, [r3, #0]
100060ec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
100060f0:	687b      	ldr	r3, [r7, #4]
100060f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
100060f4:	687b      	ldr	r3, [r7, #4]
100060f6:	681b      	ldr	r3, [r3, #0]
100060f8:	430a      	orrs	r2, r1
100060fa:	601a      	str	r2, [r3, #0]
100060fc:	e007      	b.n	1000610e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
100060fe:	687b      	ldr	r3, [r7, #4]
10006100:	681b      	ldr	r3, [r3, #0]
10006102:	681a      	ldr	r2, [r3, #0]
10006104:	687b      	ldr	r3, [r7, #4]
10006106:	681b      	ldr	r3, [r3, #0]
10006108:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
1000610c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
1000610e:	687b      	ldr	r3, [r7, #4]
10006110:	69da      	ldr	r2, [r3, #28]
10006112:	687b      	ldr	r3, [r7, #4]
10006114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006116:	431a      	orrs	r2, r3
10006118:	68bb      	ldr	r3, [r7, #8]
1000611a:	431a      	orrs	r2, r3
1000611c:	687b      	ldr	r3, [r7, #4]
1000611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10006120:	ea42 0103 	orr.w	r1, r2, r3
10006124:	687b      	ldr	r3, [r7, #4]
10006126:	68da      	ldr	r2, [r3, #12]
10006128:	687b      	ldr	r3, [r7, #4]
1000612a:	681b      	ldr	r3, [r3, #0]
1000612c:	430a      	orrs	r2, r1
1000612e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
10006130:	687b      	ldr	r3, [r7, #4]
10006132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10006134:	687b      	ldr	r3, [r7, #4]
10006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006138:	431a      	orrs	r2, r3
1000613a:	687b      	ldr	r3, [r7, #4]
1000613c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000613e:	431a      	orrs	r2, r3
10006140:	687b      	ldr	r3, [r7, #4]
10006142:	699b      	ldr	r3, [r3, #24]
10006144:	431a      	orrs	r2, r3
10006146:	687b      	ldr	r3, [r7, #4]
10006148:	691b      	ldr	r3, [r3, #16]
1000614a:	431a      	orrs	r2, r3
1000614c:	687b      	ldr	r3, [r7, #4]
1000614e:	695b      	ldr	r3, [r3, #20]
10006150:	431a      	orrs	r2, r3
10006152:	687b      	ldr	r3, [r7, #4]
10006154:	6a1b      	ldr	r3, [r3, #32]
10006156:	431a      	orrs	r2, r3
10006158:	687b      	ldr	r3, [r7, #4]
1000615a:	685b      	ldr	r3, [r3, #4]
1000615c:	431a      	orrs	r2, r3
1000615e:	687b      	ldr	r3, [r7, #4]
10006160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10006162:	431a      	orrs	r2, r3
10006164:	687b      	ldr	r3, [r7, #4]
10006166:	689b      	ldr	r3, [r3, #8]
10006168:	431a      	orrs	r2, r3
1000616a:	687b      	ldr	r3, [r7, #4]
1000616c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000616e:	ea42 0103 	orr.w	r1, r2, r3
10006172:	687b      	ldr	r3, [r7, #4]
10006174:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10006176:	687b      	ldr	r3, [r7, #4]
10006178:	681b      	ldr	r3, [r3, #0]
1000617a:	430a      	orrs	r2, r1
1000617c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
1000617e:	687b      	ldr	r3, [r7, #4]
10006180:	685b      	ldr	r3, [r3, #4]
10006182:	2b00      	cmp	r3, #0
10006184:	d113      	bne.n	100061ae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
10006186:	687b      	ldr	r3, [r7, #4]
10006188:	681b      	ldr	r3, [r3, #0]
1000618a:	689b      	ldr	r3, [r3, #8]
1000618c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
10006190:	687b      	ldr	r3, [r7, #4]
10006192:	681b      	ldr	r3, [r3, #0]
10006194:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
10006198:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
1000619a:	687b      	ldr	r3, [r7, #4]
1000619c:	681b      	ldr	r3, [r3, #0]
1000619e:	689b      	ldr	r3, [r3, #8]
100061a0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
100061a4:	687b      	ldr	r3, [r7, #4]
100061a6:	681b      	ldr	r3, [r3, #0]
100061a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
100061ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
100061ae:	687b      	ldr	r3, [r7, #4]
100061b0:	681b      	ldr	r3, [r3, #0]
100061b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
100061b4:	687b      	ldr	r3, [r7, #4]
100061b6:	681b      	ldr	r3, [r3, #0]
100061b8:	f022 0201 	bic.w	r2, r2, #1
100061bc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
100061be:	687b      	ldr	r3, [r7, #4]
100061c0:	685b      	ldr	r3, [r3, #4]
100061c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
100061c6:	2b00      	cmp	r3, #0
100061c8:	d00a      	beq.n	100061e0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
100061ca:	687b      	ldr	r3, [r7, #4]
100061cc:	681b      	ldr	r3, [r3, #0]
100061ce:	68db      	ldr	r3, [r3, #12]
100061d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
100061d4:	687b      	ldr	r3, [r7, #4]
100061d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
100061d8:	687b      	ldr	r3, [r7, #4]
100061da:	681b      	ldr	r3, [r3, #0]
100061dc:	430a      	orrs	r2, r1
100061de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
100061e0:	687b      	ldr	r3, [r7, #4]
100061e2:	2200      	movs	r2, #0
100061e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
100061e8:	687b      	ldr	r3, [r7, #4]
100061ea:	2201      	movs	r2, #1
100061ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
100061f0:	2300      	movs	r3, #0
}
100061f2:	4618      	mov	r0, r3
100061f4:	3710      	adds	r7, #16
100061f6:	46bd      	mov	sp, r7
100061f8:	bd80      	pop	{r7, pc}
100061fa:	bf00      	nop
100061fc:	44004000 	.word	0x44004000
10006200:	4000b000 	.word	0x4000b000
10006204:	4000c000 	.word	0x4000c000

10006208 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10006208:	b580      	push	{r7, lr}
1000620a:	b08a      	sub	sp, #40	@ 0x28
1000620c:	af02      	add	r7, sp, #8
1000620e:	60f8      	str	r0, [r7, #12]
10006210:	60b9      	str	r1, [r7, #8]
10006212:	603b      	str	r3, [r7, #0]
10006214:	4613      	mov	r3, r2
10006216:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
10006218:	68fb      	ldr	r3, [r7, #12]
1000621a:	681b      	ldr	r3, [r3, #0]
1000621c:	3320      	adds	r3, #32
1000621e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
10006220:	2300      	movs	r3, #0
10006222:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
10006224:	68fb      	ldr	r3, [r7, #12]
10006226:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
1000622a:	2b01      	cmp	r3, #1
1000622c:	d101      	bne.n	10006232 <HAL_SPI_Transmit+0x2a>
1000622e:	2302      	movs	r3, #2
10006230:	e1df      	b.n	100065f2 <HAL_SPI_Transmit+0x3ea>
10006232:	68fb      	ldr	r3, [r7, #12]
10006234:	2201      	movs	r2, #1
10006236:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
1000623a:	f7fb fce5 	bl	10001c08 <HAL_GetTick>
1000623e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
10006240:	68fb      	ldr	r3, [r7, #12]
10006242:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10006246:	b2db      	uxtb	r3, r3
10006248:	2b01      	cmp	r3, #1
1000624a:	d007      	beq.n	1000625c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
1000624c:	2302      	movs	r3, #2
1000624e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
10006250:	68fb      	ldr	r3, [r7, #12]
10006252:	2200      	movs	r2, #0
10006254:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
10006258:	7efb      	ldrb	r3, [r7, #27]
1000625a:	e1ca      	b.n	100065f2 <HAL_SPI_Transmit+0x3ea>
  }

  if ((pData == NULL) || (Size == 0UL))
1000625c:	68bb      	ldr	r3, [r7, #8]
1000625e:	2b00      	cmp	r3, #0
10006260:	d002      	beq.n	10006268 <HAL_SPI_Transmit+0x60>
10006262:	88fb      	ldrh	r3, [r7, #6]
10006264:	2b00      	cmp	r3, #0
10006266:	d107      	bne.n	10006278 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
10006268:	2301      	movs	r3, #1
1000626a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
1000626c:	68fb      	ldr	r3, [r7, #12]
1000626e:	2200      	movs	r2, #0
10006270:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
10006274:	7efb      	ldrb	r3, [r7, #27]
10006276:	e1bc      	b.n	100065f2 <HAL_SPI_Transmit+0x3ea>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
10006278:	68fb      	ldr	r3, [r7, #12]
1000627a:	2203      	movs	r2, #3
1000627c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
10006280:	68fb      	ldr	r3, [r7, #12]
10006282:	2200      	movs	r2, #0
10006284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
10006288:	68fb      	ldr	r3, [r7, #12]
1000628a:	68ba      	ldr	r2, [r7, #8]
1000628c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
1000628e:	68fb      	ldr	r3, [r7, #12]
10006290:	88fa      	ldrh	r2, [r7, #6]
10006292:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
10006296:	68fb      	ldr	r3, [r7, #12]
10006298:	88fa      	ldrh	r2, [r7, #6]
1000629a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
1000629e:	68fb      	ldr	r3, [r7, #12]
100062a0:	2200      	movs	r2, #0
100062a2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
100062a4:	68fb      	ldr	r3, [r7, #12]
100062a6:	2200      	movs	r2, #0
100062a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
100062ac:	68fb      	ldr	r3, [r7, #12]
100062ae:	2200      	movs	r2, #0
100062b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
100062b4:	68fb      	ldr	r3, [r7, #12]
100062b6:	2200      	movs	r2, #0
100062b8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
100062ba:	68fb      	ldr	r3, [r7, #12]
100062bc:	2200      	movs	r2, #0
100062be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
100062c0:	68fb      	ldr	r3, [r7, #12]
100062c2:	689b      	ldr	r3, [r3, #8]
100062c4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
100062c8:	d108      	bne.n	100062dc <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
100062ca:	68fb      	ldr	r3, [r7, #12]
100062cc:	681b      	ldr	r3, [r3, #0]
100062ce:	681a      	ldr	r2, [r3, #0]
100062d0:	68fb      	ldr	r3, [r7, #12]
100062d2:	681b      	ldr	r3, [r3, #0]
100062d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
100062d8:	601a      	str	r2, [r3, #0]
100062da:	e009      	b.n	100062f0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
100062dc:	68fb      	ldr	r3, [r7, #12]
100062de:	681b      	ldr	r3, [r3, #0]
100062e0:	68db      	ldr	r3, [r3, #12]
100062e2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
100062e6:	68fb      	ldr	r3, [r7, #12]
100062e8:	681b      	ldr	r3, [r3, #0]
100062ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
100062ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
100062f0:	68fb      	ldr	r3, [r7, #12]
100062f2:	681b      	ldr	r3, [r3, #0]
100062f4:	685b      	ldr	r3, [r3, #4]
100062f6:	0c1b      	lsrs	r3, r3, #16
100062f8:	041b      	lsls	r3, r3, #16
100062fa:	88f9      	ldrh	r1, [r7, #6]
100062fc:	68fa      	ldr	r2, [r7, #12]
100062fe:	6812      	ldr	r2, [r2, #0]
10006300:	430b      	orrs	r3, r1
10006302:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
10006304:	68fb      	ldr	r3, [r7, #12]
10006306:	681b      	ldr	r3, [r3, #0]
10006308:	681a      	ldr	r2, [r3, #0]
1000630a:	68fb      	ldr	r3, [r7, #12]
1000630c:	681b      	ldr	r3, [r3, #0]
1000630e:	f042 0201 	orr.w	r2, r2, #1
10006312:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
10006314:	68fb      	ldr	r3, [r7, #12]
10006316:	685b      	ldr	r3, [r3, #4]
10006318:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
1000631c:	d107      	bne.n	1000632e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
1000631e:	68fb      	ldr	r3, [r7, #12]
10006320:	681b      	ldr	r3, [r3, #0]
10006322:	681a      	ldr	r2, [r3, #0]
10006324:	68fb      	ldr	r3, [r7, #12]
10006326:	681b      	ldr	r3, [r3, #0]
10006328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
1000632c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
1000632e:	68fb      	ldr	r3, [r7, #12]
10006330:	68db      	ldr	r3, [r3, #12]
10006332:	2b0f      	cmp	r3, #15
10006334:	d947      	bls.n	100063c6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
10006336:	e03f      	b.n	100063b8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
10006338:	68fb      	ldr	r3, [r7, #12]
1000633a:	681b      	ldr	r3, [r3, #0]
1000633c:	695b      	ldr	r3, [r3, #20]
1000633e:	f003 0302 	and.w	r3, r3, #2
10006342:	2b02      	cmp	r3, #2
10006344:	d114      	bne.n	10006370 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
10006346:	68fb      	ldr	r3, [r7, #12]
10006348:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
1000634a:	68fb      	ldr	r3, [r7, #12]
1000634c:	681b      	ldr	r3, [r3, #0]
1000634e:	6812      	ldr	r2, [r2, #0]
10006350:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
10006352:	68fb      	ldr	r3, [r7, #12]
10006354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10006356:	1d1a      	adds	r2, r3, #4
10006358:	68fb      	ldr	r3, [r7, #12]
1000635a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
1000635c:	68fb      	ldr	r3, [r7, #12]
1000635e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006362:	b29b      	uxth	r3, r3
10006364:	3b01      	subs	r3, #1
10006366:	b29a      	uxth	r2, r3
10006368:	68fb      	ldr	r3, [r7, #12]
1000636a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
1000636e:	e023      	b.n	100063b8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006370:	f7fb fc4a 	bl	10001c08 <HAL_GetTick>
10006374:	4602      	mov	r2, r0
10006376:	697b      	ldr	r3, [r7, #20]
10006378:	1ad3      	subs	r3, r2, r3
1000637a:	683a      	ldr	r2, [r7, #0]
1000637c:	429a      	cmp	r2, r3
1000637e:	d803      	bhi.n	10006388 <HAL_SPI_Transmit+0x180>
10006380:	683b      	ldr	r3, [r7, #0]
10006382:	f1b3 3fff 	cmp.w	r3, #4294967295
10006386:	d102      	bne.n	1000638e <HAL_SPI_Transmit+0x186>
10006388:	683b      	ldr	r3, [r7, #0]
1000638a:	2b00      	cmp	r3, #0
1000638c:	d114      	bne.n	100063b8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
1000638e:	68f8      	ldr	r0, [r7, #12]
10006390:	f000 fac0 	bl	10006914 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
10006394:	68fb      	ldr	r3, [r7, #12]
10006396:	2200      	movs	r2, #0
10006398:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
1000639c:	68fb      	ldr	r3, [r7, #12]
1000639e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100063a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
100063a6:	68fb      	ldr	r3, [r7, #12]
100063a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
100063ac:	68fb      	ldr	r3, [r7, #12]
100063ae:	2201      	movs	r2, #1
100063b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
100063b4:	2303      	movs	r3, #3
100063b6:	e11c      	b.n	100065f2 <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
100063b8:	68fb      	ldr	r3, [r7, #12]
100063ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100063be:	b29b      	uxth	r3, r3
100063c0:	2b00      	cmp	r3, #0
100063c2:	d1b9      	bne.n	10006338 <HAL_SPI_Transmit+0x130>
100063c4:	e0ef      	b.n	100065a6 <HAL_SPI_Transmit+0x39e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
100063c6:	68fb      	ldr	r3, [r7, #12]
100063c8:	68db      	ldr	r3, [r3, #12]
100063ca:	2b07      	cmp	r3, #7
100063cc:	f240 80e4 	bls.w	10006598 <HAL_SPI_Transmit+0x390>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
100063d0:	e05d      	b.n	1000648e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
100063d2:	68fb      	ldr	r3, [r7, #12]
100063d4:	681b      	ldr	r3, [r3, #0]
100063d6:	695b      	ldr	r3, [r3, #20]
100063d8:	f003 0302 	and.w	r3, r3, #2
100063dc:	2b02      	cmp	r3, #2
100063de:	d132      	bne.n	10006446 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
100063e0:	68fb      	ldr	r3, [r7, #12]
100063e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100063e6:	b29b      	uxth	r3, r3
100063e8:	2b01      	cmp	r3, #1
100063ea:	d918      	bls.n	1000641e <HAL_SPI_Transmit+0x216>
100063ec:	68fb      	ldr	r3, [r7, #12]
100063ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100063f0:	2b00      	cmp	r3, #0
100063f2:	d014      	beq.n	1000641e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
100063f4:	68fb      	ldr	r3, [r7, #12]
100063f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
100063f8:	68fb      	ldr	r3, [r7, #12]
100063fa:	681b      	ldr	r3, [r3, #0]
100063fc:	6812      	ldr	r2, [r2, #0]
100063fe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
10006400:	68fb      	ldr	r3, [r7, #12]
10006402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10006404:	1d1a      	adds	r2, r3, #4
10006406:	68fb      	ldr	r3, [r7, #12]
10006408:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
1000640a:	68fb      	ldr	r3, [r7, #12]
1000640c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006410:	b29b      	uxth	r3, r3
10006412:	3b02      	subs	r3, #2
10006414:	b29a      	uxth	r2, r3
10006416:	68fb      	ldr	r3, [r7, #12]
10006418:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
1000641c:	e037      	b.n	1000648e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
1000641e:	68fb      	ldr	r3, [r7, #12]
10006420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10006422:	881a      	ldrh	r2, [r3, #0]
10006424:	69fb      	ldr	r3, [r7, #28]
10006426:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
10006428:	68fb      	ldr	r3, [r7, #12]
1000642a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1000642c:	1c9a      	adds	r2, r3, #2
1000642e:	68fb      	ldr	r3, [r7, #12]
10006430:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
10006432:	68fb      	ldr	r3, [r7, #12]
10006434:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006438:	b29b      	uxth	r3, r3
1000643a:	3b01      	subs	r3, #1
1000643c:	b29a      	uxth	r2, r3
1000643e:	68fb      	ldr	r3, [r7, #12]
10006440:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10006444:	e023      	b.n	1000648e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006446:	f7fb fbdf 	bl	10001c08 <HAL_GetTick>
1000644a:	4602      	mov	r2, r0
1000644c:	697b      	ldr	r3, [r7, #20]
1000644e:	1ad3      	subs	r3, r2, r3
10006450:	683a      	ldr	r2, [r7, #0]
10006452:	429a      	cmp	r2, r3
10006454:	d803      	bhi.n	1000645e <HAL_SPI_Transmit+0x256>
10006456:	683b      	ldr	r3, [r7, #0]
10006458:	f1b3 3fff 	cmp.w	r3, #4294967295
1000645c:	d102      	bne.n	10006464 <HAL_SPI_Transmit+0x25c>
1000645e:	683b      	ldr	r3, [r7, #0]
10006460:	2b00      	cmp	r3, #0
10006462:	d114      	bne.n	1000648e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10006464:	68f8      	ldr	r0, [r7, #12]
10006466:	f000 fa55 	bl	10006914 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
1000646a:	68fb      	ldr	r3, [r7, #12]
1000646c:	2200      	movs	r2, #0
1000646e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10006472:	68fb      	ldr	r3, [r7, #12]
10006474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006478:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
1000647c:	68fb      	ldr	r3, [r7, #12]
1000647e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
10006482:	68fb      	ldr	r3, [r7, #12]
10006484:	2201      	movs	r2, #1
10006486:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
1000648a:	2303      	movs	r3, #3
1000648c:	e0b1      	b.n	100065f2 <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
1000648e:	68fb      	ldr	r3, [r7, #12]
10006490:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006494:	b29b      	uxth	r3, r3
10006496:	2b00      	cmp	r3, #0
10006498:	d19b      	bne.n	100063d2 <HAL_SPI_Transmit+0x1ca>
1000649a:	e084      	b.n	100065a6 <HAL_SPI_Transmit+0x39e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
1000649c:	68fb      	ldr	r3, [r7, #12]
1000649e:	681b      	ldr	r3, [r3, #0]
100064a0:	695b      	ldr	r3, [r3, #20]
100064a2:	f003 0302 	and.w	r3, r3, #2
100064a6:	2b02      	cmp	r3, #2
100064a8:	d152      	bne.n	10006550 <HAL_SPI_Transmit+0x348>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
100064aa:	68fb      	ldr	r3, [r7, #12]
100064ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100064b0:	b29b      	uxth	r3, r3
100064b2:	2b03      	cmp	r3, #3
100064b4:	d918      	bls.n	100064e8 <HAL_SPI_Transmit+0x2e0>
100064b6:	68fb      	ldr	r3, [r7, #12]
100064b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100064ba:	2b40      	cmp	r3, #64	@ 0x40
100064bc:	d914      	bls.n	100064e8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
100064be:	68fb      	ldr	r3, [r7, #12]
100064c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
100064c2:	68fb      	ldr	r3, [r7, #12]
100064c4:	681b      	ldr	r3, [r3, #0]
100064c6:	6812      	ldr	r2, [r2, #0]
100064c8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
100064ca:	68fb      	ldr	r3, [r7, #12]
100064cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100064ce:	1d1a      	adds	r2, r3, #4
100064d0:	68fb      	ldr	r3, [r7, #12]
100064d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
100064d4:	68fb      	ldr	r3, [r7, #12]
100064d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100064da:	b29b      	uxth	r3, r3
100064dc:	3b04      	subs	r3, #4
100064de:	b29a      	uxth	r2, r3
100064e0:	68fb      	ldr	r3, [r7, #12]
100064e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
100064e6:	e057      	b.n	10006598 <HAL_SPI_Transmit+0x390>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
100064e8:	68fb      	ldr	r3, [r7, #12]
100064ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
100064ee:	b29b      	uxth	r3, r3
100064f0:	2b01      	cmp	r3, #1
100064f2:	d917      	bls.n	10006524 <HAL_SPI_Transmit+0x31c>
100064f4:	68fb      	ldr	r3, [r7, #12]
100064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100064f8:	2b00      	cmp	r3, #0
100064fa:	d013      	beq.n	10006524 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
100064fc:	68fb      	ldr	r3, [r7, #12]
100064fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10006500:	881a      	ldrh	r2, [r3, #0]
10006502:	69fb      	ldr	r3, [r7, #28]
10006504:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
10006506:	68fb      	ldr	r3, [r7, #12]
10006508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1000650a:	1c9a      	adds	r2, r3, #2
1000650c:	68fb      	ldr	r3, [r7, #12]
1000650e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
10006510:	68fb      	ldr	r3, [r7, #12]
10006512:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006516:	b29b      	uxth	r3, r3
10006518:	3b02      	subs	r3, #2
1000651a:	b29a      	uxth	r2, r3
1000651c:	68fb      	ldr	r3, [r7, #12]
1000651e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
10006522:	e039      	b.n	10006598 <HAL_SPI_Transmit+0x390>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
10006524:	68fb      	ldr	r3, [r7, #12]
10006526:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
10006528:	68fb      	ldr	r3, [r7, #12]
1000652a:	681b      	ldr	r3, [r3, #0]
1000652c:	3320      	adds	r3, #32
1000652e:	7812      	ldrb	r2, [r2, #0]
10006530:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
10006532:	68fb      	ldr	r3, [r7, #12]
10006534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10006536:	1c5a      	adds	r2, r3, #1
10006538:	68fb      	ldr	r3, [r7, #12]
1000653a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
1000653c:	68fb      	ldr	r3, [r7, #12]
1000653e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
10006542:	b29b      	uxth	r3, r3
10006544:	3b01      	subs	r3, #1
10006546:	b29a      	uxth	r2, r3
10006548:	68fb      	ldr	r3, [r7, #12]
1000654a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
1000654e:	e023      	b.n	10006598 <HAL_SPI_Transmit+0x390>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006550:	f7fb fb5a 	bl	10001c08 <HAL_GetTick>
10006554:	4602      	mov	r2, r0
10006556:	697b      	ldr	r3, [r7, #20]
10006558:	1ad3      	subs	r3, r2, r3
1000655a:	683a      	ldr	r2, [r7, #0]
1000655c:	429a      	cmp	r2, r3
1000655e:	d803      	bhi.n	10006568 <HAL_SPI_Transmit+0x360>
10006560:	683b      	ldr	r3, [r7, #0]
10006562:	f1b3 3fff 	cmp.w	r3, #4294967295
10006566:	d102      	bne.n	1000656e <HAL_SPI_Transmit+0x366>
10006568:	683b      	ldr	r3, [r7, #0]
1000656a:	2b00      	cmp	r3, #0
1000656c:	d114      	bne.n	10006598 <HAL_SPI_Transmit+0x390>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
1000656e:	68f8      	ldr	r0, [r7, #12]
10006570:	f000 f9d0 	bl	10006914 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
10006574:	68fb      	ldr	r3, [r7, #12]
10006576:	2200      	movs	r2, #0
10006578:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
1000657c:	68fb      	ldr	r3, [r7, #12]
1000657e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006582:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
10006586:	68fb      	ldr	r3, [r7, #12]
10006588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
1000658c:	68fb      	ldr	r3, [r7, #12]
1000658e:	2201      	movs	r2, #1
10006590:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
10006594:	2303      	movs	r3, #3
10006596:	e02c      	b.n	100065f2 <HAL_SPI_Transmit+0x3ea>
    while (hspi->TxXferCount > 0UL)
10006598:	68fb      	ldr	r3, [r7, #12]
1000659a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
1000659e:	b29b      	uxth	r3, r3
100065a0:	2b00      	cmp	r3, #0
100065a2:	f47f af7b 	bne.w	1000649c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
100065a6:	683b      	ldr	r3, [r7, #0]
100065a8:	9300      	str	r3, [sp, #0]
100065aa:	697b      	ldr	r3, [r7, #20]
100065ac:	2200      	movs	r2, #0
100065ae:	2108      	movs	r1, #8
100065b0:	68f8      	ldr	r0, [r7, #12]
100065b2:	f000 fa4f 	bl	10006a54 <SPI_WaitOnFlagUntilTimeout>
100065b6:	4603      	mov	r3, r0
100065b8:	2b00      	cmp	r3, #0
100065ba:	d007      	beq.n	100065cc <HAL_SPI_Transmit+0x3c4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
100065bc:	68fb      	ldr	r3, [r7, #12]
100065be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100065c2:	f043 0220 	orr.w	r2, r3, #32
100065c6:	68fb      	ldr	r3, [r7, #12]
100065c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
100065cc:	68f8      	ldr	r0, [r7, #12]
100065ce:	f000 f9a1 	bl	10006914 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
100065d2:	68fb      	ldr	r3, [r7, #12]
100065d4:	2200      	movs	r2, #0
100065d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
100065da:	68fb      	ldr	r3, [r7, #12]
100065dc:	2201      	movs	r2, #1
100065de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
100065e2:	68fb      	ldr	r3, [r7, #12]
100065e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100065e8:	2b00      	cmp	r3, #0
100065ea:	d001      	beq.n	100065f0 <HAL_SPI_Transmit+0x3e8>
  {
    return HAL_ERROR;
100065ec:	2301      	movs	r3, #1
100065ee:	e000      	b.n	100065f2 <HAL_SPI_Transmit+0x3ea>
  }
  return errorcode;
100065f0:	7efb      	ldrb	r3, [r7, #27]
}
100065f2:	4618      	mov	r0, r3
100065f4:	3720      	adds	r7, #32
100065f6:	46bd      	mov	sp, r7
100065f8:	bd80      	pop	{r7, pc}

100065fa <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
100065fa:	b580      	push	{r7, lr}
100065fc:	b088      	sub	sp, #32
100065fe:	af00      	add	r7, sp, #0
10006600:	60f8      	str	r0, [r7, #12]
10006602:	60b9      	str	r1, [r7, #8]
10006604:	603b      	str	r3, [r7, #0]
10006606:	4613      	mov	r3, r2
10006608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
1000660a:	2300      	movs	r3, #0
1000660c:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
1000660e:	68fb      	ldr	r3, [r7, #12]
10006610:	681b      	ldr	r3, [r3, #0]
10006612:	3330      	adds	r3, #48	@ 0x30
10006614:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
10006616:	68fb      	ldr	r3, [r7, #12]
10006618:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
1000661c:	2b01      	cmp	r3, #1
1000661e:	d101      	bne.n	10006624 <HAL_SPI_Receive+0x2a>
10006620:	2302      	movs	r3, #2
10006622:	e173      	b.n	1000690c <HAL_SPI_Receive+0x312>
10006624:	68fb      	ldr	r3, [r7, #12]
10006626:	2201      	movs	r2, #1
10006628:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
1000662c:	f7fb faec 	bl	10001c08 <HAL_GetTick>
10006630:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
10006632:	68fb      	ldr	r3, [r7, #12]
10006634:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10006638:	b2db      	uxtb	r3, r3
1000663a:	2b01      	cmp	r3, #1
1000663c:	d007      	beq.n	1000664e <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
1000663e:	2302      	movs	r3, #2
10006640:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
10006642:	68fb      	ldr	r3, [r7, #12]
10006644:	2200      	movs	r2, #0
10006646:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
1000664a:	7ffb      	ldrb	r3, [r7, #31]
1000664c:	e15e      	b.n	1000690c <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
1000664e:	68bb      	ldr	r3, [r7, #8]
10006650:	2b00      	cmp	r3, #0
10006652:	d002      	beq.n	1000665a <HAL_SPI_Receive+0x60>
10006654:	88fb      	ldrh	r3, [r7, #6]
10006656:	2b00      	cmp	r3, #0
10006658:	d107      	bne.n	1000666a <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
1000665a:	2301      	movs	r3, #1
1000665c:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
1000665e:	68fb      	ldr	r3, [r7, #12]
10006660:	2200      	movs	r2, #0
10006662:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
10006666:	7ffb      	ldrb	r3, [r7, #31]
10006668:	e150      	b.n	1000690c <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
1000666a:	68fb      	ldr	r3, [r7, #12]
1000666c:	2204      	movs	r2, #4
1000666e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
10006672:	68fb      	ldr	r3, [r7, #12]
10006674:	2200      	movs	r2, #0
10006676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
1000667a:	68fb      	ldr	r3, [r7, #12]
1000667c:	68ba      	ldr	r2, [r7, #8]
1000667e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
10006680:	68fb      	ldr	r3, [r7, #12]
10006682:	88fa      	ldrh	r2, [r7, #6]
10006684:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
10006688:	68fb      	ldr	r3, [r7, #12]
1000668a:	88fa      	ldrh	r2, [r7, #6]
1000668c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
10006690:	68fb      	ldr	r3, [r7, #12]
10006692:	2200      	movs	r2, #0
10006694:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
10006696:	68fb      	ldr	r3, [r7, #12]
10006698:	2200      	movs	r2, #0
1000669a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
1000669e:	68fb      	ldr	r3, [r7, #12]
100066a0:	2200      	movs	r2, #0
100066a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
100066a6:	68fb      	ldr	r3, [r7, #12]
100066a8:	2200      	movs	r2, #0
100066aa:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
100066ac:	68fb      	ldr	r3, [r7, #12]
100066ae:	2200      	movs	r2, #0
100066b0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
100066b2:	68fb      	ldr	r3, [r7, #12]
100066b4:	689b      	ldr	r3, [r3, #8]
100066b6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
100066ba:	d108      	bne.n	100066ce <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
100066bc:	68fb      	ldr	r3, [r7, #12]
100066be:	681b      	ldr	r3, [r3, #0]
100066c0:	681a      	ldr	r2, [r3, #0]
100066c2:	68fb      	ldr	r3, [r7, #12]
100066c4:	681b      	ldr	r3, [r3, #0]
100066c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
100066ca:	601a      	str	r2, [r3, #0]
100066cc:	e009      	b.n	100066e2 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
100066ce:	68fb      	ldr	r3, [r7, #12]
100066d0:	681b      	ldr	r3, [r3, #0]
100066d2:	68db      	ldr	r3, [r3, #12]
100066d4:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
100066d8:	68fb      	ldr	r3, [r7, #12]
100066da:	681b      	ldr	r3, [r3, #0]
100066dc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
100066e0:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
100066e2:	68fb      	ldr	r3, [r7, #12]
100066e4:	681b      	ldr	r3, [r3, #0]
100066e6:	685b      	ldr	r3, [r3, #4]
100066e8:	0c1b      	lsrs	r3, r3, #16
100066ea:	041b      	lsls	r3, r3, #16
100066ec:	88f9      	ldrh	r1, [r7, #6]
100066ee:	68fa      	ldr	r2, [r7, #12]
100066f0:	6812      	ldr	r2, [r2, #0]
100066f2:	430b      	orrs	r3, r1
100066f4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
100066f6:	68fb      	ldr	r3, [r7, #12]
100066f8:	681b      	ldr	r3, [r3, #0]
100066fa:	681a      	ldr	r2, [r3, #0]
100066fc:	68fb      	ldr	r3, [r7, #12]
100066fe:	681b      	ldr	r3, [r3, #0]
10006700:	f042 0201 	orr.w	r2, r2, #1
10006704:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
10006706:	68fb      	ldr	r3, [r7, #12]
10006708:	685b      	ldr	r3, [r3, #4]
1000670a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
1000670e:	d107      	bne.n	10006720 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
10006710:	68fb      	ldr	r3, [r7, #12]
10006712:	681b      	ldr	r3, [r3, #0]
10006714:	681a      	ldr	r2, [r3, #0]
10006716:	68fb      	ldr	r3, [r7, #12]
10006718:	681b      	ldr	r3, [r3, #0]
1000671a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
1000671e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
10006720:	68fb      	ldr	r3, [r7, #12]
10006722:	68db      	ldr	r3, [r3, #12]
10006724:	2b0f      	cmp	r3, #15
10006726:	d948      	bls.n	100067ba <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
10006728:	e040      	b.n	100067ac <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
1000672a:	68fb      	ldr	r3, [r7, #12]
1000672c:	681b      	ldr	r3, [r3, #0]
1000672e:	695a      	ldr	r2, [r3, #20]
10006730:	f248 0308 	movw	r3, #32776	@ 0x8008
10006734:	4013      	ands	r3, r2
10006736:	2b00      	cmp	r3, #0
10006738:	d014      	beq.n	10006764 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
1000673a:	68fb      	ldr	r3, [r7, #12]
1000673c:	681a      	ldr	r2, [r3, #0]
1000673e:	68fb      	ldr	r3, [r7, #12]
10006740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10006742:	6b12      	ldr	r2, [r2, #48]	@ 0x30
10006744:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
10006746:	68fb      	ldr	r3, [r7, #12]
10006748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1000674a:	1d1a      	adds	r2, r3, #4
1000674c:	68fb      	ldr	r3, [r7, #12]
1000674e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
10006750:	68fb      	ldr	r3, [r7, #12]
10006752:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
10006756:	b29b      	uxth	r3, r3
10006758:	3b01      	subs	r3, #1
1000675a:	b29a      	uxth	r2, r3
1000675c:	68fb      	ldr	r3, [r7, #12]
1000675e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
10006762:	e023      	b.n	100067ac <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006764:	f7fb fa50 	bl	10001c08 <HAL_GetTick>
10006768:	4602      	mov	r2, r0
1000676a:	697b      	ldr	r3, [r7, #20]
1000676c:	1ad3      	subs	r3, r2, r3
1000676e:	683a      	ldr	r2, [r7, #0]
10006770:	429a      	cmp	r2, r3
10006772:	d803      	bhi.n	1000677c <HAL_SPI_Receive+0x182>
10006774:	683b      	ldr	r3, [r7, #0]
10006776:	f1b3 3fff 	cmp.w	r3, #4294967295
1000677a:	d102      	bne.n	10006782 <HAL_SPI_Receive+0x188>
1000677c:	683b      	ldr	r3, [r7, #0]
1000677e:	2b00      	cmp	r3, #0
10006780:	d114      	bne.n	100067ac <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
10006782:	68f8      	ldr	r0, [r7, #12]
10006784:	f000 f8c6 	bl	10006914 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
10006788:	68fb      	ldr	r3, [r7, #12]
1000678a:	2200      	movs	r2, #0
1000678c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
10006790:	68fb      	ldr	r3, [r7, #12]
10006792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006796:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
1000679a:	68fb      	ldr	r3, [r7, #12]
1000679c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
100067a0:	68fb      	ldr	r3, [r7, #12]
100067a2:	2201      	movs	r2, #1
100067a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
100067a8:	2303      	movs	r3, #3
100067aa:	e0af      	b.n	1000690c <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
100067ac:	68fb      	ldr	r3, [r7, #12]
100067ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
100067b2:	b29b      	uxth	r3, r3
100067b4:	2b00      	cmp	r3, #0
100067b6:	d1b8      	bne.n	1000672a <HAL_SPI_Receive+0x130>
100067b8:	e095      	b.n	100068e6 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
100067ba:	68fb      	ldr	r3, [r7, #12]
100067bc:	68db      	ldr	r3, [r3, #12]
100067be:	2b07      	cmp	r3, #7
100067c0:	f240 808b 	bls.w	100068da <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
100067c4:	e03f      	b.n	10006846 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
100067c6:	68fb      	ldr	r3, [r7, #12]
100067c8:	681b      	ldr	r3, [r3, #0]
100067ca:	695b      	ldr	r3, [r3, #20]
100067cc:	f003 0301 	and.w	r3, r3, #1
100067d0:	2b01      	cmp	r3, #1
100067d2:	d114      	bne.n	100067fe <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
100067d4:	68fb      	ldr	r3, [r7, #12]
100067d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100067d8:	69ba      	ldr	r2, [r7, #24]
100067da:	8812      	ldrh	r2, [r2, #0]
100067dc:	b292      	uxth	r2, r2
100067de:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
100067e0:	68fb      	ldr	r3, [r7, #12]
100067e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100067e4:	1c9a      	adds	r2, r3, #2
100067e6:	68fb      	ldr	r3, [r7, #12]
100067e8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
100067ea:	68fb      	ldr	r3, [r7, #12]
100067ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
100067f0:	b29b      	uxth	r3, r3
100067f2:	3b01      	subs	r3, #1
100067f4:	b29a      	uxth	r2, r3
100067f6:	68fb      	ldr	r3, [r7, #12]
100067f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
100067fc:	e023      	b.n	10006846 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
100067fe:	f7fb fa03 	bl	10001c08 <HAL_GetTick>
10006802:	4602      	mov	r2, r0
10006804:	697b      	ldr	r3, [r7, #20]
10006806:	1ad3      	subs	r3, r2, r3
10006808:	683a      	ldr	r2, [r7, #0]
1000680a:	429a      	cmp	r2, r3
1000680c:	d803      	bhi.n	10006816 <HAL_SPI_Receive+0x21c>
1000680e:	683b      	ldr	r3, [r7, #0]
10006810:	f1b3 3fff 	cmp.w	r3, #4294967295
10006814:	d102      	bne.n	1000681c <HAL_SPI_Receive+0x222>
10006816:	683b      	ldr	r3, [r7, #0]
10006818:	2b00      	cmp	r3, #0
1000681a:	d114      	bne.n	10006846 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
1000681c:	68f8      	ldr	r0, [r7, #12]
1000681e:	f000 f879 	bl	10006914 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
10006822:	68fb      	ldr	r3, [r7, #12]
10006824:	2200      	movs	r2, #0
10006826:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
1000682a:	68fb      	ldr	r3, [r7, #12]
1000682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006830:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
10006834:	68fb      	ldr	r3, [r7, #12]
10006836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
1000683a:	68fb      	ldr	r3, [r7, #12]
1000683c:	2201      	movs	r2, #1
1000683e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
10006842:	2303      	movs	r3, #3
10006844:	e062      	b.n	1000690c <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
10006846:	68fb      	ldr	r3, [r7, #12]
10006848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
1000684c:	b29b      	uxth	r3, r3
1000684e:	2b00      	cmp	r3, #0
10006850:	d1b9      	bne.n	100067c6 <HAL_SPI_Receive+0x1cc>
10006852:	e048      	b.n	100068e6 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
10006854:	68fb      	ldr	r3, [r7, #12]
10006856:	681b      	ldr	r3, [r3, #0]
10006858:	695b      	ldr	r3, [r3, #20]
1000685a:	f003 0301 	and.w	r3, r3, #1
1000685e:	2b01      	cmp	r3, #1
10006860:	d117      	bne.n	10006892 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
10006862:	68fb      	ldr	r3, [r7, #12]
10006864:	681b      	ldr	r3, [r3, #0]
10006866:	f103 0230 	add.w	r2, r3, #48	@ 0x30
1000686a:	68fb      	ldr	r3, [r7, #12]
1000686c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1000686e:	7812      	ldrb	r2, [r2, #0]
10006870:	b2d2      	uxtb	r2, r2
10006872:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
10006874:	68fb      	ldr	r3, [r7, #12]
10006876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10006878:	1c5a      	adds	r2, r3, #1
1000687a:	68fb      	ldr	r3, [r7, #12]
1000687c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
1000687e:	68fb      	ldr	r3, [r7, #12]
10006880:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
10006884:	b29b      	uxth	r3, r3
10006886:	3b01      	subs	r3, #1
10006888:	b29a      	uxth	r2, r3
1000688a:	68fb      	ldr	r3, [r7, #12]
1000688c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
10006890:	e023      	b.n	100068da <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006892:	f7fb f9b9 	bl	10001c08 <HAL_GetTick>
10006896:	4602      	mov	r2, r0
10006898:	697b      	ldr	r3, [r7, #20]
1000689a:	1ad3      	subs	r3, r2, r3
1000689c:	683a      	ldr	r2, [r7, #0]
1000689e:	429a      	cmp	r2, r3
100068a0:	d803      	bhi.n	100068aa <HAL_SPI_Receive+0x2b0>
100068a2:	683b      	ldr	r3, [r7, #0]
100068a4:	f1b3 3fff 	cmp.w	r3, #4294967295
100068a8:	d102      	bne.n	100068b0 <HAL_SPI_Receive+0x2b6>
100068aa:	683b      	ldr	r3, [r7, #0]
100068ac:	2b00      	cmp	r3, #0
100068ae:	d114      	bne.n	100068da <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
100068b0:	68f8      	ldr	r0, [r7, #12]
100068b2:	f000 f82f 	bl	10006914 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
100068b6:	68fb      	ldr	r3, [r7, #12]
100068b8:	2200      	movs	r2, #0
100068ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
100068be:	68fb      	ldr	r3, [r7, #12]
100068c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100068c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
100068c8:	68fb      	ldr	r3, [r7, #12]
100068ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
100068ce:	68fb      	ldr	r3, [r7, #12]
100068d0:	2201      	movs	r2, #1
100068d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
100068d6:	2303      	movs	r3, #3
100068d8:	e018      	b.n	1000690c <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
100068da:	68fb      	ldr	r3, [r7, #12]
100068dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
100068e0:	b29b      	uxth	r3, r3
100068e2:	2b00      	cmp	r3, #0
100068e4:	d1b6      	bne.n	10006854 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
100068e6:	68f8      	ldr	r0, [r7, #12]
100068e8:	f000 f814 	bl	10006914 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
100068ec:	68fb      	ldr	r3, [r7, #12]
100068ee:	2200      	movs	r2, #0
100068f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
100068f4:	68fb      	ldr	r3, [r7, #12]
100068f6:	2201      	movs	r2, #1
100068f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
100068fc:	68fb      	ldr	r3, [r7, #12]
100068fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006902:	2b00      	cmp	r3, #0
10006904:	d001      	beq.n	1000690a <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
10006906:	2301      	movs	r3, #1
10006908:	e000      	b.n	1000690c <HAL_SPI_Receive+0x312>
  }
  return errorcode;
1000690a:	7ffb      	ldrb	r3, [r7, #31]
}
1000690c:	4618      	mov	r0, r3
1000690e:	3720      	adds	r7, #32
10006910:	46bd      	mov	sp, r7
10006912:	bd80      	pop	{r7, pc}

10006914 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
10006914:	b480      	push	{r7}
10006916:	b085      	sub	sp, #20
10006918:	af00      	add	r7, sp, #0
1000691a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
1000691c:	687b      	ldr	r3, [r7, #4]
1000691e:	681b      	ldr	r3, [r3, #0]
10006920:	695b      	ldr	r3, [r3, #20]
10006922:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
10006924:	687b      	ldr	r3, [r7, #4]
10006926:	681b      	ldr	r3, [r3, #0]
10006928:	699a      	ldr	r2, [r3, #24]
1000692a:	687b      	ldr	r3, [r7, #4]
1000692c:	681b      	ldr	r3, [r3, #0]
1000692e:	f042 0208 	orr.w	r2, r2, #8
10006932:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
10006934:	687b      	ldr	r3, [r7, #4]
10006936:	681b      	ldr	r3, [r3, #0]
10006938:	699a      	ldr	r2, [r3, #24]
1000693a:	687b      	ldr	r3, [r7, #4]
1000693c:	681b      	ldr	r3, [r3, #0]
1000693e:	f042 0210 	orr.w	r2, r2, #16
10006942:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
10006944:	687b      	ldr	r3, [r7, #4]
10006946:	681b      	ldr	r3, [r3, #0]
10006948:	681a      	ldr	r2, [r3, #0]
1000694a:	687b      	ldr	r3, [r7, #4]
1000694c:	681b      	ldr	r3, [r3, #0]
1000694e:	f022 0201 	bic.w	r2, r2, #1
10006952:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
10006954:	687b      	ldr	r3, [r7, #4]
10006956:	681b      	ldr	r3, [r3, #0]
10006958:	691b      	ldr	r3, [r3, #16]
1000695a:	687a      	ldr	r2, [r7, #4]
1000695c:	6812      	ldr	r2, [r2, #0]
1000695e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
10006962:	f023 0303 	bic.w	r3, r3, #3
10006966:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
10006968:	687b      	ldr	r3, [r7, #4]
1000696a:	681b      	ldr	r3, [r3, #0]
1000696c:	689a      	ldr	r2, [r3, #8]
1000696e:	687b      	ldr	r3, [r7, #4]
10006970:	681b      	ldr	r3, [r3, #0]
10006972:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
10006976:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
10006978:	687b      	ldr	r3, [r7, #4]
1000697a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
1000697e:	b2db      	uxtb	r3, r3
10006980:	2b04      	cmp	r3, #4
10006982:	d014      	beq.n	100069ae <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
10006984:	68fb      	ldr	r3, [r7, #12]
10006986:	f003 0320 	and.w	r3, r3, #32
1000698a:	2b00      	cmp	r3, #0
1000698c:	d00f      	beq.n	100069ae <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
1000698e:	687b      	ldr	r3, [r7, #4]
10006990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006994:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
10006998:	687b      	ldr	r3, [r7, #4]
1000699a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
1000699e:	687b      	ldr	r3, [r7, #4]
100069a0:	681b      	ldr	r3, [r3, #0]
100069a2:	699a      	ldr	r2, [r3, #24]
100069a4:	687b      	ldr	r3, [r7, #4]
100069a6:	681b      	ldr	r3, [r3, #0]
100069a8:	f042 0220 	orr.w	r2, r2, #32
100069ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
100069ae:	687b      	ldr	r3, [r7, #4]
100069b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
100069b4:	b2db      	uxtb	r3, r3
100069b6:	2b03      	cmp	r3, #3
100069b8:	d014      	beq.n	100069e4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
100069ba:	68fb      	ldr	r3, [r7, #12]
100069bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100069c0:	2b00      	cmp	r3, #0
100069c2:	d00f      	beq.n	100069e4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
100069c4:	687b      	ldr	r3, [r7, #4]
100069c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100069ca:	f043 0204 	orr.w	r2, r3, #4
100069ce:	687b      	ldr	r3, [r7, #4]
100069d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
100069d4:	687b      	ldr	r3, [r7, #4]
100069d6:	681b      	ldr	r3, [r3, #0]
100069d8:	699a      	ldr	r2, [r3, #24]
100069da:	687b      	ldr	r3, [r7, #4]
100069dc:	681b      	ldr	r3, [r3, #0]
100069de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
100069e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
100069e4:	68fb      	ldr	r3, [r7, #12]
100069e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
100069ea:	2b00      	cmp	r3, #0
100069ec:	d00f      	beq.n	10006a0e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
100069ee:	687b      	ldr	r3, [r7, #4]
100069f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100069f4:	f043 0201 	orr.w	r2, r3, #1
100069f8:	687b      	ldr	r3, [r7, #4]
100069fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
100069fe:	687b      	ldr	r3, [r7, #4]
10006a00:	681b      	ldr	r3, [r3, #0]
10006a02:	699a      	ldr	r2, [r3, #24]
10006a04:	687b      	ldr	r3, [r7, #4]
10006a06:	681b      	ldr	r3, [r3, #0]
10006a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
10006a0c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
10006a0e:	68fb      	ldr	r3, [r7, #12]
10006a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10006a14:	2b00      	cmp	r3, #0
10006a16:	d00f      	beq.n	10006a38 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
10006a18:	687b      	ldr	r3, [r7, #4]
10006a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006a1e:	f043 0208 	orr.w	r2, r3, #8
10006a22:	687b      	ldr	r3, [r7, #4]
10006a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
10006a28:	687b      	ldr	r3, [r7, #4]
10006a2a:	681b      	ldr	r3, [r3, #0]
10006a2c:	699a      	ldr	r2, [r3, #24]
10006a2e:	687b      	ldr	r3, [r7, #4]
10006a30:	681b      	ldr	r3, [r3, #0]
10006a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
10006a36:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
10006a38:	687b      	ldr	r3, [r7, #4]
10006a3a:	2200      	movs	r2, #0
10006a3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
10006a40:	687b      	ldr	r3, [r7, #4]
10006a42:	2200      	movs	r2, #0
10006a44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
10006a48:	bf00      	nop
10006a4a:	3714      	adds	r7, #20
10006a4c:	46bd      	mov	sp, r7
10006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006a52:	4770      	bx	lr

10006a54 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
10006a54:	b580      	push	{r7, lr}
10006a56:	b084      	sub	sp, #16
10006a58:	af00      	add	r7, sp, #0
10006a5a:	60f8      	str	r0, [r7, #12]
10006a5c:	60b9      	str	r1, [r7, #8]
10006a5e:	603b      	str	r3, [r7, #0]
10006a60:	4613      	mov	r3, r2
10006a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
10006a64:	e010      	b.n	10006a88 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
10006a66:	f7fb f8cf 	bl	10001c08 <HAL_GetTick>
10006a6a:	4602      	mov	r2, r0
10006a6c:	683b      	ldr	r3, [r7, #0]
10006a6e:	1ad3      	subs	r3, r2, r3
10006a70:	69ba      	ldr	r2, [r7, #24]
10006a72:	429a      	cmp	r2, r3
10006a74:	d803      	bhi.n	10006a7e <SPI_WaitOnFlagUntilTimeout+0x2a>
10006a76:	69bb      	ldr	r3, [r7, #24]
10006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
10006a7c:	d102      	bne.n	10006a84 <SPI_WaitOnFlagUntilTimeout+0x30>
10006a7e:	69bb      	ldr	r3, [r7, #24]
10006a80:	2b00      	cmp	r3, #0
10006a82:	d101      	bne.n	10006a88 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
10006a84:	2303      	movs	r3, #3
10006a86:	e00f      	b.n	10006aa8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
10006a88:	68fb      	ldr	r3, [r7, #12]
10006a8a:	681b      	ldr	r3, [r3, #0]
10006a8c:	695a      	ldr	r2, [r3, #20]
10006a8e:	68bb      	ldr	r3, [r7, #8]
10006a90:	4013      	ands	r3, r2
10006a92:	68ba      	ldr	r2, [r7, #8]
10006a94:	429a      	cmp	r2, r3
10006a96:	bf0c      	ite	eq
10006a98:	2301      	moveq	r3, #1
10006a9a:	2300      	movne	r3, #0
10006a9c:	b2db      	uxtb	r3, r3
10006a9e:	461a      	mov	r2, r3
10006aa0:	79fb      	ldrb	r3, [r7, #7]
10006aa2:	429a      	cmp	r2, r3
10006aa4:	d0df      	beq.n	10006a66 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
10006aa6:	2300      	movs	r3, #0
}
10006aa8:	4618      	mov	r0, r3
10006aaa:	3710      	adds	r7, #16
10006aac:	46bd      	mov	sp, r7
10006aae:	bd80      	pop	{r7, pc}

10006ab0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
10006ab0:	b480      	push	{r7}
10006ab2:	b085      	sub	sp, #20
10006ab4:	af00      	add	r7, sp, #0
10006ab6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
10006ab8:	687b      	ldr	r3, [r7, #4]
10006aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10006abc:	095b      	lsrs	r3, r3, #5
10006abe:	3301      	adds	r3, #1
10006ac0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
10006ac2:	687b      	ldr	r3, [r7, #4]
10006ac4:	68db      	ldr	r3, [r3, #12]
10006ac6:	3301      	adds	r3, #1
10006ac8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
10006aca:	68bb      	ldr	r3, [r7, #8]
10006acc:	3307      	adds	r3, #7
10006ace:	08db      	lsrs	r3, r3, #3
10006ad0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
10006ad2:	68bb      	ldr	r3, [r7, #8]
10006ad4:	68fa      	ldr	r2, [r7, #12]
10006ad6:	fb02 f303 	mul.w	r3, r2, r3
}
10006ada:	4618      	mov	r0, r3
10006adc:	3714      	adds	r7, #20
10006ade:	46bd      	mov	sp, r7
10006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
10006ae4:	4770      	bx	lr

10006ae6 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
10006ae6:	b480      	push	{r7}
10006ae8:	b083      	sub	sp, #12
10006aea:	af00      	add	r7, sp, #0
10006aec:	6078      	str	r0, [r7, #4]
	list->prev = list;
10006aee:	687b      	ldr	r3, [r7, #4]
10006af0:	687a      	ldr	r2, [r7, #4]
10006af2:	605a      	str	r2, [r3, #4]
	list->next = list;
10006af4:	687b      	ldr	r3, [r7, #4]
10006af6:	687a      	ldr	r2, [r7, #4]
10006af8:	601a      	str	r2, [r3, #0]
}
10006afa:	bf00      	nop
10006afc:	370c      	adds	r7, #12
10006afe:	46bd      	mov	sp, r7
10006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
10006b04:	4770      	bx	lr

10006b06 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
10006b06:	b480      	push	{r7}
10006b08:	b083      	sub	sp, #12
10006b0a:	af00      	add	r7, sp, #0
10006b0c:	6078      	str	r0, [r7, #4]
10006b0e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10006b10:	687b      	ldr	r3, [r7, #4]
10006b12:	685a      	ldr	r2, [r3, #4]
10006b14:	683b      	ldr	r3, [r7, #0]
10006b16:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10006b18:	683b      	ldr	r3, [r7, #0]
10006b1a:	687a      	ldr	r2, [r7, #4]
10006b1c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10006b1e:	683b      	ldr	r3, [r7, #0]
10006b20:	681b      	ldr	r3, [r3, #0]
10006b22:	683a      	ldr	r2, [r7, #0]
10006b24:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10006b26:	683b      	ldr	r3, [r7, #0]
10006b28:	685b      	ldr	r3, [r3, #4]
10006b2a:	683a      	ldr	r2, [r7, #0]
10006b2c:	601a      	str	r2, [r3, #0]
}
10006b2e:	bf00      	nop
10006b30:	370c      	adds	r7, #12
10006b32:	46bd      	mov	sp, r7
10006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
10006b38:	4770      	bx	lr

10006b3a <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
10006b3a:	b580      	push	{r7, lr}
10006b3c:	b082      	sub	sp, #8
10006b3e:	af00      	add	r7, sp, #0
10006b40:	6078      	str	r0, [r7, #4]
10006b42:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10006b44:	6839      	ldr	r1, [r7, #0]
10006b46:	6878      	ldr	r0, [r7, #4]
10006b48:	f7ff ffdd 	bl	10006b06 <metal_list_add_before>
}
10006b4c:	bf00      	nop
10006b4e:	3708      	adds	r7, #8
10006b50:	46bd      	mov	sp, r7
10006b52:	bd80      	pop	{r7, pc}

10006b54 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
10006b54:	b580      	push	{r7, lr}
10006b56:	b082      	sub	sp, #8
10006b58:	af00      	add	r7, sp, #0
10006b5a:	6078      	str	r0, [r7, #4]
10006b5c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
10006b5e:	6839      	ldr	r1, [r7, #0]
10006b60:	6878      	ldr	r0, [r7, #4]
10006b62:	f001 fefb 	bl	1000895c <metal_machine_cache_flush>
}
10006b66:	bf00      	nop
10006b68:	3708      	adds	r7, #8
10006b6a:	46bd      	mov	sp, r7
10006b6c:	bd80      	pop	{r7, pc}

10006b6e <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10006b6e:	b580      	push	{r7, lr}
10006b70:	b082      	sub	sp, #8
10006b72:	af00      	add	r7, sp, #0
10006b74:	6078      	str	r0, [r7, #4]
10006b76:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
10006b78:	6839      	ldr	r1, [r7, #0]
10006b7a:	6878      	ldr	r0, [r7, #4]
10006b7c:	f001 fef9 	bl	10008972 <metal_machine_cache_invalidate>
}
10006b80:	bf00      	nop
10006b82:	3708      	adds	r7, #8
10006b84:	46bd      	mov	sp, r7
10006b86:	bd80      	pop	{r7, pc}

10006b88 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
10006b88:	b580      	push	{r7, lr}
10006b8a:	b082      	sub	sp, #8
10006b8c:	af00      	add	r7, sp, #0
10006b8e:	6078      	str	r0, [r7, #4]
10006b90:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
10006b92:	6839      	ldr	r1, [r7, #0]
10006b94:	6878      	ldr	r0, [r7, #4]
10006b96:	f7ff ffdd 	bl	10006b54 <__metal_cache_flush>
}
10006b9a:	bf00      	nop
10006b9c:	3708      	adds	r7, #8
10006b9e:	46bd      	mov	sp, r7
10006ba0:	bd80      	pop	{r7, pc}

10006ba2 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
10006ba2:	b580      	push	{r7, lr}
10006ba4:	b082      	sub	sp, #8
10006ba6:	af00      	add	r7, sp, #0
10006ba8:	6078      	str	r0, [r7, #4]
10006baa:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
10006bac:	6839      	ldr	r1, [r7, #0]
10006bae:	6878      	ldr	r0, [r7, #4]
10006bb0:	f7ff ffdd 	bl	10006b6e <__metal_cache_invalidate>
}
10006bb4:	bf00      	nop
10006bb6:	3708      	adds	r7, #8
10006bb8:	46bd      	mov	sp, r7
10006bba:	bd80      	pop	{r7, pc}

10006bbc <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
10006bbc:	b580      	push	{r7, lr}
10006bbe:	b082      	sub	sp, #8
10006bc0:	af00      	add	r7, sp, #0
10006bc2:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
10006bc4:	687b      	ldr	r3, [r7, #4]
10006bc6:	2b00      	cmp	r3, #0
10006bc8:	d008      	beq.n	10006bdc <metal_bus_register+0x20>
10006bca:	687b      	ldr	r3, [r7, #4]
10006bcc:	681b      	ldr	r3, [r3, #0]
10006bce:	2b00      	cmp	r3, #0
10006bd0:	d004      	beq.n	10006bdc <metal_bus_register+0x20>
10006bd2:	687b      	ldr	r3, [r7, #4]
10006bd4:	681b      	ldr	r3, [r3, #0]
10006bd6:	781b      	ldrb	r3, [r3, #0]
10006bd8:	2b00      	cmp	r3, #0
10006bda:	d102      	bne.n	10006be2 <metal_bus_register+0x26>
		return -EINVAL;
10006bdc:	f06f 0315 	mvn.w	r3, #21
10006be0:	e026      	b.n	10006c30 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
10006be2:	687b      	ldr	r3, [r7, #4]
10006be4:	681b      	ldr	r3, [r3, #0]
10006be6:	2100      	movs	r1, #0
10006be8:	4618      	mov	r0, r3
10006bea:	f000 f82b 	bl	10006c44 <metal_bus_find>
10006bee:	4603      	mov	r3, r0
10006bf0:	2b00      	cmp	r3, #0
10006bf2:	d102      	bne.n	10006bfa <metal_bus_register+0x3e>
		return -EEXIST;
10006bf4:	f06f 0310 	mvn.w	r3, #16
10006bf8:	e01a      	b.n	10006c30 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
10006bfa:	687b      	ldr	r3, [r7, #4]
10006bfc:	331c      	adds	r3, #28
10006bfe:	4618      	mov	r0, r3
10006c00:	f7ff ff71 	bl	10006ae6 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
10006c04:	687b      	ldr	r3, [r7, #4]
10006c06:	3324      	adds	r3, #36	@ 0x24
10006c08:	4619      	mov	r1, r3
10006c0a:	480b      	ldr	r0, [pc, #44]	@ (10006c38 <metal_bus_register+0x7c>)
10006c0c:	f7ff ff95 	bl	10006b3a <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
10006c10:	4b0a      	ldr	r3, [pc, #40]	@ (10006c3c <metal_bus_register+0x80>)
10006c12:	781b      	ldrb	r3, [r3, #0]
10006c14:	2b06      	cmp	r3, #6
10006c16:	d90a      	bls.n	10006c2e <metal_bus_register+0x72>
10006c18:	4b08      	ldr	r3, [pc, #32]	@ (10006c3c <metal_bus_register+0x80>)
10006c1a:	685b      	ldr	r3, [r3, #4]
10006c1c:	2b00      	cmp	r3, #0
10006c1e:	d006      	beq.n	10006c2e <metal_bus_register+0x72>
10006c20:	4b06      	ldr	r3, [pc, #24]	@ (10006c3c <metal_bus_register+0x80>)
10006c22:	685b      	ldr	r3, [r3, #4]
10006c24:	687a      	ldr	r2, [r7, #4]
10006c26:	6812      	ldr	r2, [r2, #0]
10006c28:	4905      	ldr	r1, [pc, #20]	@ (10006c40 <metal_bus_register+0x84>)
10006c2a:	2007      	movs	r0, #7
10006c2c:	4798      	blx	r3
	return 0;
10006c2e:	2300      	movs	r3, #0
}
10006c30:	4618      	mov	r0, r3
10006c32:	3708      	adds	r7, #8
10006c34:	46bd      	mov	sp, r7
10006c36:	bd80      	pop	{r7, pc}
10006c38:	10020450 	.word	0x10020450
10006c3c:	10020448 	.word	0x10020448
10006c40:	1000af74 	.word	0x1000af74

10006c44 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
10006c44:	b580      	push	{r7, lr}
10006c46:	b084      	sub	sp, #16
10006c48:	af00      	add	r7, sp, #0
10006c4a:	6078      	str	r0, [r7, #4]
10006c4c:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
10006c4e:	4b12      	ldr	r3, [pc, #72]	@ (10006c98 <metal_bus_find+0x54>)
10006c50:	689b      	ldr	r3, [r3, #8]
10006c52:	60fb      	str	r3, [r7, #12]
10006c54:	e016      	b.n	10006c84 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
10006c56:	68fb      	ldr	r3, [r7, #12]
10006c58:	3b24      	subs	r3, #36	@ 0x24
10006c5a:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
10006c5c:	68bb      	ldr	r3, [r7, #8]
10006c5e:	681b      	ldr	r3, [r3, #0]
10006c60:	6879      	ldr	r1, [r7, #4]
10006c62:	4618      	mov	r0, r3
10006c64:	f7f9 f9ec 	bl	10000040 <strcmp>
10006c68:	4603      	mov	r3, r0
10006c6a:	2b00      	cmp	r3, #0
10006c6c:	d107      	bne.n	10006c7e <metal_bus_find+0x3a>
10006c6e:	683b      	ldr	r3, [r7, #0]
10006c70:	2b00      	cmp	r3, #0
10006c72:	d004      	beq.n	10006c7e <metal_bus_find+0x3a>
			*result = bus;
10006c74:	683b      	ldr	r3, [r7, #0]
10006c76:	68ba      	ldr	r2, [r7, #8]
10006c78:	601a      	str	r2, [r3, #0]
			return 0;
10006c7a:	2300      	movs	r3, #0
10006c7c:	e008      	b.n	10006c90 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10006c7e:	68fb      	ldr	r3, [r7, #12]
10006c80:	681b      	ldr	r3, [r3, #0]
10006c82:	60fb      	str	r3, [r7, #12]
10006c84:	68fb      	ldr	r3, [r7, #12]
10006c86:	4a05      	ldr	r2, [pc, #20]	@ (10006c9c <metal_bus_find+0x58>)
10006c88:	4293      	cmp	r3, r2
10006c8a:	d1e4      	bne.n	10006c56 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10006c8c:	f06f 0301 	mvn.w	r3, #1
}
10006c90:	4618      	mov	r0, r3
10006c92:	3710      	adds	r7, #16
10006c94:	46bd      	mov	sp, r7
10006c96:	bd80      	pop	{r7, pc}
10006c98:	10020448 	.word	0x10020448
10006c9c:	10020450 	.word	0x10020450

10006ca0 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10006ca0:	b580      	push	{r7, lr}
10006ca2:	b086      	sub	sp, #24
10006ca4:	af00      	add	r7, sp, #0
10006ca6:	60f8      	str	r0, [r7, #12]
10006ca8:	60b9      	str	r1, [r7, #8]
10006caa:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10006cac:	68fb      	ldr	r3, [r7, #12]
10006cae:	2b00      	cmp	r3, #0
10006cb0:	d00d      	beq.n	10006cce <metal_device_open+0x2e>
10006cb2:	68fb      	ldr	r3, [r7, #12]
10006cb4:	781b      	ldrb	r3, [r3, #0]
10006cb6:	2b00      	cmp	r3, #0
10006cb8:	d009      	beq.n	10006cce <metal_device_open+0x2e>
10006cba:	68bb      	ldr	r3, [r7, #8]
10006cbc:	2b00      	cmp	r3, #0
10006cbe:	d006      	beq.n	10006cce <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10006cc0:	68bb      	ldr	r3, [r7, #8]
10006cc2:	781b      	ldrb	r3, [r3, #0]
10006cc4:	2b00      	cmp	r3, #0
10006cc6:	d002      	beq.n	10006cce <metal_device_open+0x2e>
10006cc8:	687b      	ldr	r3, [r7, #4]
10006cca:	2b00      	cmp	r3, #0
10006ccc:	d102      	bne.n	10006cd4 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10006cce:	f06f 0315 	mvn.w	r3, #21
10006cd2:	e01f      	b.n	10006d14 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
10006cd4:	f107 0310 	add.w	r3, r7, #16
10006cd8:	4619      	mov	r1, r3
10006cda:	68f8      	ldr	r0, [r7, #12]
10006cdc:	f7ff ffb2 	bl	10006c44 <metal_bus_find>
10006ce0:	6178      	str	r0, [r7, #20]
	if (error)
10006ce2:	697b      	ldr	r3, [r7, #20]
10006ce4:	2b00      	cmp	r3, #0
10006ce6:	d001      	beq.n	10006cec <metal_device_open+0x4c>
		return error;
10006ce8:	697b      	ldr	r3, [r7, #20]
10006cea:	e013      	b.n	10006d14 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
10006cec:	693b      	ldr	r3, [r7, #16]
10006cee:	689b      	ldr	r3, [r3, #8]
10006cf0:	2b00      	cmp	r3, #0
10006cf2:	d102      	bne.n	10006cfa <metal_device_open+0x5a>
		return -ENODEV;
10006cf4:	f06f 0312 	mvn.w	r3, #18
10006cf8:	e00c      	b.n	10006d14 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
10006cfa:	693b      	ldr	r3, [r7, #16]
10006cfc:	689b      	ldr	r3, [r3, #8]
10006cfe:	6938      	ldr	r0, [r7, #16]
10006d00:	687a      	ldr	r2, [r7, #4]
10006d02:	68b9      	ldr	r1, [r7, #8]
10006d04:	4798      	blx	r3
10006d06:	6178      	str	r0, [r7, #20]
	if (error)
10006d08:	697b      	ldr	r3, [r7, #20]
10006d0a:	2b00      	cmp	r3, #0
10006d0c:	d001      	beq.n	10006d12 <metal_device_open+0x72>
		return error;
10006d0e:	697b      	ldr	r3, [r7, #20]
10006d10:	e000      	b.n	10006d14 <metal_device_open+0x74>

	return 0;
10006d12:	2300      	movs	r3, #0
}
10006d14:	4618      	mov	r0, r3
10006d16:	3718      	adds	r7, #24
10006d18:	46bd      	mov	sp, r7
10006d1a:	bd80      	pop	{r7, pc}

10006d1c <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
10006d1c:	b580      	push	{r7, lr}
10006d1e:	b082      	sub	sp, #8
10006d20:	af00      	add	r7, sp, #0
10006d22:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
10006d24:	687b      	ldr	r3, [r7, #4]
10006d26:	681b      	ldr	r3, [r3, #0]
10006d28:	2b00      	cmp	r3, #0
10006d2a:	d008      	beq.n	10006d3e <metal_register_generic_device+0x22>
10006d2c:	687b      	ldr	r3, [r7, #4]
10006d2e:	681b      	ldr	r3, [r3, #0]
10006d30:	781b      	ldrb	r3, [r3, #0]
10006d32:	2b00      	cmp	r3, #0
10006d34:	d003      	beq.n	10006d3e <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
10006d36:	687b      	ldr	r3, [r7, #4]
10006d38:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
10006d3a:	2b02      	cmp	r3, #2
10006d3c:	d902      	bls.n	10006d44 <metal_register_generic_device+0x28>
		return -EINVAL;
10006d3e:	f06f 0315 	mvn.w	r3, #21
10006d42:	e009      	b.n	10006d58 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
10006d44:	687b      	ldr	r3, [r7, #4]
10006d46:	4a06      	ldr	r2, [pc, #24]	@ (10006d60 <metal_register_generic_device+0x44>)
10006d48:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
10006d4a:	687b      	ldr	r3, [r7, #4]
10006d4c:	337c      	adds	r3, #124	@ 0x7c
10006d4e:	4619      	mov	r1, r3
10006d50:	4804      	ldr	r0, [pc, #16]	@ (10006d64 <metal_register_generic_device+0x48>)
10006d52:	f7ff fef2 	bl	10006b3a <metal_list_add_tail>
			    &device->node);
	return 0;
10006d56:	2300      	movs	r3, #0
}
10006d58:	4618      	mov	r0, r3
10006d5a:	3708      	adds	r7, #8
10006d5c:	46bd      	mov	sp, r7
10006d5e:	bd80      	pop	{r7, pc}
10006d60:	10020014 	.word	0x10020014
10006d64:	10020460 	.word	0x10020460

10006d68 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
10006d68:	b580      	push	{r7, lr}
10006d6a:	b086      	sub	sp, #24
10006d6c:	af00      	add	r7, sp, #0
10006d6e:	60f8      	str	r0, [r7, #12]
10006d70:	60b9      	str	r1, [r7, #8]
10006d72:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
10006d74:	4b12      	ldr	r3, [pc, #72]	@ (10006dc0 <metal_generic_dev_open+0x58>)
10006d76:	699b      	ldr	r3, [r3, #24]
10006d78:	617b      	str	r3, [r7, #20]
10006d7a:	e016      	b.n	10006daa <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10006d7c:	697b      	ldr	r3, [r7, #20]
10006d7e:	3b7c      	subs	r3, #124	@ 0x7c
10006d80:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
10006d82:	693b      	ldr	r3, [r7, #16]
10006d84:	681b      	ldr	r3, [r3, #0]
10006d86:	68b9      	ldr	r1, [r7, #8]
10006d88:	4618      	mov	r0, r3
10006d8a:	f7f9 f959 	bl	10000040 <strcmp>
10006d8e:	4603      	mov	r3, r0
10006d90:	2b00      	cmp	r3, #0
10006d92:	d107      	bne.n	10006da4 <metal_generic_dev_open+0x3c>
			*device = dev;
10006d94:	687b      	ldr	r3, [r7, #4]
10006d96:	693a      	ldr	r2, [r7, #16]
10006d98:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
10006d9a:	6938      	ldr	r0, [r7, #16]
10006d9c:	f000 f890 	bl	10006ec0 <metal_generic_dev_sys_open>
10006da0:	4603      	mov	r3, r0
10006da2:	e008      	b.n	10006db6 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
10006da4:	697b      	ldr	r3, [r7, #20]
10006da6:	681b      	ldr	r3, [r3, #0]
10006da8:	617b      	str	r3, [r7, #20]
10006daa:	697b      	ldr	r3, [r7, #20]
10006dac:	4a05      	ldr	r2, [pc, #20]	@ (10006dc4 <metal_generic_dev_open+0x5c>)
10006dae:	4293      	cmp	r3, r2
10006db0:	d1e4      	bne.n	10006d7c <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
10006db2:	f06f 0312 	mvn.w	r3, #18
}
10006db6:	4618      	mov	r0, r3
10006db8:	3718      	adds	r7, #24
10006dba:	46bd      	mov	sp, r7
10006dbc:	bd80      	pop	{r7, pc}
10006dbe:	bf00      	nop
10006dc0:	10020448 	.word	0x10020448
10006dc4:	10020460 	.word	0x10020460

10006dc8 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10006dc8:	b580      	push	{r7, lr}
10006dca:	b086      	sub	sp, #24
10006dcc:	af00      	add	r7, sp, #0
10006dce:	60f8      	str	r0, [r7, #12]
10006dd0:	60b9      	str	r1, [r7, #8]
10006dd2:	607a      	str	r2, [r7, #4]
10006dd4:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
10006dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10006dd8:	683b      	ldr	r3, [r7, #0]
10006dda:	429a      	cmp	r2, r3
10006ddc:	d009      	beq.n	10006df2 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10006dde:	6a3a      	ldr	r2, [r7, #32]
10006de0:	4613      	mov	r3, r2
10006de2:	005b      	lsls	r3, r3, #1
10006de4:	4413      	add	r3, r2
10006de6:	009b      	lsls	r3, r3, #2
10006de8:	461a      	mov	r2, r3
10006dea:	6839      	ldr	r1, [r7, #0]
10006dec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10006dee:	f002 fefa 	bl	10009be6 <memcpy>
	for (i = 0; i < nents_in; i++) {
10006df2:	2300      	movs	r3, #0
10006df4:	617b      	str	r3, [r7, #20]
10006df6:	e02f      	b.n	10006e58 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
10006df8:	687b      	ldr	r3, [r7, #4]
10006dfa:	2b02      	cmp	r3, #2
10006dfc:	d114      	bne.n	10006e28 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10006dfe:	697a      	ldr	r2, [r7, #20]
10006e00:	4613      	mov	r3, r2
10006e02:	005b      	lsls	r3, r3, #1
10006e04:	4413      	add	r3, r2
10006e06:	009b      	lsls	r3, r3, #2
10006e08:	461a      	mov	r2, r3
10006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006e0c:	4413      	add	r3, r2
10006e0e:	6818      	ldr	r0, [r3, #0]
10006e10:	697a      	ldr	r2, [r7, #20]
10006e12:	4613      	mov	r3, r2
10006e14:	005b      	lsls	r3, r3, #1
10006e16:	4413      	add	r3, r2
10006e18:	009b      	lsls	r3, r3, #2
10006e1a:	461a      	mov	r2, r3
10006e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006e1e:	4413      	add	r3, r2
10006e20:	689b      	ldr	r3, [r3, #8]
10006e22:	4619      	mov	r1, r3
10006e24:	f7ff feb0 	bl	10006b88 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
10006e28:	697a      	ldr	r2, [r7, #20]
10006e2a:	4613      	mov	r3, r2
10006e2c:	005b      	lsls	r3, r3, #1
10006e2e:	4413      	add	r3, r2
10006e30:	009b      	lsls	r3, r3, #2
10006e32:	461a      	mov	r2, r3
10006e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006e36:	4413      	add	r3, r2
10006e38:	6818      	ldr	r0, [r3, #0]
10006e3a:	697a      	ldr	r2, [r7, #20]
10006e3c:	4613      	mov	r3, r2
10006e3e:	005b      	lsls	r3, r3, #1
10006e40:	4413      	add	r3, r2
10006e42:	009b      	lsls	r3, r3, #2
10006e44:	461a      	mov	r2, r3
10006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006e48:	4413      	add	r3, r2
10006e4a:	689b      	ldr	r3, [r3, #8]
10006e4c:	4619      	mov	r1, r3
10006e4e:	f7ff fea8 	bl	10006ba2 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10006e52:	697b      	ldr	r3, [r7, #20]
10006e54:	3301      	adds	r3, #1
10006e56:	617b      	str	r3, [r7, #20]
10006e58:	697a      	ldr	r2, [r7, #20]
10006e5a:	6a3b      	ldr	r3, [r7, #32]
10006e5c:	429a      	cmp	r2, r3
10006e5e:	dbcb      	blt.n	10006df8 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
10006e60:	6a3b      	ldr	r3, [r7, #32]
}
10006e62:	4618      	mov	r0, r3
10006e64:	3718      	adds	r7, #24
10006e66:	46bd      	mov	sp, r7
10006e68:	bd80      	pop	{r7, pc}

10006e6a <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10006e6a:	b580      	push	{r7, lr}
10006e6c:	b086      	sub	sp, #24
10006e6e:	af00      	add	r7, sp, #0
10006e70:	60f8      	str	r0, [r7, #12]
10006e72:	60b9      	str	r1, [r7, #8]
10006e74:	607a      	str	r2, [r7, #4]
10006e76:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10006e78:	2300      	movs	r3, #0
10006e7a:	617b      	str	r3, [r7, #20]
10006e7c:	e017      	b.n	10006eae <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10006e7e:	697a      	ldr	r2, [r7, #20]
10006e80:	4613      	mov	r3, r2
10006e82:	005b      	lsls	r3, r3, #1
10006e84:	4413      	add	r3, r2
10006e86:	009b      	lsls	r3, r3, #2
10006e88:	461a      	mov	r2, r3
10006e8a:	683b      	ldr	r3, [r7, #0]
10006e8c:	4413      	add	r3, r2
10006e8e:	6818      	ldr	r0, [r3, #0]
10006e90:	697a      	ldr	r2, [r7, #20]
10006e92:	4613      	mov	r3, r2
10006e94:	005b      	lsls	r3, r3, #1
10006e96:	4413      	add	r3, r2
10006e98:	009b      	lsls	r3, r3, #2
10006e9a:	461a      	mov	r2, r3
10006e9c:	683b      	ldr	r3, [r7, #0]
10006e9e:	4413      	add	r3, r2
10006ea0:	689b      	ldr	r3, [r3, #8]
10006ea2:	4619      	mov	r1, r3
10006ea4:	f7ff fe7d 	bl	10006ba2 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
10006ea8:	697b      	ldr	r3, [r7, #20]
10006eaa:	3301      	adds	r3, #1
10006eac:	617b      	str	r3, [r7, #20]
10006eae:	697a      	ldr	r2, [r7, #20]
10006eb0:	6a3b      	ldr	r3, [r7, #32]
10006eb2:	429a      	cmp	r2, r3
10006eb4:	dbe3      	blt.n	10006e7e <metal_generic_dev_dma_unmap+0x14>
	}
}
10006eb6:	bf00      	nop
10006eb8:	bf00      	nop
10006eba:	3718      	adds	r7, #24
10006ebc:	46bd      	mov	sp, r7
10006ebe:	bd80      	pop	{r7, pc}

10006ec0 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
10006ec0:	b580      	push	{r7, lr}
10006ec2:	b084      	sub	sp, #16
10006ec4:	af00      	add	r7, sp, #0
10006ec6:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
10006ec8:	2300      	movs	r3, #0
10006eca:	60fb      	str	r3, [r7, #12]
10006ecc:	e013      	b.n	10006ef6 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
10006ece:	68fa      	ldr	r2, [r7, #12]
10006ed0:	4613      	mov	r3, r2
10006ed2:	00db      	lsls	r3, r3, #3
10006ed4:	1a9b      	subs	r3, r3, r2
10006ed6:	00db      	lsls	r3, r3, #3
10006ed8:	3308      	adds	r3, #8
10006eda:	687a      	ldr	r2, [r7, #4]
10006edc:	4413      	add	r3, r2
10006ede:	3304      	adds	r3, #4
10006ee0:	60bb      	str	r3, [r7, #8]
		if (!io->size)
10006ee2:	68bb      	ldr	r3, [r7, #8]
10006ee4:	689b      	ldr	r3, [r3, #8]
10006ee6:	2b00      	cmp	r3, #0
10006ee8:	d00b      	beq.n	10006f02 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
10006eea:	68b8      	ldr	r0, [r7, #8]
10006eec:	f000 f81e 	bl	10006f2c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
10006ef0:	68fb      	ldr	r3, [r7, #12]
10006ef2:	3301      	adds	r3, #1
10006ef4:	60fb      	str	r3, [r7, #12]
10006ef6:	687b      	ldr	r3, [r7, #4]
10006ef8:	689b      	ldr	r3, [r3, #8]
10006efa:	68fa      	ldr	r2, [r7, #12]
10006efc:	429a      	cmp	r2, r3
10006efe:	d3e6      	bcc.n	10006ece <metal_generic_dev_sys_open+0xe>
10006f00:	e000      	b.n	10006f04 <metal_generic_dev_sys_open+0x44>
			break;
10006f02:	bf00      	nop
	}

	return 0;
10006f04:	2300      	movs	r3, #0
}
10006f06:	4618      	mov	r0, r3
10006f08:	3710      	adds	r7, #16
10006f0a:	46bd      	mov	sp, r7
10006f0c:	bd80      	pop	{r7, pc}
	...

10006f10 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
10006f10:	b580      	push	{r7, lr}
10006f12:	b082      	sub	sp, #8
10006f14:	af00      	add	r7, sp, #0
10006f16:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
10006f18:	4803      	ldr	r0, [pc, #12]	@ (10006f28 <metal_sys_init+0x18>)
10006f1a:	f7ff fe4f 	bl	10006bbc <metal_bus_register>
	return 0;
10006f1e:	2300      	movs	r3, #0
}
10006f20:	4618      	mov	r0, r3
10006f22:	3708      	adds	r7, #8
10006f24:	46bd      	mov	sp, r7
10006f26:	bd80      	pop	{r7, pc}
10006f28:	10020014 	.word	0x10020014

10006f2c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
10006f2c:	b580      	push	{r7, lr}
10006f2e:	b086      	sub	sp, #24
10006f30:	af00      	add	r7, sp, #0
10006f32:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
10006f34:	687b      	ldr	r3, [r7, #4]
10006f36:	681b      	ldr	r3, [r3, #0]
10006f38:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
10006f3a:	687b      	ldr	r3, [r7, #4]
10006f3c:	689b      	ldr	r3, [r3, #8]
10006f3e:	613b      	str	r3, [r7, #16]
	if (psize) {
10006f40:	693b      	ldr	r3, [r7, #16]
10006f42:	2b00      	cmp	r3, #0
10006f44:	d02c      	beq.n	10006fa0 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
10006f46:	687b      	ldr	r3, [r7, #4]
10006f48:	68db      	ldr	r3, [r3, #12]
10006f4a:	693a      	ldr	r2, [r7, #16]
10006f4c:	fa22 f303 	lsr.w	r3, r2, r3
10006f50:	2b00      	cmp	r3, #0
10006f52:	d005      	beq.n	10006f60 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
10006f54:	687b      	ldr	r3, [r7, #4]
10006f56:	68db      	ldr	r3, [r3, #12]
10006f58:	2201      	movs	r2, #1
10006f5a:	fa02 f303 	lsl.w	r3, r2, r3
10006f5e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10006f60:	2300      	movs	r3, #0
10006f62:	617b      	str	r3, [r7, #20]
10006f64:	e013      	b.n	10006f8e <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
10006f66:	687b      	ldr	r3, [r7, #4]
10006f68:	685a      	ldr	r2, [r3, #4]
10006f6a:	697b      	ldr	r3, [r7, #20]
10006f6c:	009b      	lsls	r3, r3, #2
10006f6e:	4413      	add	r3, r2
10006f70:	6819      	ldr	r1, [r3, #0]
10006f72:	687b      	ldr	r3, [r7, #4]
10006f74:	695b      	ldr	r3, [r3, #20]
10006f76:	693a      	ldr	r2, [r7, #16]
10006f78:	68f8      	ldr	r0, [r7, #12]
10006f7a:	f001 fd05 	bl	10008988 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
10006f7e:	693b      	ldr	r3, [r7, #16]
10006f80:	009b      	lsls	r3, r3, #2
10006f82:	68fa      	ldr	r2, [r7, #12]
10006f84:	4413      	add	r3, r2
10006f86:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10006f88:	697b      	ldr	r3, [r7, #20]
10006f8a:	3301      	adds	r3, #1
10006f8c:	617b      	str	r3, [r7, #20]
10006f8e:	687b      	ldr	r3, [r7, #4]
10006f90:	689a      	ldr	r2, [r3, #8]
10006f92:	687b      	ldr	r3, [r7, #4]
10006f94:	68db      	ldr	r3, [r3, #12]
10006f96:	fa22 f303 	lsr.w	r3, r2, r3
10006f9a:	697a      	ldr	r2, [r7, #20]
10006f9c:	429a      	cmp	r2, r3
10006f9e:	d9e2      	bls.n	10006f66 <metal_sys_io_mem_map+0x3a>
		}
	}
}
10006fa0:	bf00      	nop
10006fa2:	3718      	adds	r7, #24
10006fa4:	46bd      	mov	sp, r7
10006fa6:	bd80      	pop	{r7, pc}

10006fa8 <metal_list_init>:
{
10006fa8:	b480      	push	{r7}
10006faa:	b083      	sub	sp, #12
10006fac:	af00      	add	r7, sp, #0
10006fae:	6078      	str	r0, [r7, #4]
	list->prev = list;
10006fb0:	687b      	ldr	r3, [r7, #4]
10006fb2:	687a      	ldr	r2, [r7, #4]
10006fb4:	605a      	str	r2, [r3, #4]
	list->next = list;
10006fb6:	687b      	ldr	r3, [r7, #4]
10006fb8:	687a      	ldr	r2, [r7, #4]
10006fba:	601a      	str	r2, [r3, #0]
}
10006fbc:	bf00      	nop
10006fbe:	370c      	adds	r7, #12
10006fc0:	46bd      	mov	sp, r7
10006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
10006fc6:	4770      	bx	lr

10006fc8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
10006fc8:	b580      	push	{r7, lr}
10006fca:	b084      	sub	sp, #16
10006fcc:	af00      	add	r7, sp, #0
10006fce:	6078      	str	r0, [r7, #4]
	int error = 0;
10006fd0:	2300      	movs	r3, #0
10006fd2:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
10006fd4:	2220      	movs	r2, #32
10006fd6:	2100      	movs	r1, #0
10006fd8:	4810      	ldr	r0, [pc, #64]	@ (1000701c <metal_init+0x54>)
10006fda:	f002 fd47 	bl	10009a6c <memset>

	_metal.common.log_handler   = params->log_handler;
10006fde:	687b      	ldr	r3, [r7, #4]
10006fe0:	681b      	ldr	r3, [r3, #0]
10006fe2:	4a0e      	ldr	r2, [pc, #56]	@ (1000701c <metal_init+0x54>)
10006fe4:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
10006fe6:	687b      	ldr	r3, [r7, #4]
10006fe8:	791a      	ldrb	r2, [r3, #4]
10006fea:	4b0c      	ldr	r3, [pc, #48]	@ (1000701c <metal_init+0x54>)
10006fec:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
10006fee:	480c      	ldr	r0, [pc, #48]	@ (10007020 <metal_init+0x58>)
10006ff0:	f7ff ffda 	bl	10006fa8 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
10006ff4:	480b      	ldr	r0, [pc, #44]	@ (10007024 <metal_init+0x5c>)
10006ff6:	f7ff ffd7 	bl	10006fa8 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
10006ffa:	480b      	ldr	r0, [pc, #44]	@ (10007028 <metal_init+0x60>)
10006ffc:	f7ff ffd4 	bl	10006fa8 <metal_list_init>

	error = metal_sys_init(params);
10007000:	6878      	ldr	r0, [r7, #4]
10007002:	f7ff ff85 	bl	10006f10 <metal_sys_init>
10007006:	60f8      	str	r0, [r7, #12]
	if (error)
10007008:	68fb      	ldr	r3, [r7, #12]
1000700a:	2b00      	cmp	r3, #0
1000700c:	d001      	beq.n	10007012 <metal_init+0x4a>
		return error;
1000700e:	68fb      	ldr	r3, [r7, #12]
10007010:	e000      	b.n	10007014 <metal_init+0x4c>

	return error;
10007012:	68fb      	ldr	r3, [r7, #12]
}
10007014:	4618      	mov	r0, r3
10007016:	3710      	adds	r7, #16
10007018:	46bd      	mov	sp, r7
1000701a:	bd80      	pop	{r7, pc}
1000701c:	10020448 	.word	0x10020448
10007020:	10020450 	.word	0x10020450
10007024:	10020458 	.word	0x10020458
10007028:	10020460 	.word	0x10020460

1000702c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
1000702c:	b480      	push	{r7}
1000702e:	b083      	sub	sp, #12
10007030:	af00      	add	r7, sp, #0
10007032:	6078      	str	r0, [r7, #4]
10007034:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10007036:	687b      	ldr	r3, [r7, #4]
10007038:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
1000703a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000703e:	d00a      	beq.n	10007056 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007040:	687b      	ldr	r3, [r7, #4]
10007042:	689b      	ldr	r3, [r3, #8]
10007044:	683a      	ldr	r2, [r7, #0]
10007046:	429a      	cmp	r2, r3
10007048:	d205      	bcs.n	10007056 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000704a:	687b      	ldr	r3, [r7, #4]
1000704c:	681b      	ldr	r3, [r3, #0]
1000704e:	461a      	mov	r2, r3
10007050:	683b      	ldr	r3, [r7, #0]
10007052:	4413      	add	r3, r2
		: NULL);
10007054:	e000      	b.n	10007058 <metal_io_virt+0x2c>
10007056:	2300      	movs	r3, #0
}
10007058:	4618      	mov	r0, r3
1000705a:	370c      	adds	r7, #12
1000705c:	46bd      	mov	sp, r7
1000705e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007062:	4770      	bx	lr

10007064 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
10007064:	b5b0      	push	{r4, r5, r7, lr}
10007066:	b08c      	sub	sp, #48	@ 0x30
10007068:	af00      	add	r7, sp, #0
1000706a:	60f8      	str	r0, [r7, #12]
1000706c:	60b9      	str	r1, [r7, #8]
1000706e:	607a      	str	r2, [r7, #4]
10007070:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
10007072:	f107 0310 	add.w	r3, r7, #16
10007076:	2220      	movs	r2, #32
10007078:	2100      	movs	r1, #0
1000707a:	4618      	mov	r0, r3
1000707c:	f002 fcf6 	bl	10009a6c <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
10007080:	68fb      	ldr	r3, [r7, #12]
10007082:	68ba      	ldr	r2, [r7, #8]
10007084:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
10007086:	68fb      	ldr	r3, [r7, #12]
10007088:	687a      	ldr	r2, [r7, #4]
1000708a:	605a      	str	r2, [r3, #4]
	io->size = size;
1000708c:	68fb      	ldr	r3, [r7, #12]
1000708e:	683a      	ldr	r2, [r7, #0]
10007090:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
10007092:	68fb      	ldr	r3, [r7, #12]
10007094:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10007096:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
10007098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000709a:	2b1f      	cmp	r3, #31
1000709c:	d904      	bls.n	100070a8 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
1000709e:	68fb      	ldr	r3, [r7, #12]
100070a0:	f04f 32ff 	mov.w	r2, #4294967295
100070a4:	611a      	str	r2, [r3, #16]
100070a6:	e006      	b.n	100070b6 <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
100070a8:	2201      	movs	r2, #1
100070aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100070ac:	fa02 f303 	lsl.w	r3, r2, r3
100070b0:	1e5a      	subs	r2, r3, #1
100070b2:	68fb      	ldr	r3, [r7, #12]
100070b4:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
100070b6:	68fb      	ldr	r3, [r7, #12]
100070b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
100070ba:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
100070bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100070be:	2b00      	cmp	r3, #0
100070c0:	d00b      	beq.n	100070da <metal_io_init+0x76>
100070c2:	68fb      	ldr	r3, [r7, #12]
100070c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
100070c6:	f103 0418 	add.w	r4, r3, #24
100070ca:	4615      	mov	r5, r2
100070cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
100070ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
100070d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
100070d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
100070d8:	e00a      	b.n	100070f0 <metal_io_init+0x8c>
100070da:	68fb      	ldr	r3, [r7, #12]
100070dc:	f103 0418 	add.w	r4, r3, #24
100070e0:	f107 0510 	add.w	r5, r7, #16
100070e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
100070e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
100070e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
100070ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
100070f0:	68f8      	ldr	r0, [r7, #12]
100070f2:	f7ff ff1b 	bl	10006f2c <metal_sys_io_mem_map>
}
100070f6:	bf00      	nop
100070f8:	3730      	adds	r7, #48	@ 0x30
100070fa:	46bd      	mov	sp, r7
100070fc:	bdb0      	pop	{r4, r5, r7, pc}

100070fe <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
100070fe:	b590      	push	{r4, r7, lr}
10007100:	b08b      	sub	sp, #44	@ 0x2c
10007102:	af02      	add	r7, sp, #8
10007104:	60f8      	str	r0, [r7, #12]
10007106:	60b9      	str	r1, [r7, #8]
10007108:	607a      	str	r2, [r7, #4]
1000710a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000710c:	68b9      	ldr	r1, [r7, #8]
1000710e:	68f8      	ldr	r0, [r7, #12]
10007110:	f7ff ff8c 	bl	1000702c <metal_io_virt>
10007114:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
10007116:	687b      	ldr	r3, [r7, #4]
10007118:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000711a:	69fb      	ldr	r3, [r7, #28]
1000711c:	2b00      	cmp	r3, #0
1000711e:	d102      	bne.n	10007126 <metal_io_block_read+0x28>
		return -ERANGE;
10007120:	f06f 0321 	mvn.w	r3, #33	@ 0x21
10007124:	e05c      	b.n	100071e0 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
10007126:	683a      	ldr	r2, [r7, #0]
10007128:	68bb      	ldr	r3, [r7, #8]
1000712a:	441a      	add	r2, r3
1000712c:	68fb      	ldr	r3, [r7, #12]
1000712e:	689b      	ldr	r3, [r3, #8]
10007130:	429a      	cmp	r2, r3
10007132:	d904      	bls.n	1000713e <metal_io_block_read+0x40>
		len = io->size - offset;
10007134:	68fb      	ldr	r3, [r7, #12]
10007136:	689a      	ldr	r2, [r3, #8]
10007138:	68bb      	ldr	r3, [r7, #8]
1000713a:	1ad3      	subs	r3, r2, r3
1000713c:	603b      	str	r3, [r7, #0]
	retlen = len;
1000713e:	683b      	ldr	r3, [r7, #0]
10007140:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
10007142:	68fb      	ldr	r3, [r7, #12]
10007144:	6a1b      	ldr	r3, [r3, #32]
10007146:	2b00      	cmp	r3, #0
10007148:	d00a      	beq.n	10007160 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
1000714a:	68fb      	ldr	r3, [r7, #12]
1000714c:	6a1c      	ldr	r4, [r3, #32]
1000714e:	683b      	ldr	r3, [r7, #0]
10007150:	9300      	str	r3, [sp, #0]
10007152:	2305      	movs	r3, #5
10007154:	687a      	ldr	r2, [r7, #4]
10007156:	68b9      	ldr	r1, [r7, #8]
10007158:	68f8      	ldr	r0, [r7, #12]
1000715a:	47a0      	blx	r4
1000715c:	6178      	str	r0, [r7, #20]
1000715e:	e03e      	b.n	100071de <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
10007160:	f3bf 8f5b 	dmb	ish
		while ( len && (
10007164:	e00c      	b.n	10007180 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10007166:	69fb      	ldr	r3, [r7, #28]
10007168:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000716a:	69bb      	ldr	r3, [r7, #24]
1000716c:	701a      	strb	r2, [r3, #0]
			dest++;
1000716e:	69bb      	ldr	r3, [r7, #24]
10007170:	3301      	adds	r3, #1
10007172:	61bb      	str	r3, [r7, #24]
			ptr++;
10007174:	69fb      	ldr	r3, [r7, #28]
10007176:	3301      	adds	r3, #1
10007178:	61fb      	str	r3, [r7, #28]
			len--;
1000717a:	683b      	ldr	r3, [r7, #0]
1000717c:	3b01      	subs	r3, #1
1000717e:	603b      	str	r3, [r7, #0]
		while ( len && (
10007180:	683b      	ldr	r3, [r7, #0]
10007182:	2b00      	cmp	r3, #0
10007184:	d017      	beq.n	100071b6 <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
10007186:	69bb      	ldr	r3, [r7, #24]
10007188:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000718c:	2b00      	cmp	r3, #0
1000718e:	d1ea      	bne.n	10007166 <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
10007190:	69fb      	ldr	r3, [r7, #28]
10007192:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
10007196:	2b00      	cmp	r3, #0
10007198:	d1e5      	bne.n	10007166 <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000719a:	e00c      	b.n	100071b6 <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
1000719c:	69fb      	ldr	r3, [r7, #28]
1000719e:	681a      	ldr	r2, [r3, #0]
100071a0:	69bb      	ldr	r3, [r7, #24]
100071a2:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100071a4:	69bb      	ldr	r3, [r7, #24]
100071a6:	3304      	adds	r3, #4
100071a8:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
100071aa:	69fb      	ldr	r3, [r7, #28]
100071ac:	3304      	adds	r3, #4
100071ae:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
100071b0:	683b      	ldr	r3, [r7, #0]
100071b2:	3b04      	subs	r3, #4
100071b4:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100071b6:	683b      	ldr	r3, [r7, #0]
100071b8:	2b03      	cmp	r3, #3
100071ba:	dcef      	bgt.n	1000719c <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
100071bc:	e00c      	b.n	100071d8 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
100071be:	69fb      	ldr	r3, [r7, #28]
100071c0:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
100071c2:	69bb      	ldr	r3, [r7, #24]
100071c4:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
100071c6:	69bb      	ldr	r3, [r7, #24]
100071c8:	3301      	adds	r3, #1
100071ca:	61bb      	str	r3, [r7, #24]
100071cc:	69fb      	ldr	r3, [r7, #28]
100071ce:	3301      	adds	r3, #1
100071d0:	61fb      	str	r3, [r7, #28]
100071d2:	683b      	ldr	r3, [r7, #0]
100071d4:	3b01      	subs	r3, #1
100071d6:	603b      	str	r3, [r7, #0]
100071d8:	683b      	ldr	r3, [r7, #0]
100071da:	2b00      	cmp	r3, #0
100071dc:	d1ef      	bne.n	100071be <metal_io_block_read+0xc0>
	}
	return retlen;
100071de:	697b      	ldr	r3, [r7, #20]
}
100071e0:	4618      	mov	r0, r3
100071e2:	3724      	adds	r7, #36	@ 0x24
100071e4:	46bd      	mov	sp, r7
100071e6:	bd90      	pop	{r4, r7, pc}

100071e8 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
100071e8:	b590      	push	{r4, r7, lr}
100071ea:	b08b      	sub	sp, #44	@ 0x2c
100071ec:	af02      	add	r7, sp, #8
100071ee:	60f8      	str	r0, [r7, #12]
100071f0:	60b9      	str	r1, [r7, #8]
100071f2:	607a      	str	r2, [r7, #4]
100071f4:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
100071f6:	68b9      	ldr	r1, [r7, #8]
100071f8:	68f8      	ldr	r0, [r7, #12]
100071fa:	f7ff ff17 	bl	1000702c <metal_io_virt>
100071fe:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
10007200:	687b      	ldr	r3, [r7, #4]
10007202:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10007204:	69fb      	ldr	r3, [r7, #28]
10007206:	2b00      	cmp	r3, #0
10007208:	d102      	bne.n	10007210 <metal_io_block_write+0x28>
		return -ERANGE;
1000720a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
1000720e:	e05b      	b.n	100072c8 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
10007210:	683a      	ldr	r2, [r7, #0]
10007212:	68bb      	ldr	r3, [r7, #8]
10007214:	441a      	add	r2, r3
10007216:	68fb      	ldr	r3, [r7, #12]
10007218:	689b      	ldr	r3, [r3, #8]
1000721a:	429a      	cmp	r2, r3
1000721c:	d904      	bls.n	10007228 <metal_io_block_write+0x40>
		len = io->size - offset;
1000721e:	68fb      	ldr	r3, [r7, #12]
10007220:	689a      	ldr	r2, [r3, #8]
10007222:	68bb      	ldr	r3, [r7, #8]
10007224:	1ad3      	subs	r3, r2, r3
10007226:	603b      	str	r3, [r7, #0]
	retlen = len;
10007228:	683b      	ldr	r3, [r7, #0]
1000722a:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
1000722c:	68fb      	ldr	r3, [r7, #12]
1000722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007230:	2b00      	cmp	r3, #0
10007232:	d017      	beq.n	10007264 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
10007234:	68fb      	ldr	r3, [r7, #12]
10007236:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
10007238:	683b      	ldr	r3, [r7, #0]
1000723a:	9300      	str	r3, [sp, #0]
1000723c:	2305      	movs	r3, #5
1000723e:	687a      	ldr	r2, [r7, #4]
10007240:	68b9      	ldr	r1, [r7, #8]
10007242:	68f8      	ldr	r0, [r7, #12]
10007244:	47a0      	blx	r4
10007246:	6178      	str	r0, [r7, #20]
10007248:	e03d      	b.n	100072c6 <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000724a:	69bb      	ldr	r3, [r7, #24]
1000724c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000724e:	69fb      	ldr	r3, [r7, #28]
10007250:	701a      	strb	r2, [r3, #0]
			ptr++;
10007252:	69fb      	ldr	r3, [r7, #28]
10007254:	3301      	adds	r3, #1
10007256:	61fb      	str	r3, [r7, #28]
			source++;
10007258:	69bb      	ldr	r3, [r7, #24]
1000725a:	3301      	adds	r3, #1
1000725c:	61bb      	str	r3, [r7, #24]
			len--;
1000725e:	683b      	ldr	r3, [r7, #0]
10007260:	3b01      	subs	r3, #1
10007262:	603b      	str	r3, [r7, #0]
		while ( len && (
10007264:	683b      	ldr	r3, [r7, #0]
10007266:	2b00      	cmp	r3, #0
10007268:	d017      	beq.n	1000729a <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000726a:	69fb      	ldr	r3, [r7, #28]
1000726c:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10007270:	2b00      	cmp	r3, #0
10007272:	d1ea      	bne.n	1000724a <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
10007274:	69bb      	ldr	r3, [r7, #24]
10007276:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000727a:	2b00      	cmp	r3, #0
1000727c:	d1e5      	bne.n	1000724a <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000727e:	e00c      	b.n	1000729a <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
10007280:	69bb      	ldr	r3, [r7, #24]
10007282:	681a      	ldr	r2, [r3, #0]
10007284:	69fb      	ldr	r3, [r7, #28]
10007286:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10007288:	69fb      	ldr	r3, [r7, #28]
1000728a:	3304      	adds	r3, #4
1000728c:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
1000728e:	69bb      	ldr	r3, [r7, #24]
10007290:	3304      	adds	r3, #4
10007292:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
10007294:	683b      	ldr	r3, [r7, #0]
10007296:	3b04      	subs	r3, #4
10007298:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000729a:	683b      	ldr	r3, [r7, #0]
1000729c:	2b03      	cmp	r3, #3
1000729e:	dcef      	bgt.n	10007280 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
100072a0:	e00c      	b.n	100072bc <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
100072a2:	69bb      	ldr	r3, [r7, #24]
100072a4:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
100072a6:	69fb      	ldr	r3, [r7, #28]
100072a8:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
100072aa:	69fb      	ldr	r3, [r7, #28]
100072ac:	3301      	adds	r3, #1
100072ae:	61fb      	str	r3, [r7, #28]
100072b0:	69bb      	ldr	r3, [r7, #24]
100072b2:	3301      	adds	r3, #1
100072b4:	61bb      	str	r3, [r7, #24]
100072b6:	683b      	ldr	r3, [r7, #0]
100072b8:	3b01      	subs	r3, #1
100072ba:	603b      	str	r3, [r7, #0]
100072bc:	683b      	ldr	r3, [r7, #0]
100072be:	2b00      	cmp	r3, #0
100072c0:	d1ef      	bne.n	100072a2 <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
100072c2:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
100072c6:	697b      	ldr	r3, [r7, #20]
}
100072c8:	4618      	mov	r0, r3
100072ca:	3724      	adds	r7, #36	@ 0x24
100072cc:	46bd      	mov	sp, r7
100072ce:	bd90      	pop	{r4, r7, pc}

100072d0 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
100072d0:	b40e      	push	{r1, r2, r3}
100072d2:	b480      	push	{r7}
100072d4:	b082      	sub	sp, #8
100072d6:	af00      	add	r7, sp, #0
100072d8:	4603      	mov	r3, r0
100072da:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
100072dc:	bf00      	nop
100072de:	3708      	adds	r7, #8
100072e0:	46bd      	mov	sp, r7
100072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
100072e6:	b003      	add	sp, #12
100072e8:	4770      	bx	lr

100072ea <metal_io_virt>:
{
100072ea:	b480      	push	{r7}
100072ec:	b083      	sub	sp, #12
100072ee:	af00      	add	r7, sp, #0
100072f0:	6078      	str	r0, [r7, #4]
100072f2:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
100072f4:	687b      	ldr	r3, [r7, #4]
100072f6:	681b      	ldr	r3, [r3, #0]
		: NULL);
100072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
100072fc:	d00a      	beq.n	10007314 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
100072fe:	687b      	ldr	r3, [r7, #4]
10007300:	689b      	ldr	r3, [r3, #8]
10007302:	683a      	ldr	r2, [r7, #0]
10007304:	429a      	cmp	r2, r3
10007306:	d205      	bcs.n	10007314 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10007308:	687b      	ldr	r3, [r7, #4]
1000730a:	681b      	ldr	r3, [r3, #0]
1000730c:	461a      	mov	r2, r3
1000730e:	683b      	ldr	r3, [r7, #0]
10007310:	4413      	add	r3, r2
		: NULL);
10007312:	e000      	b.n	10007316 <metal_io_virt+0x2c>
10007314:	2300      	movs	r3, #0
}
10007316:	4618      	mov	r0, r3
10007318:	370c      	adds	r7, #12
1000731a:	46bd      	mov	sp, r7
1000731c:	f85d 7b04 	ldr.w	r7, [sp], #4
10007320:	4770      	bx	lr

10007322 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
10007322:	b480      	push	{r7}
10007324:	b085      	sub	sp, #20
10007326:	af00      	add	r7, sp, #0
10007328:	6078      	str	r0, [r7, #4]
1000732a:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000732c:	683b      	ldr	r3, [r7, #0]
1000732e:	687a      	ldr	r2, [r7, #4]
10007330:	6812      	ldr	r2, [r2, #0]
10007332:	1a9b      	subs	r3, r3, r2
10007334:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007336:	687b      	ldr	r3, [r7, #4]
10007338:	689b      	ldr	r3, [r3, #8]
1000733a:	68fa      	ldr	r2, [r7, #12]
1000733c:	429a      	cmp	r2, r3
1000733e:	d201      	bcs.n	10007344 <metal_io_virt_to_offset+0x22>
10007340:	68fb      	ldr	r3, [r7, #12]
10007342:	e001      	b.n	10007348 <metal_io_virt_to_offset+0x26>
10007344:	f04f 33ff 	mov.w	r3, #4294967295
}
10007348:	4618      	mov	r0, r3
1000734a:	3714      	adds	r7, #20
1000734c:	46bd      	mov	sp, r7
1000734e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007352:	4770      	bx	lr

10007354 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
10007354:	b5b0      	push	{r4, r5, r7, lr}
10007356:	b08c      	sub	sp, #48	@ 0x30
10007358:	af00      	add	r7, sp, #0
1000735a:	60f8      	str	r0, [r7, #12]
1000735c:	60b9      	str	r1, [r7, #8]
1000735e:	603b      	str	r3, [r7, #0]
10007360:	4613      	mov	r3, r2
10007362:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
10007364:	68b9      	ldr	r1, [r7, #8]
10007366:	68f8      	ldr	r0, [r7, #12]
10007368:	f7ff ffbf 	bl	100072ea <metal_io_virt>
1000736c:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
1000736e:	68fb      	ldr	r3, [r7, #12]
10007370:	699b      	ldr	r3, [r3, #24]
10007372:	2b00      	cmp	r3, #0
10007374:	d009      	beq.n	1000738a <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
10007376:	68fb      	ldr	r3, [r7, #12]
10007378:	699c      	ldr	r4, [r3, #24]
1000737a:	79fa      	ldrb	r2, [r7, #7]
1000737c:	683b      	ldr	r3, [r7, #0]
1000737e:	68b9      	ldr	r1, [r7, #8]
10007380:	68f8      	ldr	r0, [r7, #12]
10007382:	47a0      	blx	r4
10007384:	4604      	mov	r4, r0
10007386:	460d      	mov	r5, r1
10007388:	e059      	b.n	1000743e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
1000738a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000738c:	2b00      	cmp	r3, #0
1000738e:	d012      	beq.n	100073b6 <metal_io_read+0x62>
10007390:	683b      	ldr	r3, [r7, #0]
10007392:	2b01      	cmp	r3, #1
10007394:	d10f      	bne.n	100073b6 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
10007396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007398:	62bb      	str	r3, [r7, #40]	@ 0x28
1000739a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000739c:	f3bf 8f5b 	dmb	ish
100073a0:	781b      	ldrb	r3, [r3, #0]
100073a2:	f3bf 8f5b 	dmb	ish
100073a6:	b2db      	uxtb	r3, r3
100073a8:	76fb      	strb	r3, [r7, #27]
100073aa:	7efb      	ldrb	r3, [r7, #27]
100073ac:	b2db      	uxtb	r3, r3
100073ae:	2200      	movs	r2, #0
100073b0:	461c      	mov	r4, r3
100073b2:	4615      	mov	r5, r2
100073b4:	e043      	b.n	1000743e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
100073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100073b8:	2b00      	cmp	r3, #0
100073ba:	d012      	beq.n	100073e2 <metal_io_read+0x8e>
100073bc:	683b      	ldr	r3, [r7, #0]
100073be:	2b02      	cmp	r3, #2
100073c0:	d10f      	bne.n	100073e2 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
100073c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100073c4:	627b      	str	r3, [r7, #36]	@ 0x24
100073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100073c8:	f3bf 8f5b 	dmb	ish
100073cc:	881b      	ldrh	r3, [r3, #0]
100073ce:	f3bf 8f5b 	dmb	ish
100073d2:	b29b      	uxth	r3, r3
100073d4:	833b      	strh	r3, [r7, #24]
100073d6:	8b3b      	ldrh	r3, [r7, #24]
100073d8:	b29b      	uxth	r3, r3
100073da:	2200      	movs	r2, #0
100073dc:	461c      	mov	r4, r3
100073de:	4615      	mov	r5, r2
100073e0:	e02d      	b.n	1000743e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
100073e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100073e4:	2b00      	cmp	r3, #0
100073e6:	d010      	beq.n	1000740a <metal_io_read+0xb6>
100073e8:	683b      	ldr	r3, [r7, #0]
100073ea:	2b04      	cmp	r3, #4
100073ec:	d10d      	bne.n	1000740a <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
100073ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100073f0:	623b      	str	r3, [r7, #32]
100073f2:	6a3b      	ldr	r3, [r7, #32]
100073f4:	f3bf 8f5b 	dmb	ish
100073f8:	681b      	ldr	r3, [r3, #0]
100073fa:	f3bf 8f5b 	dmb	ish
100073fe:	617b      	str	r3, [r7, #20]
10007400:	697b      	ldr	r3, [r7, #20]
10007402:	2200      	movs	r2, #0
10007404:	461c      	mov	r4, r3
10007406:	4615      	mov	r5, r2
10007408:	e019      	b.n	1000743e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
1000740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000740c:	2b00      	cmp	r3, #0
1000740e:	d010      	beq.n	10007432 <metal_io_read+0xde>
10007410:	683b      	ldr	r3, [r7, #0]
10007412:	2b04      	cmp	r3, #4
10007414:	d10d      	bne.n	10007432 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
10007416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007418:	61fb      	str	r3, [r7, #28]
1000741a:	69fb      	ldr	r3, [r7, #28]
1000741c:	f3bf 8f5b 	dmb	ish
10007420:	681b      	ldr	r3, [r3, #0]
10007422:	f3bf 8f5b 	dmb	ish
10007426:	613b      	str	r3, [r7, #16]
10007428:	693b      	ldr	r3, [r7, #16]
1000742a:	2200      	movs	r2, #0
1000742c:	461c      	mov	r4, r3
1000742e:	4615      	mov	r5, r2
10007430:	e005      	b.n	1000743e <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
10007432:	4b06      	ldr	r3, [pc, #24]	@ (1000744c <metal_io_read+0xf8>)
10007434:	4a06      	ldr	r2, [pc, #24]	@ (10007450 <metal_io_read+0xfc>)
10007436:	21fe      	movs	r1, #254	@ 0xfe
10007438:	4806      	ldr	r0, [pc, #24]	@ (10007454 <metal_io_read+0x100>)
1000743a:	f002 f85f 	bl	100094fc <__assert_func>
	return 0; /* quiet compiler */
}
1000743e:	4622      	mov	r2, r4
10007440:	462b      	mov	r3, r5
10007442:	4610      	mov	r0, r2
10007444:	4619      	mov	r1, r3
10007446:	3730      	adds	r7, #48	@ 0x30
10007448:	46bd      	mov	sp, r7
1000744a:	bdb0      	pop	{r4, r5, r7, pc}
1000744c:	1000b034 	.word	0x1000b034
10007450:	1000b2a4 	.word	0x1000b2a4
10007454:	1000b038 	.word	0x1000b038

10007458 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
10007458:	b580      	push	{r7, lr}
1000745a:	b082      	sub	sp, #8
1000745c:	af00      	add	r7, sp, #0
1000745e:	6078      	str	r0, [r7, #4]
	return malloc(size);
10007460:	6878      	ldr	r0, [r7, #4]
10007462:	f002 f86d 	bl	10009540 <malloc>
10007466:	4603      	mov	r3, r0
}
10007468:	4618      	mov	r0, r3
1000746a:	3708      	adds	r7, #8
1000746c:	46bd      	mov	sp, r7
1000746e:	bd80      	pop	{r7, pc}

10007470 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
10007470:	b580      	push	{r7, lr}
10007472:	b082      	sub	sp, #8
10007474:	af00      	add	r7, sp, #0
10007476:	6078      	str	r0, [r7, #4]
	free(ptr);
10007478:	6878      	ldr	r0, [r7, #4]
1000747a:	f002 f869 	bl	10009550 <free>
}
1000747e:	bf00      	nop
10007480:	3708      	adds	r7, #8
10007482:	46bd      	mov	sp, r7
10007484:	bd80      	pop	{r7, pc}

10007486 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
10007486:	b580      	push	{r7, lr}
10007488:	b084      	sub	sp, #16
1000748a:	af00      	add	r7, sp, #0
1000748c:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000748e:	687b      	ldr	r3, [r7, #4]
10007490:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
10007492:	3334      	adds	r3, #52	@ 0x34
10007494:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
10007496:	68f8      	ldr	r0, [r7, #12]
10007498:	f7ff ffde 	bl	10007458 <metal_allocate_memory>
1000749c:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000749e:	68bb      	ldr	r3, [r7, #8]
100074a0:	2b00      	cmp	r3, #0
100074a2:	d004      	beq.n	100074ae <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
100074a4:	68fa      	ldr	r2, [r7, #12]
100074a6:	2100      	movs	r1, #0
100074a8:	68b8      	ldr	r0, [r7, #8]
100074aa:	f002 fadf 	bl	10009a6c <memset>
	}

	return vqs;
100074ae:	68bb      	ldr	r3, [r7, #8]
}
100074b0:	4618      	mov	r0, r3
100074b2:	3710      	adds	r7, #16
100074b4:	46bd      	mov	sp, r7
100074b6:	bd80      	pop	{r7, pc}

100074b8 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
100074b8:	b580      	push	{r7, lr}
100074ba:	b086      	sub	sp, #24
100074bc:	af00      	add	r7, sp, #0
100074be:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
100074c0:	687b      	ldr	r3, [r7, #4]
100074c2:	891b      	ldrh	r3, [r3, #8]
100074c4:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
100074c6:	687b      	ldr	r3, [r7, #4]
100074c8:	681b      	ldr	r3, [r3, #0]
100074ca:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100074cc:	693b      	ldr	r3, [r7, #16]
100074ce:	3b10      	subs	r3, #16
100074d0:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
100074d2:	693b      	ldr	r3, [r7, #16]
100074d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100074d6:	697a      	ldr	r2, [r7, #20]
100074d8:	429a      	cmp	r2, r3
100074da:	d305      	bcc.n	100074e8 <rproc_virtio_virtqueue_notify+0x30>
100074dc:	4b0d      	ldr	r3, [pc, #52]	@ (10007514 <rproc_virtio_virtqueue_notify+0x5c>)
100074de:	4a0e      	ldr	r2, [pc, #56]	@ (10007518 <rproc_virtio_virtqueue_notify+0x60>)
100074e0:	211c      	movs	r1, #28
100074e2:	480e      	ldr	r0, [pc, #56]	@ (1000751c <rproc_virtio_virtqueue_notify+0x64>)
100074e4:	f002 f80a 	bl	100094fc <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
100074e8:	693b      	ldr	r3, [r7, #16]
100074ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100074ec:	697a      	ldr	r2, [r7, #20]
100074ee:	4613      	mov	r3, r2
100074f0:	005b      	lsls	r3, r3, #1
100074f2:	4413      	add	r3, r2
100074f4:	00db      	lsls	r3, r3, #3
100074f6:	440b      	add	r3, r1
100074f8:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
100074fa:	68fb      	ldr	r3, [r7, #12]
100074fc:	68db      	ldr	r3, [r3, #12]
100074fe:	68fa      	ldr	r2, [r7, #12]
10007500:	6810      	ldr	r0, [r2, #0]
10007502:	68ba      	ldr	r2, [r7, #8]
10007504:	6912      	ldr	r2, [r2, #16]
10007506:	4611      	mov	r1, r2
10007508:	4798      	blx	r3
}
1000750a:	bf00      	nop
1000750c:	3718      	adds	r7, #24
1000750e:	46bd      	mov	sp, r7
10007510:	bd80      	pop	{r7, pc}
10007512:	bf00      	nop
10007514:	1000b0b4 	.word	0x1000b0b4
10007518:	1000b284 	.word	0x1000b284
1000751c:	1000b0d0 	.word	0x1000b0d0

10007520 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
10007520:	b580      	push	{r7, lr}
10007522:	b086      	sub	sp, #24
10007524:	af00      	add	r7, sp, #0
10007526:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007528:	687b      	ldr	r3, [r7, #4]
1000752a:	3b10      	subs	r3, #16
1000752c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000752e:	697b      	ldr	r3, [r7, #20]
10007530:	685b      	ldr	r3, [r3, #4]
10007532:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10007534:	697b      	ldr	r3, [r7, #20]
10007536:	689b      	ldr	r3, [r3, #8]
10007538:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000753a:	693b      	ldr	r3, [r7, #16]
1000753c:	3318      	adds	r3, #24
1000753e:	4619      	mov	r1, r3
10007540:	68f8      	ldr	r0, [r7, #12]
10007542:	f7ff feee 	bl	10007322 <metal_io_virt_to_offset>
10007546:	4601      	mov	r1, r0
10007548:	2301      	movs	r3, #1
1000754a:	2205      	movs	r2, #5
1000754c:	68f8      	ldr	r0, [r7, #12]
1000754e:	f7ff ff01 	bl	10007354 <metal_io_read>
10007552:	4602      	mov	r2, r0
10007554:	460b      	mov	r3, r1
10007556:	4613      	mov	r3, r2
10007558:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000755a:	7afb      	ldrb	r3, [r7, #11]
}
1000755c:	4618      	mov	r0, r3
1000755e:	3718      	adds	r7, #24
10007560:	46bd      	mov	sp, r7
10007562:	bd80      	pop	{r7, pc}

10007564 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
10007564:	b580      	push	{r7, lr}
10007566:	b086      	sub	sp, #24
10007568:	af00      	add	r7, sp, #0
1000756a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000756c:	687b      	ldr	r3, [r7, #4]
1000756e:	3b10      	subs	r3, #16
10007570:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
10007572:	697b      	ldr	r3, [r7, #20]
10007574:	685b      	ldr	r3, [r3, #4]
10007576:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10007578:	697b      	ldr	r3, [r7, #20]
1000757a:	689b      	ldr	r3, [r3, #8]
1000757c:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
1000757e:	693b      	ldr	r3, [r7, #16]
10007580:	330c      	adds	r3, #12
10007582:	4619      	mov	r1, r3
10007584:	68f8      	ldr	r0, [r7, #12]
10007586:	f7ff fecc 	bl	10007322 <metal_io_virt_to_offset>
1000758a:	4601      	mov	r1, r0
1000758c:	2304      	movs	r3, #4
1000758e:	2205      	movs	r2, #5
10007590:	68f8      	ldr	r0, [r7, #12]
10007592:	f7ff fedf 	bl	10007354 <metal_io_read>
10007596:	4602      	mov	r2, r0
10007598:	460b      	mov	r3, r1
1000759a:	4613      	mov	r3, r2
1000759c:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000759e:	68bb      	ldr	r3, [r7, #8]
}
100075a0:	4618      	mov	r0, r3
100075a2:	3718      	adds	r7, #24
100075a4:	46bd      	mov	sp, r7
100075a6:	bd80      	pop	{r7, pc}

100075a8 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
100075a8:	b580      	push	{r7, lr}
100075aa:	b088      	sub	sp, #32
100075ac:	af00      	add	r7, sp, #0
100075ae:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100075b0:	687b      	ldr	r3, [r7, #4]
100075b2:	3b10      	subs	r3, #16
100075b4:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
100075b6:	69fb      	ldr	r3, [r7, #28]
100075b8:	685b      	ldr	r3, [r3, #4]
100075ba:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
100075bc:	69fb      	ldr	r3, [r7, #28]
100075be:	689b      	ldr	r3, [r3, #8]
100075c0:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
100075c2:	69bb      	ldr	r3, [r7, #24]
100075c4:	3310      	adds	r3, #16
100075c6:	4619      	mov	r1, r3
100075c8:	6978      	ldr	r0, [r7, #20]
100075ca:	f7ff feaa 	bl	10007322 <metal_io_virt_to_offset>
100075ce:	4601      	mov	r1, r0
100075d0:	2304      	movs	r3, #4
100075d2:	2205      	movs	r2, #5
100075d4:	6978      	ldr	r0, [r7, #20]
100075d6:	f7ff febd 	bl	10007354 <metal_io_read>
100075da:	4602      	mov	r2, r0
100075dc:	460b      	mov	r3, r1
100075de:	4613      	mov	r3, r2
100075e0:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
100075e2:	6878      	ldr	r0, [r7, #4]
100075e4:	f7ff ffbe 	bl	10007564 <rproc_virtio_get_dfeatures>
100075e8:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
100075ea:	68fa      	ldr	r2, [r7, #12]
100075ec:	693b      	ldr	r3, [r7, #16]
100075ee:	4013      	ands	r3, r2
}
100075f0:	4618      	mov	r0, r3
100075f2:	3720      	adds	r7, #32
100075f4:	46bd      	mov	sp, r7
100075f6:	bd80      	pop	{r7, pc}

100075f8 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
100075f8:	b580      	push	{r7, lr}
100075fa:	b088      	sub	sp, #32
100075fc:	af00      	add	r7, sp, #0
100075fe:	60f8      	str	r0, [r7, #12]
10007600:	60b9      	str	r1, [r7, #8]
10007602:	607a      	str	r2, [r7, #4]
10007604:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007606:	68fb      	ldr	r3, [r7, #12]
10007608:	3b10      	subs	r3, #16
1000760a:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000760c:	69fb      	ldr	r3, [r7, #28]
1000760e:	685b      	ldr	r3, [r3, #4]
10007610:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
10007612:	68fb      	ldr	r3, [r7, #12]
10007614:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10007616:	4613      	mov	r3, r2
10007618:	009b      	lsls	r3, r3, #2
1000761a:	4413      	add	r3, r2
1000761c:	009b      	lsls	r3, r3, #2
1000761e:	3318      	adds	r3, #24
10007620:	69ba      	ldr	r2, [r7, #24]
10007622:	4413      	add	r3, r2
10007624:	3304      	adds	r3, #4
10007626:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
10007628:	69fb      	ldr	r3, [r7, #28]
1000762a:	689b      	ldr	r3, [r3, #8]
1000762c:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000762e:	683a      	ldr	r2, [r7, #0]
10007630:	68bb      	ldr	r3, [r7, #8]
10007632:	441a      	add	r2, r3
10007634:	69bb      	ldr	r3, [r7, #24]
10007636:	695b      	ldr	r3, [r3, #20]
10007638:	429a      	cmp	r2, r3
1000763a:	d80c      	bhi.n	10007656 <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
1000763c:	697a      	ldr	r2, [r7, #20]
1000763e:	68bb      	ldr	r3, [r7, #8]
10007640:	4413      	add	r3, r2
		metal_io_block_read(io,
10007642:	4619      	mov	r1, r3
10007644:	6938      	ldr	r0, [r7, #16]
10007646:	f7ff fe6c 	bl	10007322 <metal_io_virt_to_offset>
1000764a:	4601      	mov	r1, r0
1000764c:	683b      	ldr	r3, [r7, #0]
1000764e:	687a      	ldr	r2, [r7, #4]
10007650:	6938      	ldr	r0, [r7, #16]
10007652:	f7ff fd54 	bl	100070fe <metal_io_block_read>
				dst, length);
}
10007656:	bf00      	nop
10007658:	3720      	adds	r7, #32
1000765a:	46bd      	mov	sp, r7
1000765c:	bd80      	pop	{r7, pc}
	...

10007660 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
10007660:	b580      	push	{r7, lr}
10007662:	b08e      	sub	sp, #56	@ 0x38
10007664:	af00      	add	r7, sp, #0
10007666:	60f8      	str	r0, [r7, #12]
10007668:	60b9      	str	r1, [r7, #8]
1000766a:	607a      	str	r2, [r7, #4]
1000766c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000766e:	687b      	ldr	r3, [r7, #4]
10007670:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
10007672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007674:	7e5b      	ldrb	r3, [r3, #25]
10007676:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
10007678:	2048      	movs	r0, #72	@ 0x48
1000767a:	f7ff feed 	bl	10007458 <metal_allocate_memory>
1000767e:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
10007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007682:	2b00      	cmp	r3, #0
10007684:	d101      	bne.n	1000768a <rproc_virtio_create_vdev+0x2a>
		return NULL;
10007686:	2300      	movs	r3, #0
10007688:	e092      	b.n	100077b0 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000768a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000768c:	4613      	mov	r3, r2
1000768e:	005b      	lsls	r3, r3, #1
10007690:	4413      	add	r3, r2
10007692:	00db      	lsls	r3, r3, #3
10007694:	4618      	mov	r0, r3
10007696:	f7ff fedf 	bl	10007458 <metal_allocate_memory>
1000769a:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
1000769c:	6a3b      	ldr	r3, [r7, #32]
1000769e:	2b00      	cmp	r3, #0
100076a0:	f000 8081 	beq.w	100077a6 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
100076a4:	2248      	movs	r2, #72	@ 0x48
100076a6:	2100      	movs	r1, #0
100076a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100076aa:	f002 f9df 	bl	10009a6c <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
100076ae:	2218      	movs	r2, #24
100076b0:	2100      	movs	r1, #0
100076b2:	6a38      	ldr	r0, [r7, #32]
100076b4:	f002 f9da 	bl	10009a6c <memset>
	vdev = &rpvdev->vdev;
100076b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100076ba:	3310      	adds	r3, #16
100076bc:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
100076be:	2300      	movs	r3, #0
100076c0:	637b      	str	r3, [r7, #52]	@ 0x34
100076c2:	e025      	b.n	10007710 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
100076c4:	2300      	movs	r3, #0
100076c6:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
100076c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100076ca:	4613      	mov	r3, r2
100076cc:	009b      	lsls	r3, r3, #2
100076ce:	4413      	add	r3, r2
100076d0:	009b      	lsls	r3, r3, #2
100076d2:	3318      	adds	r3, #24
100076d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100076d6:	4413      	add	r3, r2
100076d8:	3304      	adds	r3, #4
100076da:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
100076dc:	68fb      	ldr	r3, [r7, #12]
100076de:	2b00      	cmp	r3, #0
100076e0:	d102      	bne.n	100076e8 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
100076e2:	69bb      	ldr	r3, [r7, #24]
100076e4:	689b      	ldr	r3, [r3, #8]
100076e6:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
100076e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100076ea:	f7ff fecc 	bl	10007486 <virtqueue_allocate>
100076ee:	6178      	str	r0, [r7, #20]
		if (!vq)
100076f0:	697b      	ldr	r3, [r7, #20]
100076f2:	2b00      	cmp	r3, #0
100076f4:	d031      	beq.n	1000775a <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
100076f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100076f8:	4613      	mov	r3, r2
100076fa:	005b      	lsls	r3, r3, #1
100076fc:	4413      	add	r3, r2
100076fe:	00db      	lsls	r3, r3, #3
10007700:	461a      	mov	r2, r3
10007702:	6a3b      	ldr	r3, [r7, #32]
10007704:	4413      	add	r3, r2
10007706:	697a      	ldr	r2, [r7, #20]
10007708:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
1000770a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000770c:	3301      	adds	r3, #1
1000770e:	637b      	str	r3, [r7, #52]	@ 0x34
10007710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007714:	429a      	cmp	r2, r3
10007716:	d3d5      	bcc.n	100076c4 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
10007718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000771a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1000771c:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10007722:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
10007724:	69fb      	ldr	r3, [r7, #28]
10007726:	6a3a      	ldr	r2, [r7, #32]
10007728:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000772c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000772e:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
10007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007732:	683a      	ldr	r2, [r7, #0]
10007734:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
10007736:	69fb      	ldr	r3, [r7, #28]
10007738:	68ba      	ldr	r2, [r7, #8]
1000773a:	601a      	str	r2, [r3, #0]
	vdev->role = role;
1000773c:	69fb      	ldr	r3, [r7, #28]
1000773e:	68fa      	ldr	r2, [r7, #12]
10007740:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
10007742:	69fb      	ldr	r3, [r7, #28]
10007744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10007746:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
10007748:	69fb      	ldr	r3, [r7, #28]
1000774a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000774c:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000774e:	69fb      	ldr	r3, [r7, #28]
10007750:	4a19      	ldr	r2, [pc, #100]	@ (100077b8 <rproc_virtio_create_vdev+0x158>)
10007752:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
10007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007756:	3310      	adds	r3, #16
10007758:	e02a      	b.n	100077b0 <rproc_virtio_create_vdev+0x150>
			goto err1;
1000775a:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
1000775c:	2300      	movs	r3, #0
1000775e:	637b      	str	r3, [r7, #52]	@ 0x34
10007760:	e019      	b.n	10007796 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
10007762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007764:	4613      	mov	r3, r2
10007766:	005b      	lsls	r3, r3, #1
10007768:	4413      	add	r3, r2
1000776a:	00db      	lsls	r3, r3, #3
1000776c:	461a      	mov	r2, r3
1000776e:	6a3b      	ldr	r3, [r7, #32]
10007770:	4413      	add	r3, r2
10007772:	681b      	ldr	r3, [r3, #0]
10007774:	2b00      	cmp	r3, #0
10007776:	d00b      	beq.n	10007790 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
10007778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000777a:	4613      	mov	r3, r2
1000777c:	005b      	lsls	r3, r3, #1
1000777e:	4413      	add	r3, r2
10007780:	00db      	lsls	r3, r3, #3
10007782:	461a      	mov	r2, r3
10007784:	6a3b      	ldr	r3, [r7, #32]
10007786:	4413      	add	r3, r2
10007788:	681b      	ldr	r3, [r3, #0]
1000778a:	4618      	mov	r0, r3
1000778c:	f7ff fe70 	bl	10007470 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
10007790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007792:	3301      	adds	r3, #1
10007794:	637b      	str	r3, [r7, #52]	@ 0x34
10007796:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10007798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000779a:	429a      	cmp	r2, r3
1000779c:	d3e1      	bcc.n	10007762 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000779e:	6a38      	ldr	r0, [r7, #32]
100077a0:	f7ff fe66 	bl	10007470 <metal_free_memory>
100077a4:	e000      	b.n	100077a8 <rproc_virtio_create_vdev+0x148>
		goto err0;
100077a6:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
100077a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
100077aa:	f7ff fe61 	bl	10007470 <metal_free_memory>
	return NULL;
100077ae:	2300      	movs	r3, #0
}
100077b0:	4618      	mov	r0, r3
100077b2:	3738      	adds	r7, #56	@ 0x38
100077b4:	46bd      	mov	sp, r7
100077b6:	bd80      	pop	{r7, pc}
100077b8:	1000b260 	.word	0x1000b260

100077bc <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
100077bc:	b480      	push	{r7}
100077be:	b087      	sub	sp, #28
100077c0:	af00      	add	r7, sp, #0
100077c2:	60f8      	str	r0, [r7, #12]
100077c4:	60b9      	str	r1, [r7, #8]
100077c6:	607a      	str	r2, [r7, #4]
100077c8:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
100077ca:	68fb      	ldr	r3, [r7, #12]
100077cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100077ce:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
100077d0:	68ba      	ldr	r2, [r7, #8]
100077d2:	697b      	ldr	r3, [r7, #20]
100077d4:	429a      	cmp	r2, r3
100077d6:	d302      	bcc.n	100077de <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
100077d8:	f06f 0301 	mvn.w	r3, #1
100077dc:	e019      	b.n	10007812 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
100077de:	68fb      	ldr	r3, [r7, #12]
100077e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100077e2:	68ba      	ldr	r2, [r7, #8]
100077e4:	4613      	mov	r3, r2
100077e6:	005b      	lsls	r3, r3, #1
100077e8:	4413      	add	r3, r2
100077ea:	00db      	lsls	r3, r3, #3
100077ec:	440b      	add	r3, r1
100077ee:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
100077f0:	693b      	ldr	r3, [r7, #16]
100077f2:	6a3a      	ldr	r2, [r7, #32]
100077f4:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
100077f6:	693b      	ldr	r3, [r7, #16]
100077f8:	687a      	ldr	r2, [r7, #4]
100077fa:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
100077fc:	693b      	ldr	r3, [r7, #16]
100077fe:	683a      	ldr	r2, [r7, #0]
10007800:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
10007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007804:	b29a      	uxth	r2, r3
10007806:	693b      	ldr	r3, [r7, #16]
10007808:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
1000780a:	693b      	ldr	r3, [r7, #16]
1000780c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000780e:	609a      	str	r2, [r3, #8]

	return 0;
10007810:	2300      	movs	r3, #0
}
10007812:	4618      	mov	r0, r3
10007814:	371c      	adds	r7, #28
10007816:	46bd      	mov	sp, r7
10007818:	f85d 7b04 	ldr.w	r7, [sp], #4
1000781c:	4770      	bx	lr

1000781e <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
1000781e:	b580      	push	{r7, lr}
10007820:	b086      	sub	sp, #24
10007822:	af00      	add	r7, sp, #0
10007824:	6078      	str	r0, [r7, #4]
10007826:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
10007828:	687b      	ldr	r3, [r7, #4]
1000782a:	2b00      	cmp	r3, #0
1000782c:	d102      	bne.n	10007834 <rproc_virtio_notified+0x16>
		return -RPROC_EINVAL;
1000782e:	f06f 0301 	mvn.w	r3, #1
10007832:	e02c      	b.n	1000788e <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
10007834:	687b      	ldr	r3, [r7, #4]
10007836:	681b      	ldr	r3, [r3, #0]
10007838:	683a      	ldr	r2, [r7, #0]
1000783a:	429a      	cmp	r2, r3
1000783c:	d101      	bne.n	10007842 <rproc_virtio_notified+0x24>
		return 0;
1000783e:	2300      	movs	r3, #0
10007840:	e025      	b.n	1000788e <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
10007842:	687b      	ldr	r3, [r7, #4]
10007844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007846:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
10007848:	2300      	movs	r3, #0
1000784a:	617b      	str	r3, [r7, #20]
1000784c:	e01a      	b.n	10007884 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
1000784e:	687b      	ldr	r3, [r7, #4]
10007850:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10007852:	697a      	ldr	r2, [r7, #20]
10007854:	4613      	mov	r3, r2
10007856:	005b      	lsls	r3, r3, #1
10007858:	4413      	add	r3, r2
1000785a:	00db      	lsls	r3, r3, #3
1000785c:	440b      	add	r3, r1
1000785e:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
10007860:	68fb      	ldr	r3, [r7, #12]
10007862:	691b      	ldr	r3, [r3, #16]
10007864:	683a      	ldr	r2, [r7, #0]
10007866:	429a      	cmp	r2, r3
10007868:	d003      	beq.n	10007872 <rproc_virtio_notified+0x54>
1000786a:	683b      	ldr	r3, [r7, #0]
1000786c:	f1b3 3fff 	cmp.w	r3, #4294967295
10007870:	d105      	bne.n	1000787e <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
10007872:	68fb      	ldr	r3, [r7, #12]
10007874:	681b      	ldr	r3, [r3, #0]
10007876:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
10007878:	68b8      	ldr	r0, [r7, #8]
1000787a:	f001 fb95 	bl	10008fa8 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
1000787e:	697b      	ldr	r3, [r7, #20]
10007880:	3301      	adds	r3, #1
10007882:	617b      	str	r3, [r7, #20]
10007884:	697a      	ldr	r2, [r7, #20]
10007886:	693b      	ldr	r3, [r7, #16]
10007888:	429a      	cmp	r2, r3
1000788a:	d3e0      	bcc.n	1000784e <rproc_virtio_notified+0x30>
		}
	}
	return 0;
1000788c:	2300      	movs	r3, #0
}
1000788e:	4618      	mov	r0, r3
10007890:	3718      	adds	r7, #24
10007892:	46bd      	mov	sp, r7
10007894:	bd80      	pop	{r7, pc}

10007896 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
10007896:	b580      	push	{r7, lr}
10007898:	b084      	sub	sp, #16
1000789a:	af00      	add	r7, sp, #0
1000789c:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
1000789e:	687b      	ldr	r3, [r7, #4]
100078a0:	699b      	ldr	r3, [r3, #24]
100078a2:	2b00      	cmp	r3, #0
100078a4:	d00a      	beq.n	100078bc <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
100078a6:	6878      	ldr	r0, [r7, #4]
100078a8:	f7ff fe3a 	bl	10007520 <rproc_virtio_get_status>
100078ac:	4603      	mov	r3, r0
100078ae:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
100078b0:	7bfb      	ldrb	r3, [r7, #15]
100078b2:	f003 0304 	and.w	r3, r3, #4
100078b6:	2b00      	cmp	r3, #0
100078b8:	d102      	bne.n	100078c0 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
100078ba:	e7f4      	b.n	100078a6 <rproc_virtio_wait_remote_ready+0x10>
		return;
100078bc:	bf00      	nop
100078be:	e000      	b.n	100078c2 <rproc_virtio_wait_remote_ready+0x2c>
			return;
100078c0:	bf00      	nop
		metal_cpu_yield();
	}
}
100078c2:	3710      	adds	r7, #16
100078c4:	46bd      	mov	sp, r7
100078c6:	bd80      	pop	{r7, pc}

100078c8 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
100078c8:	b490      	push	{r4, r7}
100078ca:	b086      	sub	sp, #24
100078cc:	af00      	add	r7, sp, #0
100078ce:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
100078d0:	2300      	movs	r3, #0
100078d2:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
100078d4:	bf00      	nop
100078d6:	687b      	ldr	r3, [r7, #4]
100078d8:	617b      	str	r3, [r7, #20]
100078da:	2301      	movs	r3, #1
100078dc:	60fb      	str	r3, [r7, #12]
100078de:	68fb      	ldr	r3, [r7, #12]
100078e0:	461c      	mov	r4, r3
100078e2:	697a      	ldr	r2, [r7, #20]
100078e4:	f107 0310 	add.w	r3, r7, #16
100078e8:	6818      	ldr	r0, [r3, #0]
100078ea:	f3bf 8f5b 	dmb	ish
100078ee:	e852 1f00 	ldrex	r1, [r2]
100078f2:	4281      	cmp	r1, r0
100078f4:	d103      	bne.n	100078fe <__metal_mutex_acquire+0x36>
100078f6:	e842 4c00 	strex	ip, r4, [r2]
100078fa:	f1bc 0f00 	cmp.w	ip, #0
100078fe:	f3bf 8f5b 	dmb	ish
10007902:	bf0c      	ite	eq
10007904:	2201      	moveq	r2, #1
10007906:	2200      	movne	r2, #0
10007908:	2a00      	cmp	r2, #0
1000790a:	d100      	bne.n	1000790e <__metal_mutex_acquire+0x46>
1000790c:	6019      	str	r1, [r3, #0]
1000790e:	4613      	mov	r3, r2
10007910:	f083 0301 	eor.w	r3, r3, #1
10007914:	b2db      	uxtb	r3, r3
10007916:	2b00      	cmp	r3, #0
10007918:	d1dd      	bne.n	100078d6 <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000791a:	bf00      	nop
1000791c:	bf00      	nop
1000791e:	3718      	adds	r7, #24
10007920:	46bd      	mov	sp, r7
10007922:	bc90      	pop	{r4, r7}
10007924:	4770      	bx	lr

10007926 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
10007926:	b480      	push	{r7}
10007928:	b085      	sub	sp, #20
1000792a:	af00      	add	r7, sp, #0
1000792c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000792e:	687b      	ldr	r3, [r7, #4]
10007930:	60fb      	str	r3, [r7, #12]
10007932:	2300      	movs	r3, #0
10007934:	60bb      	str	r3, [r7, #8]
10007936:	68bb      	ldr	r3, [r7, #8]
10007938:	461a      	mov	r2, r3
1000793a:	68fb      	ldr	r3, [r7, #12]
1000793c:	f3bf 8f5b 	dmb	ish
10007940:	601a      	str	r2, [r3, #0]
10007942:	f3bf 8f5b 	dmb	ish
}
10007946:	bf00      	nop
10007948:	3714      	adds	r7, #20
1000794a:	46bd      	mov	sp, r7
1000794c:	f85d 7b04 	ldr.w	r7, [sp], #4
10007950:	4770      	bx	lr

10007952 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
10007952:	b580      	push	{r7, lr}
10007954:	b082      	sub	sp, #8
10007956:	af00      	add	r7, sp, #0
10007958:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000795a:	6878      	ldr	r0, [r7, #4]
1000795c:	f7ff ffb4 	bl	100078c8 <__metal_mutex_acquire>
}
10007960:	bf00      	nop
10007962:	3708      	adds	r7, #8
10007964:	46bd      	mov	sp, r7
10007966:	bd80      	pop	{r7, pc}

10007968 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
10007968:	b580      	push	{r7, lr}
1000796a:	b082      	sub	sp, #8
1000796c:	af00      	add	r7, sp, #0
1000796e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10007970:	6878      	ldr	r0, [r7, #4]
10007972:	f7ff ffd8 	bl	10007926 <__metal_mutex_release>
}
10007976:	bf00      	nop
10007978:	3708      	adds	r7, #8
1000797a:	46bd      	mov	sp, r7
1000797c:	bd80      	pop	{r7, pc}

1000797e <metal_list_add_before>:
{
1000797e:	b480      	push	{r7}
10007980:	b083      	sub	sp, #12
10007982:	af00      	add	r7, sp, #0
10007984:	6078      	str	r0, [r7, #4]
10007986:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10007988:	687b      	ldr	r3, [r7, #4]
1000798a:	685a      	ldr	r2, [r3, #4]
1000798c:	683b      	ldr	r3, [r7, #0]
1000798e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10007990:	683b      	ldr	r3, [r7, #0]
10007992:	687a      	ldr	r2, [r7, #4]
10007994:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10007996:	683b      	ldr	r3, [r7, #0]
10007998:	681b      	ldr	r3, [r3, #0]
1000799a:	683a      	ldr	r2, [r7, #0]
1000799c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000799e:	683b      	ldr	r3, [r7, #0]
100079a0:	685b      	ldr	r3, [r3, #4]
100079a2:	683a      	ldr	r2, [r7, #0]
100079a4:	601a      	str	r2, [r3, #0]
}
100079a6:	bf00      	nop
100079a8:	370c      	adds	r7, #12
100079aa:	46bd      	mov	sp, r7
100079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
100079b0:	4770      	bx	lr

100079b2 <metal_list_add_tail>:
{
100079b2:	b580      	push	{r7, lr}
100079b4:	b082      	sub	sp, #8
100079b6:	af00      	add	r7, sp, #0
100079b8:	6078      	str	r0, [r7, #4]
100079ba:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
100079bc:	6839      	ldr	r1, [r7, #0]
100079be:	6878      	ldr	r0, [r7, #4]
100079c0:	f7ff ffdd 	bl	1000797e <metal_list_add_before>
}
100079c4:	bf00      	nop
100079c6:	3708      	adds	r7, #8
100079c8:	46bd      	mov	sp, r7
100079ca:	bd80      	pop	{r7, pc}

100079cc <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
100079cc:	b480      	push	{r7}
100079ce:	b083      	sub	sp, #12
100079d0:	af00      	add	r7, sp, #0
100079d2:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
100079d4:	687b      	ldr	r3, [r7, #4]
100079d6:	681b      	ldr	r3, [r3, #0]
100079d8:	687a      	ldr	r2, [r7, #4]
100079da:	6852      	ldr	r2, [r2, #4]
100079dc:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
100079de:	687b      	ldr	r3, [r7, #4]
100079e0:	685b      	ldr	r3, [r3, #4]
100079e2:	687a      	ldr	r2, [r7, #4]
100079e4:	6812      	ldr	r2, [r2, #0]
100079e6:	601a      	str	r2, [r3, #0]
	node->prev = node;
100079e8:	687b      	ldr	r3, [r7, #4]
100079ea:	687a      	ldr	r2, [r7, #4]
100079ec:	605a      	str	r2, [r3, #4]
	node->next = node;
100079ee:	687b      	ldr	r3, [r7, #4]
100079f0:	687a      	ldr	r2, [r7, #4]
100079f2:	601a      	str	r2, [r3, #0]
}
100079f4:	bf00      	nop
100079f6:	370c      	adds	r7, #12
100079f8:	46bd      	mov	sp, r7
100079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100079fe:	4770      	bx	lr

10007a00 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
10007a00:	b480      	push	{r7}
10007a02:	b083      	sub	sp, #12
10007a04:	af00      	add	r7, sp, #0
10007a06:	6078      	str	r0, [r7, #4]
10007a08:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10007a0a:	683b      	ldr	r3, [r7, #0]
10007a0c:	095b      	lsrs	r3, r3, #5
10007a0e:	009a      	lsls	r2, r3, #2
10007a10:	6879      	ldr	r1, [r7, #4]
10007a12:	440a      	add	r2, r1
10007a14:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10007a16:	683a      	ldr	r2, [r7, #0]
10007a18:	f002 021f 	and.w	r2, r2, #31
10007a1c:	2001      	movs	r0, #1
10007a1e:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10007a22:	009b      	lsls	r3, r3, #2
10007a24:	6878      	ldr	r0, [r7, #4]
10007a26:	4403      	add	r3, r0
10007a28:	430a      	orrs	r2, r1
10007a2a:	601a      	str	r2, [r3, #0]
}
10007a2c:	bf00      	nop
10007a2e:	370c      	adds	r7, #12
10007a30:	46bd      	mov	sp, r7
10007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
10007a36:	4770      	bx	lr

10007a38 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
10007a38:	b480      	push	{r7}
10007a3a:	b083      	sub	sp, #12
10007a3c:	af00      	add	r7, sp, #0
10007a3e:	6078      	str	r0, [r7, #4]
10007a40:	6039      	str	r1, [r7, #0]
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
10007a42:	683b      	ldr	r3, [r7, #0]
10007a44:	095b      	lsrs	r3, r3, #5
10007a46:	009b      	lsls	r3, r3, #2
10007a48:	687a      	ldr	r2, [r7, #4]
10007a4a:	4413      	add	r3, r2
10007a4c:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
10007a4e:	683b      	ldr	r3, [r7, #0]
10007a50:	f003 031f 	and.w	r3, r3, #31
10007a54:	fa22 f303 	lsr.w	r3, r2, r3
10007a58:	f003 0301 	and.w	r3, r3, #1
10007a5c:	2b00      	cmp	r3, #0
10007a5e:	bf14      	ite	ne
10007a60:	2301      	movne	r3, #1
10007a62:	2300      	moveq	r3, #0
10007a64:	b2db      	uxtb	r3, r3
}
10007a66:	4618      	mov	r0, r3
10007a68:	370c      	adds	r7, #12
10007a6a:	46bd      	mov	sp, r7
10007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
10007a70:	4770      	bx	lr

10007a72 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
10007a72:	b480      	push	{r7}
10007a74:	b083      	sub	sp, #12
10007a76:	af00      	add	r7, sp, #0
10007a78:	6078      	str	r0, [r7, #4]
10007a7a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10007a7c:	683b      	ldr	r3, [r7, #0]
10007a7e:	095b      	lsrs	r3, r3, #5
10007a80:	009a      	lsls	r2, r3, #2
10007a82:	6879      	ldr	r1, [r7, #4]
10007a84:	440a      	add	r2, r1
10007a86:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10007a88:	683a      	ldr	r2, [r7, #0]
10007a8a:	f002 021f 	and.w	r2, r2, #31
10007a8e:	2001      	movs	r0, #1
10007a90:	fa00 f202 	lsl.w	r2, r0, r2
10007a94:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10007a96:	009b      	lsls	r3, r3, #2
10007a98:	6878      	ldr	r0, [r7, #4]
10007a9a:	4403      	add	r3, r0
10007a9c:	400a      	ands	r2, r1
10007a9e:	601a      	str	r2, [r3, #0]
}
10007aa0:	bf00      	nop
10007aa2:	370c      	adds	r7, #12
10007aa4:	46bd      	mov	sp, r7
10007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
10007aaa:	4770      	bx	lr

10007aac <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
10007aac:	b580      	push	{r7, lr}
10007aae:	b082      	sub	sp, #8
10007ab0:	af00      	add	r7, sp, #0
10007ab2:	6078      	str	r0, [r7, #4]
10007ab4:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
10007ab6:	6839      	ldr	r1, [r7, #0]
10007ab8:	6878      	ldr	r0, [r7, #4]
10007aba:	f7ff ffbd 	bl	10007a38 <metal_bitmap_is_bit_set>
10007abe:	4603      	mov	r3, r0
10007ac0:	2b00      	cmp	r3, #0
10007ac2:	bf0c      	ite	eq
10007ac4:	2301      	moveq	r3, #1
10007ac6:	2300      	movne	r3, #0
10007ac8:	b2db      	uxtb	r3, r3
}
10007aca:	4618      	mov	r0, r3
10007acc:	3708      	adds	r7, #8
10007ace:	46bd      	mov	sp, r7
10007ad0:	bd80      	pop	{r7, pc}

10007ad2 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
10007ad2:	b580      	push	{r7, lr}
10007ad4:	b086      	sub	sp, #24
10007ad6:	af00      	add	r7, sp, #0
10007ad8:	60f8      	str	r0, [r7, #12]
10007ada:	60b9      	str	r1, [r7, #8]
10007adc:	607a      	str	r2, [r7, #4]
	unsigned int bit;

	for (bit = start;
10007ade:	68bb      	ldr	r3, [r7, #8]
10007ae0:	617b      	str	r3, [r7, #20]
10007ae2:	e002      	b.n	10007aea <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
10007ae4:	697b      	ldr	r3, [r7, #20]
10007ae6:	3301      	adds	r3, #1
10007ae8:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
10007aea:	697a      	ldr	r2, [r7, #20]
10007aec:	687b      	ldr	r3, [r7, #4]
10007aee:	429a      	cmp	r2, r3
10007af0:	d207      	bcs.n	10007b02 <metal_bitmap_next_clear_bit+0x30>
10007af2:	697b      	ldr	r3, [r7, #20]
10007af4:	4619      	mov	r1, r3
10007af6:	68f8      	ldr	r0, [r7, #12]
10007af8:	f7ff ffd8 	bl	10007aac <metal_bitmap_is_bit_clear>
10007afc:	4603      	mov	r3, r0
10007afe:	2b00      	cmp	r3, #0
10007b00:	d0f0      	beq.n	10007ae4 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
10007b02:	697b      	ldr	r3, [r7, #20]
}
10007b04:	4618      	mov	r0, r3
10007b06:	3718      	adds	r7, #24
10007b08:	46bd      	mov	sp, r7
10007b0a:	bd80      	pop	{r7, pc}

10007b0c <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
10007b0c:	b580      	push	{r7, lr}
10007b0e:	b084      	sub	sp, #16
10007b10:	af00      	add	r7, sp, #0
10007b12:	60f8      	str	r0, [r7, #12]
10007b14:	60b9      	str	r1, [r7, #8]
10007b16:	607a      	str	r2, [r7, #4]
10007b18:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10007b1a:	68f8      	ldr	r0, [r7, #12]
10007b1c:	68bb      	ldr	r3, [r7, #8]
10007b1e:	2b00      	cmp	r3, #0
10007b20:	d001      	beq.n	10007b26 <rpmsg_initialize_ept+0x1a>
10007b22:	68bb      	ldr	r3, [r7, #8]
10007b24:	e000      	b.n	10007b28 <rpmsg_initialize_ept+0x1c>
10007b26:	4b0a      	ldr	r3, [pc, #40]	@ (10007b50 <rpmsg_initialize_ept+0x44>)
10007b28:	2220      	movs	r2, #32
10007b2a:	4619      	mov	r1, r3
10007b2c:	f001 ffc5 	bl	10009aba <strncpy>
	ept->addr = src;
10007b30:	68fb      	ldr	r3, [r7, #12]
10007b32:	687a      	ldr	r2, [r7, #4]
10007b34:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
10007b36:	68fb      	ldr	r3, [r7, #12]
10007b38:	683a      	ldr	r2, [r7, #0]
10007b3a:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
10007b3c:	68fb      	ldr	r3, [r7, #12]
10007b3e:	69ba      	ldr	r2, [r7, #24]
10007b40:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10007b42:	68fb      	ldr	r3, [r7, #12]
10007b44:	69fa      	ldr	r2, [r7, #28]
10007b46:	631a      	str	r2, [r3, #48]	@ 0x30
}
10007b48:	bf00      	nop
10007b4a:	3710      	adds	r7, #16
10007b4c:	46bd      	mov	sp, r7
10007b4e:	bd80      	pop	{r7, pc}
10007b50:	1000b158 	.word	0x1000b158

10007b54 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
10007b54:	b580      	push	{r7, lr}
10007b56:	b084      	sub	sp, #16
10007b58:	af00      	add	r7, sp, #0
10007b5a:	6078      	str	r0, [r7, #4]
10007b5c:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
10007b5e:	f04f 33ff 	mov.w	r3, #4294967295
10007b62:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
10007b64:	683b      	ldr	r3, [r7, #0]
10007b66:	461a      	mov	r2, r3
10007b68:	2100      	movs	r1, #0
10007b6a:	6878      	ldr	r0, [r7, #4]
10007b6c:	f7ff ffb1 	bl	10007ad2 <metal_bitmap_next_clear_bit>
10007b70:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
10007b72:	683b      	ldr	r3, [r7, #0]
10007b74:	68ba      	ldr	r2, [r7, #8]
10007b76:	429a      	cmp	r2, r3
10007b78:	d208      	bcs.n	10007b8c <rpmsg_get_address+0x38>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
10007b7a:	68bb      	ldr	r3, [r7, #8]
10007b7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
10007b80:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
10007b82:	68bb      	ldr	r3, [r7, #8]
10007b84:	4619      	mov	r1, r3
10007b86:	6878      	ldr	r0, [r7, #4]
10007b88:	f7ff ff3a 	bl	10007a00 <metal_bitmap_set_bit>
	}

	return addr;
10007b8c:	68fb      	ldr	r3, [r7, #12]
}
10007b8e:	4618      	mov	r0, r3
10007b90:	3710      	adds	r7, #16
10007b92:	46bd      	mov	sp, r7
10007b94:	bd80      	pop	{r7, pc}

10007b96 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
10007b96:	b580      	push	{r7, lr}
10007b98:	b084      	sub	sp, #16
10007b9a:	af00      	add	r7, sp, #0
10007b9c:	60f8      	str	r0, [r7, #12]
10007b9e:	60b9      	str	r1, [r7, #8]
10007ba0:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007ba2:	687b      	ldr	r3, [r7, #4]
10007ba4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10007ba8:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10007baa:	687b      	ldr	r3, [r7, #4]
10007bac:	2b00      	cmp	r3, #0
10007bae:	db07      	blt.n	10007bc0 <rpmsg_release_address+0x2a>
10007bb0:	687a      	ldr	r2, [r7, #4]
10007bb2:	68bb      	ldr	r3, [r7, #8]
10007bb4:	429a      	cmp	r2, r3
10007bb6:	da03      	bge.n	10007bc0 <rpmsg_release_address+0x2a>
		metal_bitmap_clear_bit(bitmap, addr);
10007bb8:	6879      	ldr	r1, [r7, #4]
10007bba:	68f8      	ldr	r0, [r7, #12]
10007bbc:	f7ff ff59 	bl	10007a72 <metal_bitmap_clear_bit>
}
10007bc0:	bf00      	nop
10007bc2:	3710      	adds	r7, #16
10007bc4:	46bd      	mov	sp, r7
10007bc6:	bd80      	pop	{r7, pc}

10007bc8 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
10007bc8:	b580      	push	{r7, lr}
10007bca:	b084      	sub	sp, #16
10007bcc:	af00      	add	r7, sp, #0
10007bce:	60f8      	str	r0, [r7, #12]
10007bd0:	60b9      	str	r1, [r7, #8]
10007bd2:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007bd4:	687b      	ldr	r3, [r7, #4]
10007bd6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10007bda:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10007bdc:	687b      	ldr	r3, [r7, #4]
10007bde:	2b00      	cmp	r3, #0
10007be0:	db09      	blt.n	10007bf6 <rpmsg_is_address_set+0x2e>
10007be2:	687a      	ldr	r2, [r7, #4]
10007be4:	68bb      	ldr	r3, [r7, #8]
10007be6:	429a      	cmp	r2, r3
10007be8:	da05      	bge.n	10007bf6 <rpmsg_is_address_set+0x2e>
		return metal_bitmap_is_bit_set(bitmap, addr);
10007bea:	6879      	ldr	r1, [r7, #4]
10007bec:	68f8      	ldr	r0, [r7, #12]
10007bee:	f7ff ff23 	bl	10007a38 <metal_bitmap_is_bit_set>
10007bf2:	4603      	mov	r3, r0
10007bf4:	e000      	b.n	10007bf8 <rpmsg_is_address_set+0x30>
	else
		return RPMSG_ERR_PARAM;
10007bf6:	4b02      	ldr	r3, [pc, #8]	@ (10007c00 <rpmsg_is_address_set+0x38>)
}
10007bf8:	4618      	mov	r0, r3
10007bfa:	3710      	adds	r7, #16
10007bfc:	46bd      	mov	sp, r7
10007bfe:	bd80      	pop	{r7, pc}
10007c00:	fffff82d 	.word	0xfffff82d

10007c04 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
10007c04:	b580      	push	{r7, lr}
10007c06:	b084      	sub	sp, #16
10007c08:	af00      	add	r7, sp, #0
10007c0a:	60f8      	str	r0, [r7, #12]
10007c0c:	60b9      	str	r1, [r7, #8]
10007c0e:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10007c10:	687b      	ldr	r3, [r7, #4]
10007c12:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10007c16:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size) {
10007c18:	687b      	ldr	r3, [r7, #4]
10007c1a:	2b00      	cmp	r3, #0
10007c1c:	db09      	blt.n	10007c32 <rpmsg_set_address+0x2e>
10007c1e:	687a      	ldr	r2, [r7, #4]
10007c20:	68bb      	ldr	r3, [r7, #8]
10007c22:	429a      	cmp	r2, r3
10007c24:	da05      	bge.n	10007c32 <rpmsg_set_address+0x2e>
		metal_bitmap_set_bit(bitmap, addr);
10007c26:	6879      	ldr	r1, [r7, #4]
10007c28:	68f8      	ldr	r0, [r7, #12]
10007c2a:	f7ff fee9 	bl	10007a00 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
10007c2e:	2300      	movs	r3, #0
10007c30:	e000      	b.n	10007c34 <rpmsg_set_address+0x30>
	} else {
		return RPMSG_ERR_PARAM;
10007c32:	4b02      	ldr	r3, [pc, #8]	@ (10007c3c <rpmsg_set_address+0x38>)
	}
}
10007c34:	4618      	mov	r0, r3
10007c36:	3710      	adds	r7, #16
10007c38:	46bd      	mov	sp, r7
10007c3a:	bd80      	pop	{r7, pc}
10007c3c:	fffff82d 	.word	0xfffff82d

10007c40 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
10007c40:	b590      	push	{r4, r7, lr}
10007c42:	b089      	sub	sp, #36	@ 0x24
10007c44:	af02      	add	r7, sp, #8
10007c46:	60f8      	str	r0, [r7, #12]
10007c48:	60b9      	str	r1, [r7, #8]
10007c4a:	607a      	str	r2, [r7, #4]
10007c4c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
10007c4e:	68fb      	ldr	r3, [r7, #12]
10007c50:	2b00      	cmp	r3, #0
10007c52:	d00a      	beq.n	10007c6a <rpmsg_send_offchannel_raw+0x2a>
10007c54:	68fb      	ldr	r3, [r7, #12]
10007c56:	6a1b      	ldr	r3, [r3, #32]
10007c58:	2b00      	cmp	r3, #0
10007c5a:	d006      	beq.n	10007c6a <rpmsg_send_offchannel_raw+0x2a>
10007c5c:	683b      	ldr	r3, [r7, #0]
10007c5e:	2b00      	cmp	r3, #0
10007c60:	d003      	beq.n	10007c6a <rpmsg_send_offchannel_raw+0x2a>
10007c62:	687b      	ldr	r3, [r7, #4]
10007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
10007c68:	d101      	bne.n	10007c6e <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
10007c6a:	4b0d      	ldr	r3, [pc, #52]	@ (10007ca0 <rpmsg_send_offchannel_raw+0x60>)
10007c6c:	e014      	b.n	10007c98 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
10007c6e:	68fb      	ldr	r3, [r7, #12]
10007c70:	6a1b      	ldr	r3, [r3, #32]
10007c72:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
10007c74:	697b      	ldr	r3, [r7, #20]
10007c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10007c78:	2b00      	cmp	r3, #0
10007c7a:	d00c      	beq.n	10007c96 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
10007c7c:	697b      	ldr	r3, [r7, #20]
10007c7e:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
10007c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10007c82:	9301      	str	r3, [sp, #4]
10007c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007c86:	9300      	str	r3, [sp, #0]
10007c88:	683b      	ldr	r3, [r7, #0]
10007c8a:	687a      	ldr	r2, [r7, #4]
10007c8c:	68b9      	ldr	r1, [r7, #8]
10007c8e:	6978      	ldr	r0, [r7, #20]
10007c90:	47a0      	blx	r4
10007c92:	4603      	mov	r3, r0
10007c94:	e000      	b.n	10007c98 <rpmsg_send_offchannel_raw+0x58>
						     len, wait);

	return RPMSG_ERR_PARAM;
10007c96:	4b02      	ldr	r3, [pc, #8]	@ (10007ca0 <rpmsg_send_offchannel_raw+0x60>)
}
10007c98:	4618      	mov	r0, r3
10007c9a:	371c      	adds	r7, #28
10007c9c:	46bd      	mov	sp, r7
10007c9e:	bd90      	pop	{r4, r7, pc}
10007ca0:	fffff82d 	.word	0xfffff82d

10007ca4 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
10007ca4:	b580      	push	{r7, lr}
10007ca6:	b090      	sub	sp, #64	@ 0x40
10007ca8:	af02      	add	r7, sp, #8
10007caa:	6078      	str	r0, [r7, #4]
10007cac:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
10007cae:	683b      	ldr	r3, [r7, #0]
10007cb0:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
10007cb2:	687b      	ldr	r3, [r7, #4]
10007cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
10007cb8:	6879      	ldr	r1, [r7, #4]
10007cba:	f107 030c 	add.w	r3, r7, #12
10007cbe:	2220      	movs	r2, #32
10007cc0:	4618      	mov	r0, r3
10007cc2:	f001 fefa 	bl	10009aba <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
10007cc6:	687b      	ldr	r3, [r7, #4]
10007cc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10007cca:	f107 030c 	add.w	r3, r7, #12
10007cce:	2201      	movs	r2, #1
10007cd0:	9201      	str	r2, [sp, #4]
10007cd2:	2228      	movs	r2, #40	@ 0x28
10007cd4:	9200      	str	r2, [sp, #0]
10007cd6:	2235      	movs	r2, #53	@ 0x35
10007cd8:	6878      	ldr	r0, [r7, #4]
10007cda:	f7ff ffb1 	bl	10007c40 <rpmsg_send_offchannel_raw>
10007cde:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
10007ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007ce2:	2b00      	cmp	r3, #0
10007ce4:	da01      	bge.n	10007cea <rpmsg_send_ns_message+0x46>
		return ret;
10007ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007ce8:	e000      	b.n	10007cec <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
10007cea:	2300      	movs	r3, #0
}
10007cec:	4618      	mov	r0, r3
10007cee:	3738      	adds	r7, #56	@ 0x38
10007cf0:	46bd      	mov	sp, r7
10007cf2:	bd80      	pop	{r7, pc}

10007cf4 <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
10007cf4:	b580      	push	{r7, lr}
10007cf6:	b088      	sub	sp, #32
10007cf8:	af00      	add	r7, sp, #0
10007cfa:	60f8      	str	r0, [r7, #12]
10007cfc:	60b9      	str	r1, [r7, #8]
10007cfe:	607a      	str	r2, [r7, #4]
10007d00:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
10007d02:	68fb      	ldr	r3, [r7, #12]
10007d04:	681b      	ldr	r3, [r3, #0]
10007d06:	61fb      	str	r3, [r7, #28]
10007d08:	e04b      	b.n	10007da2 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
10007d0a:	2300      	movs	r3, #0
10007d0c:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
10007d0e:	69fb      	ldr	r3, [r7, #28]
10007d10:	3b34      	subs	r3, #52	@ 0x34
10007d12:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
10007d14:	687b      	ldr	r3, [r7, #4]
10007d16:	f1b3 3fff 	cmp.w	r3, #4294967295
10007d1a:	d006      	beq.n	10007d2a <rpmsg_get_endpoint+0x36>
10007d1c:	697b      	ldr	r3, [r7, #20]
10007d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007d20:	687a      	ldr	r2, [r7, #4]
10007d22:	429a      	cmp	r2, r3
10007d24:	d101      	bne.n	10007d2a <rpmsg_get_endpoint+0x36>
			return ept;
10007d26:	697b      	ldr	r3, [r7, #20]
10007d28:	e040      	b.n	10007dac <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
10007d2a:	697b      	ldr	r3, [r7, #20]
10007d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007d2e:	687a      	ldr	r2, [r7, #4]
10007d30:	429a      	cmp	r2, r3
10007d32:	d106      	bne.n	10007d42 <rpmsg_get_endpoint+0x4e>
10007d34:	697b      	ldr	r3, [r7, #20]
10007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007d38:	683a      	ldr	r2, [r7, #0]
10007d3a:	429a      	cmp	r2, r3
10007d3c:	d101      	bne.n	10007d42 <rpmsg_get_endpoint+0x4e>
			return ept;
10007d3e:	697b      	ldr	r3, [r7, #20]
10007d40:	e034      	b.n	10007dac <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
10007d42:	68bb      	ldr	r3, [r7, #8]
10007d44:	2b00      	cmp	r3, #0
10007d46:	d00c      	beq.n	10007d62 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
10007d48:	697b      	ldr	r3, [r7, #20]
10007d4a:	2220      	movs	r2, #32
10007d4c:	68b9      	ldr	r1, [r7, #8]
10007d4e:	4618      	mov	r0, r3
10007d50:	f001 fea1 	bl	10009a96 <strncmp>
10007d54:	4603      	mov	r3, r0
10007d56:	2b00      	cmp	r3, #0
10007d58:	bf0c      	ite	eq
10007d5a:	2301      	moveq	r3, #1
10007d5c:	2300      	movne	r3, #0
10007d5e:	b2db      	uxtb	r3, r3
10007d60:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
10007d62:	68bb      	ldr	r3, [r7, #8]
10007d64:	2b00      	cmp	r3, #0
10007d66:	d018      	beq.n	10007d9a <rpmsg_get_endpoint+0xa6>
10007d68:	69bb      	ldr	r3, [r7, #24]
10007d6a:	2b00      	cmp	r3, #0
10007d6c:	d015      	beq.n	10007d9a <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10007d6e:	683b      	ldr	r3, [r7, #0]
10007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
10007d74:	d006      	beq.n	10007d84 <rpmsg_get_endpoint+0x90>
10007d76:	697b      	ldr	r3, [r7, #20]
10007d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007d7a:	683a      	ldr	r2, [r7, #0]
10007d7c:	429a      	cmp	r2, r3
10007d7e:	d101      	bne.n	10007d84 <rpmsg_get_endpoint+0x90>
			return ept;
10007d80:	697b      	ldr	r3, [r7, #20]
10007d82:	e013      	b.n	10007dac <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
10007d84:	687b      	ldr	r3, [r7, #4]
10007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
10007d8a:	d107      	bne.n	10007d9c <rpmsg_get_endpoint+0xa8>
10007d8c:	697b      	ldr	r3, [r7, #20]
10007d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
10007d94:	d102      	bne.n	10007d9c <rpmsg_get_endpoint+0xa8>
			return ept;
10007d96:	697b      	ldr	r3, [r7, #20]
10007d98:	e008      	b.n	10007dac <rpmsg_get_endpoint+0xb8>
			continue;
10007d9a:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
10007d9c:	69fb      	ldr	r3, [r7, #28]
10007d9e:	681b      	ldr	r3, [r3, #0]
10007da0:	61fb      	str	r3, [r7, #28]
10007da2:	68fb      	ldr	r3, [r7, #12]
10007da4:	69fa      	ldr	r2, [r7, #28]
10007da6:	429a      	cmp	r2, r3
10007da8:	d1af      	bne.n	10007d0a <rpmsg_get_endpoint+0x16>
	}
	return NULL;
10007daa:	2300      	movs	r3, #0
}
10007dac:	4618      	mov	r0, r3
10007dae:	3720      	adds	r7, #32
10007db0:	46bd      	mov	sp, r7
10007db2:	bd80      	pop	{r7, pc}

10007db4 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
10007db4:	b580      	push	{r7, lr}
10007db6:	b084      	sub	sp, #16
10007db8:	af00      	add	r7, sp, #0
10007dba:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev = ept->rdev;
10007dbc:	687b      	ldr	r3, [r7, #4]
10007dbe:	6a1b      	ldr	r3, [r3, #32]
10007dc0:	60fb      	str	r3, [r7, #12]

	metal_mutex_acquire(&rdev->lock);
10007dc2:	68fb      	ldr	r3, [r7, #12]
10007dc4:	3358      	adds	r3, #88	@ 0x58
10007dc6:	4618      	mov	r0, r3
10007dc8:	f7ff fdc3 	bl	10007952 <metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
10007dcc:	687b      	ldr	r3, [r7, #4]
10007dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
10007dd4:	d008      	beq.n	10007de8 <rpmsg_unregister_endpoint+0x34>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007dd6:	68fb      	ldr	r3, [r7, #12]
10007dd8:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
10007ddc:	687b      	ldr	r3, [r7, #4]
10007dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007de0:	461a      	mov	r2, r3
10007de2:	2180      	movs	r1, #128	@ 0x80
10007de4:	f7ff fed7 	bl	10007b96 <rpmsg_release_address>
	metal_list_del(&ept->node);
10007de8:	687b      	ldr	r3, [r7, #4]
10007dea:	3334      	adds	r3, #52	@ 0x34
10007dec:	4618      	mov	r0, r3
10007dee:	f7ff fded 	bl	100079cc <metal_list_del>
	ept->rdev = NULL;
10007df2:	687b      	ldr	r3, [r7, #4]
10007df4:	2200      	movs	r2, #0
10007df6:	621a      	str	r2, [r3, #32]
	metal_mutex_release(&rdev->lock);
10007df8:	68fb      	ldr	r3, [r7, #12]
10007dfa:	3358      	adds	r3, #88	@ 0x58
10007dfc:	4618      	mov	r0, r3
10007dfe:	f7ff fdb3 	bl	10007968 <metal_mutex_release>
}
10007e02:	bf00      	nop
10007e04:	3710      	adds	r7, #16
10007e06:	46bd      	mov	sp, r7
10007e08:	bd80      	pop	{r7, pc}

10007e0a <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
10007e0a:	b580      	push	{r7, lr}
10007e0c:	b082      	sub	sp, #8
10007e0e:	af00      	add	r7, sp, #0
10007e10:	6078      	str	r0, [r7, #4]
10007e12:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
10007e14:	683b      	ldr	r3, [r7, #0]
10007e16:	687a      	ldr	r2, [r7, #4]
10007e18:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
10007e1a:	687a      	ldr	r2, [r7, #4]
10007e1c:	683b      	ldr	r3, [r7, #0]
10007e1e:	3334      	adds	r3, #52	@ 0x34
10007e20:	4619      	mov	r1, r3
10007e22:	4610      	mov	r0, r2
10007e24:	f7ff fdc5 	bl	100079b2 <metal_list_add_tail>
}
10007e28:	bf00      	nop
10007e2a:	3708      	adds	r7, #8
10007e2c:	46bd      	mov	sp, r7
10007e2e:	bd80      	pop	{r7, pc}

10007e30 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
10007e30:	b580      	push	{r7, lr}
10007e32:	b088      	sub	sp, #32
10007e34:	af02      	add	r7, sp, #8
10007e36:	60f8      	str	r0, [r7, #12]
10007e38:	60b9      	str	r1, [r7, #8]
10007e3a:	607a      	str	r2, [r7, #4]
10007e3c:	603b      	str	r3, [r7, #0]
	int status = RPMSG_SUCCESS;
10007e3e:	2300      	movs	r3, #0
10007e40:	617b      	str	r3, [r7, #20]
	uint32_t addr = src;
10007e42:	683b      	ldr	r3, [r7, #0]
10007e44:	613b      	str	r3, [r7, #16]

	if (!ept)
10007e46:	68fb      	ldr	r3, [r7, #12]
10007e48:	2b00      	cmp	r3, #0
10007e4a:	d101      	bne.n	10007e50 <rpmsg_create_ept+0x20>
		return RPMSG_ERR_PARAM;
10007e4c:	4b37      	ldr	r3, [pc, #220]	@ (10007f2c <rpmsg_create_ept+0xfc>)
10007e4e:	e068      	b.n	10007f22 <rpmsg_create_ept+0xf2>

	metal_mutex_acquire(&rdev->lock);
10007e50:	68bb      	ldr	r3, [r7, #8]
10007e52:	3358      	adds	r3, #88	@ 0x58
10007e54:	4618      	mov	r0, r3
10007e56:	f7ff fd7c 	bl	10007952 <metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
10007e5a:	683b      	ldr	r3, [r7, #0]
10007e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
10007e60:	d10d      	bne.n	10007e7e <rpmsg_create_ept+0x4e>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
10007e62:	68bb      	ldr	r3, [r7, #8]
10007e64:	3348      	adds	r3, #72	@ 0x48
10007e66:	2180      	movs	r1, #128	@ 0x80
10007e68:	4618      	mov	r0, r3
10007e6a:	f7ff fe73 	bl	10007b54 <rpmsg_get_address>
10007e6e:	6138      	str	r0, [r7, #16]
		if (addr == RPMSG_ADDR_ANY) {
10007e70:	693b      	ldr	r3, [r7, #16]
10007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
10007e76:	d11f      	bne.n	10007eb8 <rpmsg_create_ept+0x88>
			status = RPMSG_ERR_ADDR;
10007e78:	4b2d      	ldr	r3, [pc, #180]	@ (10007f30 <rpmsg_create_ept+0x100>)
10007e7a:	617b      	str	r3, [r7, #20]
			goto ret_status;
10007e7c:	e04b      	b.n	10007f16 <rpmsg_create_ept+0xe6>
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
10007e7e:	683b      	ldr	r3, [r7, #0]
10007e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
10007e84:	d318      	bcc.n	10007eb8 <rpmsg_create_ept+0x88>
		status = rpmsg_is_address_set(rdev->bitmap,
10007e86:	68bb      	ldr	r3, [r7, #8]
10007e88:	3348      	adds	r3, #72	@ 0x48
10007e8a:	683a      	ldr	r2, [r7, #0]
10007e8c:	2180      	movs	r1, #128	@ 0x80
10007e8e:	4618      	mov	r0, r3
10007e90:	f7ff fe9a 	bl	10007bc8 <rpmsg_is_address_set>
10007e94:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
10007e96:	697b      	ldr	r3, [r7, #20]
10007e98:	2b00      	cmp	r3, #0
10007e9a:	d107      	bne.n	10007eac <rpmsg_create_ept+0x7c>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10007e9c:	68bb      	ldr	r3, [r7, #8]
10007e9e:	3348      	adds	r3, #72	@ 0x48
10007ea0:	683a      	ldr	r2, [r7, #0]
10007ea2:	2180      	movs	r1, #128	@ 0x80
10007ea4:	4618      	mov	r0, r3
10007ea6:	f7ff fead 	bl	10007c04 <rpmsg_set_address>
10007eaa:	e005      	b.n	10007eb8 <rpmsg_create_ept+0x88>
					  src);
		} else if (status > 0) {
10007eac:	697b      	ldr	r3, [r7, #20]
10007eae:	2b00      	cmp	r3, #0
10007eb0:	dd30      	ble.n	10007f14 <rpmsg_create_ept+0xe4>
			status = RPMSG_ERR_ADDR;
10007eb2:	4b1f      	ldr	r3, [pc, #124]	@ (10007f30 <rpmsg_create_ept+0x100>)
10007eb4:	617b      	str	r3, [r7, #20]
			goto ret_status;
10007eb6:	e02e      	b.n	10007f16 <rpmsg_create_ept+0xe6>
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
10007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007eba:	9301      	str	r3, [sp, #4]
10007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007ebe:	9300      	str	r3, [sp, #0]
10007ec0:	6a3b      	ldr	r3, [r7, #32]
10007ec2:	693a      	ldr	r2, [r7, #16]
10007ec4:	6879      	ldr	r1, [r7, #4]
10007ec6:	68f8      	ldr	r0, [r7, #12]
10007ec8:	f7ff fe20 	bl	10007b0c <rpmsg_initialize_ept>
	rpmsg_register_endpoint(rdev, ept);
10007ecc:	68f9      	ldr	r1, [r7, #12]
10007ece:	68b8      	ldr	r0, [r7, #8]
10007ed0:	f7ff ff9b 	bl	10007e0a <rpmsg_register_endpoint>
	metal_mutex_release(&rdev->lock);
10007ed4:	68bb      	ldr	r3, [r7, #8]
10007ed6:	3358      	adds	r3, #88	@ 0x58
10007ed8:	4618      	mov	r0, r3
10007eda:	f7ff fd45 	bl	10007968 <metal_mutex_release>

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
10007ede:	68fb      	ldr	r3, [r7, #12]
10007ee0:	781b      	ldrb	r3, [r3, #0]
10007ee2:	2b00      	cmp	r3, #0
10007ee4:	d00e      	beq.n	10007f04 <rpmsg_create_ept+0xd4>
10007ee6:	68bb      	ldr	r3, [r7, #8]
10007ee8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
10007eec:	2b00      	cmp	r3, #0
10007eee:	d009      	beq.n	10007f04 <rpmsg_create_ept+0xd4>
	    ept->dest_addr == RPMSG_ADDR_ANY)
10007ef0:	68fb      	ldr	r3, [r7, #12]
10007ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	if (ept->name[0] && rdev->support_ns &&
10007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
10007ef8:	d104      	bne.n	10007f04 <rpmsg_create_ept+0xd4>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
10007efa:	2100      	movs	r1, #0
10007efc:	68f8      	ldr	r0, [r7, #12]
10007efe:	f7ff fed1 	bl	10007ca4 <rpmsg_send_ns_message>
10007f02:	6178      	str	r0, [r7, #20]

	if (status)
10007f04:	697b      	ldr	r3, [r7, #20]
10007f06:	2b00      	cmp	r3, #0
10007f08:	d002      	beq.n	10007f10 <rpmsg_create_ept+0xe0>
		rpmsg_unregister_endpoint(ept);
10007f0a:	68f8      	ldr	r0, [r7, #12]
10007f0c:	f7ff ff52 	bl	10007db4 <rpmsg_unregister_endpoint>
	return status;
10007f10:	697b      	ldr	r3, [r7, #20]
10007f12:	e006      	b.n	10007f22 <rpmsg_create_ept+0xf2>
			goto ret_status;
10007f14:	bf00      	nop

ret_status:
	metal_mutex_release(&rdev->lock);
10007f16:	68bb      	ldr	r3, [r7, #8]
10007f18:	3358      	adds	r3, #88	@ 0x58
10007f1a:	4618      	mov	r0, r3
10007f1c:	f7ff fd24 	bl	10007968 <metal_mutex_release>
	return status;
10007f20:	697b      	ldr	r3, [r7, #20]
}
10007f22:	4618      	mov	r0, r3
10007f24:	3718      	adds	r7, #24
10007f26:	46bd      	mov	sp, r7
10007f28:	bd80      	pop	{r7, pc}
10007f2a:	bf00      	nop
10007f2c:	fffff82d 	.word	0xfffff82d
10007f30:	fffff829 	.word	0xfffff829

10007f34 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
10007f34:	b480      	push	{r7}
10007f36:	b083      	sub	sp, #12
10007f38:	af00      	add	r7, sp, #0
10007f3a:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
10007f3c:	2300      	movs	r3, #0
}
10007f3e:	4618      	mov	r0, r3
10007f40:	370c      	adds	r7, #12
10007f42:	46bd      	mov	sp, r7
10007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
10007f48:	4770      	bx	lr

10007f4a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
10007f4a:	b580      	push	{r7, lr}
10007f4c:	b082      	sub	sp, #8
10007f4e:	af00      	add	r7, sp, #0
10007f50:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
10007f52:	6878      	ldr	r0, [r7, #4]
10007f54:	f7ff ffee 	bl	10007f34 <__metal_sleep_usec>
10007f58:	4603      	mov	r3, r0
}
10007f5a:	4618      	mov	r0, r3
10007f5c:	3708      	adds	r7, #8
10007f5e:	46bd      	mov	sp, r7
10007f60:	bd80      	pop	{r7, pc}

10007f62 <metal_list_init>:
{
10007f62:	b480      	push	{r7}
10007f64:	b083      	sub	sp, #12
10007f66:	af00      	add	r7, sp, #0
10007f68:	6078      	str	r0, [r7, #4]
	list->prev = list;
10007f6a:	687b      	ldr	r3, [r7, #4]
10007f6c:	687a      	ldr	r2, [r7, #4]
10007f6e:	605a      	str	r2, [r3, #4]
	list->next = list;
10007f70:	687b      	ldr	r3, [r7, #4]
10007f72:	687a      	ldr	r2, [r7, #4]
10007f74:	601a      	str	r2, [r3, #0]
}
10007f76:	bf00      	nop
10007f78:	370c      	adds	r7, #12
10007f7a:	46bd      	mov	sp, r7
10007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
10007f80:	4770      	bx	lr

10007f82 <metal_io_virt_to_offset>:
{
10007f82:	b480      	push	{r7}
10007f84:	b085      	sub	sp, #20
10007f86:	af00      	add	r7, sp, #0
10007f88:	6078      	str	r0, [r7, #4]
10007f8a:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10007f8c:	683b      	ldr	r3, [r7, #0]
10007f8e:	687a      	ldr	r2, [r7, #4]
10007f90:	6812      	ldr	r2, [r2, #0]
10007f92:	1a9b      	subs	r3, r3, r2
10007f94:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007f96:	687b      	ldr	r3, [r7, #4]
10007f98:	689b      	ldr	r3, [r3, #8]
10007f9a:	68fa      	ldr	r2, [r7, #12]
10007f9c:	429a      	cmp	r2, r3
10007f9e:	d201      	bcs.n	10007fa4 <metal_io_virt_to_offset+0x22>
10007fa0:	68fb      	ldr	r3, [r7, #12]
10007fa2:	e001      	b.n	10007fa8 <metal_io_virt_to_offset+0x26>
10007fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
10007fa8:	4618      	mov	r0, r3
10007faa:	3714      	adds	r7, #20
10007fac:	46bd      	mov	sp, r7
10007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
10007fb2:	4770      	bx	lr

10007fb4 <__metal_mutex_init>:
{
10007fb4:	b480      	push	{r7}
10007fb6:	b085      	sub	sp, #20
10007fb8:	af00      	add	r7, sp, #0
10007fba:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10007fbc:	687b      	ldr	r3, [r7, #4]
10007fbe:	60fb      	str	r3, [r7, #12]
10007fc0:	2300      	movs	r3, #0
10007fc2:	60bb      	str	r3, [r7, #8]
10007fc4:	68bb      	ldr	r3, [r7, #8]
10007fc6:	461a      	mov	r2, r3
10007fc8:	68fb      	ldr	r3, [r7, #12]
10007fca:	f3bf 8f5b 	dmb	ish
10007fce:	601a      	str	r2, [r3, #0]
10007fd0:	f3bf 8f5b 	dmb	ish
}
10007fd4:	bf00      	nop
10007fd6:	3714      	adds	r7, #20
10007fd8:	46bd      	mov	sp, r7
10007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
10007fde:	4770      	bx	lr

10007fe0 <__metal_mutex_acquire>:
{
10007fe0:	b490      	push	{r4, r7}
10007fe2:	b086      	sub	sp, #24
10007fe4:	af00      	add	r7, sp, #0
10007fe6:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10007fe8:	2300      	movs	r3, #0
10007fea:	613b      	str	r3, [r7, #16]
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10007fec:	bf00      	nop
10007fee:	687b      	ldr	r3, [r7, #4]
10007ff0:	617b      	str	r3, [r7, #20]
10007ff2:	2301      	movs	r3, #1
10007ff4:	60fb      	str	r3, [r7, #12]
10007ff6:	68fb      	ldr	r3, [r7, #12]
10007ff8:	461c      	mov	r4, r3
10007ffa:	697a      	ldr	r2, [r7, #20]
10007ffc:	f107 0310 	add.w	r3, r7, #16
10008000:	6818      	ldr	r0, [r3, #0]
10008002:	f3bf 8f5b 	dmb	ish
10008006:	e852 1f00 	ldrex	r1, [r2]
1000800a:	4281      	cmp	r1, r0
1000800c:	d103      	bne.n	10008016 <__metal_mutex_acquire+0x36>
1000800e:	e842 4c00 	strex	ip, r4, [r2]
10008012:	f1bc 0f00 	cmp.w	ip, #0
10008016:	f3bf 8f5b 	dmb	ish
1000801a:	bf0c      	ite	eq
1000801c:	2201      	moveq	r2, #1
1000801e:	2200      	movne	r2, #0
10008020:	2a00      	cmp	r2, #0
10008022:	d100      	bne.n	10008026 <__metal_mutex_acquire+0x46>
10008024:	6019      	str	r1, [r3, #0]
10008026:	4613      	mov	r3, r2
10008028:	f083 0301 	eor.w	r3, r3, #1
1000802c:	b2db      	uxtb	r3, r3
1000802e:	2b00      	cmp	r3, #0
10008030:	d1dd      	bne.n	10007fee <__metal_mutex_acquire+0xe>
}
10008032:	bf00      	nop
10008034:	bf00      	nop
10008036:	3718      	adds	r7, #24
10008038:	46bd      	mov	sp, r7
1000803a:	bc90      	pop	{r4, r7}
1000803c:	4770      	bx	lr

1000803e <__metal_mutex_release>:
{
1000803e:	b480      	push	{r7}
10008040:	b085      	sub	sp, #20
10008042:	af00      	add	r7, sp, #0
10008044:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10008046:	687b      	ldr	r3, [r7, #4]
10008048:	60fb      	str	r3, [r7, #12]
1000804a:	2300      	movs	r3, #0
1000804c:	60bb      	str	r3, [r7, #8]
1000804e:	68bb      	ldr	r3, [r7, #8]
10008050:	461a      	mov	r2, r3
10008052:	68fb      	ldr	r3, [r7, #12]
10008054:	f3bf 8f5b 	dmb	ish
10008058:	601a      	str	r2, [r3, #0]
1000805a:	f3bf 8f5b 	dmb	ish
}
1000805e:	bf00      	nop
10008060:	3714      	adds	r7, #20
10008062:	46bd      	mov	sp, r7
10008064:	f85d 7b04 	ldr.w	r7, [sp], #4
10008068:	4770      	bx	lr

1000806a <metal_mutex_init>:
{
1000806a:	b580      	push	{r7, lr}
1000806c:	b082      	sub	sp, #8
1000806e:	af00      	add	r7, sp, #0
10008070:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
10008072:	6878      	ldr	r0, [r7, #4]
10008074:	f7ff ff9e 	bl	10007fb4 <__metal_mutex_init>
}
10008078:	bf00      	nop
1000807a:	3708      	adds	r7, #8
1000807c:	46bd      	mov	sp, r7
1000807e:	bd80      	pop	{r7, pc}

10008080 <metal_mutex_acquire>:
{
10008080:	b580      	push	{r7, lr}
10008082:	b082      	sub	sp, #8
10008084:	af00      	add	r7, sp, #0
10008086:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
10008088:	6878      	ldr	r0, [r7, #4]
1000808a:	f7ff ffa9 	bl	10007fe0 <__metal_mutex_acquire>
}
1000808e:	bf00      	nop
10008090:	3708      	adds	r7, #8
10008092:	46bd      	mov	sp, r7
10008094:	bd80      	pop	{r7, pc}

10008096 <metal_mutex_release>:
{
10008096:	b580      	push	{r7, lr}
10008098:	b082      	sub	sp, #8
1000809a:	af00      	add	r7, sp, #0
1000809c:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000809e:	6878      	ldr	r0, [r7, #4]
100080a0:	f7ff ffcd 	bl	1000803e <__metal_mutex_release>
}
100080a4:	bf00      	nop
100080a6:	3708      	adds	r7, #8
100080a8:	46bd      	mov	sp, r7
100080aa:	bd80      	pop	{r7, pc}

100080ac <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
100080ac:	b480      	push	{r7}
100080ae:	b083      	sub	sp, #12
100080b0:	af00      	add	r7, sp, #0
100080b2:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
100080b4:	687b      	ldr	r3, [r7, #4]
100080b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100080b8:	699b      	ldr	r3, [r3, #24]
}
100080ba:	4618      	mov	r0, r3
100080bc:	370c      	adds	r7, #12
100080be:	46bd      	mov	sp, r7
100080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100080c4:	4770      	bx	lr

100080c6 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
100080c6:	b580      	push	{r7, lr}
100080c8:	b082      	sub	sp, #8
100080ca:	af00      	add	r7, sp, #0
100080cc:	6078      	str	r0, [r7, #4]
100080ce:	460b      	mov	r3, r1
100080d0:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
100080d2:	687b      	ldr	r3, [r7, #4]
100080d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100080d6:	6a1b      	ldr	r3, [r3, #32]
100080d8:	685b      	ldr	r3, [r3, #4]
100080da:	687a      	ldr	r2, [r7, #4]
100080dc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
100080de:	78f9      	ldrb	r1, [r7, #3]
100080e0:	4610      	mov	r0, r2
100080e2:	4798      	blx	r3
}
100080e4:	bf00      	nop
100080e6:	3708      	adds	r7, #8
100080e8:	46bd      	mov	sp, r7
100080ea:	bd80      	pop	{r7, pc}

100080ec <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
100080ec:	b580      	push	{r7, lr}
100080ee:	b082      	sub	sp, #8
100080f0:	af00      	add	r7, sp, #0
100080f2:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
100080f4:	687b      	ldr	r3, [r7, #4]
100080f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100080f8:	6a1b      	ldr	r3, [r3, #32]
100080fa:	681b      	ldr	r3, [r3, #0]
100080fc:	687a      	ldr	r2, [r7, #4]
100080fe:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10008100:	4610      	mov	r0, r2
10008102:	4798      	blx	r3
10008104:	4603      	mov	r3, r0
}
10008106:	4618      	mov	r0, r3
10008108:	3708      	adds	r7, #8
1000810a:	46bd      	mov	sp, r7
1000810c:	bd80      	pop	{r7, pc}

1000810e <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000810e:	b580      	push	{r7, lr}
10008110:	b082      	sub	sp, #8
10008112:	af00      	add	r7, sp, #0
10008114:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
10008116:	687b      	ldr	r3, [r7, #4]
10008118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000811a:	6a1b      	ldr	r3, [r3, #32]
1000811c:	689b      	ldr	r3, [r3, #8]
1000811e:	687a      	ldr	r2, [r7, #4]
10008120:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10008122:	4610      	mov	r0, r2
10008124:	4798      	blx	r3
10008126:	4603      	mov	r3, r0
}
10008128:	4618      	mov	r0, r3
1000812a:	3708      	adds	r7, #8
1000812c:	46bd      	mov	sp, r7
1000812e:	bd80      	pop	{r7, pc}

10008130 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
10008130:	b580      	push	{r7, lr}
10008132:	b086      	sub	sp, #24
10008134:	af02      	add	r7, sp, #8
10008136:	60f8      	str	r0, [r7, #12]
10008138:	60b9      	str	r1, [r7, #8]
1000813a:	607a      	str	r2, [r7, #4]
1000813c:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
1000813e:	68fb      	ldr	r3, [r7, #12]
10008140:	6f98      	ldr	r0, [r3, #120]	@ 0x78
10008142:	68b9      	ldr	r1, [r7, #8]
10008144:	69bb      	ldr	r3, [r7, #24]
10008146:	9300      	str	r3, [sp, #0]
10008148:	683b      	ldr	r3, [r7, #0]
1000814a:	687a      	ldr	r2, [r7, #4]
1000814c:	f000 fcb4 	bl	10008ab8 <virtio_create_virtqueues>
10008150:	4603      	mov	r3, r0
					callbacks);
}
10008152:	4618      	mov	r0, r3
10008154:	3710      	adds	r7, #16
10008156:	46bd      	mov	sp, r7
10008158:	bd80      	pop	{r7, pc}
	...

1000815c <rpmsg_initialize_ept>:
{
1000815c:	b580      	push	{r7, lr}
1000815e:	b084      	sub	sp, #16
10008160:	af00      	add	r7, sp, #0
10008162:	60f8      	str	r0, [r7, #12]
10008164:	60b9      	str	r1, [r7, #8]
10008166:	607a      	str	r2, [r7, #4]
10008168:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000816a:	68f8      	ldr	r0, [r7, #12]
1000816c:	68bb      	ldr	r3, [r7, #8]
1000816e:	2b00      	cmp	r3, #0
10008170:	d001      	beq.n	10008176 <rpmsg_initialize_ept+0x1a>
10008172:	68bb      	ldr	r3, [r7, #8]
10008174:	e000      	b.n	10008178 <rpmsg_initialize_ept+0x1c>
10008176:	4b0a      	ldr	r3, [pc, #40]	@ (100081a0 <rpmsg_initialize_ept+0x44>)
10008178:	2220      	movs	r2, #32
1000817a:	4619      	mov	r1, r3
1000817c:	f001 fc9d 	bl	10009aba <strncpy>
	ept->addr = src;
10008180:	68fb      	ldr	r3, [r7, #12]
10008182:	687a      	ldr	r2, [r7, #4]
10008184:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
10008186:	68fb      	ldr	r3, [r7, #12]
10008188:	683a      	ldr	r2, [r7, #0]
1000818a:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
1000818c:	68fb      	ldr	r3, [r7, #12]
1000818e:	69ba      	ldr	r2, [r7, #24]
10008190:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10008192:	68fb      	ldr	r3, [r7, #12]
10008194:	69fa      	ldr	r2, [r7, #28]
10008196:	631a      	str	r2, [r3, #48]	@ 0x30
}
10008198:	bf00      	nop
1000819a:	3710      	adds	r7, #16
1000819c:	46bd      	mov	sp, r7
1000819e:	bd80      	pop	{r7, pc}
100081a0:	1000b15c 	.word	0x1000b15c

100081a4 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
100081a4:	b580      	push	{r7, lr}
100081a6:	b082      	sub	sp, #8
100081a8:	af00      	add	r7, sp, #0
100081aa:	6078      	str	r0, [r7, #4]
100081ac:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
100081ae:	f04f 33ff 	mov.w	r3, #4294967295
100081b2:	683a      	ldr	r2, [r7, #0]
100081b4:	2100      	movs	r1, #0
100081b6:	6878      	ldr	r0, [r7, #4]
100081b8:	f7ff fd9c 	bl	10007cf4 <rpmsg_get_endpoint>
100081bc:	4603      	mov	r3, r0
}
100081be:	4618      	mov	r0, r3
100081c0:	3708      	adds	r7, #8
100081c2:	46bd      	mov	sp, r7
100081c4:	bd80      	pop	{r7, pc}

100081c6 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
100081c6:	b480      	push	{r7}
100081c8:	b085      	sub	sp, #20
100081ca:	af00      	add	r7, sp, #0
100081cc:	60f8      	str	r0, [r7, #12]
100081ce:	60b9      	str	r1, [r7, #8]
100081d0:	607a      	str	r2, [r7, #4]
	if (!shpool)
100081d2:	68fb      	ldr	r3, [r7, #12]
100081d4:	2b00      	cmp	r3, #0
100081d6:	d009      	beq.n	100081ec <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
100081d8:	68fb      	ldr	r3, [r7, #12]
100081da:	68ba      	ldr	r2, [r7, #8]
100081dc:	601a      	str	r2, [r3, #0]
	shpool->size = size;
100081de:	68fb      	ldr	r3, [r7, #12]
100081e0:	687a      	ldr	r2, [r7, #4]
100081e2:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
100081e4:	68fb      	ldr	r3, [r7, #12]
100081e6:	687a      	ldr	r2, [r7, #4]
100081e8:	605a      	str	r2, [r3, #4]
100081ea:	e000      	b.n	100081ee <rpmsg_virtio_init_shm_pool+0x28>
		return;
100081ec:	bf00      	nop
}
100081ee:	3714      	adds	r7, #20
100081f0:	46bd      	mov	sp, r7
100081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100081f6:	4770      	bx	lr

100081f8 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
100081f8:	b580      	push	{r7, lr}
100081fa:	b086      	sub	sp, #24
100081fc:	af00      	add	r7, sp, #0
100081fe:	60f8      	str	r0, [r7, #12]
10008200:	60b9      	str	r1, [r7, #8]
10008202:	607a      	str	r2, [r7, #4]
10008204:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008206:	68f8      	ldr	r0, [r7, #12]
10008208:	f7ff ff50 	bl	100080ac <rpmsg_virtio_get_role>
1000820c:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000820e:	697b      	ldr	r3, [r7, #20]
10008210:	2b01      	cmp	r3, #1
10008212:	d106      	bne.n	10008222 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
10008214:	68fb      	ldr	r3, [r7, #12]
10008216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10008218:	8879      	ldrh	r1, [r7, #2]
1000821a:	687a      	ldr	r2, [r7, #4]
1000821c:	4618      	mov	r0, r3
1000821e:	f000 fe1d 	bl	10008e5c <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
10008222:	bf00      	nop
10008224:	3718      	adds	r7, #24
10008226:	46bd      	mov	sp, r7
10008228:	bd80      	pop	{r7, pc}

1000822a <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000822a:	b580      	push	{r7, lr}
1000822c:	b086      	sub	sp, #24
1000822e:	af00      	add	r7, sp, #0
10008230:	60f8      	str	r0, [r7, #12]
10008232:	60b9      	str	r1, [r7, #8]
10008234:	607a      	str	r2, [r7, #4]
10008236:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008238:	68f8      	ldr	r0, [r7, #12]
1000823a:	f7ff ff37 	bl	100080ac <rpmsg_virtio_get_role>
1000823e:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10008240:	697b      	ldr	r3, [r7, #20]
10008242:	2b01      	cmp	r3, #1
10008244:	d109      	bne.n	1000825a <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
10008246:	68fb      	ldr	r3, [r7, #12]
10008248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000824c:	8879      	ldrh	r1, [r7, #2]
1000824e:	687a      	ldr	r2, [r7, #4]
10008250:	4618      	mov	r0, r3
10008252:	f000 fe03 	bl	10008e5c <virtqueue_add_consumed_buffer>
10008256:	4603      	mov	r3, r0
10008258:	e000      	b.n	1000825c <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000825a:	2300      	movs	r3, #0
}
1000825c:	4618      	mov	r0, r3
1000825e:	3718      	adds	r7, #24
10008260:	46bd      	mov	sp, r7
10008262:	bd80      	pop	{r7, pc}

10008264 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10008264:	b580      	push	{r7, lr}
10008266:	b086      	sub	sp, #24
10008268:	af00      	add	r7, sp, #0
1000826a:	60f8      	str	r0, [r7, #12]
1000826c:	60b9      	str	r1, [r7, #8]
1000826e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10008270:	68f8      	ldr	r0, [r7, #12]
10008272:	f7ff ff1b 	bl	100080ac <rpmsg_virtio_get_role>
10008276:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10008278:	2300      	movs	r3, #0
1000827a:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000827c:	693b      	ldr	r3, [r7, #16]
1000827e:	2b01      	cmp	r3, #1
10008280:	d108      	bne.n	10008294 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
10008282:	68fb      	ldr	r3, [r7, #12]
10008284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10008288:	68ba      	ldr	r2, [r7, #8]
1000828a:	6879      	ldr	r1, [r7, #4]
1000828c:	4618      	mov	r0, r3
1000828e:	f000 fd9d 	bl	10008dcc <virtqueue_get_available_buffer>
10008292:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
10008294:	697b      	ldr	r3, [r7, #20]
}
10008296:	4618      	mov	r0, r3
10008298:	3718      	adds	r7, #24
1000829a:	46bd      	mov	sp, r7
1000829c:	bd80      	pop	{r7, pc}

1000829e <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000829e:	b580      	push	{r7, lr}
100082a0:	b086      	sub	sp, #24
100082a2:	af00      	add	r7, sp, #0
100082a4:	60f8      	str	r0, [r7, #12]
100082a6:	60b9      	str	r1, [r7, #8]
100082a8:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
100082aa:	68f8      	ldr	r0, [r7, #12]
100082ac:	f7ff fefe 	bl	100080ac <rpmsg_virtio_get_role>
100082b0:	6138      	str	r0, [r7, #16]
	void *data = NULL;
100082b2:	2300      	movs	r3, #0
100082b4:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100082b6:	693b      	ldr	r3, [r7, #16]
100082b8:	2b01      	cmp	r3, #1
100082ba:	d107      	bne.n	100082cc <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
100082bc:	68fb      	ldr	r3, [r7, #12]
100082be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100082c0:	68ba      	ldr	r2, [r7, #8]
100082c2:	6879      	ldr	r1, [r7, #4]
100082c4:	4618      	mov	r0, r3
100082c6:	f000 fd81 	bl	10008dcc <virtqueue_get_available_buffer>
100082ca:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
100082cc:	697b      	ldr	r3, [r7, #20]
}
100082ce:	4618      	mov	r0, r3
100082d0:	3718      	adds	r7, #24
100082d2:	46bd      	mov	sp, r7
100082d4:	bd80      	pop	{r7, pc}

100082d6 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
100082d6:	b580      	push	{r7, lr}
100082d8:	b084      	sub	sp, #16
100082da:	af00      	add	r7, sp, #0
100082dc:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
100082de:	6878      	ldr	r0, [r7, #4]
100082e0:	f7ff ff04 	bl	100080ec <rpmsg_virtio_get_status>
100082e4:	4603      	mov	r3, r0
100082e6:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
100082e8:	7bfb      	ldrb	r3, [r7, #15]
100082ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100082ee:	2b00      	cmp	r3, #0
100082f0:	d004      	beq.n	100082fc <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
100082f2:	2100      	movs	r1, #0
100082f4:	6878      	ldr	r0, [r7, #4]
100082f6:	f7ff fee6 	bl	100080c6 <rpmsg_virtio_set_status>
100082fa:	e7f0      	b.n	100082de <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
100082fc:	7bfb      	ldrb	r3, [r7, #15]
100082fe:	f003 0304 	and.w	r3, r3, #4
10008302:	2b00      	cmp	r3, #0
10008304:	d0eb      	beq.n	100082de <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
10008306:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
10008308:	4618      	mov	r0, r3
1000830a:	3710      	adds	r7, #16
1000830c:	46bd      	mov	sp, r7
1000830e:	bd80      	pop	{r7, pc}

10008310 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
10008310:	b480      	push	{r7}
10008312:	b085      	sub	sp, #20
10008314:	af00      	add	r7, sp, #0
10008316:	6078      	str	r0, [r7, #4]
10008318:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000831a:	683b      	ldr	r3, [r7, #0]
1000831c:	3b10      	subs	r3, #16
1000831e:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
10008320:	68fb      	ldr	r3, [r7, #12]
10008322:	689b      	ldr	r3, [r3, #8]
10008324:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
10008328:	68fb      	ldr	r3, [r7, #12]
1000832a:	609a      	str	r2, [r3, #8]
}
1000832c:	bf00      	nop
1000832e:	3714      	adds	r7, #20
10008330:	46bd      	mov	sp, r7
10008332:	f85d 7b04 	ldr.w	r7, [sp], #4
10008336:	4770      	bx	lr

10008338 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
10008338:	b580      	push	{r7, lr}
1000833a:	b086      	sub	sp, #24
1000833c:	af00      	add	r7, sp, #0
1000833e:	6078      	str	r0, [r7, #4]
10008340:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10008342:	687b      	ldr	r3, [r7, #4]
10008344:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10008346:	683b      	ldr	r3, [r7, #0]
10008348:	3b10      	subs	r3, #16
1000834a:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
1000834c:	693b      	ldr	r3, [r7, #16]
1000834e:	689b      	ldr	r3, [r3, #8]
10008350:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
10008352:	687b      	ldr	r3, [r7, #4]
10008354:	3358      	adds	r3, #88	@ 0x58
10008356:	4618      	mov	r0, r3
10008358:	f7ff fe92 	bl	10008080 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
1000835c:	697b      	ldr	r3, [r7, #20]
1000835e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10008360:	89fa      	ldrh	r2, [r7, #14]
10008362:	4611      	mov	r1, r2
10008364:	4618      	mov	r0, r3
10008366:	f000 fd1f 	bl	10008da8 <virtqueue_get_buffer_length>
1000836a:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000836c:	89fb      	ldrh	r3, [r7, #14]
1000836e:	68ba      	ldr	r2, [r7, #8]
10008370:	6939      	ldr	r1, [r7, #16]
10008372:	6978      	ldr	r0, [r7, #20]
10008374:	f7ff ff40 	bl	100081f8 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
10008378:	687b      	ldr	r3, [r7, #4]
1000837a:	3358      	adds	r3, #88	@ 0x58
1000837c:	4618      	mov	r0, r3
1000837e:	f7ff fe8a 	bl	10008096 <metal_mutex_release>
}
10008382:	bf00      	nop
10008384:	3718      	adds	r7, #24
10008386:	46bd      	mov	sp, r7
10008388:	bd80      	pop	{r7, pc}

1000838a <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
1000838a:	b580      	push	{r7, lr}
1000838c:	b08a      	sub	sp, #40	@ 0x28
1000838e:	af00      	add	r7, sp, #0
10008390:	60f8      	str	r0, [r7, #12]
10008392:	60b9      	str	r1, [r7, #8]
10008394:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10008396:	68fb      	ldr	r3, [r7, #12]
10008398:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
1000839a:	6a38      	ldr	r0, [r7, #32]
1000839c:	f7ff fea6 	bl	100080ec <rpmsg_virtio_get_status>
100083a0:	4603      	mov	r3, r0
100083a2:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
100083a4:	69fb      	ldr	r3, [r7, #28]
100083a6:	f003 0304 	and.w	r3, r3, #4
100083aa:	2b00      	cmp	r3, #0
100083ac:	d101      	bne.n	100083b2 <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
100083ae:	2300      	movs	r3, #0
100083b0:	e039      	b.n	10008426 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
100083b2:	687b      	ldr	r3, [r7, #4]
100083b4:	2b00      	cmp	r3, #0
100083b6:	d003      	beq.n	100083c0 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
100083b8:	f643 2398 	movw	r3, #15000	@ 0x3a98
100083bc:	627b      	str	r3, [r7, #36]	@ 0x24
100083be:	e001      	b.n	100083c4 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
100083c0:	2300      	movs	r3, #0
100083c2:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
100083c4:	68fb      	ldr	r3, [r7, #12]
100083c6:	3358      	adds	r3, #88	@ 0x58
100083c8:	4618      	mov	r0, r3
100083ca:	f7ff fe59 	bl	10008080 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
100083ce:	f107 0316 	add.w	r3, r7, #22
100083d2:	461a      	mov	r2, r3
100083d4:	68b9      	ldr	r1, [r7, #8]
100083d6:	6a38      	ldr	r0, [r7, #32]
100083d8:	f7ff ff44 	bl	10008264 <rpmsg_virtio_get_tx_buffer>
100083dc:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
100083de:	68fb      	ldr	r3, [r7, #12]
100083e0:	3358      	adds	r3, #88	@ 0x58
100083e2:	4618      	mov	r0, r3
100083e4:	f7ff fe57 	bl	10008096 <metal_mutex_release>
		if (rp_hdr || !tick_count)
100083e8:	69bb      	ldr	r3, [r7, #24]
100083ea:	2b00      	cmp	r3, #0
100083ec:	d10a      	bne.n	10008404 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
100083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100083f0:	2b00      	cmp	r3, #0
100083f2:	d007      	beq.n	10008404 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
100083f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
100083f8:	f7ff fda7 	bl	10007f4a <metal_sleep_usec>
		tick_count--;
100083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100083fe:	3b01      	subs	r3, #1
10008400:	627b      	str	r3, [r7, #36]	@ 0x24
		metal_mutex_acquire(&rdev->lock);
10008402:	e7df      	b.n	100083c4 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
10008404:	69bb      	ldr	r3, [r7, #24]
10008406:	2b00      	cmp	r3, #0
10008408:	d101      	bne.n	1000840e <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
1000840a:	2300      	movs	r3, #0
1000840c:	e00b      	b.n	10008426 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000840e:	8afb      	ldrh	r3, [r7, #22]
10008410:	461a      	mov	r2, r3
10008412:	69bb      	ldr	r3, [r7, #24]
10008414:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
10008416:	68bb      	ldr	r3, [r7, #8]
10008418:	681b      	ldr	r3, [r3, #0]
1000841a:	f1a3 0210 	sub.w	r2, r3, #16
1000841e:	68bb      	ldr	r3, [r7, #8]
10008420:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
10008422:	69bb      	ldr	r3, [r7, #24]
10008424:	3310      	adds	r3, #16
}
10008426:	4618      	mov	r0, r3
10008428:	3728      	adds	r7, #40	@ 0x28
1000842a:	46bd      	mov	sp, r7
1000842c:	bd80      	pop	{r7, pc}
	...

10008430 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
10008430:	b580      	push	{r7, lr}
10008432:	b08e      	sub	sp, #56	@ 0x38
10008434:	af00      	add	r7, sp, #0
10008436:	60f8      	str	r0, [r7, #12]
10008438:	60b9      	str	r1, [r7, #8]
1000843a:	607a      	str	r2, [r7, #4]
1000843c:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000843e:	68fb      	ldr	r3, [r7, #12]
10008440:	637b      	str	r3, [r7, #52]	@ 0x34

	hdr = RPMSG_LOCATE_HDR(data);
10008442:	683b      	ldr	r3, [r7, #0]
10008444:	3b10      	subs	r3, #16
10008446:	633b      	str	r3, [r7, #48]	@ 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
10008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000844a:	689b      	ldr	r3, [r3, #8]
1000844c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
1000844e:	687b      	ldr	r3, [r7, #4]
10008450:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
10008452:	68bb      	ldr	r3, [r7, #8]
10008454:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
10008456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10008458:	b29b      	uxth	r3, r3
1000845a:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
1000845c:	2300      	movs	r3, #0
1000845e:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
10008460:	2300      	movs	r3, #0
10008462:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
10008464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000846a:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
1000846c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
1000846e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10008470:	f7ff fd87 	bl	10007f82 <metal_io_virt_to_offset>
10008474:	4601      	mov	r1, r0
10008476:	f107 0210 	add.w	r2, r7, #16
1000847a:	2310      	movs	r3, #16
1000847c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000847e:	f7fe feb3 	bl	100071e8 <metal_io_block_write>
10008482:	6278      	str	r0, [r7, #36]	@ 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
10008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008486:	2b10      	cmp	r3, #16
10008488:	d006      	beq.n	10008498 <rpmsg_virtio_send_offchannel_nocopy+0x68>
1000848a:	4b1b      	ldr	r3, [pc, #108]	@ (100084f8 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
1000848c:	4a1b      	ldr	r2, [pc, #108]	@ (100084fc <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000848e:	f240 117d 	movw	r1, #381	@ 0x17d
10008492:	481b      	ldr	r0, [pc, #108]	@ (10008500 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10008494:	f001 f832 	bl	100094fc <__assert_func>

	metal_mutex_acquire(&rdev->lock);
10008498:	68fb      	ldr	r3, [r7, #12]
1000849a:	3358      	adds	r3, #88	@ 0x58
1000849c:	4618      	mov	r0, r3
1000849e:	f7ff fdef 	bl	10008080 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
100084a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100084a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100084a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
100084aa:	4611      	mov	r1, r2
100084ac:	4618      	mov	r0, r3
100084ae:	f000 fc7b 	bl	10008da8 <virtqueue_get_buffer_length>
100084b2:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
100084b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
100084b6:	6a3a      	ldr	r2, [r7, #32]
100084b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
100084ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
100084bc:	f7ff feb5 	bl	1000822a <rpmsg_virtio_enqueue_buffer>
100084c0:	6278      	str	r0, [r7, #36]	@ 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
100084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100084c4:	2b00      	cmp	r3, #0
100084c6:	d006      	beq.n	100084d6 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
100084c8:	4b0e      	ldr	r3, [pc, #56]	@ (10008504 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
100084ca:	4a0c      	ldr	r2, [pc, #48]	@ (100084fc <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
100084cc:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
100084d0:	480b      	ldr	r0, [pc, #44]	@ (10008500 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
100084d2:	f001 f813 	bl	100094fc <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
100084d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100084d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100084dc:	4618      	mov	r0, r3
100084de:	f000 fd37 	bl	10008f50 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
100084e2:	68fb      	ldr	r3, [r7, #12]
100084e4:	3358      	adds	r3, #88	@ 0x58
100084e6:	4618      	mov	r0, r3
100084e8:	f7ff fdd5 	bl	10008096 <metal_mutex_release>

	return len;
100084ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
100084ee:	4618      	mov	r0, r3
100084f0:	3738      	adds	r7, #56	@ 0x38
100084f2:	46bd      	mov	sp, r7
100084f4:	bd80      	pop	{r7, pc}
100084f6:	bf00      	nop
100084f8:	1000b160 	.word	0x1000b160
100084fc:	1000b2b4 	.word	0x1000b2b4
10008500:	1000b17c 	.word	0x1000b17c
10008504:	1000b1fc 	.word	0x1000b1fc

10008508 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
10008508:	b580      	push	{r7, lr}
1000850a:	b08c      	sub	sp, #48	@ 0x30
1000850c:	af02      	add	r7, sp, #8
1000850e:	60f8      	str	r0, [r7, #12]
10008510:	60b9      	str	r1, [r7, #8]
10008512:	607a      	str	r2, [r7, #4]
10008514:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10008516:	68fb      	ldr	r3, [r7, #12]
10008518:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
1000851a:	f107 0314 	add.w	r3, r7, #20
1000851e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008520:	4619      	mov	r1, r3
10008522:	68f8      	ldr	r0, [r7, #12]
10008524:	f7ff ff31 	bl	1000838a <rpmsg_virtio_get_tx_payload_buffer>
10008528:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000852a:	6a3b      	ldr	r3, [r7, #32]
1000852c:	2b00      	cmp	r3, #0
1000852e:	d101      	bne.n	10008534 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
10008530:	4b17      	ldr	r3, [pc, #92]	@ (10008590 <rpmsg_virtio_send_offchannel_raw+0x88>)
10008532:	e029      	b.n	10008588 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
10008534:	697b      	ldr	r3, [r7, #20]
10008536:	461a      	mov	r2, r3
10008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000853a:	4293      	cmp	r3, r2
1000853c:	dd01      	ble.n	10008542 <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
1000853e:	697b      	ldr	r3, [r7, #20]
10008540:	633b      	str	r3, [r7, #48]	@ 0x30
	io = rvdev->shbuf_io;
10008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10008548:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000854a:	6a39      	ldr	r1, [r7, #32]
1000854c:	69f8      	ldr	r0, [r7, #28]
1000854e:	f7ff fd18 	bl	10007f82 <metal_io_virt_to_offset>
10008552:	4601      	mov	r1, r0
10008554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008556:	683a      	ldr	r2, [r7, #0]
10008558:	69f8      	ldr	r0, [r7, #28]
1000855a:	f7fe fe45 	bl	100071e8 <metal_io_block_write>
1000855e:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10008560:	69ba      	ldr	r2, [r7, #24]
10008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008564:	429a      	cmp	r2, r3
10008566:	d006      	beq.n	10008576 <rpmsg_virtio_send_offchannel_raw+0x6e>
10008568:	4b0a      	ldr	r3, [pc, #40]	@ (10008594 <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000856a:	4a0b      	ldr	r2, [pc, #44]	@ (10008598 <rpmsg_virtio_send_offchannel_raw+0x90>)
1000856c:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
10008570:	480a      	ldr	r0, [pc, #40]	@ (1000859c <rpmsg_virtio_send_offchannel_raw+0x94>)
10008572:	f000 ffc3 	bl	100094fc <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
10008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008578:	9300      	str	r3, [sp, #0]
1000857a:	6a3b      	ldr	r3, [r7, #32]
1000857c:	687a      	ldr	r2, [r7, #4]
1000857e:	68b9      	ldr	r1, [r7, #8]
10008580:	68f8      	ldr	r0, [r7, #12]
10008582:	f7ff ff55 	bl	10008430 <rpmsg_virtio_send_offchannel_nocopy>
10008586:	4603      	mov	r3, r0
}
10008588:	4618      	mov	r0, r3
1000858a:	3728      	adds	r7, #40	@ 0x28
1000858c:	46bd      	mov	sp, r7
1000858e:	bd80      	pop	{r7, pc}
10008590:	fffff82e 	.word	0xfffff82e
10008594:	1000b208 	.word	0x1000b208
10008598:	1000b2d8 	.word	0x1000b2d8
1000859c:	1000b17c 	.word	0x1000b17c

100085a0 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
100085a0:	b480      	push	{r7}
100085a2:	b083      	sub	sp, #12
100085a4:	af00      	add	r7, sp, #0
100085a6:	6078      	str	r0, [r7, #4]
	(void)vq;
}
100085a8:	bf00      	nop
100085aa:	370c      	adds	r7, #12
100085ac:	46bd      	mov	sp, r7
100085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
100085b2:	4770      	bx	lr

100085b4 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
100085b4:	b590      	push	{r4, r7, lr}
100085b6:	b08d      	sub	sp, #52	@ 0x34
100085b8:	af02      	add	r7, sp, #8
100085ba:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
100085bc:	687b      	ldr	r3, [r7, #4]
100085be:	681b      	ldr	r3, [r3, #0]
100085c0:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
100085c2:	6a3b      	ldr	r3, [r7, #32]
100085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100085c6:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
100085c8:	69fb      	ldr	r3, [r7, #28]
100085ca:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
100085cc:	69bb      	ldr	r3, [r7, #24]
100085ce:	3358      	adds	r3, #88	@ 0x58
100085d0:	4618      	mov	r0, r3
100085d2:	f7ff fd55 	bl	10008080 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
100085d6:	f107 020a 	add.w	r2, r7, #10
100085da:	f107 030c 	add.w	r3, r7, #12
100085de:	4619      	mov	r1, r3
100085e0:	69f8      	ldr	r0, [r7, #28]
100085e2:	f7ff fe5c 	bl	1000829e <rpmsg_virtio_get_rx_buffer>
100085e6:	6278      	str	r0, [r7, #36]	@ 0x24

	metal_mutex_release(&rdev->lock);
100085e8:	69bb      	ldr	r3, [r7, #24]
100085ea:	3358      	adds	r3, #88	@ 0x58
100085ec:	4618      	mov	r0, r3
100085ee:	f7ff fd52 	bl	10008096 <metal_mutex_release>

	while (rp_hdr) {
100085f2:	e062      	b.n	100086ba <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
100085f4:	897b      	ldrh	r3, [r7, #10]
100085f6:	461a      	mov	r2, r3
100085f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100085fa:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
100085fc:	69bb      	ldr	r3, [r7, #24]
100085fe:	3358      	adds	r3, #88	@ 0x58
10008600:	4618      	mov	r0, r3
10008602:	f7ff fd3d 	bl	10008080 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
10008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008608:	685b      	ldr	r3, [r3, #4]
1000860a:	4619      	mov	r1, r3
1000860c:	69b8      	ldr	r0, [r7, #24]
1000860e:	f7ff fdc9 	bl	100081a4 <rpmsg_get_ept_from_addr>
10008612:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
10008614:	69bb      	ldr	r3, [r7, #24]
10008616:	3358      	adds	r3, #88	@ 0x58
10008618:	4618      	mov	r0, r3
1000861a:	f7ff fd3c 	bl	10008096 <metal_mutex_release>

		if (ept) {
1000861e:	697b      	ldr	r3, [r7, #20]
10008620:	2b00      	cmp	r3, #0
10008622:	d025      	beq.n	10008670 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
10008624:	697b      	ldr	r3, [r7, #20]
10008626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008628:	f1b3 3fff 	cmp.w	r3, #4294967295
1000862c:	d103      	bne.n	10008636 <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008630:	681a      	ldr	r2, [r3, #0]
10008632:	697b      	ldr	r3, [r7, #20]
10008634:	629a      	str	r2, [r3, #40]	@ 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10008636:	697b      	ldr	r3, [r7, #20]
10008638:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
1000863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000863c:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
10008640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008642:	899b      	ldrh	r3, [r3, #12]
10008644:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10008646:	4618      	mov	r0, r3
10008648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000864a:	681a      	ldr	r2, [r3, #0]
1000864c:	697b      	ldr	r3, [r7, #20]
1000864e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10008650:	9300      	str	r3, [sp, #0]
10008652:	4613      	mov	r3, r2
10008654:	4602      	mov	r2, r0
10008656:	6978      	ldr	r0, [r7, #20]
10008658:	47a0      	blx	r4
1000865a:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
1000865c:	693b      	ldr	r3, [r7, #16]
1000865e:	2b00      	cmp	r3, #0
10008660:	da06      	bge.n	10008670 <rpmsg_virtio_rx_callback+0xbc>
10008662:	4b1a      	ldr	r3, [pc, #104]	@ (100086cc <rpmsg_virtio_rx_callback+0x118>)
10008664:	4a1a      	ldr	r2, [pc, #104]	@ (100086d0 <rpmsg_virtio_rx_callback+0x11c>)
10008666:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
1000866a:	481a      	ldr	r0, [pc, #104]	@ (100086d4 <rpmsg_virtio_rx_callback+0x120>)
1000866c:	f000 ff46 	bl	100094fc <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
10008670:	69bb      	ldr	r3, [r7, #24]
10008672:	3358      	adds	r3, #88	@ 0x58
10008674:	4618      	mov	r0, r3
10008676:	f7ff fd03 	bl	10008080 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000867c:	689b      	ldr	r3, [r3, #8]
1000867e:	2b00      	cmp	r3, #0
10008680:	db05      	blt.n	1000868e <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10008682:	68fa      	ldr	r2, [r7, #12]
10008684:	897b      	ldrh	r3, [r7, #10]
10008686:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10008688:	69f8      	ldr	r0, [r7, #28]
1000868a:	f7ff fdb5 	bl	100081f8 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000868e:	f107 020a 	add.w	r2, r7, #10
10008692:	f107 030c 	add.w	r3, r7, #12
10008696:	4619      	mov	r1, r3
10008698:	69f8      	ldr	r0, [r7, #28]
1000869a:	f7ff fe00 	bl	1000829e <rpmsg_virtio_get_rx_buffer>
1000869e:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!rp_hdr) {
100086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100086a2:	2b00      	cmp	r3, #0
100086a4:	d104      	bne.n	100086b0 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
100086a6:	69fb      	ldr	r3, [r7, #28]
100086a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100086aa:	4618      	mov	r0, r3
100086ac:	f000 fc50 	bl	10008f50 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
100086b0:	69bb      	ldr	r3, [r7, #24]
100086b2:	3358      	adds	r3, #88	@ 0x58
100086b4:	4618      	mov	r0, r3
100086b6:	f7ff fcee 	bl	10008096 <metal_mutex_release>
	while (rp_hdr) {
100086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100086bc:	2b00      	cmp	r3, #0
100086be:	d199      	bne.n	100085f4 <rpmsg_virtio_rx_callback+0x40>
	}
}
100086c0:	bf00      	nop
100086c2:	bf00      	nop
100086c4:	372c      	adds	r7, #44	@ 0x2c
100086c6:	46bd      	mov	sp, r7
100086c8:	bd90      	pop	{r4, r7, pc}
100086ca:	bf00      	nop
100086cc:	1000b218 	.word	0x1000b218
100086d0:	1000b2fc 	.word	0x1000b2fc
100086d4:	1000b17c 	.word	0x1000b17c

100086d8 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
100086d8:	b580      	push	{r7, lr}
100086da:	b092      	sub	sp, #72	@ 0x48
100086dc:	af00      	add	r7, sp, #0
100086de:	60f8      	str	r0, [r7, #12]
100086e0:	60b9      	str	r1, [r7, #8]
100086e2:	607a      	str	r2, [r7, #4]
100086e4:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
100086e6:	68fb      	ldr	r3, [r7, #12]
100086e8:	6a1b      	ldr	r3, [r3, #32]
100086ea:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
100086ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100086ee:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
100086f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100086f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
100086f8:	68bb      	ldr	r3, [r7, #8]
100086fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
100086fc:	687b      	ldr	r3, [r7, #4]
100086fe:	2b28      	cmp	r3, #40	@ 0x28
10008700:	d001      	beq.n	10008706 <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
10008702:	2300      	movs	r3, #0
10008704:	e057      	b.n	100087b6 <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
10008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
10008708:	4619      	mov	r1, r3
1000870a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
1000870c:	f7ff fc39 	bl	10007f82 <metal_io_virt_to_offset>
10008710:	4601      	mov	r1, r0
10008712:	f107 0210 	add.w	r2, r7, #16
10008716:	2320      	movs	r3, #32
10008718:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
1000871a:	f7fe fcf0 	bl	100070fe <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10008720:	6a1b      	ldr	r3, [r3, #32]
10008722:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
10008724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008726:	3358      	adds	r3, #88	@ 0x58
10008728:	4618      	mov	r0, r3
1000872a:	f7ff fca9 	bl	10008080 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000872e:	f107 0110 	add.w	r1, r7, #16
10008732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008734:	f04f 32ff 	mov.w	r2, #4294967295
10008738:	6c78      	ldr	r0, [r7, #68]	@ 0x44
1000873a:	f7ff fadb 	bl	10007cf4 <rpmsg_get_endpoint>
1000873e:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
10008740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10008742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008744:	f003 0301 	and.w	r3, r3, #1
10008748:	2b00      	cmp	r3, #0
1000874a:	d017      	beq.n	1000877c <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
1000874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000874e:	2b00      	cmp	r3, #0
10008750:	d003      	beq.n	1000875a <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
10008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008754:	f04f 32ff 	mov.w	r2, #4294967295
10008758:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
1000875a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000875c:	3358      	adds	r3, #88	@ 0x58
1000875e:	4618      	mov	r0, r3
10008760:	f7ff fc99 	bl	10008096 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
10008764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008766:	2b00      	cmp	r3, #0
10008768:	d024      	beq.n	100087b4 <rpmsg_virtio_ns_callback+0xdc>
1000876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000876c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000876e:	2b00      	cmp	r3, #0
10008770:	d020      	beq.n	100087b4 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
10008772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008776:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10008778:	4798      	blx	r3
1000877a:	e01b      	b.n	100087b4 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
1000877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000877e:	2b00      	cmp	r3, #0
10008780:	d110      	bne.n	100087a4 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
10008782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008784:	3358      	adds	r3, #88	@ 0x58
10008786:	4618      	mov	r0, r3
10008788:	f7ff fc85 	bl	10008096 <metal_mutex_release>
			if (rdev->ns_bind_cb)
1000878c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000878e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10008790:	2b00      	cmp	r3, #0
10008792:	d00f      	beq.n	100087b4 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
10008794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10008798:	f107 0110 	add.w	r1, r7, #16
1000879c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000879e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
100087a0:	4798      	blx	r3
100087a2:	e007      	b.n	100087b4 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
100087a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100087a8:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
100087aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100087ac:	3358      	adds	r3, #88	@ 0x58
100087ae:	4618      	mov	r0, r3
100087b0:	f7ff fc71 	bl	10008096 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
100087b4:	2300      	movs	r3, #0
}
100087b6:	4618      	mov	r0, r3
100087b8:	3748      	adds	r7, #72	@ 0x48
100087ba:	46bd      	mov	sp, r7
100087bc:	bd80      	pop	{r7, pc}
	...

100087c0 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
100087c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
100087c4:	b090      	sub	sp, #64	@ 0x40
100087c6:	af02      	add	r7, sp, #8
100087c8:	60f8      	str	r0, [r7, #12]
100087ca:	60b9      	str	r1, [r7, #8]
100087cc:	607a      	str	r2, [r7, #4]
100087ce:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
100087d0:	68fb      	ldr	r3, [r7, #12]
100087d2:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
100087d4:	2278      	movs	r2, #120	@ 0x78
100087d6:	2100      	movs	r1, #0
100087d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100087da:	f001 f947 	bl	10009a6c <memset>
	metal_mutex_init(&rdev->lock);
100087de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087e0:	3358      	adds	r3, #88	@ 0x58
100087e2:	4618      	mov	r0, r3
100087e4:	f7ff fc41 	bl	1000806a <metal_mutex_init>
	rvdev->vdev = vdev;
100087e8:	68fb      	ldr	r3, [r7, #12]
100087ea:	68ba      	ldr	r2, [r7, #8]
100087ec:	679a      	str	r2, [r3, #120]	@ 0x78
	rdev->ns_bind_cb = ns_bind_cb;
100087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087f0:	687a      	ldr	r2, [r7, #4]
100087f2:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
100087f4:	68bb      	ldr	r3, [r7, #8]
100087f6:	68fa      	ldr	r2, [r7, #12]
100087f8:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
100087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100087fc:	4a4c      	ldr	r2, [pc, #304]	@ (10008930 <rpmsg_init_vdev+0x170>)
100087fe:	661a      	str	r2, [r3, #96]	@ 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
10008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008802:	4a4c      	ldr	r2, [pc, #304]	@ (10008934 <rpmsg_init_vdev+0x174>)
10008804:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
10008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008808:	4a4b      	ldr	r2, [pc, #300]	@ (10008938 <rpmsg_init_vdev+0x178>)
1000880a:	669a      	str	r2, [r3, #104]	@ 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
1000880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000880e:	4a4b      	ldr	r2, [pc, #300]	@ (1000893c <rpmsg_init_vdev+0x17c>)
10008810:	66da      	str	r2, [r3, #108]	@ 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
10008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008814:	4a4a      	ldr	r2, [pc, #296]	@ (10008940 <rpmsg_init_vdev+0x180>)
10008816:	671a      	str	r2, [r3, #112]	@ 0x70
	role = rpmsg_virtio_get_role(rvdev);
10008818:	68f8      	ldr	r0, [r7, #12]
1000881a:	f7ff fc47 	bl	100080ac <rpmsg_virtio_get_role>
1000881e:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10008820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008822:	2b01      	cmp	r3, #1
10008824:	d102      	bne.n	1000882c <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
10008826:	68f8      	ldr	r0, [r7, #12]
10008828:	f7ff fd55 	bl	100082d6 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
1000882c:	68f8      	ldr	r0, [r7, #12]
1000882e:	f7ff fc6e 	bl	1000810e <rpmsg_virtio_get_features>
10008832:	4603      	mov	r3, r0
10008834:	2200      	movs	r2, #0
10008836:	4698      	mov	r8, r3
10008838:	4691      	mov	r9, r2
1000883a:	68bb      	ldr	r3, [r7, #8]
1000883c:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
10008840:	68bb      	ldr	r3, [r7, #8]
10008842:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
10008846:	f002 0401 	and.w	r4, r2, #1
1000884a:	2500      	movs	r5, #0
1000884c:	ea54 0305 	orrs.w	r3, r4, r5
10008850:	bf14      	ite	ne
10008852:	2301      	movne	r3, #1
10008854:	2300      	moveq	r3, #0
10008856:	b2da      	uxtb	r2, r3
10008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000885a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
1000885e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008860:	2b01      	cmp	r3, #1
10008862:	d113      	bne.n	1000888c <rpmsg_init_vdev+0xcc>
		vq_names[0] = "tx_vq";
10008864:	4b37      	ldr	r3, [pc, #220]	@ (10008944 <rpmsg_init_vdev+0x184>)
10008866:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
10008868:	4b37      	ldr	r3, [pc, #220]	@ (10008948 <rpmsg_init_vdev+0x188>)
1000886a:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000886c:	4b37      	ldr	r3, [pc, #220]	@ (1000894c <rpmsg_init_vdev+0x18c>)
1000886e:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
10008870:	4b37      	ldr	r3, [pc, #220]	@ (10008950 <rpmsg_init_vdev+0x190>)
10008872:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
10008874:	68bb      	ldr	r3, [r7, #8]
10008876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10008878:	3318      	adds	r3, #24
1000887a:	681a      	ldr	r2, [r3, #0]
1000887c:	68fb      	ldr	r3, [r7, #12]
1000887e:	67da      	str	r2, [r3, #124]	@ 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
10008880:	68bb      	ldr	r3, [r7, #8]
10008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10008884:	681a      	ldr	r2, [r3, #0]
10008886:	68fb      	ldr	r3, [r7, #12]
10008888:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
1000888c:	68fb      	ldr	r3, [r7, #12]
1000888e:	683a      	ldr	r2, [r7, #0]
10008890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
10008894:	f107 021c 	add.w	r2, r7, #28
10008898:	f107 0314 	add.w	r3, r7, #20
1000889c:	9300      	str	r3, [sp, #0]
1000889e:	4613      	mov	r3, r2
100088a0:	2202      	movs	r2, #2
100088a2:	2100      	movs	r1, #0
100088a4:	68f8      	ldr	r0, [r7, #12]
100088a6:	f7ff fc43 	bl	10008130 <rpmsg_virtio_create_virtqueues>
100088aa:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
100088ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100088ae:	2b00      	cmp	r3, #0
100088b0:	d001      	beq.n	100088b6 <rpmsg_init_vdev+0xf6>
		return status;
100088b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100088b4:	e037      	b.n	10008926 <rpmsg_init_vdev+0x166>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
100088b6:	68fb      	ldr	r3, [r7, #12]
100088b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100088bc:	4618      	mov	r0, r3
100088be:	f000 fb0f 	bl	10008ee0 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
100088c2:	2300      	movs	r3, #0
100088c4:	637b      	str	r3, [r7, #52]	@ 0x34
100088c6:	e00f      	b.n	100088e8 <rpmsg_init_vdev+0x128>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
100088c8:	68bb      	ldr	r3, [r7, #8]
100088ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100088cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100088ce:	4613      	mov	r3, r2
100088d0:	005b      	lsls	r3, r3, #1
100088d2:	4413      	add	r3, r2
100088d4:	00db      	lsls	r3, r3, #3
100088d6:	440b      	add	r3, r1
100088d8:	681b      	ldr	r3, [r3, #0]
100088da:	627b      	str	r3, [r7, #36]	@ 0x24
		vq->shm_io = shm_io;
100088dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100088de:	683a      	ldr	r2, [r7, #0]
100088e0:	629a      	str	r2, [r3, #40]	@ 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
100088e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100088e4:	3301      	adds	r3, #1
100088e6:	637b      	str	r3, [r7, #52]	@ 0x34
100088e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100088ea:	2b01      	cmp	r3, #1
100088ec:	d9ec      	bls.n	100088c8 <rpmsg_init_vdev+0x108>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
100088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100088f0:	4618      	mov	r0, r3
100088f2:	f7ff fb36 	bl	10007f62 <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
100088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100088f8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
100088fc:	2b00      	cmp	r3, #0
100088fe:	d011      	beq.n	10008924 <rpmsg_init_vdev+0x164>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
10008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10008902:	f103 0008 	add.w	r0, r3, #8
10008906:	2300      	movs	r3, #0
10008908:	9301      	str	r3, [sp, #4]
1000890a:	4b12      	ldr	r3, [pc, #72]	@ (10008954 <rpmsg_init_vdev+0x194>)
1000890c:	9300      	str	r3, [sp, #0]
1000890e:	2335      	movs	r3, #53	@ 0x35
10008910:	2235      	movs	r2, #53	@ 0x35
10008912:	4911      	ldr	r1, [pc, #68]	@ (10008958 <rpmsg_init_vdev+0x198>)
10008914:	f7ff fc22 	bl	1000815c <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
10008918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000891a:	3308      	adds	r3, #8
1000891c:	4619      	mov	r1, r3
1000891e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10008920:	f7ff fa73 	bl	10007e0a <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
10008924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
10008926:	4618      	mov	r0, r3
10008928:	3738      	adds	r7, #56	@ 0x38
1000892a:	46bd      	mov	sp, r7
1000892c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
10008930:	10008509 	.word	0x10008509
10008934:	10008311 	.word	0x10008311
10008938:	10008339 	.word	0x10008339
1000893c:	1000838b 	.word	0x1000838b
10008940:	10008431 	.word	0x10008431
10008944:	1000b224 	.word	0x1000b224
10008948:	1000b22c 	.word	0x1000b22c
1000894c:	100085a1 	.word	0x100085a1
10008950:	100085b5 	.word	0x100085b5
10008954:	100086d9 	.word	0x100086d9
10008958:	1000b234 	.word	0x1000b234

1000895c <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
1000895c:	b480      	push	{r7}
1000895e:	b083      	sub	sp, #12
10008960:	af00      	add	r7, sp, #0
10008962:	6078      	str	r0, [r7, #4]
10008964:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10008966:	bf00      	nop
10008968:	370c      	adds	r7, #12
1000896a:	46bd      	mov	sp, r7
1000896c:	f85d 7b04 	ldr.w	r7, [sp], #4
10008970:	4770      	bx	lr

10008972 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
10008972:	b480      	push	{r7}
10008974:	b083      	sub	sp, #12
10008976:	af00      	add	r7, sp, #0
10008978:	6078      	str	r0, [r7, #4]
1000897a:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000897c:	bf00      	nop
1000897e:	370c      	adds	r7, #12
10008980:	46bd      	mov	sp, r7
10008982:	f85d 7b04 	ldr.w	r7, [sp], #4
10008986:	4770      	bx	lr

10008988 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
10008988:	b480      	push	{r7}
1000898a:	b085      	sub	sp, #20
1000898c:	af00      	add	r7, sp, #0
1000898e:	60f8      	str	r0, [r7, #12]
10008990:	60b9      	str	r1, [r7, #8]
10008992:	607a      	str	r2, [r7, #4]
10008994:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
10008996:	68fb      	ldr	r3, [r7, #12]
}
10008998:	4618      	mov	r0, r3
1000899a:	3714      	adds	r7, #20
1000899c:	46bd      	mov	sp, r7
1000899e:	f85d 7b04 	ldr.w	r7, [sp], #4
100089a2:	4770      	bx	lr

100089a4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
100089a4:	b580      	push	{r7, lr}
100089a6:	b086      	sub	sp, #24
100089a8:	af02      	add	r7, sp, #8
100089aa:	60f8      	str	r0, [r7, #12]
100089ac:	60b9      	str	r1, [r7, #8]
100089ae:	607a      	str	r2, [r7, #4]
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
100089b0:	68fb      	ldr	r3, [r7, #12]
100089b2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
100089b4:	68fb      	ldr	r3, [r7, #12]
100089b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100089b8:	2301      	movs	r3, #1
100089ba:	9301      	str	r3, [sp, #4]
100089bc:	687b      	ldr	r3, [r7, #4]
100089be:	9300      	str	r3, [sp, #0]
100089c0:	68bb      	ldr	r3, [r7, #8]
100089c2:	68f8      	ldr	r0, [r7, #12]
100089c4:	f7ff f93c 	bl	10007c40 <rpmsg_send_offchannel_raw>
100089c8:	4603      	mov	r3, r0
					 len, true);
}
100089ca:	4618      	mov	r0, r3
100089cc:	3710      	adds	r7, #16
100089ce:	46bd      	mov	sp, r7
100089d0:	bd80      	pop	{r7, pc}

100089d2 <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
100089d2:	b580      	push	{r7, lr}
100089d4:	b086      	sub	sp, #24
100089d6:	af00      	add	r7, sp, #0
100089d8:	60f8      	str	r0, [r7, #12]
100089da:	60b9      	str	r1, [r7, #8]
100089dc:	607a      	str	r2, [r7, #4]
100089de:	603b      	str	r3, [r7, #0]
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
100089e0:	68fb      	ldr	r3, [r7, #12]
100089e2:	617b      	str	r3, [r7, #20]
  (void)src;

  huart->pRxBuffPtr = data;
100089e4:	697b      	ldr	r3, [r7, #20]
100089e6:	68ba      	ldr	r2, [r7, #8]
100089e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxXferSize = len;
100089ea:	687b      	ldr	r3, [r7, #4]
100089ec:	b29a      	uxth	r2, r3
100089ee:	697b      	ldr	r3, [r7, #20]
100089f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  if (huart->RxCpltCallback != NULL) {
100089f4:	697b      	ldr	r3, [r7, #20]
100089f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100089f8:	2b00      	cmp	r3, #0
100089fa:	d003      	beq.n	10008a04 <VIRT_UART_read_cb+0x32>
    huart->RxCpltCallback(huart);
100089fc:	697b      	ldr	r3, [r7, #20]
100089fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10008a00:	6978      	ldr	r0, [r7, #20]
10008a02:	4798      	blx	r3
  }

  return 0;
10008a04:	2300      	movs	r3, #0
}
10008a06:	4618      	mov	r0, r3
10008a08:	3718      	adds	r7, #24
10008a0a:	46bd      	mov	sp, r7
10008a0c:	bd80      	pop	{r7, pc}
	...

10008a10 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
10008a10:	b580      	push	{r7, lr}
10008a12:	b086      	sub	sp, #24
10008a14:	af02      	add	r7, sp, #8
10008a16:	6078      	str	r0, [r7, #4]

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
10008a18:	6878      	ldr	r0, [r7, #4]
10008a1a:	2300      	movs	r3, #0
10008a1c:	9300      	str	r3, [sp, #0]
10008a1e:	4b08      	ldr	r3, [pc, #32]	@ (10008a40 <VIRT_UART_Init+0x30>)
10008a20:	f04f 32ff 	mov.w	r2, #4294967295
10008a24:	4907      	ldr	r1, [pc, #28]	@ (10008a44 <VIRT_UART_Init+0x34>)
10008a26:	f000 fd2b 	bl	10009480 <OPENAMP_create_endpoint>
10008a2a:	60f8      	str	r0, [r7, #12]
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
10008a2c:	68fb      	ldr	r3, [r7, #12]
10008a2e:	2b00      	cmp	r3, #0
10008a30:	da01      	bge.n	10008a36 <VIRT_UART_Init+0x26>
    return VIRT_UART_ERROR;
10008a32:	2301      	movs	r3, #1
10008a34:	e000      	b.n	10008a38 <VIRT_UART_Init+0x28>
  }

  return VIRT_UART_OK;
10008a36:	2300      	movs	r3, #0
}
10008a38:	4618      	mov	r0, r3
10008a3a:	3710      	adds	r7, #16
10008a3c:	46bd      	mov	sp, r7
10008a3e:	bd80      	pop	{r7, pc}
10008a40:	100089d3 	.word	0x100089d3
10008a44:	1000b238 	.word	0x1000b238

10008a48 <VIRT_UART_RegisterCallback>:
}

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
10008a48:	b480      	push	{r7}
10008a4a:	b087      	sub	sp, #28
10008a4c:	af00      	add	r7, sp, #0
10008a4e:	60f8      	str	r0, [r7, #12]
10008a50:	460b      	mov	r3, r1
10008a52:	607a      	str	r2, [r7, #4]
10008a54:	72fb      	strb	r3, [r7, #11]
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;
10008a56:	2300      	movs	r3, #0
10008a58:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
10008a5a:	7afb      	ldrb	r3, [r7, #11]
10008a5c:	2b00      	cmp	r3, #0
10008a5e:	d103      	bne.n	10008a68 <VIRT_UART_RegisterCallback+0x20>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
10008a60:	68fb      	ldr	r3, [r7, #12]
10008a62:	687a      	ldr	r2, [r7, #4]
10008a64:	64da      	str	r2, [r3, #76]	@ 0x4c
    break;
10008a66:	e002      	b.n	10008a6e <VIRT_UART_RegisterCallback+0x26>

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
10008a68:	2301      	movs	r3, #1
10008a6a:	75fb      	strb	r3, [r7, #23]
    break;
10008a6c:	bf00      	nop
  }
  return status;
10008a6e:	7dfb      	ldrb	r3, [r7, #23]
}
10008a70:	4618      	mov	r0, r3
10008a72:	371c      	adds	r7, #28
10008a74:	46bd      	mov	sp, r7
10008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
10008a7a:	4770      	bx	lr

10008a7c <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
10008a7c:	b580      	push	{r7, lr}
10008a7e:	b086      	sub	sp, #24
10008a80:	af00      	add	r7, sp, #0
10008a82:	60f8      	str	r0, [r7, #12]
10008a84:	60b9      	str	r1, [r7, #8]
10008a86:	4613      	mov	r3, r2
10008a88:	80fb      	strh	r3, [r7, #6]
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
10008a8a:	88fb      	ldrh	r3, [r7, #6]
10008a8c:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
10008a90:	d901      	bls.n	10008a96 <VIRT_UART_Transmit+0x1a>
	  return VIRT_UART_ERROR;
10008a92:	2301      	movs	r3, #1
10008a94:	e00c      	b.n	10008ab0 <VIRT_UART_Transmit+0x34>

	res = OPENAMP_send(&huart->ept, pData, Size);
10008a96:	68fb      	ldr	r3, [r7, #12]
10008a98:	88fa      	ldrh	r2, [r7, #6]
10008a9a:	68b9      	ldr	r1, [r7, #8]
10008a9c:	4618      	mov	r0, r3
10008a9e:	f7ff ff81 	bl	100089a4 <rpmsg_send>
10008aa2:	6178      	str	r0, [r7, #20]
	if (res <0) {
10008aa4:	697b      	ldr	r3, [r7, #20]
10008aa6:	2b00      	cmp	r3, #0
10008aa8:	da01      	bge.n	10008aae <VIRT_UART_Transmit+0x32>
		return VIRT_UART_ERROR;
10008aaa:	2301      	movs	r3, #1
10008aac:	e000      	b.n	10008ab0 <VIRT_UART_Transmit+0x34>
	}

	return VIRT_UART_OK;
10008aae:	2300      	movs	r3, #0
}
10008ab0:	4618      	mov	r0, r3
10008ab2:	3718      	adds	r7, #24
10008ab4:	46bd      	mov	sp, r7
10008ab6:	bd80      	pop	{r7, pc}

10008ab8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
10008ab8:	b590      	push	{r4, r7, lr}
10008aba:	b08f      	sub	sp, #60	@ 0x3c
10008abc:	af04      	add	r7, sp, #16
10008abe:	60f8      	str	r0, [r7, #12]
10008ac0:	60b9      	str	r1, [r7, #8]
10008ac2:	607a      	str	r2, [r7, #4]
10008ac4:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
10008ac6:	68fb      	ldr	r3, [r7, #12]
10008ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008aca:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
10008acc:	687a      	ldr	r2, [r7, #4]
10008ace:	6a3b      	ldr	r3, [r7, #32]
10008ad0:	429a      	cmp	r2, r3
10008ad2:	d901      	bls.n	10008ad8 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
10008ad4:	4b1e      	ldr	r3, [pc, #120]	@ (10008b50 <virtio_create_virtqueues+0x98>)
10008ad6:	e036      	b.n	10008b46 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
10008ad8:	2300      	movs	r3, #0
10008ada:	627b      	str	r3, [r7, #36]	@ 0x24
10008adc:	e02e      	b.n	10008b3c <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
10008ade:	68fb      	ldr	r3, [r7, #12]
10008ae0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10008ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008ae4:	4613      	mov	r3, r2
10008ae6:	005b      	lsls	r3, r3, #1
10008ae8:	4413      	add	r3, r2
10008aea:	00db      	lsls	r3, r3, #3
10008aec:	440b      	add	r3, r1
10008aee:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
10008af0:	69fb      	ldr	r3, [r7, #28]
10008af2:	3304      	adds	r3, #4
10008af4:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008af8:	b298      	uxth	r0, r3
10008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008afc:	009b      	lsls	r3, r3, #2
10008afe:	683a      	ldr	r2, [r7, #0]
10008b00:	4413      	add	r3, r2
10008b02:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
10008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008b06:	009b      	lsls	r3, r3, #2
10008b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10008b0a:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008b0c:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
10008b0e:	68fa      	ldr	r2, [r7, #12]
10008b10:	6a12      	ldr	r2, [r2, #32]
10008b12:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008b14:	69f9      	ldr	r1, [r7, #28]
10008b16:	6809      	ldr	r1, [r1, #0]
10008b18:	9102      	str	r1, [sp, #8]
10008b1a:	9201      	str	r2, [sp, #4]
10008b1c:	9300      	str	r3, [sp, #0]
10008b1e:	69bb      	ldr	r3, [r7, #24]
10008b20:	4622      	mov	r2, r4
10008b22:	4601      	mov	r1, r0
10008b24:	68f8      	ldr	r0, [r7, #12]
10008b26:	f000 f90e 	bl	10008d46 <virtqueue_create>
10008b2a:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
10008b2c:	697b      	ldr	r3, [r7, #20]
10008b2e:	2b00      	cmp	r3, #0
10008b30:	d001      	beq.n	10008b36 <virtio_create_virtqueues+0x7e>
			return ret;
10008b32:	697b      	ldr	r3, [r7, #20]
10008b34:	e007      	b.n	10008b46 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
10008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008b38:	3301      	adds	r3, #1
10008b3a:	627b      	str	r3, [r7, #36]	@ 0x24
10008b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008b3e:	687b      	ldr	r3, [r7, #4]
10008b40:	429a      	cmp	r2, r3
10008b42:	d3cc      	bcc.n	10008ade <virtio_create_virtqueues+0x26>
	}
	return 0;
10008b44:	2300      	movs	r3, #0
}
10008b46:	4618      	mov	r0, r3
10008b48:	372c      	adds	r7, #44	@ 0x2c
10008b4a:	46bd      	mov	sp, r7
10008b4c:	bd90      	pop	{r4, r7, pc}
10008b4e:	bf00      	nop
10008b50:	fffff440 	.word	0xfffff440

10008b54 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
10008b54:	b480      	push	{r7}
10008b56:	b085      	sub	sp, #20
10008b58:	af00      	add	r7, sp, #0
10008b5a:	60f8      	str	r0, [r7, #12]
10008b5c:	60b9      	str	r1, [r7, #8]
10008b5e:	607a      	str	r2, [r7, #4]
10008b60:	603b      	str	r3, [r7, #0]
	vr->num = num;
10008b62:	68fb      	ldr	r3, [r7, #12]
10008b64:	68ba      	ldr	r2, [r7, #8]
10008b66:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
10008b68:	68fb      	ldr	r3, [r7, #12]
10008b6a:	687a      	ldr	r2, [r7, #4]
10008b6c:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
10008b6e:	68bb      	ldr	r3, [r7, #8]
10008b70:	011b      	lsls	r3, r3, #4
10008b72:	687a      	ldr	r2, [r7, #4]
10008b74:	441a      	add	r2, r3
10008b76:	68fb      	ldr	r3, [r7, #12]
10008b78:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
10008b7a:	68fb      	ldr	r3, [r7, #12]
10008b7c:	689a      	ldr	r2, [r3, #8]
10008b7e:	68bb      	ldr	r3, [r7, #8]
10008b80:	005b      	lsls	r3, r3, #1
10008b82:	4413      	add	r3, r2
10008b84:	3304      	adds	r3, #4
10008b86:	461a      	mov	r2, r3
10008b88:	683b      	ldr	r3, [r7, #0]
10008b8a:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
10008b8c:	1c5a      	adds	r2, r3, #1
10008b8e:	683b      	ldr	r3, [r7, #0]
10008b90:	425b      	negs	r3, r3
10008b92:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
10008b94:	461a      	mov	r2, r3
10008b96:	68fb      	ldr	r3, [r7, #12]
10008b98:	60da      	str	r2, [r3, #12]
}
10008b9a:	bf00      	nop
10008b9c:	3714      	adds	r7, #20
10008b9e:	46bd      	mov	sp, r7
10008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
10008ba4:	4770      	bx	lr

10008ba6 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
10008ba6:	b480      	push	{r7}
10008ba8:	b083      	sub	sp, #12
10008baa:	af00      	add	r7, sp, #0
10008bac:	4603      	mov	r3, r0
10008bae:	80fb      	strh	r3, [r7, #6]
10008bb0:	460b      	mov	r3, r1
10008bb2:	80bb      	strh	r3, [r7, #4]
10008bb4:	4613      	mov	r3, r2
10008bb6:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
10008bb8:	88ba      	ldrh	r2, [r7, #4]
10008bba:	88fb      	ldrh	r3, [r7, #6]
10008bbc:	1ad3      	subs	r3, r2, r3
10008bbe:	b29b      	uxth	r3, r3
10008bc0:	3b01      	subs	r3, #1
10008bc2:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
10008bc4:	88b9      	ldrh	r1, [r7, #4]
10008bc6:	887b      	ldrh	r3, [r7, #2]
10008bc8:	1acb      	subs	r3, r1, r3
10008bca:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
10008bcc:	429a      	cmp	r2, r3
10008bce:	bf34      	ite	cc
10008bd0:	2301      	movcc	r3, #1
10008bd2:	2300      	movcs	r3, #0
10008bd4:	b2db      	uxtb	r3, r3
}
10008bd6:	4618      	mov	r0, r3
10008bd8:	370c      	adds	r7, #12
10008bda:	46bd      	mov	sp, r7
10008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
10008be0:	4770      	bx	lr

10008be2 <metal_io_virt>:
{
10008be2:	b480      	push	{r7}
10008be4:	b083      	sub	sp, #12
10008be6:	af00      	add	r7, sp, #0
10008be8:	6078      	str	r0, [r7, #4]
10008bea:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10008bec:	687b      	ldr	r3, [r7, #4]
10008bee:	681b      	ldr	r3, [r3, #0]
		: NULL);
10008bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
10008bf4:	d00a      	beq.n	10008c0c <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10008bf6:	687b      	ldr	r3, [r7, #4]
10008bf8:	689b      	ldr	r3, [r3, #8]
10008bfa:	683a      	ldr	r2, [r7, #0]
10008bfc:	429a      	cmp	r2, r3
10008bfe:	d205      	bcs.n	10008c0c <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10008c00:	687b      	ldr	r3, [r7, #4]
10008c02:	681b      	ldr	r3, [r3, #0]
10008c04:	461a      	mov	r2, r3
10008c06:	683b      	ldr	r3, [r7, #0]
10008c08:	4413      	add	r3, r2
		: NULL);
10008c0a:	e000      	b.n	10008c0e <metal_io_virt+0x2c>
10008c0c:	2300      	movs	r3, #0
}
10008c0e:	4618      	mov	r0, r3
10008c10:	370c      	adds	r7, #12
10008c12:	46bd      	mov	sp, r7
10008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
10008c18:	4770      	bx	lr

10008c1a <metal_io_phys>:
{
10008c1a:	b580      	push	{r7, lr}
10008c1c:	b084      	sub	sp, #16
10008c1e:	af00      	add	r7, sp, #0
10008c20:	6078      	str	r0, [r7, #4]
10008c22:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
10008c24:	687b      	ldr	r3, [r7, #4]
10008c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008c28:	2b00      	cmp	r3, #0
10008c2a:	d123      	bne.n	10008c74 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
10008c2c:	687b      	ldr	r3, [r7, #4]
10008c2e:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
10008c30:	2b1f      	cmp	r3, #31
10008c32:	d805      	bhi.n	10008c40 <metal_io_phys+0x26>
10008c34:	687b      	ldr	r3, [r7, #4]
10008c36:	68db      	ldr	r3, [r3, #12]
10008c38:	683a      	ldr	r2, [r7, #0]
10008c3a:	fa22 f303 	lsr.w	r3, r2, r3
10008c3e:	e000      	b.n	10008c42 <metal_io_phys+0x28>
10008c40:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
10008c42:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
10008c44:	687b      	ldr	r3, [r7, #4]
10008c46:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
10008c48:	2b00      	cmp	r3, #0
10008c4a:	d010      	beq.n	10008c6e <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
10008c4c:	687b      	ldr	r3, [r7, #4]
10008c4e:	689b      	ldr	r3, [r3, #8]
10008c50:	683a      	ldr	r2, [r7, #0]
10008c52:	429a      	cmp	r2, r3
10008c54:	d20b      	bcs.n	10008c6e <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
10008c56:	687b      	ldr	r3, [r7, #4]
10008c58:	685a      	ldr	r2, [r3, #4]
10008c5a:	68fb      	ldr	r3, [r7, #12]
10008c5c:	009b      	lsls	r3, r3, #2
10008c5e:	4413      	add	r3, r2
10008c60:	681a      	ldr	r2, [r3, #0]
10008c62:	687b      	ldr	r3, [r7, #4]
10008c64:	6919      	ldr	r1, [r3, #16]
10008c66:	683b      	ldr	r3, [r7, #0]
10008c68:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
10008c6a:	4413      	add	r3, r2
10008c6c:	e008      	b.n	10008c80 <metal_io_phys+0x66>
10008c6e:	f04f 33ff 	mov.w	r3, #4294967295
10008c72:	e005      	b.n	10008c80 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
10008c74:	687b      	ldr	r3, [r7, #4]
10008c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008c78:	6839      	ldr	r1, [r7, #0]
10008c7a:	6878      	ldr	r0, [r7, #4]
10008c7c:	4798      	blx	r3
10008c7e:	4603      	mov	r3, r0
}
10008c80:	4618      	mov	r0, r3
10008c82:	3710      	adds	r7, #16
10008c84:	46bd      	mov	sp, r7
10008c86:	bd80      	pop	{r7, pc}

10008c88 <metal_io_phys_to_offset>:
{
10008c88:	b580      	push	{r7, lr}
10008c8a:	b084      	sub	sp, #16
10008c8c:	af00      	add	r7, sp, #0
10008c8e:	6078      	str	r0, [r7, #4]
10008c90:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
10008c92:	687b      	ldr	r3, [r7, #4]
10008c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10008c96:	2b00      	cmp	r3, #0
10008c98:	d127      	bne.n	10008cea <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
10008c9a:	687b      	ldr	r3, [r7, #4]
10008c9c:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
10008c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
10008ca2:	d105      	bne.n	10008cb0 <metal_io_phys_to_offset+0x28>
10008ca4:	687b      	ldr	r3, [r7, #4]
10008ca6:	685b      	ldr	r3, [r3, #4]
10008ca8:	681b      	ldr	r3, [r3, #0]
10008caa:	683a      	ldr	r2, [r7, #0]
10008cac:	1ad3      	subs	r3, r2, r3
10008cae:	e003      	b.n	10008cb8 <metal_io_phys_to_offset+0x30>
10008cb0:	687b      	ldr	r3, [r7, #4]
10008cb2:	691a      	ldr	r2, [r3, #16]
10008cb4:	683b      	ldr	r3, [r7, #0]
10008cb6:	4013      	ands	r3, r2
		unsigned long offset =
10008cb8:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
10008cba:	68f9      	ldr	r1, [r7, #12]
10008cbc:	6878      	ldr	r0, [r7, #4]
10008cbe:	f7ff ffac 	bl	10008c1a <metal_io_phys>
10008cc2:	4602      	mov	r2, r0
10008cc4:	683b      	ldr	r3, [r7, #0]
10008cc6:	4293      	cmp	r3, r2
10008cc8:	d101      	bne.n	10008cce <metal_io_phys_to_offset+0x46>
				return offset;
10008cca:	68fb      	ldr	r3, [r7, #12]
10008ccc:	e013      	b.n	10008cf6 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
10008cce:	687b      	ldr	r3, [r7, #4]
10008cd0:	691a      	ldr	r2, [r3, #16]
10008cd2:	68fb      	ldr	r3, [r7, #12]
10008cd4:	4413      	add	r3, r2
10008cd6:	3301      	adds	r3, #1
10008cd8:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
10008cda:	687b      	ldr	r3, [r7, #4]
10008cdc:	689b      	ldr	r3, [r3, #8]
10008cde:	68fa      	ldr	r2, [r7, #12]
10008ce0:	429a      	cmp	r2, r3
10008ce2:	d3ea      	bcc.n	10008cba <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
10008ce4:	f04f 33ff 	mov.w	r3, #4294967295
10008ce8:	e005      	b.n	10008cf6 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
10008cea:	687b      	ldr	r3, [r7, #4]
10008cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10008cee:	6839      	ldr	r1, [r7, #0]
10008cf0:	6878      	ldr	r0, [r7, #4]
10008cf2:	4798      	blx	r3
10008cf4:	4603      	mov	r3, r0
}
10008cf6:	4618      	mov	r0, r3
10008cf8:	3710      	adds	r7, #16
10008cfa:	46bd      	mov	sp, r7
10008cfc:	bd80      	pop	{r7, pc}

10008cfe <metal_io_phys_to_virt>:
{
10008cfe:	b580      	push	{r7, lr}
10008d00:	b082      	sub	sp, #8
10008d02:	af00      	add	r7, sp, #0
10008d04:	6078      	str	r0, [r7, #4]
10008d06:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
10008d08:	6839      	ldr	r1, [r7, #0]
10008d0a:	6878      	ldr	r0, [r7, #4]
10008d0c:	f7ff ffbc 	bl	10008c88 <metal_io_phys_to_offset>
10008d10:	4603      	mov	r3, r0
10008d12:	4619      	mov	r1, r3
10008d14:	6878      	ldr	r0, [r7, #4]
10008d16:	f7ff ff64 	bl	10008be2 <metal_io_virt>
10008d1a:	4603      	mov	r3, r0
}
10008d1c:	4618      	mov	r0, r3
10008d1e:	3708      	adds	r7, #8
10008d20:	46bd      	mov	sp, r7
10008d22:	bd80      	pop	{r7, pc}

10008d24 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
10008d24:	b580      	push	{r7, lr}
10008d26:	b084      	sub	sp, #16
10008d28:	af00      	add	r7, sp, #0
10008d2a:	6078      	str	r0, [r7, #4]
10008d2c:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
10008d2e:	687b      	ldr	r3, [r7, #4]
10008d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008d32:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
10008d34:	6839      	ldr	r1, [r7, #0]
10008d36:	68f8      	ldr	r0, [r7, #12]
10008d38:	f7ff ffe1 	bl	10008cfe <metal_io_phys_to_virt>
10008d3c:	4603      	mov	r3, r0
}
10008d3e:	4618      	mov	r0, r3
10008d40:	3710      	adds	r7, #16
10008d42:	46bd      	mov	sp, r7
10008d44:	bd80      	pop	{r7, pc}

10008d46 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
10008d46:	b580      	push	{r7, lr}
10008d48:	b086      	sub	sp, #24
10008d4a:	af00      	add	r7, sp, #0
10008d4c:	60f8      	str	r0, [r7, #12]
10008d4e:	607a      	str	r2, [r7, #4]
10008d50:	603b      	str	r3, [r7, #0]
10008d52:	460b      	mov	r3, r1
10008d54:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
10008d56:	2300      	movs	r3, #0
10008d58:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
10008d5a:	697b      	ldr	r3, [r7, #20]
10008d5c:	2b00      	cmp	r3, #0
10008d5e:	d11e      	bne.n	10008d9e <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
10008d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d62:	68fa      	ldr	r2, [r7, #12]
10008d64:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
10008d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d68:	687a      	ldr	r2, [r7, #4]
10008d6a:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
10008d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d6e:	897a      	ldrh	r2, [r7, #10]
10008d70:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
10008d72:	683b      	ldr	r3, [r7, #0]
10008d74:	891a      	ldrh	r2, [r3, #8]
10008d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d78:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
10008d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d7c:	895a      	ldrh	r2, [r3, #10]
10008d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d80:	849a      	strh	r2, [r3, #36]	@ 0x24
		vq->callback = callback;
10008d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d84:	6a3a      	ldr	r2, [r7, #32]
10008d86:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
10008d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10008d8c:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
10008d8e:	683b      	ldr	r3, [r7, #0]
10008d90:	6819      	ldr	r1, [r3, #0]
10008d92:	683b      	ldr	r3, [r7, #0]
10008d94:	685b      	ldr	r3, [r3, #4]
10008d96:	461a      	mov	r2, r3
10008d98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10008d9a:	f000 f8ef 	bl	10008f7c <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
10008d9e:	697b      	ldr	r3, [r7, #20]
}
10008da0:	4618      	mov	r0, r3
10008da2:	3718      	adds	r7, #24
10008da4:	46bd      	mov	sp, r7
10008da6:	bd80      	pop	{r7, pc}

10008da8 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
10008da8:	b480      	push	{r7}
10008daa:	b083      	sub	sp, #12
10008dac:	af00      	add	r7, sp, #0
10008dae:	6078      	str	r0, [r7, #4]
10008db0:	460b      	mov	r3, r1
10008db2:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
10008db4:	687b      	ldr	r3, [r7, #4]
10008db6:	699a      	ldr	r2, [r3, #24]
10008db8:	887b      	ldrh	r3, [r7, #2]
10008dba:	011b      	lsls	r3, r3, #4
10008dbc:	4413      	add	r3, r2
10008dbe:	689b      	ldr	r3, [r3, #8]
}
10008dc0:	4618      	mov	r0, r3
10008dc2:	370c      	adds	r7, #12
10008dc4:	46bd      	mov	sp, r7
10008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
10008dca:	4770      	bx	lr

10008dcc <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
10008dcc:	b580      	push	{r7, lr}
10008dce:	b086      	sub	sp, #24
10008dd0:	af00      	add	r7, sp, #0
10008dd2:	60f8      	str	r0, [r7, #12]
10008dd4:	60b9      	str	r1, [r7, #8]
10008dd6:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
10008dd8:	2300      	movs	r3, #0
10008dda:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
10008ddc:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10008de0:	68fb      	ldr	r3, [r7, #12]
10008de2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10008de4:	68fb      	ldr	r3, [r7, #12]
10008de6:	69db      	ldr	r3, [r3, #28]
10008de8:	885b      	ldrh	r3, [r3, #2]
10008dea:	b29b      	uxth	r3, r3
10008dec:	429a      	cmp	r2, r3
10008dee:	d101      	bne.n	10008df4 <virtqueue_get_available_buffer+0x28>
		return NULL;
10008df0:	2300      	movs	r3, #0
10008df2:	e02f      	b.n	10008e54 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
10008df4:	68fb      	ldr	r3, [r7, #12]
10008df6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
10008df8:	1c5a      	adds	r2, r3, #1
10008dfa:	b291      	uxth	r1, r2
10008dfc:	68fa      	ldr	r2, [r7, #12]
10008dfe:	8611      	strh	r1, [r2, #48]	@ 0x30
10008e00:	b21a      	sxth	r2, r3
10008e02:	68fb      	ldr	r3, [r7, #12]
10008e04:	895b      	ldrh	r3, [r3, #10]
10008e06:	3b01      	subs	r3, #1
10008e08:	b29b      	uxth	r3, r3
10008e0a:	b21b      	sxth	r3, r3
10008e0c:	4013      	ands	r3, r2
10008e0e:	b21b      	sxth	r3, r3
10008e10:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
10008e12:	68fb      	ldr	r3, [r7, #12]
10008e14:	69da      	ldr	r2, [r3, #28]
10008e16:	8afb      	ldrh	r3, [r7, #22]
10008e18:	005b      	lsls	r3, r3, #1
10008e1a:	4413      	add	r3, r2
10008e1c:	889b      	ldrh	r3, [r3, #4]
10008e1e:	b29a      	uxth	r2, r3
10008e20:	68bb      	ldr	r3, [r7, #8]
10008e22:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
10008e24:	68fb      	ldr	r3, [r7, #12]
10008e26:	699a      	ldr	r2, [r3, #24]
10008e28:	68bb      	ldr	r3, [r7, #8]
10008e2a:	881b      	ldrh	r3, [r3, #0]
10008e2c:	011b      	lsls	r3, r3, #4
10008e2e:	18d1      	adds	r1, r2, r3
10008e30:	680a      	ldr	r2, [r1, #0]
10008e32:	684b      	ldr	r3, [r1, #4]
10008e34:	4613      	mov	r3, r2
10008e36:	4619      	mov	r1, r3
10008e38:	68f8      	ldr	r0, [r7, #12]
10008e3a:	f7ff ff73 	bl	10008d24 <virtqueue_phys_to_virt>
10008e3e:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
10008e40:	68fb      	ldr	r3, [r7, #12]
10008e42:	699a      	ldr	r2, [r3, #24]
10008e44:	68bb      	ldr	r3, [r7, #8]
10008e46:	881b      	ldrh	r3, [r3, #0]
10008e48:	011b      	lsls	r3, r3, #4
10008e4a:	4413      	add	r3, r2
10008e4c:	689a      	ldr	r2, [r3, #8]
10008e4e:	687b      	ldr	r3, [r7, #4]
10008e50:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
10008e52:	693b      	ldr	r3, [r7, #16]
}
10008e54:	4618      	mov	r0, r3
10008e56:	3718      	adds	r7, #24
10008e58:	46bd      	mov	sp, r7
10008e5a:	bd80      	pop	{r7, pc}

10008e5c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
10008e5c:	b480      	push	{r7}
10008e5e:	b087      	sub	sp, #28
10008e60:	af00      	add	r7, sp, #0
10008e62:	60f8      	str	r0, [r7, #12]
10008e64:	460b      	mov	r3, r1
10008e66:	607a      	str	r2, [r7, #4]
10008e68:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
10008e6a:	2300      	movs	r3, #0
10008e6c:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
10008e6e:	68fb      	ldr	r3, [r7, #12]
10008e70:	895b      	ldrh	r3, [r3, #10]
10008e72:	897a      	ldrh	r2, [r7, #10]
10008e74:	429a      	cmp	r2, r3
10008e76:	d901      	bls.n	10008e7c <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
10008e78:	4b18      	ldr	r3, [pc, #96]	@ (10008edc <virtqueue_add_consumed_buffer+0x80>)
10008e7a:	e029      	b.n	10008ed0 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
10008e7c:	68fb      	ldr	r3, [r7, #12]
10008e7e:	6a1b      	ldr	r3, [r3, #32]
10008e80:	885b      	ldrh	r3, [r3, #2]
10008e82:	b29b      	uxth	r3, r3
10008e84:	b21a      	sxth	r2, r3
10008e86:	68fb      	ldr	r3, [r7, #12]
10008e88:	895b      	ldrh	r3, [r3, #10]
10008e8a:	3b01      	subs	r3, #1
10008e8c:	b29b      	uxth	r3, r3
10008e8e:	b21b      	sxth	r3, r3
10008e90:	4013      	ands	r3, r2
10008e92:	b21b      	sxth	r3, r3
10008e94:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
10008e96:	68fb      	ldr	r3, [r7, #12]
10008e98:	6a1a      	ldr	r2, [r3, #32]
10008e9a:	8a7b      	ldrh	r3, [r7, #18]
10008e9c:	00db      	lsls	r3, r3, #3
10008e9e:	4413      	add	r3, r2
10008ea0:	3304      	adds	r3, #4
10008ea2:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
10008ea4:	897a      	ldrh	r2, [r7, #10]
10008ea6:	697b      	ldr	r3, [r7, #20]
10008ea8:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
10008eaa:	697b      	ldr	r3, [r7, #20]
10008eac:	687a      	ldr	r2, [r7, #4]
10008eae:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
10008eb0:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
10008eb4:	68fb      	ldr	r3, [r7, #12]
10008eb6:	6a1b      	ldr	r3, [r3, #32]
10008eb8:	885a      	ldrh	r2, [r3, #2]
10008eba:	b292      	uxth	r2, r2
10008ebc:	3201      	adds	r2, #1
10008ebe:	b292      	uxth	r2, r2
10008ec0:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
10008ec2:	68fb      	ldr	r3, [r7, #12]
10008ec4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
10008ec6:	3301      	adds	r3, #1
10008ec8:	b29a      	uxth	r2, r3
10008eca:	68fb      	ldr	r3, [r7, #12]
10008ecc:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
10008ece:	2300      	movs	r3, #0
}
10008ed0:	4618      	mov	r0, r3
10008ed2:	371c      	adds	r7, #28
10008ed4:	46bd      	mov	sp, r7
10008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
10008eda:	4770      	bx	lr
10008edc:	fffff441 	.word	0xfffff441

10008ee0 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10008ee0:	b480      	push	{r7}
10008ee2:	b083      	sub	sp, #12
10008ee4:	af00      	add	r7, sp, #0
10008ee6:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10008ee8:	6879      	ldr	r1, [r7, #4]
10008eea:	6809      	ldr	r1, [r1, #0]
10008eec:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10008ef0:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10008ef4:	2300      	movs	r3, #0
10008ef6:	4313      	orrs	r3, r2
10008ef8:	d015      	beq.n	10008f26 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008efa:	687b      	ldr	r3, [r7, #4]
10008efc:	681b      	ldr	r3, [r3, #0]
10008efe:	699b      	ldr	r3, [r3, #24]
10008f00:	2b01      	cmp	r3, #1
10008f02:	d11f      	bne.n	10008f44 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
10008f04:	687b      	ldr	r3, [r7, #4]
10008f06:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10008f08:	687b      	ldr	r3, [r7, #4]
10008f0a:	895b      	ldrh	r3, [r3, #10]
10008f0c:	1ad3      	subs	r3, r2, r3
10008f0e:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
10008f10:	687b      	ldr	r3, [r7, #4]
10008f12:	6a1a      	ldr	r2, [r3, #32]
10008f14:	687b      	ldr	r3, [r7, #4]
10008f16:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
10008f18:	3901      	subs	r1, #1
10008f1a:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
10008f1c:	00db      	lsls	r3, r3, #3
10008f1e:	4413      	add	r3, r2
10008f20:	460a      	mov	r2, r1
10008f22:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
10008f24:	e00e      	b.n	10008f44 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008f26:	687b      	ldr	r3, [r7, #4]
10008f28:	681b      	ldr	r3, [r3, #0]
10008f2a:	699b      	ldr	r3, [r3, #24]
10008f2c:	2b01      	cmp	r3, #1
10008f2e:	d109      	bne.n	10008f44 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
10008f30:	687b      	ldr	r3, [r7, #4]
10008f32:	6a1b      	ldr	r3, [r3, #32]
10008f34:	881b      	ldrh	r3, [r3, #0]
10008f36:	b29a      	uxth	r2, r3
10008f38:	687b      	ldr	r3, [r7, #4]
10008f3a:	6a1b      	ldr	r3, [r3, #32]
10008f3c:	f042 0201 	orr.w	r2, r2, #1
10008f40:	b292      	uxth	r2, r2
10008f42:	801a      	strh	r2, [r3, #0]
}
10008f44:	bf00      	nop
10008f46:	370c      	adds	r7, #12
10008f48:	46bd      	mov	sp, r7
10008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
10008f4e:	4770      	bx	lr

10008f50 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
10008f50:	b580      	push	{r7, lr}
10008f52:	b082      	sub	sp, #8
10008f54:	af00      	add	r7, sp, #0
10008f56:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
10008f58:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
10008f5c:	6878      	ldr	r0, [r7, #4]
10008f5e:	f000 f835 	bl	10008fcc <vq_ring_must_notify>
10008f62:	4603      	mov	r3, r0
10008f64:	2b00      	cmp	r3, #0
10008f66:	d002      	beq.n	10008f6e <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
10008f68:	6878      	ldr	r0, [r7, #4]
10008f6a:	f000 f87d 	bl	10009068 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
10008f6e:	687b      	ldr	r3, [r7, #4]
10008f70:	2200      	movs	r2, #0
10008f72:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);
}
10008f74:	bf00      	nop
10008f76:	3708      	adds	r7, #8
10008f78:	46bd      	mov	sp, r7
10008f7a:	bd80      	pop	{r7, pc}

10008f7c <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
10008f7c:	b580      	push	{r7, lr}
10008f7e:	b086      	sub	sp, #24
10008f80:	af00      	add	r7, sp, #0
10008f82:	60f8      	str	r0, [r7, #12]
10008f84:	60b9      	str	r1, [r7, #8]
10008f86:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
10008f88:	68fb      	ldr	r3, [r7, #12]
10008f8a:	895b      	ldrh	r3, [r3, #10]
10008f8c:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
10008f8e:	68fb      	ldr	r3, [r7, #12]
10008f90:	3314      	adds	r3, #20
10008f92:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
10008f94:	6979      	ldr	r1, [r7, #20]
10008f96:	687b      	ldr	r3, [r7, #4]
10008f98:	68ba      	ldr	r2, [r7, #8]
10008f9a:	6938      	ldr	r0, [r7, #16]
10008f9c:	f7ff fdda 	bl	10008b54 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
10008fa0:	bf00      	nop
10008fa2:	3718      	adds	r7, #24
10008fa4:	46bd      	mov	sp, r7
10008fa6:	bd80      	pop	{r7, pc}

10008fa8 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
10008fa8:	b580      	push	{r7, lr}
10008faa:	b082      	sub	sp, #8
10008fac:	af00      	add	r7, sp, #0
10008fae:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
10008fb0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
10008fb4:	687b      	ldr	r3, [r7, #4]
10008fb6:	68db      	ldr	r3, [r3, #12]
10008fb8:	2b00      	cmp	r3, #0
10008fba:	d003      	beq.n	10008fc4 <virtqueue_notification+0x1c>
		vq->callback(vq);
10008fbc:	687b      	ldr	r3, [r7, #4]
10008fbe:	68db      	ldr	r3, [r3, #12]
10008fc0:	6878      	ldr	r0, [r7, #4]
10008fc2:	4798      	blx	r3
}
10008fc4:	bf00      	nop
10008fc6:	3708      	adds	r7, #8
10008fc8:	46bd      	mov	sp, r7
10008fca:	bd80      	pop	{r7, pc}

10008fcc <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
10008fcc:	b580      	push	{r7, lr}
10008fce:	b084      	sub	sp, #16
10008fd0:	af00      	add	r7, sp, #0
10008fd2:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10008fd4:	6879      	ldr	r1, [r7, #4]
10008fd6:	6809      	ldr	r1, [r1, #0]
10008fd8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10008fdc:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10008fe0:	2300      	movs	r3, #0
10008fe2:	4313      	orrs	r3, r2
10008fe4:	d02a      	beq.n	1000903c <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008fe6:	687b      	ldr	r3, [r7, #4]
10008fe8:	681b      	ldr	r3, [r3, #0]
10008fea:	699b      	ldr	r3, [r3, #24]
10008fec:	2b01      	cmp	r3, #1
10008fee:	d136      	bne.n	1000905e <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
10008ff0:	687b      	ldr	r3, [r7, #4]
10008ff2:	6a1b      	ldr	r3, [r3, #32]
10008ff4:	789a      	ldrb	r2, [r3, #2]
10008ff6:	78db      	ldrb	r3, [r3, #3]
10008ff8:	021b      	lsls	r3, r3, #8
10008ffa:	4313      	orrs	r3, r2
10008ffc:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
10008ffe:	687b      	ldr	r3, [r7, #4]
10009000:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
10009002:	89fa      	ldrh	r2, [r7, #14]
10009004:	1ad3      	subs	r3, r2, r3
10009006:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
10009008:	687b      	ldr	r3, [r7, #4]
1000900a:	69da      	ldr	r2, [r3, #28]
1000900c:	687b      	ldr	r3, [r7, #4]
1000900e:	6959      	ldr	r1, [r3, #20]
10009010:	004b      	lsls	r3, r1, #1
10009012:	4413      	add	r3, r2
10009014:	7918      	ldrb	r0, [r3, #4]
10009016:	004b      	lsls	r3, r1, #1
10009018:	4413      	add	r3, r2
1000901a:	795b      	ldrb	r3, [r3, #5]
1000901c:	021b      	lsls	r3, r3, #8
1000901e:	4303      	orrs	r3, r0
10009020:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
10009022:	89ba      	ldrh	r2, [r7, #12]
10009024:	89f9      	ldrh	r1, [r7, #14]
10009026:	897b      	ldrh	r3, [r7, #10]
10009028:	4618      	mov	r0, r3
1000902a:	f7ff fdbc 	bl	10008ba6 <vring_need_event>
1000902e:	4603      	mov	r3, r0
						prev_idx) != 0;
10009030:	2b00      	cmp	r3, #0
10009032:	bf14      	ite	ne
10009034:	2301      	movne	r3, #1
10009036:	2300      	moveq	r3, #0
10009038:	b2db      	uxtb	r3, r3
1000903a:	e011      	b.n	10009060 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000903c:	687b      	ldr	r3, [r7, #4]
1000903e:	681b      	ldr	r3, [r3, #0]
10009040:	699b      	ldr	r3, [r3, #24]
10009042:	2b01      	cmp	r3, #1
10009044:	d10b      	bne.n	1000905e <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
10009046:	687b      	ldr	r3, [r7, #4]
10009048:	69db      	ldr	r3, [r3, #28]
1000904a:	881b      	ldrh	r3, [r3, #0]
1000904c:	b29b      	uxth	r3, r3
1000904e:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
10009052:	2b00      	cmp	r3, #0
10009054:	bf0c      	ite	eq
10009056:	2301      	moveq	r3, #1
10009058:	2300      	movne	r3, #0
1000905a:	b2db      	uxtb	r3, r3
1000905c:	e000      	b.n	10009060 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000905e:	2300      	movs	r3, #0
}
10009060:	4618      	mov	r0, r3
10009062:	3710      	adds	r7, #16
10009064:	46bd      	mov	sp, r7
10009066:	bd80      	pop	{r7, pc}

10009068 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
10009068:	b580      	push	{r7, lr}
1000906a:	b082      	sub	sp, #8
1000906c:	af00      	add	r7, sp, #0
1000906e:	6078      	str	r0, [r7, #4]
	if (vq->notify)
10009070:	687b      	ldr	r3, [r7, #4]
10009072:	691b      	ldr	r3, [r3, #16]
10009074:	2b00      	cmp	r3, #0
10009076:	d003      	beq.n	10009080 <vq_ring_notify+0x18>
		vq->notify(vq);
10009078:	687b      	ldr	r3, [r7, #4]
1000907a:	691b      	ldr	r3, [r3, #16]
1000907c:	6878      	ldr	r0, [r7, #4]
1000907e:	4798      	blx	r3
}
10009080:	bf00      	nop
10009082:	3708      	adds	r7, #8
10009084:	46bd      	mov	sp, r7
10009086:	bd80      	pop	{r7, pc}

10009088 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
10009088:	b580      	push	{r7, lr}
1000908a:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
1000908c:	4b0d      	ldr	r3, [pc, #52]	@ (100090c4 <MAILBOX_Init+0x3c>)
1000908e:	2201      	movs	r2, #1
10009090:	2100      	movs	r1, #0
10009092:	480d      	ldr	r0, [pc, #52]	@ (100090c8 <MAILBOX_Init+0x40>)
10009094:	f7f9 f8f0 	bl	10002278 <HAL_IPCC_ActivateNotification>
10009098:	4603      	mov	r3, r0
1000909a:	2b00      	cmp	r3, #0
1000909c:	d002      	beq.n	100090a4 <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
1000909e:	f04f 33ff 	mov.w	r3, #4294967295
100090a2:	e00c      	b.n	100090be <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
100090a4:	4b09      	ldr	r3, [pc, #36]	@ (100090cc <MAILBOX_Init+0x44>)
100090a6:	2201      	movs	r2, #1
100090a8:	2101      	movs	r1, #1
100090aa:	4807      	ldr	r0, [pc, #28]	@ (100090c8 <MAILBOX_Init+0x40>)
100090ac:	f7f9 f8e4 	bl	10002278 <HAL_IPCC_ActivateNotification>
100090b0:	4603      	mov	r3, r0
100090b2:	2b00      	cmp	r3, #0
100090b4:	d002      	beq.n	100090bc <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
100090b6:	f04f 33ff 	mov.w	r3, #4294967295
100090ba:	e000      	b.n	100090be <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
100090bc:	2300      	movs	r3, #0
}
100090be:	4618      	mov	r0, r3
100090c0:	bd80      	pop	{r7, pc}
100090c2:	bf00      	nop
100090c4:	10009189 	.word	0x10009189
100090c8:	100201d0 	.word	0x100201d0
100090cc:	100091b5 	.word	0x100091b5

100090d0 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
100090d0:	b580      	push	{r7, lr}
100090d2:	b084      	sub	sp, #16
100090d4:	af00      	add	r7, sp, #0
100090d6:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */
  int ret = -1;
100090d8:	f04f 33ff 	mov.w	r3, #4294967295
100090dc:	60fb      	str	r3, [r7, #12]

   /* USER CODE BEGIN PRE_MAILBOX_POLL */

   /* USER CODE END  PRE_MAILBOX_POLL */

   if (msg_received_ch1 == MBOX_BUF_FREE) {
100090de:	4b0f      	ldr	r3, [pc, #60]	@ (1000911c <MAILBOX_Poll+0x4c>)
100090e0:	681b      	ldr	r3, [r3, #0]
100090e2:	2b02      	cmp	r3, #2
100090e4:	d108      	bne.n	100090f8 <MAILBOX_Poll+0x28>
   /* USER CODE BEGIN MSG_CHANNEL1 */

   /* USER CODE END  MSG_CHANNEL1 */

    OPENAMP_log_dbg("Running virt0 (ch_1 buf free)\r\n");
    rproc_virtio_notified(vdev, VRING0_ID);
100090e6:	2100      	movs	r1, #0
100090e8:	6878      	ldr	r0, [r7, #4]
100090ea:	f7fe fb98 	bl	1000781e <rproc_virtio_notified>
    ret = 0;
100090ee:	2300      	movs	r3, #0
100090f0:	60fb      	str	r3, [r7, #12]
    msg_received_ch1 = MBOX_NO_MSG;
100090f2:	4b0a      	ldr	r3, [pc, #40]	@ (1000911c <MAILBOX_Poll+0x4c>)
100090f4:	2200      	movs	r2, #0
100090f6:	601a      	str	r2, [r3, #0]
  }

  if (msg_received_ch2 == MBOX_NEW_MSG) {
100090f8:	4b09      	ldr	r3, [pc, #36]	@ (10009120 <MAILBOX_Poll+0x50>)
100090fa:	681b      	ldr	r3, [r3, #0]
100090fc:	2b01      	cmp	r3, #1
100090fe:	d108      	bne.n	10009112 <MAILBOX_Poll+0x42>
   /* USER CODE BEGIN MSG_CHANNEL2 */

   /* USER CODE END  MSG_CHANNEL2 */

    OPENAMP_log_dbg("Running virt1 (ch_2 new msg)\r\n");
    rproc_virtio_notified(vdev, VRING1_ID);
10009100:	2101      	movs	r1, #1
10009102:	6878      	ldr	r0, [r7, #4]
10009104:	f7fe fb8b 	bl	1000781e <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
10009108:	4b05      	ldr	r3, [pc, #20]	@ (10009120 <MAILBOX_Poll+0x50>)
1000910a:	2200      	movs	r2, #0
1000910c:	601a      	str	r2, [r3, #0]

    ret = 0;
1000910e:	2300      	movs	r3, #0
10009110:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_MAILBOX_POLL */

  /* USER CODE END  POST_MAILBOX_POLL */

  return ret;
10009112:	68fb      	ldr	r3, [r7, #12]
}
10009114:	4618      	mov	r0, r3
10009116:	3710      	adds	r7, #16
10009118:	46bd      	mov	sp, r7
1000911a:	bd80      	pop	{r7, pc}
1000911c:	10020468 	.word	0x10020468
10009120:	1002046c 	.word	0x1002046c

10009124 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
10009124:	b580      	push	{r7, lr}
10009126:	b084      	sub	sp, #16
10009128:	af00      	add	r7, sp, #0
1000912a:	6078      	str	r0, [r7, #4]
1000912c:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
1000912e:	683b      	ldr	r3, [r7, #0]
10009130:	2b00      	cmp	r3, #0
10009132:	d102      	bne.n	1000913a <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
10009134:	2300      	movs	r3, #0
10009136:	60fb      	str	r3, [r7, #12]
10009138:	e008      	b.n	1000914c <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
1000913a:	683b      	ldr	r3, [r7, #0]
1000913c:	2b01      	cmp	r3, #1
1000913e:	d102      	bne.n	10009146 <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10009140:	2301      	movs	r3, #1
10009142:	60fb      	str	r3, [r7, #12]
10009144:	e002      	b.n	1000914c <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
10009146:	f04f 33ff 	mov.w	r3, #4294967295
1000914a:	e016      	b.n	1000917a <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
1000914c:	2200      	movs	r2, #0
1000914e:	68f9      	ldr	r1, [r7, #12]
10009150:	480c      	ldr	r0, [pc, #48]	@ (10009184 <MAILBOX_Notify+0x60>)
10009152:	f7f9 f8df 	bl	10002314 <HAL_IPCC_GetChannelStatus>
10009156:	4603      	mov	r3, r0
10009158:	2b01      	cmp	r3, #1
1000915a:	d108      	bne.n	1000916e <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
1000915c:	bf00      	nop
1000915e:	2200      	movs	r2, #0
10009160:	68f9      	ldr	r1, [r7, #12]
10009162:	4808      	ldr	r0, [pc, #32]	@ (10009184 <MAILBOX_Notify+0x60>)
10009164:	f7f9 f8d6 	bl	10002314 <HAL_IPCC_GetChannelStatus>
10009168:	4603      	mov	r3, r0
1000916a:	2b01      	cmp	r3, #1
1000916c:	d0f7      	beq.n	1000915e <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
1000916e:	2200      	movs	r2, #0
10009170:	68f9      	ldr	r1, [r7, #12]
10009172:	4804      	ldr	r0, [pc, #16]	@ (10009184 <MAILBOX_Notify+0x60>)
10009174:	f7f9 f902 	bl	1000237c <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10009178:	2300      	movs	r3, #0
}
1000917a:	4618      	mov	r0, r3
1000917c:	3710      	adds	r7, #16
1000917e:	46bd      	mov	sp, r7
10009180:	bd80      	pop	{r7, pc}
10009182:	bf00      	nop
10009184:	100201d0 	.word	0x100201d0

10009188 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10009188:	b580      	push	{r7, lr}
1000918a:	b084      	sub	sp, #16
1000918c:	af00      	add	r7, sp, #0
1000918e:	60f8      	str	r0, [r7, #12]
10009190:	60b9      	str	r1, [r7, #8]
10009192:	4613      	mov	r3, r2
10009194:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
10009196:	4b06      	ldr	r3, [pc, #24]	@ (100091b0 <IPCC_channel1_callback+0x28>)
10009198:	2202      	movs	r2, #2
1000919a:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
1000919c:	2201      	movs	r2, #1
1000919e:	68b9      	ldr	r1, [r7, #8]
100091a0:	68f8      	ldr	r0, [r7, #12]
100091a2:	f7f9 f8eb 	bl	1000237c <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
100091a6:	bf00      	nop
100091a8:	3710      	adds	r7, #16
100091aa:	46bd      	mov	sp, r7
100091ac:	bd80      	pop	{r7, pc}
100091ae:	bf00      	nop
100091b0:	10020468 	.word	0x10020468

100091b4 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100091b4:	b580      	push	{r7, lr}
100091b6:	b084      	sub	sp, #16
100091b8:	af00      	add	r7, sp, #0
100091ba:	60f8      	str	r0, [r7, #12]
100091bc:	60b9      	str	r1, [r7, #8]
100091be:	4613      	mov	r3, r2
100091c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
100091c2:	4b06      	ldr	r3, [pc, #24]	@ (100091dc <IPCC_channel2_callback+0x28>)
100091c4:	2201      	movs	r2, #1
100091c6:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
100091c8:	2201      	movs	r2, #1
100091ca:	68b9      	ldr	r1, [r7, #8]
100091cc:	68f8      	ldr	r0, [r7, #12]
100091ce:	f7f9 f8d5 	bl	1000237c <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
100091d2:	bf00      	nop
100091d4:	3710      	adds	r7, #16
100091d6:	46bd      	mov	sp, r7
100091d8:	bd80      	pop	{r7, pc}
100091da:	bf00      	nop
100091dc:	1002046c 	.word	0x1002046c

100091e0 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
100091e0:	b480      	push	{r7}
100091e2:	b083      	sub	sp, #12
100091e4:	af00      	add	r7, sp, #0
100091e6:	6078      	str	r0, [r7, #4]
100091e8:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
100091ea:	687b      	ldr	r3, [r7, #4]
100091ec:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
100091ee:	683a      	ldr	r2, [r7, #0]
100091f0:	429a      	cmp	r2, r3
100091f2:	d209      	bcs.n	10009208 <metal_device_io_region+0x28>
100091f4:	683a      	ldr	r2, [r7, #0]
100091f6:	4613      	mov	r3, r2
100091f8:	00db      	lsls	r3, r3, #3
100091fa:	1a9b      	subs	r3, r3, r2
100091fc:	00db      	lsls	r3, r3, #3
100091fe:	3308      	adds	r3, #8
10009200:	687a      	ldr	r2, [r7, #4]
10009202:	4413      	add	r3, r2
10009204:	3304      	adds	r3, #4
10009206:	e000      	b.n	1000920a <metal_device_io_region+0x2a>
10009208:	2300      	movs	r3, #0
}
1000920a:	4618      	mov	r0, r3
1000920c:	370c      	adds	r7, #12
1000920e:	46bd      	mov	sp, r7
10009210:	f85d 7b04 	ldr.w	r7, [sp], #4
10009214:	4770      	bx	lr
	...

10009218 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
10009218:	b590      	push	{r4, r7, lr}
1000921a:	b08d      	sub	sp, #52	@ 0x34
1000921c:	af04      	add	r7, sp, #16
1000921e:	6078      	str	r0, [r7, #4]
  int status = 0;
10009220:	2300      	movs	r3, #0
10009222:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
10009224:	2300      	movs	r3, #0
10009226:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
10009228:	4a41      	ldr	r2, [pc, #260]	@ (10009330 <OPENAMP_shmem_init+0x118>)
1000922a:	f107 0310 	add.w	r3, r7, #16
1000922e:	e892 0003 	ldmia.w	r2, {r0, r1}
10009232:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
10009236:	2300      	movs	r3, #0
10009238:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
1000923a:	2300      	movs	r3, #0
1000923c:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
1000923e:	f107 0310 	add.w	r3, r7, #16
10009242:	4618      	mov	r0, r3
10009244:	f7fd fec0 	bl	10006fc8 <metal_init>

  status = metal_register_generic_device(&shm_device);
10009248:	483a      	ldr	r0, [pc, #232]	@ (10009334 <OPENAMP_shmem_init+0x11c>)
1000924a:	f7fd fd67 	bl	10006d1c <metal_register_generic_device>
1000924e:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10009250:	69fb      	ldr	r3, [r7, #28]
10009252:	2b00      	cmp	r3, #0
10009254:	d001      	beq.n	1000925a <OPENAMP_shmem_init+0x42>
    return status;
10009256:	69fb      	ldr	r3, [r7, #28]
10009258:	e066      	b.n	10009328 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
1000925a:	f107 0318 	add.w	r3, r7, #24
1000925e:	461a      	mov	r2, r3
10009260:	4935      	ldr	r1, [pc, #212]	@ (10009338 <OPENAMP_shmem_init+0x120>)
10009262:	4836      	ldr	r0, [pc, #216]	@ (1000933c <OPENAMP_shmem_init+0x124>)
10009264:	f7fd fd1c 	bl	10006ca0 <metal_device_open>
10009268:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
1000926a:	69fb      	ldr	r3, [r7, #28]
1000926c:	2b00      	cmp	r3, #0
1000926e:	d001      	beq.n	10009274 <OPENAMP_shmem_init+0x5c>
    return status;
10009270:	69fb      	ldr	r3, [r7, #28]
10009272:	e059      	b.n	10009328 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
10009274:	4a32      	ldr	r2, [pc, #200]	@ (10009340 <OPENAMP_shmem_init+0x128>)
10009276:	4b33      	ldr	r3, [pc, #204]	@ (10009344 <OPENAMP_shmem_init+0x12c>)
10009278:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000927a:	69bb      	ldr	r3, [r7, #24]
1000927c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
10009280:	4a31      	ldr	r2, [pc, #196]	@ (10009348 <OPENAMP_shmem_init+0x130>)
10009282:	4b2f      	ldr	r3, [pc, #188]	@ (10009340 <OPENAMP_shmem_init+0x128>)
10009284:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10009286:	461a      	mov	r2, r3
10009288:	2300      	movs	r3, #0
1000928a:	9302      	str	r3, [sp, #8]
1000928c:	2300      	movs	r3, #0
1000928e:	9301      	str	r3, [sp, #4]
10009290:	f04f 33ff 	mov.w	r3, #4294967295
10009294:	9300      	str	r3, [sp, #0]
10009296:	4613      	mov	r3, r2
10009298:	4a2a      	ldr	r2, [pc, #168]	@ (10009344 <OPENAMP_shmem_init+0x12c>)
1000929a:	4929      	ldr	r1, [pc, #164]	@ (10009340 <OPENAMP_shmem_init+0x128>)
1000929c:	f7fd fee2 	bl	10007064 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
100092a0:	69bb      	ldr	r3, [r7, #24]
100092a2:	2100      	movs	r1, #0
100092a4:	4618      	mov	r0, r3
100092a6:	f7ff ff9b 	bl	100091e0 <metal_device_io_region>
100092aa:	4603      	mov	r3, r0
100092ac:	4a27      	ldr	r2, [pc, #156]	@ (1000934c <OPENAMP_shmem_init+0x134>)
100092ae:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
100092b0:	4b26      	ldr	r3, [pc, #152]	@ (1000934c <OPENAMP_shmem_init+0x134>)
100092b2:	681b      	ldr	r3, [r3, #0]
100092b4:	2b00      	cmp	r3, #0
100092b6:	d102      	bne.n	100092be <OPENAMP_shmem_init+0xa6>
    return -1;
100092b8:	f04f 33ff 	mov.w	r3, #4294967295
100092bc:	e034      	b.n	10009328 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
100092be:	f107 0208 	add.w	r2, r7, #8
100092c2:	f107 030c 	add.w	r3, r7, #12
100092c6:	4619      	mov	r1, r3
100092c8:	6878      	ldr	r0, [r7, #4]
100092ca:	f000 f903 	bl	100094d4 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
100092ce:	68fb      	ldr	r3, [r7, #12]
100092d0:	4a1f      	ldr	r2, [pc, #124]	@ (10009350 <OPENAMP_shmem_init+0x138>)
100092d2:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
100092d4:	4b1e      	ldr	r3, [pc, #120]	@ (10009350 <OPENAMP_shmem_init+0x138>)
100092d6:	681b      	ldr	r3, [r3, #0]
100092d8:	2b00      	cmp	r3, #0
100092da:	d102      	bne.n	100092e2 <OPENAMP_shmem_init+0xca>
  {
    return -1;
100092dc:	f04f 33ff 	mov.w	r3, #4294967295
100092e0:	e022      	b.n	10009328 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
100092e2:	69bb      	ldr	r3, [r7, #24]
100092e4:	f103 0044 	add.w	r0, r3, #68	@ 0x44
100092e8:	4b19      	ldr	r3, [pc, #100]	@ (10009350 <OPENAMP_shmem_init+0x138>)
100092ea:	6819      	ldr	r1, [r3, #0]
100092ec:	4b18      	ldr	r3, [pc, #96]	@ (10009350 <OPENAMP_shmem_init+0x138>)
100092ee:	681a      	ldr	r2, [r3, #0]
100092f0:	68bb      	ldr	r3, [r7, #8]
100092f2:	461c      	mov	r4, r3
100092f4:	2300      	movs	r3, #0
100092f6:	9302      	str	r3, [sp, #8]
100092f8:	2300      	movs	r3, #0
100092fa:	9301      	str	r3, [sp, #4]
100092fc:	f04f 33ff 	mov.w	r3, #4294967295
10009300:	9300      	str	r3, [sp, #0]
10009302:	4623      	mov	r3, r4
10009304:	f7fd feae 	bl	10007064 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
10009308:	69bb      	ldr	r3, [r7, #24]
1000930a:	2101      	movs	r1, #1
1000930c:	4618      	mov	r0, r3
1000930e:	f7ff ff67 	bl	100091e0 <metal_device_io_region>
10009312:	4603      	mov	r3, r0
10009314:	4a0f      	ldr	r2, [pc, #60]	@ (10009354 <OPENAMP_shmem_init+0x13c>)
10009316:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
10009318:	4b0e      	ldr	r3, [pc, #56]	@ (10009354 <OPENAMP_shmem_init+0x13c>)
1000931a:	681b      	ldr	r3, [r3, #0]
1000931c:	2b00      	cmp	r3, #0
1000931e:	d102      	bne.n	10009326 <OPENAMP_shmem_init+0x10e>
    return -1;
10009320:	f04f 33ff 	mov.w	r3, #4294967295
10009324:	e000      	b.n	10009328 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
10009326:	2300      	movs	r3, #0
}
10009328:	4618      	mov	r0, r3
1000932a:	3724      	adds	r7, #36	@ 0x24
1000932c:	46bd      	mov	sp, r7
1000932e:	bd90      	pop	{r4, r7, pc}
10009330:	1000b258 	.word	0x1000b258
10009334:	10020040 	.word	0x10020040
10009338:	1000b244 	.word	0x1000b244
1000933c:	1000b250 	.word	0x1000b250
10009340:	10040000 	.word	0x10040000
10009344:	10020514 	.word	0x10020514
10009348:	10050000 	.word	0x10050000
1000934c:	10020470 	.word	0x10020470
10009350:	10020478 	.word	0x10020478
10009354:	10020474 	.word	0x10020474

10009358 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10009358:	b590      	push	{r4, r7, lr}
1000935a:	b08b      	sub	sp, #44	@ 0x2c
1000935c:	af04      	add	r7, sp, #16
1000935e:	6078      	str	r0, [r7, #4]
10009360:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
10009362:	2300      	movs	r3, #0
10009364:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
10009366:	2300      	movs	r3, #0
10009368:	613b      	str	r3, [r7, #16]
  int status = 0;
1000936a:	2300      	movs	r3, #0
1000936c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000936e:	f7ff fe8b 	bl	10009088 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
10009372:	6878      	ldr	r0, [r7, #4]
10009374:	f7ff ff50 	bl	10009218 <OPENAMP_shmem_init>
10009378:	60f8      	str	r0, [r7, #12]
  if(status)
1000937a:	68fb      	ldr	r3, [r7, #12]
1000937c:	2b00      	cmp	r3, #0
1000937e:	d001      	beq.n	10009384 <MX_OPENAMP_Init+0x2c>
  {
    return status;
10009380:	68fb      	ldr	r3, [r7, #12]
10009382:	e068      	b.n	10009456 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
10009384:	6878      	ldr	r0, [r7, #4]
10009386:	4b36      	ldr	r3, [pc, #216]	@ (10009460 <MX_OPENAMP_Init+0x108>)
10009388:	681b      	ldr	r3, [r3, #0]
1000938a:	f103 0218 	add.w	r2, r3, #24
1000938e:	4b35      	ldr	r3, [pc, #212]	@ (10009464 <MX_OPENAMP_Init+0x10c>)
10009390:	681b      	ldr	r3, [r3, #0]
10009392:	2100      	movs	r1, #0
10009394:	9102      	str	r1, [sp, #8]
10009396:	4934      	ldr	r1, [pc, #208]	@ (10009468 <MX_OPENAMP_Init+0x110>)
10009398:	9101      	str	r1, [sp, #4]
1000939a:	2100      	movs	r1, #0
1000939c:	9100      	str	r1, [sp, #0]
1000939e:	21ff      	movs	r1, #255	@ 0xff
100093a0:	f7fe f95e 	bl	10007660 <rproc_virtio_create_vdev>
100093a4:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
100093a6:	693b      	ldr	r3, [r7, #16]
100093a8:	2b00      	cmp	r3, #0
100093aa:	d102      	bne.n	100093b2 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
100093ac:	f04f 33ff 	mov.w	r3, #4294967295
100093b0:	e051      	b.n	10009456 <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
100093b2:	6938      	ldr	r0, [r7, #16]
100093b4:	f7fe fa6f 	bl	10007896 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
100093b8:	4b29      	ldr	r3, [pc, #164]	@ (10009460 <MX_OPENAMP_Init+0x108>)
100093ba:	681b      	ldr	r3, [r3, #0]
100093bc:	3334      	adds	r3, #52	@ 0x34
100093be:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100093c0:	697b      	ldr	r3, [r7, #20]
100093c2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
100093c4:	697b      	ldr	r3, [r7, #20]
100093c6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100093c8:	461c      	mov	r4, r3
100093ca:	4b28      	ldr	r3, [pc, #160]	@ (1000946c <MX_OPENAMP_Init+0x114>)
100093cc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
100093ce:	697a      	ldr	r2, [r7, #20]
100093d0:	6892      	ldr	r2, [r2, #8]
100093d2:	6979      	ldr	r1, [r7, #20]
100093d4:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100093d6:	9102      	str	r1, [sp, #8]
100093d8:	9201      	str	r2, [sp, #4]
100093da:	9300      	str	r3, [sp, #0]
100093dc:	4623      	mov	r3, r4
100093de:	4602      	mov	r2, r0
100093e0:	2100      	movs	r1, #0
100093e2:	6938      	ldr	r0, [r7, #16]
100093e4:	f7fe f9ea 	bl	100077bc <rproc_virtio_init_vring>
100093e8:	60f8      	str	r0, [r7, #12]
  if (status != 0)
100093ea:	68fb      	ldr	r3, [r7, #12]
100093ec:	2b00      	cmp	r3, #0
100093ee:	d001      	beq.n	100093f4 <MX_OPENAMP_Init+0x9c>
  {
    return status;
100093f0:	68fb      	ldr	r3, [r7, #12]
100093f2:	e030      	b.n	10009456 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
100093f4:	4b1a      	ldr	r3, [pc, #104]	@ (10009460 <MX_OPENAMP_Init+0x108>)
100093f6:	681b      	ldr	r3, [r3, #0]
100093f8:	3348      	adds	r3, #72	@ 0x48
100093fa:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
100093fc:	697b      	ldr	r3, [r7, #20]
100093fe:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10009400:	697b      	ldr	r3, [r7, #20]
10009402:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10009404:	461c      	mov	r4, r3
10009406:	4b19      	ldr	r3, [pc, #100]	@ (1000946c <MX_OPENAMP_Init+0x114>)
10009408:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000940a:	697a      	ldr	r2, [r7, #20]
1000940c:	6892      	ldr	r2, [r2, #8]
1000940e:	6979      	ldr	r1, [r7, #20]
10009410:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10009412:	9102      	str	r1, [sp, #8]
10009414:	9201      	str	r2, [sp, #4]
10009416:	9300      	str	r3, [sp, #0]
10009418:	4623      	mov	r3, r4
1000941a:	4602      	mov	r2, r0
1000941c:	2101      	movs	r1, #1
1000941e:	6938      	ldr	r0, [r7, #16]
10009420:	f7fe f9cc 	bl	100077bc <rproc_virtio_init_vring>
10009424:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10009426:	68fb      	ldr	r3, [r7, #12]
10009428:	2b00      	cmp	r3, #0
1000942a:	d001      	beq.n	10009430 <MX_OPENAMP_Init+0xd8>
  {
    return status;
1000942c:	68fb      	ldr	r3, [r7, #12]
1000942e:	e012      	b.n	10009456 <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10009430:	4a0f      	ldr	r2, [pc, #60]	@ (10009470 <MX_OPENAMP_Init+0x118>)
10009432:	4b10      	ldr	r3, [pc, #64]	@ (10009474 <MX_OPENAMP_Init+0x11c>)
10009434:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10009436:	461a      	mov	r2, r3
10009438:	f04f 31ff 	mov.w	r1, #4294967295
1000943c:	480e      	ldr	r0, [pc, #56]	@ (10009478 <MX_OPENAMP_Init+0x120>)
1000943e:	f7fe fec2 	bl	100081c6 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
10009442:	4b0a      	ldr	r3, [pc, #40]	@ (1000946c <MX_OPENAMP_Init+0x114>)
10009444:	681b      	ldr	r3, [r3, #0]
10009446:	4a0c      	ldr	r2, [pc, #48]	@ (10009478 <MX_OPENAMP_Init+0x120>)
10009448:	9200      	str	r2, [sp, #0]
1000944a:	683a      	ldr	r2, [r7, #0]
1000944c:	6939      	ldr	r1, [r7, #16]
1000944e:	480b      	ldr	r0, [pc, #44]	@ (1000947c <MX_OPENAMP_Init+0x124>)
10009450:	f7ff f9b6 	bl	100087c0 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
10009454:	2300      	movs	r3, #0
}
10009456:	4618      	mov	r0, r3
10009458:	371c      	adds	r7, #28
1000945a:	46bd      	mov	sp, r7
1000945c:	bd90      	pop	{r4, r7, pc}
1000945e:	bf00      	nop
10009460:	10020478 	.word	0x10020478
10009464:	10020474 	.word	0x10020474
10009468:	10009125 	.word	0x10009125
1000946c:	10020470 	.word	0x10020470
10009470:	10050000 	.word	0x10050000
10009474:	10040000 	.word	0x10040000
10009478:	1002047c 	.word	0x1002047c
1000947c:	10020488 	.word	0x10020488

10009480 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
10009480:	b580      	push	{r7, lr}
10009482:	b08a      	sub	sp, #40	@ 0x28
10009484:	af04      	add	r7, sp, #16
10009486:	60f8      	str	r0, [r7, #12]
10009488:	60b9      	str	r1, [r7, #8]
1000948a:	607a      	str	r2, [r7, #4]
1000948c:	603b      	str	r3, [r7, #0]
  int ret = 0;
1000948e:	2300      	movs	r3, #0
10009490:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
10009492:	6a3b      	ldr	r3, [r7, #32]
10009494:	9302      	str	r3, [sp, #8]
10009496:	683b      	ldr	r3, [r7, #0]
10009498:	9301      	str	r3, [sp, #4]
1000949a:	687b      	ldr	r3, [r7, #4]
1000949c:	9300      	str	r3, [sp, #0]
1000949e:	f04f 33ff 	mov.w	r3, #4294967295
100094a2:	68ba      	ldr	r2, [r7, #8]
100094a4:	4904      	ldr	r1, [pc, #16]	@ (100094b8 <OPENAMP_create_endpoint+0x38>)
100094a6:	68f8      	ldr	r0, [r7, #12]
100094a8:	f7fe fcc2 	bl	10007e30 <rpmsg_create_ept>
100094ac:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
100094ae:	697b      	ldr	r3, [r7, #20]
}
100094b0:	4618      	mov	r0, r3
100094b2:	3718      	adds	r7, #24
100094b4:	46bd      	mov	sp, r7
100094b6:	bd80      	pop	{r7, pc}
100094b8:	10020488 	.word	0x10020488

100094bc <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
100094bc:	b580      	push	{r7, lr}
100094be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
100094c0:	4b03      	ldr	r3, [pc, #12]	@ (100094d0 <OPENAMP_check_for_message+0x14>)
100094c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100094c4:	4618      	mov	r0, r3
100094c6:	f7ff fe03 	bl	100090d0 <MAILBOX_Poll>
}
100094ca:	bf00      	nop
100094cc:	bd80      	pop	{r7, pc}
100094ce:	bf00      	nop
100094d0:	10020488 	.word	0x10020488

100094d4 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
100094d4:	b480      	push	{r7}
100094d6:	b085      	sub	sp, #20
100094d8:	af00      	add	r7, sp, #0
100094da:	60f8      	str	r0, [r7, #12]
100094dc:	60b9      	str	r1, [r7, #8]
100094de:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
100094e0:	687b      	ldr	r3, [r7, #4]
100094e2:	228c      	movs	r2, #140	@ 0x8c
100094e4:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
100094e6:	68bb      	ldr	r3, [r7, #8]
100094e8:	4a03      	ldr	r2, [pc, #12]	@ (100094f8 <resource_table_init+0x24>)
100094ea:	601a      	str	r2, [r3, #0]
}
100094ec:	bf00      	nop
100094ee:	3714      	adds	r7, #20
100094f0:	46bd      	mov	sp, r7
100094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100094f6:	4770      	bx	lr
100094f8:	10020128 	.word	0x10020128

100094fc <__assert_func>:
100094fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100094fe:	4614      	mov	r4, r2
10009500:	461a      	mov	r2, r3
10009502:	4b09      	ldr	r3, [pc, #36]	@ (10009528 <__assert_func+0x2c>)
10009504:	681b      	ldr	r3, [r3, #0]
10009506:	4605      	mov	r5, r0
10009508:	68d8      	ldr	r0, [r3, #12]
1000950a:	b14c      	cbz	r4, 10009520 <__assert_func+0x24>
1000950c:	4b07      	ldr	r3, [pc, #28]	@ (1000952c <__assert_func+0x30>)
1000950e:	9100      	str	r1, [sp, #0]
10009510:	e9cd 3401 	strd	r3, r4, [sp, #4]
10009514:	4906      	ldr	r1, [pc, #24]	@ (10009530 <__assert_func+0x34>)
10009516:	462b      	mov	r3, r5
10009518:	f000 f9f8 	bl	1000990c <fiprintf>
1000951c:	f000 fb71 	bl	10009c02 <abort>
10009520:	4b04      	ldr	r3, [pc, #16]	@ (10009534 <__assert_func+0x38>)
10009522:	461c      	mov	r4, r3
10009524:	e7f3      	b.n	1000950e <__assert_func+0x12>
10009526:	bf00      	nop
10009528:	100200d8 	.word	0x100200d8
1000952c:	1000b315 	.word	0x1000b315
10009530:	1000b322 	.word	0x1000b322
10009534:	1000b350 	.word	0x1000b350

10009538 <atoi>:
10009538:	220a      	movs	r2, #10
1000953a:	2100      	movs	r1, #0
1000953c:	f000 b938 	b.w	100097b0 <strtol>

10009540 <malloc>:
10009540:	4b02      	ldr	r3, [pc, #8]	@ (1000954c <malloc+0xc>)
10009542:	4601      	mov	r1, r0
10009544:	6818      	ldr	r0, [r3, #0]
10009546:	f000 b82d 	b.w	100095a4 <_malloc_r>
1000954a:	bf00      	nop
1000954c:	100200d8 	.word	0x100200d8

10009550 <free>:
10009550:	4b02      	ldr	r3, [pc, #8]	@ (1000955c <free+0xc>)
10009552:	4601      	mov	r1, r0
10009554:	6818      	ldr	r0, [r3, #0]
10009556:	f000 bb5b 	b.w	10009c10 <_free_r>
1000955a:	bf00      	nop
1000955c:	100200d8 	.word	0x100200d8

10009560 <sbrk_aligned>:
10009560:	b570      	push	{r4, r5, r6, lr}
10009562:	4e0f      	ldr	r6, [pc, #60]	@ (100095a0 <sbrk_aligned+0x40>)
10009564:	460c      	mov	r4, r1
10009566:	6831      	ldr	r1, [r6, #0]
10009568:	4605      	mov	r5, r0
1000956a:	b911      	cbnz	r1, 10009572 <sbrk_aligned+0x12>
1000956c:	f000 faec 	bl	10009b48 <_sbrk_r>
10009570:	6030      	str	r0, [r6, #0]
10009572:	4621      	mov	r1, r4
10009574:	4628      	mov	r0, r5
10009576:	f000 fae7 	bl	10009b48 <_sbrk_r>
1000957a:	1c43      	adds	r3, r0, #1
1000957c:	d103      	bne.n	10009586 <sbrk_aligned+0x26>
1000957e:	f04f 34ff 	mov.w	r4, #4294967295
10009582:	4620      	mov	r0, r4
10009584:	bd70      	pop	{r4, r5, r6, pc}
10009586:	1cc4      	adds	r4, r0, #3
10009588:	f024 0403 	bic.w	r4, r4, #3
1000958c:	42a0      	cmp	r0, r4
1000958e:	d0f8      	beq.n	10009582 <sbrk_aligned+0x22>
10009590:	1a21      	subs	r1, r4, r0
10009592:	4628      	mov	r0, r5
10009594:	f000 fad8 	bl	10009b48 <_sbrk_r>
10009598:	3001      	adds	r0, #1
1000959a:	d1f2      	bne.n	10009582 <sbrk_aligned+0x22>
1000959c:	e7ef      	b.n	1000957e <sbrk_aligned+0x1e>
1000959e:	bf00      	nop
100095a0:	10020518 	.word	0x10020518

100095a4 <_malloc_r>:
100095a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100095a8:	1ccd      	adds	r5, r1, #3
100095aa:	f025 0503 	bic.w	r5, r5, #3
100095ae:	3508      	adds	r5, #8
100095b0:	2d0c      	cmp	r5, #12
100095b2:	bf38      	it	cc
100095b4:	250c      	movcc	r5, #12
100095b6:	2d00      	cmp	r5, #0
100095b8:	4606      	mov	r6, r0
100095ba:	db01      	blt.n	100095c0 <_malloc_r+0x1c>
100095bc:	42a9      	cmp	r1, r5
100095be:	d904      	bls.n	100095ca <_malloc_r+0x26>
100095c0:	230c      	movs	r3, #12
100095c2:	6033      	str	r3, [r6, #0]
100095c4:	2000      	movs	r0, #0
100095c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
100095ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 100096a0 <_malloc_r+0xfc>
100095ce:	f000 f869 	bl	100096a4 <__malloc_lock>
100095d2:	f8d8 3000 	ldr.w	r3, [r8]
100095d6:	461c      	mov	r4, r3
100095d8:	bb44      	cbnz	r4, 1000962c <_malloc_r+0x88>
100095da:	4629      	mov	r1, r5
100095dc:	4630      	mov	r0, r6
100095de:	f7ff ffbf 	bl	10009560 <sbrk_aligned>
100095e2:	1c43      	adds	r3, r0, #1
100095e4:	4604      	mov	r4, r0
100095e6:	d158      	bne.n	1000969a <_malloc_r+0xf6>
100095e8:	f8d8 4000 	ldr.w	r4, [r8]
100095ec:	4627      	mov	r7, r4
100095ee:	2f00      	cmp	r7, #0
100095f0:	d143      	bne.n	1000967a <_malloc_r+0xd6>
100095f2:	2c00      	cmp	r4, #0
100095f4:	d04b      	beq.n	1000968e <_malloc_r+0xea>
100095f6:	6823      	ldr	r3, [r4, #0]
100095f8:	4639      	mov	r1, r7
100095fa:	4630      	mov	r0, r6
100095fc:	eb04 0903 	add.w	r9, r4, r3
10009600:	f000 faa2 	bl	10009b48 <_sbrk_r>
10009604:	4581      	cmp	r9, r0
10009606:	d142      	bne.n	1000968e <_malloc_r+0xea>
10009608:	6821      	ldr	r1, [r4, #0]
1000960a:	1a6d      	subs	r5, r5, r1
1000960c:	4629      	mov	r1, r5
1000960e:	4630      	mov	r0, r6
10009610:	f7ff ffa6 	bl	10009560 <sbrk_aligned>
10009614:	3001      	adds	r0, #1
10009616:	d03a      	beq.n	1000968e <_malloc_r+0xea>
10009618:	6823      	ldr	r3, [r4, #0]
1000961a:	442b      	add	r3, r5
1000961c:	6023      	str	r3, [r4, #0]
1000961e:	f8d8 3000 	ldr.w	r3, [r8]
10009622:	685a      	ldr	r2, [r3, #4]
10009624:	bb62      	cbnz	r2, 10009680 <_malloc_r+0xdc>
10009626:	f8c8 7000 	str.w	r7, [r8]
1000962a:	e00f      	b.n	1000964c <_malloc_r+0xa8>
1000962c:	6822      	ldr	r2, [r4, #0]
1000962e:	1b52      	subs	r2, r2, r5
10009630:	d420      	bmi.n	10009674 <_malloc_r+0xd0>
10009632:	2a0b      	cmp	r2, #11
10009634:	d917      	bls.n	10009666 <_malloc_r+0xc2>
10009636:	1961      	adds	r1, r4, r5
10009638:	42a3      	cmp	r3, r4
1000963a:	6025      	str	r5, [r4, #0]
1000963c:	bf18      	it	ne
1000963e:	6059      	strne	r1, [r3, #4]
10009640:	6863      	ldr	r3, [r4, #4]
10009642:	bf08      	it	eq
10009644:	f8c8 1000 	streq.w	r1, [r8]
10009648:	5162      	str	r2, [r4, r5]
1000964a:	604b      	str	r3, [r1, #4]
1000964c:	4630      	mov	r0, r6
1000964e:	f000 f82f 	bl	100096b0 <__malloc_unlock>
10009652:	f104 000b 	add.w	r0, r4, #11
10009656:	1d23      	adds	r3, r4, #4
10009658:	f020 0007 	bic.w	r0, r0, #7
1000965c:	1ac2      	subs	r2, r0, r3
1000965e:	bf1c      	itt	ne
10009660:	1a1b      	subne	r3, r3, r0
10009662:	50a3      	strne	r3, [r4, r2]
10009664:	e7af      	b.n	100095c6 <_malloc_r+0x22>
10009666:	6862      	ldr	r2, [r4, #4]
10009668:	42a3      	cmp	r3, r4
1000966a:	bf0c      	ite	eq
1000966c:	f8c8 2000 	streq.w	r2, [r8]
10009670:	605a      	strne	r2, [r3, #4]
10009672:	e7eb      	b.n	1000964c <_malloc_r+0xa8>
10009674:	4623      	mov	r3, r4
10009676:	6864      	ldr	r4, [r4, #4]
10009678:	e7ae      	b.n	100095d8 <_malloc_r+0x34>
1000967a:	463c      	mov	r4, r7
1000967c:	687f      	ldr	r7, [r7, #4]
1000967e:	e7b6      	b.n	100095ee <_malloc_r+0x4a>
10009680:	461a      	mov	r2, r3
10009682:	685b      	ldr	r3, [r3, #4]
10009684:	42a3      	cmp	r3, r4
10009686:	d1fb      	bne.n	10009680 <_malloc_r+0xdc>
10009688:	2300      	movs	r3, #0
1000968a:	6053      	str	r3, [r2, #4]
1000968c:	e7de      	b.n	1000964c <_malloc_r+0xa8>
1000968e:	230c      	movs	r3, #12
10009690:	6033      	str	r3, [r6, #0]
10009692:	4630      	mov	r0, r6
10009694:	f000 f80c 	bl	100096b0 <__malloc_unlock>
10009698:	e794      	b.n	100095c4 <_malloc_r+0x20>
1000969a:	6005      	str	r5, [r0, #0]
1000969c:	e7d6      	b.n	1000964c <_malloc_r+0xa8>
1000969e:	bf00      	nop
100096a0:	1002051c 	.word	0x1002051c

100096a4 <__malloc_lock>:
100096a4:	4801      	ldr	r0, [pc, #4]	@ (100096ac <__malloc_lock+0x8>)
100096a6:	f000 ba9c 	b.w	10009be2 <__retarget_lock_acquire_recursive>
100096aa:	bf00      	nop
100096ac:	10020660 	.word	0x10020660

100096b0 <__malloc_unlock>:
100096b0:	4801      	ldr	r0, [pc, #4]	@ (100096b8 <__malloc_unlock+0x8>)
100096b2:	f000 ba97 	b.w	10009be4 <__retarget_lock_release_recursive>
100096b6:	bf00      	nop
100096b8:	10020660 	.word	0x10020660

100096bc <_strtol_l.isra.0>:
100096bc:	2b24      	cmp	r3, #36	@ 0x24
100096be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
100096c2:	4686      	mov	lr, r0
100096c4:	4690      	mov	r8, r2
100096c6:	d801      	bhi.n	100096cc <_strtol_l.isra.0+0x10>
100096c8:	2b01      	cmp	r3, #1
100096ca:	d106      	bne.n	100096da <_strtol_l.isra.0+0x1e>
100096cc:	f000 fa5e 	bl	10009b8c <__errno>
100096d0:	2316      	movs	r3, #22
100096d2:	6003      	str	r3, [r0, #0]
100096d4:	2000      	movs	r0, #0
100096d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100096da:	4834      	ldr	r0, [pc, #208]	@ (100097ac <_strtol_l.isra.0+0xf0>)
100096dc:	460d      	mov	r5, r1
100096de:	462a      	mov	r2, r5
100096e0:	f815 4b01 	ldrb.w	r4, [r5], #1
100096e4:	5d06      	ldrb	r6, [r0, r4]
100096e6:	f016 0608 	ands.w	r6, r6, #8
100096ea:	d1f8      	bne.n	100096de <_strtol_l.isra.0+0x22>
100096ec:	2c2d      	cmp	r4, #45	@ 0x2d
100096ee:	d110      	bne.n	10009712 <_strtol_l.isra.0+0x56>
100096f0:	782c      	ldrb	r4, [r5, #0]
100096f2:	2601      	movs	r6, #1
100096f4:	1c95      	adds	r5, r2, #2
100096f6:	f033 0210 	bics.w	r2, r3, #16
100096fa:	d115      	bne.n	10009728 <_strtol_l.isra.0+0x6c>
100096fc:	2c30      	cmp	r4, #48	@ 0x30
100096fe:	d10d      	bne.n	1000971c <_strtol_l.isra.0+0x60>
10009700:	782a      	ldrb	r2, [r5, #0]
10009702:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
10009706:	2a58      	cmp	r2, #88	@ 0x58
10009708:	d108      	bne.n	1000971c <_strtol_l.isra.0+0x60>
1000970a:	786c      	ldrb	r4, [r5, #1]
1000970c:	3502      	adds	r5, #2
1000970e:	2310      	movs	r3, #16
10009710:	e00a      	b.n	10009728 <_strtol_l.isra.0+0x6c>
10009712:	2c2b      	cmp	r4, #43	@ 0x2b
10009714:	bf04      	itt	eq
10009716:	782c      	ldrbeq	r4, [r5, #0]
10009718:	1c95      	addeq	r5, r2, #2
1000971a:	e7ec      	b.n	100096f6 <_strtol_l.isra.0+0x3a>
1000971c:	2b00      	cmp	r3, #0
1000971e:	d1f6      	bne.n	1000970e <_strtol_l.isra.0+0x52>
10009720:	2c30      	cmp	r4, #48	@ 0x30
10009722:	bf14      	ite	ne
10009724:	230a      	movne	r3, #10
10009726:	2308      	moveq	r3, #8
10009728:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
1000972c:	f10c 3cff 	add.w	ip, ip, #4294967295
10009730:	2200      	movs	r2, #0
10009732:	fbbc f9f3 	udiv	r9, ip, r3
10009736:	4610      	mov	r0, r2
10009738:	fb03 ca19 	mls	sl, r3, r9, ip
1000973c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
10009740:	2f09      	cmp	r7, #9
10009742:	d80f      	bhi.n	10009764 <_strtol_l.isra.0+0xa8>
10009744:	463c      	mov	r4, r7
10009746:	42a3      	cmp	r3, r4
10009748:	dd1b      	ble.n	10009782 <_strtol_l.isra.0+0xc6>
1000974a:	1c57      	adds	r7, r2, #1
1000974c:	d007      	beq.n	1000975e <_strtol_l.isra.0+0xa2>
1000974e:	4581      	cmp	r9, r0
10009750:	d314      	bcc.n	1000977c <_strtol_l.isra.0+0xc0>
10009752:	d101      	bne.n	10009758 <_strtol_l.isra.0+0x9c>
10009754:	45a2      	cmp	sl, r4
10009756:	db11      	blt.n	1000977c <_strtol_l.isra.0+0xc0>
10009758:	fb00 4003 	mla	r0, r0, r3, r4
1000975c:	2201      	movs	r2, #1
1000975e:	f815 4b01 	ldrb.w	r4, [r5], #1
10009762:	e7eb      	b.n	1000973c <_strtol_l.isra.0+0x80>
10009764:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
10009768:	2f19      	cmp	r7, #25
1000976a:	d801      	bhi.n	10009770 <_strtol_l.isra.0+0xb4>
1000976c:	3c37      	subs	r4, #55	@ 0x37
1000976e:	e7ea      	b.n	10009746 <_strtol_l.isra.0+0x8a>
10009770:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
10009774:	2f19      	cmp	r7, #25
10009776:	d804      	bhi.n	10009782 <_strtol_l.isra.0+0xc6>
10009778:	3c57      	subs	r4, #87	@ 0x57
1000977a:	e7e4      	b.n	10009746 <_strtol_l.isra.0+0x8a>
1000977c:	f04f 32ff 	mov.w	r2, #4294967295
10009780:	e7ed      	b.n	1000975e <_strtol_l.isra.0+0xa2>
10009782:	1c53      	adds	r3, r2, #1
10009784:	d108      	bne.n	10009798 <_strtol_l.isra.0+0xdc>
10009786:	2322      	movs	r3, #34	@ 0x22
10009788:	f8ce 3000 	str.w	r3, [lr]
1000978c:	4660      	mov	r0, ip
1000978e:	f1b8 0f00 	cmp.w	r8, #0
10009792:	d0a0      	beq.n	100096d6 <_strtol_l.isra.0+0x1a>
10009794:	1e69      	subs	r1, r5, #1
10009796:	e006      	b.n	100097a6 <_strtol_l.isra.0+0xea>
10009798:	b106      	cbz	r6, 1000979c <_strtol_l.isra.0+0xe0>
1000979a:	4240      	negs	r0, r0
1000979c:	f1b8 0f00 	cmp.w	r8, #0
100097a0:	d099      	beq.n	100096d6 <_strtol_l.isra.0+0x1a>
100097a2:	2a00      	cmp	r2, #0
100097a4:	d1f6      	bne.n	10009794 <_strtol_l.isra.0+0xd8>
100097a6:	f8c8 1000 	str.w	r1, [r8]
100097aa:	e794      	b.n	100096d6 <_strtol_l.isra.0+0x1a>
100097ac:	1000b385 	.word	0x1000b385

100097b0 <strtol>:
100097b0:	4613      	mov	r3, r2
100097b2:	460a      	mov	r2, r1
100097b4:	4601      	mov	r1, r0
100097b6:	4802      	ldr	r0, [pc, #8]	@ (100097c0 <strtol+0x10>)
100097b8:	6800      	ldr	r0, [r0, #0]
100097ba:	f7ff bf7f 	b.w	100096bc <_strtol_l.isra.0>
100097be:	bf00      	nop
100097c0:	100200d8 	.word	0x100200d8

100097c4 <std>:
100097c4:	2300      	movs	r3, #0
100097c6:	b510      	push	{r4, lr}
100097c8:	4604      	mov	r4, r0
100097ca:	e9c0 3300 	strd	r3, r3, [r0]
100097ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
100097d2:	6083      	str	r3, [r0, #8]
100097d4:	8181      	strh	r1, [r0, #12]
100097d6:	6643      	str	r3, [r0, #100]	@ 0x64
100097d8:	81c2      	strh	r2, [r0, #14]
100097da:	6183      	str	r3, [r0, #24]
100097dc:	4619      	mov	r1, r3
100097de:	2208      	movs	r2, #8
100097e0:	305c      	adds	r0, #92	@ 0x5c
100097e2:	f000 f943 	bl	10009a6c <memset>
100097e6:	4b0d      	ldr	r3, [pc, #52]	@ (1000981c <std+0x58>)
100097e8:	6263      	str	r3, [r4, #36]	@ 0x24
100097ea:	4b0d      	ldr	r3, [pc, #52]	@ (10009820 <std+0x5c>)
100097ec:	62a3      	str	r3, [r4, #40]	@ 0x28
100097ee:	4b0d      	ldr	r3, [pc, #52]	@ (10009824 <std+0x60>)
100097f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
100097f2:	4b0d      	ldr	r3, [pc, #52]	@ (10009828 <std+0x64>)
100097f4:	6323      	str	r3, [r4, #48]	@ 0x30
100097f6:	4b0d      	ldr	r3, [pc, #52]	@ (1000982c <std+0x68>)
100097f8:	6224      	str	r4, [r4, #32]
100097fa:	429c      	cmp	r4, r3
100097fc:	d006      	beq.n	1000980c <std+0x48>
100097fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
10009802:	4294      	cmp	r4, r2
10009804:	d002      	beq.n	1000980c <std+0x48>
10009806:	33d0      	adds	r3, #208	@ 0xd0
10009808:	429c      	cmp	r4, r3
1000980a:	d105      	bne.n	10009818 <std+0x54>
1000980c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
10009810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009814:	f000 b9e4 	b.w	10009be0 <__retarget_lock_init_recursive>
10009818:	bd10      	pop	{r4, pc}
1000981a:	bf00      	nop
1000981c:	1000996d 	.word	0x1000996d
10009820:	1000998f 	.word	0x1000998f
10009824:	100099c7 	.word	0x100099c7
10009828:	100099eb 	.word	0x100099eb
1000982c:	10020520 	.word	0x10020520

10009830 <stdio_exit_handler>:
10009830:	4a02      	ldr	r2, [pc, #8]	@ (1000983c <stdio_exit_handler+0xc>)
10009832:	4903      	ldr	r1, [pc, #12]	@ (10009840 <stdio_exit_handler+0x10>)
10009834:	4803      	ldr	r0, [pc, #12]	@ (10009844 <stdio_exit_handler+0x14>)
10009836:	f000 b87b 	b.w	10009930 <_fwalk_sglue>
1000983a:	bf00      	nop
1000983c:	100200cc 	.word	0x100200cc
10009840:	1000a5f9 	.word	0x1000a5f9
10009844:	100200dc 	.word	0x100200dc

10009848 <cleanup_stdio>:
10009848:	6841      	ldr	r1, [r0, #4]
1000984a:	4b0c      	ldr	r3, [pc, #48]	@ (1000987c <cleanup_stdio+0x34>)
1000984c:	4299      	cmp	r1, r3
1000984e:	b510      	push	{r4, lr}
10009850:	4604      	mov	r4, r0
10009852:	d001      	beq.n	10009858 <cleanup_stdio+0x10>
10009854:	f000 fed0 	bl	1000a5f8 <_fflush_r>
10009858:	68a1      	ldr	r1, [r4, #8]
1000985a:	4b09      	ldr	r3, [pc, #36]	@ (10009880 <cleanup_stdio+0x38>)
1000985c:	4299      	cmp	r1, r3
1000985e:	d002      	beq.n	10009866 <cleanup_stdio+0x1e>
10009860:	4620      	mov	r0, r4
10009862:	f000 fec9 	bl	1000a5f8 <_fflush_r>
10009866:	68e1      	ldr	r1, [r4, #12]
10009868:	4b06      	ldr	r3, [pc, #24]	@ (10009884 <cleanup_stdio+0x3c>)
1000986a:	4299      	cmp	r1, r3
1000986c:	d004      	beq.n	10009878 <cleanup_stdio+0x30>
1000986e:	4620      	mov	r0, r4
10009870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009874:	f000 bec0 	b.w	1000a5f8 <_fflush_r>
10009878:	bd10      	pop	{r4, pc}
1000987a:	bf00      	nop
1000987c:	10020520 	.word	0x10020520
10009880:	10020588 	.word	0x10020588
10009884:	100205f0 	.word	0x100205f0

10009888 <global_stdio_init.part.0>:
10009888:	b510      	push	{r4, lr}
1000988a:	4b0b      	ldr	r3, [pc, #44]	@ (100098b8 <global_stdio_init.part.0+0x30>)
1000988c:	4c0b      	ldr	r4, [pc, #44]	@ (100098bc <global_stdio_init.part.0+0x34>)
1000988e:	4a0c      	ldr	r2, [pc, #48]	@ (100098c0 <global_stdio_init.part.0+0x38>)
10009890:	601a      	str	r2, [r3, #0]
10009892:	4620      	mov	r0, r4
10009894:	2200      	movs	r2, #0
10009896:	2104      	movs	r1, #4
10009898:	f7ff ff94 	bl	100097c4 <std>
1000989c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
100098a0:	2201      	movs	r2, #1
100098a2:	2109      	movs	r1, #9
100098a4:	f7ff ff8e 	bl	100097c4 <std>
100098a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
100098ac:	2202      	movs	r2, #2
100098ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100098b2:	2112      	movs	r1, #18
100098b4:	f7ff bf86 	b.w	100097c4 <std>
100098b8:	10020658 	.word	0x10020658
100098bc:	10020520 	.word	0x10020520
100098c0:	10009831 	.word	0x10009831

100098c4 <__sfp_lock_acquire>:
100098c4:	4801      	ldr	r0, [pc, #4]	@ (100098cc <__sfp_lock_acquire+0x8>)
100098c6:	f000 b98c 	b.w	10009be2 <__retarget_lock_acquire_recursive>
100098ca:	bf00      	nop
100098cc:	10020661 	.word	0x10020661

100098d0 <__sfp_lock_release>:
100098d0:	4801      	ldr	r0, [pc, #4]	@ (100098d8 <__sfp_lock_release+0x8>)
100098d2:	f000 b987 	b.w	10009be4 <__retarget_lock_release_recursive>
100098d6:	bf00      	nop
100098d8:	10020661 	.word	0x10020661

100098dc <__sinit>:
100098dc:	b510      	push	{r4, lr}
100098de:	4604      	mov	r4, r0
100098e0:	f7ff fff0 	bl	100098c4 <__sfp_lock_acquire>
100098e4:	6a23      	ldr	r3, [r4, #32]
100098e6:	b11b      	cbz	r3, 100098f0 <__sinit+0x14>
100098e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
100098ec:	f7ff bff0 	b.w	100098d0 <__sfp_lock_release>
100098f0:	4b04      	ldr	r3, [pc, #16]	@ (10009904 <__sinit+0x28>)
100098f2:	6223      	str	r3, [r4, #32]
100098f4:	4b04      	ldr	r3, [pc, #16]	@ (10009908 <__sinit+0x2c>)
100098f6:	681b      	ldr	r3, [r3, #0]
100098f8:	2b00      	cmp	r3, #0
100098fa:	d1f5      	bne.n	100098e8 <__sinit+0xc>
100098fc:	f7ff ffc4 	bl	10009888 <global_stdio_init.part.0>
10009900:	e7f2      	b.n	100098e8 <__sinit+0xc>
10009902:	bf00      	nop
10009904:	10009849 	.word	0x10009849
10009908:	10020658 	.word	0x10020658

1000990c <fiprintf>:
1000990c:	b40e      	push	{r1, r2, r3}
1000990e:	b503      	push	{r0, r1, lr}
10009910:	4601      	mov	r1, r0
10009912:	ab03      	add	r3, sp, #12
10009914:	4805      	ldr	r0, [pc, #20]	@ (1000992c <fiprintf+0x20>)
10009916:	f853 2b04 	ldr.w	r2, [r3], #4
1000991a:	6800      	ldr	r0, [r0, #0]
1000991c:	9301      	str	r3, [sp, #4]
1000991e:	f000 fb43 	bl	10009fa8 <_vfiprintf_r>
10009922:	b002      	add	sp, #8
10009924:	f85d eb04 	ldr.w	lr, [sp], #4
10009928:	b003      	add	sp, #12
1000992a:	4770      	bx	lr
1000992c:	100200d8 	.word	0x100200d8

10009930 <_fwalk_sglue>:
10009930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10009934:	4607      	mov	r7, r0
10009936:	4688      	mov	r8, r1
10009938:	4614      	mov	r4, r2
1000993a:	2600      	movs	r6, #0
1000993c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10009940:	f1b9 0901 	subs.w	r9, r9, #1
10009944:	d505      	bpl.n	10009952 <_fwalk_sglue+0x22>
10009946:	6824      	ldr	r4, [r4, #0]
10009948:	2c00      	cmp	r4, #0
1000994a:	d1f7      	bne.n	1000993c <_fwalk_sglue+0xc>
1000994c:	4630      	mov	r0, r6
1000994e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10009952:	89ab      	ldrh	r3, [r5, #12]
10009954:	2b01      	cmp	r3, #1
10009956:	d907      	bls.n	10009968 <_fwalk_sglue+0x38>
10009958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1000995c:	3301      	adds	r3, #1
1000995e:	d003      	beq.n	10009968 <_fwalk_sglue+0x38>
10009960:	4629      	mov	r1, r5
10009962:	4638      	mov	r0, r7
10009964:	47c0      	blx	r8
10009966:	4306      	orrs	r6, r0
10009968:	3568      	adds	r5, #104	@ 0x68
1000996a:	e7e9      	b.n	10009940 <_fwalk_sglue+0x10>

1000996c <__sread>:
1000996c:	b510      	push	{r4, lr}
1000996e:	460c      	mov	r4, r1
10009970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009974:	f000 f8d6 	bl	10009b24 <_read_r>
10009978:	2800      	cmp	r0, #0
1000997a:	bfab      	itete	ge
1000997c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
1000997e:	89a3      	ldrhlt	r3, [r4, #12]
10009980:	181b      	addge	r3, r3, r0
10009982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
10009986:	bfac      	ite	ge
10009988:	6563      	strge	r3, [r4, #84]	@ 0x54
1000998a:	81a3      	strhlt	r3, [r4, #12]
1000998c:	bd10      	pop	{r4, pc}

1000998e <__swrite>:
1000998e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10009992:	461f      	mov	r7, r3
10009994:	898b      	ldrh	r3, [r1, #12]
10009996:	05db      	lsls	r3, r3, #23
10009998:	4605      	mov	r5, r0
1000999a:	460c      	mov	r4, r1
1000999c:	4616      	mov	r6, r2
1000999e:	d505      	bpl.n	100099ac <__swrite+0x1e>
100099a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100099a4:	2302      	movs	r3, #2
100099a6:	2200      	movs	r2, #0
100099a8:	f000 f8aa 	bl	10009b00 <_lseek_r>
100099ac:	89a3      	ldrh	r3, [r4, #12]
100099ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
100099b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
100099b6:	81a3      	strh	r3, [r4, #12]
100099b8:	4632      	mov	r2, r6
100099ba:	463b      	mov	r3, r7
100099bc:	4628      	mov	r0, r5
100099be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
100099c2:	f000 b8d1 	b.w	10009b68 <_write_r>

100099c6 <__sseek>:
100099c6:	b510      	push	{r4, lr}
100099c8:	460c      	mov	r4, r1
100099ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100099ce:	f000 f897 	bl	10009b00 <_lseek_r>
100099d2:	1c43      	adds	r3, r0, #1
100099d4:	89a3      	ldrh	r3, [r4, #12]
100099d6:	bf15      	itete	ne
100099d8:	6560      	strne	r0, [r4, #84]	@ 0x54
100099da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
100099de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
100099e2:	81a3      	strheq	r3, [r4, #12]
100099e4:	bf18      	it	ne
100099e6:	81a3      	strhne	r3, [r4, #12]
100099e8:	bd10      	pop	{r4, pc}

100099ea <__sclose>:
100099ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100099ee:	f000 b877 	b.w	10009ae0 <_close_r>

100099f2 <_vsniprintf_r>:
100099f2:	b530      	push	{r4, r5, lr}
100099f4:	4614      	mov	r4, r2
100099f6:	2c00      	cmp	r4, #0
100099f8:	b09b      	sub	sp, #108	@ 0x6c
100099fa:	4605      	mov	r5, r0
100099fc:	461a      	mov	r2, r3
100099fe:	da05      	bge.n	10009a0c <_vsniprintf_r+0x1a>
10009a00:	238b      	movs	r3, #139	@ 0x8b
10009a02:	6003      	str	r3, [r0, #0]
10009a04:	f04f 30ff 	mov.w	r0, #4294967295
10009a08:	b01b      	add	sp, #108	@ 0x6c
10009a0a:	bd30      	pop	{r4, r5, pc}
10009a0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
10009a10:	f8ad 300c 	strh.w	r3, [sp, #12]
10009a14:	f04f 0300 	mov.w	r3, #0
10009a18:	9319      	str	r3, [sp, #100]	@ 0x64
10009a1a:	bf14      	ite	ne
10009a1c:	f104 33ff 	addne.w	r3, r4, #4294967295
10009a20:	4623      	moveq	r3, r4
10009a22:	9302      	str	r3, [sp, #8]
10009a24:	9305      	str	r3, [sp, #20]
10009a26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
10009a2a:	9100      	str	r1, [sp, #0]
10009a2c:	9104      	str	r1, [sp, #16]
10009a2e:	f8ad 300e 	strh.w	r3, [sp, #14]
10009a32:	4669      	mov	r1, sp
10009a34:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
10009a36:	f000 f991 	bl	10009d5c <_svfiprintf_r>
10009a3a:	1c43      	adds	r3, r0, #1
10009a3c:	bfbc      	itt	lt
10009a3e:	238b      	movlt	r3, #139	@ 0x8b
10009a40:	602b      	strlt	r3, [r5, #0]
10009a42:	2c00      	cmp	r4, #0
10009a44:	d0e0      	beq.n	10009a08 <_vsniprintf_r+0x16>
10009a46:	9b00      	ldr	r3, [sp, #0]
10009a48:	2200      	movs	r2, #0
10009a4a:	701a      	strb	r2, [r3, #0]
10009a4c:	e7dc      	b.n	10009a08 <_vsniprintf_r+0x16>
	...

10009a50 <vsniprintf>:
10009a50:	b507      	push	{r0, r1, r2, lr}
10009a52:	9300      	str	r3, [sp, #0]
10009a54:	4613      	mov	r3, r2
10009a56:	460a      	mov	r2, r1
10009a58:	4601      	mov	r1, r0
10009a5a:	4803      	ldr	r0, [pc, #12]	@ (10009a68 <vsniprintf+0x18>)
10009a5c:	6800      	ldr	r0, [r0, #0]
10009a5e:	f7ff ffc8 	bl	100099f2 <_vsniprintf_r>
10009a62:	b003      	add	sp, #12
10009a64:	f85d fb04 	ldr.w	pc, [sp], #4
10009a68:	100200d8 	.word	0x100200d8

10009a6c <memset>:
10009a6c:	4402      	add	r2, r0
10009a6e:	4603      	mov	r3, r0
10009a70:	4293      	cmp	r3, r2
10009a72:	d100      	bne.n	10009a76 <memset+0xa>
10009a74:	4770      	bx	lr
10009a76:	f803 1b01 	strb.w	r1, [r3], #1
10009a7a:	e7f9      	b.n	10009a70 <memset+0x4>

10009a7c <strchr>:
10009a7c:	b2c9      	uxtb	r1, r1
10009a7e:	4603      	mov	r3, r0
10009a80:	4618      	mov	r0, r3
10009a82:	f813 2b01 	ldrb.w	r2, [r3], #1
10009a86:	b112      	cbz	r2, 10009a8e <strchr+0x12>
10009a88:	428a      	cmp	r2, r1
10009a8a:	d1f9      	bne.n	10009a80 <strchr+0x4>
10009a8c:	4770      	bx	lr
10009a8e:	2900      	cmp	r1, #0
10009a90:	bf18      	it	ne
10009a92:	2000      	movne	r0, #0
10009a94:	4770      	bx	lr

10009a96 <strncmp>:
10009a96:	b510      	push	{r4, lr}
10009a98:	b16a      	cbz	r2, 10009ab6 <strncmp+0x20>
10009a9a:	3901      	subs	r1, #1
10009a9c:	1884      	adds	r4, r0, r2
10009a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
10009aa2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10009aa6:	429a      	cmp	r2, r3
10009aa8:	d103      	bne.n	10009ab2 <strncmp+0x1c>
10009aaa:	42a0      	cmp	r0, r4
10009aac:	d001      	beq.n	10009ab2 <strncmp+0x1c>
10009aae:	2a00      	cmp	r2, #0
10009ab0:	d1f5      	bne.n	10009a9e <strncmp+0x8>
10009ab2:	1ad0      	subs	r0, r2, r3
10009ab4:	bd10      	pop	{r4, pc}
10009ab6:	4610      	mov	r0, r2
10009ab8:	e7fc      	b.n	10009ab4 <strncmp+0x1e>

10009aba <strncpy>:
10009aba:	b510      	push	{r4, lr}
10009abc:	3901      	subs	r1, #1
10009abe:	4603      	mov	r3, r0
10009ac0:	b132      	cbz	r2, 10009ad0 <strncpy+0x16>
10009ac2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10009ac6:	f803 4b01 	strb.w	r4, [r3], #1
10009aca:	3a01      	subs	r2, #1
10009acc:	2c00      	cmp	r4, #0
10009ace:	d1f7      	bne.n	10009ac0 <strncpy+0x6>
10009ad0:	441a      	add	r2, r3
10009ad2:	2100      	movs	r1, #0
10009ad4:	4293      	cmp	r3, r2
10009ad6:	d100      	bne.n	10009ada <strncpy+0x20>
10009ad8:	bd10      	pop	{r4, pc}
10009ada:	f803 1b01 	strb.w	r1, [r3], #1
10009ade:	e7f9      	b.n	10009ad4 <strncpy+0x1a>

10009ae0 <_close_r>:
10009ae0:	b538      	push	{r3, r4, r5, lr}
10009ae2:	4d06      	ldr	r5, [pc, #24]	@ (10009afc <_close_r+0x1c>)
10009ae4:	2300      	movs	r3, #0
10009ae6:	4604      	mov	r4, r0
10009ae8:	4608      	mov	r0, r1
10009aea:	602b      	str	r3, [r5, #0]
10009aec:	f7f7 ffbc 	bl	10001a68 <_close>
10009af0:	1c43      	adds	r3, r0, #1
10009af2:	d102      	bne.n	10009afa <_close_r+0x1a>
10009af4:	682b      	ldr	r3, [r5, #0]
10009af6:	b103      	cbz	r3, 10009afa <_close_r+0x1a>
10009af8:	6023      	str	r3, [r4, #0]
10009afa:	bd38      	pop	{r3, r4, r5, pc}
10009afc:	1002065c 	.word	0x1002065c

10009b00 <_lseek_r>:
10009b00:	b538      	push	{r3, r4, r5, lr}
10009b02:	4d07      	ldr	r5, [pc, #28]	@ (10009b20 <_lseek_r+0x20>)
10009b04:	4604      	mov	r4, r0
10009b06:	4608      	mov	r0, r1
10009b08:	4611      	mov	r1, r2
10009b0a:	2200      	movs	r2, #0
10009b0c:	602a      	str	r2, [r5, #0]
10009b0e:	461a      	mov	r2, r3
10009b10:	f7f7 ffd1 	bl	10001ab6 <_lseek>
10009b14:	1c43      	adds	r3, r0, #1
10009b16:	d102      	bne.n	10009b1e <_lseek_r+0x1e>
10009b18:	682b      	ldr	r3, [r5, #0]
10009b1a:	b103      	cbz	r3, 10009b1e <_lseek_r+0x1e>
10009b1c:	6023      	str	r3, [r4, #0]
10009b1e:	bd38      	pop	{r3, r4, r5, pc}
10009b20:	1002065c 	.word	0x1002065c

10009b24 <_read_r>:
10009b24:	b538      	push	{r3, r4, r5, lr}
10009b26:	4d07      	ldr	r5, [pc, #28]	@ (10009b44 <_read_r+0x20>)
10009b28:	4604      	mov	r4, r0
10009b2a:	4608      	mov	r0, r1
10009b2c:	4611      	mov	r1, r2
10009b2e:	2200      	movs	r2, #0
10009b30:	602a      	str	r2, [r5, #0]
10009b32:	461a      	mov	r2, r3
10009b34:	f7f7 ff5f 	bl	100019f6 <_read>
10009b38:	1c43      	adds	r3, r0, #1
10009b3a:	d102      	bne.n	10009b42 <_read_r+0x1e>
10009b3c:	682b      	ldr	r3, [r5, #0]
10009b3e:	b103      	cbz	r3, 10009b42 <_read_r+0x1e>
10009b40:	6023      	str	r3, [r4, #0]
10009b42:	bd38      	pop	{r3, r4, r5, pc}
10009b44:	1002065c 	.word	0x1002065c

10009b48 <_sbrk_r>:
10009b48:	b538      	push	{r3, r4, r5, lr}
10009b4a:	4d06      	ldr	r5, [pc, #24]	@ (10009b64 <_sbrk_r+0x1c>)
10009b4c:	2300      	movs	r3, #0
10009b4e:	4604      	mov	r4, r0
10009b50:	4608      	mov	r0, r1
10009b52:	602b      	str	r3, [r5, #0]
10009b54:	f7f7 ffbc 	bl	10001ad0 <_sbrk>
10009b58:	1c43      	adds	r3, r0, #1
10009b5a:	d102      	bne.n	10009b62 <_sbrk_r+0x1a>
10009b5c:	682b      	ldr	r3, [r5, #0]
10009b5e:	b103      	cbz	r3, 10009b62 <_sbrk_r+0x1a>
10009b60:	6023      	str	r3, [r4, #0]
10009b62:	bd38      	pop	{r3, r4, r5, pc}
10009b64:	1002065c 	.word	0x1002065c

10009b68 <_write_r>:
10009b68:	b538      	push	{r3, r4, r5, lr}
10009b6a:	4d07      	ldr	r5, [pc, #28]	@ (10009b88 <_write_r+0x20>)
10009b6c:	4604      	mov	r4, r0
10009b6e:	4608      	mov	r0, r1
10009b70:	4611      	mov	r1, r2
10009b72:	2200      	movs	r2, #0
10009b74:	602a      	str	r2, [r5, #0]
10009b76:	461a      	mov	r2, r3
10009b78:	f7f7 ff5a 	bl	10001a30 <_write>
10009b7c:	1c43      	adds	r3, r0, #1
10009b7e:	d102      	bne.n	10009b86 <_write_r+0x1e>
10009b80:	682b      	ldr	r3, [r5, #0]
10009b82:	b103      	cbz	r3, 10009b86 <_write_r+0x1e>
10009b84:	6023      	str	r3, [r4, #0]
10009b86:	bd38      	pop	{r3, r4, r5, pc}
10009b88:	1002065c 	.word	0x1002065c

10009b8c <__errno>:
10009b8c:	4b01      	ldr	r3, [pc, #4]	@ (10009b94 <__errno+0x8>)
10009b8e:	6818      	ldr	r0, [r3, #0]
10009b90:	4770      	bx	lr
10009b92:	bf00      	nop
10009b94:	100200d8 	.word	0x100200d8

10009b98 <__libc_init_array>:
10009b98:	b570      	push	{r4, r5, r6, lr}
10009b9a:	4d0d      	ldr	r5, [pc, #52]	@ (10009bd0 <__libc_init_array+0x38>)
10009b9c:	4c0d      	ldr	r4, [pc, #52]	@ (10009bd4 <__libc_init_array+0x3c>)
10009b9e:	1b64      	subs	r4, r4, r5
10009ba0:	10a4      	asrs	r4, r4, #2
10009ba2:	2600      	movs	r6, #0
10009ba4:	42a6      	cmp	r6, r4
10009ba6:	d109      	bne.n	10009bbc <__libc_init_array+0x24>
10009ba8:	4d0b      	ldr	r5, [pc, #44]	@ (10009bd8 <__libc_init_array+0x40>)
10009baa:	4c0c      	ldr	r4, [pc, #48]	@ (10009bdc <__libc_init_array+0x44>)
10009bac:	f000 fef8 	bl	1000a9a0 <_init>
10009bb0:	1b64      	subs	r4, r4, r5
10009bb2:	10a4      	asrs	r4, r4, #2
10009bb4:	2600      	movs	r6, #0
10009bb6:	42a6      	cmp	r6, r4
10009bb8:	d105      	bne.n	10009bc6 <__libc_init_array+0x2e>
10009bba:	bd70      	pop	{r4, r5, r6, pc}
10009bbc:	f855 3b04 	ldr.w	r3, [r5], #4
10009bc0:	4798      	blx	r3
10009bc2:	3601      	adds	r6, #1
10009bc4:	e7ee      	b.n	10009ba4 <__libc_init_array+0xc>
10009bc6:	f855 3b04 	ldr.w	r3, [r5], #4
10009bca:	4798      	blx	r3
10009bcc:	3601      	adds	r6, #1
10009bce:	e7f2      	b.n	10009bb6 <__libc_init_array+0x1e>
10009bd0:	1000b490 	.word	0x1000b490
10009bd4:	1000b490 	.word	0x1000b490
10009bd8:	1000b490 	.word	0x1000b490
10009bdc:	1000b494 	.word	0x1000b494

10009be0 <__retarget_lock_init_recursive>:
10009be0:	4770      	bx	lr

10009be2 <__retarget_lock_acquire_recursive>:
10009be2:	4770      	bx	lr

10009be4 <__retarget_lock_release_recursive>:
10009be4:	4770      	bx	lr

10009be6 <memcpy>:
10009be6:	440a      	add	r2, r1
10009be8:	4291      	cmp	r1, r2
10009bea:	f100 33ff 	add.w	r3, r0, #4294967295
10009bee:	d100      	bne.n	10009bf2 <memcpy+0xc>
10009bf0:	4770      	bx	lr
10009bf2:	b510      	push	{r4, lr}
10009bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
10009bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
10009bfc:	4291      	cmp	r1, r2
10009bfe:	d1f9      	bne.n	10009bf4 <memcpy+0xe>
10009c00:	bd10      	pop	{r4, pc}

10009c02 <abort>:
10009c02:	b508      	push	{r3, lr}
10009c04:	2006      	movs	r0, #6
10009c06:	f000 fdf5 	bl	1000a7f4 <raise>
10009c0a:	2001      	movs	r0, #1
10009c0c:	f7f7 fee8 	bl	100019e0 <_exit>

10009c10 <_free_r>:
10009c10:	b538      	push	{r3, r4, r5, lr}
10009c12:	4605      	mov	r5, r0
10009c14:	2900      	cmp	r1, #0
10009c16:	d041      	beq.n	10009c9c <_free_r+0x8c>
10009c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
10009c1c:	1f0c      	subs	r4, r1, #4
10009c1e:	2b00      	cmp	r3, #0
10009c20:	bfb8      	it	lt
10009c22:	18e4      	addlt	r4, r4, r3
10009c24:	f7ff fd3e 	bl	100096a4 <__malloc_lock>
10009c28:	4a1d      	ldr	r2, [pc, #116]	@ (10009ca0 <_free_r+0x90>)
10009c2a:	6813      	ldr	r3, [r2, #0]
10009c2c:	b933      	cbnz	r3, 10009c3c <_free_r+0x2c>
10009c2e:	6063      	str	r3, [r4, #4]
10009c30:	6014      	str	r4, [r2, #0]
10009c32:	4628      	mov	r0, r5
10009c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10009c38:	f7ff bd3a 	b.w	100096b0 <__malloc_unlock>
10009c3c:	42a3      	cmp	r3, r4
10009c3e:	d908      	bls.n	10009c52 <_free_r+0x42>
10009c40:	6820      	ldr	r0, [r4, #0]
10009c42:	1821      	adds	r1, r4, r0
10009c44:	428b      	cmp	r3, r1
10009c46:	bf01      	itttt	eq
10009c48:	6819      	ldreq	r1, [r3, #0]
10009c4a:	685b      	ldreq	r3, [r3, #4]
10009c4c:	1809      	addeq	r1, r1, r0
10009c4e:	6021      	streq	r1, [r4, #0]
10009c50:	e7ed      	b.n	10009c2e <_free_r+0x1e>
10009c52:	461a      	mov	r2, r3
10009c54:	685b      	ldr	r3, [r3, #4]
10009c56:	b10b      	cbz	r3, 10009c5c <_free_r+0x4c>
10009c58:	42a3      	cmp	r3, r4
10009c5a:	d9fa      	bls.n	10009c52 <_free_r+0x42>
10009c5c:	6811      	ldr	r1, [r2, #0]
10009c5e:	1850      	adds	r0, r2, r1
10009c60:	42a0      	cmp	r0, r4
10009c62:	d10b      	bne.n	10009c7c <_free_r+0x6c>
10009c64:	6820      	ldr	r0, [r4, #0]
10009c66:	4401      	add	r1, r0
10009c68:	1850      	adds	r0, r2, r1
10009c6a:	4283      	cmp	r3, r0
10009c6c:	6011      	str	r1, [r2, #0]
10009c6e:	d1e0      	bne.n	10009c32 <_free_r+0x22>
10009c70:	6818      	ldr	r0, [r3, #0]
10009c72:	685b      	ldr	r3, [r3, #4]
10009c74:	6053      	str	r3, [r2, #4]
10009c76:	4408      	add	r0, r1
10009c78:	6010      	str	r0, [r2, #0]
10009c7a:	e7da      	b.n	10009c32 <_free_r+0x22>
10009c7c:	d902      	bls.n	10009c84 <_free_r+0x74>
10009c7e:	230c      	movs	r3, #12
10009c80:	602b      	str	r3, [r5, #0]
10009c82:	e7d6      	b.n	10009c32 <_free_r+0x22>
10009c84:	6820      	ldr	r0, [r4, #0]
10009c86:	1821      	adds	r1, r4, r0
10009c88:	428b      	cmp	r3, r1
10009c8a:	bf04      	itt	eq
10009c8c:	6819      	ldreq	r1, [r3, #0]
10009c8e:	685b      	ldreq	r3, [r3, #4]
10009c90:	6063      	str	r3, [r4, #4]
10009c92:	bf04      	itt	eq
10009c94:	1809      	addeq	r1, r1, r0
10009c96:	6021      	streq	r1, [r4, #0]
10009c98:	6054      	str	r4, [r2, #4]
10009c9a:	e7ca      	b.n	10009c32 <_free_r+0x22>
10009c9c:	bd38      	pop	{r3, r4, r5, pc}
10009c9e:	bf00      	nop
10009ca0:	1002051c 	.word	0x1002051c

10009ca4 <__ssputs_r>:
10009ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10009ca8:	688e      	ldr	r6, [r1, #8]
10009caa:	461f      	mov	r7, r3
10009cac:	42be      	cmp	r6, r7
10009cae:	680b      	ldr	r3, [r1, #0]
10009cb0:	4682      	mov	sl, r0
10009cb2:	460c      	mov	r4, r1
10009cb4:	4690      	mov	r8, r2
10009cb6:	d82d      	bhi.n	10009d14 <__ssputs_r+0x70>
10009cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10009cbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
10009cc0:	d026      	beq.n	10009d10 <__ssputs_r+0x6c>
10009cc2:	6965      	ldr	r5, [r4, #20]
10009cc4:	6909      	ldr	r1, [r1, #16]
10009cc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
10009cca:	eba3 0901 	sub.w	r9, r3, r1
10009cce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
10009cd2:	1c7b      	adds	r3, r7, #1
10009cd4:	444b      	add	r3, r9
10009cd6:	106d      	asrs	r5, r5, #1
10009cd8:	429d      	cmp	r5, r3
10009cda:	bf38      	it	cc
10009cdc:	461d      	movcc	r5, r3
10009cde:	0553      	lsls	r3, r2, #21
10009ce0:	d527      	bpl.n	10009d32 <__ssputs_r+0x8e>
10009ce2:	4629      	mov	r1, r5
10009ce4:	f7ff fc5e 	bl	100095a4 <_malloc_r>
10009ce8:	4606      	mov	r6, r0
10009cea:	b360      	cbz	r0, 10009d46 <__ssputs_r+0xa2>
10009cec:	6921      	ldr	r1, [r4, #16]
10009cee:	464a      	mov	r2, r9
10009cf0:	f7ff ff79 	bl	10009be6 <memcpy>
10009cf4:	89a3      	ldrh	r3, [r4, #12]
10009cf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
10009cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10009cfe:	81a3      	strh	r3, [r4, #12]
10009d00:	6126      	str	r6, [r4, #16]
10009d02:	6165      	str	r5, [r4, #20]
10009d04:	444e      	add	r6, r9
10009d06:	eba5 0509 	sub.w	r5, r5, r9
10009d0a:	6026      	str	r6, [r4, #0]
10009d0c:	60a5      	str	r5, [r4, #8]
10009d0e:	463e      	mov	r6, r7
10009d10:	42be      	cmp	r6, r7
10009d12:	d900      	bls.n	10009d16 <__ssputs_r+0x72>
10009d14:	463e      	mov	r6, r7
10009d16:	6820      	ldr	r0, [r4, #0]
10009d18:	4632      	mov	r2, r6
10009d1a:	4641      	mov	r1, r8
10009d1c:	f000 fd28 	bl	1000a770 <memmove>
10009d20:	68a3      	ldr	r3, [r4, #8]
10009d22:	1b9b      	subs	r3, r3, r6
10009d24:	60a3      	str	r3, [r4, #8]
10009d26:	6823      	ldr	r3, [r4, #0]
10009d28:	4433      	add	r3, r6
10009d2a:	6023      	str	r3, [r4, #0]
10009d2c:	2000      	movs	r0, #0
10009d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10009d32:	462a      	mov	r2, r5
10009d34:	f000 fd7a 	bl	1000a82c <_realloc_r>
10009d38:	4606      	mov	r6, r0
10009d3a:	2800      	cmp	r0, #0
10009d3c:	d1e0      	bne.n	10009d00 <__ssputs_r+0x5c>
10009d3e:	6921      	ldr	r1, [r4, #16]
10009d40:	4650      	mov	r0, sl
10009d42:	f7ff ff65 	bl	10009c10 <_free_r>
10009d46:	230c      	movs	r3, #12
10009d48:	f8ca 3000 	str.w	r3, [sl]
10009d4c:	89a3      	ldrh	r3, [r4, #12]
10009d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009d52:	81a3      	strh	r3, [r4, #12]
10009d54:	f04f 30ff 	mov.w	r0, #4294967295
10009d58:	e7e9      	b.n	10009d2e <__ssputs_r+0x8a>
	...

10009d5c <_svfiprintf_r>:
10009d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009d60:	4698      	mov	r8, r3
10009d62:	898b      	ldrh	r3, [r1, #12]
10009d64:	061b      	lsls	r3, r3, #24
10009d66:	b09d      	sub	sp, #116	@ 0x74
10009d68:	4607      	mov	r7, r0
10009d6a:	460d      	mov	r5, r1
10009d6c:	4614      	mov	r4, r2
10009d6e:	d510      	bpl.n	10009d92 <_svfiprintf_r+0x36>
10009d70:	690b      	ldr	r3, [r1, #16]
10009d72:	b973      	cbnz	r3, 10009d92 <_svfiprintf_r+0x36>
10009d74:	2140      	movs	r1, #64	@ 0x40
10009d76:	f7ff fc15 	bl	100095a4 <_malloc_r>
10009d7a:	6028      	str	r0, [r5, #0]
10009d7c:	6128      	str	r0, [r5, #16]
10009d7e:	b930      	cbnz	r0, 10009d8e <_svfiprintf_r+0x32>
10009d80:	230c      	movs	r3, #12
10009d82:	603b      	str	r3, [r7, #0]
10009d84:	f04f 30ff 	mov.w	r0, #4294967295
10009d88:	b01d      	add	sp, #116	@ 0x74
10009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009d8e:	2340      	movs	r3, #64	@ 0x40
10009d90:	616b      	str	r3, [r5, #20]
10009d92:	2300      	movs	r3, #0
10009d94:	9309      	str	r3, [sp, #36]	@ 0x24
10009d96:	2320      	movs	r3, #32
10009d98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
10009d9c:	f8cd 800c 	str.w	r8, [sp, #12]
10009da0:	2330      	movs	r3, #48	@ 0x30
10009da2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 10009f40 <_svfiprintf_r+0x1e4>
10009da6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
10009daa:	f04f 0901 	mov.w	r9, #1
10009dae:	4623      	mov	r3, r4
10009db0:	469a      	mov	sl, r3
10009db2:	f813 2b01 	ldrb.w	r2, [r3], #1
10009db6:	b10a      	cbz	r2, 10009dbc <_svfiprintf_r+0x60>
10009db8:	2a25      	cmp	r2, #37	@ 0x25
10009dba:	d1f9      	bne.n	10009db0 <_svfiprintf_r+0x54>
10009dbc:	ebba 0b04 	subs.w	fp, sl, r4
10009dc0:	d00b      	beq.n	10009dda <_svfiprintf_r+0x7e>
10009dc2:	465b      	mov	r3, fp
10009dc4:	4622      	mov	r2, r4
10009dc6:	4629      	mov	r1, r5
10009dc8:	4638      	mov	r0, r7
10009dca:	f7ff ff6b 	bl	10009ca4 <__ssputs_r>
10009dce:	3001      	adds	r0, #1
10009dd0:	f000 80a7 	beq.w	10009f22 <_svfiprintf_r+0x1c6>
10009dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10009dd6:	445a      	add	r2, fp
10009dd8:	9209      	str	r2, [sp, #36]	@ 0x24
10009dda:	f89a 3000 	ldrb.w	r3, [sl]
10009dde:	2b00      	cmp	r3, #0
10009de0:	f000 809f 	beq.w	10009f22 <_svfiprintf_r+0x1c6>
10009de4:	2300      	movs	r3, #0
10009de6:	f04f 32ff 	mov.w	r2, #4294967295
10009dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
10009dee:	f10a 0a01 	add.w	sl, sl, #1
10009df2:	9304      	str	r3, [sp, #16]
10009df4:	9307      	str	r3, [sp, #28]
10009df6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
10009dfa:	931a      	str	r3, [sp, #104]	@ 0x68
10009dfc:	4654      	mov	r4, sl
10009dfe:	2205      	movs	r2, #5
10009e00:	f814 1b01 	ldrb.w	r1, [r4], #1
10009e04:	484e      	ldr	r0, [pc, #312]	@ (10009f40 <_svfiprintf_r+0x1e4>)
10009e06:	f7f6 f92b 	bl	10000060 <memchr>
10009e0a:	9a04      	ldr	r2, [sp, #16]
10009e0c:	b9d8      	cbnz	r0, 10009e46 <_svfiprintf_r+0xea>
10009e0e:	06d0      	lsls	r0, r2, #27
10009e10:	bf44      	itt	mi
10009e12:	2320      	movmi	r3, #32
10009e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10009e18:	0711      	lsls	r1, r2, #28
10009e1a:	bf44      	itt	mi
10009e1c:	232b      	movmi	r3, #43	@ 0x2b
10009e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10009e22:	f89a 3000 	ldrb.w	r3, [sl]
10009e26:	2b2a      	cmp	r3, #42	@ 0x2a
10009e28:	d015      	beq.n	10009e56 <_svfiprintf_r+0xfa>
10009e2a:	9a07      	ldr	r2, [sp, #28]
10009e2c:	4654      	mov	r4, sl
10009e2e:	2000      	movs	r0, #0
10009e30:	f04f 0c0a 	mov.w	ip, #10
10009e34:	4621      	mov	r1, r4
10009e36:	f811 3b01 	ldrb.w	r3, [r1], #1
10009e3a:	3b30      	subs	r3, #48	@ 0x30
10009e3c:	2b09      	cmp	r3, #9
10009e3e:	d94b      	bls.n	10009ed8 <_svfiprintf_r+0x17c>
10009e40:	b1b0      	cbz	r0, 10009e70 <_svfiprintf_r+0x114>
10009e42:	9207      	str	r2, [sp, #28]
10009e44:	e014      	b.n	10009e70 <_svfiprintf_r+0x114>
10009e46:	eba0 0308 	sub.w	r3, r0, r8
10009e4a:	fa09 f303 	lsl.w	r3, r9, r3
10009e4e:	4313      	orrs	r3, r2
10009e50:	9304      	str	r3, [sp, #16]
10009e52:	46a2      	mov	sl, r4
10009e54:	e7d2      	b.n	10009dfc <_svfiprintf_r+0xa0>
10009e56:	9b03      	ldr	r3, [sp, #12]
10009e58:	1d19      	adds	r1, r3, #4
10009e5a:	681b      	ldr	r3, [r3, #0]
10009e5c:	9103      	str	r1, [sp, #12]
10009e5e:	2b00      	cmp	r3, #0
10009e60:	bfbb      	ittet	lt
10009e62:	425b      	neglt	r3, r3
10009e64:	f042 0202 	orrlt.w	r2, r2, #2
10009e68:	9307      	strge	r3, [sp, #28]
10009e6a:	9307      	strlt	r3, [sp, #28]
10009e6c:	bfb8      	it	lt
10009e6e:	9204      	strlt	r2, [sp, #16]
10009e70:	7823      	ldrb	r3, [r4, #0]
10009e72:	2b2e      	cmp	r3, #46	@ 0x2e
10009e74:	d10a      	bne.n	10009e8c <_svfiprintf_r+0x130>
10009e76:	7863      	ldrb	r3, [r4, #1]
10009e78:	2b2a      	cmp	r3, #42	@ 0x2a
10009e7a:	d132      	bne.n	10009ee2 <_svfiprintf_r+0x186>
10009e7c:	9b03      	ldr	r3, [sp, #12]
10009e7e:	1d1a      	adds	r2, r3, #4
10009e80:	681b      	ldr	r3, [r3, #0]
10009e82:	9203      	str	r2, [sp, #12]
10009e84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
10009e88:	3402      	adds	r4, #2
10009e8a:	9305      	str	r3, [sp, #20]
10009e8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 10009f50 <_svfiprintf_r+0x1f4>
10009e90:	7821      	ldrb	r1, [r4, #0]
10009e92:	2203      	movs	r2, #3
10009e94:	4650      	mov	r0, sl
10009e96:	f7f6 f8e3 	bl	10000060 <memchr>
10009e9a:	b138      	cbz	r0, 10009eac <_svfiprintf_r+0x150>
10009e9c:	9b04      	ldr	r3, [sp, #16]
10009e9e:	eba0 000a 	sub.w	r0, r0, sl
10009ea2:	2240      	movs	r2, #64	@ 0x40
10009ea4:	4082      	lsls	r2, r0
10009ea6:	4313      	orrs	r3, r2
10009ea8:	3401      	adds	r4, #1
10009eaa:	9304      	str	r3, [sp, #16]
10009eac:	f814 1b01 	ldrb.w	r1, [r4], #1
10009eb0:	4824      	ldr	r0, [pc, #144]	@ (10009f44 <_svfiprintf_r+0x1e8>)
10009eb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
10009eb6:	2206      	movs	r2, #6
10009eb8:	f7f6 f8d2 	bl	10000060 <memchr>
10009ebc:	2800      	cmp	r0, #0
10009ebe:	d036      	beq.n	10009f2e <_svfiprintf_r+0x1d2>
10009ec0:	4b21      	ldr	r3, [pc, #132]	@ (10009f48 <_svfiprintf_r+0x1ec>)
10009ec2:	bb1b      	cbnz	r3, 10009f0c <_svfiprintf_r+0x1b0>
10009ec4:	9b03      	ldr	r3, [sp, #12]
10009ec6:	3307      	adds	r3, #7
10009ec8:	f023 0307 	bic.w	r3, r3, #7
10009ecc:	3308      	adds	r3, #8
10009ece:	9303      	str	r3, [sp, #12]
10009ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10009ed2:	4433      	add	r3, r6
10009ed4:	9309      	str	r3, [sp, #36]	@ 0x24
10009ed6:	e76a      	b.n	10009dae <_svfiprintf_r+0x52>
10009ed8:	fb0c 3202 	mla	r2, ip, r2, r3
10009edc:	460c      	mov	r4, r1
10009ede:	2001      	movs	r0, #1
10009ee0:	e7a8      	b.n	10009e34 <_svfiprintf_r+0xd8>
10009ee2:	2300      	movs	r3, #0
10009ee4:	3401      	adds	r4, #1
10009ee6:	9305      	str	r3, [sp, #20]
10009ee8:	4619      	mov	r1, r3
10009eea:	f04f 0c0a 	mov.w	ip, #10
10009eee:	4620      	mov	r0, r4
10009ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
10009ef4:	3a30      	subs	r2, #48	@ 0x30
10009ef6:	2a09      	cmp	r2, #9
10009ef8:	d903      	bls.n	10009f02 <_svfiprintf_r+0x1a6>
10009efa:	2b00      	cmp	r3, #0
10009efc:	d0c6      	beq.n	10009e8c <_svfiprintf_r+0x130>
10009efe:	9105      	str	r1, [sp, #20]
10009f00:	e7c4      	b.n	10009e8c <_svfiprintf_r+0x130>
10009f02:	fb0c 2101 	mla	r1, ip, r1, r2
10009f06:	4604      	mov	r4, r0
10009f08:	2301      	movs	r3, #1
10009f0a:	e7f0      	b.n	10009eee <_svfiprintf_r+0x192>
10009f0c:	ab03      	add	r3, sp, #12
10009f0e:	9300      	str	r3, [sp, #0]
10009f10:	462a      	mov	r2, r5
10009f12:	4b0e      	ldr	r3, [pc, #56]	@ (10009f4c <_svfiprintf_r+0x1f0>)
10009f14:	a904      	add	r1, sp, #16
10009f16:	4638      	mov	r0, r7
10009f18:	f3af 8000 	nop.w
10009f1c:	1c42      	adds	r2, r0, #1
10009f1e:	4606      	mov	r6, r0
10009f20:	d1d6      	bne.n	10009ed0 <_svfiprintf_r+0x174>
10009f22:	89ab      	ldrh	r3, [r5, #12]
10009f24:	065b      	lsls	r3, r3, #25
10009f26:	f53f af2d 	bmi.w	10009d84 <_svfiprintf_r+0x28>
10009f2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
10009f2c:	e72c      	b.n	10009d88 <_svfiprintf_r+0x2c>
10009f2e:	ab03      	add	r3, sp, #12
10009f30:	9300      	str	r3, [sp, #0]
10009f32:	462a      	mov	r2, r5
10009f34:	4b05      	ldr	r3, [pc, #20]	@ (10009f4c <_svfiprintf_r+0x1f0>)
10009f36:	a904      	add	r1, sp, #16
10009f38:	4638      	mov	r0, r7
10009f3a:	f000 f9bb 	bl	1000a2b4 <_printf_i>
10009f3e:	e7ed      	b.n	10009f1c <_svfiprintf_r+0x1c0>
10009f40:	1000b351 	.word	0x1000b351
10009f44:	1000b35b 	.word	0x1000b35b
10009f48:	00000000 	.word	0x00000000
10009f4c:	10009ca5 	.word	0x10009ca5
10009f50:	1000b357 	.word	0x1000b357

10009f54 <__sfputc_r>:
10009f54:	6893      	ldr	r3, [r2, #8]
10009f56:	3b01      	subs	r3, #1
10009f58:	2b00      	cmp	r3, #0
10009f5a:	b410      	push	{r4}
10009f5c:	6093      	str	r3, [r2, #8]
10009f5e:	da08      	bge.n	10009f72 <__sfputc_r+0x1e>
10009f60:	6994      	ldr	r4, [r2, #24]
10009f62:	42a3      	cmp	r3, r4
10009f64:	db01      	blt.n	10009f6a <__sfputc_r+0x16>
10009f66:	290a      	cmp	r1, #10
10009f68:	d103      	bne.n	10009f72 <__sfputc_r+0x1e>
10009f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
10009f6e:	f000 bb6b 	b.w	1000a648 <__swbuf_r>
10009f72:	6813      	ldr	r3, [r2, #0]
10009f74:	1c58      	adds	r0, r3, #1
10009f76:	6010      	str	r0, [r2, #0]
10009f78:	7019      	strb	r1, [r3, #0]
10009f7a:	4608      	mov	r0, r1
10009f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
10009f80:	4770      	bx	lr

10009f82 <__sfputs_r>:
10009f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009f84:	4606      	mov	r6, r0
10009f86:	460f      	mov	r7, r1
10009f88:	4614      	mov	r4, r2
10009f8a:	18d5      	adds	r5, r2, r3
10009f8c:	42ac      	cmp	r4, r5
10009f8e:	d101      	bne.n	10009f94 <__sfputs_r+0x12>
10009f90:	2000      	movs	r0, #0
10009f92:	e007      	b.n	10009fa4 <__sfputs_r+0x22>
10009f94:	f814 1b01 	ldrb.w	r1, [r4], #1
10009f98:	463a      	mov	r2, r7
10009f9a:	4630      	mov	r0, r6
10009f9c:	f7ff ffda 	bl	10009f54 <__sfputc_r>
10009fa0:	1c43      	adds	r3, r0, #1
10009fa2:	d1f3      	bne.n	10009f8c <__sfputs_r+0xa>
10009fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10009fa8 <_vfiprintf_r>:
10009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009fac:	460d      	mov	r5, r1
10009fae:	b09d      	sub	sp, #116	@ 0x74
10009fb0:	4614      	mov	r4, r2
10009fb2:	4698      	mov	r8, r3
10009fb4:	4606      	mov	r6, r0
10009fb6:	b118      	cbz	r0, 10009fc0 <_vfiprintf_r+0x18>
10009fb8:	6a03      	ldr	r3, [r0, #32]
10009fba:	b90b      	cbnz	r3, 10009fc0 <_vfiprintf_r+0x18>
10009fbc:	f7ff fc8e 	bl	100098dc <__sinit>
10009fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10009fc2:	07d9      	lsls	r1, r3, #31
10009fc4:	d405      	bmi.n	10009fd2 <_vfiprintf_r+0x2a>
10009fc6:	89ab      	ldrh	r3, [r5, #12]
10009fc8:	059a      	lsls	r2, r3, #22
10009fca:	d402      	bmi.n	10009fd2 <_vfiprintf_r+0x2a>
10009fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10009fce:	f7ff fe08 	bl	10009be2 <__retarget_lock_acquire_recursive>
10009fd2:	89ab      	ldrh	r3, [r5, #12]
10009fd4:	071b      	lsls	r3, r3, #28
10009fd6:	d501      	bpl.n	10009fdc <_vfiprintf_r+0x34>
10009fd8:	692b      	ldr	r3, [r5, #16]
10009fda:	b99b      	cbnz	r3, 1000a004 <_vfiprintf_r+0x5c>
10009fdc:	4629      	mov	r1, r5
10009fde:	4630      	mov	r0, r6
10009fe0:	f000 fb70 	bl	1000a6c4 <__swsetup_r>
10009fe4:	b170      	cbz	r0, 1000a004 <_vfiprintf_r+0x5c>
10009fe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10009fe8:	07dc      	lsls	r4, r3, #31
10009fea:	d504      	bpl.n	10009ff6 <_vfiprintf_r+0x4e>
10009fec:	f04f 30ff 	mov.w	r0, #4294967295
10009ff0:	b01d      	add	sp, #116	@ 0x74
10009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009ff6:	89ab      	ldrh	r3, [r5, #12]
10009ff8:	0598      	lsls	r0, r3, #22
10009ffa:	d4f7      	bmi.n	10009fec <_vfiprintf_r+0x44>
10009ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10009ffe:	f7ff fdf1 	bl	10009be4 <__retarget_lock_release_recursive>
1000a002:	e7f3      	b.n	10009fec <_vfiprintf_r+0x44>
1000a004:	2300      	movs	r3, #0
1000a006:	9309      	str	r3, [sp, #36]	@ 0x24
1000a008:	2320      	movs	r3, #32
1000a00a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
1000a00e:	f8cd 800c 	str.w	r8, [sp, #12]
1000a012:	2330      	movs	r3, #48	@ 0x30
1000a014:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 1000a1c4 <_vfiprintf_r+0x21c>
1000a018:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
1000a01c:	f04f 0901 	mov.w	r9, #1
1000a020:	4623      	mov	r3, r4
1000a022:	469a      	mov	sl, r3
1000a024:	f813 2b01 	ldrb.w	r2, [r3], #1
1000a028:	b10a      	cbz	r2, 1000a02e <_vfiprintf_r+0x86>
1000a02a:	2a25      	cmp	r2, #37	@ 0x25
1000a02c:	d1f9      	bne.n	1000a022 <_vfiprintf_r+0x7a>
1000a02e:	ebba 0b04 	subs.w	fp, sl, r4
1000a032:	d00b      	beq.n	1000a04c <_vfiprintf_r+0xa4>
1000a034:	465b      	mov	r3, fp
1000a036:	4622      	mov	r2, r4
1000a038:	4629      	mov	r1, r5
1000a03a:	4630      	mov	r0, r6
1000a03c:	f7ff ffa1 	bl	10009f82 <__sfputs_r>
1000a040:	3001      	adds	r0, #1
1000a042:	f000 80a7 	beq.w	1000a194 <_vfiprintf_r+0x1ec>
1000a046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000a048:	445a      	add	r2, fp
1000a04a:	9209      	str	r2, [sp, #36]	@ 0x24
1000a04c:	f89a 3000 	ldrb.w	r3, [sl]
1000a050:	2b00      	cmp	r3, #0
1000a052:	f000 809f 	beq.w	1000a194 <_vfiprintf_r+0x1ec>
1000a056:	2300      	movs	r3, #0
1000a058:	f04f 32ff 	mov.w	r2, #4294967295
1000a05c:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000a060:	f10a 0a01 	add.w	sl, sl, #1
1000a064:	9304      	str	r3, [sp, #16]
1000a066:	9307      	str	r3, [sp, #28]
1000a068:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
1000a06c:	931a      	str	r3, [sp, #104]	@ 0x68
1000a06e:	4654      	mov	r4, sl
1000a070:	2205      	movs	r2, #5
1000a072:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a076:	4853      	ldr	r0, [pc, #332]	@ (1000a1c4 <_vfiprintf_r+0x21c>)
1000a078:	f7f5 fff2 	bl	10000060 <memchr>
1000a07c:	9a04      	ldr	r2, [sp, #16]
1000a07e:	b9d8      	cbnz	r0, 1000a0b8 <_vfiprintf_r+0x110>
1000a080:	06d1      	lsls	r1, r2, #27
1000a082:	bf44      	itt	mi
1000a084:	2320      	movmi	r3, #32
1000a086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a08a:	0713      	lsls	r3, r2, #28
1000a08c:	bf44      	itt	mi
1000a08e:	232b      	movmi	r3, #43	@ 0x2b
1000a090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a094:	f89a 3000 	ldrb.w	r3, [sl]
1000a098:	2b2a      	cmp	r3, #42	@ 0x2a
1000a09a:	d015      	beq.n	1000a0c8 <_vfiprintf_r+0x120>
1000a09c:	9a07      	ldr	r2, [sp, #28]
1000a09e:	4654      	mov	r4, sl
1000a0a0:	2000      	movs	r0, #0
1000a0a2:	f04f 0c0a 	mov.w	ip, #10
1000a0a6:	4621      	mov	r1, r4
1000a0a8:	f811 3b01 	ldrb.w	r3, [r1], #1
1000a0ac:	3b30      	subs	r3, #48	@ 0x30
1000a0ae:	2b09      	cmp	r3, #9
1000a0b0:	d94b      	bls.n	1000a14a <_vfiprintf_r+0x1a2>
1000a0b2:	b1b0      	cbz	r0, 1000a0e2 <_vfiprintf_r+0x13a>
1000a0b4:	9207      	str	r2, [sp, #28]
1000a0b6:	e014      	b.n	1000a0e2 <_vfiprintf_r+0x13a>
1000a0b8:	eba0 0308 	sub.w	r3, r0, r8
1000a0bc:	fa09 f303 	lsl.w	r3, r9, r3
1000a0c0:	4313      	orrs	r3, r2
1000a0c2:	9304      	str	r3, [sp, #16]
1000a0c4:	46a2      	mov	sl, r4
1000a0c6:	e7d2      	b.n	1000a06e <_vfiprintf_r+0xc6>
1000a0c8:	9b03      	ldr	r3, [sp, #12]
1000a0ca:	1d19      	adds	r1, r3, #4
1000a0cc:	681b      	ldr	r3, [r3, #0]
1000a0ce:	9103      	str	r1, [sp, #12]
1000a0d0:	2b00      	cmp	r3, #0
1000a0d2:	bfbb      	ittet	lt
1000a0d4:	425b      	neglt	r3, r3
1000a0d6:	f042 0202 	orrlt.w	r2, r2, #2
1000a0da:	9307      	strge	r3, [sp, #28]
1000a0dc:	9307      	strlt	r3, [sp, #28]
1000a0de:	bfb8      	it	lt
1000a0e0:	9204      	strlt	r2, [sp, #16]
1000a0e2:	7823      	ldrb	r3, [r4, #0]
1000a0e4:	2b2e      	cmp	r3, #46	@ 0x2e
1000a0e6:	d10a      	bne.n	1000a0fe <_vfiprintf_r+0x156>
1000a0e8:	7863      	ldrb	r3, [r4, #1]
1000a0ea:	2b2a      	cmp	r3, #42	@ 0x2a
1000a0ec:	d132      	bne.n	1000a154 <_vfiprintf_r+0x1ac>
1000a0ee:	9b03      	ldr	r3, [sp, #12]
1000a0f0:	1d1a      	adds	r2, r3, #4
1000a0f2:	681b      	ldr	r3, [r3, #0]
1000a0f4:	9203      	str	r2, [sp, #12]
1000a0f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
1000a0fa:	3402      	adds	r4, #2
1000a0fc:	9305      	str	r3, [sp, #20]
1000a0fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 1000a1d4 <_vfiprintf_r+0x22c>
1000a102:	7821      	ldrb	r1, [r4, #0]
1000a104:	2203      	movs	r2, #3
1000a106:	4650      	mov	r0, sl
1000a108:	f7f5 ffaa 	bl	10000060 <memchr>
1000a10c:	b138      	cbz	r0, 1000a11e <_vfiprintf_r+0x176>
1000a10e:	9b04      	ldr	r3, [sp, #16]
1000a110:	eba0 000a 	sub.w	r0, r0, sl
1000a114:	2240      	movs	r2, #64	@ 0x40
1000a116:	4082      	lsls	r2, r0
1000a118:	4313      	orrs	r3, r2
1000a11a:	3401      	adds	r4, #1
1000a11c:	9304      	str	r3, [sp, #16]
1000a11e:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a122:	4829      	ldr	r0, [pc, #164]	@ (1000a1c8 <_vfiprintf_r+0x220>)
1000a124:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
1000a128:	2206      	movs	r2, #6
1000a12a:	f7f5 ff99 	bl	10000060 <memchr>
1000a12e:	2800      	cmp	r0, #0
1000a130:	d03f      	beq.n	1000a1b2 <_vfiprintf_r+0x20a>
1000a132:	4b26      	ldr	r3, [pc, #152]	@ (1000a1cc <_vfiprintf_r+0x224>)
1000a134:	bb1b      	cbnz	r3, 1000a17e <_vfiprintf_r+0x1d6>
1000a136:	9b03      	ldr	r3, [sp, #12]
1000a138:	3307      	adds	r3, #7
1000a13a:	f023 0307 	bic.w	r3, r3, #7
1000a13e:	3308      	adds	r3, #8
1000a140:	9303      	str	r3, [sp, #12]
1000a142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a144:	443b      	add	r3, r7
1000a146:	9309      	str	r3, [sp, #36]	@ 0x24
1000a148:	e76a      	b.n	1000a020 <_vfiprintf_r+0x78>
1000a14a:	fb0c 3202 	mla	r2, ip, r2, r3
1000a14e:	460c      	mov	r4, r1
1000a150:	2001      	movs	r0, #1
1000a152:	e7a8      	b.n	1000a0a6 <_vfiprintf_r+0xfe>
1000a154:	2300      	movs	r3, #0
1000a156:	3401      	adds	r4, #1
1000a158:	9305      	str	r3, [sp, #20]
1000a15a:	4619      	mov	r1, r3
1000a15c:	f04f 0c0a 	mov.w	ip, #10
1000a160:	4620      	mov	r0, r4
1000a162:	f810 2b01 	ldrb.w	r2, [r0], #1
1000a166:	3a30      	subs	r2, #48	@ 0x30
1000a168:	2a09      	cmp	r2, #9
1000a16a:	d903      	bls.n	1000a174 <_vfiprintf_r+0x1cc>
1000a16c:	2b00      	cmp	r3, #0
1000a16e:	d0c6      	beq.n	1000a0fe <_vfiprintf_r+0x156>
1000a170:	9105      	str	r1, [sp, #20]
1000a172:	e7c4      	b.n	1000a0fe <_vfiprintf_r+0x156>
1000a174:	fb0c 2101 	mla	r1, ip, r1, r2
1000a178:	4604      	mov	r4, r0
1000a17a:	2301      	movs	r3, #1
1000a17c:	e7f0      	b.n	1000a160 <_vfiprintf_r+0x1b8>
1000a17e:	ab03      	add	r3, sp, #12
1000a180:	9300      	str	r3, [sp, #0]
1000a182:	462a      	mov	r2, r5
1000a184:	4b12      	ldr	r3, [pc, #72]	@ (1000a1d0 <_vfiprintf_r+0x228>)
1000a186:	a904      	add	r1, sp, #16
1000a188:	4630      	mov	r0, r6
1000a18a:	f3af 8000 	nop.w
1000a18e:	4607      	mov	r7, r0
1000a190:	1c78      	adds	r0, r7, #1
1000a192:	d1d6      	bne.n	1000a142 <_vfiprintf_r+0x19a>
1000a194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a196:	07d9      	lsls	r1, r3, #31
1000a198:	d405      	bmi.n	1000a1a6 <_vfiprintf_r+0x1fe>
1000a19a:	89ab      	ldrh	r3, [r5, #12]
1000a19c:	059a      	lsls	r2, r3, #22
1000a19e:	d402      	bmi.n	1000a1a6 <_vfiprintf_r+0x1fe>
1000a1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a1a2:	f7ff fd1f 	bl	10009be4 <__retarget_lock_release_recursive>
1000a1a6:	89ab      	ldrh	r3, [r5, #12]
1000a1a8:	065b      	lsls	r3, r3, #25
1000a1aa:	f53f af1f 	bmi.w	10009fec <_vfiprintf_r+0x44>
1000a1ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
1000a1b0:	e71e      	b.n	10009ff0 <_vfiprintf_r+0x48>
1000a1b2:	ab03      	add	r3, sp, #12
1000a1b4:	9300      	str	r3, [sp, #0]
1000a1b6:	462a      	mov	r2, r5
1000a1b8:	4b05      	ldr	r3, [pc, #20]	@ (1000a1d0 <_vfiprintf_r+0x228>)
1000a1ba:	a904      	add	r1, sp, #16
1000a1bc:	4630      	mov	r0, r6
1000a1be:	f000 f879 	bl	1000a2b4 <_printf_i>
1000a1c2:	e7e4      	b.n	1000a18e <_vfiprintf_r+0x1e6>
1000a1c4:	1000b351 	.word	0x1000b351
1000a1c8:	1000b35b 	.word	0x1000b35b
1000a1cc:	00000000 	.word	0x00000000
1000a1d0:	10009f83 	.word	0x10009f83
1000a1d4:	1000b357 	.word	0x1000b357

1000a1d8 <_printf_common>:
1000a1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000a1dc:	4616      	mov	r6, r2
1000a1de:	4698      	mov	r8, r3
1000a1e0:	688a      	ldr	r2, [r1, #8]
1000a1e2:	690b      	ldr	r3, [r1, #16]
1000a1e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
1000a1e8:	4293      	cmp	r3, r2
1000a1ea:	bfb8      	it	lt
1000a1ec:	4613      	movlt	r3, r2
1000a1ee:	6033      	str	r3, [r6, #0]
1000a1f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
1000a1f4:	4607      	mov	r7, r0
1000a1f6:	460c      	mov	r4, r1
1000a1f8:	b10a      	cbz	r2, 1000a1fe <_printf_common+0x26>
1000a1fa:	3301      	adds	r3, #1
1000a1fc:	6033      	str	r3, [r6, #0]
1000a1fe:	6823      	ldr	r3, [r4, #0]
1000a200:	0699      	lsls	r1, r3, #26
1000a202:	bf42      	ittt	mi
1000a204:	6833      	ldrmi	r3, [r6, #0]
1000a206:	3302      	addmi	r3, #2
1000a208:	6033      	strmi	r3, [r6, #0]
1000a20a:	6825      	ldr	r5, [r4, #0]
1000a20c:	f015 0506 	ands.w	r5, r5, #6
1000a210:	d106      	bne.n	1000a220 <_printf_common+0x48>
1000a212:	f104 0a19 	add.w	sl, r4, #25
1000a216:	68e3      	ldr	r3, [r4, #12]
1000a218:	6832      	ldr	r2, [r6, #0]
1000a21a:	1a9b      	subs	r3, r3, r2
1000a21c:	42ab      	cmp	r3, r5
1000a21e:	dc26      	bgt.n	1000a26e <_printf_common+0x96>
1000a220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
1000a224:	6822      	ldr	r2, [r4, #0]
1000a226:	3b00      	subs	r3, #0
1000a228:	bf18      	it	ne
1000a22a:	2301      	movne	r3, #1
1000a22c:	0692      	lsls	r2, r2, #26
1000a22e:	d42b      	bmi.n	1000a288 <_printf_common+0xb0>
1000a230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1000a234:	4641      	mov	r1, r8
1000a236:	4638      	mov	r0, r7
1000a238:	47c8      	blx	r9
1000a23a:	3001      	adds	r0, #1
1000a23c:	d01e      	beq.n	1000a27c <_printf_common+0xa4>
1000a23e:	6823      	ldr	r3, [r4, #0]
1000a240:	6922      	ldr	r2, [r4, #16]
1000a242:	f003 0306 	and.w	r3, r3, #6
1000a246:	2b04      	cmp	r3, #4
1000a248:	bf02      	ittt	eq
1000a24a:	68e5      	ldreq	r5, [r4, #12]
1000a24c:	6833      	ldreq	r3, [r6, #0]
1000a24e:	1aed      	subeq	r5, r5, r3
1000a250:	68a3      	ldr	r3, [r4, #8]
1000a252:	bf0c      	ite	eq
1000a254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000a258:	2500      	movne	r5, #0
1000a25a:	4293      	cmp	r3, r2
1000a25c:	bfc4      	itt	gt
1000a25e:	1a9b      	subgt	r3, r3, r2
1000a260:	18ed      	addgt	r5, r5, r3
1000a262:	2600      	movs	r6, #0
1000a264:	341a      	adds	r4, #26
1000a266:	42b5      	cmp	r5, r6
1000a268:	d11a      	bne.n	1000a2a0 <_printf_common+0xc8>
1000a26a:	2000      	movs	r0, #0
1000a26c:	e008      	b.n	1000a280 <_printf_common+0xa8>
1000a26e:	2301      	movs	r3, #1
1000a270:	4652      	mov	r2, sl
1000a272:	4641      	mov	r1, r8
1000a274:	4638      	mov	r0, r7
1000a276:	47c8      	blx	r9
1000a278:	3001      	adds	r0, #1
1000a27a:	d103      	bne.n	1000a284 <_printf_common+0xac>
1000a27c:	f04f 30ff 	mov.w	r0, #4294967295
1000a280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a284:	3501      	adds	r5, #1
1000a286:	e7c6      	b.n	1000a216 <_printf_common+0x3e>
1000a288:	18e1      	adds	r1, r4, r3
1000a28a:	1c5a      	adds	r2, r3, #1
1000a28c:	2030      	movs	r0, #48	@ 0x30
1000a28e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
1000a292:	4422      	add	r2, r4
1000a294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
1000a298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
1000a29c:	3302      	adds	r3, #2
1000a29e:	e7c7      	b.n	1000a230 <_printf_common+0x58>
1000a2a0:	2301      	movs	r3, #1
1000a2a2:	4622      	mov	r2, r4
1000a2a4:	4641      	mov	r1, r8
1000a2a6:	4638      	mov	r0, r7
1000a2a8:	47c8      	blx	r9
1000a2aa:	3001      	adds	r0, #1
1000a2ac:	d0e6      	beq.n	1000a27c <_printf_common+0xa4>
1000a2ae:	3601      	adds	r6, #1
1000a2b0:	e7d9      	b.n	1000a266 <_printf_common+0x8e>
	...

1000a2b4 <_printf_i>:
1000a2b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000a2b8:	7e0f      	ldrb	r7, [r1, #24]
1000a2ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1000a2bc:	2f78      	cmp	r7, #120	@ 0x78
1000a2be:	4691      	mov	r9, r2
1000a2c0:	4680      	mov	r8, r0
1000a2c2:	460c      	mov	r4, r1
1000a2c4:	469a      	mov	sl, r3
1000a2c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
1000a2ca:	d807      	bhi.n	1000a2dc <_printf_i+0x28>
1000a2cc:	2f62      	cmp	r7, #98	@ 0x62
1000a2ce:	d80a      	bhi.n	1000a2e6 <_printf_i+0x32>
1000a2d0:	2f00      	cmp	r7, #0
1000a2d2:	f000 80d1 	beq.w	1000a478 <_printf_i+0x1c4>
1000a2d6:	2f58      	cmp	r7, #88	@ 0x58
1000a2d8:	f000 80b8 	beq.w	1000a44c <_printf_i+0x198>
1000a2dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000a2e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
1000a2e4:	e03a      	b.n	1000a35c <_printf_i+0xa8>
1000a2e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
1000a2ea:	2b15      	cmp	r3, #21
1000a2ec:	d8f6      	bhi.n	1000a2dc <_printf_i+0x28>
1000a2ee:	a101      	add	r1, pc, #4	@ (adr r1, 1000a2f4 <_printf_i+0x40>)
1000a2f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000a2f4:	1000a34d 	.word	0x1000a34d
1000a2f8:	1000a361 	.word	0x1000a361
1000a2fc:	1000a2dd 	.word	0x1000a2dd
1000a300:	1000a2dd 	.word	0x1000a2dd
1000a304:	1000a2dd 	.word	0x1000a2dd
1000a308:	1000a2dd 	.word	0x1000a2dd
1000a30c:	1000a361 	.word	0x1000a361
1000a310:	1000a2dd 	.word	0x1000a2dd
1000a314:	1000a2dd 	.word	0x1000a2dd
1000a318:	1000a2dd 	.word	0x1000a2dd
1000a31c:	1000a2dd 	.word	0x1000a2dd
1000a320:	1000a45f 	.word	0x1000a45f
1000a324:	1000a38b 	.word	0x1000a38b
1000a328:	1000a419 	.word	0x1000a419
1000a32c:	1000a2dd 	.word	0x1000a2dd
1000a330:	1000a2dd 	.word	0x1000a2dd
1000a334:	1000a481 	.word	0x1000a481
1000a338:	1000a2dd 	.word	0x1000a2dd
1000a33c:	1000a38b 	.word	0x1000a38b
1000a340:	1000a2dd 	.word	0x1000a2dd
1000a344:	1000a2dd 	.word	0x1000a2dd
1000a348:	1000a421 	.word	0x1000a421
1000a34c:	6833      	ldr	r3, [r6, #0]
1000a34e:	1d1a      	adds	r2, r3, #4
1000a350:	681b      	ldr	r3, [r3, #0]
1000a352:	6032      	str	r2, [r6, #0]
1000a354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000a358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
1000a35c:	2301      	movs	r3, #1
1000a35e:	e09c      	b.n	1000a49a <_printf_i+0x1e6>
1000a360:	6833      	ldr	r3, [r6, #0]
1000a362:	6820      	ldr	r0, [r4, #0]
1000a364:	1d19      	adds	r1, r3, #4
1000a366:	6031      	str	r1, [r6, #0]
1000a368:	0606      	lsls	r6, r0, #24
1000a36a:	d501      	bpl.n	1000a370 <_printf_i+0xbc>
1000a36c:	681d      	ldr	r5, [r3, #0]
1000a36e:	e003      	b.n	1000a378 <_printf_i+0xc4>
1000a370:	0645      	lsls	r5, r0, #25
1000a372:	d5fb      	bpl.n	1000a36c <_printf_i+0xb8>
1000a374:	f9b3 5000 	ldrsh.w	r5, [r3]
1000a378:	2d00      	cmp	r5, #0
1000a37a:	da03      	bge.n	1000a384 <_printf_i+0xd0>
1000a37c:	232d      	movs	r3, #45	@ 0x2d
1000a37e:	426d      	negs	r5, r5
1000a380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000a384:	4858      	ldr	r0, [pc, #352]	@ (1000a4e8 <_printf_i+0x234>)
1000a386:	230a      	movs	r3, #10
1000a388:	e011      	b.n	1000a3ae <_printf_i+0xfa>
1000a38a:	6821      	ldr	r1, [r4, #0]
1000a38c:	6833      	ldr	r3, [r6, #0]
1000a38e:	0608      	lsls	r0, r1, #24
1000a390:	f853 5b04 	ldr.w	r5, [r3], #4
1000a394:	d402      	bmi.n	1000a39c <_printf_i+0xe8>
1000a396:	0649      	lsls	r1, r1, #25
1000a398:	bf48      	it	mi
1000a39a:	b2ad      	uxthmi	r5, r5
1000a39c:	2f6f      	cmp	r7, #111	@ 0x6f
1000a39e:	4852      	ldr	r0, [pc, #328]	@ (1000a4e8 <_printf_i+0x234>)
1000a3a0:	6033      	str	r3, [r6, #0]
1000a3a2:	bf14      	ite	ne
1000a3a4:	230a      	movne	r3, #10
1000a3a6:	2308      	moveq	r3, #8
1000a3a8:	2100      	movs	r1, #0
1000a3aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
1000a3ae:	6866      	ldr	r6, [r4, #4]
1000a3b0:	60a6      	str	r6, [r4, #8]
1000a3b2:	2e00      	cmp	r6, #0
1000a3b4:	db05      	blt.n	1000a3c2 <_printf_i+0x10e>
1000a3b6:	6821      	ldr	r1, [r4, #0]
1000a3b8:	432e      	orrs	r6, r5
1000a3ba:	f021 0104 	bic.w	r1, r1, #4
1000a3be:	6021      	str	r1, [r4, #0]
1000a3c0:	d04b      	beq.n	1000a45a <_printf_i+0x1a6>
1000a3c2:	4616      	mov	r6, r2
1000a3c4:	fbb5 f1f3 	udiv	r1, r5, r3
1000a3c8:	fb03 5711 	mls	r7, r3, r1, r5
1000a3cc:	5dc7      	ldrb	r7, [r0, r7]
1000a3ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
1000a3d2:	462f      	mov	r7, r5
1000a3d4:	42bb      	cmp	r3, r7
1000a3d6:	460d      	mov	r5, r1
1000a3d8:	d9f4      	bls.n	1000a3c4 <_printf_i+0x110>
1000a3da:	2b08      	cmp	r3, #8
1000a3dc:	d10b      	bne.n	1000a3f6 <_printf_i+0x142>
1000a3de:	6823      	ldr	r3, [r4, #0]
1000a3e0:	07df      	lsls	r7, r3, #31
1000a3e2:	d508      	bpl.n	1000a3f6 <_printf_i+0x142>
1000a3e4:	6923      	ldr	r3, [r4, #16]
1000a3e6:	6861      	ldr	r1, [r4, #4]
1000a3e8:	4299      	cmp	r1, r3
1000a3ea:	bfde      	ittt	le
1000a3ec:	2330      	movle	r3, #48	@ 0x30
1000a3ee:	f806 3c01 	strble.w	r3, [r6, #-1]
1000a3f2:	f106 36ff 	addle.w	r6, r6, #4294967295
1000a3f6:	1b92      	subs	r2, r2, r6
1000a3f8:	6122      	str	r2, [r4, #16]
1000a3fa:	f8cd a000 	str.w	sl, [sp]
1000a3fe:	464b      	mov	r3, r9
1000a400:	aa03      	add	r2, sp, #12
1000a402:	4621      	mov	r1, r4
1000a404:	4640      	mov	r0, r8
1000a406:	f7ff fee7 	bl	1000a1d8 <_printf_common>
1000a40a:	3001      	adds	r0, #1
1000a40c:	d14a      	bne.n	1000a4a4 <_printf_i+0x1f0>
1000a40e:	f04f 30ff 	mov.w	r0, #4294967295
1000a412:	b004      	add	sp, #16
1000a414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a418:	6823      	ldr	r3, [r4, #0]
1000a41a:	f043 0320 	orr.w	r3, r3, #32
1000a41e:	6023      	str	r3, [r4, #0]
1000a420:	4832      	ldr	r0, [pc, #200]	@ (1000a4ec <_printf_i+0x238>)
1000a422:	2778      	movs	r7, #120	@ 0x78
1000a424:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
1000a428:	6823      	ldr	r3, [r4, #0]
1000a42a:	6831      	ldr	r1, [r6, #0]
1000a42c:	061f      	lsls	r7, r3, #24
1000a42e:	f851 5b04 	ldr.w	r5, [r1], #4
1000a432:	d402      	bmi.n	1000a43a <_printf_i+0x186>
1000a434:	065f      	lsls	r7, r3, #25
1000a436:	bf48      	it	mi
1000a438:	b2ad      	uxthmi	r5, r5
1000a43a:	6031      	str	r1, [r6, #0]
1000a43c:	07d9      	lsls	r1, r3, #31
1000a43e:	bf44      	itt	mi
1000a440:	f043 0320 	orrmi.w	r3, r3, #32
1000a444:	6023      	strmi	r3, [r4, #0]
1000a446:	b11d      	cbz	r5, 1000a450 <_printf_i+0x19c>
1000a448:	2310      	movs	r3, #16
1000a44a:	e7ad      	b.n	1000a3a8 <_printf_i+0xf4>
1000a44c:	4826      	ldr	r0, [pc, #152]	@ (1000a4e8 <_printf_i+0x234>)
1000a44e:	e7e9      	b.n	1000a424 <_printf_i+0x170>
1000a450:	6823      	ldr	r3, [r4, #0]
1000a452:	f023 0320 	bic.w	r3, r3, #32
1000a456:	6023      	str	r3, [r4, #0]
1000a458:	e7f6      	b.n	1000a448 <_printf_i+0x194>
1000a45a:	4616      	mov	r6, r2
1000a45c:	e7bd      	b.n	1000a3da <_printf_i+0x126>
1000a45e:	6833      	ldr	r3, [r6, #0]
1000a460:	6825      	ldr	r5, [r4, #0]
1000a462:	6961      	ldr	r1, [r4, #20]
1000a464:	1d18      	adds	r0, r3, #4
1000a466:	6030      	str	r0, [r6, #0]
1000a468:	062e      	lsls	r6, r5, #24
1000a46a:	681b      	ldr	r3, [r3, #0]
1000a46c:	d501      	bpl.n	1000a472 <_printf_i+0x1be>
1000a46e:	6019      	str	r1, [r3, #0]
1000a470:	e002      	b.n	1000a478 <_printf_i+0x1c4>
1000a472:	0668      	lsls	r0, r5, #25
1000a474:	d5fb      	bpl.n	1000a46e <_printf_i+0x1ba>
1000a476:	8019      	strh	r1, [r3, #0]
1000a478:	2300      	movs	r3, #0
1000a47a:	6123      	str	r3, [r4, #16]
1000a47c:	4616      	mov	r6, r2
1000a47e:	e7bc      	b.n	1000a3fa <_printf_i+0x146>
1000a480:	6833      	ldr	r3, [r6, #0]
1000a482:	1d1a      	adds	r2, r3, #4
1000a484:	6032      	str	r2, [r6, #0]
1000a486:	681e      	ldr	r6, [r3, #0]
1000a488:	6862      	ldr	r2, [r4, #4]
1000a48a:	2100      	movs	r1, #0
1000a48c:	4630      	mov	r0, r6
1000a48e:	f7f5 fde7 	bl	10000060 <memchr>
1000a492:	b108      	cbz	r0, 1000a498 <_printf_i+0x1e4>
1000a494:	1b80      	subs	r0, r0, r6
1000a496:	6060      	str	r0, [r4, #4]
1000a498:	6863      	ldr	r3, [r4, #4]
1000a49a:	6123      	str	r3, [r4, #16]
1000a49c:	2300      	movs	r3, #0
1000a49e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000a4a2:	e7aa      	b.n	1000a3fa <_printf_i+0x146>
1000a4a4:	6923      	ldr	r3, [r4, #16]
1000a4a6:	4632      	mov	r2, r6
1000a4a8:	4649      	mov	r1, r9
1000a4aa:	4640      	mov	r0, r8
1000a4ac:	47d0      	blx	sl
1000a4ae:	3001      	adds	r0, #1
1000a4b0:	d0ad      	beq.n	1000a40e <_printf_i+0x15a>
1000a4b2:	6823      	ldr	r3, [r4, #0]
1000a4b4:	079b      	lsls	r3, r3, #30
1000a4b6:	d413      	bmi.n	1000a4e0 <_printf_i+0x22c>
1000a4b8:	68e0      	ldr	r0, [r4, #12]
1000a4ba:	9b03      	ldr	r3, [sp, #12]
1000a4bc:	4298      	cmp	r0, r3
1000a4be:	bfb8      	it	lt
1000a4c0:	4618      	movlt	r0, r3
1000a4c2:	e7a6      	b.n	1000a412 <_printf_i+0x15e>
1000a4c4:	2301      	movs	r3, #1
1000a4c6:	4632      	mov	r2, r6
1000a4c8:	4649      	mov	r1, r9
1000a4ca:	4640      	mov	r0, r8
1000a4cc:	47d0      	blx	sl
1000a4ce:	3001      	adds	r0, #1
1000a4d0:	d09d      	beq.n	1000a40e <_printf_i+0x15a>
1000a4d2:	3501      	adds	r5, #1
1000a4d4:	68e3      	ldr	r3, [r4, #12]
1000a4d6:	9903      	ldr	r1, [sp, #12]
1000a4d8:	1a5b      	subs	r3, r3, r1
1000a4da:	42ab      	cmp	r3, r5
1000a4dc:	dcf2      	bgt.n	1000a4c4 <_printf_i+0x210>
1000a4de:	e7eb      	b.n	1000a4b8 <_printf_i+0x204>
1000a4e0:	2500      	movs	r5, #0
1000a4e2:	f104 0619 	add.w	r6, r4, #25
1000a4e6:	e7f5      	b.n	1000a4d4 <_printf_i+0x220>
1000a4e8:	1000b362 	.word	0x1000b362
1000a4ec:	1000b373 	.word	0x1000b373

1000a4f0 <__sflush_r>:
1000a4f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1000a4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000a4f8:	0716      	lsls	r6, r2, #28
1000a4fa:	4605      	mov	r5, r0
1000a4fc:	460c      	mov	r4, r1
1000a4fe:	d454      	bmi.n	1000a5aa <__sflush_r+0xba>
1000a500:	684b      	ldr	r3, [r1, #4]
1000a502:	2b00      	cmp	r3, #0
1000a504:	dc02      	bgt.n	1000a50c <__sflush_r+0x1c>
1000a506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
1000a508:	2b00      	cmp	r3, #0
1000a50a:	dd48      	ble.n	1000a59e <__sflush_r+0xae>
1000a50c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000a50e:	2e00      	cmp	r6, #0
1000a510:	d045      	beq.n	1000a59e <__sflush_r+0xae>
1000a512:	2300      	movs	r3, #0
1000a514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
1000a518:	682f      	ldr	r7, [r5, #0]
1000a51a:	6a21      	ldr	r1, [r4, #32]
1000a51c:	602b      	str	r3, [r5, #0]
1000a51e:	d030      	beq.n	1000a582 <__sflush_r+0x92>
1000a520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1000a522:	89a3      	ldrh	r3, [r4, #12]
1000a524:	0759      	lsls	r1, r3, #29
1000a526:	d505      	bpl.n	1000a534 <__sflush_r+0x44>
1000a528:	6863      	ldr	r3, [r4, #4]
1000a52a:	1ad2      	subs	r2, r2, r3
1000a52c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1000a52e:	b10b      	cbz	r3, 1000a534 <__sflush_r+0x44>
1000a530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1000a532:	1ad2      	subs	r2, r2, r3
1000a534:	2300      	movs	r3, #0
1000a536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000a538:	6a21      	ldr	r1, [r4, #32]
1000a53a:	4628      	mov	r0, r5
1000a53c:	47b0      	blx	r6
1000a53e:	1c43      	adds	r3, r0, #1
1000a540:	89a3      	ldrh	r3, [r4, #12]
1000a542:	d106      	bne.n	1000a552 <__sflush_r+0x62>
1000a544:	6829      	ldr	r1, [r5, #0]
1000a546:	291d      	cmp	r1, #29
1000a548:	d82b      	bhi.n	1000a5a2 <__sflush_r+0xb2>
1000a54a:	4a2a      	ldr	r2, [pc, #168]	@ (1000a5f4 <__sflush_r+0x104>)
1000a54c:	40ca      	lsrs	r2, r1
1000a54e:	07d6      	lsls	r6, r2, #31
1000a550:	d527      	bpl.n	1000a5a2 <__sflush_r+0xb2>
1000a552:	2200      	movs	r2, #0
1000a554:	6062      	str	r2, [r4, #4]
1000a556:	04d9      	lsls	r1, r3, #19
1000a558:	6922      	ldr	r2, [r4, #16]
1000a55a:	6022      	str	r2, [r4, #0]
1000a55c:	d504      	bpl.n	1000a568 <__sflush_r+0x78>
1000a55e:	1c42      	adds	r2, r0, #1
1000a560:	d101      	bne.n	1000a566 <__sflush_r+0x76>
1000a562:	682b      	ldr	r3, [r5, #0]
1000a564:	b903      	cbnz	r3, 1000a568 <__sflush_r+0x78>
1000a566:	6560      	str	r0, [r4, #84]	@ 0x54
1000a568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000a56a:	602f      	str	r7, [r5, #0]
1000a56c:	b1b9      	cbz	r1, 1000a59e <__sflush_r+0xae>
1000a56e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000a572:	4299      	cmp	r1, r3
1000a574:	d002      	beq.n	1000a57c <__sflush_r+0x8c>
1000a576:	4628      	mov	r0, r5
1000a578:	f7ff fb4a 	bl	10009c10 <_free_r>
1000a57c:	2300      	movs	r3, #0
1000a57e:	6363      	str	r3, [r4, #52]	@ 0x34
1000a580:	e00d      	b.n	1000a59e <__sflush_r+0xae>
1000a582:	2301      	movs	r3, #1
1000a584:	4628      	mov	r0, r5
1000a586:	47b0      	blx	r6
1000a588:	4602      	mov	r2, r0
1000a58a:	1c50      	adds	r0, r2, #1
1000a58c:	d1c9      	bne.n	1000a522 <__sflush_r+0x32>
1000a58e:	682b      	ldr	r3, [r5, #0]
1000a590:	2b00      	cmp	r3, #0
1000a592:	d0c6      	beq.n	1000a522 <__sflush_r+0x32>
1000a594:	2b1d      	cmp	r3, #29
1000a596:	d001      	beq.n	1000a59c <__sflush_r+0xac>
1000a598:	2b16      	cmp	r3, #22
1000a59a:	d11e      	bne.n	1000a5da <__sflush_r+0xea>
1000a59c:	602f      	str	r7, [r5, #0]
1000a59e:	2000      	movs	r0, #0
1000a5a0:	e022      	b.n	1000a5e8 <__sflush_r+0xf8>
1000a5a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a5a6:	b21b      	sxth	r3, r3
1000a5a8:	e01b      	b.n	1000a5e2 <__sflush_r+0xf2>
1000a5aa:	690f      	ldr	r7, [r1, #16]
1000a5ac:	2f00      	cmp	r7, #0
1000a5ae:	d0f6      	beq.n	1000a59e <__sflush_r+0xae>
1000a5b0:	0793      	lsls	r3, r2, #30
1000a5b2:	680e      	ldr	r6, [r1, #0]
1000a5b4:	bf08      	it	eq
1000a5b6:	694b      	ldreq	r3, [r1, #20]
1000a5b8:	600f      	str	r7, [r1, #0]
1000a5ba:	bf18      	it	ne
1000a5bc:	2300      	movne	r3, #0
1000a5be:	eba6 0807 	sub.w	r8, r6, r7
1000a5c2:	608b      	str	r3, [r1, #8]
1000a5c4:	f1b8 0f00 	cmp.w	r8, #0
1000a5c8:	dde9      	ble.n	1000a59e <__sflush_r+0xae>
1000a5ca:	6a21      	ldr	r1, [r4, #32]
1000a5cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
1000a5ce:	4643      	mov	r3, r8
1000a5d0:	463a      	mov	r2, r7
1000a5d2:	4628      	mov	r0, r5
1000a5d4:	47b0      	blx	r6
1000a5d6:	2800      	cmp	r0, #0
1000a5d8:	dc08      	bgt.n	1000a5ec <__sflush_r+0xfc>
1000a5da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a5e2:	81a3      	strh	r3, [r4, #12]
1000a5e4:	f04f 30ff 	mov.w	r0, #4294967295
1000a5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000a5ec:	4407      	add	r7, r0
1000a5ee:	eba8 0800 	sub.w	r8, r8, r0
1000a5f2:	e7e7      	b.n	1000a5c4 <__sflush_r+0xd4>
1000a5f4:	20400001 	.word	0x20400001

1000a5f8 <_fflush_r>:
1000a5f8:	b538      	push	{r3, r4, r5, lr}
1000a5fa:	690b      	ldr	r3, [r1, #16]
1000a5fc:	4605      	mov	r5, r0
1000a5fe:	460c      	mov	r4, r1
1000a600:	b913      	cbnz	r3, 1000a608 <_fflush_r+0x10>
1000a602:	2500      	movs	r5, #0
1000a604:	4628      	mov	r0, r5
1000a606:	bd38      	pop	{r3, r4, r5, pc}
1000a608:	b118      	cbz	r0, 1000a612 <_fflush_r+0x1a>
1000a60a:	6a03      	ldr	r3, [r0, #32]
1000a60c:	b90b      	cbnz	r3, 1000a612 <_fflush_r+0x1a>
1000a60e:	f7ff f965 	bl	100098dc <__sinit>
1000a612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a616:	2b00      	cmp	r3, #0
1000a618:	d0f3      	beq.n	1000a602 <_fflush_r+0xa>
1000a61a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1000a61c:	07d0      	lsls	r0, r2, #31
1000a61e:	d404      	bmi.n	1000a62a <_fflush_r+0x32>
1000a620:	0599      	lsls	r1, r3, #22
1000a622:	d402      	bmi.n	1000a62a <_fflush_r+0x32>
1000a624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000a626:	f7ff fadc 	bl	10009be2 <__retarget_lock_acquire_recursive>
1000a62a:	4628      	mov	r0, r5
1000a62c:	4621      	mov	r1, r4
1000a62e:	f7ff ff5f 	bl	1000a4f0 <__sflush_r>
1000a632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1000a634:	07da      	lsls	r2, r3, #31
1000a636:	4605      	mov	r5, r0
1000a638:	d4e4      	bmi.n	1000a604 <_fflush_r+0xc>
1000a63a:	89a3      	ldrh	r3, [r4, #12]
1000a63c:	059b      	lsls	r3, r3, #22
1000a63e:	d4e1      	bmi.n	1000a604 <_fflush_r+0xc>
1000a640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000a642:	f7ff facf 	bl	10009be4 <__retarget_lock_release_recursive>
1000a646:	e7dd      	b.n	1000a604 <_fflush_r+0xc>

1000a648 <__swbuf_r>:
1000a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a64a:	460e      	mov	r6, r1
1000a64c:	4614      	mov	r4, r2
1000a64e:	4605      	mov	r5, r0
1000a650:	b118      	cbz	r0, 1000a65a <__swbuf_r+0x12>
1000a652:	6a03      	ldr	r3, [r0, #32]
1000a654:	b90b      	cbnz	r3, 1000a65a <__swbuf_r+0x12>
1000a656:	f7ff f941 	bl	100098dc <__sinit>
1000a65a:	69a3      	ldr	r3, [r4, #24]
1000a65c:	60a3      	str	r3, [r4, #8]
1000a65e:	89a3      	ldrh	r3, [r4, #12]
1000a660:	071a      	lsls	r2, r3, #28
1000a662:	d501      	bpl.n	1000a668 <__swbuf_r+0x20>
1000a664:	6923      	ldr	r3, [r4, #16]
1000a666:	b943      	cbnz	r3, 1000a67a <__swbuf_r+0x32>
1000a668:	4621      	mov	r1, r4
1000a66a:	4628      	mov	r0, r5
1000a66c:	f000 f82a 	bl	1000a6c4 <__swsetup_r>
1000a670:	b118      	cbz	r0, 1000a67a <__swbuf_r+0x32>
1000a672:	f04f 37ff 	mov.w	r7, #4294967295
1000a676:	4638      	mov	r0, r7
1000a678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a67a:	6823      	ldr	r3, [r4, #0]
1000a67c:	6922      	ldr	r2, [r4, #16]
1000a67e:	1a98      	subs	r0, r3, r2
1000a680:	6963      	ldr	r3, [r4, #20]
1000a682:	b2f6      	uxtb	r6, r6
1000a684:	4283      	cmp	r3, r0
1000a686:	4637      	mov	r7, r6
1000a688:	dc05      	bgt.n	1000a696 <__swbuf_r+0x4e>
1000a68a:	4621      	mov	r1, r4
1000a68c:	4628      	mov	r0, r5
1000a68e:	f7ff ffb3 	bl	1000a5f8 <_fflush_r>
1000a692:	2800      	cmp	r0, #0
1000a694:	d1ed      	bne.n	1000a672 <__swbuf_r+0x2a>
1000a696:	68a3      	ldr	r3, [r4, #8]
1000a698:	3b01      	subs	r3, #1
1000a69a:	60a3      	str	r3, [r4, #8]
1000a69c:	6823      	ldr	r3, [r4, #0]
1000a69e:	1c5a      	adds	r2, r3, #1
1000a6a0:	6022      	str	r2, [r4, #0]
1000a6a2:	701e      	strb	r6, [r3, #0]
1000a6a4:	6962      	ldr	r2, [r4, #20]
1000a6a6:	1c43      	adds	r3, r0, #1
1000a6a8:	429a      	cmp	r2, r3
1000a6aa:	d004      	beq.n	1000a6b6 <__swbuf_r+0x6e>
1000a6ac:	89a3      	ldrh	r3, [r4, #12]
1000a6ae:	07db      	lsls	r3, r3, #31
1000a6b0:	d5e1      	bpl.n	1000a676 <__swbuf_r+0x2e>
1000a6b2:	2e0a      	cmp	r6, #10
1000a6b4:	d1df      	bne.n	1000a676 <__swbuf_r+0x2e>
1000a6b6:	4621      	mov	r1, r4
1000a6b8:	4628      	mov	r0, r5
1000a6ba:	f7ff ff9d 	bl	1000a5f8 <_fflush_r>
1000a6be:	2800      	cmp	r0, #0
1000a6c0:	d0d9      	beq.n	1000a676 <__swbuf_r+0x2e>
1000a6c2:	e7d6      	b.n	1000a672 <__swbuf_r+0x2a>

1000a6c4 <__swsetup_r>:
1000a6c4:	b538      	push	{r3, r4, r5, lr}
1000a6c6:	4b29      	ldr	r3, [pc, #164]	@ (1000a76c <__swsetup_r+0xa8>)
1000a6c8:	4605      	mov	r5, r0
1000a6ca:	6818      	ldr	r0, [r3, #0]
1000a6cc:	460c      	mov	r4, r1
1000a6ce:	b118      	cbz	r0, 1000a6d8 <__swsetup_r+0x14>
1000a6d0:	6a03      	ldr	r3, [r0, #32]
1000a6d2:	b90b      	cbnz	r3, 1000a6d8 <__swsetup_r+0x14>
1000a6d4:	f7ff f902 	bl	100098dc <__sinit>
1000a6d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a6dc:	0719      	lsls	r1, r3, #28
1000a6de:	d422      	bmi.n	1000a726 <__swsetup_r+0x62>
1000a6e0:	06da      	lsls	r2, r3, #27
1000a6e2:	d407      	bmi.n	1000a6f4 <__swsetup_r+0x30>
1000a6e4:	2209      	movs	r2, #9
1000a6e6:	602a      	str	r2, [r5, #0]
1000a6e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a6ec:	81a3      	strh	r3, [r4, #12]
1000a6ee:	f04f 30ff 	mov.w	r0, #4294967295
1000a6f2:	e033      	b.n	1000a75c <__swsetup_r+0x98>
1000a6f4:	0758      	lsls	r0, r3, #29
1000a6f6:	d512      	bpl.n	1000a71e <__swsetup_r+0x5a>
1000a6f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000a6fa:	b141      	cbz	r1, 1000a70e <__swsetup_r+0x4a>
1000a6fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000a700:	4299      	cmp	r1, r3
1000a702:	d002      	beq.n	1000a70a <__swsetup_r+0x46>
1000a704:	4628      	mov	r0, r5
1000a706:	f7ff fa83 	bl	10009c10 <_free_r>
1000a70a:	2300      	movs	r3, #0
1000a70c:	6363      	str	r3, [r4, #52]	@ 0x34
1000a70e:	89a3      	ldrh	r3, [r4, #12]
1000a710:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
1000a714:	81a3      	strh	r3, [r4, #12]
1000a716:	2300      	movs	r3, #0
1000a718:	6063      	str	r3, [r4, #4]
1000a71a:	6923      	ldr	r3, [r4, #16]
1000a71c:	6023      	str	r3, [r4, #0]
1000a71e:	89a3      	ldrh	r3, [r4, #12]
1000a720:	f043 0308 	orr.w	r3, r3, #8
1000a724:	81a3      	strh	r3, [r4, #12]
1000a726:	6923      	ldr	r3, [r4, #16]
1000a728:	b94b      	cbnz	r3, 1000a73e <__swsetup_r+0x7a>
1000a72a:	89a3      	ldrh	r3, [r4, #12]
1000a72c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
1000a730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
1000a734:	d003      	beq.n	1000a73e <__swsetup_r+0x7a>
1000a736:	4621      	mov	r1, r4
1000a738:	4628      	mov	r0, r5
1000a73a:	f000 f8cb 	bl	1000a8d4 <__smakebuf_r>
1000a73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a742:	f013 0201 	ands.w	r2, r3, #1
1000a746:	d00a      	beq.n	1000a75e <__swsetup_r+0x9a>
1000a748:	2200      	movs	r2, #0
1000a74a:	60a2      	str	r2, [r4, #8]
1000a74c:	6962      	ldr	r2, [r4, #20]
1000a74e:	4252      	negs	r2, r2
1000a750:	61a2      	str	r2, [r4, #24]
1000a752:	6922      	ldr	r2, [r4, #16]
1000a754:	b942      	cbnz	r2, 1000a768 <__swsetup_r+0xa4>
1000a756:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
1000a75a:	d1c5      	bne.n	1000a6e8 <__swsetup_r+0x24>
1000a75c:	bd38      	pop	{r3, r4, r5, pc}
1000a75e:	0799      	lsls	r1, r3, #30
1000a760:	bf58      	it	pl
1000a762:	6962      	ldrpl	r2, [r4, #20]
1000a764:	60a2      	str	r2, [r4, #8]
1000a766:	e7f4      	b.n	1000a752 <__swsetup_r+0x8e>
1000a768:	2000      	movs	r0, #0
1000a76a:	e7f7      	b.n	1000a75c <__swsetup_r+0x98>
1000a76c:	100200d8 	.word	0x100200d8

1000a770 <memmove>:
1000a770:	4288      	cmp	r0, r1
1000a772:	b510      	push	{r4, lr}
1000a774:	eb01 0402 	add.w	r4, r1, r2
1000a778:	d902      	bls.n	1000a780 <memmove+0x10>
1000a77a:	4284      	cmp	r4, r0
1000a77c:	4623      	mov	r3, r4
1000a77e:	d807      	bhi.n	1000a790 <memmove+0x20>
1000a780:	1e43      	subs	r3, r0, #1
1000a782:	42a1      	cmp	r1, r4
1000a784:	d008      	beq.n	1000a798 <memmove+0x28>
1000a786:	f811 2b01 	ldrb.w	r2, [r1], #1
1000a78a:	f803 2f01 	strb.w	r2, [r3, #1]!
1000a78e:	e7f8      	b.n	1000a782 <memmove+0x12>
1000a790:	4402      	add	r2, r0
1000a792:	4601      	mov	r1, r0
1000a794:	428a      	cmp	r2, r1
1000a796:	d100      	bne.n	1000a79a <memmove+0x2a>
1000a798:	bd10      	pop	{r4, pc}
1000a79a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1000a79e:	f802 4d01 	strb.w	r4, [r2, #-1]!
1000a7a2:	e7f7      	b.n	1000a794 <memmove+0x24>

1000a7a4 <_raise_r>:
1000a7a4:	291f      	cmp	r1, #31
1000a7a6:	b538      	push	{r3, r4, r5, lr}
1000a7a8:	4605      	mov	r5, r0
1000a7aa:	460c      	mov	r4, r1
1000a7ac:	d904      	bls.n	1000a7b8 <_raise_r+0x14>
1000a7ae:	2316      	movs	r3, #22
1000a7b0:	6003      	str	r3, [r0, #0]
1000a7b2:	f04f 30ff 	mov.w	r0, #4294967295
1000a7b6:	bd38      	pop	{r3, r4, r5, pc}
1000a7b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
1000a7ba:	b112      	cbz	r2, 1000a7c2 <_raise_r+0x1e>
1000a7bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000a7c0:	b94b      	cbnz	r3, 1000a7d6 <_raise_r+0x32>
1000a7c2:	4628      	mov	r0, r5
1000a7c4:	f000 f830 	bl	1000a828 <_getpid_r>
1000a7c8:	4622      	mov	r2, r4
1000a7ca:	4601      	mov	r1, r0
1000a7cc:	4628      	mov	r0, r5
1000a7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000a7d2:	f000 b817 	b.w	1000a804 <_kill_r>
1000a7d6:	2b01      	cmp	r3, #1
1000a7d8:	d00a      	beq.n	1000a7f0 <_raise_r+0x4c>
1000a7da:	1c59      	adds	r1, r3, #1
1000a7dc:	d103      	bne.n	1000a7e6 <_raise_r+0x42>
1000a7de:	2316      	movs	r3, #22
1000a7e0:	6003      	str	r3, [r0, #0]
1000a7e2:	2001      	movs	r0, #1
1000a7e4:	e7e7      	b.n	1000a7b6 <_raise_r+0x12>
1000a7e6:	2100      	movs	r1, #0
1000a7e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
1000a7ec:	4620      	mov	r0, r4
1000a7ee:	4798      	blx	r3
1000a7f0:	2000      	movs	r0, #0
1000a7f2:	e7e0      	b.n	1000a7b6 <_raise_r+0x12>

1000a7f4 <raise>:
1000a7f4:	4b02      	ldr	r3, [pc, #8]	@ (1000a800 <raise+0xc>)
1000a7f6:	4601      	mov	r1, r0
1000a7f8:	6818      	ldr	r0, [r3, #0]
1000a7fa:	f7ff bfd3 	b.w	1000a7a4 <_raise_r>
1000a7fe:	bf00      	nop
1000a800:	100200d8 	.word	0x100200d8

1000a804 <_kill_r>:
1000a804:	b538      	push	{r3, r4, r5, lr}
1000a806:	4d07      	ldr	r5, [pc, #28]	@ (1000a824 <_kill_r+0x20>)
1000a808:	2300      	movs	r3, #0
1000a80a:	4604      	mov	r4, r0
1000a80c:	4608      	mov	r0, r1
1000a80e:	4611      	mov	r1, r2
1000a810:	602b      	str	r3, [r5, #0]
1000a812:	f7f7 f8d5 	bl	100019c0 <_kill>
1000a816:	1c43      	adds	r3, r0, #1
1000a818:	d102      	bne.n	1000a820 <_kill_r+0x1c>
1000a81a:	682b      	ldr	r3, [r5, #0]
1000a81c:	b103      	cbz	r3, 1000a820 <_kill_r+0x1c>
1000a81e:	6023      	str	r3, [r4, #0]
1000a820:	bd38      	pop	{r3, r4, r5, pc}
1000a822:	bf00      	nop
1000a824:	1002065c 	.word	0x1002065c

1000a828 <_getpid_r>:
1000a828:	f7f7 b8c2 	b.w	100019b0 <_getpid>

1000a82c <_realloc_r>:
1000a82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000a830:	4607      	mov	r7, r0
1000a832:	4614      	mov	r4, r2
1000a834:	460d      	mov	r5, r1
1000a836:	b921      	cbnz	r1, 1000a842 <_realloc_r+0x16>
1000a838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000a83c:	4611      	mov	r1, r2
1000a83e:	f7fe beb1 	b.w	100095a4 <_malloc_r>
1000a842:	b92a      	cbnz	r2, 1000a850 <_realloc_r+0x24>
1000a844:	f7ff f9e4 	bl	10009c10 <_free_r>
1000a848:	4625      	mov	r5, r4
1000a84a:	4628      	mov	r0, r5
1000a84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000a850:	f000 f89e 	bl	1000a990 <_malloc_usable_size_r>
1000a854:	4284      	cmp	r4, r0
1000a856:	4606      	mov	r6, r0
1000a858:	d802      	bhi.n	1000a860 <_realloc_r+0x34>
1000a85a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000a85e:	d8f4      	bhi.n	1000a84a <_realloc_r+0x1e>
1000a860:	4621      	mov	r1, r4
1000a862:	4638      	mov	r0, r7
1000a864:	f7fe fe9e 	bl	100095a4 <_malloc_r>
1000a868:	4680      	mov	r8, r0
1000a86a:	b908      	cbnz	r0, 1000a870 <_realloc_r+0x44>
1000a86c:	4645      	mov	r5, r8
1000a86e:	e7ec      	b.n	1000a84a <_realloc_r+0x1e>
1000a870:	42b4      	cmp	r4, r6
1000a872:	4622      	mov	r2, r4
1000a874:	4629      	mov	r1, r5
1000a876:	bf28      	it	cs
1000a878:	4632      	movcs	r2, r6
1000a87a:	f7ff f9b4 	bl	10009be6 <memcpy>
1000a87e:	4629      	mov	r1, r5
1000a880:	4638      	mov	r0, r7
1000a882:	f7ff f9c5 	bl	10009c10 <_free_r>
1000a886:	e7f1      	b.n	1000a86c <_realloc_r+0x40>

1000a888 <__swhatbuf_r>:
1000a888:	b570      	push	{r4, r5, r6, lr}
1000a88a:	460c      	mov	r4, r1
1000a88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000a890:	2900      	cmp	r1, #0
1000a892:	b096      	sub	sp, #88	@ 0x58
1000a894:	4615      	mov	r5, r2
1000a896:	461e      	mov	r6, r3
1000a898:	da0d      	bge.n	1000a8b6 <__swhatbuf_r+0x2e>
1000a89a:	89a3      	ldrh	r3, [r4, #12]
1000a89c:	f013 0f80 	tst.w	r3, #128	@ 0x80
1000a8a0:	f04f 0100 	mov.w	r1, #0
1000a8a4:	bf14      	ite	ne
1000a8a6:	2340      	movne	r3, #64	@ 0x40
1000a8a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
1000a8ac:	2000      	movs	r0, #0
1000a8ae:	6031      	str	r1, [r6, #0]
1000a8b0:	602b      	str	r3, [r5, #0]
1000a8b2:	b016      	add	sp, #88	@ 0x58
1000a8b4:	bd70      	pop	{r4, r5, r6, pc}
1000a8b6:	466a      	mov	r2, sp
1000a8b8:	f000 f848 	bl	1000a94c <_fstat_r>
1000a8bc:	2800      	cmp	r0, #0
1000a8be:	dbec      	blt.n	1000a89a <__swhatbuf_r+0x12>
1000a8c0:	9901      	ldr	r1, [sp, #4]
1000a8c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
1000a8c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
1000a8ca:	4259      	negs	r1, r3
1000a8cc:	4159      	adcs	r1, r3
1000a8ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1000a8d2:	e7eb      	b.n	1000a8ac <__swhatbuf_r+0x24>

1000a8d4 <__smakebuf_r>:
1000a8d4:	898b      	ldrh	r3, [r1, #12]
1000a8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000a8d8:	079d      	lsls	r5, r3, #30
1000a8da:	4606      	mov	r6, r0
1000a8dc:	460c      	mov	r4, r1
1000a8de:	d507      	bpl.n	1000a8f0 <__smakebuf_r+0x1c>
1000a8e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
1000a8e4:	6023      	str	r3, [r4, #0]
1000a8e6:	6123      	str	r3, [r4, #16]
1000a8e8:	2301      	movs	r3, #1
1000a8ea:	6163      	str	r3, [r4, #20]
1000a8ec:	b003      	add	sp, #12
1000a8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a8f0:	ab01      	add	r3, sp, #4
1000a8f2:	466a      	mov	r2, sp
1000a8f4:	f7ff ffc8 	bl	1000a888 <__swhatbuf_r>
1000a8f8:	9f00      	ldr	r7, [sp, #0]
1000a8fa:	4605      	mov	r5, r0
1000a8fc:	4639      	mov	r1, r7
1000a8fe:	4630      	mov	r0, r6
1000a900:	f7fe fe50 	bl	100095a4 <_malloc_r>
1000a904:	b948      	cbnz	r0, 1000a91a <__smakebuf_r+0x46>
1000a906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000a90a:	059a      	lsls	r2, r3, #22
1000a90c:	d4ee      	bmi.n	1000a8ec <__smakebuf_r+0x18>
1000a90e:	f023 0303 	bic.w	r3, r3, #3
1000a912:	f043 0302 	orr.w	r3, r3, #2
1000a916:	81a3      	strh	r3, [r4, #12]
1000a918:	e7e2      	b.n	1000a8e0 <__smakebuf_r+0xc>
1000a91a:	89a3      	ldrh	r3, [r4, #12]
1000a91c:	6020      	str	r0, [r4, #0]
1000a91e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000a922:	81a3      	strh	r3, [r4, #12]
1000a924:	9b01      	ldr	r3, [sp, #4]
1000a926:	e9c4 0704 	strd	r0, r7, [r4, #16]
1000a92a:	b15b      	cbz	r3, 1000a944 <__smakebuf_r+0x70>
1000a92c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000a930:	4630      	mov	r0, r6
1000a932:	f000 f81d 	bl	1000a970 <_isatty_r>
1000a936:	b128      	cbz	r0, 1000a944 <__smakebuf_r+0x70>
1000a938:	89a3      	ldrh	r3, [r4, #12]
1000a93a:	f023 0303 	bic.w	r3, r3, #3
1000a93e:	f043 0301 	orr.w	r3, r3, #1
1000a942:	81a3      	strh	r3, [r4, #12]
1000a944:	89a3      	ldrh	r3, [r4, #12]
1000a946:	431d      	orrs	r5, r3
1000a948:	81a5      	strh	r5, [r4, #12]
1000a94a:	e7cf      	b.n	1000a8ec <__smakebuf_r+0x18>

1000a94c <_fstat_r>:
1000a94c:	b538      	push	{r3, r4, r5, lr}
1000a94e:	4d07      	ldr	r5, [pc, #28]	@ (1000a96c <_fstat_r+0x20>)
1000a950:	2300      	movs	r3, #0
1000a952:	4604      	mov	r4, r0
1000a954:	4608      	mov	r0, r1
1000a956:	4611      	mov	r1, r2
1000a958:	602b      	str	r3, [r5, #0]
1000a95a:	f7f7 f891 	bl	10001a80 <_fstat>
1000a95e:	1c43      	adds	r3, r0, #1
1000a960:	d102      	bne.n	1000a968 <_fstat_r+0x1c>
1000a962:	682b      	ldr	r3, [r5, #0]
1000a964:	b103      	cbz	r3, 1000a968 <_fstat_r+0x1c>
1000a966:	6023      	str	r3, [r4, #0]
1000a968:	bd38      	pop	{r3, r4, r5, pc}
1000a96a:	bf00      	nop
1000a96c:	1002065c 	.word	0x1002065c

1000a970 <_isatty_r>:
1000a970:	b538      	push	{r3, r4, r5, lr}
1000a972:	4d06      	ldr	r5, [pc, #24]	@ (1000a98c <_isatty_r+0x1c>)
1000a974:	2300      	movs	r3, #0
1000a976:	4604      	mov	r4, r0
1000a978:	4608      	mov	r0, r1
1000a97a:	602b      	str	r3, [r5, #0]
1000a97c:	f7f7 f890 	bl	10001aa0 <_isatty>
1000a980:	1c43      	adds	r3, r0, #1
1000a982:	d102      	bne.n	1000a98a <_isatty_r+0x1a>
1000a984:	682b      	ldr	r3, [r5, #0]
1000a986:	b103      	cbz	r3, 1000a98a <_isatty_r+0x1a>
1000a988:	6023      	str	r3, [r4, #0]
1000a98a:	bd38      	pop	{r3, r4, r5, pc}
1000a98c:	1002065c 	.word	0x1002065c

1000a990 <_malloc_usable_size_r>:
1000a990:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000a994:	1f18      	subs	r0, r3, #4
1000a996:	2b00      	cmp	r3, #0
1000a998:	bfbc      	itt	lt
1000a99a:	580b      	ldrlt	r3, [r1, r0]
1000a99c:	18c0      	addlt	r0, r0, r3
1000a99e:	4770      	bx	lr

1000a9a0 <_init>:
1000a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a9a2:	bf00      	nop
1000a9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a9a6:	bc08      	pop	{r3}
1000a9a8:	469e      	mov	lr, r3
1000a9aa:	4770      	bx	lr

1000a9ac <_fini>:
1000a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a9ae:	bf00      	nop
1000a9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a9b2:	bc08      	pop	{r3}
1000a9b4:	469e      	mov	lr, r3
1000a9b6:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000a9b8 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000a9b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 1000a9f0 <LoopForever+0x2>
  movs  r1, #0
1000a9bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000a9be:	e003      	b.n	1000a9c8 <LoopCopyDataInit>

1000a9c0 <CopyDataInit>:
  ldr  r3, =_sidata
1000a9c0:	4b0c      	ldr	r3, [pc, #48]	@ (1000a9f4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000a9c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000a9c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000a9c6:	3104      	adds	r1, #4

1000a9c8 <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000a9c8:	480b      	ldr	r0, [pc, #44]	@ (1000a9f8 <LoopForever+0xa>)
  ldr  r3, =_edata
1000a9ca:	4b0c      	ldr	r3, [pc, #48]	@ (1000a9fc <LoopForever+0xe>)
  adds  r2, r0, r1
1000a9cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000a9ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000a9d0:	d3f6      	bcc.n	1000a9c0 <CopyDataInit>
  ldr  r2, =_sbss
1000a9d2:	4a0b      	ldr	r2, [pc, #44]	@ (1000aa00 <LoopForever+0x12>)
  b  LoopFillZerobss
1000a9d4:	e002      	b.n	1000a9dc <LoopFillZerobss>

1000a9d6 <FillZerobss>:
  movs  r3, #0
1000a9d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000a9d8:	f842 3b04 	str.w	r3, [r2], #4

1000a9dc <LoopFillZerobss>:
  ldr  r3, = _ebss
1000a9dc:	4b09      	ldr	r3, [pc, #36]	@ (1000aa04 <LoopForever+0x16>)
  cmp  r2, r3
1000a9de:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000a9e0:	d3f9      	bcc.n	1000a9d6 <FillZerobss>
  bl  SystemInit
1000a9e2:	f7f5 fb8d 	bl	10000100 <SystemInit>
 bl __libc_init_array
1000a9e6:	f7ff f8d7 	bl	10009b98 <__libc_init_array>
  bl main
1000a9ea:	f7f5 fbaf 	bl	1000014c <main>

1000a9ee <LoopForever>:
    b LoopForever
1000a9ee:	e7fe      	b.n	1000a9ee <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000a9f0:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000a9f4:	1000b498 	.word	0x1000b498
  ldr  r0, =_sdata
1000a9f8:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000a9fc:	10020128 	.word	0x10020128
  ldr  r2, =_sbss
1000aa00:	100201b4 	.word	0x100201b4
  ldr  r3, = _ebss
1000aa04:	10020664 	.word	0x10020664
