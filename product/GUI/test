#!/usr/bin/env python3
"""
RFID Service for STM32MP1 A7 Core
Communicates with M4 core via /dev/ttyRPMSG0
Sends RFID data to backend API
"""

import serial
import requests
import re
import logging
import time
import json
from datetime import datetime

# Configuration
SERIAL_PORT = '/dev/ttyRPMSG0'
BAUD_RATE = 115200
API_URL = 'http://10.10.2.66:5000/api/scan'
API_TIMEOUT = 5

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/rfid_service.log'),
        logging.StreamHandler()
    ]
)

class RFIDService:
    def __init__(self):
        self.serial_conn = None
        self.last_uid = None
        self.last_scan_time = 0
        self.debounce_seconds = 3  # Prevent duplicate scans within 3 seconds
        
    def connect_serial(self):
        """Connect to M4 core via virtual UART"""
        try:
            self.serial_conn = serial.Serial(
                SERIAL_PORT,
                BAUD_RATE,
                timeout=1
            )
            logging.info(f"Connected to {SERIAL_PORT}")
            return True
        except Exception as e:
            logging.error(f"Failed to connect to serial: {e}")
            return False
    
    def parse_uid(self, line):
        """Extract UID from M4 output"""
        # Look for "Card UID: 04 A1 B2 C3"
        match = re.search(r'Card UID:\s+((?:[0-9A-F]{2}\s*)+)', line)
        if match:
            uid_bytes = match.group(1).strip().split()
            uid = ''.join(uid_bytes)
            return uid
        return None
    
    def send_to_api(self, rfid_uid):
        """Send RFID UID to backend API"""
        try:
            payload = {'rfid_uid': rfid_uid}
            response = requests.post(
                API_URL,
                json=payload,
                timeout=API_TIMEOUT
            )
            
            if response.status_code == 200:
                data = response.json()
                logging.info(f"API Response: {data}")
                
                # Send response back to M4 for display
                if self.serial_conn:
                    message = f">> {data.get('message', 'OK')}\r\n"
                    self.serial_conn.write(message.encode())
                
                return data
                
            elif response.status_code == 404:
                logging.warning(f"Unknown RFID card: {rfid_uid}")
                if self.serial_conn:
                    self.serial_conn.write(b">> ERROR: Card not registered\r\n")
                return None
                
            else:
                logging.error(f"API error: {response.status_code}")
                return None
                
        except requests.exceptions.Timeout:
            logging.error("API request timeout")
            if self.serial_conn:
                self.serial_conn.write(b">> ERROR: API timeout\r\n")
            return None
            
        except Exception as e:
            logging.error(f"API request failed: {e}")
            if self.serial_conn:
                self.serial_conn.write(b">> ERROR: API connection failed\r\n")
            return None
    
    def should_process_scan(self, uid):
        """Check if we should process this scan (debouncing)"""
        current_time = time.time()
        
        if uid == self.last_uid:
            if (current_time - self.last_scan_time) < self.debounce_seconds:
                return False
        
        self.last_uid = uid
        self.last_scan_time = current_time
        return True
    
    def run(self):
        """Main service loop"""
        logging.info("RFID Service started")
        
        while True:
            try:
                if not self.serial_conn or not self.serial_conn.is_open:
                    if not self.connect_serial():
                        time.sleep(5)
                        continue
                
                # Read line from M4
                if self.serial_conn.in_waiting > 0:
                    line = self.serial_conn.readline().decode('utf-8', errors='ignore').strip()
                    
                    if line:
                        # Log all output from M4
                        logging.debug(f"M4: {line}")
                        
                        # Check if this line contains a UID
                        uid = self.parse_uid(line)
                        
                        if uid:
                            logging.info(f"Detected RFID: {uid}")
                            
                            # Debounce: prevent rapid duplicate scans
                            if self.should_process_scan(uid):
                                # Send to API
                                result = self.send_to_api(uid)
                                
                                if result:
                                    action = result.get('action', 'unknown')
                                    user_name = result.get('user', {}).get('name', 'Unknown')
                                    logging.info(f"Action: {action} for {user_name}")
                            else:
                                logging.debug(f"Debounced duplicate scan of {uid}")
                
                time.sleep(0.01)  # Small delay to prevent CPU spinning
                
            except KeyboardInterrupt:
                logging.info("Service stopped by user")
                break
                
            except Exception as e:
                logging.error(f"Error in main loop: {e}")
                time.sleep(1)
        
        if self.serial_conn:
            self.serial_conn.close()
        logging.info("RFID Service stopped")

if __name__ == '__main__':
    service = RFIDService()
    service.run()