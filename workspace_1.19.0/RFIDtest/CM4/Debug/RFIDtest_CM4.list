
RFIDtest_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f28  10000000  10000000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10008f28  10008f28  0000af28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000420  10008f78  10008f78  0000af78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  10009398  10009398  0000c1ac  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  10009398  10009398  0000b398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  100093a0  100093a0  0000c1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  100093a0  100093a0  0000b3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  100093a4  100093a4  0000b3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000120  10020000  100093a8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020120  100094c8  0000c120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          00000354  100201ac  10009554  0000c1ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020500  100098a8  0000c1ac  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ab32  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004147  00000000  00000000  00026d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010e8  00000000  00000000  0002ae58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c70  00000000  00000000  0002bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00049ba3  00000000  00000000  0002cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019e5d  00000000  00000000  00076753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001cd396  00000000  00000000  000905b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0025d946  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004ca8  00000000  00000000  0025d98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  00262634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201ac 	.word	0x100201ac
1000001c:	00000000 	.word	0x00000000
10000020:	10008f10 	.word	0x10008f10

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201b0 	.word	0x100201b0
1000003c:	10008f10 	.word	0x10008f10

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000100:	b480      	push	{r7}
10000102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000104:	4b0f      	ldr	r3, [pc, #60]	@ (10000144 <SystemInit+0x44>)
10000106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000010a:	4a0e      	ldr	r2, [pc, #56]	@ (10000144 <SystemInit+0x44>)
1000010c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10000110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000114:	4b0c      	ldr	r3, [pc, #48]	@ (10000148 <SystemInit+0x48>)
10000116:	2200      	movs	r2, #0
10000118:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000011a:	4b0b      	ldr	r3, [pc, #44]	@ (10000148 <SystemInit+0x48>)
1000011c:	2200      	movs	r2, #0
1000011e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000120:	4b09      	ldr	r3, [pc, #36]	@ (10000148 <SystemInit+0x48>)
10000122:	2200      	movs	r2, #0
10000124:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000126:	4b08      	ldr	r3, [pc, #32]	@ (10000148 <SystemInit+0x48>)
10000128:	2200      	movs	r2, #0
1000012a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000012c:	4b06      	ldr	r3, [pc, #24]	@ (10000148 <SystemInit+0x48>)
1000012e:	2200      	movs	r2, #0
10000130:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000132:	4b05      	ldr	r3, [pc, #20]	@ (10000148 <SystemInit+0x48>)
10000134:	2200      	movs	r2, #0
10000136:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000138:	bf00      	nop
1000013a:	46bd      	mov	sp, r7
1000013c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000140:	4770      	bx	lr
10000142:	bf00      	nop
10000144:	e000ed00 	.word	0xe000ed00
10000148:	5000d0c0 	.word	0x5000d0c0

1000014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
1000014c:	b580      	push	{r7, lr}
1000014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000150:	f000 fcb0 	bl	10000ab4 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000154:	4b1b      	ldr	r3, [pc, #108]	@ (100001c4 <main+0x78>)
10000156:	681b      	ldr	r3, [r3, #0]
10000158:	f003 0307 	and.w	r3, r3, #7
1000015c:	2b04      	cmp	r3, #4
1000015e:	d101      	bne.n	10000164 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000160:	f000 f838 	bl	100001d4 <SystemClock_Config>
  }

  if(IS_ENGINEERING_BOOT_MODE())
10000164:	4b17      	ldr	r3, [pc, #92]	@ (100001c4 <main+0x78>)
10000166:	681b      	ldr	r3, [r3, #0]
10000168:	f003 0307 	and.w	r3, r3, #7
1000016c:	2b04      	cmp	r3, #4
1000016e:	d102      	bne.n	10000176 <main+0x2a>
  {
    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
10000170:	f000 f9a6 	bl	100004c0 <PeriphCommonClock_Config>
10000174:	e005      	b.n	10000182 <main+0x36>
  }
  else
  {
    /* IPCC initialisation */
    MX_IPCC_Init();
10000176:	f000 f9d1 	bl	1000051c <MX_IPCC_Init>
    /* OpenAmp initialisation ---------------------------------*/
    MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
1000017a:	2100      	movs	r1, #0
1000017c:	2001      	movs	r0, #1
1000017e:	f007 fc37 	bl	100079f0 <MX_OPENAMP_Init>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000182:	f000 fa46 	bl	10000612 <MX_GPIO_Init>
  MX_DMA_Init();
10000186:	f000 fa33 	bl	100005f0 <MX_DMA_Init>
  MX_SPI5_Init();
1000018a:	f000 f9db 	bl	10000544 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  VIRT_UART_Init(&huart0);
1000018e:	480e      	ldr	r0, [pc, #56]	@ (100001c8 <main+0x7c>)
10000190:	f006 ff8a 	bl	100070a8 <VIRT_UART_Init>
  if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART_RxCpltCallback) != VIRT_UART_OK) {
10000194:	4a0d      	ldr	r2, [pc, #52]	@ (100001cc <main+0x80>)
10000196:	2100      	movs	r1, #0
10000198:	480b      	ldr	r0, [pc, #44]	@ (100001c8 <main+0x7c>)
1000019a:	f006 ffa1 	bl	100070e0 <VIRT_UART_RegisterCallback>
1000019e:	4603      	mov	r3, r0
100001a0:	2b00      	cmp	r3, #0
100001a2:	d001      	beq.n	100001a8 <main+0x5c>
    Error_Handler();
100001a4:	f000 fa82 	bl	100006ac <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      qprint("Counter: %lu\r\n", HAL_GetTick());
100001a8:	f000 fce8 	bl	10000b7c <HAL_GetTick>
100001ac:	4603      	mov	r3, r0
100001ae:	4619      	mov	r1, r3
100001b0:	4807      	ldr	r0, [pc, #28]	@ (100001d0 <main+0x84>)
100001b2:	f000 fa53 	bl	1000065c <qprint>
      HAL_Delay(300); // avoid flooding the UART
100001b6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
100001ba:	f000 fceb 	bl	10000b94 <HAL_Delay>
      qprint("Counter: %lu\r\n", HAL_GetTick());
100001be:	bf00      	nop
100001c0:	e7f2      	b.n	100001a8 <main+0x5c>
100001c2:	bf00      	nop
100001c4:	50020000 	.word	0x50020000
100001c8:	1002028c 	.word	0x1002028c
100001cc:	10000649 	.word	0x10000649
100001d0:	10008f78 	.word	0x10008f78

100001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100001d4:	b580      	push	{r7, lr}
100001d6:	b0d2      	sub	sp, #328	@ 0x148
100001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100001da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100001e2:	4618      	mov	r0, r3
100001e4:	f44f 738a 	mov.w	r3, #276	@ 0x114
100001e8:	461a      	mov	r2, r3
100001ea:	2100      	movs	r1, #0
100001ec:	f007 ff02 	bl	10007ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100001f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100001f4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
100001f8:	4618      	mov	r0, r3
100001fa:	2330      	movs	r3, #48	@ 0x30
100001fc:	461a      	mov	r2, r3
100001fe:	2100      	movs	r1, #0
10000200:	f007 fef8 	bl	10007ff4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10000204:	f001 f9bc 	bl	10001580 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000208:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000020c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000210:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
10000214:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000218:	f043 0320 	orr.w	r3, r3, #32
1000021c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI
10000220:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000224:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000228:	2217      	movs	r2, #23
1000022a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
1000022c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000230:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000234:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
10000238:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
1000023a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000023e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000242:	2201      	movs	r2, #1
10000244:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000246:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000024a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000024e:	2201      	movs	r2, #1
10000250:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000252:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000256:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000025a:	2200      	movs	r2, #0
1000025c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
1000025e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000262:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000266:	2210      	movs	r2, #16
10000268:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
1000026a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000026e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000272:	2200      	movs	r2, #0
10000274:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000276:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000027a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000027e:	2202      	movs	r2, #2
10000280:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000282:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000286:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000028a:	2201      	movs	r2, #1
1000028c:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
1000028e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000292:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000296:	2203      	movs	r2, #3
10000298:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
1000029a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000029e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002a2:	2242      	movs	r2, #66	@ 0x42
100002a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
100002a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002ae:	2202      	movs	r2, #2
100002b0:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
100002b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002ba:	2201      	movs	r2, #1
100002bc:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
100002be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002c6:	2201      	movs	r2, #1
100002c8:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
100002ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002d2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
100002d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
100002da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002e2:	2201      	movs	r2, #1
100002e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
100002e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002f0:	2202      	movs	r2, #2
100002f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
100002f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100002fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100002fe:	2201      	movs	r2, #1
10000300:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000304:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000308:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000030c:	2202      	movs	r2, #2
1000030e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000312:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000316:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000031a:	2222      	movs	r2, #34	@ 0x22
1000031c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
10000320:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000324:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000328:	2202      	movs	r2, #2
1000032a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
1000032e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000332:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000336:	2211      	movs	r2, #17
10000338:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
1000033c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000340:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000344:	2225      	movs	r2, #37	@ 0x25
10000346:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
1000034a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000034e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000352:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
10000356:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
1000035a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000035e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000362:	f641 2204 	movw	r2, #6660	@ 0x1a04
10000366:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
1000036a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000036e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000372:	2201      	movs	r2, #1
10000374:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000378:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000037c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000380:	2202      	movs	r2, #2
10000382:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
10000386:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000038a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000038e:	2201      	movs	r2, #1
10000390:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
10000394:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000398:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000039c:	2204      	movs	r2, #4
1000039e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
100003a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003aa:	2263      	movs	r2, #99	@ 0x63
100003ac:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
100003b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003b4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003b8:	2206      	movs	r2, #6
100003ba:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
100003be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003c6:	2208      	movs	r2, #8
100003c8:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
100003cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003d4:	2208      	movs	r2, #8
100003d6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
100003da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003e2:	2200      	movs	r2, #0
100003e4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
100003e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003f0:	2200      	movs	r2, #0
100003f2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
100003f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100003fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100003fe:	2200      	movs	r2, #0
10000400:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000404:	f107 0334 	add.w	r3, r7, #52	@ 0x34
10000408:	4618      	mov	r0, r3
1000040a:	f001 f8c9 	bl	100015a0 <HAL_RCC_OscConfig>
1000040e:	4603      	mov	r3, r0
10000410:	2b00      	cmp	r3, #0
10000412:	d001      	beq.n	10000418 <SystemClock_Config+0x244>
  {
    Error_Handler();
10000414:	f000 f94a 	bl	100006ac <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000418:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000041c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000420:	22fe      	movs	r2, #254	@ 0xfe
10000422:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000424:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000428:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000042c:	2202      	movs	r2, #2
1000042e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000430:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000434:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000438:	2200      	movs	r2, #0
1000043a:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
1000043c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000440:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000444:	2203      	movs	r2, #3
10000446:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000448:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000044c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000450:	2200      	movs	r2, #0
10000452:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000454:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000458:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000045c:	2201      	movs	r2, #1
1000045e:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10000460:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000464:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000468:	2202      	movs	r2, #2
1000046a:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
1000046c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000470:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000474:	2201      	movs	r2, #1
10000476:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000478:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000047c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000480:	2201      	movs	r2, #1
10000482:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000484:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000488:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000048c:	2201      	movs	r2, #1
1000048e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000490:	1d3b      	adds	r3, r7, #4
10000492:	4618      	mov	r0, r3
10000494:	f001 fe22 	bl	100020dc <HAL_RCC_ClockConfig>
10000498:	4603      	mov	r3, r0
1000049a:	2b00      	cmp	r3, #0
1000049c:	d001      	beq.n	100004a2 <SystemClock_Config+0x2ce>
  {
    Error_Handler();
1000049e:	f000 f905 	bl	100006ac <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
100004a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100004a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100004a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
100004ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100004b0:	f043 0317 	orr.w	r3, r3, #23
100004b4:	6453      	str	r3, [r2, #68]	@ 0x44
}
100004b6:	bf00      	nop
100004b8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
100004bc:	46bd      	mov	sp, r7
100004be:	bd80      	pop	{r7, pc}

100004c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
100004c0:	b580      	push	{r7, lr}
100004c2:	b0d6      	sub	sp, #344	@ 0x158
100004c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
100004c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100004ca:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
100004ce:	4618      	mov	r0, r3
100004d0:	f44f 73ac 	mov.w	r3, #344	@ 0x158
100004d4:	461a      	mov	r2, r3
100004d6:	2100      	movs	r1, #0
100004d8:	f007 fd8c 	bl	10007ff4 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
100004dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100004e0:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
100004e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
100004e8:	f04f 0300 	mov.w	r3, #0
100004ec:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInit.CkperClockSelection = RCC_CKPERCLKSOURCE_HSE;
100004f0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
100004f4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
100004f8:	2202      	movs	r2, #2
100004fa:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100004fe:	463b      	mov	r3, r7
10000500:	4618      	mov	r0, r3
10000502:	f002 fe69 	bl	100031d8 <HAL_RCCEx_PeriphCLKConfig>
10000506:	4603      	mov	r3, r0
10000508:	2b00      	cmp	r3, #0
1000050a:	d001      	beq.n	10000510 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
1000050c:	f000 f8ce 	bl	100006ac <Error_Handler>
  }
}
10000510:	bf00      	nop
10000512:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
10000516:	46bd      	mov	sp, r7
10000518:	bd80      	pop	{r7, pc}
	...

1000051c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
1000051c:	b580      	push	{r7, lr}
1000051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_Init 0 */
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */
  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
10000520:	4b06      	ldr	r3, [pc, #24]	@ (1000053c <MX_IPCC_Init+0x20>)
10000522:	4a07      	ldr	r2, [pc, #28]	@ (10000540 <MX_IPCC_Init+0x24>)
10000524:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
10000526:	4805      	ldr	r0, [pc, #20]	@ (1000053c <MX_IPCC_Init+0x20>)
10000528:	f000 fe14 	bl	10001154 <HAL_IPCC_Init>
1000052c:	4603      	mov	r3, r0
1000052e:	2b00      	cmp	r3, #0
10000530:	d001      	beq.n	10000536 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
10000532:	f000 f8bb 	bl	100006ac <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */
  /* USER CODE END IPCC_Init 2 */

}
10000536:	bf00      	nop
10000538:	bd80      	pop	{r7, pc}
1000053a:	bf00      	nop
1000053c:	100201c8 	.word	0x100201c8
10000540:	4c001000 	.word	0x4c001000

10000544 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
10000544:	b580      	push	{r7, lr}
10000546:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */
  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
10000548:	4b27      	ldr	r3, [pc, #156]	@ (100005e8 <MX_SPI5_Init+0xa4>)
1000054a:	4a28      	ldr	r2, [pc, #160]	@ (100005ec <MX_SPI5_Init+0xa8>)
1000054c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
1000054e:	4b26      	ldr	r3, [pc, #152]	@ (100005e8 <MX_SPI5_Init+0xa4>)
10000550:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
10000554:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
10000556:	4b24      	ldr	r3, [pc, #144]	@ (100005e8 <MX_SPI5_Init+0xa4>)
10000558:	2200      	movs	r2, #0
1000055a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
1000055c:	4b22      	ldr	r3, [pc, #136]	@ (100005e8 <MX_SPI5_Init+0xa4>)
1000055e:	2207      	movs	r2, #7
10000560:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
10000562:	4b21      	ldr	r3, [pc, #132]	@ (100005e8 <MX_SPI5_Init+0xa4>)
10000564:	2200      	movs	r2, #0
10000566:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
10000568:	4b1f      	ldr	r3, [pc, #124]	@ (100005e8 <MX_SPI5_Init+0xa4>)
1000056a:	2200      	movs	r2, #0
1000056c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
1000056e:	4b1e      	ldr	r3, [pc, #120]	@ (100005e8 <MX_SPI5_Init+0xa4>)
10000570:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
10000574:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
10000576:	4b1c      	ldr	r3, [pc, #112]	@ (100005e8 <MX_SPI5_Init+0xa4>)
10000578:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
1000057c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
1000057e:	4b1a      	ldr	r3, [pc, #104]	@ (100005e8 <MX_SPI5_Init+0xa4>)
10000580:	2200      	movs	r2, #0
10000582:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
10000584:	4b18      	ldr	r3, [pc, #96]	@ (100005e8 <MX_SPI5_Init+0xa4>)
10000586:	2200      	movs	r2, #0
10000588:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
1000058a:	4b17      	ldr	r3, [pc, #92]	@ (100005e8 <MX_SPI5_Init+0xa4>)
1000058c:	2200      	movs	r2, #0
1000058e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
10000590:	4b15      	ldr	r3, [pc, #84]	@ (100005e8 <MX_SPI5_Init+0xa4>)
10000592:	2200      	movs	r2, #0
10000594:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
10000596:	4b14      	ldr	r3, [pc, #80]	@ (100005e8 <MX_SPI5_Init+0xa4>)
10000598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
1000059c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
1000059e:	4b12      	ldr	r3, [pc, #72]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005a0:	2200      	movs	r2, #0
100005a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
100005a4:	4b10      	ldr	r3, [pc, #64]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005a6:	2200      	movs	r2, #0
100005a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
100005aa:	4b0f      	ldr	r3, [pc, #60]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005ac:	2200      	movs	r2, #0
100005ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
100005b0:	4b0d      	ldr	r3, [pc, #52]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005b2:	2200      	movs	r2, #0
100005b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
100005b6:	4b0c      	ldr	r3, [pc, #48]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005b8:	2200      	movs	r2, #0
100005ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
100005bc:	4b0a      	ldr	r3, [pc, #40]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005be:	2200      	movs	r2, #0
100005c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
100005c2:	4b09      	ldr	r3, [pc, #36]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005c4:	2200      	movs	r2, #0
100005c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
100005c8:	4b07      	ldr	r3, [pc, #28]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005ca:	2200      	movs	r2, #0
100005cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
100005ce:	4b06      	ldr	r3, [pc, #24]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005d0:	2200      	movs	r2, #0
100005d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
100005d4:	4804      	ldr	r0, [pc, #16]	@ (100005e8 <MX_SPI5_Init+0xa4>)
100005d6:	f004 fc93 	bl	10004f00 <HAL_SPI_Init>
100005da:	4603      	mov	r3, r0
100005dc:	2b00      	cmp	r3, #0
100005de:	d001      	beq.n	100005e4 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
100005e0:	f000 f864 	bl	100006ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */
  /* USER CODE END SPI5_Init 2 */

}
100005e4:	bf00      	nop
100005e6:	bd80      	pop	{r7, pc}
100005e8:	10020204 	.word	0x10020204
100005ec:	44009000 	.word	0x44009000

100005f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
100005f0:	b480      	push	{r7}
100005f2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX_CLK_ENABLE();
100005f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100005f8:	2204      	movs	r2, #4
100005fa:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98
  __HAL_RCC_DMA1_CLK_ENABLE();
100005fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000602:	2201      	movs	r2, #1
10000604:	f8c3 2a98 	str.w	r2, [r3, #2712]	@ 0xa98

}
10000608:	bf00      	nop
1000060a:	46bd      	mov	sp, r7
1000060c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000610:	4770      	bx	lr

10000612 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10000612:	b480      	push	{r7}
10000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
10000616:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000061a:	2204      	movs	r2, #4
1000061c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
10000620:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000624:	2280      	movs	r2, #128	@ 0x80
10000626:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
1000062a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000062e:	2220      	movs	r2, #32
10000630:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
10000634:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000638:	2201      	movs	r2, #1
1000063a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
1000063e:	bf00      	nop
10000640:	46bd      	mov	sp, r7
10000642:	f85d 7b04 	ldr.w	r7, [sp], #4
10000646:	4770      	bx	lr

10000648 <VIRT_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void VIRT_UART_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
10000648:	b480      	push	{r7}
1000064a:	b083      	sub	sp, #12
1000064c:	af00      	add	r7, sp, #0
1000064e:	6078      	str	r0, [r7, #4]
    // Handle received data from Linux
    // This callback is needed to complete the handshake
}
10000650:	bf00      	nop
10000652:	370c      	adds	r7, #12
10000654:	46bd      	mov	sp, r7
10000656:	f85d 7b04 	ldr.w	r7, [sp], #4
1000065a:	4770      	bx	lr

1000065c <qprint>:

void qprint(const char* format, ...) {
1000065c:	b40f      	push	{r0, r1, r2, r3}
1000065e:	b580      	push	{r7, lr}
10000660:	b0a2      	sub	sp, #136	@ 0x88
10000662:	af00      	add	r7, sp, #0
	OPENAMP_check_for_message();
10000664:	f007 fa76 	bl	10007b54 <OPENAMP_check_for_message>
    char buffer[128];
    va_list args;
    va_start(args, format);
10000668:	f107 0394 	add.w	r3, r7, #148	@ 0x94
1000066c:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
1000066e:	1d38      	adds	r0, r7, #4
10000670:	683b      	ldr	r3, [r7, #0]
10000672:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
10000676:	2180      	movs	r1, #128	@ 0x80
10000678:	f007 fcae 	bl	10007fd8 <vsniprintf>
1000067c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (len > 0) {
10000680:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
10000684:	2b00      	cmp	r3, #0
10000686:	dd07      	ble.n	10000698 <qprint+0x3c>
        VIRT_UART_Transmit(&huart0, (uint8_t*)buffer, len);
10000688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
1000068c:	b29a      	uxth	r2, r3
1000068e:	1d3b      	adds	r3, r7, #4
10000690:	4619      	mov	r1, r3
10000692:	4805      	ldr	r0, [pc, #20]	@ (100006a8 <qprint+0x4c>)
10000694:	f006 fd3e 	bl	10007114 <VIRT_UART_Transmit>
    }
}
10000698:	bf00      	nop
1000069a:	3788      	adds	r7, #136	@ 0x88
1000069c:	46bd      	mov	sp, r7
1000069e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
100006a2:	b004      	add	sp, #16
100006a4:	4770      	bx	lr
100006a6:	bf00      	nop
100006a8:	1002028c 	.word	0x1002028c

100006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100006ac:	b480      	push	{r7}
100006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
100006b0:	bf00      	nop
100006b2:	46bd      	mov	sp, r7
100006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
100006b8:	4770      	bx	lr

100006ba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100006ba:	b580      	push	{r7, lr}
100006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100006be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100006c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
100006c6:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
100006ca:	2200      	movs	r2, #0
100006cc:	2101      	movs	r1, #1
100006ce:	f06f 000b 	mvn.w	r0, #11
100006d2:	f000 fb5e 	bl	10000d92 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
100006d6:	2200      	movs	r2, #0
100006d8:	2101      	movs	r1, #1
100006da:	f06f 000a 	mvn.w	r0, #10
100006de:	f000 fb58 	bl	10000d92 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
100006e2:	2200      	movs	r2, #0
100006e4:	2101      	movs	r1, #1
100006e6:	f06f 0009 	mvn.w	r0, #9
100006ea:	f000 fb52 	bl	10000d92 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
100006ee:	2200      	movs	r2, #0
100006f0:	2101      	movs	r1, #1
100006f2:	f06f 0004 	mvn.w	r0, #4
100006f6:	f000 fb4c 	bl	10000d92 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
100006fa:	2200      	movs	r2, #0
100006fc:	2101      	movs	r1, #1
100006fe:	f06f 0003 	mvn.w	r0, #3
10000702:	f000 fb46 	bl	10000d92 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
10000706:	2200      	movs	r2, #0
10000708:	2101      	movs	r1, #1
1000070a:	f06f 0001 	mvn.w	r0, #1
1000070e:	f000 fb40 	bl	10000d92 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
10000712:	2200      	movs	r2, #0
10000714:	2100      	movs	r1, #0
10000716:	2091      	movs	r0, #145	@ 0x91
10000718:	f000 fb3b 	bl	10000d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
1000071c:	2091      	movs	r0, #145	@ 0x91
1000071e:	f000 fb54 	bl	10000dca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000722:	bf00      	nop
10000724:	bd80      	pop	{r7, pc}
	...

10000728 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
10000728:	b580      	push	{r7, lr}
1000072a:	b082      	sub	sp, #8
1000072c:	af00      	add	r7, sp, #0
1000072e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
10000730:	687b      	ldr	r3, [r7, #4]
10000732:	681b      	ldr	r3, [r3, #0]
10000734:	4a0e      	ldr	r2, [pc, #56]	@ (10000770 <HAL_IPCC_MspInit+0x48>)
10000736:	4293      	cmp	r3, r2
10000738:	d115      	bne.n	10000766 <HAL_IPCC_MspInit+0x3e>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
1000073a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000073e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
10000742:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, 1, 0);
10000746:	2200      	movs	r2, #0
10000748:	2101      	movs	r1, #1
1000074a:	2067      	movs	r0, #103	@ 0x67
1000074c:	f000 fb21 	bl	10000d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
10000750:	2067      	movs	r0, #103	@ 0x67
10000752:	f000 fb3a 	bl	10000dca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_TX1_IRQn, 1, 0);
10000756:	2200      	movs	r2, #0
10000758:	2101      	movs	r1, #1
1000075a:	2068      	movs	r0, #104	@ 0x68
1000075c:	f000 fb19 	bl	10000d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_TX1_IRQn);
10000760:	2068      	movs	r0, #104	@ 0x68
10000762:	f000 fb32 	bl	10000dca <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
10000766:	bf00      	nop
10000768:	3708      	adds	r7, #8
1000076a:	46bd      	mov	sp, r7
1000076c:	bd80      	pop	{r7, pc}
1000076e:	bf00      	nop
10000770:	4c001000 	.word	0x4c001000

10000774 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
10000774:	b580      	push	{r7, lr}
10000776:	b0de      	sub	sp, #376	@ 0x178
10000778:	af00      	add	r7, sp, #0
1000077a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
1000077e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
10000782:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000784:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
10000788:	2200      	movs	r2, #0
1000078a:	601a      	str	r2, [r3, #0]
1000078c:	605a      	str	r2, [r3, #4]
1000078e:	609a      	str	r2, [r3, #8]
10000790:	60da      	str	r2, [r3, #12]
10000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10000794:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10000798:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
1000079c:	4618      	mov	r0, r3
1000079e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
100007a2:	461a      	mov	r2, r3
100007a4:	2100      	movs	r1, #0
100007a6:	f007 fc25 	bl	10007ff4 <memset>
  if(hspi->Instance==SPI5)
100007aa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100007ae:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
100007b2:	681b      	ldr	r3, [r3, #0]
100007b4:	681b      	ldr	r3, [r3, #0]
100007b6:	4a32      	ldr	r2, [pc, #200]	@ (10000880 <HAL_SPI_MspInit+0x10c>)
100007b8:	4293      	cmp	r3, r2
100007ba:	d15b      	bne.n	10000874 <HAL_SPI_MspInit+0x100>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
100007bc:	4b31      	ldr	r3, [pc, #196]	@ (10000884 <HAL_SPI_MspInit+0x110>)
100007be:	681b      	ldr	r3, [r3, #0]
100007c0:	f003 0307 	and.w	r3, r3, #7
100007c4:	2b04      	cmp	r3, #4
100007c6:	d11a      	bne.n	100007fe <HAL_SPI_MspInit+0x8a>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI45;
100007c8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100007cc:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
100007d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
100007d4:	f04f 0300 	mov.w	r3, #0
100007d8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PCLK2;
100007dc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100007e0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
100007e4:	2200      	movs	r2, #0
100007e6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
100007ea:	f107 0308 	add.w	r3, r7, #8
100007ee:	4618      	mov	r0, r3
100007f0:	f002 fcf2 	bl	100031d8 <HAL_RCCEx_PeriphCLKConfig>
100007f4:	4603      	mov	r3, r0
100007f6:	2b00      	cmp	r3, #0
100007f8:	d001      	beq.n	100007fe <HAL_SPI_MspInit+0x8a>
    {
      Error_Handler();
100007fa:	f7ff ff57 	bl	100006ac <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
100007fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000802:	f44f 6280 	mov.w	r2, #1024	@ 0x400
10000806:	f8c3 2a88 	str.w	r2, [r3, #2696]	@ 0xa88

    __HAL_RCC_GPIOH_CLK_ENABLE();
1000080a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000080e:	2280      	movs	r2, #128	@ 0x80
10000810:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    __HAL_RCC_GPIOF_CLK_ENABLE();
10000814:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000818:	2220      	movs	r2, #32
1000081a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
    /**SPI5 GPIO Configuration
    PH6     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
1000081e:	2340      	movs	r3, #64	@ 0x40
10000820:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10000824:	2302      	movs	r3, #2
10000826:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000082a:	2300      	movs	r3, #0
1000082c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
10000830:	2301      	movs	r3, #1
10000832:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
10000836:	2305      	movs	r3, #5
10000838:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
1000083c:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
10000840:	4619      	mov	r1, r3
10000842:	4811      	ldr	r0, [pc, #68]	@ (10000888 <HAL_SPI_MspInit+0x114>)
10000844:	f000 fadc 	bl	10000e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
10000848:	f44f 7340 	mov.w	r3, #768	@ 0x300
1000084c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10000850:	2302      	movs	r3, #2
10000852:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10000856:	2300      	movs	r3, #0
10000858:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
1000085c:	2301      	movs	r3, #1
1000085e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
10000862:	2305      	movs	r3, #5
10000864:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
10000868:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
1000086c:	4619      	mov	r1, r3
1000086e:	4807      	ldr	r0, [pc, #28]	@ (1000088c <HAL_SPI_MspInit+0x118>)
10000870:	f000 fac6 	bl	10000e00 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
10000874:	bf00      	nop
10000876:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
1000087a:	46bd      	mov	sp, r7
1000087c:	bd80      	pop	{r7, pc}
1000087e:	bf00      	nop
10000880:	44009000 	.word	0x44009000
10000884:	50020000 	.word	0x50020000
10000888:	50009000 	.word	0x50009000
1000088c:	50007000 	.word	0x50007000

10000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10000890:	b480      	push	{r7}
10000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
10000894:	bf00      	nop
10000896:	e7fd      	b.n	10000894 <NMI_Handler+0x4>

10000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000898:	b480      	push	{r7}
1000089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000089c:	bf00      	nop
1000089e:	e7fd      	b.n	1000089c <HardFault_Handler+0x4>

100008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
100008a0:	b480      	push	{r7}
100008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100008a4:	bf00      	nop
100008a6:	e7fd      	b.n	100008a4 <MemManage_Handler+0x4>

100008a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
100008a8:	b480      	push	{r7}
100008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100008ac:	bf00      	nop
100008ae:	e7fd      	b.n	100008ac <BusFault_Handler+0x4>

100008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
100008b0:	b480      	push	{r7}
100008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100008b4:	bf00      	nop
100008b6:	e7fd      	b.n	100008b4 <UsageFault_Handler+0x4>

100008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100008b8:	b480      	push	{r7}
100008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100008bc:	bf00      	nop
100008be:	46bd      	mov	sp, r7
100008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100008c4:	4770      	bx	lr

100008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
100008c6:	b480      	push	{r7}
100008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
100008ca:	bf00      	nop
100008cc:	46bd      	mov	sp, r7
100008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
100008d2:	4770      	bx	lr

100008d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100008d4:	b480      	push	{r7}
100008d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100008d8:	bf00      	nop
100008da:	46bd      	mov	sp, r7
100008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
100008e0:	4770      	bx	lr

100008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100008e2:	b580      	push	{r7, lr}
100008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100008e6:	f000 f935 	bl	10000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100008ea:	bf00      	nop
100008ec:	bd80      	pop	{r7, pc}
	...

100008f0 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
100008f0:	b580      	push	{r7, lr}
100008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */

  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
100008f4:	4802      	ldr	r0, [pc, #8]	@ (10000900 <IPCC_RX1_IRQHandler+0x10>)
100008f6:	f000 fd75 	bl	100013e4 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
100008fa:	bf00      	nop
100008fc:	bd80      	pop	{r7, pc}
100008fe:	bf00      	nop
10000900:	100201c8 	.word	0x100201c8

10000904 <IPCC_TX1_IRQHandler>:

/**
  * @brief This function handles IPCC TX1 free interrupt.
  */
void IPCC_TX1_IRQHandler(void)
{
10000904:	b580      	push	{r7, lr}
10000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_TX1_IRQn 0 */

  /* USER CODE END IPCC_TX1_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
10000908:	4802      	ldr	r0, [pc, #8]	@ (10000914 <IPCC_TX1_IRQHandler+0x10>)
1000090a:	f000 fd1d 	bl	10001348 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_TX1_IRQn 1 */

  /* USER CODE END IPCC_TX1_IRQn 1 */
}
1000090e:	bf00      	nop
10000910:	bd80      	pop	{r7, pc}
10000912:	bf00      	nop
10000914:	100201c8 	.word	0x100201c8

10000918 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10000918:	b580      	push	{r7, lr}
1000091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
1000091c:	f001 fffc 	bl	10002918 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000920:	bf00      	nop
10000922:	bd80      	pop	{r7, pc}

10000924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
10000924:	b480      	push	{r7}
10000926:	af00      	add	r7, sp, #0
  return 1;
10000928:	2301      	movs	r3, #1
}
1000092a:	4618      	mov	r0, r3
1000092c:	46bd      	mov	sp, r7
1000092e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000932:	4770      	bx	lr

10000934 <_kill>:

int _kill(int pid, int sig)
{
10000934:	b580      	push	{r7, lr}
10000936:	b082      	sub	sp, #8
10000938:	af00      	add	r7, sp, #0
1000093a:	6078      	str	r0, [r7, #4]
1000093c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
1000093e:	f007 fbdd 	bl	100080fc <__errno>
10000942:	4603      	mov	r3, r0
10000944:	2216      	movs	r2, #22
10000946:	601a      	str	r2, [r3, #0]
  return -1;
10000948:	f04f 33ff 	mov.w	r3, #4294967295
}
1000094c:	4618      	mov	r0, r3
1000094e:	3708      	adds	r7, #8
10000950:	46bd      	mov	sp, r7
10000952:	bd80      	pop	{r7, pc}

10000954 <_exit>:

void _exit (int status)
{
10000954:	b580      	push	{r7, lr}
10000956:	b082      	sub	sp, #8
10000958:	af00      	add	r7, sp, #0
1000095a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
1000095c:	f04f 31ff 	mov.w	r1, #4294967295
10000960:	6878      	ldr	r0, [r7, #4]
10000962:	f7ff ffe7 	bl	10000934 <_kill>
  while (1) {}    /* Make sure we hang here */
10000966:	bf00      	nop
10000968:	e7fd      	b.n	10000966 <_exit+0x12>

1000096a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
1000096a:	b580      	push	{r7, lr}
1000096c:	b086      	sub	sp, #24
1000096e:	af00      	add	r7, sp, #0
10000970:	60f8      	str	r0, [r7, #12]
10000972:	60b9      	str	r1, [r7, #8]
10000974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10000976:	2300      	movs	r3, #0
10000978:	617b      	str	r3, [r7, #20]
1000097a:	e00a      	b.n	10000992 <_read+0x28>
  {
    *ptr++ = __io_getchar();
1000097c:	f3af 8000 	nop.w
10000980:	4601      	mov	r1, r0
10000982:	68bb      	ldr	r3, [r7, #8]
10000984:	1c5a      	adds	r2, r3, #1
10000986:	60ba      	str	r2, [r7, #8]
10000988:	b2ca      	uxtb	r2, r1
1000098a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1000098c:	697b      	ldr	r3, [r7, #20]
1000098e:	3301      	adds	r3, #1
10000990:	617b      	str	r3, [r7, #20]
10000992:	697a      	ldr	r2, [r7, #20]
10000994:	687b      	ldr	r3, [r7, #4]
10000996:	429a      	cmp	r2, r3
10000998:	dbf0      	blt.n	1000097c <_read+0x12>
  }

  return len;
1000099a:	687b      	ldr	r3, [r7, #4]
}
1000099c:	4618      	mov	r0, r3
1000099e:	3718      	adds	r7, #24
100009a0:	46bd      	mov	sp, r7
100009a2:	bd80      	pop	{r7, pc}

100009a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100009a4:	b580      	push	{r7, lr}
100009a6:	b086      	sub	sp, #24
100009a8:	af00      	add	r7, sp, #0
100009aa:	60f8      	str	r0, [r7, #12]
100009ac:	60b9      	str	r1, [r7, #8]
100009ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100009b0:	2300      	movs	r3, #0
100009b2:	617b      	str	r3, [r7, #20]
100009b4:	e009      	b.n	100009ca <_write+0x26>
  {
    __io_putchar(*ptr++);
100009b6:	68bb      	ldr	r3, [r7, #8]
100009b8:	1c5a      	adds	r2, r3, #1
100009ba:	60ba      	str	r2, [r7, #8]
100009bc:	781b      	ldrb	r3, [r3, #0]
100009be:	4618      	mov	r0, r3
100009c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100009c4:	697b      	ldr	r3, [r7, #20]
100009c6:	3301      	adds	r3, #1
100009c8:	617b      	str	r3, [r7, #20]
100009ca:	697a      	ldr	r2, [r7, #20]
100009cc:	687b      	ldr	r3, [r7, #4]
100009ce:	429a      	cmp	r2, r3
100009d0:	dbf1      	blt.n	100009b6 <_write+0x12>
  }
  return len;
100009d2:	687b      	ldr	r3, [r7, #4]
}
100009d4:	4618      	mov	r0, r3
100009d6:	3718      	adds	r7, #24
100009d8:	46bd      	mov	sp, r7
100009da:	bd80      	pop	{r7, pc}

100009dc <_close>:

int _close(int file)
{
100009dc:	b480      	push	{r7}
100009de:	b083      	sub	sp, #12
100009e0:	af00      	add	r7, sp, #0
100009e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
100009e4:	f04f 33ff 	mov.w	r3, #4294967295
}
100009e8:	4618      	mov	r0, r3
100009ea:	370c      	adds	r7, #12
100009ec:	46bd      	mov	sp, r7
100009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
100009f2:	4770      	bx	lr

100009f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
100009f4:	b480      	push	{r7}
100009f6:	b083      	sub	sp, #12
100009f8:	af00      	add	r7, sp, #0
100009fa:	6078      	str	r0, [r7, #4]
100009fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100009fe:	683b      	ldr	r3, [r7, #0]
10000a00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
10000a04:	605a      	str	r2, [r3, #4]
  return 0;
10000a06:	2300      	movs	r3, #0
}
10000a08:	4618      	mov	r0, r3
10000a0a:	370c      	adds	r7, #12
10000a0c:	46bd      	mov	sp, r7
10000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a12:	4770      	bx	lr

10000a14 <_isatty>:

int _isatty(int file)
{
10000a14:	b480      	push	{r7}
10000a16:	b083      	sub	sp, #12
10000a18:	af00      	add	r7, sp, #0
10000a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10000a1c:	2301      	movs	r3, #1
}
10000a1e:	4618      	mov	r0, r3
10000a20:	370c      	adds	r7, #12
10000a22:	46bd      	mov	sp, r7
10000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a28:	4770      	bx	lr

10000a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10000a2a:	b480      	push	{r7}
10000a2c:	b085      	sub	sp, #20
10000a2e:	af00      	add	r7, sp, #0
10000a30:	60f8      	str	r0, [r7, #12]
10000a32:	60b9      	str	r1, [r7, #8]
10000a34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10000a36:	2300      	movs	r3, #0
}
10000a38:	4618      	mov	r0, r3
10000a3a:	3714      	adds	r7, #20
10000a3c:	46bd      	mov	sp, r7
10000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a42:	4770      	bx	lr

10000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10000a44:	b580      	push	{r7, lr}
10000a46:	b086      	sub	sp, #24
10000a48:	af00      	add	r7, sp, #0
10000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10000a4c:	4a14      	ldr	r2, [pc, #80]	@ (10000aa0 <_sbrk+0x5c>)
10000a4e:	4b15      	ldr	r3, [pc, #84]	@ (10000aa4 <_sbrk+0x60>)
10000a50:	1ad3      	subs	r3, r2, r3
10000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10000a54:	697b      	ldr	r3, [r7, #20]
10000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10000a58:	4b13      	ldr	r3, [pc, #76]	@ (10000aa8 <_sbrk+0x64>)
10000a5a:	681b      	ldr	r3, [r3, #0]
10000a5c:	2b00      	cmp	r3, #0
10000a5e:	d102      	bne.n	10000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10000a60:	4b11      	ldr	r3, [pc, #68]	@ (10000aa8 <_sbrk+0x64>)
10000a62:	4a12      	ldr	r2, [pc, #72]	@ (10000aac <_sbrk+0x68>)
10000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10000a66:	4b10      	ldr	r3, [pc, #64]	@ (10000aa8 <_sbrk+0x64>)
10000a68:	681a      	ldr	r2, [r3, #0]
10000a6a:	687b      	ldr	r3, [r7, #4]
10000a6c:	4413      	add	r3, r2
10000a6e:	693a      	ldr	r2, [r7, #16]
10000a70:	429a      	cmp	r2, r3
10000a72:	d207      	bcs.n	10000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
10000a74:	f007 fb42 	bl	100080fc <__errno>
10000a78:	4603      	mov	r3, r0
10000a7a:	220c      	movs	r2, #12
10000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
10000a7e:	f04f 33ff 	mov.w	r3, #4294967295
10000a82:	e009      	b.n	10000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10000a84:	4b08      	ldr	r3, [pc, #32]	@ (10000aa8 <_sbrk+0x64>)
10000a86:	681b      	ldr	r3, [r3, #0]
10000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10000a8a:	4b07      	ldr	r3, [pc, #28]	@ (10000aa8 <_sbrk+0x64>)
10000a8c:	681a      	ldr	r2, [r3, #0]
10000a8e:	687b      	ldr	r3, [r7, #4]
10000a90:	4413      	add	r3, r2
10000a92:	4a05      	ldr	r2, [pc, #20]	@ (10000aa8 <_sbrk+0x64>)
10000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10000a96:	68fb      	ldr	r3, [r7, #12]
}
10000a98:	4618      	mov	r0, r3
10000a9a:	3718      	adds	r7, #24
10000a9c:	46bd      	mov	sp, r7
10000a9e:	bd80      	pop	{r7, pc}
10000aa0:	10040000 	.word	0x10040000
10000aa4:	00000400 	.word	0x00000400
10000aa8:	100202dc 	.word	0x100202dc
10000aac:	10020500 	.word	0x10020500

10000ab0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000ab0:	e7fe      	b.n	10000ab0 <ADC1_IRQHandler>
	...

10000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000ab4:	b580      	push	{r7, lr}
10000ab6:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000ab8:	2003      	movs	r0, #3
10000aba:	f000 f95f 	bl	10000d7c <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000abe:	f001 feea 	bl	10002896 <HAL_RCC_GetSystemCoreClockFreq>
10000ac2:	4603      	mov	r3, r0
10000ac4:	4a07      	ldr	r2, [pc, #28]	@ (10000ae4 <HAL_Init+0x30>)
10000ac6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000ac8:	2001      	movs	r0, #1
10000aca:	f000 f80d 	bl	10000ae8 <HAL_InitTick>
10000ace:	4603      	mov	r3, r0
10000ad0:	2b00      	cmp	r3, #0
10000ad2:	d001      	beq.n	10000ad8 <HAL_Init+0x24>
  {
    return HAL_ERROR;
10000ad4:	2301      	movs	r3, #1
10000ad6:	e002      	b.n	10000ade <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10000ad8:	f7ff fdef 	bl	100006ba <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000adc:	2300      	movs	r3, #0
}
10000ade:	4618      	mov	r0, r3
10000ae0:	bd80      	pop	{r7, pc}
10000ae2:	bf00      	nop
10000ae4:	10020000 	.word	0x10020000

10000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10000ae8:	b580      	push	{r7, lr}
10000aea:	b082      	sub	sp, #8
10000aec:	af00      	add	r7, sp, #0
10000aee:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000af0:	4b15      	ldr	r3, [pc, #84]	@ (10000b48 <HAL_InitTick+0x60>)
10000af2:	781b      	ldrb	r3, [r3, #0]
10000af4:	2b00      	cmp	r3, #0
10000af6:	d101      	bne.n	10000afc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10000af8:	2301      	movs	r3, #1
10000afa:	e021      	b.n	10000b40 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10000afc:	4b13      	ldr	r3, [pc, #76]	@ (10000b4c <HAL_InitTick+0x64>)
10000afe:	681a      	ldr	r2, [r3, #0]
10000b00:	4b11      	ldr	r3, [pc, #68]	@ (10000b48 <HAL_InitTick+0x60>)
10000b02:	781b      	ldrb	r3, [r3, #0]
10000b04:	4619      	mov	r1, r3
10000b06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
10000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
10000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
10000b12:	4618      	mov	r0, r3
10000b14:	f000 f967 	bl	10000de6 <HAL_SYSTICK_Config>
10000b18:	4603      	mov	r3, r0
10000b1a:	2b00      	cmp	r3, #0
10000b1c:	d001      	beq.n	10000b22 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10000b1e:	2301      	movs	r3, #1
10000b20:	e00e      	b.n	10000b40 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000b22:	687b      	ldr	r3, [r7, #4]
10000b24:	2b0f      	cmp	r3, #15
10000b26:	d80a      	bhi.n	10000b3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000b28:	2200      	movs	r2, #0
10000b2a:	6879      	ldr	r1, [r7, #4]
10000b2c:	f04f 30ff 	mov.w	r0, #4294967295
10000b30:	f000 f92f 	bl	10000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000b34:	4a06      	ldr	r2, [pc, #24]	@ (10000b50 <HAL_InitTick+0x68>)
10000b36:	687b      	ldr	r3, [r7, #4]
10000b38:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10000b3a:	2300      	movs	r3, #0
10000b3c:	e000      	b.n	10000b40 <HAL_InitTick+0x58>
    return HAL_ERROR;
10000b3e:	2301      	movs	r3, #1
}
10000b40:	4618      	mov	r0, r3
10000b42:	3708      	adds	r7, #8
10000b44:	46bd      	mov	sp, r7
10000b46:	bd80      	pop	{r7, pc}
10000b48:	10020008 	.word	0x10020008
10000b4c:	10020000 	.word	0x10020000
10000b50:	10020004 	.word	0x10020004

10000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000b54:	b480      	push	{r7}
10000b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000b58:	4b06      	ldr	r3, [pc, #24]	@ (10000b74 <HAL_IncTick+0x20>)
10000b5a:	781b      	ldrb	r3, [r3, #0]
10000b5c:	461a      	mov	r2, r3
10000b5e:	4b06      	ldr	r3, [pc, #24]	@ (10000b78 <HAL_IncTick+0x24>)
10000b60:	681b      	ldr	r3, [r3, #0]
10000b62:	4413      	add	r3, r2
10000b64:	4a04      	ldr	r2, [pc, #16]	@ (10000b78 <HAL_IncTick+0x24>)
10000b66:	6013      	str	r3, [r2, #0]
}
10000b68:	bf00      	nop
10000b6a:	46bd      	mov	sp, r7
10000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b70:	4770      	bx	lr
10000b72:	bf00      	nop
10000b74:	10020008 	.word	0x10020008
10000b78:	100202e0 	.word	0x100202e0

10000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000b7c:	b480      	push	{r7}
10000b7e:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000b80:	4b03      	ldr	r3, [pc, #12]	@ (10000b90 <HAL_GetTick+0x14>)
10000b82:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000b84:	4618      	mov	r0, r3
10000b86:	46bd      	mov	sp, r7
10000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b8c:	4770      	bx	lr
10000b8e:	bf00      	nop
10000b90:	100202e0 	.word	0x100202e0

10000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10000b94:	b580      	push	{r7, lr}
10000b96:	b084      	sub	sp, #16
10000b98:	af00      	add	r7, sp, #0
10000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10000b9c:	f7ff ffee 	bl	10000b7c <HAL_GetTick>
10000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10000ba2:	687b      	ldr	r3, [r7, #4]
10000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10000ba6:	68fb      	ldr	r3, [r7, #12]
10000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
10000bac:	d005      	beq.n	10000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10000bae:	4b0a      	ldr	r3, [pc, #40]	@ (10000bd8 <HAL_Delay+0x44>)
10000bb0:	781b      	ldrb	r3, [r3, #0]
10000bb2:	461a      	mov	r2, r3
10000bb4:	68fb      	ldr	r3, [r7, #12]
10000bb6:	4413      	add	r3, r2
10000bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10000bba:	bf00      	nop
10000bbc:	f7ff ffde 	bl	10000b7c <HAL_GetTick>
10000bc0:	4602      	mov	r2, r0
10000bc2:	68bb      	ldr	r3, [r7, #8]
10000bc4:	1ad3      	subs	r3, r2, r3
10000bc6:	68fa      	ldr	r2, [r7, #12]
10000bc8:	429a      	cmp	r2, r3
10000bca:	d8f7      	bhi.n	10000bbc <HAL_Delay+0x28>
  {
  }
}
10000bcc:	bf00      	nop
10000bce:	bf00      	nop
10000bd0:	3710      	adds	r7, #16
10000bd2:	46bd      	mov	sp, r7
10000bd4:	bd80      	pop	{r7, pc}
10000bd6:	bf00      	nop
10000bd8:	10020008 	.word	0x10020008

10000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000bdc:	b480      	push	{r7}
10000bde:	b085      	sub	sp, #20
10000be0:	af00      	add	r7, sp, #0
10000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000be4:	687b      	ldr	r3, [r7, #4]
10000be6:	f003 0307 	and.w	r3, r3, #7
10000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000bec:	4b0c      	ldr	r3, [pc, #48]	@ (10000c20 <__NVIC_SetPriorityGrouping+0x44>)
10000bee:	68db      	ldr	r3, [r3, #12]
10000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10000bf2:	68ba      	ldr	r2, [r7, #8]
10000bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10000bf8:	4013      	ands	r3, r2
10000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000bfc:	68fb      	ldr	r3, [r7, #12]
10000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000c00:	68bb      	ldr	r3, [r7, #8]
10000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10000c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
10000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10000c0e:	4a04      	ldr	r2, [pc, #16]	@ (10000c20 <__NVIC_SetPriorityGrouping+0x44>)
10000c10:	68bb      	ldr	r3, [r7, #8]
10000c12:	60d3      	str	r3, [r2, #12]
}
10000c14:	bf00      	nop
10000c16:	3714      	adds	r7, #20
10000c18:	46bd      	mov	sp, r7
10000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c1e:	4770      	bx	lr
10000c20:	e000ed00 	.word	0xe000ed00

10000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10000c24:	b480      	push	{r7}
10000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10000c28:	4b04      	ldr	r3, [pc, #16]	@ (10000c3c <__NVIC_GetPriorityGrouping+0x18>)
10000c2a:	68db      	ldr	r3, [r3, #12]
10000c2c:	0a1b      	lsrs	r3, r3, #8
10000c2e:	f003 0307 	and.w	r3, r3, #7
}
10000c32:	4618      	mov	r0, r3
10000c34:	46bd      	mov	sp, r7
10000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c3a:	4770      	bx	lr
10000c3c:	e000ed00 	.word	0xe000ed00

10000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000c40:	b480      	push	{r7}
10000c42:	b083      	sub	sp, #12
10000c44:	af00      	add	r7, sp, #0
10000c46:	4603      	mov	r3, r0
10000c48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000c4e:	2b00      	cmp	r3, #0
10000c50:	db0b      	blt.n	10000c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000c52:	88fb      	ldrh	r3, [r7, #6]
10000c54:	f003 021f 	and.w	r2, r3, #31
10000c58:	4907      	ldr	r1, [pc, #28]	@ (10000c78 <__NVIC_EnableIRQ+0x38>)
10000c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000c5e:	095b      	lsrs	r3, r3, #5
10000c60:	2001      	movs	r0, #1
10000c62:	fa00 f202 	lsl.w	r2, r0, r2
10000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10000c6a:	bf00      	nop
10000c6c:	370c      	adds	r7, #12
10000c6e:	46bd      	mov	sp, r7
10000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c74:	4770      	bx	lr
10000c76:	bf00      	nop
10000c78:	e000e100 	.word	0xe000e100

10000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000c7c:	b480      	push	{r7}
10000c7e:	b083      	sub	sp, #12
10000c80:	af00      	add	r7, sp, #0
10000c82:	4603      	mov	r3, r0
10000c84:	6039      	str	r1, [r7, #0]
10000c86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000c8c:	2b00      	cmp	r3, #0
10000c8e:	db0a      	blt.n	10000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000c90:	683b      	ldr	r3, [r7, #0]
10000c92:	b2da      	uxtb	r2, r3
10000c94:	490c      	ldr	r1, [pc, #48]	@ (10000cc8 <__NVIC_SetPriority+0x4c>)
10000c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000c9a:	0112      	lsls	r2, r2, #4
10000c9c:	b2d2      	uxtb	r2, r2
10000c9e:	440b      	add	r3, r1
10000ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000ca4:	e00a      	b.n	10000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000ca6:	683b      	ldr	r3, [r7, #0]
10000ca8:	b2da      	uxtb	r2, r3
10000caa:	4908      	ldr	r1, [pc, #32]	@ (10000ccc <__NVIC_SetPriority+0x50>)
10000cac:	88fb      	ldrh	r3, [r7, #6]
10000cae:	f003 030f 	and.w	r3, r3, #15
10000cb2:	3b04      	subs	r3, #4
10000cb4:	0112      	lsls	r2, r2, #4
10000cb6:	b2d2      	uxtb	r2, r2
10000cb8:	440b      	add	r3, r1
10000cba:	761a      	strb	r2, [r3, #24]
}
10000cbc:	bf00      	nop
10000cbe:	370c      	adds	r7, #12
10000cc0:	46bd      	mov	sp, r7
10000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
10000cc6:	4770      	bx	lr
10000cc8:	e000e100 	.word	0xe000e100
10000ccc:	e000ed00 	.word	0xe000ed00

10000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000cd0:	b480      	push	{r7}
10000cd2:	b089      	sub	sp, #36	@ 0x24
10000cd4:	af00      	add	r7, sp, #0
10000cd6:	60f8      	str	r0, [r7, #12]
10000cd8:	60b9      	str	r1, [r7, #8]
10000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000cdc:	68fb      	ldr	r3, [r7, #12]
10000cde:	f003 0307 	and.w	r3, r3, #7
10000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000ce4:	69fb      	ldr	r3, [r7, #28]
10000ce6:	f1c3 0307 	rsb	r3, r3, #7
10000cea:	2b04      	cmp	r3, #4
10000cec:	bf28      	it	cs
10000cee:	2304      	movcs	r3, #4
10000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10000cf2:	69fb      	ldr	r3, [r7, #28]
10000cf4:	3304      	adds	r3, #4
10000cf6:	2b06      	cmp	r3, #6
10000cf8:	d902      	bls.n	10000d00 <NVIC_EncodePriority+0x30>
10000cfa:	69fb      	ldr	r3, [r7, #28]
10000cfc:	3b03      	subs	r3, #3
10000cfe:	e000      	b.n	10000d02 <NVIC_EncodePriority+0x32>
10000d00:	2300      	movs	r3, #0
10000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000d04:	f04f 32ff 	mov.w	r2, #4294967295
10000d08:	69bb      	ldr	r3, [r7, #24]
10000d0a:	fa02 f303 	lsl.w	r3, r2, r3
10000d0e:	43da      	mvns	r2, r3
10000d10:	68bb      	ldr	r3, [r7, #8]
10000d12:	401a      	ands	r2, r3
10000d14:	697b      	ldr	r3, [r7, #20]
10000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10000d18:	f04f 31ff 	mov.w	r1, #4294967295
10000d1c:	697b      	ldr	r3, [r7, #20]
10000d1e:	fa01 f303 	lsl.w	r3, r1, r3
10000d22:	43d9      	mvns	r1, r3
10000d24:	687b      	ldr	r3, [r7, #4]
10000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000d28:	4313      	orrs	r3, r2
         );
}
10000d2a:	4618      	mov	r0, r3
10000d2c:	3724      	adds	r7, #36	@ 0x24
10000d2e:	46bd      	mov	sp, r7
10000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d34:	4770      	bx	lr
	...

10000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000d38:	b580      	push	{r7, lr}
10000d3a:	b082      	sub	sp, #8
10000d3c:	af00      	add	r7, sp, #0
10000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10000d40:	687b      	ldr	r3, [r7, #4]
10000d42:	3b01      	subs	r3, #1
10000d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10000d48:	d301      	bcc.n	10000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10000d4a:	2301      	movs	r3, #1
10000d4c:	e00f      	b.n	10000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (10000d78 <SysTick_Config+0x40>)
10000d50:	687b      	ldr	r3, [r7, #4]
10000d52:	3b01      	subs	r3, #1
10000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10000d56:	210f      	movs	r1, #15
10000d58:	f04f 30ff 	mov.w	r0, #4294967295
10000d5c:	f7ff ff8e 	bl	10000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000d60:	4b05      	ldr	r3, [pc, #20]	@ (10000d78 <SysTick_Config+0x40>)
10000d62:	2200      	movs	r2, #0
10000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10000d66:	4b04      	ldr	r3, [pc, #16]	@ (10000d78 <SysTick_Config+0x40>)
10000d68:	2207      	movs	r2, #7
10000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000d6c:	2300      	movs	r3, #0
}
10000d6e:	4618      	mov	r0, r3
10000d70:	3708      	adds	r7, #8
10000d72:	46bd      	mov	sp, r7
10000d74:	bd80      	pop	{r7, pc}
10000d76:	bf00      	nop
10000d78:	e000e010 	.word	0xe000e010

10000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000d7c:	b580      	push	{r7, lr}
10000d7e:	b082      	sub	sp, #8
10000d80:	af00      	add	r7, sp, #0
10000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000d84:	6878      	ldr	r0, [r7, #4]
10000d86:	f7ff ff29 	bl	10000bdc <__NVIC_SetPriorityGrouping>
}
10000d8a:	bf00      	nop
10000d8c:	3708      	adds	r7, #8
10000d8e:	46bd      	mov	sp, r7
10000d90:	bd80      	pop	{r7, pc}

10000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000d92:	b580      	push	{r7, lr}
10000d94:	b086      	sub	sp, #24
10000d96:	af00      	add	r7, sp, #0
10000d98:	4603      	mov	r3, r0
10000d9a:	60b9      	str	r1, [r7, #8]
10000d9c:	607a      	str	r2, [r7, #4]
10000d9e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000da0:	2300      	movs	r3, #0
10000da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000da4:	f7ff ff3e 	bl	10000c24 <__NVIC_GetPriorityGrouping>
10000da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000daa:	687a      	ldr	r2, [r7, #4]
10000dac:	68b9      	ldr	r1, [r7, #8]
10000dae:	6978      	ldr	r0, [r7, #20]
10000db0:	f7ff ff8e 	bl	10000cd0 <NVIC_EncodePriority>
10000db4:	4602      	mov	r2, r0
10000db6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000dba:	4611      	mov	r1, r2
10000dbc:	4618      	mov	r0, r3
10000dbe:	f7ff ff5d 	bl	10000c7c <__NVIC_SetPriority>
}
10000dc2:	bf00      	nop
10000dc4:	3718      	adds	r7, #24
10000dc6:	46bd      	mov	sp, r7
10000dc8:	bd80      	pop	{r7, pc}

10000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000dca:	b580      	push	{r7, lr}
10000dcc:	b082      	sub	sp, #8
10000dce:	af00      	add	r7, sp, #0
10000dd0:	4603      	mov	r3, r0
10000dd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000dd8:	4618      	mov	r0, r3
10000dda:	f7ff ff31 	bl	10000c40 <__NVIC_EnableIRQ>
}
10000dde:	bf00      	nop
10000de0:	3708      	adds	r7, #8
10000de2:	46bd      	mov	sp, r7
10000de4:	bd80      	pop	{r7, pc}

10000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000de6:	b580      	push	{r7, lr}
10000de8:	b082      	sub	sp, #8
10000dea:	af00      	add	r7, sp, #0
10000dec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10000dee:	6878      	ldr	r0, [r7, #4]
10000df0:	f7ff ffa2 	bl	10000d38 <SysTick_Config>
10000df4:	4603      	mov	r3, r0
}
10000df6:	4618      	mov	r0, r3
10000df8:	3708      	adds	r7, #8
10000dfa:	46bd      	mov	sp, r7
10000dfc:	bd80      	pop	{r7, pc}
	...

10000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10000e00:	b480      	push	{r7}
10000e02:	b089      	sub	sp, #36	@ 0x24
10000e04:	af00      	add	r7, sp, #0
10000e06:	6078      	str	r0, [r7, #4]
10000e08:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
10000e0a:	4b8a      	ldr	r3, [pc, #552]	@ (10001034 <HAL_GPIO_Init+0x234>)
10000e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10000e0e:	2300      	movs	r3, #0
10000e10:	61fb      	str	r3, [r7, #28]
10000e12:	e191      	b.n	10001138 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10000e14:	2201      	movs	r2, #1
10000e16:	69fb      	ldr	r3, [r7, #28]
10000e18:	fa02 f303 	lsl.w	r3, r2, r3
10000e1c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10000e1e:	683b      	ldr	r3, [r7, #0]
10000e20:	681b      	ldr	r3, [r3, #0]
10000e22:	693a      	ldr	r2, [r7, #16]
10000e24:	4013      	ands	r3, r2
10000e26:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10000e28:	68fa      	ldr	r2, [r7, #12]
10000e2a:	693b      	ldr	r3, [r7, #16]
10000e2c:	429a      	cmp	r2, r3
10000e2e:	f040 8180 	bne.w	10001132 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000e32:	683b      	ldr	r3, [r7, #0]
10000e34:	685b      	ldr	r3, [r3, #4]
10000e36:	2b02      	cmp	r3, #2
10000e38:	d003      	beq.n	10000e42 <HAL_GPIO_Init+0x42>
10000e3a:	683b      	ldr	r3, [r7, #0]
10000e3c:	685b      	ldr	r3, [r3, #4]
10000e3e:	2b12      	cmp	r3, #18
10000e40:	d123      	bne.n	10000e8a <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10000e42:	69fb      	ldr	r3, [r7, #28]
10000e44:	08da      	lsrs	r2, r3, #3
10000e46:	687b      	ldr	r3, [r7, #4]
10000e48:	3208      	adds	r2, #8
10000e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10000e50:	69fb      	ldr	r3, [r7, #28]
10000e52:	f003 0307 	and.w	r3, r3, #7
10000e56:	009b      	lsls	r3, r3, #2
10000e58:	220f      	movs	r2, #15
10000e5a:	fa02 f303 	lsl.w	r3, r2, r3
10000e5e:	43db      	mvns	r3, r3
10000e60:	69ba      	ldr	r2, [r7, #24]
10000e62:	4013      	ands	r3, r2
10000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10000e66:	683b      	ldr	r3, [r7, #0]
10000e68:	691a      	ldr	r2, [r3, #16]
10000e6a:	69fb      	ldr	r3, [r7, #28]
10000e6c:	f003 0307 	and.w	r3, r3, #7
10000e70:	009b      	lsls	r3, r3, #2
10000e72:	fa02 f303 	lsl.w	r3, r2, r3
10000e76:	69ba      	ldr	r2, [r7, #24]
10000e78:	4313      	orrs	r3, r2
10000e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10000e7c:	69fb      	ldr	r3, [r7, #28]
10000e7e:	08da      	lsrs	r2, r3, #3
10000e80:	687b      	ldr	r3, [r7, #4]
10000e82:	3208      	adds	r2, #8
10000e84:	69b9      	ldr	r1, [r7, #24]
10000e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10000e8a:	687b      	ldr	r3, [r7, #4]
10000e8c:	681b      	ldr	r3, [r3, #0]
10000e8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10000e90:	69fb      	ldr	r3, [r7, #28]
10000e92:	005b      	lsls	r3, r3, #1
10000e94:	2203      	movs	r2, #3
10000e96:	fa02 f303 	lsl.w	r3, r2, r3
10000e9a:	43db      	mvns	r3, r3
10000e9c:	69ba      	ldr	r2, [r7, #24]
10000e9e:	4013      	ands	r3, r2
10000ea0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10000ea2:	683b      	ldr	r3, [r7, #0]
10000ea4:	685b      	ldr	r3, [r3, #4]
10000ea6:	f003 0203 	and.w	r2, r3, #3
10000eaa:	69fb      	ldr	r3, [r7, #28]
10000eac:	005b      	lsls	r3, r3, #1
10000eae:	fa02 f303 	lsl.w	r3, r2, r3
10000eb2:	69ba      	ldr	r2, [r7, #24]
10000eb4:	4313      	orrs	r3, r2
10000eb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10000eb8:	687b      	ldr	r3, [r7, #4]
10000eba:	69ba      	ldr	r2, [r7, #24]
10000ebc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000ebe:	683b      	ldr	r3, [r7, #0]
10000ec0:	685b      	ldr	r3, [r3, #4]
10000ec2:	2b01      	cmp	r3, #1
10000ec4:	d00b      	beq.n	10000ede <HAL_GPIO_Init+0xde>
10000ec6:	683b      	ldr	r3, [r7, #0]
10000ec8:	685b      	ldr	r3, [r3, #4]
10000eca:	2b02      	cmp	r3, #2
10000ecc:	d007      	beq.n	10000ede <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000ece:	683b      	ldr	r3, [r7, #0]
10000ed0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000ed2:	2b11      	cmp	r3, #17
10000ed4:	d003      	beq.n	10000ede <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000ed6:	683b      	ldr	r3, [r7, #0]
10000ed8:	685b      	ldr	r3, [r3, #4]
10000eda:	2b12      	cmp	r3, #18
10000edc:	d130      	bne.n	10000f40 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10000ede:	687b      	ldr	r3, [r7, #4]
10000ee0:	689b      	ldr	r3, [r3, #8]
10000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10000ee4:	69fb      	ldr	r3, [r7, #28]
10000ee6:	005b      	lsls	r3, r3, #1
10000ee8:	2203      	movs	r2, #3
10000eea:	fa02 f303 	lsl.w	r3, r2, r3
10000eee:	43db      	mvns	r3, r3
10000ef0:	69ba      	ldr	r2, [r7, #24]
10000ef2:	4013      	ands	r3, r2
10000ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10000ef6:	683b      	ldr	r3, [r7, #0]
10000ef8:	68da      	ldr	r2, [r3, #12]
10000efa:	69fb      	ldr	r3, [r7, #28]
10000efc:	005b      	lsls	r3, r3, #1
10000efe:	fa02 f303 	lsl.w	r3, r2, r3
10000f02:	69ba      	ldr	r2, [r7, #24]
10000f04:	4313      	orrs	r3, r2
10000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10000f08:	687b      	ldr	r3, [r7, #4]
10000f0a:	69ba      	ldr	r2, [r7, #24]
10000f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10000f0e:	687b      	ldr	r3, [r7, #4]
10000f10:	685b      	ldr	r3, [r3, #4]
10000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10000f14:	2201      	movs	r2, #1
10000f16:	69fb      	ldr	r3, [r7, #28]
10000f18:	fa02 f303 	lsl.w	r3, r2, r3
10000f1c:	43db      	mvns	r3, r3
10000f1e:	69ba      	ldr	r2, [r7, #24]
10000f20:	4013      	ands	r3, r2
10000f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10000f24:	683b      	ldr	r3, [r7, #0]
10000f26:	685b      	ldr	r3, [r3, #4]
10000f28:	091b      	lsrs	r3, r3, #4
10000f2a:	f003 0201 	and.w	r2, r3, #1
10000f2e:	69fb      	ldr	r3, [r7, #28]
10000f30:	fa02 f303 	lsl.w	r3, r2, r3
10000f34:	69ba      	ldr	r2, [r7, #24]
10000f36:	4313      	orrs	r3, r2
10000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10000f3a:	687b      	ldr	r3, [r7, #4]
10000f3c:	69ba      	ldr	r2, [r7, #24]
10000f3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10000f40:	687b      	ldr	r3, [r7, #4]
10000f42:	68db      	ldr	r3, [r3, #12]
10000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10000f46:	69fb      	ldr	r3, [r7, #28]
10000f48:	005b      	lsls	r3, r3, #1
10000f4a:	2203      	movs	r2, #3
10000f4c:	fa02 f303 	lsl.w	r3, r2, r3
10000f50:	43db      	mvns	r3, r3
10000f52:	69ba      	ldr	r2, [r7, #24]
10000f54:	4013      	ands	r3, r2
10000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10000f58:	683b      	ldr	r3, [r7, #0]
10000f5a:	689a      	ldr	r2, [r3, #8]
10000f5c:	69fb      	ldr	r3, [r7, #28]
10000f5e:	005b      	lsls	r3, r3, #1
10000f60:	fa02 f303 	lsl.w	r3, r2, r3
10000f64:	69ba      	ldr	r2, [r7, #24]
10000f66:	4313      	orrs	r3, r2
10000f68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10000f6a:	687b      	ldr	r3, [r7, #4]
10000f6c:	69ba      	ldr	r2, [r7, #24]
10000f6e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10000f70:	683b      	ldr	r3, [r7, #0]
10000f72:	685b      	ldr	r3, [r3, #4]
10000f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
10000f78:	2b00      	cmp	r3, #0
10000f7a:	f000 80da 	beq.w	10001132 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10000f7e:	4a2e      	ldr	r2, [pc, #184]	@ (10001038 <HAL_GPIO_Init+0x238>)
10000f80:	69fb      	ldr	r3, [r7, #28]
10000f82:	089b      	lsrs	r3, r3, #2
10000f84:	3318      	adds	r3, #24
10000f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10000f8c:	69fb      	ldr	r3, [r7, #28]
10000f8e:	f003 0303 	and.w	r3, r3, #3
10000f92:	00db      	lsls	r3, r3, #3
10000f94:	22ff      	movs	r2, #255	@ 0xff
10000f96:	fa02 f303 	lsl.w	r3, r2, r3
10000f9a:	43db      	mvns	r3, r3
10000f9c:	69ba      	ldr	r2, [r7, #24]
10000f9e:	4013      	ands	r3, r2
10000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10000fa2:	687b      	ldr	r3, [r7, #4]
10000fa4:	4a25      	ldr	r2, [pc, #148]	@ (1000103c <HAL_GPIO_Init+0x23c>)
10000fa6:	4293      	cmp	r3, r2
10000fa8:	d05e      	beq.n	10001068 <HAL_GPIO_Init+0x268>
10000faa:	687b      	ldr	r3, [r7, #4]
10000fac:	4a24      	ldr	r2, [pc, #144]	@ (10001040 <HAL_GPIO_Init+0x240>)
10000fae:	4293      	cmp	r3, r2
10000fb0:	d03d      	beq.n	1000102e <HAL_GPIO_Init+0x22e>
10000fb2:	687b      	ldr	r3, [r7, #4]
10000fb4:	4a23      	ldr	r2, [pc, #140]	@ (10001044 <HAL_GPIO_Init+0x244>)
10000fb6:	4293      	cmp	r3, r2
10000fb8:	d037      	beq.n	1000102a <HAL_GPIO_Init+0x22a>
10000fba:	687b      	ldr	r3, [r7, #4]
10000fbc:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
10000fc0:	d031      	beq.n	10001026 <HAL_GPIO_Init+0x226>
10000fc2:	687b      	ldr	r3, [r7, #4]
10000fc4:	4a20      	ldr	r2, [pc, #128]	@ (10001048 <HAL_GPIO_Init+0x248>)
10000fc6:	4293      	cmp	r3, r2
10000fc8:	d02b      	beq.n	10001022 <HAL_GPIO_Init+0x222>
10000fca:	687b      	ldr	r3, [r7, #4]
10000fcc:	4a1f      	ldr	r2, [pc, #124]	@ (1000104c <HAL_GPIO_Init+0x24c>)
10000fce:	4293      	cmp	r3, r2
10000fd0:	d025      	beq.n	1000101e <HAL_GPIO_Init+0x21e>
10000fd2:	687b      	ldr	r3, [r7, #4]
10000fd4:	4a1e      	ldr	r2, [pc, #120]	@ (10001050 <HAL_GPIO_Init+0x250>)
10000fd6:	4293      	cmp	r3, r2
10000fd8:	d01f      	beq.n	1000101a <HAL_GPIO_Init+0x21a>
10000fda:	687b      	ldr	r3, [r7, #4]
10000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (10001054 <HAL_GPIO_Init+0x254>)
10000fde:	4293      	cmp	r3, r2
10000fe0:	d019      	beq.n	10001016 <HAL_GPIO_Init+0x216>
10000fe2:	687b      	ldr	r3, [r7, #4]
10000fe4:	4a1c      	ldr	r2, [pc, #112]	@ (10001058 <HAL_GPIO_Init+0x258>)
10000fe6:	4293      	cmp	r3, r2
10000fe8:	d013      	beq.n	10001012 <HAL_GPIO_Init+0x212>
10000fea:	687b      	ldr	r3, [r7, #4]
10000fec:	4a1b      	ldr	r2, [pc, #108]	@ (1000105c <HAL_GPIO_Init+0x25c>)
10000fee:	4293      	cmp	r3, r2
10000ff0:	d00d      	beq.n	1000100e <HAL_GPIO_Init+0x20e>
10000ff2:	687b      	ldr	r3, [r7, #4]
10000ff4:	4a1a      	ldr	r2, [pc, #104]	@ (10001060 <HAL_GPIO_Init+0x260>)
10000ff6:	4293      	cmp	r3, r2
10000ff8:	d007      	beq.n	1000100a <HAL_GPIO_Init+0x20a>
10000ffa:	687b      	ldr	r3, [r7, #4]
10000ffc:	4a19      	ldr	r2, [pc, #100]	@ (10001064 <HAL_GPIO_Init+0x264>)
10000ffe:	4293      	cmp	r3, r2
10001000:	d101      	bne.n	10001006 <HAL_GPIO_Init+0x206>
10001002:	230b      	movs	r3, #11
10001004:	e031      	b.n	1000106a <HAL_GPIO_Init+0x26a>
10001006:	2319      	movs	r3, #25
10001008:	e02f      	b.n	1000106a <HAL_GPIO_Init+0x26a>
1000100a:	230a      	movs	r3, #10
1000100c:	e02d      	b.n	1000106a <HAL_GPIO_Init+0x26a>
1000100e:	2309      	movs	r3, #9
10001010:	e02b      	b.n	1000106a <HAL_GPIO_Init+0x26a>
10001012:	2308      	movs	r3, #8
10001014:	e029      	b.n	1000106a <HAL_GPIO_Init+0x26a>
10001016:	2307      	movs	r3, #7
10001018:	e027      	b.n	1000106a <HAL_GPIO_Init+0x26a>
1000101a:	2306      	movs	r3, #6
1000101c:	e025      	b.n	1000106a <HAL_GPIO_Init+0x26a>
1000101e:	2305      	movs	r3, #5
10001020:	e023      	b.n	1000106a <HAL_GPIO_Init+0x26a>
10001022:	2304      	movs	r3, #4
10001024:	e021      	b.n	1000106a <HAL_GPIO_Init+0x26a>
10001026:	2303      	movs	r3, #3
10001028:	e01f      	b.n	1000106a <HAL_GPIO_Init+0x26a>
1000102a:	2302      	movs	r3, #2
1000102c:	e01d      	b.n	1000106a <HAL_GPIO_Init+0x26a>
1000102e:	2301      	movs	r3, #1
10001030:	e01b      	b.n	1000106a <HAL_GPIO_Init+0x26a>
10001032:	bf00      	nop
10001034:	5000d0c0 	.word	0x5000d0c0
10001038:	5000d000 	.word	0x5000d000
1000103c:	50002000 	.word	0x50002000
10001040:	50003000 	.word	0x50003000
10001044:	50004000 	.word	0x50004000
10001048:	50006000 	.word	0x50006000
1000104c:	50007000 	.word	0x50007000
10001050:	50008000 	.word	0x50008000
10001054:	50009000 	.word	0x50009000
10001058:	5000a000 	.word	0x5000a000
1000105c:	5000b000 	.word	0x5000b000
10001060:	5000c000 	.word	0x5000c000
10001064:	54004000 	.word	0x54004000
10001068:	2300      	movs	r3, #0
1000106a:	69fa      	ldr	r2, [r7, #28]
1000106c:	f002 0203 	and.w	r2, r2, #3
10001070:	00d2      	lsls	r2, r2, #3
10001072:	4093      	lsls	r3, r2
10001074:	461a      	mov	r2, r3
10001076:	69bb      	ldr	r3, [r7, #24]
10001078:	4313      	orrs	r3, r2
1000107a:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
1000107c:	4934      	ldr	r1, [pc, #208]	@ (10001150 <HAL_GPIO_Init+0x350>)
1000107e:	69fb      	ldr	r3, [r7, #28]
10001080:	089b      	lsrs	r3, r3, #2
10001082:	3318      	adds	r3, #24
10001084:	69ba      	ldr	r2, [r7, #24]
10001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
1000108a:	697b      	ldr	r3, [r7, #20]
1000108c:	681b      	ldr	r3, [r3, #0]
1000108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001090:	68fb      	ldr	r3, [r7, #12]
10001092:	43db      	mvns	r3, r3
10001094:	69ba      	ldr	r2, [r7, #24]
10001096:	4013      	ands	r3, r2
10001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
1000109a:	683b      	ldr	r3, [r7, #0]
1000109c:	685b      	ldr	r3, [r3, #4]
1000109e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
100010a2:	2b00      	cmp	r3, #0
100010a4:	d003      	beq.n	100010ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
100010a6:	69ba      	ldr	r2, [r7, #24]
100010a8:	68fb      	ldr	r3, [r7, #12]
100010aa:	4313      	orrs	r3, r2
100010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
100010ae:	697b      	ldr	r3, [r7, #20]
100010b0:	69ba      	ldr	r2, [r7, #24]
100010b2:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
100010b4:	697b      	ldr	r3, [r7, #20]
100010b6:	685b      	ldr	r3, [r3, #4]
100010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100010ba:	68fb      	ldr	r3, [r7, #12]
100010bc:	43db      	mvns	r3, r3
100010be:	69ba      	ldr	r2, [r7, #24]
100010c0:	4013      	ands	r3, r2
100010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
100010c4:	683b      	ldr	r3, [r7, #0]
100010c6:	685b      	ldr	r3, [r3, #4]
100010c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
100010cc:	2b00      	cmp	r3, #0
100010ce:	d003      	beq.n	100010d8 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
100010d0:	69ba      	ldr	r2, [r7, #24]
100010d2:	68fb      	ldr	r3, [r7, #12]
100010d4:	4313      	orrs	r3, r2
100010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
100010d8:	697b      	ldr	r3, [r7, #20]
100010da:	69ba      	ldr	r2, [r7, #24]
100010dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
100010de:	4b1c      	ldr	r3, [pc, #112]	@ (10001150 <HAL_GPIO_Init+0x350>)
100010e0:	681b      	ldr	r3, [r3, #0]
100010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100010e4:	68fb      	ldr	r3, [r7, #12]
100010e6:	43db      	mvns	r3, r3
100010e8:	69ba      	ldr	r2, [r7, #24]
100010ea:	4013      	ands	r3, r2
100010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
100010ee:	683b      	ldr	r3, [r7, #0]
100010f0:	685b      	ldr	r3, [r3, #4]
100010f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
100010f6:	2b00      	cmp	r3, #0
100010f8:	d003      	beq.n	10001102 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
100010fa:	69ba      	ldr	r2, [r7, #24]
100010fc:	68fb      	ldr	r3, [r7, #12]
100010fe:	4313      	orrs	r3, r2
10001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10001102:	4a13      	ldr	r2, [pc, #76]	@ (10001150 <HAL_GPIO_Init+0x350>)
10001104:	69bb      	ldr	r3, [r7, #24]
10001106:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10001108:	4b11      	ldr	r3, [pc, #68]	@ (10001150 <HAL_GPIO_Init+0x350>)
1000110a:	685b      	ldr	r3, [r3, #4]
1000110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000110e:	68fb      	ldr	r3, [r7, #12]
10001110:	43db      	mvns	r3, r3
10001112:	69ba      	ldr	r2, [r7, #24]
10001114:	4013      	ands	r3, r2
10001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10001118:	683b      	ldr	r3, [r7, #0]
1000111a:	685b      	ldr	r3, [r3, #4]
1000111c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
10001120:	2b00      	cmp	r3, #0
10001122:	d003      	beq.n	1000112c <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10001124:	69ba      	ldr	r2, [r7, #24]
10001126:	68fb      	ldr	r3, [r7, #12]
10001128:	4313      	orrs	r3, r2
1000112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
1000112c:	4a08      	ldr	r2, [pc, #32]	@ (10001150 <HAL_GPIO_Init+0x350>)
1000112e:	69bb      	ldr	r3, [r7, #24]
10001130:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10001132:	69fb      	ldr	r3, [r7, #28]
10001134:	3301      	adds	r3, #1
10001136:	61fb      	str	r3, [r7, #28]
10001138:	69fb      	ldr	r3, [r7, #28]
1000113a:	2b0f      	cmp	r3, #15
1000113c:	f67f ae6a 	bls.w	10000e14 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10001140:	bf00      	nop
10001142:	bf00      	nop
10001144:	3724      	adds	r7, #36	@ 0x24
10001146:	46bd      	mov	sp, r7
10001148:	f85d 7b04 	ldr.w	r7, [sp], #4
1000114c:	4770      	bx	lr
1000114e:	bf00      	nop
10001150:	5000d000 	.word	0x5000d000

10001154 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10001154:	b580      	push	{r7, lr}
10001156:	b084      	sub	sp, #16
10001158:	af00      	add	r7, sp, #0
1000115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
1000115c:	2300      	movs	r3, #0
1000115e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10001160:	687b      	ldr	r3, [r7, #4]
10001162:	2b00      	cmp	r3, #0
10001164:	d01e      	beq.n	100011a4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001166:	4b13      	ldr	r3, [pc, #76]	@ (100011b4 <HAL_IPCC_Init+0x60>)
10001168:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
1000116a:	687b      	ldr	r3, [r7, #4]
1000116c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10001170:	b2db      	uxtb	r3, r3
10001172:	2b00      	cmp	r3, #0
10001174:	d102      	bne.n	1000117c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10001176:	6878      	ldr	r0, [r7, #4]
10001178:	f7ff fad6 	bl	10000728 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
1000117c:	68b8      	ldr	r0, [r7, #8]
1000117e:	f000 f9eb 	bl	10001558 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10001182:	68bb      	ldr	r3, [r7, #8]
10001184:	681b      	ldr	r3, [r3, #0]
10001186:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
1000118a:	68bb      	ldr	r3, [r7, #8]
1000118c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
1000118e:	6878      	ldr	r0, [r7, #4]
10001190:	f000 f9bc 	bl	1000150c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10001194:	687b      	ldr	r3, [r7, #4]
10001196:	2200      	movs	r2, #0
10001198:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
1000119a:	687b      	ldr	r3, [r7, #4]
1000119c:	2201      	movs	r2, #1
1000119e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
100011a2:	e001      	b.n	100011a8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
100011a4:	2301      	movs	r3, #1
100011a6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
100011a8:	7bfb      	ldrb	r3, [r7, #15]
}
100011aa:	4618      	mov	r0, r3
100011ac:	3710      	adds	r7, #16
100011ae:	46bd      	mov	sp, r7
100011b0:	bd80      	pop	{r7, pc}
100011b2:	bf00      	nop
100011b4:	4c001010 	.word	0x4c001010

100011b8 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
100011b8:	b580      	push	{r7, lr}
100011ba:	b086      	sub	sp, #24
100011bc:	af00      	add	r7, sp, #0
100011be:	60f8      	str	r0, [r7, #12]
100011c0:	60b9      	str	r1, [r7, #8]
100011c2:	603b      	str	r3, [r7, #0]
100011c4:	4613      	mov	r3, r2
100011c6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
100011c8:	2300      	movs	r3, #0
100011ca:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
100011cc:	68fb      	ldr	r3, [r7, #12]
100011ce:	2b00      	cmp	r3, #0
100011d0:	d039      	beq.n	10001246 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
100011d2:	68fb      	ldr	r3, [r7, #12]
100011d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
100011d8:	b2db      	uxtb	r3, r3
100011da:	2b01      	cmp	r3, #1
100011dc:	d130      	bne.n	10001240 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100011de:	79fb      	ldrb	r3, [r7, #7]
100011e0:	2b00      	cmp	r3, #0
100011e2:	d113      	bne.n	1000120c <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
100011e4:	68fa      	ldr	r2, [r7, #12]
100011e6:	68bb      	ldr	r3, [r7, #8]
100011e8:	3306      	adds	r3, #6
100011ea:	009b      	lsls	r3, r3, #2
100011ec:	4413      	add	r3, r2
100011ee:	683a      	ldr	r2, [r7, #0]
100011f0:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100011f2:	68fb      	ldr	r3, [r7, #12]
100011f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100011f6:	68bb      	ldr	r3, [r7, #8]
100011f8:	f003 030f 	and.w	r3, r3, #15
100011fc:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10001200:	fa01 f303 	lsl.w	r3, r1, r3
10001204:	431a      	orrs	r2, r3
10001206:	68fb      	ldr	r3, [r7, #12]
10001208:	635a      	str	r2, [r3, #52]	@ 0x34
1000120a:	e010      	b.n	1000122e <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
1000120c:	68fa      	ldr	r2, [r7, #12]
1000120e:	68bb      	ldr	r3, [r7, #8]
10001210:	009b      	lsls	r3, r3, #2
10001212:	4413      	add	r3, r2
10001214:	683a      	ldr	r2, [r7, #0]
10001216:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001218:	68fb      	ldr	r3, [r7, #12]
1000121a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1000121c:	68bb      	ldr	r3, [r7, #8]
1000121e:	f003 030f 	and.w	r3, r3, #15
10001222:	2101      	movs	r1, #1
10001224:	fa01 f303 	lsl.w	r3, r1, r3
10001228:	431a      	orrs	r2, r3
1000122a:	68fb      	ldr	r3, [r7, #12]
1000122c:	635a      	str	r2, [r3, #52]	@ 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
1000122e:	79fb      	ldrb	r3, [r7, #7]
10001230:	2b01      	cmp	r3, #1
10001232:	d10a      	bne.n	1000124a <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10001234:	79fb      	ldrb	r3, [r7, #7]
10001236:	4619      	mov	r1, r3
10001238:	68b8      	ldr	r0, [r7, #8]
1000123a:	f000 f939 	bl	100014b0 <IPCC_UnmaskInterrupt>
1000123e:	e004      	b.n	1000124a <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10001240:	2301      	movs	r3, #1
10001242:	75fb      	strb	r3, [r7, #23]
10001244:	e001      	b.n	1000124a <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10001246:	2301      	movs	r3, #1
10001248:	75fb      	strb	r3, [r7, #23]
  }
  return err;
1000124a:	7dfb      	ldrb	r3, [r7, #23]
}
1000124c:	4618      	mov	r0, r3
1000124e:	3718      	adds	r7, #24
10001250:	46bd      	mov	sp, r7
10001252:	bd80      	pop	{r7, pc}

10001254 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001254:	b480      	push	{r7}
10001256:	b089      	sub	sp, #36	@ 0x24
10001258:	af00      	add	r7, sp, #0
1000125a:	60f8      	str	r0, [r7, #12]
1000125c:	60b9      	str	r1, [r7, #8]
1000125e:	4613      	mov	r3, r2
10001260:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001262:	4b14      	ldr	r3, [pc, #80]	@ (100012b4 <HAL_IPCC_GetChannelStatus+0x60>)
10001264:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10001266:	4b14      	ldr	r3, [pc, #80]	@ (100012b8 <HAL_IPCC_GetChannelStatus+0x64>)
10001268:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000126a:	79fb      	ldrb	r3, [r7, #7]
1000126c:	2b00      	cmp	r3, #0
1000126e:	d10a      	bne.n	10001286 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001270:	69bb      	ldr	r3, [r7, #24]
10001272:	68da      	ldr	r2, [r3, #12]
10001274:	68bb      	ldr	r3, [r7, #8]
10001276:	f003 030f 	and.w	r3, r3, #15
1000127a:	2101      	movs	r1, #1
1000127c:	fa01 f303 	lsl.w	r3, r1, r3
10001280:	4013      	ands	r3, r2
10001282:	61fb      	str	r3, [r7, #28]
10001284:	e009      	b.n	1000129a <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10001286:	697b      	ldr	r3, [r7, #20]
10001288:	68da      	ldr	r2, [r3, #12]
1000128a:	68bb      	ldr	r3, [r7, #8]
1000128c:	f003 030f 	and.w	r3, r3, #15
10001290:	2101      	movs	r1, #1
10001292:	fa01 f303 	lsl.w	r3, r1, r3
10001296:	4013      	ands	r3, r2
10001298:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
1000129a:	69fb      	ldr	r3, [r7, #28]
1000129c:	2b00      	cmp	r3, #0
1000129e:	bf14      	ite	ne
100012a0:	2301      	movne	r3, #1
100012a2:	2300      	moveq	r3, #0
100012a4:	b2db      	uxtb	r3, r3
}
100012a6:	4618      	mov	r0, r3
100012a8:	3724      	adds	r7, #36	@ 0x24
100012aa:	46bd      	mov	sp, r7
100012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
100012b0:	4770      	bx	lr
100012b2:	bf00      	nop
100012b4:	4c001010 	.word	0x4c001010
100012b8:	4c001000 	.word	0x4c001000

100012bc <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100012bc:	b580      	push	{r7, lr}
100012be:	b088      	sub	sp, #32
100012c0:	af00      	add	r7, sp, #0
100012c2:	60f8      	str	r0, [r7, #12]
100012c4:	60b9      	str	r1, [r7, #8]
100012c6:	4613      	mov	r3, r2
100012c8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
100012ca:	2300      	movs	r3, #0
100012cc:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100012ce:	4b1d      	ldr	r3, [pc, #116]	@ (10001344 <HAL_IPCC_NotifyCPU+0x88>)
100012d0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
100012d2:	68fb      	ldr	r3, [r7, #12]
100012d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
100012d8:	b2db      	uxtb	r3, r3
100012da:	2b01      	cmp	r3, #1
100012dc:	d12a      	bne.n	10001334 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
100012de:	69bb      	ldr	r3, [r7, #24]
100012e0:	689a      	ldr	r2, [r3, #8]
100012e2:	79fb      	ldrb	r3, [r7, #7]
100012e4:	2b00      	cmp	r3, #0
100012e6:	d102      	bne.n	100012ee <HAL_IPCC_NotifyCPU+0x32>
100012e8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
100012ec:	e000      	b.n	100012f0 <HAL_IPCC_NotifyCPU+0x34>
100012ee:	2101      	movs	r1, #1
100012f0:	68bb      	ldr	r3, [r7, #8]
100012f2:	f003 030f 	and.w	r3, r3, #15
100012f6:	fa01 f303 	lsl.w	r3, r1, r3
100012fa:	431a      	orrs	r2, r3
100012fc:	69bb      	ldr	r3, [r7, #24]
100012fe:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10001300:	79fb      	ldrb	r3, [r7, #7]
10001302:	2b00      	cmp	r3, #0
10001304:	d102      	bne.n	1000130c <HAL_IPCC_NotifyCPU+0x50>
10001306:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
1000130a:	e000      	b.n	1000130e <HAL_IPCC_NotifyCPU+0x52>
1000130c:	2201      	movs	r2, #1
1000130e:	68bb      	ldr	r3, [r7, #8]
10001310:	f003 030f 	and.w	r3, r3, #15
10001314:	fa02 f303 	lsl.w	r3, r2, r3
10001318:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
1000131a:	68fb      	ldr	r3, [r7, #12]
1000131c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1000131e:	697b      	ldr	r3, [r7, #20]
10001320:	4013      	ands	r3, r2
10001322:	697a      	ldr	r2, [r7, #20]
10001324:	429a      	cmp	r2, r3
10001326:	d107      	bne.n	10001338 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10001328:	79fb      	ldrb	r3, [r7, #7]
1000132a:	4619      	mov	r1, r3
1000132c:	68b8      	ldr	r0, [r7, #8]
1000132e:	f000 f8bf 	bl	100014b0 <IPCC_UnmaskInterrupt>
10001332:	e001      	b.n	10001338 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10001334:	2301      	movs	r3, #1
10001336:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10001338:	7ffb      	ldrb	r3, [r7, #31]
}
1000133a:	4618      	mov	r0, r3
1000133c:	3720      	adds	r7, #32
1000133e:	46bd      	mov	sp, r7
10001340:	bd80      	pop	{r7, pc}
10001342:	bf00      	nop
10001344:	4c001010 	.word	0x4c001010

10001348 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10001348:	b580      	push	{r7, lr}
1000134a:	b086      	sub	sp, #24
1000134c:	af00      	add	r7, sp, #0
1000134e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10001350:	2300      	movs	r3, #0
10001352:	613b      	str	r3, [r7, #16]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10001354:	4b22      	ldr	r3, [pc, #136]	@ (100013e0 <HAL_IPCC_TX_IRQHandler+0x98>)
10001356:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
10001358:	68fb      	ldr	r3, [r7, #12]
1000135a:	685b      	ldr	r3, [r3, #4]
1000135c:	43db      	mvns	r3, r3
1000135e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
10001362:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
10001364:	68fb      	ldr	r3, [r7, #12]
10001366:	68db      	ldr	r3, [r3, #12]
10001368:	041b      	lsls	r3, r3, #16
1000136a:	43db      	mvns	r3, r3
1000136c:	697a      	ldr	r2, [r7, #20]
1000136e:	4013      	ands	r3, r2
10001370:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001372:	e02c      	b.n	100013ce <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
10001374:	693b      	ldr	r3, [r7, #16]
10001376:	f003 030f 	and.w	r3, r3, #15
1000137a:	3310      	adds	r3, #16
1000137c:	2201      	movs	r2, #1
1000137e:	fa02 f303 	lsl.w	r3, r2, r3
10001382:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
10001384:	697a      	ldr	r2, [r7, #20]
10001386:	68bb      	ldr	r3, [r7, #8]
10001388:	4013      	ands	r3, r2
1000138a:	2b00      	cmp	r3, #0
1000138c:	d01c      	beq.n	100013c8 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
1000138e:	68fb      	ldr	r3, [r7, #12]
10001390:	685a      	ldr	r2, [r3, #4]
10001392:	68bb      	ldr	r3, [r7, #8]
10001394:	431a      	orrs	r2, r3
10001396:	68fb      	ldr	r3, [r7, #12]
10001398:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
1000139a:	687a      	ldr	r2, [r7, #4]
1000139c:	693b      	ldr	r3, [r7, #16]
1000139e:	3306      	adds	r3, #6
100013a0:	009b      	lsls	r3, r3, #2
100013a2:	4413      	add	r3, r2
100013a4:	685b      	ldr	r3, [r3, #4]
100013a6:	2b00      	cmp	r3, #0
100013a8:	d009      	beq.n	100013be <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
100013aa:	687a      	ldr	r2, [r7, #4]
100013ac:	693b      	ldr	r3, [r7, #16]
100013ae:	3306      	adds	r3, #6
100013b0:	009b      	lsls	r3, r3, #2
100013b2:	4413      	add	r3, r2
100013b4:	685b      	ldr	r3, [r3, #4]
100013b6:	2200      	movs	r2, #0
100013b8:	6939      	ldr	r1, [r7, #16]
100013ba:	6878      	ldr	r0, [r7, #4]
100013bc:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
100013be:	68bb      	ldr	r3, [r7, #8]
100013c0:	43db      	mvns	r3, r3
100013c2:	697a      	ldr	r2, [r7, #20]
100013c4:	4013      	ands	r3, r2
100013c6:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
100013c8:	693b      	ldr	r3, [r7, #16]
100013ca:	3301      	adds	r3, #1
100013cc:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
100013ce:	697b      	ldr	r3, [r7, #20]
100013d0:	2b00      	cmp	r3, #0
100013d2:	d1cf      	bne.n	10001374 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
100013d4:	bf00      	nop
100013d6:	bf00      	nop
100013d8:	3718      	adds	r7, #24
100013da:	46bd      	mov	sp, r7
100013dc:	bd80      	pop	{r7, pc}
100013de:	bf00      	nop
100013e0:	4c001010 	.word	0x4c001010

100013e4 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
100013e4:	b580      	push	{r7, lr}
100013e6:	b088      	sub	sp, #32
100013e8:	af00      	add	r7, sp, #0
100013ea:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
100013ec:	2300      	movs	r3, #0
100013ee:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100013f0:	4b20      	ldr	r3, [pc, #128]	@ (10001474 <HAL_IPCC_RX_IRQHandler+0x90>)
100013f2:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
100013f4:	4b20      	ldr	r3, [pc, #128]	@ (10001478 <HAL_IPCC_RX_IRQHandler+0x94>)
100013f6:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
100013f8:	697b      	ldr	r3, [r7, #20]
100013fa:	685b      	ldr	r3, [r3, #4]
100013fc:	43db      	mvns	r3, r3
100013fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10001402:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10001404:	693b      	ldr	r3, [r7, #16]
10001406:	68db      	ldr	r3, [r3, #12]
10001408:	69fa      	ldr	r2, [r7, #28]
1000140a:	4013      	ands	r3, r2
1000140c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
1000140e:	e029      	b.n	10001464 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10001410:	69bb      	ldr	r3, [r7, #24]
10001412:	f003 030f 	and.w	r3, r3, #15
10001416:	2201      	movs	r2, #1
10001418:	fa02 f303 	lsl.w	r3, r2, r3
1000141c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
1000141e:	69fa      	ldr	r2, [r7, #28]
10001420:	68fb      	ldr	r3, [r7, #12]
10001422:	4013      	ands	r3, r2
10001424:	2b00      	cmp	r3, #0
10001426:	d01a      	beq.n	1000145e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10001428:	697b      	ldr	r3, [r7, #20]
1000142a:	685a      	ldr	r2, [r3, #4]
1000142c:	68fb      	ldr	r3, [r7, #12]
1000142e:	431a      	orrs	r2, r3
10001430:	697b      	ldr	r3, [r7, #20]
10001432:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10001434:	687a      	ldr	r2, [r7, #4]
10001436:	69bb      	ldr	r3, [r7, #24]
10001438:	009b      	lsls	r3, r3, #2
1000143a:	4413      	add	r3, r2
1000143c:	685b      	ldr	r3, [r3, #4]
1000143e:	2b00      	cmp	r3, #0
10001440:	d008      	beq.n	10001454 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10001442:	687a      	ldr	r2, [r7, #4]
10001444:	69bb      	ldr	r3, [r7, #24]
10001446:	009b      	lsls	r3, r3, #2
10001448:	4413      	add	r3, r2
1000144a:	685b      	ldr	r3, [r3, #4]
1000144c:	2201      	movs	r2, #1
1000144e:	69b9      	ldr	r1, [r7, #24]
10001450:	6878      	ldr	r0, [r7, #4]
10001452:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10001454:	68fb      	ldr	r3, [r7, #12]
10001456:	43db      	mvns	r3, r3
10001458:	69fa      	ldr	r2, [r7, #28]
1000145a:	4013      	ands	r3, r2
1000145c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
1000145e:	69bb      	ldr	r3, [r7, #24]
10001460:	3301      	adds	r3, #1
10001462:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10001464:	69fb      	ldr	r3, [r7, #28]
10001466:	2b00      	cmp	r3, #0
10001468:	d1d2      	bne.n	10001410 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
1000146a:	bf00      	nop
1000146c:	bf00      	nop
1000146e:	3720      	adds	r7, #32
10001470:	46bd      	mov	sp, r7
10001472:	bd80      	pop	{r7, pc}
10001474:	4c001010 	.word	0x4c001010
10001478:	4c001000 	.word	0x4c001000

1000147c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000147c:	b480      	push	{r7}
1000147e:	b085      	sub	sp, #20
10001480:	af00      	add	r7, sp, #0
10001482:	60f8      	str	r0, [r7, #12]
10001484:	60b9      	str	r1, [r7, #8]
10001486:	4613      	mov	r3, r2
10001488:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
1000148a:	bf00      	nop
1000148c:	3714      	adds	r7, #20
1000148e:	46bd      	mov	sp, r7
10001490:	f85d 7b04 	ldr.w	r7, [sp], #4
10001494:	4770      	bx	lr

10001496 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001496:	b480      	push	{r7}
10001498:	b085      	sub	sp, #20
1000149a:	af00      	add	r7, sp, #0
1000149c:	60f8      	str	r0, [r7, #12]
1000149e:	60b9      	str	r1, [r7, #8]
100014a0:	4613      	mov	r3, r2
100014a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
100014a4:	bf00      	nop
100014a6:	3714      	adds	r7, #20
100014a8:	46bd      	mov	sp, r7
100014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100014ae:	4770      	bx	lr

100014b0 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100014b0:	b480      	push	{r7}
100014b2:	b085      	sub	sp, #20
100014b4:	af00      	add	r7, sp, #0
100014b6:	6078      	str	r0, [r7, #4]
100014b8:	460b      	mov	r3, r1
100014ba:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100014bc:	4b12      	ldr	r3, [pc, #72]	@ (10001508 <IPCC_UnmaskInterrupt+0x58>)
100014be:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100014c0:	78fb      	ldrb	r3, [r7, #3]
100014c2:	2b00      	cmp	r3, #0
100014c4:	d10d      	bne.n	100014e2 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100014c6:	68fb      	ldr	r3, [r7, #12]
100014c8:	685a      	ldr	r2, [r3, #4]
100014ca:	687b      	ldr	r3, [r7, #4]
100014cc:	f003 030f 	and.w	r3, r3, #15
100014d0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
100014d4:	fa01 f303 	lsl.w	r3, r1, r3
100014d8:	43db      	mvns	r3, r3
100014da:	401a      	ands	r2, r3
100014dc:	68fb      	ldr	r3, [r7, #12]
100014de:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
100014e0:	e00b      	b.n	100014fa <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100014e2:	68fb      	ldr	r3, [r7, #12]
100014e4:	685a      	ldr	r2, [r3, #4]
100014e6:	687b      	ldr	r3, [r7, #4]
100014e8:	f003 030f 	and.w	r3, r3, #15
100014ec:	2101      	movs	r1, #1
100014ee:	fa01 f303 	lsl.w	r3, r1, r3
100014f2:	43db      	mvns	r3, r3
100014f4:	401a      	ands	r2, r3
100014f6:	68fb      	ldr	r3, [r7, #12]
100014f8:	605a      	str	r2, [r3, #4]
}
100014fa:	bf00      	nop
100014fc:	3714      	adds	r7, #20
100014fe:	46bd      	mov	sp, r7
10001500:	f85d 7b04 	ldr.w	r7, [sp], #4
10001504:	4770      	bx	lr
10001506:	bf00      	nop
10001508:	4c001010 	.word	0x4c001010

1000150c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
1000150c:	b480      	push	{r7}
1000150e:	b085      	sub	sp, #20
10001510:	af00      	add	r7, sp, #0
10001512:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10001514:	2300      	movs	r3, #0
10001516:	60fb      	str	r3, [r7, #12]
10001518:	e00f      	b.n	1000153a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
1000151a:	687a      	ldr	r2, [r7, #4]
1000151c:	68fb      	ldr	r3, [r7, #12]
1000151e:	009b      	lsls	r3, r3, #2
10001520:	4413      	add	r3, r2
10001522:	4a0b      	ldr	r2, [pc, #44]	@ (10001550 <IPCC_SetDefaultCallbacks+0x44>)
10001524:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10001526:	687a      	ldr	r2, [r7, #4]
10001528:	68fb      	ldr	r3, [r7, #12]
1000152a:	3306      	adds	r3, #6
1000152c:	009b      	lsls	r3, r3, #2
1000152e:	4413      	add	r3, r2
10001530:	4a08      	ldr	r2, [pc, #32]	@ (10001554 <IPCC_SetDefaultCallbacks+0x48>)
10001532:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10001534:	68fb      	ldr	r3, [r7, #12]
10001536:	3301      	adds	r3, #1
10001538:	60fb      	str	r3, [r7, #12]
1000153a:	68fb      	ldr	r3, [r7, #12]
1000153c:	2b05      	cmp	r3, #5
1000153e:	d9ec      	bls.n	1000151a <IPCC_SetDefaultCallbacks+0xe>
  }
}
10001540:	bf00      	nop
10001542:	bf00      	nop
10001544:	3714      	adds	r7, #20
10001546:	46bd      	mov	sp, r7
10001548:	f85d 7b04 	ldr.w	r7, [sp], #4
1000154c:	4770      	bx	lr
1000154e:	bf00      	nop
10001550:	1000147d 	.word	0x1000147d
10001554:	10001497 	.word	0x10001497

10001558 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10001558:	b480      	push	{r7}
1000155a:	b083      	sub	sp, #12
1000155c:	af00      	add	r7, sp, #0
1000155e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10001560:	687b      	ldr	r3, [r7, #4]
10001562:	2200      	movs	r2, #0
10001564:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10001566:	687b      	ldr	r3, [r7, #4]
10001568:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
1000156c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
1000156e:	687b      	ldr	r3, [r7, #4]
10001570:	223f      	movs	r2, #63	@ 0x3f
10001572:	609a      	str	r2, [r3, #8]
}
10001574:	bf00      	nop
10001576:	370c      	adds	r7, #12
10001578:	46bd      	mov	sp, r7
1000157a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000157e:	4770      	bx	lr

10001580 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10001580:	b480      	push	{r7}
10001582:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10001584:	4b05      	ldr	r3, [pc, #20]	@ (1000159c <HAL_PWR_EnableBkUpAccess+0x1c>)
10001586:	681b      	ldr	r3, [r3, #0]
10001588:	4a04      	ldr	r2, [pc, #16]	@ (1000159c <HAL_PWR_EnableBkUpAccess+0x1c>)
1000158a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000158e:	6013      	str	r3, [r2, #0]
}
10001590:	bf00      	nop
10001592:	46bd      	mov	sp, r7
10001594:	f85d 7b04 	ldr.w	r7, [sp], #4
10001598:	4770      	bx	lr
1000159a:	bf00      	nop
1000159c:	50001000 	.word	0x50001000

100015a0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100015a0:	b580      	push	{r7, lr}
100015a2:	b084      	sub	sp, #16
100015a4:	af00      	add	r7, sp, #0
100015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
100015a8:	2300      	movs	r3, #0
100015aa:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100015ac:	687b      	ldr	r3, [r7, #4]
100015ae:	2b00      	cmp	r3, #0
100015b0:	d101      	bne.n	100015b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
100015b2:	2301      	movs	r3, #1
100015b4:	e320      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100015b6:	687b      	ldr	r3, [r7, #4]
100015b8:	681b      	ldr	r3, [r3, #0]
100015ba:	f003 0301 	and.w	r3, r3, #1
100015be:	2b00      	cmp	r3, #0
100015c0:	f000 8081 	beq.w	100016c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
100015c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015c8:	6a1b      	ldr	r3, [r3, #32]
100015ca:	f003 0303 	and.w	r3, r3, #3
100015ce:	2b01      	cmp	r3, #1
100015d0:	d107      	bne.n	100015e2 <HAL_RCC_OscConfig+0x42>
100015d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015d6:	6a1b      	ldr	r3, [r3, #32]
100015d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100015dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100015e0:	d054      	beq.n	1000168c <HAL_RCC_OscConfig+0xec>
100015e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100015e8:	f003 0307 	and.w	r3, r3, #7
100015ec:	2b01      	cmp	r3, #1
100015ee:	d107      	bne.n	10001600 <HAL_RCC_OscConfig+0x60>
100015f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100015f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100015fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100015fe:	d045      	beq.n	1000168c <HAL_RCC_OscConfig+0xec>
10001600:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001606:	f003 0303 	and.w	r3, r3, #3
1000160a:	2b01      	cmp	r3, #1
1000160c:	d107      	bne.n	1000161e <HAL_RCC_OscConfig+0x7e>
1000160e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001614:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000161c:	d036      	beq.n	1000168c <HAL_RCC_OscConfig+0xec>
1000161e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001624:	f003 0303 	and.w	r3, r3, #3
10001628:	2b01      	cmp	r3, #1
1000162a:	d10f      	bne.n	1000164c <HAL_RCC_OscConfig+0xac>
1000162c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001634:	f003 0302 	and.w	r3, r3, #2
10001638:	2b02      	cmp	r3, #2
1000163a:	d027      	beq.n	1000168c <HAL_RCC_OscConfig+0xec>
1000163c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001644:	f003 0302 	and.w	r3, r3, #2
10001648:	2b02      	cmp	r3, #2
1000164a:	d01f      	beq.n	1000168c <HAL_RCC_OscConfig+0xec>
1000164c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001650:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001654:	f003 0303 	and.w	r3, r3, #3
10001658:	2b01      	cmp	r3, #1
1000165a:	d107      	bne.n	1000166c <HAL_RCC_OscConfig+0xcc>
1000165c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001660:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001664:	f003 0302 	and.w	r3, r3, #2
10001668:	2b02      	cmp	r3, #2
1000166a:	d00f      	beq.n	1000168c <HAL_RCC_OscConfig+0xec>
1000166c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001670:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001674:	f003 0303 	and.w	r3, r3, #3
10001678:	2b01      	cmp	r3, #1
1000167a:	d117      	bne.n	100016ac <HAL_RCC_OscConfig+0x10c>
1000167c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001680:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001684:	f003 0302 	and.w	r3, r3, #2
10001688:	2b02      	cmp	r3, #2
1000168a:	d10f      	bne.n	100016ac <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
1000168c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001690:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000169c:	d112      	bne.n	100016c4 <HAL_RCC_OscConfig+0x124>
1000169e:	687b      	ldr	r3, [r7, #4]
100016a0:	685b      	ldr	r3, [r3, #4]
100016a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100016a6:	d00d      	beq.n	100016c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
100016a8:	2301      	movs	r3, #1
100016aa:	e2a5      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
100016ac:	687b      	ldr	r3, [r7, #4]
100016ae:	685b      	ldr	r3, [r3, #4]
100016b0:	4618      	mov	r0, r3
100016b2:	f000 faa7 	bl	10001c04 <HAL_RCC_HSEConfig>
100016b6:	4603      	mov	r3, r0
100016b8:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
100016ba:	7bfb      	ldrb	r3, [r7, #15]
100016bc:	2b00      	cmp	r3, #0
100016be:	d002      	beq.n	100016c6 <HAL_RCC_OscConfig+0x126>
      {
        return result;
100016c0:	7bfb      	ldrb	r3, [r7, #15]
100016c2:	e299      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100016c4:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100016c6:	687b      	ldr	r3, [r7, #4]
100016c8:	681b      	ldr	r3, [r3, #0]
100016ca:	f003 0302 	and.w	r3, r3, #2
100016ce:	2b00      	cmp	r3, #0
100016d0:	f000 814e 	beq.w	10001970 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
100016d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016d8:	6a1b      	ldr	r3, [r3, #32]
100016da:	f003 0303 	and.w	r3, r3, #3
100016de:	2b00      	cmp	r3, #0
100016e0:	d107      	bne.n	100016f2 <HAL_RCC_OscConfig+0x152>
100016e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016e6:	6a1b      	ldr	r3, [r3, #32]
100016e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100016ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100016f0:	d055      	beq.n	1000179e <HAL_RCC_OscConfig+0x1fe>
100016f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100016f8:	f003 0307 	and.w	r3, r3, #7
100016fc:	2b00      	cmp	r3, #0
100016fe:	d107      	bne.n	10001710 <HAL_RCC_OscConfig+0x170>
10001700:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001706:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000170a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000170e:	d046      	beq.n	1000179e <HAL_RCC_OscConfig+0x1fe>
10001710:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001716:	f003 0303 	and.w	r3, r3, #3
1000171a:	2b00      	cmp	r3, #0
1000171c:	d107      	bne.n	1000172e <HAL_RCC_OscConfig+0x18e>
1000171e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10001724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000172c:	d037      	beq.n	1000179e <HAL_RCC_OscConfig+0x1fe>
1000172e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001734:	f003 0303 	and.w	r3, r3, #3
10001738:	2b00      	cmp	r3, #0
1000173a:	d10f      	bne.n	1000175c <HAL_RCC_OscConfig+0x1bc>
1000173c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001744:	f003 0302 	and.w	r3, r3, #2
10001748:	2b02      	cmp	r3, #2
1000174a:	d028      	beq.n	1000179e <HAL_RCC_OscConfig+0x1fe>
1000174c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10001754:	f003 0302 	and.w	r3, r3, #2
10001758:	2b02      	cmp	r3, #2
1000175a:	d020      	beq.n	1000179e <HAL_RCC_OscConfig+0x1fe>
1000175c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001760:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001764:	f003 0303 	and.w	r3, r3, #3
10001768:	2b00      	cmp	r3, #0
1000176a:	d107      	bne.n	1000177c <HAL_RCC_OscConfig+0x1dc>
1000176c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001770:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001774:	f003 0302 	and.w	r3, r3, #2
10001778:	2b02      	cmp	r3, #2
1000177a:	d010      	beq.n	1000179e <HAL_RCC_OscConfig+0x1fe>
1000177c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001780:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001784:	f003 0303 	and.w	r3, r3, #3
10001788:	2b00      	cmp	r3, #0
1000178a:	f040 8088 	bne.w	1000189e <HAL_RCC_OscConfig+0x2fe>
1000178e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001792:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001796:	f003 0302 	and.w	r3, r3, #2
1000179a:	2b02      	cmp	r3, #2
1000179c:	d17f      	bne.n	1000189e <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000179e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017a2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100017a6:	f003 0301 	and.w	r3, r3, #1
100017aa:	2b01      	cmp	r3, #1
100017ac:	d105      	bne.n	100017ba <HAL_RCC_OscConfig+0x21a>
100017ae:	687b      	ldr	r3, [r7, #4]
100017b0:	68db      	ldr	r3, [r3, #12]
100017b2:	2b01      	cmp	r3, #1
100017b4:	d001      	beq.n	100017ba <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
100017b6:	2301      	movs	r3, #1
100017b8:	e21e      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100017ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017be:	699b      	ldr	r3, [r3, #24]
100017c0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
100017c4:	687b      	ldr	r3, [r7, #4]
100017c6:	691b      	ldr	r3, [r3, #16]
100017c8:	021b      	lsls	r3, r3, #8
100017ca:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100017ce:	4313      	orrs	r3, r2
100017d0:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100017d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100017d8:	f003 0303 	and.w	r3, r3, #3
100017dc:	2b00      	cmp	r3, #0
100017de:	d10f      	bne.n	10001800 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100017e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100017e8:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100017ec:	2b02      	cmp	r3, #2
100017ee:	d047      	beq.n	10001880 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100017f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100017f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100017f8:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100017fc:	2b02      	cmp	r3, #2
100017fe:	d03f      	beq.n	10001880 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10001800:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001804:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001808:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
1000180c:	2b00      	cmp	r3, #0
1000180e:	d107      	bne.n	10001820 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10001810:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001814:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001818:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
1000181c:	2b02      	cmp	r3, #2
1000181e:	d02f      	beq.n	10001880 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10001820:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001824:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10001828:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
1000182c:	2b00      	cmp	r3, #0
1000182e:	d107      	bne.n	10001840 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10001830:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001834:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10001838:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
1000183c:	2b02      	cmp	r3, #2
1000183e:	d01f      	beq.n	10001880 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10001840:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001844:	699b      	ldr	r3, [r3, #24]
10001846:	f023 0203 	bic.w	r2, r3, #3
1000184a:	687b      	ldr	r3, [r7, #4]
1000184c:	695b      	ldr	r3, [r3, #20]
1000184e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001852:	4313      	orrs	r3, r2
10001854:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10001856:	f7ff f991 	bl	10000b7c <HAL_GetTick>
1000185a:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000185c:	e008      	b.n	10001870 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000185e:	f7ff f98d 	bl	10000b7c <HAL_GetTick>
10001862:	4602      	mov	r2, r0
10001864:	68bb      	ldr	r3, [r7, #8]
10001866:	1ad3      	subs	r3, r2, r3
10001868:	2b64      	cmp	r3, #100	@ 0x64
1000186a:	d901      	bls.n	10001870 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
1000186c:	2303      	movs	r3, #3
1000186e:	e1c3      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001870:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001874:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001878:	f003 0304 	and.w	r3, r3, #4
1000187c:	2b04      	cmp	r3, #4
1000187e:	d1ee      	bne.n	1000185e <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10001880:	f001 f809 	bl	10002896 <HAL_RCC_GetSystemCoreClockFreq>
10001884:	4603      	mov	r3, r0
10001886:	4ab3      	ldr	r2, [pc, #716]	@ (10001b54 <HAL_RCC_OscConfig+0x5b4>)
10001888:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
1000188a:	4bb3      	ldr	r3, [pc, #716]	@ (10001b58 <HAL_RCC_OscConfig+0x5b8>)
1000188c:	681b      	ldr	r3, [r3, #0]
1000188e:	4618      	mov	r0, r3
10001890:	f7ff f92a 	bl	10000ae8 <HAL_InitTick>
10001894:	4603      	mov	r3, r0
10001896:	2b00      	cmp	r3, #0
10001898:	d069      	beq.n	1000196e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
1000189a:	2301      	movs	r3, #1
1000189c:	e1ac      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
1000189e:	687b      	ldr	r3, [r7, #4]
100018a0:	68db      	ldr	r3, [r3, #12]
100018a2:	2b00      	cmp	r3, #0
100018a4:	d049      	beq.n	1000193a <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
100018a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018aa:	68db      	ldr	r3, [r3, #12]
100018ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100018b0:	f043 0301 	orr.w	r3, r3, #1
100018b4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100018b6:	f7ff f961 	bl	10000b7c <HAL_GetTick>
100018ba:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100018bc:	e008      	b.n	100018d0 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100018be:	f7ff f95d 	bl	10000b7c <HAL_GetTick>
100018c2:	4602      	mov	r2, r0
100018c4:	68bb      	ldr	r3, [r7, #8]
100018c6:	1ad3      	subs	r3, r2, r3
100018c8:	2b64      	cmp	r3, #100	@ 0x64
100018ca:	d901      	bls.n	100018d0 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
100018cc:	2303      	movs	r3, #3
100018ce:	e193      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100018d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018d4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100018d8:	f003 0301 	and.w	r3, r3, #1
100018dc:	2b01      	cmp	r3, #1
100018de:	d1ee      	bne.n	100018be <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100018e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100018e4:	699b      	ldr	r3, [r3, #24]
100018e6:	f023 0203 	bic.w	r2, r3, #3
100018ea:	687b      	ldr	r3, [r7, #4]
100018ec:	695b      	ldr	r3, [r3, #20]
100018ee:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100018f2:	4313      	orrs	r3, r2
100018f4:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100018f6:	f7ff f941 	bl	10000b7c <HAL_GetTick>
100018fa:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100018fc:	e008      	b.n	10001910 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100018fe:	f7ff f93d 	bl	10000b7c <HAL_GetTick>
10001902:	4602      	mov	r2, r0
10001904:	68bb      	ldr	r3, [r7, #8]
10001906:	1ad3      	subs	r3, r2, r3
10001908:	2b64      	cmp	r3, #100	@ 0x64
1000190a:	d901      	bls.n	10001910 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
1000190c:	2303      	movs	r3, #3
1000190e:	e173      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001910:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001914:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001918:	f003 0304 	and.w	r3, r3, #4
1000191c:	2b04      	cmp	r3, #4
1000191e:	d1ee      	bne.n	100018fe <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10001920:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001924:	699b      	ldr	r3, [r3, #24]
10001926:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
1000192a:	687b      	ldr	r3, [r7, #4]
1000192c:	691b      	ldr	r3, [r3, #16]
1000192e:	021b      	lsls	r3, r3, #8
10001930:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001934:	4313      	orrs	r3, r2
10001936:	618b      	str	r3, [r1, #24]
10001938:	e01a      	b.n	10001970 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
1000193a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000193e:	2201      	movs	r2, #1
10001940:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001942:	f7ff f91b 	bl	10000b7c <HAL_GetTick>
10001946:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001948:	e008      	b.n	1000195c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000194a:	f7ff f917 	bl	10000b7c <HAL_GetTick>
1000194e:	4602      	mov	r2, r0
10001950:	68bb      	ldr	r3, [r7, #8]
10001952:	1ad3      	subs	r3, r2, r3
10001954:	2b64      	cmp	r3, #100	@ 0x64
10001956:	d901      	bls.n	1000195c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10001958:	2303      	movs	r3, #3
1000195a:	e14d      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
1000195c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001960:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001964:	f003 0301 	and.w	r3, r3, #1
10001968:	2b01      	cmp	r3, #1
1000196a:	d0ee      	beq.n	1000194a <HAL_RCC_OscConfig+0x3aa>
1000196c:	e000      	b.n	10001970 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
1000196e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10001970:	687b      	ldr	r3, [r7, #4]
10001972:	681b      	ldr	r3, [r3, #0]
10001974:	f003 0310 	and.w	r3, r3, #16
10001978:	2b00      	cmp	r3, #0
1000197a:	f000 8091 	beq.w	10001aa0 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
1000197e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001982:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10001986:	f003 0303 	and.w	r3, r3, #3
1000198a:	2b02      	cmp	r3, #2
1000198c:	d107      	bne.n	1000199e <HAL_RCC_OscConfig+0x3fe>
1000198e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001992:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10001996:	f003 0302 	and.w	r3, r3, #2
1000199a:	2b02      	cmp	r3, #2
1000199c:	d01e      	beq.n	100019dc <HAL_RCC_OscConfig+0x43c>
1000199e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100019a4:	f003 0303 	and.w	r3, r3, #3
100019a8:	2b02      	cmp	r3, #2
100019aa:	d107      	bne.n	100019bc <HAL_RCC_OscConfig+0x41c>
100019ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100019b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100019b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100019ba:	d00f      	beq.n	100019dc <HAL_RCC_OscConfig+0x43c>
100019bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019c0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100019c4:	f003 0303 	and.w	r3, r3, #3
100019c8:	2b02      	cmp	r3, #2
100019ca:	d122      	bne.n	10001a12 <HAL_RCC_OscConfig+0x472>
100019cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019d0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100019d4:	f003 0302 	and.w	r3, r3, #2
100019d8:	2b02      	cmp	r3, #2
100019da:	d11a      	bne.n	10001a12 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100019dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019e0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100019e4:	f003 0310 	and.w	r3, r3, #16
100019e8:	2b10      	cmp	r3, #16
100019ea:	d105      	bne.n	100019f8 <HAL_RCC_OscConfig+0x458>
100019ec:	687b      	ldr	r3, [r7, #4]
100019ee:	69db      	ldr	r3, [r3, #28]
100019f0:	2b10      	cmp	r3, #16
100019f2:	d001      	beq.n	100019f8 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
100019f4:	2301      	movs	r3, #1
100019f6:	e0ff      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100019f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100019fc:	69db      	ldr	r3, [r3, #28]
100019fe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10001a02:	687b      	ldr	r3, [r7, #4]
10001a04:	6a1b      	ldr	r3, [r3, #32]
10001a06:	021b      	lsls	r3, r3, #8
10001a08:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001a0c:	4313      	orrs	r3, r2
10001a0e:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001a10:	e046      	b.n	10001aa0 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10001a12:	687b      	ldr	r3, [r7, #4]
10001a14:	69db      	ldr	r3, [r3, #28]
10001a16:	2b00      	cmp	r3, #0
10001a18:	d029      	beq.n	10001a6e <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10001a1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a1e:	68db      	ldr	r3, [r3, #12]
10001a20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001a24:	f043 0310 	orr.w	r3, r3, #16
10001a28:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001a2a:	f7ff f8a7 	bl	10000b7c <HAL_GetTick>
10001a2e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001a30:	e008      	b.n	10001a44 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10001a32:	f7ff f8a3 	bl	10000b7c <HAL_GetTick>
10001a36:	4602      	mov	r2, r0
10001a38:	68bb      	ldr	r3, [r7, #8]
10001a3a:	1ad3      	subs	r3, r2, r3
10001a3c:	2b64      	cmp	r3, #100	@ 0x64
10001a3e:	d901      	bls.n	10001a44 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10001a40:	2303      	movs	r3, #3
10001a42:	e0d9      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001a44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a48:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001a4c:	f003 0310 	and.w	r3, r3, #16
10001a50:	2b10      	cmp	r3, #16
10001a52:	d1ee      	bne.n	10001a32 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10001a54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a58:	69db      	ldr	r3, [r3, #28]
10001a5a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10001a5e:	687b      	ldr	r3, [r7, #4]
10001a60:	6a1b      	ldr	r3, [r3, #32]
10001a62:	021b      	lsls	r3, r3, #8
10001a64:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001a68:	4313      	orrs	r3, r2
10001a6a:	61cb      	str	r3, [r1, #28]
10001a6c:	e018      	b.n	10001aa0 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10001a6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a72:	2210      	movs	r2, #16
10001a74:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001a76:	f7ff f881 	bl	10000b7c <HAL_GetTick>
10001a7a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10001a7c:	e008      	b.n	10001a90 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10001a7e:	f7ff f87d 	bl	10000b7c <HAL_GetTick>
10001a82:	4602      	mov	r2, r0
10001a84:	68bb      	ldr	r3, [r7, #8]
10001a86:	1ad3      	subs	r3, r2, r3
10001a88:	2b64      	cmp	r3, #100	@ 0x64
10001a8a:	d901      	bls.n	10001a90 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10001a8c:	2303      	movs	r3, #3
10001a8e:	e0b3      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10001a90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001a94:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001a98:	f003 0310 	and.w	r3, r3, #16
10001a9c:	2b10      	cmp	r3, #16
10001a9e:	d0ee      	beq.n	10001a7e <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10001aa0:	687b      	ldr	r3, [r7, #4]
10001aa2:	681b      	ldr	r3, [r3, #0]
10001aa4:	f003 0308 	and.w	r3, r3, #8
10001aa8:	2b00      	cmp	r3, #0
10001aaa:	d042      	beq.n	10001b32 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10001aac:	687b      	ldr	r3, [r7, #4]
10001aae:	699b      	ldr	r3, [r3, #24]
10001ab0:	2b00      	cmp	r3, #0
10001ab2:	d01f      	beq.n	10001af4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10001ab4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ab8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001abc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001ac0:	f043 0301 	orr.w	r3, r3, #1
10001ac4:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001ac8:	f7ff f858 	bl	10000b7c <HAL_GetTick>
10001acc:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001ace:	e008      	b.n	10001ae2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001ad0:	f7ff f854 	bl	10000b7c <HAL_GetTick>
10001ad4:	4602      	mov	r2, r0
10001ad6:	68bb      	ldr	r3, [r7, #8]
10001ad8:	1ad3      	subs	r3, r2, r3
10001ada:	2b64      	cmp	r3, #100	@ 0x64
10001adc:	d901      	bls.n	10001ae2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10001ade:	2303      	movs	r3, #3
10001ae0:	e08a      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001ae2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ae6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001aea:	f003 0302 	and.w	r3, r3, #2
10001aee:	2b02      	cmp	r3, #2
10001af0:	d1ee      	bne.n	10001ad0 <HAL_RCC_OscConfig+0x530>
10001af2:	e01e      	b.n	10001b32 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10001af4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001af8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001afc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001b00:	f023 0301 	bic.w	r3, r3, #1
10001b04:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001b08:	f7ff f838 	bl	10000b7c <HAL_GetTick>
10001b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001b0e:	e008      	b.n	10001b22 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001b10:	f7ff f834 	bl	10000b7c <HAL_GetTick>
10001b14:	4602      	mov	r2, r0
10001b16:	68bb      	ldr	r3, [r7, #8]
10001b18:	1ad3      	subs	r3, r2, r3
10001b1a:	2b64      	cmp	r3, #100	@ 0x64
10001b1c:	d901      	bls.n	10001b22 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10001b1e:	2303      	movs	r3, #3
10001b20:	e06a      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001b22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001b26:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10001b2a:	f003 0302 	and.w	r3, r3, #2
10001b2e:	2b02      	cmp	r3, #2
10001b30:	d0ee      	beq.n	10001b10 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10001b32:	687b      	ldr	r3, [r7, #4]
10001b34:	681b      	ldr	r3, [r3, #0]
10001b36:	f003 0304 	and.w	r3, r3, #4
10001b3a:	2b00      	cmp	r3, #0
10001b3c:	d02b      	beq.n	10001b96 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10001b3e:	4b07      	ldr	r3, [pc, #28]	@ (10001b5c <HAL_RCC_OscConfig+0x5bc>)
10001b40:	681b      	ldr	r3, [r3, #0]
10001b42:	4a06      	ldr	r2, [pc, #24]	@ (10001b5c <HAL_RCC_OscConfig+0x5bc>)
10001b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10001b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10001b4a:	f7ff f817 	bl	10000b7c <HAL_GetTick>
10001b4e:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001b50:	e00f      	b.n	10001b72 <HAL_RCC_OscConfig+0x5d2>
10001b52:	bf00      	nop
10001b54:	10020000 	.word	0x10020000
10001b58:	10020004 	.word	0x10020004
10001b5c:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10001b60:	f7ff f80c 	bl	10000b7c <HAL_GetTick>
10001b64:	4602      	mov	r2, r0
10001b66:	68bb      	ldr	r3, [r7, #8]
10001b68:	1ad3      	subs	r3, r2, r3
10001b6a:	2b64      	cmp	r3, #100	@ 0x64
10001b6c:	d901      	bls.n	10001b72 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10001b6e:	2303      	movs	r3, #3
10001b70:	e042      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001b72:	4b23      	ldr	r3, [pc, #140]	@ (10001c00 <HAL_RCC_OscConfig+0x660>)
10001b74:	681b      	ldr	r3, [r3, #0]
10001b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001b7a:	2b00      	cmp	r3, #0
10001b7c:	d0f0      	beq.n	10001b60 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10001b7e:	687b      	ldr	r3, [r7, #4]
10001b80:	689b      	ldr	r3, [r3, #8]
10001b82:	4618      	mov	r0, r3
10001b84:	f000 f8a9 	bl	10001cda <HAL_RCC_LSEConfig>
10001b88:	4603      	mov	r3, r0
10001b8a:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10001b8c:	7bfb      	ldrb	r3, [r7, #15]
10001b8e:	2b00      	cmp	r3, #0
10001b90:	d001      	beq.n	10001b96 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10001b92:	7bfb      	ldrb	r3, [r7, #15]
10001b94:	e030      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10001b96:	687b      	ldr	r3, [r7, #4]
10001b98:	3324      	adds	r3, #36	@ 0x24
10001b9a:	4618      	mov	r0, r3
10001b9c:	f000 f91a 	bl	10001dd4 <RCC_PLL1_Config>
10001ba0:	4603      	mov	r3, r0
10001ba2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001ba4:	7bfb      	ldrb	r3, [r7, #15]
10001ba6:	2b00      	cmp	r3, #0
10001ba8:	d001      	beq.n	10001bae <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10001baa:	7bfb      	ldrb	r3, [r7, #15]
10001bac:	e024      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10001bae:	687b      	ldr	r3, [r7, #4]
10001bb0:	3360      	adds	r3, #96	@ 0x60
10001bb2:	4618      	mov	r0, r3
10001bb4:	f000 fecc 	bl	10002950 <RCCEx_PLL2_Config>
10001bb8:	4603      	mov	r3, r0
10001bba:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001bbc:	7bfb      	ldrb	r3, [r7, #15]
10001bbe:	2b00      	cmp	r3, #0
10001bc0:	d001      	beq.n	10001bc6 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10001bc2:	7bfb      	ldrb	r3, [r7, #15]
10001bc4:	e018      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10001bc6:	687b      	ldr	r3, [r7, #4]
10001bc8:	339c      	adds	r3, #156	@ 0x9c
10001bca:	4618      	mov	r0, r3
10001bcc:	f001 f842 	bl	10002c54 <RCCEx_PLL3_Config>
10001bd0:	4603      	mov	r3, r0
10001bd2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001bd4:	7bfb      	ldrb	r3, [r7, #15]
10001bd6:	2b00      	cmp	r3, #0
10001bd8:	d001      	beq.n	10001bde <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10001bda:	7bfb      	ldrb	r3, [r7, #15]
10001bdc:	e00c      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10001bde:	687b      	ldr	r3, [r7, #4]
10001be0:	33d8      	adds	r3, #216	@ 0xd8
10001be2:	4618      	mov	r0, r3
10001be4:	f001 f9a0 	bl	10002f28 <RCCEx_PLL4_Config>
10001be8:	4603      	mov	r3, r0
10001bea:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001bec:	7bfb      	ldrb	r3, [r7, #15]
10001bee:	2b00      	cmp	r3, #0
10001bf0:	d001      	beq.n	10001bf6 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10001bf2:	7bfb      	ldrb	r3, [r7, #15]
10001bf4:	e000      	b.n	10001bf8 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10001bf6:	2300      	movs	r3, #0
}
10001bf8:	4618      	mov	r0, r3
10001bfa:	3710      	adds	r7, #16
10001bfc:	46bd      	mov	sp, r7
10001bfe:	bd80      	pop	{r7, pc}
10001c00:	50001000 	.word	0x50001000

10001c04 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10001c04:	b580      	push	{r7, lr}
10001c06:	b084      	sub	sp, #16
10001c08:	af00      	add	r7, sp, #0
10001c0a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10001c0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
10001c14:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001c16:	f7fe ffb1 	bl	10000b7c <HAL_GetTick>
10001c1a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001c1c:	e008      	b.n	10001c30 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001c1e:	f7fe ffad 	bl	10000b7c <HAL_GetTick>
10001c22:	4602      	mov	r2, r0
10001c24:	68fb      	ldr	r3, [r7, #12]
10001c26:	1ad3      	subs	r3, r2, r3
10001c28:	2b64      	cmp	r3, #100	@ 0x64
10001c2a:	d901      	bls.n	10001c30 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10001c2c:	2303      	movs	r3, #3
10001c2e:	e050      	b.n	10001cd2 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001c30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c34:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001c40:	d0ed      	beq.n	10001c1e <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10001c42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c46:	f44f 6290 	mov.w	r2, #1152	@ 0x480
10001c4a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10001c4c:	687b      	ldr	r3, [r7, #4]
10001c4e:	2b00      	cmp	r3, #0
10001c50:	d03e      	beq.n	10001cd0 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10001c52:	687b      	ldr	r3, [r7, #4]
10001c54:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
10001c58:	d108      	bne.n	10001c6c <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001c5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c5e:	68db      	ldr	r3, [r3, #12]
10001c60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001c64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10001c68:	60d3      	str	r3, [r2, #12]
10001c6a:	e013      	b.n	10001c94 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10001c6c:	687b      	ldr	r3, [r7, #4]
10001c6e:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
10001c72:	d10f      	bne.n	10001c94 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10001c74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c78:	68db      	ldr	r3, [r3, #12]
10001c7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10001c82:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001c84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c88:	68db      	ldr	r3, [r3, #12]
10001c8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10001c92:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10001c94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c98:	68db      	ldr	r3, [r3, #12]
10001c9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10001ca2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001ca4:	f7fe ff6a 	bl	10000b7c <HAL_GetTick>
10001ca8:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001caa:	e008      	b.n	10001cbe <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10001cac:	f7fe ff66 	bl	10000b7c <HAL_GetTick>
10001cb0:	4602      	mov	r2, r0
10001cb2:	68fb      	ldr	r3, [r7, #12]
10001cb4:	1ad3      	subs	r3, r2, r3
10001cb6:	2b64      	cmp	r3, #100	@ 0x64
10001cb8:	d901      	bls.n	10001cbe <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10001cba:	2303      	movs	r3, #3
10001cbc:	e009      	b.n	10001cd2 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001cbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001cc2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10001cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10001cce:	d1ed      	bne.n	10001cac <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10001cd0:	2300      	movs	r3, #0
}
10001cd2:	4618      	mov	r0, r3
10001cd4:	3710      	adds	r7, #16
10001cd6:	46bd      	mov	sp, r7
10001cd8:	bd80      	pop	{r7, pc}

10001cda <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10001cda:	b580      	push	{r7, lr}
10001cdc:	b084      	sub	sp, #16
10001cde:	af00      	add	r7, sp, #0
10001ce0:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ce6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001cea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001cee:	f023 0301 	bic.w	r3, r3, #1
10001cf2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001cf6:	f7fe ff41 	bl	10000b7c <HAL_GetTick>
10001cfa:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001cfc:	e00a      	b.n	10001d14 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001cfe:	f7fe ff3d 	bl	10000b7c <HAL_GetTick>
10001d02:	4602      	mov	r2, r0
10001d04:	68fb      	ldr	r3, [r7, #12]
10001d06:	1ad3      	subs	r3, r2, r3
10001d08:	f241 3288 	movw	r2, #5000	@ 0x1388
10001d0c:	4293      	cmp	r3, r2
10001d0e:	d901      	bls.n	10001d14 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10001d10:	2303      	movs	r3, #3
10001d12:	e05b      	b.n	10001dcc <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001d14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001d1c:	f003 0304 	and.w	r3, r3, #4
10001d20:	2b04      	cmp	r3, #4
10001d22:	d0ec      	beq.n	10001cfe <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10001d24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001d2c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001d30:	f023 030a 	bic.w	r3, r3, #10
10001d34:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10001d38:	687b      	ldr	r3, [r7, #4]
10001d3a:	2b00      	cmp	r3, #0
10001d3c:	d045      	beq.n	10001dca <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10001d3e:	687b      	ldr	r3, [r7, #4]
10001d40:	2b03      	cmp	r3, #3
10001d42:	d10a      	bne.n	10001d5a <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001d44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001d4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001d50:	f043 0302 	orr.w	r3, r3, #2
10001d54:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10001d58:	e016      	b.n	10001d88 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10001d5a:	687b      	ldr	r3, [r7, #4]
10001d5c:	2b0b      	cmp	r3, #11
10001d5e:	d113      	bne.n	10001d88 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10001d60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001d68:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001d6c:	f043 0308 	orr.w	r3, r3, #8
10001d70:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001d74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001d7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001d80:	f043 0302 	orr.w	r3, r3, #2
10001d84:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001d88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001d90:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001d94:	f043 0301 	orr.w	r3, r3, #1
10001d98:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001d9c:	f7fe feee 	bl	10000b7c <HAL_GetTick>
10001da0:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001da2:	e00a      	b.n	10001dba <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001da4:	f7fe feea 	bl	10000b7c <HAL_GetTick>
10001da8:	4602      	mov	r2, r0
10001daa:	68fb      	ldr	r3, [r7, #12]
10001dac:	1ad3      	subs	r3, r2, r3
10001dae:	f241 3288 	movw	r2, #5000	@ 0x1388
10001db2:	4293      	cmp	r3, r2
10001db4:	d901      	bls.n	10001dba <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10001db6:	2303      	movs	r3, #3
10001db8:	e008      	b.n	10001dcc <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001dba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10001dc2:	f003 0304 	and.w	r3, r3, #4
10001dc6:	2b04      	cmp	r3, #4
10001dc8:	d1ec      	bne.n	10001da4 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10001dca:	2300      	movs	r3, #0
}
10001dcc:	4618      	mov	r0, r3
10001dce:	3710      	adds	r7, #16
10001dd0:	46bd      	mov	sp, r7
10001dd2:	bd80      	pop	{r7, pc}

10001dd4 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10001dd4:	b580      	push	{r7, lr}
10001dd6:	b084      	sub	sp, #16
10001dd8:	af00      	add	r7, sp, #0
10001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10001ddc:	687b      	ldr	r3, [r7, #4]
10001dde:	681b      	ldr	r3, [r3, #0]
10001de0:	2b00      	cmp	r3, #0
10001de2:	f000 8174 	beq.w	100020ce <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10001de6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dea:	6a1b      	ldr	r3, [r3, #32]
10001dec:	f003 0303 	and.w	r3, r3, #3
10001df0:	2b02      	cmp	r3, #2
10001df2:	d108      	bne.n	10001e06 <RCC_PLL1_Config+0x32>
10001df4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001df8:	6a1b      	ldr	r3, [r3, #32]
10001dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001e02:	f000 8162 	beq.w	100020ca <RCC_PLL1_Config+0x2f6>
10001e06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e0a:	6a1b      	ldr	r3, [r3, #32]
10001e0c:	f003 0303 	and.w	r3, r3, #3
10001e10:	2b03      	cmp	r3, #3
10001e12:	d108      	bne.n	10001e26 <RCC_PLL1_Config+0x52>
10001e14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e18:	6a1b      	ldr	r3, [r3, #32]
10001e1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001e22:	f000 8152 	beq.w	100020ca <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10001e26:	687b      	ldr	r3, [r7, #4]
10001e28:	681b      	ldr	r3, [r3, #0]
10001e2a:	2b02      	cmp	r3, #2
10001e2c:	f040 8123 	bne.w	10002076 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001e30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001e38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10001e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10001e44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001e4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001e50:	f023 0301 	bic.w	r3, r3, #1
10001e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001e58:	f7fe fe90 	bl	10000b7c <HAL_GetTick>
10001e5c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001e5e:	e008      	b.n	10001e72 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001e60:	f7fe fe8c 	bl	10000b7c <HAL_GetTick>
10001e64:	4602      	mov	r2, r0
10001e66:	68fb      	ldr	r3, [r7, #12]
10001e68:	1ad3      	subs	r3, r2, r3
10001e6a:	2b64      	cmp	r3, #100	@ 0x64
10001e6c:	d901      	bls.n	10001e72 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10001e6e:	2303      	movs	r3, #3
10001e70:	e12e      	b.n	100020d0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001e72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10001e7a:	f003 0302 	and.w	r3, r3, #2
10001e7e:	2b02      	cmp	r3, #2
10001e80:	d0ee      	beq.n	10001e60 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10001e82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001e88:	f003 0307 	and.w	r3, r3, #7
10001e8c:	2b02      	cmp	r3, #2
10001e8e:	d112      	bne.n	10001eb6 <RCC_PLL1_Config+0xe2>
10001e90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001e96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001e9e:	d10a      	bne.n	10001eb6 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001ea0:	687b      	ldr	r3, [r7, #4]
10001ea2:	685a      	ldr	r2, [r3, #4]
10001ea4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001eaa:	f003 0303 	and.w	r3, r3, #3
10001eae:	429a      	cmp	r2, r3
10001eb0:	d00c      	beq.n	10001ecc <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10001eb2:	2301      	movs	r3, #1
10001eb4:	e10c      	b.n	100020d0 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10001eb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001ebc:	f023 0203 	bic.w	r2, r3, #3
10001ec0:	687b      	ldr	r3, [r7, #4]
10001ec2:	685b      	ldr	r3, [r3, #4]
10001ec4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001ec8:	4313      	orrs	r3, r2
10001eca:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001ecc:	e008      	b.n	10001ee0 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001ece:	f7fe fe55 	bl	10000b7c <HAL_GetTick>
10001ed2:	4602      	mov	r2, r0
10001ed4:	68fb      	ldr	r3, [r7, #12]
10001ed6:	1ad3      	subs	r3, r2, r3
10001ed8:	2b64      	cmp	r3, #100	@ 0x64
10001eda:	d901      	bls.n	10001ee0 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10001edc:	2303      	movs	r3, #3
10001ede:	e0f7      	b.n	100020d0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001ee0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10001ee6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10001eea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10001eee:	d1ee      	bne.n	10001ece <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001ef0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ef4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10001ef8:	4b77      	ldr	r3, [pc, #476]	@ (100020d8 <RCC_PLL1_Config+0x304>)
10001efa:	4013      	ands	r3, r2
10001efc:	687a      	ldr	r2, [r7, #4]
10001efe:	68d2      	ldr	r2, [r2, #12]
10001f00:	1e51      	subs	r1, r2, #1
10001f02:	687a      	ldr	r2, [r7, #4]
10001f04:	6892      	ldr	r2, [r2, #8]
10001f06:	3a01      	subs	r2, #1
10001f08:	0412      	lsls	r2, r2, #16
10001f0a:	430a      	orrs	r2, r1
10001f0c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001f10:	4313      	orrs	r3, r2
10001f12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
10001f16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10001f1e:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10001f22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10001f26:	687a      	ldr	r2, [r7, #4]
10001f28:	6912      	ldr	r2, [r2, #16]
10001f2a:	1e51      	subs	r1, r2, #1
10001f2c:	687a      	ldr	r2, [r7, #4]
10001f2e:	6952      	ldr	r2, [r2, #20]
10001f30:	3a01      	subs	r2, #1
10001f32:	0212      	lsls	r2, r2, #8
10001f34:	4311      	orrs	r1, r2
10001f36:	687a      	ldr	r2, [r7, #4]
10001f38:	6992      	ldr	r2, [r2, #24]
10001f3a:	3a01      	subs	r2, #1
10001f3c:	0412      	lsls	r2, r2, #16
10001f3e:	430a      	orrs	r2, r1
10001f40:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001f44:	4313      	orrs	r3, r2
10001f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10001f4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10001f52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10001f5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10001f5e:	687b      	ldr	r3, [r7, #4]
10001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001f62:	2b02      	cmp	r3, #2
10001f64:	d003      	beq.n	10001f6e <RCC_PLL1_Config+0x19a>
10001f66:	687b      	ldr	r3, [r7, #4]
10001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001f6a:	2b00      	cmp	r3, #0
10001f6c:	d10c      	bne.n	10001f88 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10001f6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10001f76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001f7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001f7e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001f82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
10001f86:	e00f      	b.n	10001fa8 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10001f88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10001f90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10001f94:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10001f98:	687a      	ldr	r2, [r7, #4]
10001f9a:	6a12      	ldr	r2, [r2, #32]
10001f9c:	00d2      	lsls	r2, r2, #3
10001f9e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001fa2:	4313      	orrs	r3, r2
10001fa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10001fa8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10001fb0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10001fb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001fbc:	687b      	ldr	r3, [r7, #4]
10001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001fc0:	2b02      	cmp	r3, #2
10001fc2:	d124      	bne.n	1000200e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10001fc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
10001fcc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10001fd0:	687b      	ldr	r3, [r7, #4]
10001fd2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10001fd4:	687b      	ldr	r3, [r7, #4]
10001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10001fd8:	4319      	orrs	r1, r3
10001fda:	687b      	ldr	r3, [r7, #4]
10001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10001fde:	4319      	orrs	r1, r3
10001fe0:	687b      	ldr	r3, [r7, #4]
10001fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10001fe4:	4319      	orrs	r1, r3
10001fe6:	687b      	ldr	r3, [r7, #4]
10001fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10001fea:	041b      	lsls	r3, r3, #16
10001fec:	430b      	orrs	r3, r1
10001fee:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10001ff2:	4313      	orrs	r3, r2
10001ff4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001ff8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002000:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002004:	f043 0304 	orr.w	r3, r3, #4
10002008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
1000200c:	e009      	b.n	10002022 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000200e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002016:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000201a:	f023 0304 	bic.w	r3, r3, #4
1000201e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10002022:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000202a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000202e:	f043 0301 	orr.w	r3, r3, #1
10002032:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002036:	f7fe fda1 	bl	10000b7c <HAL_GetTick>
1000203a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000203c:	e008      	b.n	10002050 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000203e:	f7fe fd9d 	bl	10000b7c <HAL_GetTick>
10002042:	4602      	mov	r2, r0
10002044:	68fb      	ldr	r3, [r7, #12]
10002046:	1ad3      	subs	r3, r2, r3
10002048:	2b64      	cmp	r3, #100	@ 0x64
1000204a:	d901      	bls.n	10002050 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
1000204c:	2303      	movs	r3, #3
1000204e:	e03f      	b.n	100020d0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002050:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002058:	f003 0302 	and.w	r3, r3, #2
1000205c:	2b02      	cmp	r3, #2
1000205e:	d1ee      	bne.n	1000203e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002060:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002068:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000206c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002070:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10002074:	e02b      	b.n	100020ce <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002076:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000207a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000207e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002086:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
1000208a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000208e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10002092:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002096:	f023 0301 	bic.w	r3, r3, #1
1000209a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000209e:	f7fe fd6d 	bl	10000b7c <HAL_GetTick>
100020a2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100020a4:	e008      	b.n	100020b8 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100020a6:	f7fe fd69 	bl	10000b7c <HAL_GetTick>
100020aa:	4602      	mov	r2, r0
100020ac:	68fb      	ldr	r3, [r7, #12]
100020ae:	1ad3      	subs	r3, r2, r3
100020b0:	2b64      	cmp	r3, #100	@ 0x64
100020b2:	d901      	bls.n	100020b8 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
100020b4:	2303      	movs	r3, #3
100020b6:	e00b      	b.n	100020d0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100020b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100020bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100020c0:	f003 0302 	and.w	r3, r3, #2
100020c4:	2b02      	cmp	r3, #2
100020c6:	d0ee      	beq.n	100020a6 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
100020c8:	e001      	b.n	100020ce <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100020ca:	2301      	movs	r3, #1
100020cc:	e000      	b.n	100020d0 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
100020ce:	2300      	movs	r3, #0

}
100020d0:	4618      	mov	r0, r3
100020d2:	3710      	adds	r7, #16
100020d4:	46bd      	mov	sp, r7
100020d6:	bd80      	pop	{r7, pc}
100020d8:	ffc0fe00 	.word	0xffc0fe00

100020dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
100020dc:	b580      	push	{r7, lr}
100020de:	b084      	sub	sp, #16
100020e0:	af00      	add	r7, sp, #0
100020e2:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100020e4:	2300      	movs	r3, #0
100020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100020e8:	687b      	ldr	r3, [r7, #4]
100020ea:	2b00      	cmp	r3, #0
100020ec:	d101      	bne.n	100020f2 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
100020ee:	2301      	movs	r3, #1
100020f0:	e102      	b.n	100022f8 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
100020f2:	687b      	ldr	r3, [r7, #4]
100020f4:	681b      	ldr	r3, [r3, #0]
100020f6:	f003 0301 	and.w	r3, r3, #1
100020fa:	2b00      	cmp	r3, #0
100020fc:	d00b      	beq.n	10002116 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
100020fe:	687b      	ldr	r3, [r7, #4]
10002100:	3304      	adds	r3, #4
10002102:	4618      	mov	r0, r3
10002104:	f000 f8fc 	bl	10002300 <RCC_MPUConfig>
10002108:	4603      	mov	r3, r0
1000210a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
1000210c:	7bfb      	ldrb	r3, [r7, #15]
1000210e:	2b00      	cmp	r3, #0
10002110:	d001      	beq.n	10002116 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10002112:	7bfb      	ldrb	r3, [r7, #15]
10002114:	e0f0      	b.n	100022f8 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10002116:	687b      	ldr	r3, [r7, #4]
10002118:	681b      	ldr	r3, [r3, #0]
1000211a:	f003 0302 	and.w	r3, r3, #2
1000211e:	2b00      	cmp	r3, #0
10002120:	d00b      	beq.n	1000213a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10002122:	687b      	ldr	r3, [r7, #4]
10002124:	330c      	adds	r3, #12
10002126:	4618      	mov	r0, r3
10002128:	f000 f960 	bl	100023ec <RCC_AXISSConfig>
1000212c:	4603      	mov	r3, r0
1000212e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002130:	7bfb      	ldrb	r3, [r7, #15]
10002132:	2b00      	cmp	r3, #0
10002134:	d001      	beq.n	1000213a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10002136:	7bfb      	ldrb	r3, [r7, #15]
10002138:	e0de      	b.n	100022f8 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000213a:	687b      	ldr	r3, [r7, #4]
1000213c:	681b      	ldr	r3, [r3, #0]
1000213e:	f003 0304 	and.w	r3, r3, #4
10002142:	2b00      	cmp	r3, #0
10002144:	d00b      	beq.n	1000215e <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10002146:	687b      	ldr	r3, [r7, #4]
10002148:	3314      	adds	r3, #20
1000214a:	4618      	mov	r0, r3
1000214c:	f000 f9e6 	bl	1000251c <RCC_MCUConfig>
10002150:	4603      	mov	r3, r0
10002152:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002154:	7bfb      	ldrb	r3, [r7, #15]
10002156:	2b00      	cmp	r3, #0
10002158:	d001      	beq.n	1000215e <HAL_RCC_ClockConfig+0x82>
    {
      return status;
1000215a:	7bfb      	ldrb	r3, [r7, #15]
1000215c:	e0cc      	b.n	100022f8 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000215e:	687b      	ldr	r3, [r7, #4]
10002160:	681b      	ldr	r3, [r3, #0]
10002162:	f003 0308 	and.w	r3, r3, #8
10002166:	2b00      	cmp	r3, #0
10002168:	d020      	beq.n	100021ac <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
1000216a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10002170:	f023 0207 	bic.w	r2, r3, #7
10002174:	687b      	ldr	r3, [r7, #4]
10002176:	69db      	ldr	r3, [r3, #28]
10002178:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000217c:	4313      	orrs	r3, r2
1000217e:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002180:	f7fe fcfc 	bl	10000b7c <HAL_GetTick>
10002184:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10002186:	e009      	b.n	1000219c <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002188:	f7fe fcf8 	bl	10000b7c <HAL_GetTick>
1000218c:	4602      	mov	r2, r0
1000218e:	68bb      	ldr	r3, [r7, #8]
10002190:	1ad3      	subs	r3, r2, r3
10002192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002196:	d901      	bls.n	1000219c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10002198:	2303      	movs	r3, #3
1000219a:	e0ad      	b.n	100022f8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
1000219c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100021a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100021a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100021aa:	d1ed      	bne.n	10002188 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100021ac:	687b      	ldr	r3, [r7, #4]
100021ae:	681b      	ldr	r3, [r3, #0]
100021b0:	f003 0310 	and.w	r3, r3, #16
100021b4:	2b00      	cmp	r3, #0
100021b6:	d020      	beq.n	100021fa <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
100021b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100021be:	f023 0207 	bic.w	r2, r3, #7
100021c2:	687b      	ldr	r3, [r7, #4]
100021c4:	6a1b      	ldr	r3, [r3, #32]
100021c6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100021ca:	4313      	orrs	r3, r2
100021cc:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100021ce:	f7fe fcd5 	bl	10000b7c <HAL_GetTick>
100021d2:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100021d4:	e009      	b.n	100021ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100021d6:	f7fe fcd1 	bl	10000b7c <HAL_GetTick>
100021da:	4602      	mov	r2, r0
100021dc:	68bb      	ldr	r3, [r7, #8]
100021de:	1ad3      	subs	r3, r2, r3
100021e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100021e4:	d901      	bls.n	100021ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100021e6:	2303      	movs	r3, #3
100021e8:	e086      	b.n	100022f8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100021ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100021f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100021f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100021f8:	d1ed      	bne.n	100021d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
100021fa:	687b      	ldr	r3, [r7, #4]
100021fc:	681b      	ldr	r3, [r3, #0]
100021fe:	f003 0320 	and.w	r3, r3, #32
10002202:	2b00      	cmp	r3, #0
10002204:	d023      	beq.n	1000224e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10002206:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000220a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
1000220e:	f023 0207 	bic.w	r2, r3, #7
10002212:	687b      	ldr	r3, [r7, #4]
10002214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002216:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000221a:	4313      	orrs	r3, r2
1000221c:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002220:	f7fe fcac 	bl	10000b7c <HAL_GetTick>
10002224:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002226:	e009      	b.n	1000223c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002228:	f7fe fca8 	bl	10000b7c <HAL_GetTick>
1000222c:	4602      	mov	r2, r0
1000222e:	68bb      	ldr	r3, [r7, #8]
10002230:	1ad3      	subs	r3, r2, r3
10002232:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10002236:	d901      	bls.n	1000223c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10002238:	2303      	movs	r3, #3
1000223a:	e05d      	b.n	100022f8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000223c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002240:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10002244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000224c:	d1ec      	bne.n	10002228 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000224e:	687b      	ldr	r3, [r7, #4]
10002250:	681b      	ldr	r3, [r3, #0]
10002252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10002256:	2b00      	cmp	r3, #0
10002258:	d023      	beq.n	100022a2 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
1000225a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000225e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10002262:	f023 0207 	bic.w	r2, r3, #7
10002266:	687b      	ldr	r3, [r7, #4]
10002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000226a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000226e:	4313      	orrs	r3, r2
10002270:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002274:	f7fe fc82 	bl	10000b7c <HAL_GetTick>
10002278:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000227a:	e009      	b.n	10002290 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000227c:	f7fe fc7e 	bl	10000b7c <HAL_GetTick>
10002280:	4602      	mov	r2, r0
10002282:	68bb      	ldr	r3, [r7, #8]
10002284:	1ad3      	subs	r3, r2, r3
10002286:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000228a:	d901      	bls.n	10002290 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
1000228c:	2303      	movs	r3, #3
1000228e:	e033      	b.n	100022f8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10002290:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002294:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10002298:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000229c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100022a0:	d1ec      	bne.n	1000227c <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100022a2:	687b      	ldr	r3, [r7, #4]
100022a4:	681b      	ldr	r3, [r3, #0]
100022a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
100022aa:	2b00      	cmp	r3, #0
100022ac:	d023      	beq.n	100022f6 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100022ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022b2:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
100022b6:	f023 0207 	bic.w	r2, r3, #7
100022ba:	687b      	ldr	r3, [r7, #4]
100022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100022be:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100022c2:	4313      	orrs	r3, r2
100022c4:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100022c8:	f7fe fc58 	bl	10000b7c <HAL_GetTick>
100022cc:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100022ce:	e009      	b.n	100022e4 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100022d0:	f7fe fc54 	bl	10000b7c <HAL_GetTick>
100022d4:	4602      	mov	r2, r0
100022d6:	68bb      	ldr	r3, [r7, #8]
100022d8:	1ad3      	subs	r3, r2, r3
100022da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100022de:	d901      	bls.n	100022e4 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
100022e0:	2303      	movs	r3, #3
100022e2:	e009      	b.n	100022f8 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100022e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100022e8:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
100022ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100022f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100022f4:	d1ec      	bne.n	100022d0 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
100022f6:	2300      	movs	r3, #0
}
100022f8:	4618      	mov	r0, r3
100022fa:	3710      	adds	r7, #16
100022fc:	46bd      	mov	sp, r7
100022fe:	bd80      	pop	{r7, pc}

10002300 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10002300:	b580      	push	{r7, lr}
10002302:	b084      	sub	sp, #16
10002304:	af00      	add	r7, sp, #0
10002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10002308:	687b      	ldr	r3, [r7, #4]
1000230a:	681b      	ldr	r3, [r3, #0]
1000230c:	2b03      	cmp	r3, #3
1000230e:	d840      	bhi.n	10002392 <RCC_MPUConfig+0x92>
10002310:	a201      	add	r2, pc, #4	@ (adr r2, 10002318 <RCC_MPUConfig+0x18>)
10002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002316:	bf00      	nop
10002318:	10002329 	.word	0x10002329
1000231c:	1000233d 	.word	0x1000233d
10002320:	10002353 	.word	0x10002353
10002324:	10002367 	.word	0x10002367
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002328:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000232c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002330:	f003 0301 	and.w	r3, r3, #1
10002334:	2b01      	cmp	r3, #1
10002336:	d02e      	beq.n	10002396 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10002338:	2301      	movs	r3, #1
1000233a:	e053      	b.n	100023e4 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000233c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002340:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000234c:	d025      	beq.n	1000239a <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000234e:	2301      	movs	r3, #1
10002350:	e048      	b.n	100023e4 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002352:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000235a:	f003 0302 	and.w	r3, r3, #2
1000235e:	2b02      	cmp	r3, #2
10002360:	d01d      	beq.n	1000239e <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10002362:	2301      	movs	r3, #1
10002364:	e03e      	b.n	100023e4 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002366:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000236e:	f003 0302 	and.w	r3, r3, #2
10002372:	2b02      	cmp	r3, #2
10002374:	d001      	beq.n	1000237a <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10002376:	2301      	movs	r3, #1
10002378:	e034      	b.n	100023e4 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
1000237a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000237e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002380:	f023 0207 	bic.w	r2, r3, #7
10002384:	687b      	ldr	r3, [r7, #4]
10002386:	685b      	ldr	r3, [r3, #4]
10002388:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000238c:	4313      	orrs	r3, r2
1000238e:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
10002390:	e006      	b.n	100023a0 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10002392:	2301      	movs	r3, #1
10002394:	e026      	b.n	100023e4 <RCC_MPUConfig+0xe4>
      break;
10002396:	bf00      	nop
10002398:	e002      	b.n	100023a0 <RCC_MPUConfig+0xa0>
      break;
1000239a:	bf00      	nop
1000239c:	e000      	b.n	100023a0 <RCC_MPUConfig+0xa0>
      break;
1000239e:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100023a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023a4:	6a1b      	ldr	r3, [r3, #32]
100023a6:	f023 0203 	bic.w	r2, r3, #3
100023aa:	687b      	ldr	r3, [r7, #4]
100023ac:	681b      	ldr	r3, [r3, #0]
100023ae:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100023b2:	4313      	orrs	r3, r2
100023b4:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100023b6:	f7fe fbe1 	bl	10000b7c <HAL_GetTick>
100023ba:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100023bc:	e009      	b.n	100023d2 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100023be:	f7fe fbdd 	bl	10000b7c <HAL_GetTick>
100023c2:	4602      	mov	r2, r0
100023c4:	68fb      	ldr	r3, [r7, #12]
100023c6:	1ad3      	subs	r3, r2, r3
100023c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100023cc:	d901      	bls.n	100023d2 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
100023ce:	2303      	movs	r3, #3
100023d0:	e008      	b.n	100023e4 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100023d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023d6:	6a1b      	ldr	r3, [r3, #32]
100023d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100023dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100023e0:	d1ed      	bne.n	100023be <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
100023e2:	2300      	movs	r3, #0
}
100023e4:	4618      	mov	r0, r3
100023e6:	3710      	adds	r7, #16
100023e8:	46bd      	mov	sp, r7
100023ea:	bd80      	pop	{r7, pc}

100023ec <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
100023ec:	b580      	push	{r7, lr}
100023ee:	b084      	sub	sp, #16
100023f0:	af00      	add	r7, sp, #0
100023f2:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
100023f4:	687b      	ldr	r3, [r7, #4]
100023f6:	681b      	ldr	r3, [r3, #0]
100023f8:	2b02      	cmp	r3, #2
100023fa:	d01b      	beq.n	10002434 <RCC_AXISSConfig+0x48>
100023fc:	2b02      	cmp	r3, #2
100023fe:	d823      	bhi.n	10002448 <RCC_AXISSConfig+0x5c>
10002400:	2b00      	cmp	r3, #0
10002402:	d002      	beq.n	1000240a <RCC_AXISSConfig+0x1e>
10002404:	2b01      	cmp	r3, #1
10002406:	d00a      	beq.n	1000241e <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10002408:	e01e      	b.n	10002448 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000240a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000240e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002412:	f003 0301 	and.w	r3, r3, #1
10002416:	2b01      	cmp	r3, #1
10002418:	d018      	beq.n	1000244c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
1000241a:	2301      	movs	r3, #1
1000241c:	e079      	b.n	10002512 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000241e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002422:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000242a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000242e:	d00f      	beq.n	10002450 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10002430:	2301      	movs	r3, #1
10002432:	e06e      	b.n	10002512 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002434:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000243c:	f003 0302 	and.w	r3, r3, #2
10002440:	2b02      	cmp	r3, #2
10002442:	d007      	beq.n	10002454 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10002444:	2301      	movs	r3, #1
10002446:	e064      	b.n	10002512 <RCC_AXISSConfig+0x126>
      break;
10002448:	bf00      	nop
1000244a:	e004      	b.n	10002456 <RCC_AXISSConfig+0x6a>
      break;
1000244c:	bf00      	nop
1000244e:	e002      	b.n	10002456 <RCC_AXISSConfig+0x6a>
      break;
10002450:	bf00      	nop
10002452:	e000      	b.n	10002456 <RCC_AXISSConfig+0x6a>
      break;
10002454:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10002456:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000245c:	f023 0207 	bic.w	r2, r3, #7
10002460:	687b      	ldr	r3, [r7, #4]
10002462:	681b      	ldr	r3, [r3, #0]
10002464:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002468:	4313      	orrs	r3, r2
1000246a:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
1000246c:	687b      	ldr	r3, [r7, #4]
1000246e:	681b      	ldr	r3, [r3, #0]
10002470:	2b03      	cmp	r3, #3
10002472:	d016      	beq.n	100024a2 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002474:	f7fe fb82 	bl	10000b7c <HAL_GetTick>
10002478:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000247a:	e009      	b.n	10002490 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000247c:	f7fe fb7e 	bl	10000b7c <HAL_GetTick>
10002480:	4602      	mov	r2, r0
10002482:	68fb      	ldr	r3, [r7, #12]
10002484:	1ad3      	subs	r3, r2, r3
10002486:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000248a:	d901      	bls.n	10002490 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
1000248c:	2303      	movs	r3, #3
1000248e:	e040      	b.n	10002512 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002490:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000249a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000249e:	d1ed      	bne.n	1000247c <RCC_AXISSConfig+0x90>
100024a0:	e015      	b.n	100024ce <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100024a2:	f7fe fb6b 	bl	10000b7c <HAL_GetTick>
100024a6:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100024a8:	e009      	b.n	100024be <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100024aa:	f7fe fb67 	bl	10000b7c <HAL_GetTick>
100024ae:	4602      	mov	r2, r0
100024b0:	68fb      	ldr	r3, [r7, #12]
100024b2:	1ad3      	subs	r3, r2, r3
100024b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100024b8:	d901      	bls.n	100024be <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
100024ba:	2303      	movs	r3, #3
100024bc:	e029      	b.n	10002512 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100024be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100024c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100024c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100024cc:	d0ed      	beq.n	100024aa <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
100024ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100024d4:	f023 0207 	bic.w	r2, r3, #7
100024d8:	687b      	ldr	r3, [r7, #4]
100024da:	685b      	ldr	r3, [r3, #4]
100024dc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100024e0:	4313      	orrs	r3, r2
100024e2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100024e4:	f7fe fb4a 	bl	10000b7c <HAL_GetTick>
100024e8:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100024ea:	e009      	b.n	10002500 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100024ec:	f7fe fb46 	bl	10000b7c <HAL_GetTick>
100024f0:	4602      	mov	r2, r0
100024f2:	68fb      	ldr	r3, [r7, #12]
100024f4:	1ad3      	subs	r3, r2, r3
100024f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100024fa:	d901      	bls.n	10002500 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
100024fc:	2303      	movs	r3, #3
100024fe:	e008      	b.n	10002512 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002500:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002506:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000250a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000250e:	d1ed      	bne.n	100024ec <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10002510:	2300      	movs	r3, #0
}
10002512:	4618      	mov	r0, r3
10002514:	3710      	adds	r7, #16
10002516:	46bd      	mov	sp, r7
10002518:	bd80      	pop	{r7, pc}
	...

1000251c <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
1000251c:	b580      	push	{r7, lr}
1000251e:	b084      	sub	sp, #16
10002520:	af00      	add	r7, sp, #0
10002522:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10002524:	687b      	ldr	r3, [r7, #4]
10002526:	681b      	ldr	r3, [r3, #0]
10002528:	2b03      	cmp	r3, #3
1000252a:	d834      	bhi.n	10002596 <RCC_MCUConfig+0x7a>
1000252c:	a201      	add	r2, pc, #4	@ (adr r2, 10002534 <RCC_MCUConfig+0x18>)
1000252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002532:	bf00      	nop
10002534:	10002545 	.word	0x10002545
10002538:	10002559 	.word	0x10002559
1000253c:	1000256f 	.word	0x1000256f
10002540:	10002583 	.word	0x10002583
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002544:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002548:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000254c:	f003 0301 	and.w	r3, r3, #1
10002550:	2b01      	cmp	r3, #1
10002552:	d022      	beq.n	1000259a <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10002554:	2301      	movs	r3, #1
10002556:	e081      	b.n	1000265c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002558:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000255c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10002564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10002568:	d019      	beq.n	1000259e <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
1000256a:	2301      	movs	r3, #1
1000256c:	e076      	b.n	1000265c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
1000256e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002572:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002576:	f003 0310 	and.w	r3, r3, #16
1000257a:	2b10      	cmp	r3, #16
1000257c:	d011      	beq.n	100025a2 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
1000257e:	2301      	movs	r3, #1
10002580:	e06c      	b.n	1000265c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002582:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002586:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000258a:	f003 0302 	and.w	r3, r3, #2
1000258e:	2b02      	cmp	r3, #2
10002590:	d009      	beq.n	100025a6 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10002592:	2301      	movs	r3, #1
10002594:	e062      	b.n	1000265c <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10002596:	bf00      	nop
10002598:	e006      	b.n	100025a8 <RCC_MCUConfig+0x8c>
      break;
1000259a:	bf00      	nop
1000259c:	e004      	b.n	100025a8 <RCC_MCUConfig+0x8c>
      break;
1000259e:	bf00      	nop
100025a0:	e002      	b.n	100025a8 <RCC_MCUConfig+0x8c>
      break;
100025a2:	bf00      	nop
100025a4:	e000      	b.n	100025a8 <RCC_MCUConfig+0x8c>
      break;
100025a6:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
100025a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100025ae:	f023 0203 	bic.w	r2, r3, #3
100025b2:	687b      	ldr	r3, [r7, #4]
100025b4:	681b      	ldr	r3, [r3, #0]
100025b6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100025ba:	4313      	orrs	r3, r2
100025bc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100025be:	f7fe fadd 	bl	10000b7c <HAL_GetTick>
100025c2:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100025c4:	e009      	b.n	100025da <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100025c6:	f7fe fad9 	bl	10000b7c <HAL_GetTick>
100025ca:	4602      	mov	r2, r0
100025cc:	68fb      	ldr	r3, [r7, #12]
100025ce:	1ad3      	subs	r3, r2, r3
100025d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100025d4:	d901      	bls.n	100025da <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
100025d6:	2303      	movs	r3, #3
100025d8:	e040      	b.n	1000265c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100025da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100025de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100025e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100025e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100025e8:	d1ed      	bne.n	100025c6 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100025ea:	f000 f954 	bl	10002896 <HAL_RCC_GetSystemCoreClockFreq>
100025ee:	4603      	mov	r3, r0
100025f0:	4a1c      	ldr	r2, [pc, #112]	@ (10002664 <RCC_MCUConfig+0x148>)
100025f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100025f4:	4b1c      	ldr	r3, [pc, #112]	@ (10002668 <RCC_MCUConfig+0x14c>)
100025f6:	681b      	ldr	r3, [r3, #0]
100025f8:	4618      	mov	r0, r3
100025fa:	f7fe fa75 	bl	10000ae8 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
100025fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002602:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10002606:	f023 020f 	bic.w	r2, r3, #15
1000260a:	687b      	ldr	r3, [r7, #4]
1000260c:	685b      	ldr	r3, [r3, #4]
1000260e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002612:	4313      	orrs	r3, r2
10002614:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002618:	f7fe fab0 	bl	10000b7c <HAL_GetTick>
1000261c:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
1000261e:	e009      	b.n	10002634 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002620:	f7fe faac 	bl	10000b7c <HAL_GetTick>
10002624:	4602      	mov	r2, r0
10002626:	68fb      	ldr	r3, [r7, #12]
10002628:	1ad3      	subs	r3, r2, r3
1000262a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000262e:	d901      	bls.n	10002634 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10002630:	2303      	movs	r3, #3
10002632:	e013      	b.n	1000265c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002634:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002638:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
1000263c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002644:	d1ec      	bne.n	10002620 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002646:	f000 f926 	bl	10002896 <HAL_RCC_GetSystemCoreClockFreq>
1000264a:	4603      	mov	r3, r0
1000264c:	4a05      	ldr	r2, [pc, #20]	@ (10002664 <RCC_MCUConfig+0x148>)
1000264e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002650:	4b05      	ldr	r3, [pc, #20]	@ (10002668 <RCC_MCUConfig+0x14c>)
10002652:	681b      	ldr	r3, [r3, #0]
10002654:	4618      	mov	r0, r3
10002656:	f7fe fa47 	bl	10000ae8 <HAL_InitTick>
#endif

  return HAL_OK;
1000265a:	2300      	movs	r3, #0
}
1000265c:	4618      	mov	r0, r3
1000265e:	3710      	adds	r7, #16
10002660:	46bd      	mov	sp, r7
10002662:	bd80      	pop	{r7, pc}
10002664:	10020000 	.word	0x10020000
10002668:	10020004 	.word	0x10020004

1000266c <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
1000266c:	b480      	push	{r7}
1000266e:	b089      	sub	sp, #36	@ 0x24
10002670:	af00      	add	r7, sp, #0
10002672:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10002674:	2300      	movs	r3, #0
10002676:	61bb      	str	r3, [r7, #24]
10002678:	2301      	movs	r3, #1
1000267a:	617b      	str	r3, [r7, #20]
1000267c:	2300      	movs	r3, #0
1000267e:	613b      	str	r3, [r7, #16]
10002680:	2300      	movs	r3, #0
10002682:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10002684:	f04f 0300 	mov.w	r3, #0
10002688:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
1000268a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000268e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002692:	f003 0303 	and.w	r3, r3, #3
10002696:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10002698:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000269c:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
100026a0:	0c1b      	lsrs	r3, r3, #16
100026a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
100026a6:	3301      	adds	r3, #1
100026a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
100026aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026ae:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100026b2:	0c1b      	lsrs	r3, r3, #16
100026b4:	f003 0301 	and.w	r3, r3, #1
100026b8:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
100026ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026be:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100026c2:	08db      	lsrs	r3, r3, #3
100026c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
100026c8:	693a      	ldr	r2, [r7, #16]
100026ca:	fb02 f303 	mul.w	r3, r2, r3
100026ce:	ee07 3a90 	vmov	s15, r3
100026d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100026d6:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
100026da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100026de:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
100026e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
100026e6:	3301      	adds	r3, #1
100026e8:	ee07 3a90 	vmov	s15, r3
100026ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100026f0:	edd7 6a02 	vldr	s13, [r7, #8]
100026f4:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 10002850 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
100026f8:	eec6 7a86 	vdiv.f32	s15, s13, s12
100026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
10002700:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10002704:	69bb      	ldr	r3, [r7, #24]
10002706:	2b03      	cmp	r3, #3
10002708:	d85b      	bhi.n	100027c2 <HAL_RCC_GetPLL3ClockFreq+0x156>
1000270a:	a201      	add	r2, pc, #4	@ (adr r2, 10002710 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
1000270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002710:	10002721 	.word	0x10002721
10002714:	1000277f 	.word	0x1000277f
10002718:	1000279d 	.word	0x1000279d
1000271c:	100027bb 	.word	0x100027bb
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10002720:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002724:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10002728:	f003 0304 	and.w	r3, r3, #4
1000272c:	2b04      	cmp	r3, #4
1000272e:	d117      	bne.n	10002760 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002730:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002734:	699b      	ldr	r3, [r3, #24]
10002736:	f003 0303 	and.w	r3, r3, #3
1000273a:	4a46      	ldr	r2, [pc, #280]	@ (10002854 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000273c:	fa22 f303 	lsr.w	r3, r2, r3
10002740:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10002742:	68fa      	ldr	r2, [r7, #12]
10002744:	697b      	ldr	r3, [r7, #20]
10002746:	fbb2 f3f3 	udiv	r3, r2, r3
1000274a:	ee07 3a90 	vmov	s15, r3
1000274e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002752:	ed97 7a07 	vldr	s14, [r7, #28]
10002756:	ee67 7a27 	vmul.f32	s15, s14, s15
1000275a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
1000275e:	e030      	b.n	100027c2 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10002760:	4a3c      	ldr	r2, [pc, #240]	@ (10002854 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10002762:	697b      	ldr	r3, [r7, #20]
10002764:	fbb2 f3f3 	udiv	r3, r2, r3
10002768:	ee07 3a90 	vmov	s15, r3
1000276c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002770:	ed97 7a07 	vldr	s14, [r7, #28]
10002774:	ee67 7a27 	vmul.f32	s15, s14, s15
10002778:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000277c:	e021      	b.n	100027c2 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
1000277e:	4a36      	ldr	r2, [pc, #216]	@ (10002858 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10002780:	697b      	ldr	r3, [r7, #20]
10002782:	fbb2 f3f3 	udiv	r3, r2, r3
10002786:	ee07 3a90 	vmov	s15, r3
1000278a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000278e:	ed97 7a07 	vldr	s14, [r7, #28]
10002792:	ee67 7a27 	vmul.f32	s15, s14, s15
10002796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000279a:	e012      	b.n	100027c2 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
1000279c:	4a2f      	ldr	r2, [pc, #188]	@ (1000285c <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
1000279e:	697b      	ldr	r3, [r7, #20]
100027a0:	fbb2 f3f3 	udiv	r3, r2, r3
100027a4:	ee07 3a90 	vmov	s15, r3
100027a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
100027ac:	ed97 7a07 	vldr	s14, [r7, #28]
100027b0:	ee67 7a27 	vmul.f32	s15, s14, s15
100027b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100027b8:	e003      	b.n	100027c2 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
100027ba:	f04f 0300 	mov.w	r3, #0
100027be:	61fb      	str	r3, [r7, #28]
      break;
100027c0:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100027c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027c6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100027ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100027ce:	3301      	adds	r3, #1
100027d0:	ee07 3a90 	vmov	s15, r3
100027d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100027d8:	edd7 6a07 	vldr	s13, [r7, #28]
100027dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
100027e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100027e4:	ee17 2a90 	vmov	r2, s15
100027e8:	687b      	ldr	r3, [r7, #4]
100027ea:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100027ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100027f0:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100027f4:	0a1b      	lsrs	r3, r3, #8
100027f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100027fa:	3301      	adds	r3, #1
100027fc:	ee07 3a90 	vmov	s15, r3
10002800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002804:	edd7 6a07 	vldr	s13, [r7, #28]
10002808:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000280c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002810:	ee17 2a90 	vmov	r2, s15
10002814:	687b      	ldr	r3, [r7, #4]
10002816:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10002818:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000281c:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10002820:	0c1b      	lsrs	r3, r3, #16
10002822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10002826:	3301      	adds	r3, #1
10002828:	ee07 3a90 	vmov	s15, r3
1000282c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002830:	edd7 6a07 	vldr	s13, [r7, #28]
10002834:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000283c:	ee17 2a90 	vmov	r2, s15
10002840:	687b      	ldr	r3, [r7, #4]
10002842:	609a      	str	r2, [r3, #8]
}
10002844:	bf00      	nop
10002846:	3724      	adds	r7, #36	@ 0x24
10002848:	46bd      	mov	sp, r7
1000284a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000284e:	4770      	bx	lr
10002850:	46000000 	.word	0x46000000
10002854:	03d09000 	.word	0x03d09000
10002858:	016e3600 	.word	0x016e3600
1000285c:	003d0900 	.word	0x003d0900

10002860 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10002860:	b580      	push	{r7, lr}
10002862:	b082      	sub	sp, #8
10002864:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10002866:	2300      	movs	r3, #0
10002868:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
1000286a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000286e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10002872:	f003 030f 	and.w	r3, r3, #15
10002876:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10002878:	687b      	ldr	r3, [r7, #4]
1000287a:	2b09      	cmp	r3, #9
1000287c:	d901      	bls.n	10002882 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
1000287e:	2309      	movs	r3, #9
10002880:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10002882:	f000 f80f 	bl	100028a4 <HAL_RCC_GetMCUSSFreq>
10002886:	4602      	mov	r2, r0
10002888:	687b      	ldr	r3, [r7, #4]
1000288a:	fa22 f303 	lsr.w	r3, r2, r3
}
1000288e:	4618      	mov	r0, r3
10002890:	3708      	adds	r7, #8
10002892:	46bd      	mov	sp, r7
10002894:	bd80      	pop	{r7, pc}

10002896 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10002896:	b580      	push	{r7, lr}
10002898:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
1000289a:	f7ff ffe1 	bl	10002860 <HAL_RCC_GetMCUFreq>
1000289e:	4603      	mov	r3, r0
#endif
}
100028a0:	4618      	mov	r0, r3
100028a2:	bd80      	pop	{r7, pc}

100028a4 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
100028a4:	b580      	push	{r7, lr}
100028a6:	b084      	sub	sp, #16
100028a8:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100028aa:	2300      	movs	r3, #0
100028ac:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100028ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100028b4:	f003 0303 	and.w	r3, r3, #3
100028b8:	2b03      	cmp	r3, #3
100028ba:	d822      	bhi.n	10002902 <HAL_RCC_GetMCUSSFreq+0x5e>
100028bc:	a201      	add	r2, pc, #4	@ (adr r2, 100028c4 <HAL_RCC_GetMCUSSFreq+0x20>)
100028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100028c2:	bf00      	nop
100028c4:	100028e3 	.word	0x100028e3
100028c8:	100028f7 	.word	0x100028f7
100028cc:	100028fd 	.word	0x100028fd
100028d0:	100028d5 	.word	0x100028d5
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100028d4:	463b      	mov	r3, r7
100028d6:	4618      	mov	r0, r3
100028d8:	f7ff fec8 	bl	1000266c <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
100028dc:	683b      	ldr	r3, [r7, #0]
100028de:	60fb      	str	r3, [r7, #12]
      break;
100028e0:	e00f      	b.n	10002902 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100028e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100028e6:	699b      	ldr	r3, [r3, #24]
100028e8:	f003 0303 	and.w	r3, r3, #3
100028ec:	4a07      	ldr	r2, [pc, #28]	@ (1000290c <HAL_RCC_GetMCUSSFreq+0x68>)
100028ee:	fa22 f303 	lsr.w	r3, r2, r3
100028f2:	60fb      	str	r3, [r7, #12]

      break;
100028f4:	e005      	b.n	10002902 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
100028f6:	4b06      	ldr	r3, [pc, #24]	@ (10002910 <HAL_RCC_GetMCUSSFreq+0x6c>)
100028f8:	60fb      	str	r3, [r7, #12]
      break;
100028fa:	e002      	b.n	10002902 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
100028fc:	4b05      	ldr	r3, [pc, #20]	@ (10002914 <HAL_RCC_GetMCUSSFreq+0x70>)
100028fe:	60fb      	str	r3, [r7, #12]
      break;
10002900:	bf00      	nop
  }

  return mcussfreq;
10002902:	68fb      	ldr	r3, [r7, #12]
}
10002904:	4618      	mov	r0, r3
10002906:	3710      	adds	r7, #16
10002908:	46bd      	mov	sp, r7
1000290a:	bd80      	pop	{r7, pc}
1000290c:	03d09000 	.word	0x03d09000
10002910:	016e3600 	.word	0x016e3600
10002914:	003d0900 	.word	0x003d0900

10002918 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10002918:	b580      	push	{r7, lr}
1000291a:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
1000291c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002920:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	@ 0xc18
10002924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
10002928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
1000292c:	d107      	bne.n	1000293e <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
1000292e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002932:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
10002936:	f8c3 2c18 	str.w	r2, [r3, #3096]	@ 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
1000293a:	f000 f802 	bl	10002942 <HAL_RCC_WAKEUP_Callback>
  }
}
1000293e:	bf00      	nop
10002940:	bd80      	pop	{r7, pc}

10002942 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10002942:	b480      	push	{r7}
10002944:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10002946:	bf00      	nop
10002948:	46bd      	mov	sp, r7
1000294a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000294e:	4770      	bx	lr

10002950 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10002950:	b580      	push	{r7, lr}
10002952:	b084      	sub	sp, #16
10002954:	af00      	add	r7, sp, #0
10002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10002958:	687b      	ldr	r3, [r7, #4]
1000295a:	681b      	ldr	r3, [r3, #0]
1000295c:	2b00      	cmp	r3, #0
1000295e:	f000 8171 	beq.w	10002c44 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10002962:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002968:	f003 0307 	and.w	r3, r3, #7
1000296c:	2b02      	cmp	r3, #2
1000296e:	d108      	bne.n	10002982 <RCCEx_PLL2_Config+0x32>
10002970:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002976:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000297a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000297e:	f000 815f 	beq.w	10002c40 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10002982:	687b      	ldr	r3, [r7, #4]
10002984:	681b      	ldr	r3, [r3, #0]
10002986:	2b02      	cmp	r3, #2
10002988:	f040 8130 	bne.w	10002bec <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
1000298c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002992:	f003 0303 	and.w	r3, r3, #3
10002996:	2b00      	cmp	r3, #0
10002998:	d008      	beq.n	100029ac <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
1000299a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100029a0:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100029a4:	2b01      	cmp	r3, #1
100029a6:	d001      	beq.n	100029ac <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100029a8:	2301      	movs	r3, #1
100029aa:	e14c      	b.n	10002c46 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100029ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100029b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100029b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100029bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
100029c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100029c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100029cc:	f023 0301 	bic.w	r3, r3, #1
100029d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100029d4:	f7fe f8d2 	bl	10000b7c <HAL_GetTick>
100029d8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100029da:	e008      	b.n	100029ee <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100029dc:	f7fe f8ce 	bl	10000b7c <HAL_GetTick>
100029e0:	4602      	mov	r2, r0
100029e2:	68fb      	ldr	r3, [r7, #12]
100029e4:	1ad3      	subs	r3, r2, r3
100029e6:	2b64      	cmp	r3, #100	@ 0x64
100029e8:	d901      	bls.n	100029ee <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
100029ea:	2303      	movs	r3, #3
100029ec:	e12b      	b.n	10002c46 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100029ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100029f6:	f003 0302 	and.w	r3, r3, #2
100029fa:	2b02      	cmp	r3, #2
100029fc:	d0ee      	beq.n	100029dc <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
100029fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a02:	6a1b      	ldr	r3, [r3, #32]
10002a04:	f003 0303 	and.w	r3, r3, #3
10002a08:	2b02      	cmp	r3, #2
10002a0a:	d107      	bne.n	10002a1c <RCCEx_PLL2_Config+0xcc>
10002a0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a10:	6a1b      	ldr	r3, [r3, #32]
10002a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002a1a:	d00e      	beq.n	10002a3a <RCCEx_PLL2_Config+0xea>
10002a1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a20:	6a1b      	ldr	r3, [r3, #32]
10002a22:	f003 0303 	and.w	r3, r3, #3
10002a26:	2b03      	cmp	r3, #3
10002a28:	d112      	bne.n	10002a50 <RCCEx_PLL2_Config+0x100>
10002a2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a2e:	6a1b      	ldr	r3, [r3, #32]
10002a30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002a34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002a38:	d10a      	bne.n	10002a50 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10002a3a:	687b      	ldr	r3, [r7, #4]
10002a3c:	685a      	ldr	r2, [r3, #4]
10002a3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002a44:	f003 0303 	and.w	r3, r3, #3
10002a48:	429a      	cmp	r2, r3
10002a4a:	d00c      	beq.n	10002a66 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10002a4c:	2301      	movs	r3, #1
10002a4e:	e0fa      	b.n	10002c46 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10002a50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002a56:	f023 0203 	bic.w	r2, r3, #3
10002a5a:	687b      	ldr	r3, [r7, #4]
10002a5c:	685b      	ldr	r3, [r3, #4]
10002a5e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a62:	4313      	orrs	r3, r2
10002a64:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10002a66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a6a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
10002a6e:	4b78      	ldr	r3, [pc, #480]	@ (10002c50 <RCCEx_PLL2_Config+0x300>)
10002a70:	4013      	ands	r3, r2
10002a72:	687a      	ldr	r2, [r7, #4]
10002a74:	68d2      	ldr	r2, [r2, #12]
10002a76:	1e51      	subs	r1, r2, #1
10002a78:	687a      	ldr	r2, [r7, #4]
10002a7a:	6892      	ldr	r2, [r2, #8]
10002a7c:	3a01      	subs	r2, #1
10002a7e:	0412      	lsls	r2, r2, #16
10002a80:	430a      	orrs	r2, r1
10002a82:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002a86:	4313      	orrs	r3, r2
10002a88:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
10002a8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
10002a94:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10002a98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10002a9c:	687a      	ldr	r2, [r7, #4]
10002a9e:	6912      	ldr	r2, [r2, #16]
10002aa0:	1e51      	subs	r1, r2, #1
10002aa2:	687a      	ldr	r2, [r7, #4]
10002aa4:	6952      	ldr	r2, [r2, #20]
10002aa6:	3a01      	subs	r2, #1
10002aa8:	0212      	lsls	r2, r2, #8
10002aaa:	4311      	orrs	r1, r2
10002aac:	687a      	ldr	r2, [r7, #4]
10002aae:	6992      	ldr	r2, [r2, #24]
10002ab0:	3a01      	subs	r2, #1
10002ab2:	0412      	lsls	r2, r2, #16
10002ab4:	430a      	orrs	r2, r1
10002ab6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002aba:	4313      	orrs	r3, r2
10002abc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10002ac0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ac4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10002ac8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002ad0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10002ad4:	687b      	ldr	r3, [r7, #4]
10002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002ad8:	2b02      	cmp	r3, #2
10002ada:	d003      	beq.n	10002ae4 <RCCEx_PLL2_Config+0x194>
10002adc:	687b      	ldr	r3, [r7, #4]
10002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002ae0:	2b00      	cmp	r3, #0
10002ae2:	d10c      	bne.n	10002afe <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10002ae4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ae8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10002aec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002af0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002af4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002af8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
10002afc:	e00f      	b.n	10002b1e <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10002afe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10002b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002b0a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002b0e:	687a      	ldr	r2, [r7, #4]
10002b10:	6a12      	ldr	r2, [r2, #32]
10002b12:	00d2      	lsls	r2, r2, #3
10002b14:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002b18:	4313      	orrs	r3, r2
10002b1a:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10002b1e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10002b26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002b2e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002b32:	687b      	ldr	r3, [r7, #4]
10002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002b36:	2b02      	cmp	r3, #2
10002b38:	d124      	bne.n	10002b84 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10002b3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
10002b42:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002b46:	687b      	ldr	r3, [r7, #4]
10002b48:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10002b4a:	687b      	ldr	r3, [r7, #4]
10002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002b4e:	4319      	orrs	r1, r3
10002b50:	687b      	ldr	r3, [r7, #4]
10002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002b54:	4319      	orrs	r1, r3
10002b56:	687b      	ldr	r3, [r7, #4]
10002b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10002b5a:	4319      	orrs	r1, r3
10002b5c:	687b      	ldr	r3, [r7, #4]
10002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002b60:	041b      	lsls	r3, r3, #16
10002b62:	430b      	orrs	r3, r1
10002b64:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002b68:	4313      	orrs	r3, r2
10002b6a:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10002b6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002b76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b7a:	f043 0304 	orr.w	r3, r3, #4
10002b7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
10002b82:	e009      	b.n	10002b98 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10002b84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002b8c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002b90:	f023 0304 	bic.w	r3, r3, #4
10002b94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10002b98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002ba0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ba4:	f043 0301 	orr.w	r3, r3, #1
10002ba8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002bac:	f7fd ffe6 	bl	10000b7c <HAL_GetTick>
10002bb0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002bb2:	e008      	b.n	10002bc6 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002bb4:	f7fd ffe2 	bl	10000b7c <HAL_GetTick>
10002bb8:	4602      	mov	r2, r0
10002bba:	68fb      	ldr	r3, [r7, #12]
10002bbc:	1ad3      	subs	r3, r2, r3
10002bbe:	2b64      	cmp	r3, #100	@ 0x64
10002bc0:	d901      	bls.n	10002bc6 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10002bc2:	2303      	movs	r3, #3
10002bc4:	e03f      	b.n	10002c46 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002bc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002bce:	f003 0302 	and.w	r3, r3, #2
10002bd2:	2b02      	cmp	r3, #2
10002bd4:	d1ee      	bne.n	10002bb4 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002bd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002bde:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002be2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002be6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10002bea:	e02b      	b.n	10002c44 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002bec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002bf4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002bfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10002c00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002c08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002c0c:	f023 0301 	bic.w	r3, r3, #1
10002c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002c14:	f7fd ffb2 	bl	10000b7c <HAL_GetTick>
10002c18:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002c1a:	e008      	b.n	10002c2e <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002c1c:	f7fd ffae 	bl	10000b7c <HAL_GetTick>
10002c20:	4602      	mov	r2, r0
10002c22:	68fb      	ldr	r3, [r7, #12]
10002c24:	1ad3      	subs	r3, r2, r3
10002c26:	2b64      	cmp	r3, #100	@ 0x64
10002c28:	d901      	bls.n	10002c2e <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10002c2a:	2303      	movs	r3, #3
10002c2c:	e00b      	b.n	10002c46 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10002c2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10002c36:	f003 0302 	and.w	r3, r3, #2
10002c3a:	2b02      	cmp	r3, #2
10002c3c:	d0ee      	beq.n	10002c1c <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10002c3e:	e001      	b.n	10002c44 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002c40:	2301      	movs	r3, #1
10002c42:	e000      	b.n	10002c46 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10002c44:	2300      	movs	r3, #0

}
10002c46:	4618      	mov	r0, r3
10002c48:	3710      	adds	r7, #16
10002c4a:	46bd      	mov	sp, r7
10002c4c:	bd80      	pop	{r7, pc}
10002c4e:	bf00      	nop
10002c50:	ffc0fe00 	.word	0xffc0fe00

10002c54 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10002c54:	b580      	push	{r7, lr}
10002c56:	b084      	sub	sp, #16
10002c58:	af00      	add	r7, sp, #0
10002c5a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10002c5c:	687b      	ldr	r3, [r7, #4]
10002c5e:	681b      	ldr	r3, [r3, #0]
10002c60:	2b00      	cmp	r3, #0
10002c62:	f000 815a 	beq.w	10002f1a <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10002c66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002c6c:	f003 0303 	and.w	r3, r3, #3
10002c70:	2b03      	cmp	r3, #3
10002c72:	d108      	bne.n	10002c86 <RCCEx_PLL3_Config+0x32>
10002c74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002c7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002c82:	f000 8148 	beq.w	10002f16 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10002c86:	687b      	ldr	r3, [r7, #4]
10002c88:	681b      	ldr	r3, [r3, #0]
10002c8a:	2b02      	cmp	r3, #2
10002c8c:	f040 8119 	bne.w	10002ec2 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002c90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002c94:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002c98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002ca0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10002ca4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ca8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002cac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002cb0:	f023 0301 	bic.w	r3, r3, #1
10002cb4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002cb8:	f7fd ff60 	bl	10000b7c <HAL_GetTick>
10002cbc:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002cbe:	e008      	b.n	10002cd2 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002cc0:	f7fd ff5c 	bl	10000b7c <HAL_GetTick>
10002cc4:	4602      	mov	r2, r0
10002cc6:	68fb      	ldr	r3, [r7, #12]
10002cc8:	1ad3      	subs	r3, r2, r3
10002cca:	2b64      	cmp	r3, #100	@ 0x64
10002ccc:	d901      	bls.n	10002cd2 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10002cce:	2303      	movs	r3, #3
10002cd0:	e124      	b.n	10002f1c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002cd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002cd6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002cda:	f003 0302 	and.w	r3, r3, #2
10002cde:	2b02      	cmp	r3, #2
10002ce0:	d0ee      	beq.n	10002cc0 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10002ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ce6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002cea:	f023 0203 	bic.w	r2, r3, #3
10002cee:	687b      	ldr	r3, [r7, #4]
10002cf0:	685b      	ldr	r3, [r3, #4]
10002cf2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002cf6:	4313      	orrs	r3, r2
10002cf8:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002cfc:	e008      	b.n	10002d10 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002cfe:	f7fd ff3d 	bl	10000b7c <HAL_GetTick>
10002d02:	4602      	mov	r2, r0
10002d04:	68fb      	ldr	r3, [r7, #12]
10002d06:	1ad3      	subs	r3, r2, r3
10002d08:	2b64      	cmp	r3, #100	@ 0x64
10002d0a:	d901      	bls.n	10002d10 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10002d0c:	2303      	movs	r3, #3
10002d0e:	e105      	b.n	10002f1c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002d10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d14:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10002d18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002d20:	d1ed      	bne.n	10002cfe <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10002d22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d26:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10002d2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10002d2e:	687b      	ldr	r3, [r7, #4]
10002d30:	69db      	ldr	r3, [r3, #28]
10002d32:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002d36:	4313      	orrs	r3, r2
10002d38:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10002d3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d40:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
10002d44:	4b77      	ldr	r3, [pc, #476]	@ (10002f24 <RCCEx_PLL3_Config+0x2d0>)
10002d46:	4013      	ands	r3, r2
10002d48:	687a      	ldr	r2, [r7, #4]
10002d4a:	68d2      	ldr	r2, [r2, #12]
10002d4c:	1e51      	subs	r1, r2, #1
10002d4e:	687a      	ldr	r2, [r7, #4]
10002d50:	6892      	ldr	r2, [r2, #8]
10002d52:	3a01      	subs	r2, #1
10002d54:	0412      	lsls	r2, r2, #16
10002d56:	430a      	orrs	r2, r1
10002d58:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002d5c:	4313      	orrs	r3, r2
10002d5e:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
10002d62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d66:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10002d6a:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10002d6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10002d72:	687a      	ldr	r2, [r7, #4]
10002d74:	6912      	ldr	r2, [r2, #16]
10002d76:	1e51      	subs	r1, r2, #1
10002d78:	687a      	ldr	r2, [r7, #4]
10002d7a:	6952      	ldr	r2, [r2, #20]
10002d7c:	3a01      	subs	r2, #1
10002d7e:	0212      	lsls	r2, r2, #8
10002d80:	4311      	orrs	r1, r2
10002d82:	687a      	ldr	r2, [r7, #4]
10002d84:	6992      	ldr	r2, [r2, #24]
10002d86:	3a01      	subs	r2, #1
10002d88:	0412      	lsls	r2, r2, #16
10002d8a:	430a      	orrs	r2, r1
10002d8c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002d90:	4313      	orrs	r3, r2
10002d92:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10002d96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002d9a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002d9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10002da6:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10002daa:	687b      	ldr	r3, [r7, #4]
10002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002dae:	2b02      	cmp	r3, #2
10002db0:	d003      	beq.n	10002dba <RCCEx_PLL3_Config+0x166>
10002db2:	687b      	ldr	r3, [r7, #4]
10002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002db6:	2b00      	cmp	r3, #0
10002db8:	d10c      	bne.n	10002dd4 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10002dba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dbe:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002dc2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002dc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002dca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002dce:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
10002dd2:	e00f      	b.n	10002df4 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10002dd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002dd8:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002ddc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10002de0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10002de4:	687a      	ldr	r2, [r7, #4]
10002de6:	6a12      	ldr	r2, [r2, #32]
10002de8:	00d2      	lsls	r2, r2, #3
10002dea:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002dee:	4313      	orrs	r3, r2
10002df0:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10002df4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002df8:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10002dfc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10002e04:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002e08:	687b      	ldr	r3, [r7, #4]
10002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002e0c:	2b02      	cmp	r3, #2
10002e0e:	d124      	bne.n	10002e5a <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10002e10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e14:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
10002e18:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10002e1c:	687b      	ldr	r3, [r7, #4]
10002e1e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10002e20:	687b      	ldr	r3, [r7, #4]
10002e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002e24:	4319      	orrs	r1, r3
10002e26:	687b      	ldr	r3, [r7, #4]
10002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002e2a:	4319      	orrs	r1, r3
10002e2c:	687b      	ldr	r3, [r7, #4]
10002e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10002e30:	4319      	orrs	r1, r3
10002e32:	687b      	ldr	r3, [r7, #4]
10002e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10002e36:	041b      	lsls	r3, r3, #16
10002e38:	430b      	orrs	r3, r1
10002e3a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002e3e:	4313      	orrs	r3, r2
10002e40:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10002e44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e48:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002e4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e50:	f043 0304 	orr.w	r3, r3, #4
10002e54:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
10002e58:	e009      	b.n	10002e6e <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10002e5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e5e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002e62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e66:	f023 0304 	bic.w	r3, r3, #4
10002e6a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10002e6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002e72:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002e76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002e7a:	f043 0301 	orr.w	r3, r3, #1
10002e7e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002e82:	f7fd fe7b 	bl	10000b7c <HAL_GetTick>
10002e86:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002e88:	e008      	b.n	10002e9c <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002e8a:	f7fd fe77 	bl	10000b7c <HAL_GetTick>
10002e8e:	4602      	mov	r2, r0
10002e90:	68fb      	ldr	r3, [r7, #12]
10002e92:	1ad3      	subs	r3, r2, r3
10002e94:	2b64      	cmp	r3, #100	@ 0x64
10002e96:	d901      	bls.n	10002e9c <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10002e98:	2303      	movs	r3, #3
10002e9a:	e03f      	b.n	10002f1c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002e9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ea0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002ea4:	f003 0302 	and.w	r3, r3, #2
10002ea8:	2b02      	cmp	r3, #2
10002eaa:	d1ee      	bne.n	10002e8a <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002eac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002eb0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002eb4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002eb8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10002ebc:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10002ec0:	e02b      	b.n	10002f1a <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002ec2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ec6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002eca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002ed2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10002ed6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002eda:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002ede:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002ee2:	f023 0301 	bic.w	r3, r3, #1
10002ee6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002eea:	f7fd fe47 	bl	10000b7c <HAL_GetTick>
10002eee:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002ef0:	e008      	b.n	10002f04 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002ef2:	f7fd fe43 	bl	10000b7c <HAL_GetTick>
10002ef6:	4602      	mov	r2, r0
10002ef8:	68fb      	ldr	r3, [r7, #12]
10002efa:	1ad3      	subs	r3, r2, r3
10002efc:	2b64      	cmp	r3, #100	@ 0x64
10002efe:	d901      	bls.n	10002f04 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002f00:	2303      	movs	r3, #3
10002f02:	e00b      	b.n	10002f1c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002f04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f08:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10002f0c:	f003 0302 	and.w	r3, r3, #2
10002f10:	2b02      	cmp	r3, #2
10002f12:	d0ee      	beq.n	10002ef2 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10002f14:	e001      	b.n	10002f1a <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002f16:	2301      	movs	r3, #1
10002f18:	e000      	b.n	10002f1c <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10002f1a:	2300      	movs	r3, #0
}
10002f1c:	4618      	mov	r0, r3
10002f1e:	3710      	adds	r7, #16
10002f20:	46bd      	mov	sp, r7
10002f22:	bd80      	pop	{r7, pc}
10002f24:	ffc0fe00 	.word	0xffc0fe00

10002f28 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10002f28:	b580      	push	{r7, lr}
10002f2a:	b084      	sub	sp, #16
10002f2c:	af00      	add	r7, sp, #0
10002f2e:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10002f30:	687b      	ldr	r3, [r7, #4]
10002f32:	681b      	ldr	r3, [r3, #0]
10002f34:	2b00      	cmp	r3, #0
10002f36:	f000 8147 	beq.w	100031c8 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10002f3a:	687b      	ldr	r3, [r7, #4]
10002f3c:	681b      	ldr	r3, [r3, #0]
10002f3e:	2b02      	cmp	r3, #2
10002f40:	f040 8119 	bne.w	10003176 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002f44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f48:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002f4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10002f54:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10002f58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f5c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002f60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10002f64:	f023 0301 	bic.w	r3, r3, #1
10002f68:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002f6c:	f7fd fe06 	bl	10000b7c <HAL_GetTick>
10002f70:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002f72:	e008      	b.n	10002f86 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002f74:	f7fd fe02 	bl	10000b7c <HAL_GetTick>
10002f78:	4602      	mov	r2, r0
10002f7a:	68fb      	ldr	r3, [r7, #12]
10002f7c:	1ad3      	subs	r3, r2, r3
10002f7e:	2b64      	cmp	r3, #100	@ 0x64
10002f80:	d901      	bls.n	10002f86 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10002f82:	2303      	movs	r3, #3
10002f84:	e121      	b.n	100031ca <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002f86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f8a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10002f8e:	f003 0302 	and.w	r3, r3, #2
10002f92:	2b02      	cmp	r3, #2
10002f94:	d0ee      	beq.n	10002f74 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002f96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002f9a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002f9e:	f023 0203 	bic.w	r2, r3, #3
10002fa2:	687b      	ldr	r3, [r7, #4]
10002fa4:	685b      	ldr	r3, [r3, #4]
10002fa6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002faa:	4313      	orrs	r3, r2
10002fac:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002fb0:	e008      	b.n	10002fc4 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002fb2:	f7fd fde3 	bl	10000b7c <HAL_GetTick>
10002fb6:	4602      	mov	r2, r0
10002fb8:	68fb      	ldr	r3, [r7, #12]
10002fba:	1ad3      	subs	r3, r2, r3
10002fbc:	2b64      	cmp	r3, #100	@ 0x64
10002fbe:	d901      	bls.n	10002fc4 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10002fc0:	2303      	movs	r3, #3
10002fc2:	e102      	b.n	100031ca <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002fc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fc8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10002fcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10002fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10002fd4:	d1ed      	bne.n	10002fb2 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10002fd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002fda:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10002fde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10002fe2:	687b      	ldr	r3, [r7, #4]
10002fe4:	69db      	ldr	r3, [r3, #28]
10002fe6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10002fea:	4313      	orrs	r3, r2
10002fec:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002ff0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10002ff4:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
10002ff8:	4b76      	ldr	r3, [pc, #472]	@ (100031d4 <RCCEx_PLL4_Config+0x2ac>)
10002ffa:	4013      	ands	r3, r2
10002ffc:	687a      	ldr	r2, [r7, #4]
10002ffe:	68d2      	ldr	r2, [r2, #12]
10003000:	1e51      	subs	r1, r2, #1
10003002:	687a      	ldr	r2, [r7, #4]
10003004:	6892      	ldr	r2, [r2, #8]
10003006:	3a01      	subs	r2, #1
10003008:	0412      	lsls	r2, r2, #16
1000300a:	430a      	orrs	r2, r1
1000300c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003010:	4313      	orrs	r3, r2
10003012:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
10003016:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000301a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
1000301e:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10003022:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10003026:	687a      	ldr	r2, [r7, #4]
10003028:	6912      	ldr	r2, [r2, #16]
1000302a:	1e51      	subs	r1, r2, #1
1000302c:	687a      	ldr	r2, [r7, #4]
1000302e:	6952      	ldr	r2, [r2, #20]
10003030:	3a01      	subs	r2, #1
10003032:	0212      	lsls	r2, r2, #8
10003034:	4311      	orrs	r1, r2
10003036:	687a      	ldr	r2, [r7, #4]
10003038:	6992      	ldr	r2, [r2, #24]
1000303a:	3a01      	subs	r2, #1
1000303c:	0412      	lsls	r2, r2, #16
1000303e:	430a      	orrs	r2, r1
10003040:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10003044:	4313      	orrs	r3, r2
10003046:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
1000304a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000304e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10003052:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
1000305a:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
1000305e:	687b      	ldr	r3, [r7, #4]
10003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003062:	2b02      	cmp	r3, #2
10003064:	d003      	beq.n	1000306e <RCCEx_PLL4_Config+0x146>
10003066:	687b      	ldr	r3, [r7, #4]
10003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000306a:	2b00      	cmp	r3, #0
1000306c:	d10c      	bne.n	10003088 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
1000306e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003072:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10003076:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000307a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000307e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003082:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
10003086:	e00f      	b.n	100030a8 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10003088:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000308c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10003090:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10003094:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10003098:	687a      	ldr	r2, [r7, #4]
1000309a:	6a12      	ldr	r2, [r2, #32]
1000309c:	00d2      	lsls	r2, r2, #3
1000309e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100030a2:	4313      	orrs	r3, r2
100030a4:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
100030a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030ac:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
100030b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100030b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100030b8:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100030bc:	687b      	ldr	r3, [r7, #4]
100030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100030c0:	2b02      	cmp	r3, #2
100030c2:	d124      	bne.n	1000310e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
100030c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030c8:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
100030cc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
100030d0:	687b      	ldr	r3, [r7, #4]
100030d2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100030d4:	687b      	ldr	r3, [r7, #4]
100030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100030d8:	4319      	orrs	r1, r3
100030da:	687b      	ldr	r3, [r7, #4]
100030dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100030de:	4319      	orrs	r1, r3
100030e0:	687b      	ldr	r3, [r7, #4]
100030e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100030e4:	4319      	orrs	r1, r3
100030e6:	687b      	ldr	r3, [r7, #4]
100030e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100030ea:	041b      	lsls	r3, r3, #16
100030ec:	430b      	orrs	r3, r1
100030ee:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100030f2:	4313      	orrs	r3, r2
100030f4:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
100030f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100030fc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003100:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003104:	f043 0304 	orr.w	r3, r3, #4
10003108:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
1000310c:	e009      	b.n	10003122 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
1000310e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003112:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003116:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000311a:	f023 0304 	bic.w	r3, r3, #4
1000311e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10003122:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003126:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000312a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000312e:	f043 0301 	orr.w	r3, r3, #1
10003132:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003136:	f7fd fd21 	bl	10000b7c <HAL_GetTick>
1000313a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
1000313c:	e008      	b.n	10003150 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000313e:	f7fd fd1d 	bl	10000b7c <HAL_GetTick>
10003142:	4602      	mov	r2, r0
10003144:	68fb      	ldr	r3, [r7, #12]
10003146:	1ad3      	subs	r3, r2, r3
10003148:	2b64      	cmp	r3, #100	@ 0x64
1000314a:	d901      	bls.n	10003150 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
1000314c:	2303      	movs	r3, #3
1000314e:	e03c      	b.n	100031ca <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003150:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003154:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003158:	f003 0302 	and.w	r3, r3, #2
1000315c:	2b02      	cmp	r3, #2
1000315e:	d1ee      	bne.n	1000313e <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003160:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003164:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003168:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000316c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10003170:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10003174:	e028      	b.n	100031c8 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003176:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000317a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000317e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003186:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
1000318a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000318e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003192:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003196:	f023 0301 	bic.w	r3, r3, #1
1000319a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000319e:	f7fd fced 	bl	10000b7c <HAL_GetTick>
100031a2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100031a4:	e008      	b.n	100031b8 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100031a6:	f7fd fce9 	bl	10000b7c <HAL_GetTick>
100031aa:	4602      	mov	r2, r0
100031ac:	68fb      	ldr	r3, [r7, #12]
100031ae:	1ad3      	subs	r3, r2, r3
100031b0:	2b64      	cmp	r3, #100	@ 0x64
100031b2:	d901      	bls.n	100031b8 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
100031b4:	2303      	movs	r3, #3
100031b6:	e008      	b.n	100031ca <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100031b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100031bc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100031c0:	f003 0302 	and.w	r3, r3, #2
100031c4:	2b02      	cmp	r3, #2
100031c6:	d0ee      	beq.n	100031a6 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
100031c8:	2300      	movs	r3, #0
}
100031ca:	4618      	mov	r0, r3
100031cc:	3710      	adds	r7, #16
100031ce:	46bd      	mov	sp, r7
100031d0:	bd80      	pop	{r7, pc}
100031d2:	bf00      	nop
100031d4:	ffc0fe00 	.word	0xffc0fe00

100031d8 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
100031d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
100031dc:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
100031e0:	af00      	add	r7, sp, #0
100031e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100031e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100031ea:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
100031ec:	2300      	movs	r3, #0
100031ee:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
100031f2:	2300      	movs	r3, #0
100031f4:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
100031f8:	2300      	movs	r3, #0
100031fa:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
100031fe:	2300      	movs	r3, #0
10003200:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10003204:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003208:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000320c:	681b      	ldr	r3, [r3, #0]
1000320e:	e9d3 2300 	ldrd	r2, r3, [r3]
10003212:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
10003216:	2500      	movs	r5, #0
10003218:	ea54 0305 	orrs.w	r3, r4, r5
1000321c:	d011      	beq.n	10003242 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
1000321e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003222:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10003226:	f023 0103 	bic.w	r1, r3, #3
1000322a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000322e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003232:	681b      	ldr	r3, [r3, #0]
10003234:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
10003238:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000323c:	430b      	orrs	r3, r1
1000323e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10003242:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003246:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000324a:	681b      	ldr	r3, [r3, #0]
1000324c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003250:	f002 0810 	and.w	r8, r2, #16
10003254:	f04f 0900 	mov.w	r9, #0
10003258:	ea58 0309 	orrs.w	r3, r8, r9
1000325c:	d038      	beq.n	100032d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
1000325e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003262:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003266:	681b      	ldr	r3, [r3, #0]
10003268:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
1000326c:	2b01      	cmp	r3, #1
1000326e:	d11d      	bne.n	100032ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003270:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003274:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003278:	681b      	ldr	r3, [r3, #0]
1000327a:	3380      	adds	r3, #128	@ 0x80
1000327c:	4618      	mov	r0, r3
1000327e:	f7ff fe53 	bl	10002f28 <RCCEx_PLL4_Config>
10003282:	4603      	mov	r3, r0
10003284:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003288:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000328c:	2b00      	cmp	r3, #0
1000328e:	d003      	beq.n	10003298 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10003290:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003294:	f001 be2a 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003298:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000329c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100032a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100032a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100032a8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
100032ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100032b0:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
100032b4:	f023 0107 	bic.w	r1, r3, #7
100032b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100032bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032c0:	681b      	ldr	r3, [r3, #0]
100032c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
100032c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100032ca:	430b      	orrs	r3, r1
100032cc:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
100032d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100032d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032d8:	681b      	ldr	r3, [r3, #0]
100032da:	e9d3 2300 	ldrd	r2, r3, [r3]
100032de:	f002 0a20 	and.w	sl, r2, #32
100032e2:	f04f 0b00 	mov.w	fp, #0
100032e6:	ea5a 030b 	orrs.w	r3, sl, fp
100032ea:	d038      	beq.n	1000335e <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
100032ec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100032f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100032f4:	681b      	ldr	r3, [r3, #0]
100032f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
100032fa:	2b01      	cmp	r3, #1
100032fc:	d11d      	bne.n	1000333a <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100032fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003302:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003306:	681b      	ldr	r3, [r3, #0]
10003308:	3380      	adds	r3, #128	@ 0x80
1000330a:	4618      	mov	r0, r3
1000330c:	f7ff fe0c 	bl	10002f28 <RCCEx_PLL4_Config>
10003310:	4603      	mov	r3, r0
10003312:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003316:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000331a:	2b00      	cmp	r3, #0
1000331c:	d003      	beq.n	10003326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
1000331e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003322:	f001 bde3 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003326:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000332a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000332e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003336:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
1000333a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000333e:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
10003342:	f023 0107 	bic.w	r1, r3, #7
10003346:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000334a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000334e:	681b      	ldr	r3, [r3, #0]
10003350:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10003354:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003358:	430b      	orrs	r3, r1
1000335a:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
1000335e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003362:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003366:	681b      	ldr	r3, [r3, #0]
10003368:	e9d3 2300 	ldrd	r2, r3, [r3]
1000336c:	2100      	movs	r1, #0
1000336e:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
10003372:	f003 0320 	and.w	r3, r3, #32
10003376:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
1000337a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
1000337e:	460b      	mov	r3, r1
10003380:	4313      	orrs	r3, r2
10003382:	d038      	beq.n	100033f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10003384:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003388:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000338c:	681b      	ldr	r3, [r3, #0]
1000338e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10003392:	2b01      	cmp	r3, #1
10003394:	d11d      	bne.n	100033d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003396:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000339a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000339e:	681b      	ldr	r3, [r3, #0]
100033a0:	3344      	adds	r3, #68	@ 0x44
100033a2:	4618      	mov	r0, r3
100033a4:	f7ff fc56 	bl	10002c54 <RCCEx_PLL3_Config>
100033a8:	4603      	mov	r3, r0
100033aa:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100033ae:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100033b2:	2b00      	cmp	r3, #0
100033b4:	d003      	beq.n	100033be <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
100033b6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100033ba:	f001 bd97 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100033be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033c2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100033c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100033ca:	f043 0320 	orr.w	r3, r3, #32
100033ce:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
100033d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100033d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
100033da:	f023 0107 	bic.w	r1, r3, #7
100033de:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100033e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100033e6:	681b      	ldr	r3, [r3, #0]
100033e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
100033ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100033f0:	430b      	orrs	r3, r1
100033f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
100033f6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100033fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100033fe:	681b      	ldr	r3, [r3, #0]
10003400:	e9d3 2300 	ldrd	r2, r3, [r3]
10003404:	f002 0380 	and.w	r3, r2, #128	@ 0x80
10003408:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
1000340c:	2300      	movs	r3, #0
1000340e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
10003412:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
10003416:	460b      	mov	r3, r1
10003418:	4313      	orrs	r3, r2
1000341a:	d07e      	beq.n	1000351a <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
1000341c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003420:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003424:	681b      	ldr	r3, [r3, #0]
10003426:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
1000342a:	2b04      	cmp	r3, #4
1000342c:	d044      	beq.n	100034b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
1000342e:	2b04      	cmp	r3, #4
10003430:	d861      	bhi.n	100034f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
10003432:	2b00      	cmp	r3, #0
10003434:	d002      	beq.n	1000343c <HAL_RCCEx_PeriphCLKConfig+0x264>
10003436:	2b01      	cmp	r3, #1
10003438:	d01f      	beq.n	1000347a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
1000343a:	e05c      	b.n	100034f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000343c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003440:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003444:	681b      	ldr	r3, [r3, #0]
10003446:	3380      	adds	r3, #128	@ 0x80
10003448:	4618      	mov	r0, r3
1000344a:	f7ff fd6d 	bl	10002f28 <RCCEx_PLL4_Config>
1000344e:	4603      	mov	r3, r0
10003450:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003454:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003458:	2b00      	cmp	r3, #0
1000345a:	d003      	beq.n	10003464 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
1000345c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003460:	f001 bd44 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003464:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003468:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000346c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003470:	f043 0320 	orr.w	r3, r3, #32
10003474:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003478:	e03d      	b.n	100034f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000347a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000347e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003482:	681b      	ldr	r3, [r3, #0]
10003484:	3344      	adds	r3, #68	@ 0x44
10003486:	4618      	mov	r0, r3
10003488:	f7ff fbe4 	bl	10002c54 <RCCEx_PLL3_Config>
1000348c:	4603      	mov	r3, r0
1000348e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003492:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003496:	2b00      	cmp	r3, #0
10003498:	d003      	beq.n	100034a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
1000349a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000349e:	f001 bd25 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100034a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034a6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100034aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034ae:	f043 0320 	orr.w	r3, r3, #32
100034b2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100034b6:	e01e      	b.n	100034f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100034b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100034bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100034c0:	681b      	ldr	r3, [r3, #0]
100034c2:	3344      	adds	r3, #68	@ 0x44
100034c4:	4618      	mov	r0, r3
100034c6:	f7ff fbc5 	bl	10002c54 <RCCEx_PLL3_Config>
100034ca:	4603      	mov	r3, r0
100034cc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100034d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100034d4:	2b00      	cmp	r3, #0
100034d6:	d003      	beq.n	100034e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
100034d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100034dc:	f001 bd06 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100034e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034e4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100034e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100034ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100034f0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100034f4:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
100034f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100034fa:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
100034fe:	f023 0107 	bic.w	r1, r3, #7
10003502:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003506:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000350a:	681b      	ldr	r3, [r3, #0]
1000350c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10003510:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003514:	430b      	orrs	r3, r1
10003516:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
1000351a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000351e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003522:	681b      	ldr	r3, [r3, #0]
10003524:	e9d3 2300 	ldrd	r2, r3, [r3]
10003528:	f402 7380 	and.w	r3, r2, #256	@ 0x100
1000352c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
10003530:	2300      	movs	r3, #0
10003532:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
10003536:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
1000353a:	460b      	mov	r3, r1
1000353c:	4313      	orrs	r3, r2
1000353e:	d07e      	beq.n	1000363e <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10003540:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003544:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003548:	681b      	ldr	r3, [r3, #0]
1000354a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
1000354e:	2b05      	cmp	r3, #5
10003550:	d044      	beq.n	100035dc <HAL_RCCEx_PeriphCLKConfig+0x404>
10003552:	2b05      	cmp	r3, #5
10003554:	d861      	bhi.n	1000361a <HAL_RCCEx_PeriphCLKConfig+0x442>
10003556:	2b00      	cmp	r3, #0
10003558:	d002      	beq.n	10003560 <HAL_RCCEx_PeriphCLKConfig+0x388>
1000355a:	2b01      	cmp	r3, #1
1000355c:	d01f      	beq.n	1000359e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
1000355e:	e05c      	b.n	1000361a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003560:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003564:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003568:	681b      	ldr	r3, [r3, #0]
1000356a:	3380      	adds	r3, #128	@ 0x80
1000356c:	4618      	mov	r0, r3
1000356e:	f7ff fcdb 	bl	10002f28 <RCCEx_PLL4_Config>
10003572:	4603      	mov	r3, r0
10003574:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003578:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000357c:	2b00      	cmp	r3, #0
1000357e:	d003      	beq.n	10003588 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10003580:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003584:	f001 bcb2 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003588:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000358c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003590:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003594:	f043 0320 	orr.w	r3, r3, #32
10003598:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000359c:	e03d      	b.n	1000361a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000359e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100035a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100035a6:	681b      	ldr	r3, [r3, #0]
100035a8:	3344      	adds	r3, #68	@ 0x44
100035aa:	4618      	mov	r0, r3
100035ac:	f7ff fb52 	bl	10002c54 <RCCEx_PLL3_Config>
100035b0:	4603      	mov	r3, r0
100035b2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100035b6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100035ba:	2b00      	cmp	r3, #0
100035bc:	d003      	beq.n	100035c6 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
100035be:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100035c2:	f001 bc93 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100035c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100035ca:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100035ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100035d2:	f043 0320 	orr.w	r3, r3, #32
100035d6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100035da:	e01e      	b.n	1000361a <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100035dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100035e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100035e4:	681b      	ldr	r3, [r3, #0]
100035e6:	3344      	adds	r3, #68	@ 0x44
100035e8:	4618      	mov	r0, r3
100035ea:	f7ff fb33 	bl	10002c54 <RCCEx_PLL3_Config>
100035ee:	4603      	mov	r3, r0
100035f0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100035f4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100035f8:	2b00      	cmp	r3, #0
100035fa:	d003      	beq.n	10003604 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
100035fc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003600:	f001 bc74 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003604:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003608:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000360c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003614:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003618:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
1000361a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000361e:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
10003622:	f023 0107 	bic.w	r1, r3, #7
10003626:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000362a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000362e:	681b      	ldr	r3, [r3, #0]
10003630:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10003634:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003638:	430b      	orrs	r3, r1
1000363a:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
1000363e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003642:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003646:	681b      	ldr	r3, [r3, #0]
10003648:	e9d3 2300 	ldrd	r2, r3, [r3]
1000364c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
10003650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
10003654:	2300      	movs	r3, #0
10003656:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
1000365a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
1000365e:	460b      	mov	r3, r1
10003660:	4313      	orrs	r3, r2
10003662:	d07e      	beq.n	10003762 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10003664:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003668:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000366c:	681b      	ldr	r3, [r3, #0]
1000366e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10003672:	2b04      	cmp	r3, #4
10003674:	d044      	beq.n	10003700 <HAL_RCCEx_PeriphCLKConfig+0x528>
10003676:	2b04      	cmp	r3, #4
10003678:	d861      	bhi.n	1000373e <HAL_RCCEx_PeriphCLKConfig+0x566>
1000367a:	2b00      	cmp	r3, #0
1000367c:	d002      	beq.n	10003684 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
1000367e:	2b01      	cmp	r3, #1
10003680:	d01f      	beq.n	100036c2 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
10003682:	e05c      	b.n	1000373e <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003684:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003688:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000368c:	681b      	ldr	r3, [r3, #0]
1000368e:	3380      	adds	r3, #128	@ 0x80
10003690:	4618      	mov	r0, r3
10003692:	f7ff fc49 	bl	10002f28 <RCCEx_PLL4_Config>
10003696:	4603      	mov	r3, r0
10003698:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000369c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100036a0:	2b00      	cmp	r3, #0
100036a2:	d003      	beq.n	100036ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
100036a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100036a8:	f001 bc20 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100036ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036b0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100036b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100036b8:	f043 0320 	orr.w	r3, r3, #32
100036bc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100036c0:	e03d      	b.n	1000373e <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100036c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100036c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100036ca:	681b      	ldr	r3, [r3, #0]
100036cc:	3344      	adds	r3, #68	@ 0x44
100036ce:	4618      	mov	r0, r3
100036d0:	f7ff fac0 	bl	10002c54 <RCCEx_PLL3_Config>
100036d4:	4603      	mov	r3, r0
100036d6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100036da:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100036de:	2b00      	cmp	r3, #0
100036e0:	d003      	beq.n	100036ea <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
100036e2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100036e6:	f001 bc01 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100036ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100036ee:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100036f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100036f6:	f043 0320 	orr.w	r3, r3, #32
100036fa:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100036fe:	e01e      	b.n	1000373e <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003700:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003704:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003708:	681b      	ldr	r3, [r3, #0]
1000370a:	3344      	adds	r3, #68	@ 0x44
1000370c:	4618      	mov	r0, r3
1000370e:	f7ff faa1 	bl	10002c54 <RCCEx_PLL3_Config>
10003712:	4603      	mov	r3, r0
10003714:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003718:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000371c:	2b00      	cmp	r3, #0
1000371e:	d003      	beq.n	10003728 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10003720:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003724:	f001 bbe2 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003728:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000372c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003730:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003738:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000373c:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
1000373e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003742:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
10003746:	f023 0107 	bic.w	r1, r3, #7
1000374a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000374e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003752:	681b      	ldr	r3, [r3, #0]
10003754:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10003758:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000375c:	430b      	orrs	r3, r1
1000375e:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
10003762:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003766:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000376a:	681b      	ldr	r3, [r3, #0]
1000376c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003770:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
10003774:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
10003778:	2300      	movs	r3, #0
1000377a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
1000377e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
10003782:	460b      	mov	r3, r1
10003784:	4313      	orrs	r3, r2
10003786:	d07e      	beq.n	10003886 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10003788:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000378c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003790:	681b      	ldr	r3, [r3, #0]
10003792:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10003796:	2b04      	cmp	r3, #4
10003798:	d044      	beq.n	10003824 <HAL_RCCEx_PeriphCLKConfig+0x64c>
1000379a:	2b04      	cmp	r3, #4
1000379c:	d861      	bhi.n	10003862 <HAL_RCCEx_PeriphCLKConfig+0x68a>
1000379e:	2b00      	cmp	r3, #0
100037a0:	d002      	beq.n	100037a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
100037a2:	2b01      	cmp	r3, #1
100037a4:	d01f      	beq.n	100037e6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
100037a6:	e05c      	b.n	10003862 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100037a8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100037ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037b0:	681b      	ldr	r3, [r3, #0]
100037b2:	3380      	adds	r3, #128	@ 0x80
100037b4:	4618      	mov	r0, r3
100037b6:	f7ff fbb7 	bl	10002f28 <RCCEx_PLL4_Config>
100037ba:	4603      	mov	r3, r0
100037bc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100037c0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100037c4:	2b00      	cmp	r3, #0
100037c6:	d003      	beq.n	100037d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
100037c8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100037cc:	f001 bb8e 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100037d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100037d4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100037d8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100037dc:	f043 0320 	orr.w	r3, r3, #32
100037e0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100037e4:	e03d      	b.n	10003862 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100037e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100037ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100037ee:	681b      	ldr	r3, [r3, #0]
100037f0:	3344      	adds	r3, #68	@ 0x44
100037f2:	4618      	mov	r0, r3
100037f4:	f7ff fa2e 	bl	10002c54 <RCCEx_PLL3_Config>
100037f8:	4603      	mov	r3, r0
100037fa:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100037fe:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003802:	2b00      	cmp	r3, #0
10003804:	d003      	beq.n	1000380e <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10003806:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000380a:	f001 bb6f 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000380e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003812:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003816:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000381a:	f043 0320 	orr.w	r3, r3, #32
1000381e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003822:	e01e      	b.n	10003862 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003824:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003828:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000382c:	681b      	ldr	r3, [r3, #0]
1000382e:	3344      	adds	r3, #68	@ 0x44
10003830:	4618      	mov	r0, r3
10003832:	f7ff fa0f 	bl	10002c54 <RCCEx_PLL3_Config>
10003836:	4603      	mov	r3, r0
10003838:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000383c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003840:	2b00      	cmp	r3, #0
10003842:	d003      	beq.n	1000384c <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10003844:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003848:	f001 bb50 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000384c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003850:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003854:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000385c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003860:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
10003862:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003866:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
1000386a:	f023 0107 	bic.w	r1, r3, #7
1000386e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003872:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003876:	681b      	ldr	r3, [r3, #0]
10003878:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
1000387c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003880:	430b      	orrs	r3, r1
10003882:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10003886:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000388a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000388e:	681b      	ldr	r3, [r3, #0]
10003890:	e9d3 2300 	ldrd	r2, r3, [r3]
10003894:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
10003898:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
1000389c:	2300      	movs	r3, #0
1000389e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
100038a2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
100038a6:	460b      	mov	r3, r1
100038a8:	4313      	orrs	r3, r2
100038aa:	d07e      	beq.n	100039aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
100038ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038b4:	681b      	ldr	r3, [r3, #0]
100038b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
100038ba:	2b04      	cmp	r3, #4
100038bc:	d044      	beq.n	10003948 <HAL_RCCEx_PeriphCLKConfig+0x770>
100038be:	2b04      	cmp	r3, #4
100038c0:	d861      	bhi.n	10003986 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
100038c2:	2b00      	cmp	r3, #0
100038c4:	d002      	beq.n	100038cc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
100038c6:	2b01      	cmp	r3, #1
100038c8:	d01f      	beq.n	1000390a <HAL_RCCEx_PeriphCLKConfig+0x732>
100038ca:	e05c      	b.n	10003986 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100038cc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100038d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100038d4:	681b      	ldr	r3, [r3, #0]
100038d6:	3380      	adds	r3, #128	@ 0x80
100038d8:	4618      	mov	r0, r3
100038da:	f7ff fb25 	bl	10002f28 <RCCEx_PLL4_Config>
100038de:	4603      	mov	r3, r0
100038e0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100038e4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100038e8:	2b00      	cmp	r3, #0
100038ea:	d003      	beq.n	100038f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
100038ec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100038f0:	f001 bafc 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100038f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100038f8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100038fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003900:	f043 0310 	orr.w	r3, r3, #16
10003904:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003908:	e03d      	b.n	10003986 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000390a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000390e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003912:	681b      	ldr	r3, [r3, #0]
10003914:	3344      	adds	r3, #68	@ 0x44
10003916:	4618      	mov	r0, r3
10003918:	f7ff f99c 	bl	10002c54 <RCCEx_PLL3_Config>
1000391c:	4603      	mov	r3, r0
1000391e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003922:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003926:	2b00      	cmp	r3, #0
10003928:	d003      	beq.n	10003932 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
1000392a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000392e:	f001 badd 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003932:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003936:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000393a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000393e:	f043 0320 	orr.w	r3, r3, #32
10003942:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003946:	e01e      	b.n	10003986 <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003948:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000394c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003950:	681b      	ldr	r3, [r3, #0]
10003952:	3344      	adds	r3, #68	@ 0x44
10003954:	4618      	mov	r0, r3
10003956:	f7ff f97d 	bl	10002c54 <RCCEx_PLL3_Config>
1000395a:	4603      	mov	r3, r0
1000395c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003960:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003964:	2b00      	cmp	r3, #0
10003966:	d003      	beq.n	10003970 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10003968:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000396c:	f001 babe 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003970:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003974:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003978:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000397c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003980:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003984:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10003986:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000398a:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
1000398e:	f023 0107 	bic.w	r1, r3, #7
10003992:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003996:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000399a:	681b      	ldr	r3, [r3, #0]
1000399c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
100039a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100039a4:	430b      	orrs	r3, r1
100039a6:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100039aa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039b2:	681b      	ldr	r3, [r3, #0]
100039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
100039b8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
100039bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
100039c0:	2300      	movs	r3, #0
100039c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
100039c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
100039ca:	460b      	mov	r3, r1
100039cc:	4313      	orrs	r3, r2
100039ce:	d07e      	beq.n	10003ace <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
100039d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039d8:	681b      	ldr	r3, [r3, #0]
100039da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
100039de:	2b04      	cmp	r3, #4
100039e0:	d044      	beq.n	10003a6c <HAL_RCCEx_PeriphCLKConfig+0x894>
100039e2:	2b04      	cmp	r3, #4
100039e4:	d861      	bhi.n	10003aaa <HAL_RCCEx_PeriphCLKConfig+0x8d2>
100039e6:	2b00      	cmp	r3, #0
100039e8:	d002      	beq.n	100039f0 <HAL_RCCEx_PeriphCLKConfig+0x818>
100039ea:	2b01      	cmp	r3, #1
100039ec:	d01f      	beq.n	10003a2e <HAL_RCCEx_PeriphCLKConfig+0x856>
100039ee:	e05c      	b.n	10003aaa <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100039f0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100039f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100039f8:	681b      	ldr	r3, [r3, #0]
100039fa:	3380      	adds	r3, #128	@ 0x80
100039fc:	4618      	mov	r0, r3
100039fe:	f7ff fa93 	bl	10002f28 <RCCEx_PLL4_Config>
10003a02:	4603      	mov	r3, r0
10003a04:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003a08:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a0c:	2b00      	cmp	r3, #0
10003a0e:	d003      	beq.n	10003a18 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10003a10:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a14:	f001 ba6a 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003a18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a1c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003a20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a24:	f043 0310 	orr.w	r3, r3, #16
10003a28:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003a2c:	e03d      	b.n	10003aaa <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003a2e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a36:	681b      	ldr	r3, [r3, #0]
10003a38:	3344      	adds	r3, #68	@ 0x44
10003a3a:	4618      	mov	r0, r3
10003a3c:	f7ff f90a 	bl	10002c54 <RCCEx_PLL3_Config>
10003a40:	4603      	mov	r3, r0
10003a42:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003a46:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a4a:	2b00      	cmp	r3, #0
10003a4c:	d003      	beq.n	10003a56 <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
10003a4e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a52:	f001 ba4b 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003a56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a5a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003a5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003a62:	f043 0320 	orr.w	r3, r3, #32
10003a66:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003a6a:	e01e      	b.n	10003aaa <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003a6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003a70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003a74:	681b      	ldr	r3, [r3, #0]
10003a76:	3344      	adds	r3, #68	@ 0x44
10003a78:	4618      	mov	r0, r3
10003a7a:	f7ff f8eb 	bl	10002c54 <RCCEx_PLL3_Config>
10003a7e:	4603      	mov	r3, r0
10003a80:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003a84:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a88:	2b00      	cmp	r3, #0
10003a8a:	d003      	beq.n	10003a94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10003a8c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003a90:	f001 ba2c 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003a94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a98:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003a9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003aa4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003aa8:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
10003aaa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003aae:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
10003ab2:	f023 0107 	bic.w	r1, r3, #7
10003ab6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003aba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003abe:	681b      	ldr	r3, [r3, #0]
10003ac0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10003ac4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ac8:	430b      	orrs	r3, r1
10003aca:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10003ace:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ad2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ad6:	681b      	ldr	r3, [r3, #0]
10003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
10003adc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
10003ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
10003ae4:	2300      	movs	r3, #0
10003ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
10003aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
10003aee:	460b      	mov	r3, r1
10003af0:	4313      	orrs	r3, r2
10003af2:	d038      	beq.n	10003b66 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10003af4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003af8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003afc:	681b      	ldr	r3, [r3, #0]
10003afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10003b02:	2b01      	cmp	r3, #1
10003b04:	d11d      	bne.n	10003b42 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003b06:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b0e:	681b      	ldr	r3, [r3, #0]
10003b10:	3380      	adds	r3, #128	@ 0x80
10003b12:	4618      	mov	r0, r3
10003b14:	f7ff fa08 	bl	10002f28 <RCCEx_PLL4_Config>
10003b18:	4603      	mov	r3, r0
10003b1a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003b1e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003b22:	2b00      	cmp	r3, #0
10003b24:	d003      	beq.n	10003b2e <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
10003b26:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003b2a:	f001 b9df 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003b2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b32:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003b36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b3a:	f043 0320 	orr.w	r3, r3, #32
10003b3e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10003b42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003b46:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
10003b4a:	f023 0107 	bic.w	r1, r3, #7
10003b4e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b56:	681b      	ldr	r3, [r3, #0]
10003b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10003b5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003b60:	430b      	orrs	r3, r1
10003b62:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10003b66:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b6e:	681b      	ldr	r3, [r3, #0]
10003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
10003b74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
10003b78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
10003b7c:	2300      	movs	r3, #0
10003b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
10003b82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
10003b86:	460b      	mov	r3, r1
10003b88:	4313      	orrs	r3, r2
10003b8a:	d05b      	beq.n	10003c44 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10003b8c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003b90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003b94:	681b      	ldr	r3, [r3, #0]
10003b96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10003b9a:	2b01      	cmp	r3, #1
10003b9c:	d002      	beq.n	10003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
10003b9e:	2b05      	cmp	r3, #5
10003ba0:	d01f      	beq.n	10003be2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
10003ba2:	e03d      	b.n	10003c20 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003ba4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ba8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003bac:	681b      	ldr	r3, [r3, #0]
10003bae:	3380      	adds	r3, #128	@ 0x80
10003bb0:	4618      	mov	r0, r3
10003bb2:	f7ff f9b9 	bl	10002f28 <RCCEx_PLL4_Config>
10003bb6:	4603      	mov	r3, r0
10003bb8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003bbc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003bc0:	2b00      	cmp	r3, #0
10003bc2:	d003      	beq.n	10003bcc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10003bc4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003bc8:	f001 b990 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003bcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003bd0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003bd4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003bd8:	f043 0320 	orr.w	r3, r3, #32
10003bdc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003be0:	e01e      	b.n	10003c20 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003be2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003be6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003bea:	681b      	ldr	r3, [r3, #0]
10003bec:	3344      	adds	r3, #68	@ 0x44
10003bee:	4618      	mov	r0, r3
10003bf0:	f7ff f830 	bl	10002c54 <RCCEx_PLL3_Config>
10003bf4:	4603      	mov	r3, r0
10003bf6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003bfa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003bfe:	2b00      	cmp	r3, #0
10003c00:	d003      	beq.n	10003c0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10003c02:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c06:	f001 b971 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003c0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c0e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003c12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c16:	f043 0320 	orr.w	r3, r3, #32
10003c1a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003c1e:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10003c20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003c24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10003c28:	f023 0107 	bic.w	r1, r3, #7
10003c2c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c34:	681b      	ldr	r3, [r3, #0]
10003c36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10003c3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003c3e:	430b      	orrs	r3, r1
10003c40:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10003c44:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c4c:	681b      	ldr	r3, [r3, #0]
10003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
10003c52:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
10003c56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
10003c5a:	2300      	movs	r3, #0
10003c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
10003c60:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
10003c64:	460b      	mov	r3, r1
10003c66:	4313      	orrs	r3, r2
10003c68:	d038      	beq.n	10003cdc <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10003c6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c72:	681b      	ldr	r3, [r3, #0]
10003c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10003c78:	2b01      	cmp	r3, #1
10003c7a:	d11d      	bne.n	10003cb8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003c7c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003c80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003c84:	681b      	ldr	r3, [r3, #0]
10003c86:	3380      	adds	r3, #128	@ 0x80
10003c88:	4618      	mov	r0, r3
10003c8a:	f7ff f94d 	bl	10002f28 <RCCEx_PLL4_Config>
10003c8e:	4603      	mov	r3, r0
10003c90:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003c94:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003c98:	2b00      	cmp	r3, #0
10003c9a:	d003      	beq.n	10003ca4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
10003c9c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003ca0:	f001 b924 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003ca4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ca8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003cac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003cb0:	f043 0320 	orr.w	r3, r3, #32
10003cb4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10003cb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cbc:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
10003cc0:	f023 0107 	bic.w	r1, r3, #7
10003cc4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003cc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ccc:	681b      	ldr	r3, [r3, #0]
10003cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10003cd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003cd6:	430b      	orrs	r3, r1
10003cd8:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10003cdc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ce0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ce4:	681b      	ldr	r3, [r3, #0]
10003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
10003cea:	f002 0302 	and.w	r3, r2, #2
10003cee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
10003cf2:	2300      	movs	r3, #0
10003cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
10003cf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
10003cfc:	460b      	mov	r3, r1
10003cfe:	4313      	orrs	r3, r2
10003d00:	d038      	beq.n	10003d74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10003d02:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d0a:	681b      	ldr	r3, [r3, #0]
10003d0c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10003d10:	2b01      	cmp	r3, #1
10003d12:	d11d      	bne.n	10003d50 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003d14:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d1c:	681b      	ldr	r3, [r3, #0]
10003d1e:	3380      	adds	r3, #128	@ 0x80
10003d20:	4618      	mov	r0, r3
10003d22:	f7ff f901 	bl	10002f28 <RCCEx_PLL4_Config>
10003d26:	4603      	mov	r3, r0
10003d28:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003d2c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d30:	2b00      	cmp	r3, #0
10003d32:	d003      	beq.n	10003d3c <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10003d34:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003d38:	f001 b8d8 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003d3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d40:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003d44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d48:	f043 0320 	orr.w	r3, r3, #32
10003d4c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10003d50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d54:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
10003d58:	f023 0107 	bic.w	r1, r3, #7
10003d5c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d64:	681b      	ldr	r3, [r3, #0]
10003d66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10003d6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003d6e:	430b      	orrs	r3, r1
10003d70:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10003d74:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003d7c:	681b      	ldr	r3, [r3, #0]
10003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
10003d82:	f002 0304 	and.w	r3, r2, #4
10003d86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
10003d8a:	2300      	movs	r3, #0
10003d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
10003d90:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
10003d94:	460b      	mov	r3, r1
10003d96:	4313      	orrs	r3, r2
10003d98:	d038      	beq.n	10003e0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10003d9a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003d9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003da2:	681b      	ldr	r3, [r3, #0]
10003da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10003da8:	2b01      	cmp	r3, #1
10003daa:	d11d      	bne.n	10003de8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003dac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003db0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003db4:	681b      	ldr	r3, [r3, #0]
10003db6:	3380      	adds	r3, #128	@ 0x80
10003db8:	4618      	mov	r0, r3
10003dba:	f7ff f8b5 	bl	10002f28 <RCCEx_PLL4_Config>
10003dbe:	4603      	mov	r3, r0
10003dc0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003dc4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003dc8:	2b00      	cmp	r3, #0
10003dca:	d003      	beq.n	10003dd4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
10003dcc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003dd0:	f001 b88c 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003dd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003dd8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003ddc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003de0:	f043 0320 	orr.w	r3, r3, #32
10003de4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10003de8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003dec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10003df0:	f023 0107 	bic.w	r1, r3, #7
10003df4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003df8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003dfc:	681b      	ldr	r3, [r3, #0]
10003dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10003e02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e06:	430b      	orrs	r3, r1
10003e08:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10003e0c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e14:	681b      	ldr	r3, [r3, #0]
10003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
10003e1a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
10003e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
10003e22:	2300      	movs	r3, #0
10003e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
10003e28:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
10003e2c:	460b      	mov	r3, r1
10003e2e:	4313      	orrs	r3, r2
10003e30:	d038      	beq.n	10003ea4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10003e32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e3a:	681b      	ldr	r3, [r3, #0]
10003e3c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10003e40:	2b01      	cmp	r3, #1
10003e42:	d11d      	bne.n	10003e80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003e44:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e4c:	681b      	ldr	r3, [r3, #0]
10003e4e:	3380      	adds	r3, #128	@ 0x80
10003e50:	4618      	mov	r0, r3
10003e52:	f7ff f869 	bl	10002f28 <RCCEx_PLL4_Config>
10003e56:	4603      	mov	r3, r0
10003e58:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10003e5c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e60:	2b00      	cmp	r3, #0
10003e62:	d003      	beq.n	10003e6c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10003e64:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003e68:	f001 b840 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003e6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e70:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003e74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e78:	f043 0320 	orr.w	r3, r3, #32
10003e7c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10003e80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e84:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
10003e88:	f023 0107 	bic.w	r1, r3, #7
10003e8c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003e90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003e94:	681b      	ldr	r3, [r3, #0]
10003e96:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10003e9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e9e:	430b      	orrs	r3, r1
10003ea0:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10003ea4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ea8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003eac:	681b      	ldr	r3, [r3, #0]
10003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
10003eb2:	f002 0301 	and.w	r3, r2, #1
10003eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
10003eba:	2300      	movs	r3, #0
10003ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
10003ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
10003ec4:	460b      	mov	r3, r1
10003ec6:	4313      	orrs	r3, r2
10003ec8:	d05b      	beq.n	10003f82 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
10003eca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ece:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003ed2:	681b      	ldr	r3, [r3, #0]
10003ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10003ed8:	2b01      	cmp	r3, #1
10003eda:	d002      	beq.n	10003ee2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10003edc:	2b04      	cmp	r3, #4
10003ede:	d01f      	beq.n	10003f20 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10003ee0:	e03d      	b.n	10003f5e <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003ee2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003ee6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003eea:	681b      	ldr	r3, [r3, #0]
10003eec:	3344      	adds	r3, #68	@ 0x44
10003eee:	4618      	mov	r0, r3
10003ef0:	f7fe feb0 	bl	10002c54 <RCCEx_PLL3_Config>
10003ef4:	4603      	mov	r3, r0
10003ef6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003efa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003efe:	2b00      	cmp	r3, #0
10003f00:	d003      	beq.n	10003f0a <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10003f02:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f06:	f000 bff1 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003f0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f0e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003f12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f16:	f043 0320 	orr.w	r3, r3, #32
10003f1a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003f1e:	e01e      	b.n	10003f5e <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003f20:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f28:	681b      	ldr	r3, [r3, #0]
10003f2a:	3380      	adds	r3, #128	@ 0x80
10003f2c:	4618      	mov	r0, r3
10003f2e:	f7fe fffb 	bl	10002f28 <RCCEx_PLL4_Config>
10003f32:	4603      	mov	r3, r0
10003f34:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003f38:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f3c:	2b00      	cmp	r3, #0
10003f3e:	d003      	beq.n	10003f48 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10003f40:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003f44:	f000 bfd2 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003f48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f4c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10003f50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f54:	f043 0320 	orr.w	r3, r3, #32
10003f58:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10003f5c:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10003f5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10003f66:	f023 0107 	bic.w	r1, r3, #7
10003f6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f72:	681b      	ldr	r3, [r3, #0]
10003f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10003f78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f7c:	430b      	orrs	r3, r1
10003f7e:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10003f82:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003f86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003f8a:	681b      	ldr	r3, [r3, #0]
10003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003f90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
10003f94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
10003f98:	2300      	movs	r3, #0
10003f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
10003f9e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
10003fa2:	460b      	mov	r3, r1
10003fa4:	4313      	orrs	r3, r2
10003fa6:	d05b      	beq.n	10004060 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10003fa8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fb0:	681b      	ldr	r3, [r3, #0]
10003fb2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10003fb6:	2b01      	cmp	r3, #1
10003fb8:	d002      	beq.n	10003fc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
10003fba:	2b02      	cmp	r3, #2
10003fbc:	d01f      	beq.n	10003ffe <HAL_RCCEx_PeriphCLKConfig+0xe26>
10003fbe:	e03d      	b.n	1000403c <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003fc0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10003fc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10003fc8:	681b      	ldr	r3, [r3, #0]
10003fca:	3344      	adds	r3, #68	@ 0x44
10003fcc:	4618      	mov	r0, r3
10003fce:	f7fe fe41 	bl	10002c54 <RCCEx_PLL3_Config>
10003fd2:	4603      	mov	r3, r0
10003fd4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10003fd8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003fdc:	2b00      	cmp	r3, #0
10003fde:	d003      	beq.n	10003fe8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10003fe0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10003fe4:	f000 bf82 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003fe8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10003ff0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003ff8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10003ffc:	e01e      	b.n	1000403c <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003ffe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004002:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004006:	681b      	ldr	r3, [r3, #0]
10004008:	3380      	adds	r3, #128	@ 0x80
1000400a:	4618      	mov	r0, r3
1000400c:	f7fe ff8c 	bl	10002f28 <RCCEx_PLL4_Config>
10004010:	4603      	mov	r3, r0
10004012:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004016:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000401a:	2b00      	cmp	r3, #0
1000401c:	d003      	beq.n	10004026 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
1000401e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004022:	f000 bf63 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004026:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000402a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000402e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004032:	f043 0310 	orr.w	r3, r3, #16
10004036:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000403a:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
1000403c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004040:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
10004044:	f023 0107 	bic.w	r1, r3, #7
10004048:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000404c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004050:	681b      	ldr	r3, [r3, #0]
10004052:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10004056:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000405a:	430b      	orrs	r3, r1
1000405c:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10004060:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004064:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004068:	681b      	ldr	r3, [r3, #0]
1000406a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000406e:	2100      	movs	r1, #0
10004070:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
10004074:	f003 0301 	and.w	r3, r3, #1
10004078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
1000407c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
10004080:	460b      	mov	r3, r1
10004082:	4313      	orrs	r3, r2
10004084:	d05b      	beq.n	1000413e <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10004086:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000408a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000408e:	681b      	ldr	r3, [r3, #0]
10004090:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10004094:	2b01      	cmp	r3, #1
10004096:	d002      	beq.n	1000409e <HAL_RCCEx_PeriphCLKConfig+0xec6>
10004098:	2b02      	cmp	r3, #2
1000409a:	d01f      	beq.n	100040dc <HAL_RCCEx_PeriphCLKConfig+0xf04>
1000409c:	e03d      	b.n	1000411a <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000409e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040a6:	681b      	ldr	r3, [r3, #0]
100040a8:	3344      	adds	r3, #68	@ 0x44
100040aa:	4618      	mov	r0, r3
100040ac:	f7fe fdd2 	bl	10002c54 <RCCEx_PLL3_Config>
100040b0:	4603      	mov	r3, r0
100040b2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100040b6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100040ba:	2b00      	cmp	r3, #0
100040bc:	d003      	beq.n	100040c6 <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
100040be:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100040c2:	f000 bf13 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100040c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040ca:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100040ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100040d6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100040da:	e01e      	b.n	1000411a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100040dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100040e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100040e4:	681b      	ldr	r3, [r3, #0]
100040e6:	3380      	adds	r3, #128	@ 0x80
100040e8:	4618      	mov	r0, r3
100040ea:	f7fe ff1d 	bl	10002f28 <RCCEx_PLL4_Config>
100040ee:	4603      	mov	r3, r0
100040f0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100040f4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100040f8:	2b00      	cmp	r3, #0
100040fa:	d003      	beq.n	10004104 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
100040fc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004100:	f000 bef4 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004104:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004108:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000410c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004110:	f043 0310 	orr.w	r3, r3, #16
10004114:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004118:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
1000411a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000411e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
10004122:	f023 0107 	bic.w	r1, r3, #7
10004126:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000412a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000412e:	681b      	ldr	r3, [r3, #0]
10004130:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10004134:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004138:	430b      	orrs	r3, r1
1000413a:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
1000413e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004142:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004146:	681b      	ldr	r3, [r3, #0]
10004148:	e9d3 2300 	ldrd	r2, r3, [r3]
1000414c:	2100      	movs	r1, #0
1000414e:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
10004152:	f003 0302 	and.w	r3, r3, #2
10004156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
1000415a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
1000415e:	460b      	mov	r3, r1
10004160:	4313      	orrs	r3, r2
10004162:	d05b      	beq.n	1000421c <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10004164:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004168:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000416c:	681b      	ldr	r3, [r3, #0]
1000416e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10004172:	2b00      	cmp	r3, #0
10004174:	d002      	beq.n	1000417c <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10004176:	2b01      	cmp	r3, #1
10004178:	d01f      	beq.n	100041ba <HAL_RCCEx_PeriphCLKConfig+0xfe2>
1000417a:	e03d      	b.n	100041f8 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000417c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004180:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004184:	681b      	ldr	r3, [r3, #0]
10004186:	3380      	adds	r3, #128	@ 0x80
10004188:	4618      	mov	r0, r3
1000418a:	f7fe fecd 	bl	10002f28 <RCCEx_PLL4_Config>
1000418e:	4603      	mov	r3, r0
10004190:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004194:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004198:	2b00      	cmp	r3, #0
1000419a:	d003      	beq.n	100041a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
1000419c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100041a0:	f000 bea4 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100041a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041a8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100041ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041b0:	f043 0310 	orr.w	r3, r3, #16
100041b4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100041b8:	e01e      	b.n	100041f8 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100041ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100041be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100041c2:	681b      	ldr	r3, [r3, #0]
100041c4:	3344      	adds	r3, #68	@ 0x44
100041c6:	4618      	mov	r0, r3
100041c8:	f7fe fd44 	bl	10002c54 <RCCEx_PLL3_Config>
100041cc:	4603      	mov	r3, r0
100041ce:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100041d2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100041d6:	2b00      	cmp	r3, #0
100041d8:	d003      	beq.n	100041e2 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
100041da:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100041de:	f000 be85 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100041e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041e6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100041ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041ee:	f043 0320 	orr.w	r3, r3, #32
100041f2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100041f6:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
100041f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041fc:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
10004200:	f023 0103 	bic.w	r1, r3, #3
10004204:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004208:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000420c:	681b      	ldr	r3, [r3, #0]
1000420e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10004212:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004216:	430b      	orrs	r3, r1
10004218:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
1000421c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004220:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004224:	681b      	ldr	r3, [r3, #0]
10004226:	e9d3 2300 	ldrd	r2, r3, [r3]
1000422a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
1000422e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
10004232:	2300      	movs	r3, #0
10004234:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
10004238:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
1000423c:	460b      	mov	r3, r1
1000423e:	4313      	orrs	r3, r2
10004240:	d05b      	beq.n	100042fa <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10004242:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004246:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000424a:	681b      	ldr	r3, [r3, #0]
1000424c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10004250:	2b01      	cmp	r3, #1
10004252:	d002      	beq.n	1000425a <HAL_RCCEx_PeriphCLKConfig+0x1082>
10004254:	2b02      	cmp	r3, #2
10004256:	d01f      	beq.n	10004298 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10004258:	e03d      	b.n	100042d6 <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000425a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000425e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004262:	681b      	ldr	r3, [r3, #0]
10004264:	3344      	adds	r3, #68	@ 0x44
10004266:	4618      	mov	r0, r3
10004268:	f7fe fcf4 	bl	10002c54 <RCCEx_PLL3_Config>
1000426c:	4603      	mov	r3, r0
1000426e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004272:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004276:	2b00      	cmp	r3, #0
10004278:	d003      	beq.n	10004282 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
1000427a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000427e:	f000 be35 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004282:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004286:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000428a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000428e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004292:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004296:	e01e      	b.n	100042d6 <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004298:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000429c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042a0:	681b      	ldr	r3, [r3, #0]
100042a2:	3380      	adds	r3, #128	@ 0x80
100042a4:	4618      	mov	r0, r3
100042a6:	f7fe fe3f 	bl	10002f28 <RCCEx_PLL4_Config>
100042aa:	4603      	mov	r3, r0
100042ac:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100042b0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100042b4:	2b00      	cmp	r3, #0
100042b6:	d003      	beq.n	100042c0 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
100042b8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100042bc:	f000 be16 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100042c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042c4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100042c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042cc:	f043 0310 	orr.w	r3, r3, #16
100042d0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100042d4:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
100042d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100042da:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
100042de:	f023 0103 	bic.w	r1, r3, #3
100042e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100042ea:	681b      	ldr	r3, [r3, #0]
100042ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
100042f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100042f4:	430b      	orrs	r3, r1
100042f6:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
100042fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100042fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004302:	681b      	ldr	r3, [r3, #0]
10004304:	e9d3 2300 	ldrd	r2, r3, [r3]
10004308:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
1000430c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
10004310:	2300      	movs	r3, #0
10004312:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
10004316:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
1000431a:	460b      	mov	r3, r1
1000431c:	4313      	orrs	r3, r2
1000431e:	d05b      	beq.n	100043d8 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10004320:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004328:	681b      	ldr	r3, [r3, #0]
1000432a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
1000432e:	2b01      	cmp	r3, #1
10004330:	d002      	beq.n	10004338 <HAL_RCCEx_PeriphCLKConfig+0x1160>
10004332:	2b02      	cmp	r3, #2
10004334:	d01f      	beq.n	10004376 <HAL_RCCEx_PeriphCLKConfig+0x119e>
10004336:	e03d      	b.n	100043b4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004338:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000433c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004340:	681b      	ldr	r3, [r3, #0]
10004342:	3344      	adds	r3, #68	@ 0x44
10004344:	4618      	mov	r0, r3
10004346:	f7fe fc85 	bl	10002c54 <RCCEx_PLL3_Config>
1000434a:	4603      	mov	r3, r0
1000434c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004350:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004354:	2b00      	cmp	r3, #0
10004356:	d003      	beq.n	10004360 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10004358:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000435c:	f000 bdc6 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004360:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004364:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004368:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000436c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004370:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004374:	e01e      	b.n	100043b4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004376:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000437a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000437e:	681b      	ldr	r3, [r3, #0]
10004380:	3380      	adds	r3, #128	@ 0x80
10004382:	4618      	mov	r0, r3
10004384:	f7fe fdd0 	bl	10002f28 <RCCEx_PLL4_Config>
10004388:	4603      	mov	r3, r0
1000438a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000438e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004392:	2b00      	cmp	r3, #0
10004394:	d003      	beq.n	1000439e <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10004396:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000439a:	f000 bda7 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000439e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043a2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100043a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043aa:	f043 0310 	orr.w	r3, r3, #16
100043ae:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100043b2:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
100043b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043b8:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
100043bc:	f023 0103 	bic.w	r1, r3, #3
100043c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043c8:	681b      	ldr	r3, [r3, #0]
100043ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
100043ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100043d2:	430b      	orrs	r3, r1
100043d4:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
100043d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100043e0:	681b      	ldr	r3, [r3, #0]
100043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
100043e6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
100043ea:	67bb      	str	r3, [r7, #120]	@ 0x78
100043ec:	2300      	movs	r3, #0
100043ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
100043f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
100043f4:	460b      	mov	r3, r1
100043f6:	4313      	orrs	r3, r2
100043f8:	d07e      	beq.n	100044f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
100043fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100043fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004402:	681b      	ldr	r3, [r3, #0]
10004404:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10004408:	2b03      	cmp	r3, #3
1000440a:	d044      	beq.n	10004496 <HAL_RCCEx_PeriphCLKConfig+0x12be>
1000440c:	2b03      	cmp	r3, #3
1000440e:	d861      	bhi.n	100044d4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10004410:	2b01      	cmp	r3, #1
10004412:	d002      	beq.n	1000441a <HAL_RCCEx_PeriphCLKConfig+0x1242>
10004414:	2b02      	cmp	r3, #2
10004416:	d01f      	beq.n	10004458 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10004418:	e05c      	b.n	100044d4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000441a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000441e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004422:	681b      	ldr	r3, [r3, #0]
10004424:	3344      	adds	r3, #68	@ 0x44
10004426:	4618      	mov	r0, r3
10004428:	f7fe fc14 	bl	10002c54 <RCCEx_PLL3_Config>
1000442c:	4603      	mov	r3, r0
1000442e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004432:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004436:	2b00      	cmp	r3, #0
10004438:	d003      	beq.n	10004442 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
1000443a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000443e:	f000 bd55 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004442:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004446:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000444a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000444e:	f043 0320 	orr.w	r3, r3, #32
10004452:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004456:	e03d      	b.n	100044d4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004458:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000445c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004460:	681b      	ldr	r3, [r3, #0]
10004462:	3380      	adds	r3, #128	@ 0x80
10004464:	4618      	mov	r0, r3
10004466:	f7fe fd5f 	bl	10002f28 <RCCEx_PLL4_Config>
1000446a:	4603      	mov	r3, r0
1000446c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004470:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004474:	2b00      	cmp	r3, #0
10004476:	d003      	beq.n	10004480 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10004478:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000447c:	f000 bd36 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004480:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004484:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004488:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000448c:	f043 0320 	orr.w	r3, r3, #32
10004490:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004494:	e01e      	b.n	100044d4 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004496:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000449a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000449e:	681b      	ldr	r3, [r3, #0]
100044a0:	3380      	adds	r3, #128	@ 0x80
100044a2:	4618      	mov	r0, r3
100044a4:	f7fe fd40 	bl	10002f28 <RCCEx_PLL4_Config>
100044a8:	4603      	mov	r3, r0
100044aa:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100044ae:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100044b2:	2b00      	cmp	r3, #0
100044b4:	d003      	beq.n	100044be <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
100044b6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100044ba:	f000 bd17 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100044be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044c2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100044c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100044ce:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100044d2:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
100044d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044d8:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
100044dc:	f023 0103 	bic.w	r1, r3, #3
100044e0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100044e8:	681b      	ldr	r3, [r3, #0]
100044ea:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
100044ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100044f2:	430b      	orrs	r3, r1
100044f4:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
100044f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100044fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004500:	681b      	ldr	r3, [r3, #0]
10004502:	e9d3 2300 	ldrd	r2, r3, [r3]
10004506:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
1000450a:	673b      	str	r3, [r7, #112]	@ 0x70
1000450c:	2300      	movs	r3, #0
1000450e:	677b      	str	r3, [r7, #116]	@ 0x74
10004510:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
10004514:	460b      	mov	r3, r1
10004516:	4313      	orrs	r3, r2
10004518:	d05b      	beq.n	100045d2 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
1000451a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000451e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004522:	681b      	ldr	r3, [r3, #0]
10004524:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10004528:	2b00      	cmp	r3, #0
1000452a:	d002      	beq.n	10004532 <HAL_RCCEx_PeriphCLKConfig+0x135a>
1000452c:	2b01      	cmp	r3, #1
1000452e:	d01f      	beq.n	10004570 <HAL_RCCEx_PeriphCLKConfig+0x1398>
10004530:	e03d      	b.n	100045ae <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004532:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004536:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000453a:	681b      	ldr	r3, [r3, #0]
1000453c:	3380      	adds	r3, #128	@ 0x80
1000453e:	4618      	mov	r0, r3
10004540:	f7fe fcf2 	bl	10002f28 <RCCEx_PLL4_Config>
10004544:	4603      	mov	r3, r0
10004546:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000454a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000454e:	2b00      	cmp	r3, #0
10004550:	d003      	beq.n	1000455a <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10004552:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004556:	f000 bcc9 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000455a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000455e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004562:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004566:	f043 0310 	orr.w	r3, r3, #16
1000456a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000456e:	e01e      	b.n	100045ae <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004570:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004578:	681b      	ldr	r3, [r3, #0]
1000457a:	3344      	adds	r3, #68	@ 0x44
1000457c:	4618      	mov	r0, r3
1000457e:	f7fe fb69 	bl	10002c54 <RCCEx_PLL3_Config>
10004582:	4603      	mov	r3, r0
10004584:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004588:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000458c:	2b00      	cmp	r3, #0
1000458e:	d003      	beq.n	10004598 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10004590:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004594:	f000 bcaa 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004598:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000459c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100045a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045a4:	f043 0320 	orr.w	r3, r3, #32
100045a8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100045ac:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
100045ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045b2:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
100045b6:	f023 0103 	bic.w	r1, r3, #3
100045ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045c2:	681b      	ldr	r3, [r3, #0]
100045c4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
100045c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045cc:	430b      	orrs	r3, r1
100045ce:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
100045d2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100045d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100045da:	681b      	ldr	r3, [r3, #0]
100045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
100045e0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
100045e4:	66bb      	str	r3, [r7, #104]	@ 0x68
100045e6:	2300      	movs	r3, #0
100045e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
100045ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
100045ee:	460b      	mov	r3, r1
100045f0:	4313      	orrs	r3, r2
100045f2:	d011      	beq.n	10004618 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
100045f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045f8:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
100045fc:	f023 0103 	bic.w	r1, r3, #3
10004600:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004604:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004608:	681b      	ldr	r3, [r3, #0]
1000460a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
1000460e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004612:	430b      	orrs	r3, r1
10004614:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10004618:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000461c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004620:	681b      	ldr	r3, [r3, #0]
10004622:	e9d3 2300 	ldrd	r2, r3, [r3]
10004626:	f402 7300 	and.w	r3, r2, #512	@ 0x200
1000462a:	663b      	str	r3, [r7, #96]	@ 0x60
1000462c:	2300      	movs	r3, #0
1000462e:	667b      	str	r3, [r7, #100]	@ 0x64
10004630:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
10004634:	460b      	mov	r3, r1
10004636:	4313      	orrs	r3, r2
10004638:	d038      	beq.n	100046ac <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
1000463a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000463e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004642:	681b      	ldr	r3, [r3, #0]
10004644:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10004648:	2b01      	cmp	r3, #1
1000464a:	d11d      	bne.n	10004688 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000464c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004650:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004654:	681b      	ldr	r3, [r3, #0]
10004656:	3380      	adds	r3, #128	@ 0x80
10004658:	4618      	mov	r0, r3
1000465a:	f7fe fc65 	bl	10002f28 <RCCEx_PLL4_Config>
1000465e:	4603      	mov	r3, r0
10004660:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004664:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004668:	2b00      	cmp	r3, #0
1000466a:	d003      	beq.n	10004674 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
1000466c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004670:	f000 bc3c 	b.w	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004674:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004678:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000467c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004684:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10004688:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000468c:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10004690:	f023 0103 	bic.w	r1, r3, #3
10004694:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004698:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000469c:	681b      	ldr	r3, [r3, #0]
1000469e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
100046a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100046a6:	430b      	orrs	r3, r1
100046a8:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
100046ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046b4:	681b      	ldr	r3, [r3, #0]
100046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
100046ba:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
100046be:	65bb      	str	r3, [r7, #88]	@ 0x58
100046c0:	2300      	movs	r3, #0
100046c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
100046c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
100046c8:	460b      	mov	r3, r1
100046ca:	4313      	orrs	r3, r2
100046cc:	d037      	beq.n	1000473e <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
100046ce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046d6:	681b      	ldr	r3, [r3, #0]
100046d8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
100046dc:	2b00      	cmp	r3, #0
100046de:	d11c      	bne.n	1000471a <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100046e0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100046e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100046e8:	681b      	ldr	r3, [r3, #0]
100046ea:	3380      	adds	r3, #128	@ 0x80
100046ec:	4618      	mov	r0, r3
100046ee:	f7fe fc1b 	bl	10002f28 <RCCEx_PLL4_Config>
100046f2:	4603      	mov	r3, r0
100046f4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100046f8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100046fc:	2b00      	cmp	r3, #0
100046fe:	d002      	beq.n	10004706 <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10004700:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004704:	e3f2      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004706:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000470a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000470e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10004716:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
1000471a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000471e:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10004722:	f023 0110 	bic.w	r1, r3, #16
10004726:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000472a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000472e:	681b      	ldr	r3, [r3, #0]
10004730:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10004734:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004738:	430b      	orrs	r3, r1
1000473a:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
1000473e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004742:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004746:	681b      	ldr	r3, [r3, #0]
10004748:	e9d3 2300 	ldrd	r2, r3, [r3]
1000474c:	2100      	movs	r1, #0
1000474e:	6539      	str	r1, [r7, #80]	@ 0x50
10004750:	f003 0304 	and.w	r3, r3, #4
10004754:	657b      	str	r3, [r7, #84]	@ 0x54
10004756:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
1000475a:	460b      	mov	r3, r1
1000475c:	4313      	orrs	r3, r2
1000475e:	d037      	beq.n	100047d0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10004760:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004764:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004768:	681b      	ldr	r3, [r3, #0]
1000476a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
1000476e:	2b01      	cmp	r3, #1
10004770:	d11c      	bne.n	100047ac <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004772:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004776:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000477a:	681b      	ldr	r3, [r3, #0]
1000477c:	3380      	adds	r3, #128	@ 0x80
1000477e:	4618      	mov	r0, r3
10004780:	f7fe fbd2 	bl	10002f28 <RCCEx_PLL4_Config>
10004784:	4603      	mov	r3, r0
10004786:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000478a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000478e:	2b00      	cmp	r3, #0
10004790:	d002      	beq.n	10004798 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
10004792:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004796:	e3a9      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004798:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000479c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100047a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100047a8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
100047ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047b0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
100047b4:	f023 0103 	bic.w	r1, r3, #3
100047b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047c0:	681b      	ldr	r3, [r3, #0]
100047c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
100047c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100047ca:	430b      	orrs	r3, r1
100047cc:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
100047d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047d8:	681b      	ldr	r3, [r3, #0]
100047da:	e9d3 2300 	ldrd	r2, r3, [r3]
100047de:	2100      	movs	r1, #0
100047e0:	64b9      	str	r1, [r7, #72]	@ 0x48
100047e2:	f003 0308 	and.w	r3, r3, #8
100047e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
100047e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
100047ec:	460b      	mov	r3, r1
100047ee:	4313      	orrs	r3, r2
100047f0:	d037      	beq.n	10004862 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
100047f2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100047f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100047fa:	681b      	ldr	r3, [r3, #0]
100047fc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10004800:	2b01      	cmp	r3, #1
10004802:	d11c      	bne.n	1000483e <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004804:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004808:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000480c:	681b      	ldr	r3, [r3, #0]
1000480e:	3380      	adds	r3, #128	@ 0x80
10004810:	4618      	mov	r0, r3
10004812:	f7fe fb89 	bl	10002f28 <RCCEx_PLL4_Config>
10004816:	4603      	mov	r3, r0
10004818:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000481c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004820:	2b00      	cmp	r3, #0
10004822:	d002      	beq.n	1000482a <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10004824:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004828:	e360      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000482a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000482e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004832:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000483a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
1000483e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004842:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
10004846:	f023 0103 	bic.w	r1, r3, #3
1000484a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000484e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004852:	681b      	ldr	r3, [r3, #0]
10004854:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10004858:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000485c:	430b      	orrs	r3, r1
1000485e:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
10004862:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004866:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000486a:	681b      	ldr	r3, [r3, #0]
1000486c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004870:	2100      	movs	r1, #0
10004872:	6439      	str	r1, [r7, #64]	@ 0x40
10004874:	f003 0310 	and.w	r3, r3, #16
10004878:	647b      	str	r3, [r7, #68]	@ 0x44
1000487a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
1000487e:	460b      	mov	r3, r1
10004880:	4313      	orrs	r3, r2
10004882:	d011      	beq.n	100048a8 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10004884:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004888:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
1000488c:	f023 0103 	bic.w	r1, r3, #3
10004890:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004894:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004898:	681b      	ldr	r3, [r3, #0]
1000489a:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
1000489e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100048a2:	430b      	orrs	r3, r1
100048a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
100048a8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048b0:	681b      	ldr	r3, [r3, #0]
100048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
100048b6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
100048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
100048bc:	2300      	movs	r3, #0
100048be:	63fb      	str	r3, [r7, #60]	@ 0x3c
100048c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
100048c4:	460b      	mov	r3, r1
100048c6:	4313      	orrs	r3, r2
100048c8:	d037      	beq.n	1000493a <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
100048ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048d2:	681b      	ldr	r3, [r3, #0]
100048d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
100048d8:	2b01      	cmp	r3, #1
100048da:	d11c      	bne.n	10004916 <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100048dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100048e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100048e4:	681b      	ldr	r3, [r3, #0]
100048e6:	3380      	adds	r3, #128	@ 0x80
100048e8:	4618      	mov	r0, r3
100048ea:	f7fe fb1d 	bl	10002f28 <RCCEx_PLL4_Config>
100048ee:	4603      	mov	r3, r0
100048f0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100048f4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100048f8:	2b00      	cmp	r3, #0
100048fa:	d002      	beq.n	10004902 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
100048fc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004900:	e2f4      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004902:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004906:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000490a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000490e:	f043 0310 	orr.w	r3, r3, #16
10004912:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10004916:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000491a:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
1000491e:	f023 0101 	bic.w	r1, r3, #1
10004922:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004926:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000492a:	681b      	ldr	r3, [r3, #0]
1000492c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
10004930:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004934:	430b      	orrs	r3, r1
10004936:	f8c2 3924 	str.w	r3, [r2, #2340]	@ 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
1000493a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000493e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004942:	681b      	ldr	r3, [r3, #0]
10004944:	e9d3 2300 	ldrd	r2, r3, [r3]
10004948:	f002 0308 	and.w	r3, r2, #8
1000494c:	633b      	str	r3, [r7, #48]	@ 0x30
1000494e:	2300      	movs	r3, #0
10004950:	637b      	str	r3, [r7, #52]	@ 0x34
10004952:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
10004956:	460b      	mov	r3, r1
10004958:	4313      	orrs	r3, r2
1000495a:	d059      	beq.n	10004a10 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
1000495c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004960:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004964:	681b      	ldr	r3, [r3, #0]
10004966:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000496a:	2b00      	cmp	r3, #0
1000496c:	d002      	beq.n	10004974 <HAL_RCCEx_PeriphCLKConfig+0x179c>
1000496e:	2b02      	cmp	r3, #2
10004970:	d01e      	beq.n	100049b0 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
10004972:	e03b      	b.n	100049ec <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004974:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004978:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000497c:	681b      	ldr	r3, [r3, #0]
1000497e:	3380      	adds	r3, #128	@ 0x80
10004980:	4618      	mov	r0, r3
10004982:	f7fe fad1 	bl	10002f28 <RCCEx_PLL4_Config>
10004986:	4603      	mov	r3, r0
10004988:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000498c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004990:	2b00      	cmp	r3, #0
10004992:	d002      	beq.n	1000499a <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
10004994:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004998:	e2a8      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000499a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000499e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100049a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100049aa:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
100049ae:	e01d      	b.n	100049ec <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100049b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100049b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100049b8:	681b      	ldr	r3, [r3, #0]
100049ba:	3344      	adds	r3, #68	@ 0x44
100049bc:	4618      	mov	r0, r3
100049be:	f7fe f949 	bl	10002c54 <RCCEx_PLL3_Config>
100049c2:	4603      	mov	r3, r0
100049c4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100049c8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049cc:	2b00      	cmp	r3, #0
100049ce:	d002      	beq.n	100049d6 <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
100049d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100049d4:	e28a      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100049d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049da:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100049de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049e2:	f043 0320 	orr.w	r3, r3, #32
100049e6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100049ea:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
100049ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049f0:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
100049f4:	f023 0103 	bic.w	r1, r3, #3
100049f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100049fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a00:	681b      	ldr	r3, [r3, #0]
10004a02:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10004a06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a0a:	430b      	orrs	r3, r1
10004a0c:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10004a10:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a18:	681b      	ldr	r3, [r3, #0]
10004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
10004a22:	62bb      	str	r3, [r7, #40]	@ 0x28
10004a24:	2300      	movs	r3, #0
10004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
10004a28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
10004a2c:	460b      	mov	r3, r1
10004a2e:	4313      	orrs	r3, r2
10004a30:	d058      	beq.n	10004ae4 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10004a32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a3a:	681b      	ldr	r3, [r3, #0]
10004a3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004a40:	2b01      	cmp	r3, #1
10004a42:	d01f      	beq.n	10004a84 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10004a44:	2b02      	cmp	r3, #2
10004a46:	d13b      	bne.n	10004ac0 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004a48:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a50:	681b      	ldr	r3, [r3, #0]
10004a52:	3344      	adds	r3, #68	@ 0x44
10004a54:	4618      	mov	r0, r3
10004a56:	f7fe f8fd 	bl	10002c54 <RCCEx_PLL3_Config>
10004a5a:	4603      	mov	r3, r0
10004a5c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004a60:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a64:	2b00      	cmp	r3, #0
10004a66:	d002      	beq.n	10004a6e <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10004a68:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004a6c:	e23e      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004a6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a72:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004a76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a7a:	f043 0320 	orr.w	r3, r3, #32
10004a7e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004a82:	e01d      	b.n	10004ac0 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004a84:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004a88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004a8c:	681b      	ldr	r3, [r3, #0]
10004a8e:	3380      	adds	r3, #128	@ 0x80
10004a90:	4618      	mov	r0, r3
10004a92:	f7fe fa49 	bl	10002f28 <RCCEx_PLL4_Config>
10004a96:	4603      	mov	r3, r0
10004a98:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004a9c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004aa0:	2b00      	cmp	r3, #0
10004aa2:	d002      	beq.n	10004aaa <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
10004aa4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004aa8:	e220      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004aaa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004aae:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004ab2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004ab6:	f043 0310 	orr.w	r3, r3, #16
10004aba:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004abe:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10004ac0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ac4:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
10004ac8:	f023 0207 	bic.w	r2, r3, #7
10004acc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ad0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ad4:	681b      	ldr	r3, [r3, #0]
10004ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004ada:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004ade:	4313      	orrs	r3, r2
10004ae0:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10004ae4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ae8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004aec:	681b      	ldr	r3, [r3, #0]
10004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
10004af2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
10004af6:	623b      	str	r3, [r7, #32]
10004af8:	2300      	movs	r3, #0
10004afa:	627b      	str	r3, [r7, #36]	@ 0x24
10004afc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10004b00:	460b      	mov	r3, r1
10004b02:	4313      	orrs	r3, r2
10004b04:	d037      	beq.n	10004b76 <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10004b06:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b0e:	681b      	ldr	r3, [r3, #0]
10004b10:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10004b14:	2b01      	cmp	r3, #1
10004b16:	d11c      	bne.n	10004b52 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004b18:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b20:	681b      	ldr	r3, [r3, #0]
10004b22:	3380      	adds	r3, #128	@ 0x80
10004b24:	4618      	mov	r0, r3
10004b26:	f7fe f9ff 	bl	10002f28 <RCCEx_PLL4_Config>
10004b2a:	4603      	mov	r3, r0
10004b2c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10004b30:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b34:	2b00      	cmp	r3, #0
10004b36:	d002      	beq.n	10004b3e <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10004b38:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004b3c:	e1d6      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004b3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b42:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004b46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b4a:	f043 0320 	orr.w	r3, r3, #32
10004b4e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10004b52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b56:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
10004b5a:	f023 0207 	bic.w	r2, r3, #7
10004b5e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b66:	681b      	ldr	r3, [r3, #0]
10004b68:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10004b6c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004b70:	4313      	orrs	r3, r2
10004b72:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10004b76:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004b7e:	681b      	ldr	r3, [r3, #0]
10004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
10004b84:	f002 0340 	and.w	r3, r2, #64	@ 0x40
10004b88:	61bb      	str	r3, [r7, #24]
10004b8a:	2300      	movs	r3, #0
10004b8c:	61fb      	str	r3, [r7, #28]
10004b8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
10004b92:	460b      	mov	r3, r1
10004b94:	4313      	orrs	r3, r2
10004b96:	d058      	beq.n	10004c4a <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
10004b98:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004b9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ba0:	681b      	ldr	r3, [r3, #0]
10004ba2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10004ba6:	2b01      	cmp	r3, #1
10004ba8:	d01f      	beq.n	10004bea <HAL_RCCEx_PeriphCLKConfig+0x1a12>
10004baa:	2b02      	cmp	r3, #2
10004bac:	d13b      	bne.n	10004c26 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004bae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004bb6:	681b      	ldr	r3, [r3, #0]
10004bb8:	3344      	adds	r3, #68	@ 0x44
10004bba:	4618      	mov	r0, r3
10004bbc:	f7fe f84a 	bl	10002c54 <RCCEx_PLL3_Config>
10004bc0:	4603      	mov	r3, r0
10004bc2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004bc6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004bca:	2b00      	cmp	r3, #0
10004bcc:	d002      	beq.n	10004bd4 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
10004bce:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004bd2:	e18b      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004bd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bd8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004bdc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004be0:	f043 0320 	orr.w	r3, r3, #32
10004be4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10004be8:	e01d      	b.n	10004c26 <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004bea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004bee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004bf2:	681b      	ldr	r3, [r3, #0]
10004bf4:	3380      	adds	r3, #128	@ 0x80
10004bf6:	4618      	mov	r0, r3
10004bf8:	f7fe f996 	bl	10002f28 <RCCEx_PLL4_Config>
10004bfc:	4603      	mov	r3, r0
10004bfe:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10004c02:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c06:	2b00      	cmp	r3, #0
10004c08:	d002      	beq.n	10004c10 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
10004c0a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10004c0e:	e16d      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004c10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c14:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004c18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c1c:	f043 0310 	orr.w	r3, r3, #16
10004c20:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10004c24:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10004c26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c2a:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
10004c2e:	f023 0207 	bic.w	r2, r3, #7
10004c32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c3a:	681b      	ldr	r3, [r3, #0]
10004c3c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10004c40:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004c44:	4313      	orrs	r3, r2
10004c46:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10004c4a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004c4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004c52:	681b      	ldr	r3, [r3, #0]
10004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
10004c58:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
10004c5c:	613b      	str	r3, [r7, #16]
10004c5e:	2300      	movs	r3, #0
10004c60:	617b      	str	r3, [r7, #20]
10004c62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
10004c66:	460b      	mov	r3, r1
10004c68:	4313      	orrs	r3, r2
10004c6a:	f000 80c6 	beq.w	10004dfa <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10004c6e:	4ba2      	ldr	r3, [pc, #648]	@ (10004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10004c70:	681b      	ldr	r3, [r3, #0]
10004c72:	4aa1      	ldr	r2, [pc, #644]	@ (10004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10004c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10004c78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10004c7a:	f7fb ff7f 	bl	10000b7c <HAL_GetTick>
10004c7e:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10004c82:	e00a      	b.n	10004c9a <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10004c84:	f7fb ff7a 	bl	10000b7c <HAL_GetTick>
10004c88:	4602      	mov	r2, r0
10004c8a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10004c8e:	1ad3      	subs	r3, r2, r3
10004c90:	2b64      	cmp	r3, #100	@ 0x64
10004c92:	d902      	bls.n	10004c9a <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
10004c94:	2303      	movs	r3, #3
10004c96:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10004c9a:	4b97      	ldr	r3, [pc, #604]	@ (10004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10004c9c:	681b      	ldr	r3, [r3, #0]
10004c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10004ca2:	2b00      	cmp	r3, #0
10004ca4:	d0ee      	beq.n	10004c84 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
10004ca6:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10004caa:	2b00      	cmp	r3, #0
10004cac:	f040 80a2 	bne.w	10004df4 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10004cb0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004cb4:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
10004cb8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004cbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004cc0:	681b      	ldr	r3, [r3, #0]
10004cc2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
10004cc6:	4053      	eors	r3, r2
10004cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
10004ccc:	2b00      	cmp	r3, #0
10004cce:	f000 8086 	beq.w	10004dde <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10004cd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004cd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004cda:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
10004cde:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
10004ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ce6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004cea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004cee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10004cf2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
10004cf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004cfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10004d06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10004d0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004d12:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
10004d16:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10004d1a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
10004d1e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004d22:	4313      	orrs	r3, r2
10004d24:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10004d28:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d2c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004d30:	2204      	movs	r2, #4
10004d32:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10004d34:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10004d38:	f003 020b 	and.w	r2, r3, #11
10004d3c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d40:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004d44:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10004d46:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d4a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004d4e:	2200      	movs	r2, #0
10004d50:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10004d52:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004d5a:	2200      	movs	r2, #0
10004d5c:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
10004d5e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d62:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004d66:	2200      	movs	r2, #0
10004d68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10004d6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004d70:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10004d74:	2200      	movs	r2, #0
10004d76:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
10004d7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
10004d7e:	4618      	mov	r0, r3
10004d80:	f7fc fc0e 	bl	100015a0 <HAL_RCC_OscConfig>
10004d84:	4603      	mov	r3, r0
10004d86:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        if (ret != HAL_OK)
10004d8a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10004d8e:	2b00      	cmp	r3, #0
10004d90:	d002      	beq.n	10004d98 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
10004d92:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10004d96:	e0a9      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10004d98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004da0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
10004da4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004da8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004dac:	681b      	ldr	r3, [r3, #0]
10004dae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
10004db2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004db6:	4313      	orrs	r3, r2
10004db8:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10004dbc:	4b4f      	ldr	r3, [pc, #316]	@ (10004efc <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
10004dbe:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
10004dc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004dc6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
10004dca:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
10004dce:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
10004dd2:	400b      	ands	r3, r1
10004dd4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004dd8:	4313      	orrs	r3, r2
10004dda:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
10004dde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004de2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004de6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
10004dee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10004df2:	e002      	b.n	10004dfa <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10004df4:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10004df8:	e078      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
10004dfa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004dfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e02:	681b      	ldr	r3, [r3, #0]
10004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
10004e08:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
10004e0c:	60bb      	str	r3, [r7, #8]
10004e0e:	2300      	movs	r3, #0
10004e10:	60fb      	str	r3, [r7, #12]
10004e12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10004e16:	460b      	mov	r3, r1
10004e18:	4313      	orrs	r3, r2
10004e1a:	d02a      	beq.n	10004e72 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10004e1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e20:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10004e24:	f023 0201 	bic.w	r2, r3, #1
10004e28:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e30:	681b      	ldr	r3, [r3, #0]
10004e32:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
10004e36:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004e3a:	4313      	orrs	r3, r2
10004e3c:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004e40:	f7fb fe9c 	bl	10000b7c <HAL_GetTick>
10004e44:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004e48:	e00a      	b.n	10004e60 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004e4a:	f7fb fe97 	bl	10000b7c <HAL_GetTick>
10004e4e:	4602      	mov	r2, r0
10004e50:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10004e54:	1ad3      	subs	r3, r2, r3
10004e56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10004e5a:	d901      	bls.n	10004e60 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10004e5c:	2303      	movs	r3, #3
10004e5e:	e045      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004e60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e64:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10004e68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004e70:	d1eb      	bne.n	10004e4a <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10004e72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004e76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004e7a:	681b      	ldr	r3, [r3, #0]
10004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004e80:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
10004e84:	603b      	str	r3, [r7, #0]
10004e86:	2300      	movs	r3, #0
10004e88:	607b      	str	r3, [r7, #4]
10004e8a:	e9d7 1200 	ldrd	r1, r2, [r7]
10004e8e:	460b      	mov	r3, r1
10004e90:	4313      	orrs	r3, r2
10004e92:	d02a      	beq.n	10004eea <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10004e94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004e98:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10004e9c:	f023 0201 	bic.w	r2, r3, #1
10004ea0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10004ea4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10004ea8:	681b      	ldr	r3, [r3, #0]
10004eaa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
10004eae:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004eb2:	4313      	orrs	r3, r2
10004eb4:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004eb8:	f7fb fe60 	bl	10000b7c <HAL_GetTick>
10004ebc:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10004ec0:	e00a      	b.n	10004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004ec2:	f7fb fe5b 	bl	10000b7c <HAL_GetTick>
10004ec6:	4602      	mov	r2, r0
10004ec8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10004ecc:	1ad3      	subs	r3, r2, r3
10004ece:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10004ed2:	d901      	bls.n	10004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10004ed4:	2303      	movs	r3, #3
10004ed6:	e009      	b.n	10004eec <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10004ed8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004edc:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10004ee0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004ee8:	d1eb      	bne.n	10004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
10004eea:	2300      	movs	r3, #0
}
10004eec:	4618      	mov	r0, r3
10004eee:	f507 7712 	add.w	r7, r7, #584	@ 0x248
10004ef2:	46bd      	mov	sp, r7
10004ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10004ef8:	50001000 	.word	0x50001000
10004efc:	7fecfdc0 	.word	0x7fecfdc0

10004f00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
10004f00:	b580      	push	{r7, lr}
10004f02:	b084      	sub	sp, #16
10004f04:	af00      	add	r7, sp, #0
10004f06:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
10004f08:	687b      	ldr	r3, [r7, #4]
10004f0a:	2b00      	cmp	r3, #0
10004f0c:	d101      	bne.n	10004f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
10004f0e:	2301      	movs	r3, #1
10004f10:	e10f      	b.n	10005132 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10004f12:	687b      	ldr	r3, [r7, #4]
10004f14:	2200      	movs	r2, #0
10004f16:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
10004f18:	687b      	ldr	r3, [r7, #4]
10004f1a:	681b      	ldr	r3, [r3, #0]
10004f1c:	4a87      	ldr	r2, [pc, #540]	@ (1000513c <HAL_SPI_Init+0x23c>)
10004f1e:	4293      	cmp	r3, r2
10004f20:	d00f      	beq.n	10004f42 <HAL_SPI_Init+0x42>
10004f22:	687b      	ldr	r3, [r7, #4]
10004f24:	681b      	ldr	r3, [r3, #0]
10004f26:	4a86      	ldr	r2, [pc, #536]	@ (10005140 <HAL_SPI_Init+0x240>)
10004f28:	4293      	cmp	r3, r2
10004f2a:	d00a      	beq.n	10004f42 <HAL_SPI_Init+0x42>
10004f2c:	687b      	ldr	r3, [r7, #4]
10004f2e:	681b      	ldr	r3, [r3, #0]
10004f30:	4a84      	ldr	r2, [pc, #528]	@ (10005144 <HAL_SPI_Init+0x244>)
10004f32:	4293      	cmp	r3, r2
10004f34:	d005      	beq.n	10004f42 <HAL_SPI_Init+0x42>
10004f36:	687b      	ldr	r3, [r7, #4]
10004f38:	68db      	ldr	r3, [r3, #12]
10004f3a:	2b0f      	cmp	r3, #15
10004f3c:	d901      	bls.n	10004f42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
10004f3e:	2301      	movs	r3, #1
10004f40:	e0f7      	b.n	10005132 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
10004f42:	6878      	ldr	r0, [r7, #4]
10004f44:	f000 f900 	bl	10005148 <SPI_GetPacketSize>
10004f48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
10004f4a:	687b      	ldr	r3, [r7, #4]
10004f4c:	681b      	ldr	r3, [r3, #0]
10004f4e:	4a7b      	ldr	r2, [pc, #492]	@ (1000513c <HAL_SPI_Init+0x23c>)
10004f50:	4293      	cmp	r3, r2
10004f52:	d00c      	beq.n	10004f6e <HAL_SPI_Init+0x6e>
10004f54:	687b      	ldr	r3, [r7, #4]
10004f56:	681b      	ldr	r3, [r3, #0]
10004f58:	4a79      	ldr	r2, [pc, #484]	@ (10005140 <HAL_SPI_Init+0x240>)
10004f5a:	4293      	cmp	r3, r2
10004f5c:	d007      	beq.n	10004f6e <HAL_SPI_Init+0x6e>
10004f5e:	687b      	ldr	r3, [r7, #4]
10004f60:	681b      	ldr	r3, [r3, #0]
10004f62:	4a78      	ldr	r2, [pc, #480]	@ (10005144 <HAL_SPI_Init+0x244>)
10004f64:	4293      	cmp	r3, r2
10004f66:	d002      	beq.n	10004f6e <HAL_SPI_Init+0x6e>
10004f68:	68fb      	ldr	r3, [r7, #12]
10004f6a:	2b08      	cmp	r3, #8
10004f6c:	d811      	bhi.n	10004f92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
10004f6e:	687b      	ldr	r3, [r7, #4]
10004f70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
10004f72:	4a72      	ldr	r2, [pc, #456]	@ (1000513c <HAL_SPI_Init+0x23c>)
10004f74:	4293      	cmp	r3, r2
10004f76:	d009      	beq.n	10004f8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
10004f78:	687b      	ldr	r3, [r7, #4]
10004f7a:	681b      	ldr	r3, [r3, #0]
10004f7c:	4a70      	ldr	r2, [pc, #448]	@ (10005140 <HAL_SPI_Init+0x240>)
10004f7e:	4293      	cmp	r3, r2
10004f80:	d004      	beq.n	10004f8c <HAL_SPI_Init+0x8c>
10004f82:	687b      	ldr	r3, [r7, #4]
10004f84:	681b      	ldr	r3, [r3, #0]
10004f86:	4a6f      	ldr	r2, [pc, #444]	@ (10005144 <HAL_SPI_Init+0x244>)
10004f88:	4293      	cmp	r3, r2
10004f8a:	d104      	bne.n	10004f96 <HAL_SPI_Init+0x96>
10004f8c:	68fb      	ldr	r3, [r7, #12]
10004f8e:	2b10      	cmp	r3, #16
10004f90:	d901      	bls.n	10004f96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
10004f92:	2301      	movs	r3, #1
10004f94:	e0cd      	b.n	10005132 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
10004f96:	687b      	ldr	r3, [r7, #4]
10004f98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
10004f9c:	b2db      	uxtb	r3, r3
10004f9e:	2b00      	cmp	r3, #0
10004fa0:	d106      	bne.n	10004fb0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
10004fa2:	687b      	ldr	r3, [r7, #4]
10004fa4:	2200      	movs	r2, #0
10004fa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
10004faa:	6878      	ldr	r0, [r7, #4]
10004fac:	f7fb fbe2 	bl	10000774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
10004fb0:	687b      	ldr	r3, [r7, #4]
10004fb2:	2202      	movs	r2, #2
10004fb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
10004fb8:	687b      	ldr	r3, [r7, #4]
10004fba:	681b      	ldr	r3, [r3, #0]
10004fbc:	681a      	ldr	r2, [r3, #0]
10004fbe:	687b      	ldr	r3, [r7, #4]
10004fc0:	681b      	ldr	r3, [r3, #0]
10004fc2:	f022 0201 	bic.w	r2, r2, #1
10004fc6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
10004fc8:	687b      	ldr	r3, [r7, #4]
10004fca:	681b      	ldr	r3, [r3, #0]
10004fcc:	689b      	ldr	r3, [r3, #8]
10004fce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
10004fd2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
10004fd4:	687b      	ldr	r3, [r7, #4]
10004fd6:	699b      	ldr	r3, [r3, #24]
10004fd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
10004fdc:	d119      	bne.n	10005012 <HAL_SPI_Init+0x112>
10004fde:	687b      	ldr	r3, [r7, #4]
10004fe0:	685b      	ldr	r3, [r3, #4]
10004fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
10004fe6:	d103      	bne.n	10004ff0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
10004fe8:	687b      	ldr	r3, [r7, #4]
10004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
10004fec:	2b00      	cmp	r3, #0
10004fee:	d008      	beq.n	10005002 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
10004ff0:	687b      	ldr	r3, [r7, #4]
10004ff2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
10004ff4:	2b00      	cmp	r3, #0
10004ff6:	d10c      	bne.n	10005012 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
10004ff8:	687b      	ldr	r3, [r7, #4]
10004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
10004ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
10005000:	d107      	bne.n	10005012 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
10005002:	687b      	ldr	r3, [r7, #4]
10005004:	681b      	ldr	r3, [r3, #0]
10005006:	681a      	ldr	r2, [r3, #0]
10005008:	687b      	ldr	r3, [r7, #4]
1000500a:	681b      	ldr	r3, [r3, #0]
1000500c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
10005010:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
10005012:	687b      	ldr	r3, [r7, #4]
10005014:	685b      	ldr	r3, [r3, #4]
10005016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
1000501a:	2b00      	cmp	r3, #0
1000501c:	d00f      	beq.n	1000503e <HAL_SPI_Init+0x13e>
1000501e:	687b      	ldr	r3, [r7, #4]
10005020:	68db      	ldr	r3, [r3, #12]
10005022:	2b06      	cmp	r3, #6
10005024:	d90b      	bls.n	1000503e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
10005026:	687b      	ldr	r3, [r7, #4]
10005028:	681b      	ldr	r3, [r3, #0]
1000502a:	681b      	ldr	r3, [r3, #0]
1000502c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
10005030:	687b      	ldr	r3, [r7, #4]
10005032:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
10005034:	687b      	ldr	r3, [r7, #4]
10005036:	681b      	ldr	r3, [r3, #0]
10005038:	430a      	orrs	r2, r1
1000503a:	601a      	str	r2, [r3, #0]
1000503c:	e007      	b.n	1000504e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
1000503e:	687b      	ldr	r3, [r7, #4]
10005040:	681b      	ldr	r3, [r3, #0]
10005042:	681a      	ldr	r2, [r3, #0]
10005044:	687b      	ldr	r3, [r7, #4]
10005046:	681b      	ldr	r3, [r3, #0]
10005048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
1000504c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
1000504e:	687b      	ldr	r3, [r7, #4]
10005050:	69da      	ldr	r2, [r3, #28]
10005052:	687b      	ldr	r3, [r7, #4]
10005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005056:	431a      	orrs	r2, r3
10005058:	68bb      	ldr	r3, [r7, #8]
1000505a:	431a      	orrs	r2, r3
1000505c:	687b      	ldr	r3, [r7, #4]
1000505e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005060:	ea42 0103 	orr.w	r1, r2, r3
10005064:	687b      	ldr	r3, [r7, #4]
10005066:	68da      	ldr	r2, [r3, #12]
10005068:	687b      	ldr	r3, [r7, #4]
1000506a:	681b      	ldr	r3, [r3, #0]
1000506c:	430a      	orrs	r2, r1
1000506e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
10005070:	687b      	ldr	r3, [r7, #4]
10005072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10005074:	687b      	ldr	r3, [r7, #4]
10005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005078:	431a      	orrs	r2, r3
1000507a:	687b      	ldr	r3, [r7, #4]
1000507c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000507e:	431a      	orrs	r2, r3
10005080:	687b      	ldr	r3, [r7, #4]
10005082:	699b      	ldr	r3, [r3, #24]
10005084:	431a      	orrs	r2, r3
10005086:	687b      	ldr	r3, [r7, #4]
10005088:	691b      	ldr	r3, [r3, #16]
1000508a:	431a      	orrs	r2, r3
1000508c:	687b      	ldr	r3, [r7, #4]
1000508e:	695b      	ldr	r3, [r3, #20]
10005090:	431a      	orrs	r2, r3
10005092:	687b      	ldr	r3, [r7, #4]
10005094:	6a1b      	ldr	r3, [r3, #32]
10005096:	431a      	orrs	r2, r3
10005098:	687b      	ldr	r3, [r7, #4]
1000509a:	685b      	ldr	r3, [r3, #4]
1000509c:	431a      	orrs	r2, r3
1000509e:	687b      	ldr	r3, [r7, #4]
100050a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100050a2:	431a      	orrs	r2, r3
100050a4:	687b      	ldr	r3, [r7, #4]
100050a6:	689b      	ldr	r3, [r3, #8]
100050a8:	431a      	orrs	r2, r3
100050aa:	687b      	ldr	r3, [r7, #4]
100050ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100050ae:	ea42 0103 	orr.w	r1, r2, r3
100050b2:	687b      	ldr	r3, [r7, #4]
100050b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
100050b6:	687b      	ldr	r3, [r7, #4]
100050b8:	681b      	ldr	r3, [r3, #0]
100050ba:	430a      	orrs	r2, r1
100050bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
100050be:	687b      	ldr	r3, [r7, #4]
100050c0:	685b      	ldr	r3, [r3, #4]
100050c2:	2b00      	cmp	r3, #0
100050c4:	d113      	bne.n	100050ee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
100050c6:	687b      	ldr	r3, [r7, #4]
100050c8:	681b      	ldr	r3, [r3, #0]
100050ca:	689b      	ldr	r3, [r3, #8]
100050cc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
100050d0:	687b      	ldr	r3, [r7, #4]
100050d2:	681b      	ldr	r3, [r3, #0]
100050d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
100050d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
100050da:	687b      	ldr	r3, [r7, #4]
100050dc:	681b      	ldr	r3, [r3, #0]
100050de:	689b      	ldr	r3, [r3, #8]
100050e0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
100050e4:	687b      	ldr	r3, [r7, #4]
100050e6:	681b      	ldr	r3, [r3, #0]
100050e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
100050ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
100050ee:	687b      	ldr	r3, [r7, #4]
100050f0:	681b      	ldr	r3, [r3, #0]
100050f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
100050f4:	687b      	ldr	r3, [r7, #4]
100050f6:	681b      	ldr	r3, [r3, #0]
100050f8:	f022 0201 	bic.w	r2, r2, #1
100050fc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
100050fe:	687b      	ldr	r3, [r7, #4]
10005100:	685b      	ldr	r3, [r3, #4]
10005102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
10005106:	2b00      	cmp	r3, #0
10005108:	d00a      	beq.n	10005120 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
1000510a:	687b      	ldr	r3, [r7, #4]
1000510c:	681b      	ldr	r3, [r3, #0]
1000510e:	68db      	ldr	r3, [r3, #12]
10005110:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
10005114:	687b      	ldr	r3, [r7, #4]
10005116:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
10005118:	687b      	ldr	r3, [r7, #4]
1000511a:	681b      	ldr	r3, [r3, #0]
1000511c:	430a      	orrs	r2, r1
1000511e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
10005120:	687b      	ldr	r3, [r7, #4]
10005122:	2200      	movs	r2, #0
10005124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
10005128:	687b      	ldr	r3, [r7, #4]
1000512a:	2201      	movs	r2, #1
1000512c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
10005130:	2300      	movs	r3, #0
}
10005132:	4618      	mov	r0, r3
10005134:	3710      	adds	r7, #16
10005136:	46bd      	mov	sp, r7
10005138:	bd80      	pop	{r7, pc}
1000513a:	bf00      	nop
1000513c:	44004000 	.word	0x44004000
10005140:	4000b000 	.word	0x4000b000
10005144:	4000c000 	.word	0x4000c000

10005148 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
10005148:	b480      	push	{r7}
1000514a:	b085      	sub	sp, #20
1000514c:	af00      	add	r7, sp, #0
1000514e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
10005150:	687b      	ldr	r3, [r7, #4]
10005152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005154:	095b      	lsrs	r3, r3, #5
10005156:	3301      	adds	r3, #1
10005158:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
1000515a:	687b      	ldr	r3, [r7, #4]
1000515c:	68db      	ldr	r3, [r3, #12]
1000515e:	3301      	adds	r3, #1
10005160:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
10005162:	68bb      	ldr	r3, [r7, #8]
10005164:	3307      	adds	r3, #7
10005166:	08db      	lsrs	r3, r3, #3
10005168:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
1000516a:	68bb      	ldr	r3, [r7, #8]
1000516c:	68fa      	ldr	r2, [r7, #12]
1000516e:	fb02 f303 	mul.w	r3, r2, r3
}
10005172:	4618      	mov	r0, r3
10005174:	3714      	adds	r7, #20
10005176:	46bd      	mov	sp, r7
10005178:	f85d 7b04 	ldr.w	r7, [sp], #4
1000517c:	4770      	bx	lr

1000517e <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
1000517e:	b480      	push	{r7}
10005180:	b083      	sub	sp, #12
10005182:	af00      	add	r7, sp, #0
10005184:	6078      	str	r0, [r7, #4]
	list->prev = list;
10005186:	687b      	ldr	r3, [r7, #4]
10005188:	687a      	ldr	r2, [r7, #4]
1000518a:	605a      	str	r2, [r3, #4]
	list->next = list;
1000518c:	687b      	ldr	r3, [r7, #4]
1000518e:	687a      	ldr	r2, [r7, #4]
10005190:	601a      	str	r2, [r3, #0]
}
10005192:	bf00      	nop
10005194:	370c      	adds	r7, #12
10005196:	46bd      	mov	sp, r7
10005198:	f85d 7b04 	ldr.w	r7, [sp], #4
1000519c:	4770      	bx	lr

1000519e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
1000519e:	b480      	push	{r7}
100051a0:	b083      	sub	sp, #12
100051a2:	af00      	add	r7, sp, #0
100051a4:	6078      	str	r0, [r7, #4]
100051a6:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
100051a8:	687b      	ldr	r3, [r7, #4]
100051aa:	685a      	ldr	r2, [r3, #4]
100051ac:	683b      	ldr	r3, [r7, #0]
100051ae:	605a      	str	r2, [r3, #4]
	new_node->next = node;
100051b0:	683b      	ldr	r3, [r7, #0]
100051b2:	687a      	ldr	r2, [r7, #4]
100051b4:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
100051b6:	683b      	ldr	r3, [r7, #0]
100051b8:	681b      	ldr	r3, [r3, #0]
100051ba:	683a      	ldr	r2, [r7, #0]
100051bc:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
100051be:	683b      	ldr	r3, [r7, #0]
100051c0:	685b      	ldr	r3, [r3, #4]
100051c2:	683a      	ldr	r2, [r7, #0]
100051c4:	601a      	str	r2, [r3, #0]
}
100051c6:	bf00      	nop
100051c8:	370c      	adds	r7, #12
100051ca:	46bd      	mov	sp, r7
100051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
100051d0:	4770      	bx	lr

100051d2 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
100051d2:	b580      	push	{r7, lr}
100051d4:	b082      	sub	sp, #8
100051d6:	af00      	add	r7, sp, #0
100051d8:	6078      	str	r0, [r7, #4]
100051da:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
100051dc:	6839      	ldr	r1, [r7, #0]
100051de:	6878      	ldr	r0, [r7, #4]
100051e0:	f7ff ffdd 	bl	1000519e <metal_list_add_before>
}
100051e4:	bf00      	nop
100051e6:	3708      	adds	r7, #8
100051e8:	46bd      	mov	sp, r7
100051ea:	bd80      	pop	{r7, pc}

100051ec <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
100051ec:	b580      	push	{r7, lr}
100051ee:	b082      	sub	sp, #8
100051f0:	af00      	add	r7, sp, #0
100051f2:	6078      	str	r0, [r7, #4]
100051f4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
100051f6:	6839      	ldr	r1, [r7, #0]
100051f8:	6878      	ldr	r0, [r7, #4]
100051fa:	f001 fefb 	bl	10006ff4 <metal_machine_cache_flush>
}
100051fe:	bf00      	nop
10005200:	3708      	adds	r7, #8
10005202:	46bd      	mov	sp, r7
10005204:	bd80      	pop	{r7, pc}

10005206 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10005206:	b580      	push	{r7, lr}
10005208:	b082      	sub	sp, #8
1000520a:	af00      	add	r7, sp, #0
1000520c:	6078      	str	r0, [r7, #4]
1000520e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
10005210:	6839      	ldr	r1, [r7, #0]
10005212:	6878      	ldr	r0, [r7, #4]
10005214:	f001 fef9 	bl	1000700a <metal_machine_cache_invalidate>
}
10005218:	bf00      	nop
1000521a:	3708      	adds	r7, #8
1000521c:	46bd      	mov	sp, r7
1000521e:	bd80      	pop	{r7, pc}

10005220 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
10005220:	b580      	push	{r7, lr}
10005222:	b082      	sub	sp, #8
10005224:	af00      	add	r7, sp, #0
10005226:	6078      	str	r0, [r7, #4]
10005228:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
1000522a:	6839      	ldr	r1, [r7, #0]
1000522c:	6878      	ldr	r0, [r7, #4]
1000522e:	f7ff ffdd 	bl	100051ec <__metal_cache_flush>
}
10005232:	bf00      	nop
10005234:	3708      	adds	r7, #8
10005236:	46bd      	mov	sp, r7
10005238:	bd80      	pop	{r7, pc}

1000523a <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
1000523a:	b580      	push	{r7, lr}
1000523c:	b082      	sub	sp, #8
1000523e:	af00      	add	r7, sp, #0
10005240:	6078      	str	r0, [r7, #4]
10005242:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
10005244:	6839      	ldr	r1, [r7, #0]
10005246:	6878      	ldr	r0, [r7, #4]
10005248:	f7ff ffdd 	bl	10005206 <__metal_cache_invalidate>
}
1000524c:	bf00      	nop
1000524e:	3708      	adds	r7, #8
10005250:	46bd      	mov	sp, r7
10005252:	bd80      	pop	{r7, pc}

10005254 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
10005254:	b580      	push	{r7, lr}
10005256:	b082      	sub	sp, #8
10005258:	af00      	add	r7, sp, #0
1000525a:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
1000525c:	687b      	ldr	r3, [r7, #4]
1000525e:	2b00      	cmp	r3, #0
10005260:	d008      	beq.n	10005274 <metal_bus_register+0x20>
10005262:	687b      	ldr	r3, [r7, #4]
10005264:	681b      	ldr	r3, [r3, #0]
10005266:	2b00      	cmp	r3, #0
10005268:	d004      	beq.n	10005274 <metal_bus_register+0x20>
1000526a:	687b      	ldr	r3, [r7, #4]
1000526c:	681b      	ldr	r3, [r3, #0]
1000526e:	781b      	ldrb	r3, [r3, #0]
10005270:	2b00      	cmp	r3, #0
10005272:	d102      	bne.n	1000527a <metal_bus_register+0x26>
		return -EINVAL;
10005274:	f06f 0315 	mvn.w	r3, #21
10005278:	e026      	b.n	100052c8 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
1000527a:	687b      	ldr	r3, [r7, #4]
1000527c:	681b      	ldr	r3, [r3, #0]
1000527e:	2100      	movs	r1, #0
10005280:	4618      	mov	r0, r3
10005282:	f000 f82b 	bl	100052dc <metal_bus_find>
10005286:	4603      	mov	r3, r0
10005288:	2b00      	cmp	r3, #0
1000528a:	d102      	bne.n	10005292 <metal_bus_register+0x3e>
		return -EEXIST;
1000528c:	f06f 0310 	mvn.w	r3, #16
10005290:	e01a      	b.n	100052c8 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
10005292:	687b      	ldr	r3, [r7, #4]
10005294:	331c      	adds	r3, #28
10005296:	4618      	mov	r0, r3
10005298:	f7ff ff71 	bl	1000517e <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
1000529c:	687b      	ldr	r3, [r7, #4]
1000529e:	3324      	adds	r3, #36	@ 0x24
100052a0:	4619      	mov	r1, r3
100052a2:	480b      	ldr	r0, [pc, #44]	@ (100052d0 <metal_bus_register+0x7c>)
100052a4:	f7ff ff95 	bl	100051d2 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
100052a8:	4b0a      	ldr	r3, [pc, #40]	@ (100052d4 <metal_bus_register+0x80>)
100052aa:	781b      	ldrb	r3, [r3, #0]
100052ac:	2b06      	cmp	r3, #6
100052ae:	d90a      	bls.n	100052c6 <metal_bus_register+0x72>
100052b0:	4b08      	ldr	r3, [pc, #32]	@ (100052d4 <metal_bus_register+0x80>)
100052b2:	685b      	ldr	r3, [r3, #4]
100052b4:	2b00      	cmp	r3, #0
100052b6:	d006      	beq.n	100052c6 <metal_bus_register+0x72>
100052b8:	4b06      	ldr	r3, [pc, #24]	@ (100052d4 <metal_bus_register+0x80>)
100052ba:	685b      	ldr	r3, [r3, #4]
100052bc:	687a      	ldr	r2, [r7, #4]
100052be:	6812      	ldr	r2, [r2, #0]
100052c0:	4905      	ldr	r1, [pc, #20]	@ (100052d8 <metal_bus_register+0x84>)
100052c2:	2007      	movs	r0, #7
100052c4:	4798      	blx	r3
	return 0;
100052c6:	2300      	movs	r3, #0
}
100052c8:	4618      	mov	r0, r3
100052ca:	3708      	adds	r7, #8
100052cc:	46bd      	mov	sp, r7
100052ce:	bd80      	pop	{r7, pc}
100052d0:	100202ec 	.word	0x100202ec
100052d4:	100202e4 	.word	0x100202e4
100052d8:	10008f88 	.word	0x10008f88

100052dc <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
100052dc:	b580      	push	{r7, lr}
100052de:	b084      	sub	sp, #16
100052e0:	af00      	add	r7, sp, #0
100052e2:	6078      	str	r0, [r7, #4]
100052e4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
100052e6:	4b12      	ldr	r3, [pc, #72]	@ (10005330 <metal_bus_find+0x54>)
100052e8:	689b      	ldr	r3, [r3, #8]
100052ea:	60fb      	str	r3, [r7, #12]
100052ec:	e016      	b.n	1000531c <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
100052ee:	68fb      	ldr	r3, [r7, #12]
100052f0:	3b24      	subs	r3, #36	@ 0x24
100052f2:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
100052f4:	68bb      	ldr	r3, [r7, #8]
100052f6:	681b      	ldr	r3, [r3, #0]
100052f8:	6879      	ldr	r1, [r7, #4]
100052fa:	4618      	mov	r0, r3
100052fc:	f7fa fea0 	bl	10000040 <strcmp>
10005300:	4603      	mov	r3, r0
10005302:	2b00      	cmp	r3, #0
10005304:	d107      	bne.n	10005316 <metal_bus_find+0x3a>
10005306:	683b      	ldr	r3, [r7, #0]
10005308:	2b00      	cmp	r3, #0
1000530a:	d004      	beq.n	10005316 <metal_bus_find+0x3a>
			*result = bus;
1000530c:	683b      	ldr	r3, [r7, #0]
1000530e:	68ba      	ldr	r2, [r7, #8]
10005310:	601a      	str	r2, [r3, #0]
			return 0;
10005312:	2300      	movs	r3, #0
10005314:	e008      	b.n	10005328 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10005316:	68fb      	ldr	r3, [r7, #12]
10005318:	681b      	ldr	r3, [r3, #0]
1000531a:	60fb      	str	r3, [r7, #12]
1000531c:	68fb      	ldr	r3, [r7, #12]
1000531e:	4a05      	ldr	r2, [pc, #20]	@ (10005334 <metal_bus_find+0x58>)
10005320:	4293      	cmp	r3, r2
10005322:	d1e4      	bne.n	100052ee <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10005324:	f06f 0301 	mvn.w	r3, #1
}
10005328:	4618      	mov	r0, r3
1000532a:	3710      	adds	r7, #16
1000532c:	46bd      	mov	sp, r7
1000532e:	bd80      	pop	{r7, pc}
10005330:	100202e4 	.word	0x100202e4
10005334:	100202ec 	.word	0x100202ec

10005338 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10005338:	b580      	push	{r7, lr}
1000533a:	b086      	sub	sp, #24
1000533c:	af00      	add	r7, sp, #0
1000533e:	60f8      	str	r0, [r7, #12]
10005340:	60b9      	str	r1, [r7, #8]
10005342:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10005344:	68fb      	ldr	r3, [r7, #12]
10005346:	2b00      	cmp	r3, #0
10005348:	d00d      	beq.n	10005366 <metal_device_open+0x2e>
1000534a:	68fb      	ldr	r3, [r7, #12]
1000534c:	781b      	ldrb	r3, [r3, #0]
1000534e:	2b00      	cmp	r3, #0
10005350:	d009      	beq.n	10005366 <metal_device_open+0x2e>
10005352:	68bb      	ldr	r3, [r7, #8]
10005354:	2b00      	cmp	r3, #0
10005356:	d006      	beq.n	10005366 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10005358:	68bb      	ldr	r3, [r7, #8]
1000535a:	781b      	ldrb	r3, [r3, #0]
1000535c:	2b00      	cmp	r3, #0
1000535e:	d002      	beq.n	10005366 <metal_device_open+0x2e>
10005360:	687b      	ldr	r3, [r7, #4]
10005362:	2b00      	cmp	r3, #0
10005364:	d102      	bne.n	1000536c <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10005366:	f06f 0315 	mvn.w	r3, #21
1000536a:	e01f      	b.n	100053ac <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
1000536c:	f107 0310 	add.w	r3, r7, #16
10005370:	4619      	mov	r1, r3
10005372:	68f8      	ldr	r0, [r7, #12]
10005374:	f7ff ffb2 	bl	100052dc <metal_bus_find>
10005378:	6178      	str	r0, [r7, #20]
	if (error)
1000537a:	697b      	ldr	r3, [r7, #20]
1000537c:	2b00      	cmp	r3, #0
1000537e:	d001      	beq.n	10005384 <metal_device_open+0x4c>
		return error;
10005380:	697b      	ldr	r3, [r7, #20]
10005382:	e013      	b.n	100053ac <metal_device_open+0x74>

	if (!bus->ops.dev_open)
10005384:	693b      	ldr	r3, [r7, #16]
10005386:	689b      	ldr	r3, [r3, #8]
10005388:	2b00      	cmp	r3, #0
1000538a:	d102      	bne.n	10005392 <metal_device_open+0x5a>
		return -ENODEV;
1000538c:	f06f 0312 	mvn.w	r3, #18
10005390:	e00c      	b.n	100053ac <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
10005392:	693b      	ldr	r3, [r7, #16]
10005394:	689b      	ldr	r3, [r3, #8]
10005396:	6938      	ldr	r0, [r7, #16]
10005398:	687a      	ldr	r2, [r7, #4]
1000539a:	68b9      	ldr	r1, [r7, #8]
1000539c:	4798      	blx	r3
1000539e:	6178      	str	r0, [r7, #20]
	if (error)
100053a0:	697b      	ldr	r3, [r7, #20]
100053a2:	2b00      	cmp	r3, #0
100053a4:	d001      	beq.n	100053aa <metal_device_open+0x72>
		return error;
100053a6:	697b      	ldr	r3, [r7, #20]
100053a8:	e000      	b.n	100053ac <metal_device_open+0x74>

	return 0;
100053aa:	2300      	movs	r3, #0
}
100053ac:	4618      	mov	r0, r3
100053ae:	3718      	adds	r7, #24
100053b0:	46bd      	mov	sp, r7
100053b2:	bd80      	pop	{r7, pc}

100053b4 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
100053b4:	b580      	push	{r7, lr}
100053b6:	b082      	sub	sp, #8
100053b8:	af00      	add	r7, sp, #0
100053ba:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
100053bc:	687b      	ldr	r3, [r7, #4]
100053be:	681b      	ldr	r3, [r3, #0]
100053c0:	2b00      	cmp	r3, #0
100053c2:	d008      	beq.n	100053d6 <metal_register_generic_device+0x22>
100053c4:	687b      	ldr	r3, [r7, #4]
100053c6:	681b      	ldr	r3, [r3, #0]
100053c8:	781b      	ldrb	r3, [r3, #0]
100053ca:	2b00      	cmp	r3, #0
100053cc:	d003      	beq.n	100053d6 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
100053ce:	687b      	ldr	r3, [r7, #4]
100053d0:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
100053d2:	2b02      	cmp	r3, #2
100053d4:	d902      	bls.n	100053dc <metal_register_generic_device+0x28>
		return -EINVAL;
100053d6:	f06f 0315 	mvn.w	r3, #21
100053da:	e009      	b.n	100053f0 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
100053dc:	687b      	ldr	r3, [r7, #4]
100053de:	4a06      	ldr	r2, [pc, #24]	@ (100053f8 <metal_register_generic_device+0x44>)
100053e0:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
100053e2:	687b      	ldr	r3, [r7, #4]
100053e4:	337c      	adds	r3, #124	@ 0x7c
100053e6:	4619      	mov	r1, r3
100053e8:	4804      	ldr	r0, [pc, #16]	@ (100053fc <metal_register_generic_device+0x48>)
100053ea:	f7ff fef2 	bl	100051d2 <metal_list_add_tail>
			    &device->node);
	return 0;
100053ee:	2300      	movs	r3, #0
}
100053f0:	4618      	mov	r0, r3
100053f2:	3708      	adds	r7, #8
100053f4:	46bd      	mov	sp, r7
100053f6:	bd80      	pop	{r7, pc}
100053f8:	1002000c 	.word	0x1002000c
100053fc:	100202fc 	.word	0x100202fc

10005400 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
10005400:	b580      	push	{r7, lr}
10005402:	b086      	sub	sp, #24
10005404:	af00      	add	r7, sp, #0
10005406:	60f8      	str	r0, [r7, #12]
10005408:	60b9      	str	r1, [r7, #8]
1000540a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000540c:	4b12      	ldr	r3, [pc, #72]	@ (10005458 <metal_generic_dev_open+0x58>)
1000540e:	699b      	ldr	r3, [r3, #24]
10005410:	617b      	str	r3, [r7, #20]
10005412:	e016      	b.n	10005442 <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10005414:	697b      	ldr	r3, [r7, #20]
10005416:	3b7c      	subs	r3, #124	@ 0x7c
10005418:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
1000541a:	693b      	ldr	r3, [r7, #16]
1000541c:	681b      	ldr	r3, [r3, #0]
1000541e:	68b9      	ldr	r1, [r7, #8]
10005420:	4618      	mov	r0, r3
10005422:	f7fa fe0d 	bl	10000040 <strcmp>
10005426:	4603      	mov	r3, r0
10005428:	2b00      	cmp	r3, #0
1000542a:	d107      	bne.n	1000543c <metal_generic_dev_open+0x3c>
			*device = dev;
1000542c:	687b      	ldr	r3, [r7, #4]
1000542e:	693a      	ldr	r2, [r7, #16]
10005430:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
10005432:	6938      	ldr	r0, [r7, #16]
10005434:	f000 f890 	bl	10005558 <metal_generic_dev_sys_open>
10005438:	4603      	mov	r3, r0
1000543a:	e008      	b.n	1000544e <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000543c:	697b      	ldr	r3, [r7, #20]
1000543e:	681b      	ldr	r3, [r3, #0]
10005440:	617b      	str	r3, [r7, #20]
10005442:	697b      	ldr	r3, [r7, #20]
10005444:	4a05      	ldr	r2, [pc, #20]	@ (1000545c <metal_generic_dev_open+0x5c>)
10005446:	4293      	cmp	r3, r2
10005448:	d1e4      	bne.n	10005414 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
1000544a:	f06f 0312 	mvn.w	r3, #18
}
1000544e:	4618      	mov	r0, r3
10005450:	3718      	adds	r7, #24
10005452:	46bd      	mov	sp, r7
10005454:	bd80      	pop	{r7, pc}
10005456:	bf00      	nop
10005458:	100202e4 	.word	0x100202e4
1000545c:	100202fc 	.word	0x100202fc

10005460 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10005460:	b580      	push	{r7, lr}
10005462:	b086      	sub	sp, #24
10005464:	af00      	add	r7, sp, #0
10005466:	60f8      	str	r0, [r7, #12]
10005468:	60b9      	str	r1, [r7, #8]
1000546a:	607a      	str	r2, [r7, #4]
1000546c:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
1000546e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10005470:	683b      	ldr	r3, [r7, #0]
10005472:	429a      	cmp	r2, r3
10005474:	d009      	beq.n	1000548a <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10005476:	6a3a      	ldr	r2, [r7, #32]
10005478:	4613      	mov	r3, r2
1000547a:	005b      	lsls	r3, r3, #1
1000547c:	4413      	add	r3, r2
1000547e:	009b      	lsls	r3, r3, #2
10005480:	461a      	mov	r2, r3
10005482:	6839      	ldr	r1, [r7, #0]
10005484:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10005486:	f002 fe66 	bl	10008156 <memcpy>
	for (i = 0; i < nents_in; i++) {
1000548a:	2300      	movs	r3, #0
1000548c:	617b      	str	r3, [r7, #20]
1000548e:	e02f      	b.n	100054f0 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
10005490:	687b      	ldr	r3, [r7, #4]
10005492:	2b02      	cmp	r3, #2
10005494:	d114      	bne.n	100054c0 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10005496:	697a      	ldr	r2, [r7, #20]
10005498:	4613      	mov	r3, r2
1000549a:	005b      	lsls	r3, r3, #1
1000549c:	4413      	add	r3, r2
1000549e:	009b      	lsls	r3, r3, #2
100054a0:	461a      	mov	r2, r3
100054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100054a4:	4413      	add	r3, r2
100054a6:	6818      	ldr	r0, [r3, #0]
100054a8:	697a      	ldr	r2, [r7, #20]
100054aa:	4613      	mov	r3, r2
100054ac:	005b      	lsls	r3, r3, #1
100054ae:	4413      	add	r3, r2
100054b0:	009b      	lsls	r3, r3, #2
100054b2:	461a      	mov	r2, r3
100054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100054b6:	4413      	add	r3, r2
100054b8:	689b      	ldr	r3, [r3, #8]
100054ba:	4619      	mov	r1, r3
100054bc:	f7ff feb0 	bl	10005220 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
100054c0:	697a      	ldr	r2, [r7, #20]
100054c2:	4613      	mov	r3, r2
100054c4:	005b      	lsls	r3, r3, #1
100054c6:	4413      	add	r3, r2
100054c8:	009b      	lsls	r3, r3, #2
100054ca:	461a      	mov	r2, r3
100054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100054ce:	4413      	add	r3, r2
100054d0:	6818      	ldr	r0, [r3, #0]
100054d2:	697a      	ldr	r2, [r7, #20]
100054d4:	4613      	mov	r3, r2
100054d6:	005b      	lsls	r3, r3, #1
100054d8:	4413      	add	r3, r2
100054da:	009b      	lsls	r3, r3, #2
100054dc:	461a      	mov	r2, r3
100054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100054e0:	4413      	add	r3, r2
100054e2:	689b      	ldr	r3, [r3, #8]
100054e4:	4619      	mov	r1, r3
100054e6:	f7ff fea8 	bl	1000523a <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
100054ea:	697b      	ldr	r3, [r7, #20]
100054ec:	3301      	adds	r3, #1
100054ee:	617b      	str	r3, [r7, #20]
100054f0:	697a      	ldr	r2, [r7, #20]
100054f2:	6a3b      	ldr	r3, [r7, #32]
100054f4:	429a      	cmp	r2, r3
100054f6:	dbcb      	blt.n	10005490 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
100054f8:	6a3b      	ldr	r3, [r7, #32]
}
100054fa:	4618      	mov	r0, r3
100054fc:	3718      	adds	r7, #24
100054fe:	46bd      	mov	sp, r7
10005500:	bd80      	pop	{r7, pc}

10005502 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10005502:	b580      	push	{r7, lr}
10005504:	b086      	sub	sp, #24
10005506:	af00      	add	r7, sp, #0
10005508:	60f8      	str	r0, [r7, #12]
1000550a:	60b9      	str	r1, [r7, #8]
1000550c:	607a      	str	r2, [r7, #4]
1000550e:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10005510:	2300      	movs	r3, #0
10005512:	617b      	str	r3, [r7, #20]
10005514:	e017      	b.n	10005546 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10005516:	697a      	ldr	r2, [r7, #20]
10005518:	4613      	mov	r3, r2
1000551a:	005b      	lsls	r3, r3, #1
1000551c:	4413      	add	r3, r2
1000551e:	009b      	lsls	r3, r3, #2
10005520:	461a      	mov	r2, r3
10005522:	683b      	ldr	r3, [r7, #0]
10005524:	4413      	add	r3, r2
10005526:	6818      	ldr	r0, [r3, #0]
10005528:	697a      	ldr	r2, [r7, #20]
1000552a:	4613      	mov	r3, r2
1000552c:	005b      	lsls	r3, r3, #1
1000552e:	4413      	add	r3, r2
10005530:	009b      	lsls	r3, r3, #2
10005532:	461a      	mov	r2, r3
10005534:	683b      	ldr	r3, [r7, #0]
10005536:	4413      	add	r3, r2
10005538:	689b      	ldr	r3, [r3, #8]
1000553a:	4619      	mov	r1, r3
1000553c:	f7ff fe7d 	bl	1000523a <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
10005540:	697b      	ldr	r3, [r7, #20]
10005542:	3301      	adds	r3, #1
10005544:	617b      	str	r3, [r7, #20]
10005546:	697a      	ldr	r2, [r7, #20]
10005548:	6a3b      	ldr	r3, [r7, #32]
1000554a:	429a      	cmp	r2, r3
1000554c:	dbe3      	blt.n	10005516 <metal_generic_dev_dma_unmap+0x14>
	}
}
1000554e:	bf00      	nop
10005550:	bf00      	nop
10005552:	3718      	adds	r7, #24
10005554:	46bd      	mov	sp, r7
10005556:	bd80      	pop	{r7, pc}

10005558 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
10005558:	b580      	push	{r7, lr}
1000555a:	b084      	sub	sp, #16
1000555c:	af00      	add	r7, sp, #0
1000555e:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
10005560:	2300      	movs	r3, #0
10005562:	60fb      	str	r3, [r7, #12]
10005564:	e013      	b.n	1000558e <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
10005566:	68fa      	ldr	r2, [r7, #12]
10005568:	4613      	mov	r3, r2
1000556a:	00db      	lsls	r3, r3, #3
1000556c:	1a9b      	subs	r3, r3, r2
1000556e:	00db      	lsls	r3, r3, #3
10005570:	3308      	adds	r3, #8
10005572:	687a      	ldr	r2, [r7, #4]
10005574:	4413      	add	r3, r2
10005576:	3304      	adds	r3, #4
10005578:	60bb      	str	r3, [r7, #8]
		if (!io->size)
1000557a:	68bb      	ldr	r3, [r7, #8]
1000557c:	689b      	ldr	r3, [r3, #8]
1000557e:	2b00      	cmp	r3, #0
10005580:	d00b      	beq.n	1000559a <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
10005582:	68b8      	ldr	r0, [r7, #8]
10005584:	f000 f81e 	bl	100055c4 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
10005588:	68fb      	ldr	r3, [r7, #12]
1000558a:	3301      	adds	r3, #1
1000558c:	60fb      	str	r3, [r7, #12]
1000558e:	687b      	ldr	r3, [r7, #4]
10005590:	689b      	ldr	r3, [r3, #8]
10005592:	68fa      	ldr	r2, [r7, #12]
10005594:	429a      	cmp	r2, r3
10005596:	d3e6      	bcc.n	10005566 <metal_generic_dev_sys_open+0xe>
10005598:	e000      	b.n	1000559c <metal_generic_dev_sys_open+0x44>
			break;
1000559a:	bf00      	nop
	}

	return 0;
1000559c:	2300      	movs	r3, #0
}
1000559e:	4618      	mov	r0, r3
100055a0:	3710      	adds	r7, #16
100055a2:	46bd      	mov	sp, r7
100055a4:	bd80      	pop	{r7, pc}
	...

100055a8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
100055a8:	b580      	push	{r7, lr}
100055aa:	b082      	sub	sp, #8
100055ac:	af00      	add	r7, sp, #0
100055ae:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
100055b0:	4803      	ldr	r0, [pc, #12]	@ (100055c0 <metal_sys_init+0x18>)
100055b2:	f7ff fe4f 	bl	10005254 <metal_bus_register>
	return 0;
100055b6:	2300      	movs	r3, #0
}
100055b8:	4618      	mov	r0, r3
100055ba:	3708      	adds	r7, #8
100055bc:	46bd      	mov	sp, r7
100055be:	bd80      	pop	{r7, pc}
100055c0:	1002000c 	.word	0x1002000c

100055c4 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
100055c4:	b580      	push	{r7, lr}
100055c6:	b086      	sub	sp, #24
100055c8:	af00      	add	r7, sp, #0
100055ca:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
100055cc:	687b      	ldr	r3, [r7, #4]
100055ce:	681b      	ldr	r3, [r3, #0]
100055d0:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
100055d2:	687b      	ldr	r3, [r7, #4]
100055d4:	689b      	ldr	r3, [r3, #8]
100055d6:	613b      	str	r3, [r7, #16]
	if (psize) {
100055d8:	693b      	ldr	r3, [r7, #16]
100055da:	2b00      	cmp	r3, #0
100055dc:	d02c      	beq.n	10005638 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
100055de:	687b      	ldr	r3, [r7, #4]
100055e0:	68db      	ldr	r3, [r3, #12]
100055e2:	693a      	ldr	r2, [r7, #16]
100055e4:	fa22 f303 	lsr.w	r3, r2, r3
100055e8:	2b00      	cmp	r3, #0
100055ea:	d005      	beq.n	100055f8 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
100055ec:	687b      	ldr	r3, [r7, #4]
100055ee:	68db      	ldr	r3, [r3, #12]
100055f0:	2201      	movs	r2, #1
100055f2:	fa02 f303 	lsl.w	r3, r2, r3
100055f6:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
100055f8:	2300      	movs	r3, #0
100055fa:	617b      	str	r3, [r7, #20]
100055fc:	e013      	b.n	10005626 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
100055fe:	687b      	ldr	r3, [r7, #4]
10005600:	685a      	ldr	r2, [r3, #4]
10005602:	697b      	ldr	r3, [r7, #20]
10005604:	009b      	lsls	r3, r3, #2
10005606:	4413      	add	r3, r2
10005608:	6819      	ldr	r1, [r3, #0]
1000560a:	687b      	ldr	r3, [r7, #4]
1000560c:	695b      	ldr	r3, [r3, #20]
1000560e:	693a      	ldr	r2, [r7, #16]
10005610:	68f8      	ldr	r0, [r7, #12]
10005612:	f001 fd05 	bl	10007020 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
10005616:	693b      	ldr	r3, [r7, #16]
10005618:	009b      	lsls	r3, r3, #2
1000561a:	68fa      	ldr	r2, [r7, #12]
1000561c:	4413      	add	r3, r2
1000561e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10005620:	697b      	ldr	r3, [r7, #20]
10005622:	3301      	adds	r3, #1
10005624:	617b      	str	r3, [r7, #20]
10005626:	687b      	ldr	r3, [r7, #4]
10005628:	689a      	ldr	r2, [r3, #8]
1000562a:	687b      	ldr	r3, [r7, #4]
1000562c:	68db      	ldr	r3, [r3, #12]
1000562e:	fa22 f303 	lsr.w	r3, r2, r3
10005632:	697a      	ldr	r2, [r7, #20]
10005634:	429a      	cmp	r2, r3
10005636:	d9e2      	bls.n	100055fe <metal_sys_io_mem_map+0x3a>
		}
	}
}
10005638:	bf00      	nop
1000563a:	3718      	adds	r7, #24
1000563c:	46bd      	mov	sp, r7
1000563e:	bd80      	pop	{r7, pc}

10005640 <metal_list_init>:
{
10005640:	b480      	push	{r7}
10005642:	b083      	sub	sp, #12
10005644:	af00      	add	r7, sp, #0
10005646:	6078      	str	r0, [r7, #4]
	list->prev = list;
10005648:	687b      	ldr	r3, [r7, #4]
1000564a:	687a      	ldr	r2, [r7, #4]
1000564c:	605a      	str	r2, [r3, #4]
	list->next = list;
1000564e:	687b      	ldr	r3, [r7, #4]
10005650:	687a      	ldr	r2, [r7, #4]
10005652:	601a      	str	r2, [r3, #0]
}
10005654:	bf00      	nop
10005656:	370c      	adds	r7, #12
10005658:	46bd      	mov	sp, r7
1000565a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000565e:	4770      	bx	lr

10005660 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
10005660:	b580      	push	{r7, lr}
10005662:	b084      	sub	sp, #16
10005664:	af00      	add	r7, sp, #0
10005666:	6078      	str	r0, [r7, #4]
	int error = 0;
10005668:	2300      	movs	r3, #0
1000566a:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
1000566c:	2220      	movs	r2, #32
1000566e:	2100      	movs	r1, #0
10005670:	4810      	ldr	r0, [pc, #64]	@ (100056b4 <metal_init+0x54>)
10005672:	f002 fcbf 	bl	10007ff4 <memset>

	_metal.common.log_handler   = params->log_handler;
10005676:	687b      	ldr	r3, [r7, #4]
10005678:	681b      	ldr	r3, [r3, #0]
1000567a:	4a0e      	ldr	r2, [pc, #56]	@ (100056b4 <metal_init+0x54>)
1000567c:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
1000567e:	687b      	ldr	r3, [r7, #4]
10005680:	791a      	ldrb	r2, [r3, #4]
10005682:	4b0c      	ldr	r3, [pc, #48]	@ (100056b4 <metal_init+0x54>)
10005684:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
10005686:	480c      	ldr	r0, [pc, #48]	@ (100056b8 <metal_init+0x58>)
10005688:	f7ff ffda 	bl	10005640 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
1000568c:	480b      	ldr	r0, [pc, #44]	@ (100056bc <metal_init+0x5c>)
1000568e:	f7ff ffd7 	bl	10005640 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
10005692:	480b      	ldr	r0, [pc, #44]	@ (100056c0 <metal_init+0x60>)
10005694:	f7ff ffd4 	bl	10005640 <metal_list_init>

	error = metal_sys_init(params);
10005698:	6878      	ldr	r0, [r7, #4]
1000569a:	f7ff ff85 	bl	100055a8 <metal_sys_init>
1000569e:	60f8      	str	r0, [r7, #12]
	if (error)
100056a0:	68fb      	ldr	r3, [r7, #12]
100056a2:	2b00      	cmp	r3, #0
100056a4:	d001      	beq.n	100056aa <metal_init+0x4a>
		return error;
100056a6:	68fb      	ldr	r3, [r7, #12]
100056a8:	e000      	b.n	100056ac <metal_init+0x4c>

	return error;
100056aa:	68fb      	ldr	r3, [r7, #12]
}
100056ac:	4618      	mov	r0, r3
100056ae:	3710      	adds	r7, #16
100056b0:	46bd      	mov	sp, r7
100056b2:	bd80      	pop	{r7, pc}
100056b4:	100202e4 	.word	0x100202e4
100056b8:	100202ec 	.word	0x100202ec
100056bc:	100202f4 	.word	0x100202f4
100056c0:	100202fc 	.word	0x100202fc

100056c4 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
100056c4:	b480      	push	{r7}
100056c6:	b083      	sub	sp, #12
100056c8:	af00      	add	r7, sp, #0
100056ca:	6078      	str	r0, [r7, #4]
100056cc:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
100056ce:	687b      	ldr	r3, [r7, #4]
100056d0:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
100056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
100056d6:	d00a      	beq.n	100056ee <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
100056d8:	687b      	ldr	r3, [r7, #4]
100056da:	689b      	ldr	r3, [r3, #8]
100056dc:	683a      	ldr	r2, [r7, #0]
100056de:	429a      	cmp	r2, r3
100056e0:	d205      	bcs.n	100056ee <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
100056e2:	687b      	ldr	r3, [r7, #4]
100056e4:	681b      	ldr	r3, [r3, #0]
100056e6:	461a      	mov	r2, r3
100056e8:	683b      	ldr	r3, [r7, #0]
100056ea:	4413      	add	r3, r2
		: NULL);
100056ec:	e000      	b.n	100056f0 <metal_io_virt+0x2c>
100056ee:	2300      	movs	r3, #0
}
100056f0:	4618      	mov	r0, r3
100056f2:	370c      	adds	r7, #12
100056f4:	46bd      	mov	sp, r7
100056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100056fa:	4770      	bx	lr

100056fc <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
100056fc:	b5b0      	push	{r4, r5, r7, lr}
100056fe:	b08c      	sub	sp, #48	@ 0x30
10005700:	af00      	add	r7, sp, #0
10005702:	60f8      	str	r0, [r7, #12]
10005704:	60b9      	str	r1, [r7, #8]
10005706:	607a      	str	r2, [r7, #4]
10005708:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000570a:	f107 0310 	add.w	r3, r7, #16
1000570e:	2220      	movs	r2, #32
10005710:	2100      	movs	r1, #0
10005712:	4618      	mov	r0, r3
10005714:	f002 fc6e 	bl	10007ff4 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
10005718:	68fb      	ldr	r3, [r7, #12]
1000571a:	68ba      	ldr	r2, [r7, #8]
1000571c:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
1000571e:	68fb      	ldr	r3, [r7, #12]
10005720:	687a      	ldr	r2, [r7, #4]
10005722:	605a      	str	r2, [r3, #4]
	io->size = size;
10005724:	68fb      	ldr	r3, [r7, #12]
10005726:	683a      	ldr	r2, [r7, #0]
10005728:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
1000572a:	68fb      	ldr	r3, [r7, #12]
1000572c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000572e:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
10005730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10005732:	2b1f      	cmp	r3, #31
10005734:	d904      	bls.n	10005740 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
10005736:	68fb      	ldr	r3, [r7, #12]
10005738:	f04f 32ff 	mov.w	r2, #4294967295
1000573c:	611a      	str	r2, [r3, #16]
1000573e:	e006      	b.n	1000574e <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
10005740:	2201      	movs	r2, #1
10005742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10005744:	fa02 f303 	lsl.w	r3, r2, r3
10005748:	1e5a      	subs	r2, r3, #1
1000574a:	68fb      	ldr	r3, [r7, #12]
1000574c:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
1000574e:	68fb      	ldr	r3, [r7, #12]
10005750:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10005752:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
10005754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10005756:	2b00      	cmp	r3, #0
10005758:	d00b      	beq.n	10005772 <metal_io_init+0x76>
1000575a:	68fb      	ldr	r3, [r7, #12]
1000575c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1000575e:	f103 0418 	add.w	r4, r3, #24
10005762:	4615      	mov	r5, r2
10005764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10005766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10005768:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000576c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
10005770:	e00a      	b.n	10005788 <metal_io_init+0x8c>
10005772:	68fb      	ldr	r3, [r7, #12]
10005774:	f103 0418 	add.w	r4, r3, #24
10005778:	f107 0510 	add.w	r5, r7, #16
1000577c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000577e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10005780:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10005784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
10005788:	68f8      	ldr	r0, [r7, #12]
1000578a:	f7ff ff1b 	bl	100055c4 <metal_sys_io_mem_map>
}
1000578e:	bf00      	nop
10005790:	3730      	adds	r7, #48	@ 0x30
10005792:	46bd      	mov	sp, r7
10005794:	bdb0      	pop	{r4, r5, r7, pc}

10005796 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
10005796:	b590      	push	{r4, r7, lr}
10005798:	b08b      	sub	sp, #44	@ 0x2c
1000579a:	af02      	add	r7, sp, #8
1000579c:	60f8      	str	r0, [r7, #12]
1000579e:	60b9      	str	r1, [r7, #8]
100057a0:	607a      	str	r2, [r7, #4]
100057a2:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
100057a4:	68b9      	ldr	r1, [r7, #8]
100057a6:	68f8      	ldr	r0, [r7, #12]
100057a8:	f7ff ff8c 	bl	100056c4 <metal_io_virt>
100057ac:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
100057ae:	687b      	ldr	r3, [r7, #4]
100057b0:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
100057b2:	69fb      	ldr	r3, [r7, #28]
100057b4:	2b00      	cmp	r3, #0
100057b6:	d102      	bne.n	100057be <metal_io_block_read+0x28>
		return -ERANGE;
100057b8:	f06f 0321 	mvn.w	r3, #33	@ 0x21
100057bc:	e05c      	b.n	10005878 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
100057be:	683a      	ldr	r2, [r7, #0]
100057c0:	68bb      	ldr	r3, [r7, #8]
100057c2:	441a      	add	r2, r3
100057c4:	68fb      	ldr	r3, [r7, #12]
100057c6:	689b      	ldr	r3, [r3, #8]
100057c8:	429a      	cmp	r2, r3
100057ca:	d904      	bls.n	100057d6 <metal_io_block_read+0x40>
		len = io->size - offset;
100057cc:	68fb      	ldr	r3, [r7, #12]
100057ce:	689a      	ldr	r2, [r3, #8]
100057d0:	68bb      	ldr	r3, [r7, #8]
100057d2:	1ad3      	subs	r3, r2, r3
100057d4:	603b      	str	r3, [r7, #0]
	retlen = len;
100057d6:	683b      	ldr	r3, [r7, #0]
100057d8:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
100057da:	68fb      	ldr	r3, [r7, #12]
100057dc:	6a1b      	ldr	r3, [r3, #32]
100057de:	2b00      	cmp	r3, #0
100057e0:	d00a      	beq.n	100057f8 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
100057e2:	68fb      	ldr	r3, [r7, #12]
100057e4:	6a1c      	ldr	r4, [r3, #32]
100057e6:	683b      	ldr	r3, [r7, #0]
100057e8:	9300      	str	r3, [sp, #0]
100057ea:	2305      	movs	r3, #5
100057ec:	687a      	ldr	r2, [r7, #4]
100057ee:	68b9      	ldr	r1, [r7, #8]
100057f0:	68f8      	ldr	r0, [r7, #12]
100057f2:	47a0      	blx	r4
100057f4:	6178      	str	r0, [r7, #20]
100057f6:	e03e      	b.n	10005876 <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
100057f8:	f3bf 8f5b 	dmb	ish
		while ( len && (
100057fc:	e00c      	b.n	10005818 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
100057fe:	69fb      	ldr	r3, [r7, #28]
10005800:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
10005802:	69bb      	ldr	r3, [r7, #24]
10005804:	701a      	strb	r2, [r3, #0]
			dest++;
10005806:	69bb      	ldr	r3, [r7, #24]
10005808:	3301      	adds	r3, #1
1000580a:	61bb      	str	r3, [r7, #24]
			ptr++;
1000580c:	69fb      	ldr	r3, [r7, #28]
1000580e:	3301      	adds	r3, #1
10005810:	61fb      	str	r3, [r7, #28]
			len--;
10005812:	683b      	ldr	r3, [r7, #0]
10005814:	3b01      	subs	r3, #1
10005816:	603b      	str	r3, [r7, #0]
		while ( len && (
10005818:	683b      	ldr	r3, [r7, #0]
1000581a:	2b00      	cmp	r3, #0
1000581c:	d017      	beq.n	1000584e <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000581e:	69bb      	ldr	r3, [r7, #24]
10005820:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10005824:	2b00      	cmp	r3, #0
10005826:	d1ea      	bne.n	100057fe <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
10005828:	69fb      	ldr	r3, [r7, #28]
1000582a:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000582e:	2b00      	cmp	r3, #0
10005830:	d1e5      	bne.n	100057fe <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10005832:	e00c      	b.n	1000584e <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
10005834:	69fb      	ldr	r3, [r7, #28]
10005836:	681a      	ldr	r2, [r3, #0]
10005838:	69bb      	ldr	r3, [r7, #24]
1000583a:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000583c:	69bb      	ldr	r3, [r7, #24]
1000583e:	3304      	adds	r3, #4
10005840:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
10005842:	69fb      	ldr	r3, [r7, #28]
10005844:	3304      	adds	r3, #4
10005846:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
10005848:	683b      	ldr	r3, [r7, #0]
1000584a:	3b04      	subs	r3, #4
1000584c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000584e:	683b      	ldr	r3, [r7, #0]
10005850:	2b03      	cmp	r3, #3
10005852:	dcef      	bgt.n	10005834 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
10005854:	e00c      	b.n	10005870 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
10005856:	69fb      	ldr	r3, [r7, #28]
10005858:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000585a:	69bb      	ldr	r3, [r7, #24]
1000585c:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000585e:	69bb      	ldr	r3, [r7, #24]
10005860:	3301      	adds	r3, #1
10005862:	61bb      	str	r3, [r7, #24]
10005864:	69fb      	ldr	r3, [r7, #28]
10005866:	3301      	adds	r3, #1
10005868:	61fb      	str	r3, [r7, #28]
1000586a:	683b      	ldr	r3, [r7, #0]
1000586c:	3b01      	subs	r3, #1
1000586e:	603b      	str	r3, [r7, #0]
10005870:	683b      	ldr	r3, [r7, #0]
10005872:	2b00      	cmp	r3, #0
10005874:	d1ef      	bne.n	10005856 <metal_io_block_read+0xc0>
	}
	return retlen;
10005876:	697b      	ldr	r3, [r7, #20]
}
10005878:	4618      	mov	r0, r3
1000587a:	3724      	adds	r7, #36	@ 0x24
1000587c:	46bd      	mov	sp, r7
1000587e:	bd90      	pop	{r4, r7, pc}

10005880 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
10005880:	b590      	push	{r4, r7, lr}
10005882:	b08b      	sub	sp, #44	@ 0x2c
10005884:	af02      	add	r7, sp, #8
10005886:	60f8      	str	r0, [r7, #12]
10005888:	60b9      	str	r1, [r7, #8]
1000588a:	607a      	str	r2, [r7, #4]
1000588c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000588e:	68b9      	ldr	r1, [r7, #8]
10005890:	68f8      	ldr	r0, [r7, #12]
10005892:	f7ff ff17 	bl	100056c4 <metal_io_virt>
10005896:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
10005898:	687b      	ldr	r3, [r7, #4]
1000589a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000589c:	69fb      	ldr	r3, [r7, #28]
1000589e:	2b00      	cmp	r3, #0
100058a0:	d102      	bne.n	100058a8 <metal_io_block_write+0x28>
		return -ERANGE;
100058a2:	f06f 0321 	mvn.w	r3, #33	@ 0x21
100058a6:	e05b      	b.n	10005960 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
100058a8:	683a      	ldr	r2, [r7, #0]
100058aa:	68bb      	ldr	r3, [r7, #8]
100058ac:	441a      	add	r2, r3
100058ae:	68fb      	ldr	r3, [r7, #12]
100058b0:	689b      	ldr	r3, [r3, #8]
100058b2:	429a      	cmp	r2, r3
100058b4:	d904      	bls.n	100058c0 <metal_io_block_write+0x40>
		len = io->size - offset;
100058b6:	68fb      	ldr	r3, [r7, #12]
100058b8:	689a      	ldr	r2, [r3, #8]
100058ba:	68bb      	ldr	r3, [r7, #8]
100058bc:	1ad3      	subs	r3, r2, r3
100058be:	603b      	str	r3, [r7, #0]
	retlen = len;
100058c0:	683b      	ldr	r3, [r7, #0]
100058c2:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
100058c4:	68fb      	ldr	r3, [r7, #12]
100058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100058c8:	2b00      	cmp	r3, #0
100058ca:	d017      	beq.n	100058fc <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
100058cc:	68fb      	ldr	r3, [r7, #12]
100058ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
100058d0:	683b      	ldr	r3, [r7, #0]
100058d2:	9300      	str	r3, [sp, #0]
100058d4:	2305      	movs	r3, #5
100058d6:	687a      	ldr	r2, [r7, #4]
100058d8:	68b9      	ldr	r1, [r7, #8]
100058da:	68f8      	ldr	r0, [r7, #12]
100058dc:	47a0      	blx	r4
100058de:	6178      	str	r0, [r7, #20]
100058e0:	e03d      	b.n	1000595e <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
100058e2:	69bb      	ldr	r3, [r7, #24]
100058e4:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
100058e6:	69fb      	ldr	r3, [r7, #28]
100058e8:	701a      	strb	r2, [r3, #0]
			ptr++;
100058ea:	69fb      	ldr	r3, [r7, #28]
100058ec:	3301      	adds	r3, #1
100058ee:	61fb      	str	r3, [r7, #28]
			source++;
100058f0:	69bb      	ldr	r3, [r7, #24]
100058f2:	3301      	adds	r3, #1
100058f4:	61bb      	str	r3, [r7, #24]
			len--;
100058f6:	683b      	ldr	r3, [r7, #0]
100058f8:	3b01      	subs	r3, #1
100058fa:	603b      	str	r3, [r7, #0]
		while ( len && (
100058fc:	683b      	ldr	r3, [r7, #0]
100058fe:	2b00      	cmp	r3, #0
10005900:	d017      	beq.n	10005932 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
10005902:	69fb      	ldr	r3, [r7, #28]
10005904:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
10005908:	2b00      	cmp	r3, #0
1000590a:	d1ea      	bne.n	100058e2 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000590c:	69bb      	ldr	r3, [r7, #24]
1000590e:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
10005912:	2b00      	cmp	r3, #0
10005914:	d1e5      	bne.n	100058e2 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10005916:	e00c      	b.n	10005932 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
10005918:	69bb      	ldr	r3, [r7, #24]
1000591a:	681a      	ldr	r2, [r3, #0]
1000591c:	69fb      	ldr	r3, [r7, #28]
1000591e:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10005920:	69fb      	ldr	r3, [r7, #28]
10005922:	3304      	adds	r3, #4
10005924:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
10005926:	69bb      	ldr	r3, [r7, #24]
10005928:	3304      	adds	r3, #4
1000592a:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000592c:	683b      	ldr	r3, [r7, #0]
1000592e:	3b04      	subs	r3, #4
10005930:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10005932:	683b      	ldr	r3, [r7, #0]
10005934:	2b03      	cmp	r3, #3
10005936:	dcef      	bgt.n	10005918 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
10005938:	e00c      	b.n	10005954 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000593a:	69bb      	ldr	r3, [r7, #24]
1000593c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000593e:	69fb      	ldr	r3, [r7, #28]
10005940:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
10005942:	69fb      	ldr	r3, [r7, #28]
10005944:	3301      	adds	r3, #1
10005946:	61fb      	str	r3, [r7, #28]
10005948:	69bb      	ldr	r3, [r7, #24]
1000594a:	3301      	adds	r3, #1
1000594c:	61bb      	str	r3, [r7, #24]
1000594e:	683b      	ldr	r3, [r7, #0]
10005950:	3b01      	subs	r3, #1
10005952:	603b      	str	r3, [r7, #0]
10005954:	683b      	ldr	r3, [r7, #0]
10005956:	2b00      	cmp	r3, #0
10005958:	d1ef      	bne.n	1000593a <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
1000595a:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000595e:	697b      	ldr	r3, [r7, #20]
}
10005960:	4618      	mov	r0, r3
10005962:	3724      	adds	r7, #36	@ 0x24
10005964:	46bd      	mov	sp, r7
10005966:	bd90      	pop	{r4, r7, pc}

10005968 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
10005968:	b40e      	push	{r1, r2, r3}
1000596a:	b480      	push	{r7}
1000596c:	b082      	sub	sp, #8
1000596e:	af00      	add	r7, sp, #0
10005970:	4603      	mov	r3, r0
10005972:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
10005974:	bf00      	nop
10005976:	3708      	adds	r7, #8
10005978:	46bd      	mov	sp, r7
1000597a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000597e:	b003      	add	sp, #12
10005980:	4770      	bx	lr

10005982 <metal_io_virt>:
{
10005982:	b480      	push	{r7}
10005984:	b083      	sub	sp, #12
10005986:	af00      	add	r7, sp, #0
10005988:	6078      	str	r0, [r7, #4]
1000598a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000598c:	687b      	ldr	r3, [r7, #4]
1000598e:	681b      	ldr	r3, [r3, #0]
		: NULL);
10005990:	f1b3 3fff 	cmp.w	r3, #4294967295
10005994:	d00a      	beq.n	100059ac <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10005996:	687b      	ldr	r3, [r7, #4]
10005998:	689b      	ldr	r3, [r3, #8]
1000599a:	683a      	ldr	r2, [r7, #0]
1000599c:	429a      	cmp	r2, r3
1000599e:	d205      	bcs.n	100059ac <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
100059a0:	687b      	ldr	r3, [r7, #4]
100059a2:	681b      	ldr	r3, [r3, #0]
100059a4:	461a      	mov	r2, r3
100059a6:	683b      	ldr	r3, [r7, #0]
100059a8:	4413      	add	r3, r2
		: NULL);
100059aa:	e000      	b.n	100059ae <metal_io_virt+0x2c>
100059ac:	2300      	movs	r3, #0
}
100059ae:	4618      	mov	r0, r3
100059b0:	370c      	adds	r7, #12
100059b2:	46bd      	mov	sp, r7
100059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
100059b8:	4770      	bx	lr

100059ba <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
100059ba:	b480      	push	{r7}
100059bc:	b085      	sub	sp, #20
100059be:	af00      	add	r7, sp, #0
100059c0:	6078      	str	r0, [r7, #4]
100059c2:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
100059c4:	683b      	ldr	r3, [r7, #0]
100059c6:	687a      	ldr	r2, [r7, #4]
100059c8:	6812      	ldr	r2, [r2, #0]
100059ca:	1a9b      	subs	r3, r3, r2
100059cc:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
100059ce:	687b      	ldr	r3, [r7, #4]
100059d0:	689b      	ldr	r3, [r3, #8]
100059d2:	68fa      	ldr	r2, [r7, #12]
100059d4:	429a      	cmp	r2, r3
100059d6:	d201      	bcs.n	100059dc <metal_io_virt_to_offset+0x22>
100059d8:	68fb      	ldr	r3, [r7, #12]
100059da:	e001      	b.n	100059e0 <metal_io_virt_to_offset+0x26>
100059dc:	f04f 33ff 	mov.w	r3, #4294967295
}
100059e0:	4618      	mov	r0, r3
100059e2:	3714      	adds	r7, #20
100059e4:	46bd      	mov	sp, r7
100059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
100059ea:	4770      	bx	lr

100059ec <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
100059ec:	b5b0      	push	{r4, r5, r7, lr}
100059ee:	b08c      	sub	sp, #48	@ 0x30
100059f0:	af00      	add	r7, sp, #0
100059f2:	60f8      	str	r0, [r7, #12]
100059f4:	60b9      	str	r1, [r7, #8]
100059f6:	603b      	str	r3, [r7, #0]
100059f8:	4613      	mov	r3, r2
100059fa:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
100059fc:	68b9      	ldr	r1, [r7, #8]
100059fe:	68f8      	ldr	r0, [r7, #12]
10005a00:	f7ff ffbf 	bl	10005982 <metal_io_virt>
10005a04:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
10005a06:	68fb      	ldr	r3, [r7, #12]
10005a08:	699b      	ldr	r3, [r3, #24]
10005a0a:	2b00      	cmp	r3, #0
10005a0c:	d009      	beq.n	10005a22 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
10005a0e:	68fb      	ldr	r3, [r7, #12]
10005a10:	699c      	ldr	r4, [r3, #24]
10005a12:	79fa      	ldrb	r2, [r7, #7]
10005a14:	683b      	ldr	r3, [r7, #0]
10005a16:	68b9      	ldr	r1, [r7, #8]
10005a18:	68f8      	ldr	r0, [r7, #12]
10005a1a:	47a0      	blx	r4
10005a1c:	4604      	mov	r4, r0
10005a1e:	460d      	mov	r5, r1
10005a20:	e059      	b.n	10005ad6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
10005a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005a24:	2b00      	cmp	r3, #0
10005a26:	d012      	beq.n	10005a4e <metal_io_read+0x62>
10005a28:	683b      	ldr	r3, [r7, #0]
10005a2a:	2b01      	cmp	r3, #1
10005a2c:	d10f      	bne.n	10005a4e <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
10005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005a30:	62bb      	str	r3, [r7, #40]	@ 0x28
10005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005a34:	f3bf 8f5b 	dmb	ish
10005a38:	781b      	ldrb	r3, [r3, #0]
10005a3a:	f3bf 8f5b 	dmb	ish
10005a3e:	b2db      	uxtb	r3, r3
10005a40:	76fb      	strb	r3, [r7, #27]
10005a42:	7efb      	ldrb	r3, [r7, #27]
10005a44:	b2db      	uxtb	r3, r3
10005a46:	2200      	movs	r2, #0
10005a48:	461c      	mov	r4, r3
10005a4a:	4615      	mov	r5, r2
10005a4c:	e043      	b.n	10005ad6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
10005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005a50:	2b00      	cmp	r3, #0
10005a52:	d012      	beq.n	10005a7a <metal_io_read+0x8e>
10005a54:	683b      	ldr	r3, [r7, #0]
10005a56:	2b02      	cmp	r3, #2
10005a58:	d10f      	bne.n	10005a7a <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
10005a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005a5c:	627b      	str	r3, [r7, #36]	@ 0x24
10005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005a60:	f3bf 8f5b 	dmb	ish
10005a64:	881b      	ldrh	r3, [r3, #0]
10005a66:	f3bf 8f5b 	dmb	ish
10005a6a:	b29b      	uxth	r3, r3
10005a6c:	833b      	strh	r3, [r7, #24]
10005a6e:	8b3b      	ldrh	r3, [r7, #24]
10005a70:	b29b      	uxth	r3, r3
10005a72:	2200      	movs	r2, #0
10005a74:	461c      	mov	r4, r3
10005a76:	4615      	mov	r5, r2
10005a78:	e02d      	b.n	10005ad6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
10005a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005a7c:	2b00      	cmp	r3, #0
10005a7e:	d010      	beq.n	10005aa2 <metal_io_read+0xb6>
10005a80:	683b      	ldr	r3, [r7, #0]
10005a82:	2b04      	cmp	r3, #4
10005a84:	d10d      	bne.n	10005aa2 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
10005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005a88:	623b      	str	r3, [r7, #32]
10005a8a:	6a3b      	ldr	r3, [r7, #32]
10005a8c:	f3bf 8f5b 	dmb	ish
10005a90:	681b      	ldr	r3, [r3, #0]
10005a92:	f3bf 8f5b 	dmb	ish
10005a96:	617b      	str	r3, [r7, #20]
10005a98:	697b      	ldr	r3, [r7, #20]
10005a9a:	2200      	movs	r2, #0
10005a9c:	461c      	mov	r4, r3
10005a9e:	4615      	mov	r5, r2
10005aa0:	e019      	b.n	10005ad6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
10005aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005aa4:	2b00      	cmp	r3, #0
10005aa6:	d010      	beq.n	10005aca <metal_io_read+0xde>
10005aa8:	683b      	ldr	r3, [r7, #0]
10005aaa:	2b04      	cmp	r3, #4
10005aac:	d10d      	bne.n	10005aca <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
10005aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005ab0:	61fb      	str	r3, [r7, #28]
10005ab2:	69fb      	ldr	r3, [r7, #28]
10005ab4:	f3bf 8f5b 	dmb	ish
10005ab8:	681b      	ldr	r3, [r3, #0]
10005aba:	f3bf 8f5b 	dmb	ish
10005abe:	613b      	str	r3, [r7, #16]
10005ac0:	693b      	ldr	r3, [r7, #16]
10005ac2:	2200      	movs	r2, #0
10005ac4:	461c      	mov	r4, r3
10005ac6:	4615      	mov	r5, r2
10005ac8:	e005      	b.n	10005ad6 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
10005aca:	4b06      	ldr	r3, [pc, #24]	@ (10005ae4 <metal_io_read+0xf8>)
10005acc:	4a06      	ldr	r2, [pc, #24]	@ (10005ae8 <metal_io_read+0xfc>)
10005ace:	21fe      	movs	r1, #254	@ 0xfe
10005ad0:	4806      	ldr	r0, [pc, #24]	@ (10005aec <metal_io_read+0x100>)
10005ad2:	f002 f85f 	bl	10007b94 <__assert_func>
	return 0; /* quiet compiler */
}
10005ad6:	4622      	mov	r2, r4
10005ad8:	462b      	mov	r3, r5
10005ada:	4610      	mov	r0, r2
10005adc:	4619      	mov	r1, r3
10005ade:	3730      	adds	r7, #48	@ 0x30
10005ae0:	46bd      	mov	sp, r7
10005ae2:	bdb0      	pop	{r4, r5, r7, pc}
10005ae4:	10009048 	.word	0x10009048
10005ae8:	100092b8 	.word	0x100092b8
10005aec:	1000904c 	.word	0x1000904c

10005af0 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
10005af0:	b580      	push	{r7, lr}
10005af2:	b082      	sub	sp, #8
10005af4:	af00      	add	r7, sp, #0
10005af6:	6078      	str	r0, [r7, #4]
	return malloc(size);
10005af8:	6878      	ldr	r0, [r7, #4]
10005afa:	f002 f869 	bl	10007bd0 <malloc>
10005afe:	4603      	mov	r3, r0
}
10005b00:	4618      	mov	r0, r3
10005b02:	3708      	adds	r7, #8
10005b04:	46bd      	mov	sp, r7
10005b06:	bd80      	pop	{r7, pc}

10005b08 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
10005b08:	b580      	push	{r7, lr}
10005b0a:	b082      	sub	sp, #8
10005b0c:	af00      	add	r7, sp, #0
10005b0e:	6078      	str	r0, [r7, #4]
	free(ptr);
10005b10:	6878      	ldr	r0, [r7, #4]
10005b12:	f002 f865 	bl	10007be0 <free>
}
10005b16:	bf00      	nop
10005b18:	3708      	adds	r7, #8
10005b1a:	46bd      	mov	sp, r7
10005b1c:	bd80      	pop	{r7, pc}

10005b1e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
10005b1e:	b580      	push	{r7, lr}
10005b20:	b084      	sub	sp, #16
10005b22:	af00      	add	r7, sp, #0
10005b24:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
10005b26:	687b      	ldr	r3, [r7, #4]
10005b28:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
10005b2a:	3334      	adds	r3, #52	@ 0x34
10005b2c:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
10005b2e:	68f8      	ldr	r0, [r7, #12]
10005b30:	f7ff ffde 	bl	10005af0 <metal_allocate_memory>
10005b34:	60b8      	str	r0, [r7, #8]
	if (vqs) {
10005b36:	68bb      	ldr	r3, [r7, #8]
10005b38:	2b00      	cmp	r3, #0
10005b3a:	d004      	beq.n	10005b46 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
10005b3c:	68fa      	ldr	r2, [r7, #12]
10005b3e:	2100      	movs	r1, #0
10005b40:	68b8      	ldr	r0, [r7, #8]
10005b42:	f002 fa57 	bl	10007ff4 <memset>
	}

	return vqs;
10005b46:	68bb      	ldr	r3, [r7, #8]
}
10005b48:	4618      	mov	r0, r3
10005b4a:	3710      	adds	r7, #16
10005b4c:	46bd      	mov	sp, r7
10005b4e:	bd80      	pop	{r7, pc}

10005b50 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
10005b50:	b580      	push	{r7, lr}
10005b52:	b086      	sub	sp, #24
10005b54:	af00      	add	r7, sp, #0
10005b56:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
10005b58:	687b      	ldr	r3, [r7, #4]
10005b5a:	891b      	ldrh	r3, [r3, #8]
10005b5c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
10005b5e:	687b      	ldr	r3, [r7, #4]
10005b60:	681b      	ldr	r3, [r3, #0]
10005b62:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10005b64:	693b      	ldr	r3, [r7, #16]
10005b66:	3b10      	subs	r3, #16
10005b68:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
10005b6a:	693b      	ldr	r3, [r7, #16]
10005b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005b6e:	697a      	ldr	r2, [r7, #20]
10005b70:	429a      	cmp	r2, r3
10005b72:	d305      	bcc.n	10005b80 <rproc_virtio_virtqueue_notify+0x30>
10005b74:	4b0d      	ldr	r3, [pc, #52]	@ (10005bac <rproc_virtio_virtqueue_notify+0x5c>)
10005b76:	4a0e      	ldr	r2, [pc, #56]	@ (10005bb0 <rproc_virtio_virtqueue_notify+0x60>)
10005b78:	211c      	movs	r1, #28
10005b7a:	480e      	ldr	r0, [pc, #56]	@ (10005bb4 <rproc_virtio_virtqueue_notify+0x64>)
10005b7c:	f002 f80a 	bl	10007b94 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
10005b80:	693b      	ldr	r3, [r7, #16]
10005b82:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10005b84:	697a      	ldr	r2, [r7, #20]
10005b86:	4613      	mov	r3, r2
10005b88:	005b      	lsls	r3, r3, #1
10005b8a:	4413      	add	r3, r2
10005b8c:	00db      	lsls	r3, r3, #3
10005b8e:	440b      	add	r3, r1
10005b90:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
10005b92:	68fb      	ldr	r3, [r7, #12]
10005b94:	68db      	ldr	r3, [r3, #12]
10005b96:	68fa      	ldr	r2, [r7, #12]
10005b98:	6810      	ldr	r0, [r2, #0]
10005b9a:	68ba      	ldr	r2, [r7, #8]
10005b9c:	6912      	ldr	r2, [r2, #16]
10005b9e:	4611      	mov	r1, r2
10005ba0:	4798      	blx	r3
}
10005ba2:	bf00      	nop
10005ba4:	3718      	adds	r7, #24
10005ba6:	46bd      	mov	sp, r7
10005ba8:	bd80      	pop	{r7, pc}
10005baa:	bf00      	nop
10005bac:	100090c8 	.word	0x100090c8
10005bb0:	10009298 	.word	0x10009298
10005bb4:	100090e4 	.word	0x100090e4

10005bb8 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
10005bb8:	b580      	push	{r7, lr}
10005bba:	b086      	sub	sp, #24
10005bbc:	af00      	add	r7, sp, #0
10005bbe:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10005bc0:	687b      	ldr	r3, [r7, #4]
10005bc2:	3b10      	subs	r3, #16
10005bc4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
10005bc6:	697b      	ldr	r3, [r7, #20]
10005bc8:	685b      	ldr	r3, [r3, #4]
10005bca:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10005bcc:	697b      	ldr	r3, [r7, #20]
10005bce:	689b      	ldr	r3, [r3, #8]
10005bd0:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
10005bd2:	693b      	ldr	r3, [r7, #16]
10005bd4:	3318      	adds	r3, #24
10005bd6:	4619      	mov	r1, r3
10005bd8:	68f8      	ldr	r0, [r7, #12]
10005bda:	f7ff feee 	bl	100059ba <metal_io_virt_to_offset>
10005bde:	4601      	mov	r1, r0
10005be0:	2301      	movs	r3, #1
10005be2:	2205      	movs	r2, #5
10005be4:	68f8      	ldr	r0, [r7, #12]
10005be6:	f7ff ff01 	bl	100059ec <metal_io_read>
10005bea:	4602      	mov	r2, r0
10005bec:	460b      	mov	r3, r1
10005bee:	4613      	mov	r3, r2
10005bf0:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
10005bf2:	7afb      	ldrb	r3, [r7, #11]
}
10005bf4:	4618      	mov	r0, r3
10005bf6:	3718      	adds	r7, #24
10005bf8:	46bd      	mov	sp, r7
10005bfa:	bd80      	pop	{r7, pc}

10005bfc <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
10005bfc:	b580      	push	{r7, lr}
10005bfe:	b086      	sub	sp, #24
10005c00:	af00      	add	r7, sp, #0
10005c02:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10005c04:	687b      	ldr	r3, [r7, #4]
10005c06:	3b10      	subs	r3, #16
10005c08:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
10005c0a:	697b      	ldr	r3, [r7, #20]
10005c0c:	685b      	ldr	r3, [r3, #4]
10005c0e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
10005c10:	697b      	ldr	r3, [r7, #20]
10005c12:	689b      	ldr	r3, [r3, #8]
10005c14:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
10005c16:	693b      	ldr	r3, [r7, #16]
10005c18:	330c      	adds	r3, #12
10005c1a:	4619      	mov	r1, r3
10005c1c:	68f8      	ldr	r0, [r7, #12]
10005c1e:	f7ff fecc 	bl	100059ba <metal_io_virt_to_offset>
10005c22:	4601      	mov	r1, r0
10005c24:	2304      	movs	r3, #4
10005c26:	2205      	movs	r2, #5
10005c28:	68f8      	ldr	r0, [r7, #12]
10005c2a:	f7ff fedf 	bl	100059ec <metal_io_read>
10005c2e:	4602      	mov	r2, r0
10005c30:	460b      	mov	r3, r1
10005c32:	4613      	mov	r3, r2
10005c34:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
10005c36:	68bb      	ldr	r3, [r7, #8]
}
10005c38:	4618      	mov	r0, r3
10005c3a:	3718      	adds	r7, #24
10005c3c:	46bd      	mov	sp, r7
10005c3e:	bd80      	pop	{r7, pc}

10005c40 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
10005c40:	b580      	push	{r7, lr}
10005c42:	b088      	sub	sp, #32
10005c44:	af00      	add	r7, sp, #0
10005c46:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10005c48:	687b      	ldr	r3, [r7, #4]
10005c4a:	3b10      	subs	r3, #16
10005c4c:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10005c4e:	69fb      	ldr	r3, [r7, #28]
10005c50:	685b      	ldr	r3, [r3, #4]
10005c52:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
10005c54:	69fb      	ldr	r3, [r7, #28]
10005c56:	689b      	ldr	r3, [r3, #8]
10005c58:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
10005c5a:	69bb      	ldr	r3, [r7, #24]
10005c5c:	3310      	adds	r3, #16
10005c5e:	4619      	mov	r1, r3
10005c60:	6978      	ldr	r0, [r7, #20]
10005c62:	f7ff feaa 	bl	100059ba <metal_io_virt_to_offset>
10005c66:	4601      	mov	r1, r0
10005c68:	2304      	movs	r3, #4
10005c6a:	2205      	movs	r2, #5
10005c6c:	6978      	ldr	r0, [r7, #20]
10005c6e:	f7ff febd 	bl	100059ec <metal_io_read>
10005c72:	4602      	mov	r2, r0
10005c74:	460b      	mov	r3, r1
10005c76:	4613      	mov	r3, r2
10005c78:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
10005c7a:	6878      	ldr	r0, [r7, #4]
10005c7c:	f7ff ffbe 	bl	10005bfc <rproc_virtio_get_dfeatures>
10005c80:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
10005c82:	68fa      	ldr	r2, [r7, #12]
10005c84:	693b      	ldr	r3, [r7, #16]
10005c86:	4013      	ands	r3, r2
}
10005c88:	4618      	mov	r0, r3
10005c8a:	3720      	adds	r7, #32
10005c8c:	46bd      	mov	sp, r7
10005c8e:	bd80      	pop	{r7, pc}

10005c90 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
10005c90:	b580      	push	{r7, lr}
10005c92:	b088      	sub	sp, #32
10005c94:	af00      	add	r7, sp, #0
10005c96:	60f8      	str	r0, [r7, #12]
10005c98:	60b9      	str	r1, [r7, #8]
10005c9a:	607a      	str	r2, [r7, #4]
10005c9c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10005c9e:	68fb      	ldr	r3, [r7, #12]
10005ca0:	3b10      	subs	r3, #16
10005ca2:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10005ca4:	69fb      	ldr	r3, [r7, #28]
10005ca6:	685b      	ldr	r3, [r3, #4]
10005ca8:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
10005caa:	68fb      	ldr	r3, [r7, #12]
10005cac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10005cae:	4613      	mov	r3, r2
10005cb0:	009b      	lsls	r3, r3, #2
10005cb2:	4413      	add	r3, r2
10005cb4:	009b      	lsls	r3, r3, #2
10005cb6:	3318      	adds	r3, #24
10005cb8:	69ba      	ldr	r2, [r7, #24]
10005cba:	4413      	add	r3, r2
10005cbc:	3304      	adds	r3, #4
10005cbe:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
10005cc0:	69fb      	ldr	r3, [r7, #28]
10005cc2:	689b      	ldr	r3, [r3, #8]
10005cc4:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
10005cc6:	683a      	ldr	r2, [r7, #0]
10005cc8:	68bb      	ldr	r3, [r7, #8]
10005cca:	441a      	add	r2, r3
10005ccc:	69bb      	ldr	r3, [r7, #24]
10005cce:	695b      	ldr	r3, [r3, #20]
10005cd0:	429a      	cmp	r2, r3
10005cd2:	d80c      	bhi.n	10005cee <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
10005cd4:	697a      	ldr	r2, [r7, #20]
10005cd6:	68bb      	ldr	r3, [r7, #8]
10005cd8:	4413      	add	r3, r2
		metal_io_block_read(io,
10005cda:	4619      	mov	r1, r3
10005cdc:	6938      	ldr	r0, [r7, #16]
10005cde:	f7ff fe6c 	bl	100059ba <metal_io_virt_to_offset>
10005ce2:	4601      	mov	r1, r0
10005ce4:	683b      	ldr	r3, [r7, #0]
10005ce6:	687a      	ldr	r2, [r7, #4]
10005ce8:	6938      	ldr	r0, [r7, #16]
10005cea:	f7ff fd54 	bl	10005796 <metal_io_block_read>
				dst, length);
}
10005cee:	bf00      	nop
10005cf0:	3720      	adds	r7, #32
10005cf2:	46bd      	mov	sp, r7
10005cf4:	bd80      	pop	{r7, pc}
	...

10005cf8 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
10005cf8:	b580      	push	{r7, lr}
10005cfa:	b08e      	sub	sp, #56	@ 0x38
10005cfc:	af00      	add	r7, sp, #0
10005cfe:	60f8      	str	r0, [r7, #12]
10005d00:	60b9      	str	r1, [r7, #8]
10005d02:	607a      	str	r2, [r7, #4]
10005d04:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
10005d06:	687b      	ldr	r3, [r7, #4]
10005d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
10005d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005d0c:	7e5b      	ldrb	r3, [r3, #25]
10005d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
10005d10:	2048      	movs	r0, #72	@ 0x48
10005d12:	f7ff feed 	bl	10005af0 <metal_allocate_memory>
10005d16:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
10005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005d1a:	2b00      	cmp	r3, #0
10005d1c:	d101      	bne.n	10005d22 <rproc_virtio_create_vdev+0x2a>
		return NULL;
10005d1e:	2300      	movs	r3, #0
10005d20:	e092      	b.n	10005e48 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
10005d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10005d24:	4613      	mov	r3, r2
10005d26:	005b      	lsls	r3, r3, #1
10005d28:	4413      	add	r3, r2
10005d2a:	00db      	lsls	r3, r3, #3
10005d2c:	4618      	mov	r0, r3
10005d2e:	f7ff fedf 	bl	10005af0 <metal_allocate_memory>
10005d32:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
10005d34:	6a3b      	ldr	r3, [r7, #32]
10005d36:	2b00      	cmp	r3, #0
10005d38:	f000 8081 	beq.w	10005e3e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
10005d3c:	2248      	movs	r2, #72	@ 0x48
10005d3e:	2100      	movs	r1, #0
10005d40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10005d42:	f002 f957 	bl	10007ff4 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
10005d46:	2218      	movs	r2, #24
10005d48:	2100      	movs	r1, #0
10005d4a:	6a38      	ldr	r0, [r7, #32]
10005d4c:	f002 f952 	bl	10007ff4 <memset>
	vdev = &rpvdev->vdev;
10005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005d52:	3310      	adds	r3, #16
10005d54:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
10005d56:	2300      	movs	r3, #0
10005d58:	637b      	str	r3, [r7, #52]	@ 0x34
10005d5a:	e025      	b.n	10005da8 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
10005d5c:	2300      	movs	r3, #0
10005d5e:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
10005d60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005d62:	4613      	mov	r3, r2
10005d64:	009b      	lsls	r3, r3, #2
10005d66:	4413      	add	r3, r2
10005d68:	009b      	lsls	r3, r3, #2
10005d6a:	3318      	adds	r3, #24
10005d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10005d6e:	4413      	add	r3, r2
10005d70:	3304      	adds	r3, #4
10005d72:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
10005d74:	68fb      	ldr	r3, [r7, #12]
10005d76:	2b00      	cmp	r3, #0
10005d78:	d102      	bne.n	10005d80 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
10005d7a:	69bb      	ldr	r3, [r7, #24]
10005d7c:	689b      	ldr	r3, [r3, #8]
10005d7e:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
10005d80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10005d82:	f7ff fecc 	bl	10005b1e <virtqueue_allocate>
10005d86:	6178      	str	r0, [r7, #20]
		if (!vq)
10005d88:	697b      	ldr	r3, [r7, #20]
10005d8a:	2b00      	cmp	r3, #0
10005d8c:	d031      	beq.n	10005df2 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
10005d8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005d90:	4613      	mov	r3, r2
10005d92:	005b      	lsls	r3, r3, #1
10005d94:	4413      	add	r3, r2
10005d96:	00db      	lsls	r3, r3, #3
10005d98:	461a      	mov	r2, r3
10005d9a:	6a3b      	ldr	r3, [r7, #32]
10005d9c:	4413      	add	r3, r2
10005d9e:	697a      	ldr	r2, [r7, #20]
10005da0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
10005da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005da4:	3301      	adds	r3, #1
10005da6:	637b      	str	r3, [r7, #52]	@ 0x34
10005da8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005dac:	429a      	cmp	r2, r3
10005dae:	d3d5      	bcc.n	10005d5c <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
10005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10005db4:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
10005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005db8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10005dba:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
10005dbc:	69fb      	ldr	r3, [r7, #28]
10005dbe:	6a3a      	ldr	r2, [r7, #32]
10005dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
10005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10005dc6:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
10005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005dca:	683a      	ldr	r2, [r7, #0]
10005dcc:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
10005dce:	69fb      	ldr	r3, [r7, #28]
10005dd0:	68ba      	ldr	r2, [r7, #8]
10005dd2:	601a      	str	r2, [r3, #0]
	vdev->role = role;
10005dd4:	69fb      	ldr	r3, [r7, #28]
10005dd6:	68fa      	ldr	r2, [r7, #12]
10005dd8:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
10005dda:	69fb      	ldr	r3, [r7, #28]
10005ddc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10005dde:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
10005de0:	69fb      	ldr	r3, [r7, #28]
10005de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10005de4:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
10005de6:	69fb      	ldr	r3, [r7, #28]
10005de8:	4a19      	ldr	r2, [pc, #100]	@ (10005e50 <rproc_virtio_create_vdev+0x158>)
10005dea:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
10005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005dee:	3310      	adds	r3, #16
10005df0:	e02a      	b.n	10005e48 <rproc_virtio_create_vdev+0x150>
			goto err1;
10005df2:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
10005df4:	2300      	movs	r3, #0
10005df6:	637b      	str	r3, [r7, #52]	@ 0x34
10005df8:	e019      	b.n	10005e2e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
10005dfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005dfc:	4613      	mov	r3, r2
10005dfe:	005b      	lsls	r3, r3, #1
10005e00:	4413      	add	r3, r2
10005e02:	00db      	lsls	r3, r3, #3
10005e04:	461a      	mov	r2, r3
10005e06:	6a3b      	ldr	r3, [r7, #32]
10005e08:	4413      	add	r3, r2
10005e0a:	681b      	ldr	r3, [r3, #0]
10005e0c:	2b00      	cmp	r3, #0
10005e0e:	d00b      	beq.n	10005e28 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
10005e10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005e12:	4613      	mov	r3, r2
10005e14:	005b      	lsls	r3, r3, #1
10005e16:	4413      	add	r3, r2
10005e18:	00db      	lsls	r3, r3, #3
10005e1a:	461a      	mov	r2, r3
10005e1c:	6a3b      	ldr	r3, [r7, #32]
10005e1e:	4413      	add	r3, r2
10005e20:	681b      	ldr	r3, [r3, #0]
10005e22:	4618      	mov	r0, r3
10005e24:	f7ff fe70 	bl	10005b08 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
10005e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005e2a:	3301      	adds	r3, #1
10005e2c:	637b      	str	r3, [r7, #52]	@ 0x34
10005e2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005e32:	429a      	cmp	r2, r3
10005e34:	d3e1      	bcc.n	10005dfa <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
10005e36:	6a38      	ldr	r0, [r7, #32]
10005e38:	f7ff fe66 	bl	10005b08 <metal_free_memory>
10005e3c:	e000      	b.n	10005e40 <rproc_virtio_create_vdev+0x148>
		goto err0;
10005e3e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
10005e40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10005e42:	f7ff fe61 	bl	10005b08 <metal_free_memory>
	return NULL;
10005e46:	2300      	movs	r3, #0
}
10005e48:	4618      	mov	r0, r3
10005e4a:	3738      	adds	r7, #56	@ 0x38
10005e4c:	46bd      	mov	sp, r7
10005e4e:	bd80      	pop	{r7, pc}
10005e50:	10009274 	.word	0x10009274

10005e54 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
10005e54:	b480      	push	{r7}
10005e56:	b087      	sub	sp, #28
10005e58:	af00      	add	r7, sp, #0
10005e5a:	60f8      	str	r0, [r7, #12]
10005e5c:	60b9      	str	r1, [r7, #8]
10005e5e:	607a      	str	r2, [r7, #4]
10005e60:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
10005e62:	68fb      	ldr	r3, [r7, #12]
10005e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005e66:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
10005e68:	68ba      	ldr	r2, [r7, #8]
10005e6a:	697b      	ldr	r3, [r7, #20]
10005e6c:	429a      	cmp	r2, r3
10005e6e:	d302      	bcc.n	10005e76 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
10005e70:	f06f 0301 	mvn.w	r3, #1
10005e74:	e019      	b.n	10005eaa <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
10005e76:	68fb      	ldr	r3, [r7, #12]
10005e78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10005e7a:	68ba      	ldr	r2, [r7, #8]
10005e7c:	4613      	mov	r3, r2
10005e7e:	005b      	lsls	r3, r3, #1
10005e80:	4413      	add	r3, r2
10005e82:	00db      	lsls	r3, r3, #3
10005e84:	440b      	add	r3, r1
10005e86:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
10005e88:	693b      	ldr	r3, [r7, #16]
10005e8a:	6a3a      	ldr	r2, [r7, #32]
10005e8c:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
10005e8e:	693b      	ldr	r3, [r7, #16]
10005e90:	687a      	ldr	r2, [r7, #4]
10005e92:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
10005e94:	693b      	ldr	r3, [r7, #16]
10005e96:	683a      	ldr	r2, [r7, #0]
10005e98:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
10005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005e9c:	b29a      	uxth	r2, r3
10005e9e:	693b      	ldr	r3, [r7, #16]
10005ea0:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
10005ea2:	693b      	ldr	r3, [r7, #16]
10005ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10005ea6:	609a      	str	r2, [r3, #8]

	return 0;
10005ea8:	2300      	movs	r3, #0
}
10005eaa:	4618      	mov	r0, r3
10005eac:	371c      	adds	r7, #28
10005eae:	46bd      	mov	sp, r7
10005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
10005eb4:	4770      	bx	lr

10005eb6 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
10005eb6:	b580      	push	{r7, lr}
10005eb8:	b086      	sub	sp, #24
10005eba:	af00      	add	r7, sp, #0
10005ebc:	6078      	str	r0, [r7, #4]
10005ebe:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
10005ec0:	687b      	ldr	r3, [r7, #4]
10005ec2:	2b00      	cmp	r3, #0
10005ec4:	d102      	bne.n	10005ecc <rproc_virtio_notified+0x16>
		return -RPROC_EINVAL;
10005ec6:	f06f 0301 	mvn.w	r3, #1
10005eca:	e02c      	b.n	10005f26 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
10005ecc:	687b      	ldr	r3, [r7, #4]
10005ece:	681b      	ldr	r3, [r3, #0]
10005ed0:	683a      	ldr	r2, [r7, #0]
10005ed2:	429a      	cmp	r2, r3
10005ed4:	d101      	bne.n	10005eda <rproc_virtio_notified+0x24>
		return 0;
10005ed6:	2300      	movs	r3, #0
10005ed8:	e025      	b.n	10005f26 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
10005eda:	687b      	ldr	r3, [r7, #4]
10005edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10005ede:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
10005ee0:	2300      	movs	r3, #0
10005ee2:	617b      	str	r3, [r7, #20]
10005ee4:	e01a      	b.n	10005f1c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
10005ee6:	687b      	ldr	r3, [r7, #4]
10005ee8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10005eea:	697a      	ldr	r2, [r7, #20]
10005eec:	4613      	mov	r3, r2
10005eee:	005b      	lsls	r3, r3, #1
10005ef0:	4413      	add	r3, r2
10005ef2:	00db      	lsls	r3, r3, #3
10005ef4:	440b      	add	r3, r1
10005ef6:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
10005ef8:	68fb      	ldr	r3, [r7, #12]
10005efa:	691b      	ldr	r3, [r3, #16]
10005efc:	683a      	ldr	r2, [r7, #0]
10005efe:	429a      	cmp	r2, r3
10005f00:	d003      	beq.n	10005f0a <rproc_virtio_notified+0x54>
10005f02:	683b      	ldr	r3, [r7, #0]
10005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
10005f08:	d105      	bne.n	10005f16 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
10005f0a:	68fb      	ldr	r3, [r7, #12]
10005f0c:	681b      	ldr	r3, [r3, #0]
10005f0e:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
10005f10:	68b8      	ldr	r0, [r7, #8]
10005f12:	f001 fb95 	bl	10007640 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
10005f16:	697b      	ldr	r3, [r7, #20]
10005f18:	3301      	adds	r3, #1
10005f1a:	617b      	str	r3, [r7, #20]
10005f1c:	697a      	ldr	r2, [r7, #20]
10005f1e:	693b      	ldr	r3, [r7, #16]
10005f20:	429a      	cmp	r2, r3
10005f22:	d3e0      	bcc.n	10005ee6 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
10005f24:	2300      	movs	r3, #0
}
10005f26:	4618      	mov	r0, r3
10005f28:	3718      	adds	r7, #24
10005f2a:	46bd      	mov	sp, r7
10005f2c:	bd80      	pop	{r7, pc}

10005f2e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
10005f2e:	b580      	push	{r7, lr}
10005f30:	b084      	sub	sp, #16
10005f32:	af00      	add	r7, sp, #0
10005f34:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
10005f36:	687b      	ldr	r3, [r7, #4]
10005f38:	699b      	ldr	r3, [r3, #24]
10005f3a:	2b00      	cmp	r3, #0
10005f3c:	d00a      	beq.n	10005f54 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
10005f3e:	6878      	ldr	r0, [r7, #4]
10005f40:	f7ff fe3a 	bl	10005bb8 <rproc_virtio_get_status>
10005f44:	4603      	mov	r3, r0
10005f46:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
10005f48:	7bfb      	ldrb	r3, [r7, #15]
10005f4a:	f003 0304 	and.w	r3, r3, #4
10005f4e:	2b00      	cmp	r3, #0
10005f50:	d102      	bne.n	10005f58 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
10005f52:	e7f4      	b.n	10005f3e <rproc_virtio_wait_remote_ready+0x10>
		return;
10005f54:	bf00      	nop
10005f56:	e000      	b.n	10005f5a <rproc_virtio_wait_remote_ready+0x2c>
			return;
10005f58:	bf00      	nop
		metal_cpu_yield();
	}
}
10005f5a:	3710      	adds	r7, #16
10005f5c:	46bd      	mov	sp, r7
10005f5e:	bd80      	pop	{r7, pc}

10005f60 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
10005f60:	b490      	push	{r4, r7}
10005f62:	b086      	sub	sp, #24
10005f64:	af00      	add	r7, sp, #0
10005f66:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10005f68:	2300      	movs	r3, #0
10005f6a:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10005f6c:	bf00      	nop
10005f6e:	687b      	ldr	r3, [r7, #4]
10005f70:	617b      	str	r3, [r7, #20]
10005f72:	2301      	movs	r3, #1
10005f74:	60fb      	str	r3, [r7, #12]
10005f76:	68fb      	ldr	r3, [r7, #12]
10005f78:	461c      	mov	r4, r3
10005f7a:	697a      	ldr	r2, [r7, #20]
10005f7c:	f107 0310 	add.w	r3, r7, #16
10005f80:	6818      	ldr	r0, [r3, #0]
10005f82:	f3bf 8f5b 	dmb	ish
10005f86:	e852 1f00 	ldrex	r1, [r2]
10005f8a:	4281      	cmp	r1, r0
10005f8c:	d103      	bne.n	10005f96 <__metal_mutex_acquire+0x36>
10005f8e:	e842 4c00 	strex	ip, r4, [r2]
10005f92:	f1bc 0f00 	cmp.w	ip, #0
10005f96:	f3bf 8f5b 	dmb	ish
10005f9a:	bf0c      	ite	eq
10005f9c:	2201      	moveq	r2, #1
10005f9e:	2200      	movne	r2, #0
10005fa0:	2a00      	cmp	r2, #0
10005fa2:	d100      	bne.n	10005fa6 <__metal_mutex_acquire+0x46>
10005fa4:	6019      	str	r1, [r3, #0]
10005fa6:	4613      	mov	r3, r2
10005fa8:	f083 0301 	eor.w	r3, r3, #1
10005fac:	b2db      	uxtb	r3, r3
10005fae:	2b00      	cmp	r3, #0
10005fb0:	d1dd      	bne.n	10005f6e <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
10005fb2:	bf00      	nop
10005fb4:	bf00      	nop
10005fb6:	3718      	adds	r7, #24
10005fb8:	46bd      	mov	sp, r7
10005fba:	bc90      	pop	{r4, r7}
10005fbc:	4770      	bx	lr

10005fbe <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
10005fbe:	b480      	push	{r7}
10005fc0:	b085      	sub	sp, #20
10005fc2:	af00      	add	r7, sp, #0
10005fc4:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10005fc6:	687b      	ldr	r3, [r7, #4]
10005fc8:	60fb      	str	r3, [r7, #12]
10005fca:	2300      	movs	r3, #0
10005fcc:	60bb      	str	r3, [r7, #8]
10005fce:	68bb      	ldr	r3, [r7, #8]
10005fd0:	461a      	mov	r2, r3
10005fd2:	68fb      	ldr	r3, [r7, #12]
10005fd4:	f3bf 8f5b 	dmb	ish
10005fd8:	601a      	str	r2, [r3, #0]
10005fda:	f3bf 8f5b 	dmb	ish
}
10005fde:	bf00      	nop
10005fe0:	3714      	adds	r7, #20
10005fe2:	46bd      	mov	sp, r7
10005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
10005fe8:	4770      	bx	lr

10005fea <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
10005fea:	b580      	push	{r7, lr}
10005fec:	b082      	sub	sp, #8
10005fee:	af00      	add	r7, sp, #0
10005ff0:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
10005ff2:	6878      	ldr	r0, [r7, #4]
10005ff4:	f7ff ffb4 	bl	10005f60 <__metal_mutex_acquire>
}
10005ff8:	bf00      	nop
10005ffa:	3708      	adds	r7, #8
10005ffc:	46bd      	mov	sp, r7
10005ffe:	bd80      	pop	{r7, pc}

10006000 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
10006000:	b580      	push	{r7, lr}
10006002:	b082      	sub	sp, #8
10006004:	af00      	add	r7, sp, #0
10006006:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10006008:	6878      	ldr	r0, [r7, #4]
1000600a:	f7ff ffd8 	bl	10005fbe <__metal_mutex_release>
}
1000600e:	bf00      	nop
10006010:	3708      	adds	r7, #8
10006012:	46bd      	mov	sp, r7
10006014:	bd80      	pop	{r7, pc}

10006016 <metal_list_add_before>:
{
10006016:	b480      	push	{r7}
10006018:	b083      	sub	sp, #12
1000601a:	af00      	add	r7, sp, #0
1000601c:	6078      	str	r0, [r7, #4]
1000601e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10006020:	687b      	ldr	r3, [r7, #4]
10006022:	685a      	ldr	r2, [r3, #4]
10006024:	683b      	ldr	r3, [r7, #0]
10006026:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10006028:	683b      	ldr	r3, [r7, #0]
1000602a:	687a      	ldr	r2, [r7, #4]
1000602c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000602e:	683b      	ldr	r3, [r7, #0]
10006030:	681b      	ldr	r3, [r3, #0]
10006032:	683a      	ldr	r2, [r7, #0]
10006034:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10006036:	683b      	ldr	r3, [r7, #0]
10006038:	685b      	ldr	r3, [r3, #4]
1000603a:	683a      	ldr	r2, [r7, #0]
1000603c:	601a      	str	r2, [r3, #0]
}
1000603e:	bf00      	nop
10006040:	370c      	adds	r7, #12
10006042:	46bd      	mov	sp, r7
10006044:	f85d 7b04 	ldr.w	r7, [sp], #4
10006048:	4770      	bx	lr

1000604a <metal_list_add_tail>:
{
1000604a:	b580      	push	{r7, lr}
1000604c:	b082      	sub	sp, #8
1000604e:	af00      	add	r7, sp, #0
10006050:	6078      	str	r0, [r7, #4]
10006052:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10006054:	6839      	ldr	r1, [r7, #0]
10006056:	6878      	ldr	r0, [r7, #4]
10006058:	f7ff ffdd 	bl	10006016 <metal_list_add_before>
}
1000605c:	bf00      	nop
1000605e:	3708      	adds	r7, #8
10006060:	46bd      	mov	sp, r7
10006062:	bd80      	pop	{r7, pc}

10006064 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
10006064:	b480      	push	{r7}
10006066:	b083      	sub	sp, #12
10006068:	af00      	add	r7, sp, #0
1000606a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
1000606c:	687b      	ldr	r3, [r7, #4]
1000606e:	681b      	ldr	r3, [r3, #0]
10006070:	687a      	ldr	r2, [r7, #4]
10006072:	6852      	ldr	r2, [r2, #4]
10006074:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
10006076:	687b      	ldr	r3, [r7, #4]
10006078:	685b      	ldr	r3, [r3, #4]
1000607a:	687a      	ldr	r2, [r7, #4]
1000607c:	6812      	ldr	r2, [r2, #0]
1000607e:	601a      	str	r2, [r3, #0]
	node->prev = node;
10006080:	687b      	ldr	r3, [r7, #4]
10006082:	687a      	ldr	r2, [r7, #4]
10006084:	605a      	str	r2, [r3, #4]
	node->next = node;
10006086:	687b      	ldr	r3, [r7, #4]
10006088:	687a      	ldr	r2, [r7, #4]
1000608a:	601a      	str	r2, [r3, #0]
}
1000608c:	bf00      	nop
1000608e:	370c      	adds	r7, #12
10006090:	46bd      	mov	sp, r7
10006092:	f85d 7b04 	ldr.w	r7, [sp], #4
10006096:	4770      	bx	lr

10006098 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
10006098:	b480      	push	{r7}
1000609a:	b083      	sub	sp, #12
1000609c:	af00      	add	r7, sp, #0
1000609e:	6078      	str	r0, [r7, #4]
100060a0:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
100060a2:	683b      	ldr	r3, [r7, #0]
100060a4:	095b      	lsrs	r3, r3, #5
100060a6:	009a      	lsls	r2, r3, #2
100060a8:	6879      	ldr	r1, [r7, #4]
100060aa:	440a      	add	r2, r1
100060ac:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
100060ae:	683a      	ldr	r2, [r7, #0]
100060b0:	f002 021f 	and.w	r2, r2, #31
100060b4:	2001      	movs	r0, #1
100060b6:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
100060ba:	009b      	lsls	r3, r3, #2
100060bc:	6878      	ldr	r0, [r7, #4]
100060be:	4403      	add	r3, r0
100060c0:	430a      	orrs	r2, r1
100060c2:	601a      	str	r2, [r3, #0]
}
100060c4:	bf00      	nop
100060c6:	370c      	adds	r7, #12
100060c8:	46bd      	mov	sp, r7
100060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
100060ce:	4770      	bx	lr

100060d0 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
100060d0:	b480      	push	{r7}
100060d2:	b083      	sub	sp, #12
100060d4:	af00      	add	r7, sp, #0
100060d6:	6078      	str	r0, [r7, #4]
100060d8:	6039      	str	r1, [r7, #0]
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
100060da:	683b      	ldr	r3, [r7, #0]
100060dc:	095b      	lsrs	r3, r3, #5
100060de:	009b      	lsls	r3, r3, #2
100060e0:	687a      	ldr	r2, [r7, #4]
100060e2:	4413      	add	r3, r2
100060e4:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
100060e6:	683b      	ldr	r3, [r7, #0]
100060e8:	f003 031f 	and.w	r3, r3, #31
100060ec:	fa22 f303 	lsr.w	r3, r2, r3
100060f0:	f003 0301 	and.w	r3, r3, #1
100060f4:	2b00      	cmp	r3, #0
100060f6:	bf14      	ite	ne
100060f8:	2301      	movne	r3, #1
100060fa:	2300      	moveq	r3, #0
100060fc:	b2db      	uxtb	r3, r3
}
100060fe:	4618      	mov	r0, r3
10006100:	370c      	adds	r7, #12
10006102:	46bd      	mov	sp, r7
10006104:	f85d 7b04 	ldr.w	r7, [sp], #4
10006108:	4770      	bx	lr

1000610a <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
1000610a:	b480      	push	{r7}
1000610c:	b083      	sub	sp, #12
1000610e:	af00      	add	r7, sp, #0
10006110:	6078      	str	r0, [r7, #4]
10006112:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10006114:	683b      	ldr	r3, [r7, #0]
10006116:	095b      	lsrs	r3, r3, #5
10006118:	009a      	lsls	r2, r3, #2
1000611a:	6879      	ldr	r1, [r7, #4]
1000611c:	440a      	add	r2, r1
1000611e:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10006120:	683a      	ldr	r2, [r7, #0]
10006122:	f002 021f 	and.w	r2, r2, #31
10006126:	2001      	movs	r0, #1
10006128:	fa00 f202 	lsl.w	r2, r0, r2
1000612c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
1000612e:	009b      	lsls	r3, r3, #2
10006130:	6878      	ldr	r0, [r7, #4]
10006132:	4403      	add	r3, r0
10006134:	400a      	ands	r2, r1
10006136:	601a      	str	r2, [r3, #0]
}
10006138:	bf00      	nop
1000613a:	370c      	adds	r7, #12
1000613c:	46bd      	mov	sp, r7
1000613e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006142:	4770      	bx	lr

10006144 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
10006144:	b580      	push	{r7, lr}
10006146:	b082      	sub	sp, #8
10006148:	af00      	add	r7, sp, #0
1000614a:	6078      	str	r0, [r7, #4]
1000614c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
1000614e:	6839      	ldr	r1, [r7, #0]
10006150:	6878      	ldr	r0, [r7, #4]
10006152:	f7ff ffbd 	bl	100060d0 <metal_bitmap_is_bit_set>
10006156:	4603      	mov	r3, r0
10006158:	2b00      	cmp	r3, #0
1000615a:	bf0c      	ite	eq
1000615c:	2301      	moveq	r3, #1
1000615e:	2300      	movne	r3, #0
10006160:	b2db      	uxtb	r3, r3
}
10006162:	4618      	mov	r0, r3
10006164:	3708      	adds	r7, #8
10006166:	46bd      	mov	sp, r7
10006168:	bd80      	pop	{r7, pc}

1000616a <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
1000616a:	b580      	push	{r7, lr}
1000616c:	b086      	sub	sp, #24
1000616e:	af00      	add	r7, sp, #0
10006170:	60f8      	str	r0, [r7, #12]
10006172:	60b9      	str	r1, [r7, #8]
10006174:	607a      	str	r2, [r7, #4]
	unsigned int bit;

	for (bit = start;
10006176:	68bb      	ldr	r3, [r7, #8]
10006178:	617b      	str	r3, [r7, #20]
1000617a:	e002      	b.n	10006182 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
1000617c:	697b      	ldr	r3, [r7, #20]
1000617e:	3301      	adds	r3, #1
10006180:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
10006182:	697a      	ldr	r2, [r7, #20]
10006184:	687b      	ldr	r3, [r7, #4]
10006186:	429a      	cmp	r2, r3
10006188:	d207      	bcs.n	1000619a <metal_bitmap_next_clear_bit+0x30>
1000618a:	697b      	ldr	r3, [r7, #20]
1000618c:	4619      	mov	r1, r3
1000618e:	68f8      	ldr	r0, [r7, #12]
10006190:	f7ff ffd8 	bl	10006144 <metal_bitmap_is_bit_clear>
10006194:	4603      	mov	r3, r0
10006196:	2b00      	cmp	r3, #0
10006198:	d0f0      	beq.n	1000617c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
1000619a:	697b      	ldr	r3, [r7, #20]
}
1000619c:	4618      	mov	r0, r3
1000619e:	3718      	adds	r7, #24
100061a0:	46bd      	mov	sp, r7
100061a2:	bd80      	pop	{r7, pc}

100061a4 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
100061a4:	b580      	push	{r7, lr}
100061a6:	b084      	sub	sp, #16
100061a8:	af00      	add	r7, sp, #0
100061aa:	60f8      	str	r0, [r7, #12]
100061ac:	60b9      	str	r1, [r7, #8]
100061ae:	607a      	str	r2, [r7, #4]
100061b0:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
100061b2:	68f8      	ldr	r0, [r7, #12]
100061b4:	68bb      	ldr	r3, [r7, #8]
100061b6:	2b00      	cmp	r3, #0
100061b8:	d001      	beq.n	100061be <rpmsg_initialize_ept+0x1a>
100061ba:	68bb      	ldr	r3, [r7, #8]
100061bc:	e000      	b.n	100061c0 <rpmsg_initialize_ept+0x1c>
100061be:	4b0a      	ldr	r3, [pc, #40]	@ (100061e8 <rpmsg_initialize_ept+0x44>)
100061c0:	2220      	movs	r2, #32
100061c2:	4619      	mov	r1, r3
100061c4:	f001 ff30 	bl	10008028 <strncpy>
	ept->addr = src;
100061c8:	68fb      	ldr	r3, [r7, #12]
100061ca:	687a      	ldr	r2, [r7, #4]
100061cc:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
100061ce:	68fb      	ldr	r3, [r7, #12]
100061d0:	683a      	ldr	r2, [r7, #0]
100061d2:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
100061d4:	68fb      	ldr	r3, [r7, #12]
100061d6:	69ba      	ldr	r2, [r7, #24]
100061d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
100061da:	68fb      	ldr	r3, [r7, #12]
100061dc:	69fa      	ldr	r2, [r7, #28]
100061de:	631a      	str	r2, [r3, #48]	@ 0x30
}
100061e0:	bf00      	nop
100061e2:	3710      	adds	r7, #16
100061e4:	46bd      	mov	sp, r7
100061e6:	bd80      	pop	{r7, pc}
100061e8:	1000916c 	.word	0x1000916c

100061ec <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
100061ec:	b580      	push	{r7, lr}
100061ee:	b084      	sub	sp, #16
100061f0:	af00      	add	r7, sp, #0
100061f2:	6078      	str	r0, [r7, #4]
100061f4:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
100061f6:	f04f 33ff 	mov.w	r3, #4294967295
100061fa:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
100061fc:	683b      	ldr	r3, [r7, #0]
100061fe:	461a      	mov	r2, r3
10006200:	2100      	movs	r1, #0
10006202:	6878      	ldr	r0, [r7, #4]
10006204:	f7ff ffb1 	bl	1000616a <metal_bitmap_next_clear_bit>
10006208:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
1000620a:	683b      	ldr	r3, [r7, #0]
1000620c:	68ba      	ldr	r2, [r7, #8]
1000620e:	429a      	cmp	r2, r3
10006210:	d208      	bcs.n	10006224 <rpmsg_get_address+0x38>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
10006212:	68bb      	ldr	r3, [r7, #8]
10006214:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
10006218:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
1000621a:	68bb      	ldr	r3, [r7, #8]
1000621c:	4619      	mov	r1, r3
1000621e:	6878      	ldr	r0, [r7, #4]
10006220:	f7ff ff3a 	bl	10006098 <metal_bitmap_set_bit>
	}

	return addr;
10006224:	68fb      	ldr	r3, [r7, #12]
}
10006226:	4618      	mov	r0, r3
10006228:	3710      	adds	r7, #16
1000622a:	46bd      	mov	sp, r7
1000622c:	bd80      	pop	{r7, pc}

1000622e <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
1000622e:	b580      	push	{r7, lr}
10006230:	b084      	sub	sp, #16
10006232:	af00      	add	r7, sp, #0
10006234:	60f8      	str	r0, [r7, #12]
10006236:	60b9      	str	r1, [r7, #8]
10006238:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
1000623a:	687b      	ldr	r3, [r7, #4]
1000623c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10006240:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10006242:	687b      	ldr	r3, [r7, #4]
10006244:	2b00      	cmp	r3, #0
10006246:	db07      	blt.n	10006258 <rpmsg_release_address+0x2a>
10006248:	687a      	ldr	r2, [r7, #4]
1000624a:	68bb      	ldr	r3, [r7, #8]
1000624c:	429a      	cmp	r2, r3
1000624e:	da03      	bge.n	10006258 <rpmsg_release_address+0x2a>
		metal_bitmap_clear_bit(bitmap, addr);
10006250:	6879      	ldr	r1, [r7, #4]
10006252:	68f8      	ldr	r0, [r7, #12]
10006254:	f7ff ff59 	bl	1000610a <metal_bitmap_clear_bit>
}
10006258:	bf00      	nop
1000625a:	3710      	adds	r7, #16
1000625c:	46bd      	mov	sp, r7
1000625e:	bd80      	pop	{r7, pc}

10006260 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
10006260:	b580      	push	{r7, lr}
10006262:	b084      	sub	sp, #16
10006264:	af00      	add	r7, sp, #0
10006266:	60f8      	str	r0, [r7, #12]
10006268:	60b9      	str	r1, [r7, #8]
1000626a:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
1000626c:	687b      	ldr	r3, [r7, #4]
1000626e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10006272:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10006274:	687b      	ldr	r3, [r7, #4]
10006276:	2b00      	cmp	r3, #0
10006278:	db09      	blt.n	1000628e <rpmsg_is_address_set+0x2e>
1000627a:	687a      	ldr	r2, [r7, #4]
1000627c:	68bb      	ldr	r3, [r7, #8]
1000627e:	429a      	cmp	r2, r3
10006280:	da05      	bge.n	1000628e <rpmsg_is_address_set+0x2e>
		return metal_bitmap_is_bit_set(bitmap, addr);
10006282:	6879      	ldr	r1, [r7, #4]
10006284:	68f8      	ldr	r0, [r7, #12]
10006286:	f7ff ff23 	bl	100060d0 <metal_bitmap_is_bit_set>
1000628a:	4603      	mov	r3, r0
1000628c:	e000      	b.n	10006290 <rpmsg_is_address_set+0x30>
	else
		return RPMSG_ERR_PARAM;
1000628e:	4b02      	ldr	r3, [pc, #8]	@ (10006298 <rpmsg_is_address_set+0x38>)
}
10006290:	4618      	mov	r0, r3
10006292:	3710      	adds	r7, #16
10006294:	46bd      	mov	sp, r7
10006296:	bd80      	pop	{r7, pc}
10006298:	fffff82d 	.word	0xfffff82d

1000629c <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
1000629c:	b580      	push	{r7, lr}
1000629e:	b084      	sub	sp, #16
100062a0:	af00      	add	r7, sp, #0
100062a2:	60f8      	str	r0, [r7, #12]
100062a4:	60b9      	str	r1, [r7, #8]
100062a6:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
100062a8:	687b      	ldr	r3, [r7, #4]
100062aa:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
100062ae:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size) {
100062b0:	687b      	ldr	r3, [r7, #4]
100062b2:	2b00      	cmp	r3, #0
100062b4:	db09      	blt.n	100062ca <rpmsg_set_address+0x2e>
100062b6:	687a      	ldr	r2, [r7, #4]
100062b8:	68bb      	ldr	r3, [r7, #8]
100062ba:	429a      	cmp	r2, r3
100062bc:	da05      	bge.n	100062ca <rpmsg_set_address+0x2e>
		metal_bitmap_set_bit(bitmap, addr);
100062be:	6879      	ldr	r1, [r7, #4]
100062c0:	68f8      	ldr	r0, [r7, #12]
100062c2:	f7ff fee9 	bl	10006098 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
100062c6:	2300      	movs	r3, #0
100062c8:	e000      	b.n	100062cc <rpmsg_set_address+0x30>
	} else {
		return RPMSG_ERR_PARAM;
100062ca:	4b02      	ldr	r3, [pc, #8]	@ (100062d4 <rpmsg_set_address+0x38>)
	}
}
100062cc:	4618      	mov	r0, r3
100062ce:	3710      	adds	r7, #16
100062d0:	46bd      	mov	sp, r7
100062d2:	bd80      	pop	{r7, pc}
100062d4:	fffff82d 	.word	0xfffff82d

100062d8 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
100062d8:	b590      	push	{r4, r7, lr}
100062da:	b089      	sub	sp, #36	@ 0x24
100062dc:	af02      	add	r7, sp, #8
100062de:	60f8      	str	r0, [r7, #12]
100062e0:	60b9      	str	r1, [r7, #8]
100062e2:	607a      	str	r2, [r7, #4]
100062e4:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
100062e6:	68fb      	ldr	r3, [r7, #12]
100062e8:	2b00      	cmp	r3, #0
100062ea:	d00a      	beq.n	10006302 <rpmsg_send_offchannel_raw+0x2a>
100062ec:	68fb      	ldr	r3, [r7, #12]
100062ee:	6a1b      	ldr	r3, [r3, #32]
100062f0:	2b00      	cmp	r3, #0
100062f2:	d006      	beq.n	10006302 <rpmsg_send_offchannel_raw+0x2a>
100062f4:	683b      	ldr	r3, [r7, #0]
100062f6:	2b00      	cmp	r3, #0
100062f8:	d003      	beq.n	10006302 <rpmsg_send_offchannel_raw+0x2a>
100062fa:	687b      	ldr	r3, [r7, #4]
100062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
10006300:	d101      	bne.n	10006306 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
10006302:	4b0d      	ldr	r3, [pc, #52]	@ (10006338 <rpmsg_send_offchannel_raw+0x60>)
10006304:	e014      	b.n	10006330 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
10006306:	68fb      	ldr	r3, [r7, #12]
10006308:	6a1b      	ldr	r3, [r3, #32]
1000630a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
1000630c:	697b      	ldr	r3, [r7, #20]
1000630e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10006310:	2b00      	cmp	r3, #0
10006312:	d00c      	beq.n	1000632e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
10006314:	697b      	ldr	r3, [r7, #20]
10006316:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
10006318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000631a:	9301      	str	r3, [sp, #4]
1000631c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000631e:	9300      	str	r3, [sp, #0]
10006320:	683b      	ldr	r3, [r7, #0]
10006322:	687a      	ldr	r2, [r7, #4]
10006324:	68b9      	ldr	r1, [r7, #8]
10006326:	6978      	ldr	r0, [r7, #20]
10006328:	47a0      	blx	r4
1000632a:	4603      	mov	r3, r0
1000632c:	e000      	b.n	10006330 <rpmsg_send_offchannel_raw+0x58>
						     len, wait);

	return RPMSG_ERR_PARAM;
1000632e:	4b02      	ldr	r3, [pc, #8]	@ (10006338 <rpmsg_send_offchannel_raw+0x60>)
}
10006330:	4618      	mov	r0, r3
10006332:	371c      	adds	r7, #28
10006334:	46bd      	mov	sp, r7
10006336:	bd90      	pop	{r4, r7, pc}
10006338:	fffff82d 	.word	0xfffff82d

1000633c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
1000633c:	b580      	push	{r7, lr}
1000633e:	b090      	sub	sp, #64	@ 0x40
10006340:	af02      	add	r7, sp, #8
10006342:	6078      	str	r0, [r7, #4]
10006344:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
10006346:	683b      	ldr	r3, [r7, #0]
10006348:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
1000634a:	687b      	ldr	r3, [r7, #4]
1000634c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000634e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
10006350:	6879      	ldr	r1, [r7, #4]
10006352:	f107 030c 	add.w	r3, r7, #12
10006356:	2220      	movs	r2, #32
10006358:	4618      	mov	r0, r3
1000635a:	f001 fe65 	bl	10008028 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
1000635e:	687b      	ldr	r3, [r7, #4]
10006360:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10006362:	f107 030c 	add.w	r3, r7, #12
10006366:	2201      	movs	r2, #1
10006368:	9201      	str	r2, [sp, #4]
1000636a:	2228      	movs	r2, #40	@ 0x28
1000636c:	9200      	str	r2, [sp, #0]
1000636e:	2235      	movs	r2, #53	@ 0x35
10006370:	6878      	ldr	r0, [r7, #4]
10006372:	f7ff ffb1 	bl	100062d8 <rpmsg_send_offchannel_raw>
10006376:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
10006378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000637a:	2b00      	cmp	r3, #0
1000637c:	da01      	bge.n	10006382 <rpmsg_send_ns_message+0x46>
		return ret;
1000637e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006380:	e000      	b.n	10006384 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
10006382:	2300      	movs	r3, #0
}
10006384:	4618      	mov	r0, r3
10006386:	3738      	adds	r7, #56	@ 0x38
10006388:	46bd      	mov	sp, r7
1000638a:	bd80      	pop	{r7, pc}

1000638c <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
1000638c:	b580      	push	{r7, lr}
1000638e:	b088      	sub	sp, #32
10006390:	af00      	add	r7, sp, #0
10006392:	60f8      	str	r0, [r7, #12]
10006394:	60b9      	str	r1, [r7, #8]
10006396:	607a      	str	r2, [r7, #4]
10006398:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
1000639a:	68fb      	ldr	r3, [r7, #12]
1000639c:	681b      	ldr	r3, [r3, #0]
1000639e:	61fb      	str	r3, [r7, #28]
100063a0:	e04b      	b.n	1000643a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
100063a2:	2300      	movs	r3, #0
100063a4:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
100063a6:	69fb      	ldr	r3, [r7, #28]
100063a8:	3b34      	subs	r3, #52	@ 0x34
100063aa:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
100063ac:	687b      	ldr	r3, [r7, #4]
100063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
100063b2:	d006      	beq.n	100063c2 <rpmsg_get_endpoint+0x36>
100063b4:	697b      	ldr	r3, [r7, #20]
100063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100063b8:	687a      	ldr	r2, [r7, #4]
100063ba:	429a      	cmp	r2, r3
100063bc:	d101      	bne.n	100063c2 <rpmsg_get_endpoint+0x36>
			return ept;
100063be:	697b      	ldr	r3, [r7, #20]
100063c0:	e040      	b.n	10006444 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
100063c2:	697b      	ldr	r3, [r7, #20]
100063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100063c6:	687a      	ldr	r2, [r7, #4]
100063c8:	429a      	cmp	r2, r3
100063ca:	d106      	bne.n	100063da <rpmsg_get_endpoint+0x4e>
100063cc:	697b      	ldr	r3, [r7, #20]
100063ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100063d0:	683a      	ldr	r2, [r7, #0]
100063d2:	429a      	cmp	r2, r3
100063d4:	d101      	bne.n	100063da <rpmsg_get_endpoint+0x4e>
			return ept;
100063d6:	697b      	ldr	r3, [r7, #20]
100063d8:	e034      	b.n	10006444 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
100063da:	68bb      	ldr	r3, [r7, #8]
100063dc:	2b00      	cmp	r3, #0
100063de:	d00c      	beq.n	100063fa <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
100063e0:	697b      	ldr	r3, [r7, #20]
100063e2:	2220      	movs	r2, #32
100063e4:	68b9      	ldr	r1, [r7, #8]
100063e6:	4618      	mov	r0, r3
100063e8:	f001 fe0c 	bl	10008004 <strncmp>
100063ec:	4603      	mov	r3, r0
100063ee:	2b00      	cmp	r3, #0
100063f0:	bf0c      	ite	eq
100063f2:	2301      	moveq	r3, #1
100063f4:	2300      	movne	r3, #0
100063f6:	b2db      	uxtb	r3, r3
100063f8:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
100063fa:	68bb      	ldr	r3, [r7, #8]
100063fc:	2b00      	cmp	r3, #0
100063fe:	d018      	beq.n	10006432 <rpmsg_get_endpoint+0xa6>
10006400:	69bb      	ldr	r3, [r7, #24]
10006402:	2b00      	cmp	r3, #0
10006404:	d015      	beq.n	10006432 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10006406:	683b      	ldr	r3, [r7, #0]
10006408:	f1b3 3fff 	cmp.w	r3, #4294967295
1000640c:	d006      	beq.n	1000641c <rpmsg_get_endpoint+0x90>
1000640e:	697b      	ldr	r3, [r7, #20]
10006410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006412:	683a      	ldr	r2, [r7, #0]
10006414:	429a      	cmp	r2, r3
10006416:	d101      	bne.n	1000641c <rpmsg_get_endpoint+0x90>
			return ept;
10006418:	697b      	ldr	r3, [r7, #20]
1000641a:	e013      	b.n	10006444 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000641c:	687b      	ldr	r3, [r7, #4]
1000641e:	f1b3 3fff 	cmp.w	r3, #4294967295
10006422:	d107      	bne.n	10006434 <rpmsg_get_endpoint+0xa8>
10006424:	697b      	ldr	r3, [r7, #20]
10006426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006428:	f1b3 3fff 	cmp.w	r3, #4294967295
1000642c:	d102      	bne.n	10006434 <rpmsg_get_endpoint+0xa8>
			return ept;
1000642e:	697b      	ldr	r3, [r7, #20]
10006430:	e008      	b.n	10006444 <rpmsg_get_endpoint+0xb8>
			continue;
10006432:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
10006434:	69fb      	ldr	r3, [r7, #28]
10006436:	681b      	ldr	r3, [r3, #0]
10006438:	61fb      	str	r3, [r7, #28]
1000643a:	68fb      	ldr	r3, [r7, #12]
1000643c:	69fa      	ldr	r2, [r7, #28]
1000643e:	429a      	cmp	r2, r3
10006440:	d1af      	bne.n	100063a2 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
10006442:	2300      	movs	r3, #0
}
10006444:	4618      	mov	r0, r3
10006446:	3720      	adds	r7, #32
10006448:	46bd      	mov	sp, r7
1000644a:	bd80      	pop	{r7, pc}

1000644c <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
1000644c:	b580      	push	{r7, lr}
1000644e:	b084      	sub	sp, #16
10006450:	af00      	add	r7, sp, #0
10006452:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev = ept->rdev;
10006454:	687b      	ldr	r3, [r7, #4]
10006456:	6a1b      	ldr	r3, [r3, #32]
10006458:	60fb      	str	r3, [r7, #12]

	metal_mutex_acquire(&rdev->lock);
1000645a:	68fb      	ldr	r3, [r7, #12]
1000645c:	3358      	adds	r3, #88	@ 0x58
1000645e:	4618      	mov	r0, r3
10006460:	f7ff fdc3 	bl	10005fea <metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
10006464:	687b      	ldr	r3, [r7, #4]
10006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006468:	f1b3 3fff 	cmp.w	r3, #4294967295
1000646c:	d008      	beq.n	10006480 <rpmsg_unregister_endpoint+0x34>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
1000646e:	68fb      	ldr	r3, [r7, #12]
10006470:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
10006474:	687b      	ldr	r3, [r7, #4]
10006476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10006478:	461a      	mov	r2, r3
1000647a:	2180      	movs	r1, #128	@ 0x80
1000647c:	f7ff fed7 	bl	1000622e <rpmsg_release_address>
	metal_list_del(&ept->node);
10006480:	687b      	ldr	r3, [r7, #4]
10006482:	3334      	adds	r3, #52	@ 0x34
10006484:	4618      	mov	r0, r3
10006486:	f7ff fded 	bl	10006064 <metal_list_del>
	ept->rdev = NULL;
1000648a:	687b      	ldr	r3, [r7, #4]
1000648c:	2200      	movs	r2, #0
1000648e:	621a      	str	r2, [r3, #32]
	metal_mutex_release(&rdev->lock);
10006490:	68fb      	ldr	r3, [r7, #12]
10006492:	3358      	adds	r3, #88	@ 0x58
10006494:	4618      	mov	r0, r3
10006496:	f7ff fdb3 	bl	10006000 <metal_mutex_release>
}
1000649a:	bf00      	nop
1000649c:	3710      	adds	r7, #16
1000649e:	46bd      	mov	sp, r7
100064a0:	bd80      	pop	{r7, pc}

100064a2 <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
100064a2:	b580      	push	{r7, lr}
100064a4:	b082      	sub	sp, #8
100064a6:	af00      	add	r7, sp, #0
100064a8:	6078      	str	r0, [r7, #4]
100064aa:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
100064ac:	683b      	ldr	r3, [r7, #0]
100064ae:	687a      	ldr	r2, [r7, #4]
100064b0:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
100064b2:	687a      	ldr	r2, [r7, #4]
100064b4:	683b      	ldr	r3, [r7, #0]
100064b6:	3334      	adds	r3, #52	@ 0x34
100064b8:	4619      	mov	r1, r3
100064ba:	4610      	mov	r0, r2
100064bc:	f7ff fdc5 	bl	1000604a <metal_list_add_tail>
}
100064c0:	bf00      	nop
100064c2:	3708      	adds	r7, #8
100064c4:	46bd      	mov	sp, r7
100064c6:	bd80      	pop	{r7, pc}

100064c8 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
100064c8:	b580      	push	{r7, lr}
100064ca:	b088      	sub	sp, #32
100064cc:	af02      	add	r7, sp, #8
100064ce:	60f8      	str	r0, [r7, #12]
100064d0:	60b9      	str	r1, [r7, #8]
100064d2:	607a      	str	r2, [r7, #4]
100064d4:	603b      	str	r3, [r7, #0]
	int status = RPMSG_SUCCESS;
100064d6:	2300      	movs	r3, #0
100064d8:	617b      	str	r3, [r7, #20]
	uint32_t addr = src;
100064da:	683b      	ldr	r3, [r7, #0]
100064dc:	613b      	str	r3, [r7, #16]

	if (!ept)
100064de:	68fb      	ldr	r3, [r7, #12]
100064e0:	2b00      	cmp	r3, #0
100064e2:	d101      	bne.n	100064e8 <rpmsg_create_ept+0x20>
		return RPMSG_ERR_PARAM;
100064e4:	4b37      	ldr	r3, [pc, #220]	@ (100065c4 <rpmsg_create_ept+0xfc>)
100064e6:	e068      	b.n	100065ba <rpmsg_create_ept+0xf2>

	metal_mutex_acquire(&rdev->lock);
100064e8:	68bb      	ldr	r3, [r7, #8]
100064ea:	3358      	adds	r3, #88	@ 0x58
100064ec:	4618      	mov	r0, r3
100064ee:	f7ff fd7c 	bl	10005fea <metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
100064f2:	683b      	ldr	r3, [r7, #0]
100064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
100064f8:	d10d      	bne.n	10006516 <rpmsg_create_ept+0x4e>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
100064fa:	68bb      	ldr	r3, [r7, #8]
100064fc:	3348      	adds	r3, #72	@ 0x48
100064fe:	2180      	movs	r1, #128	@ 0x80
10006500:	4618      	mov	r0, r3
10006502:	f7ff fe73 	bl	100061ec <rpmsg_get_address>
10006506:	6138      	str	r0, [r7, #16]
		if (addr == RPMSG_ADDR_ANY) {
10006508:	693b      	ldr	r3, [r7, #16]
1000650a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000650e:	d11f      	bne.n	10006550 <rpmsg_create_ept+0x88>
			status = RPMSG_ERR_ADDR;
10006510:	4b2d      	ldr	r3, [pc, #180]	@ (100065c8 <rpmsg_create_ept+0x100>)
10006512:	617b      	str	r3, [r7, #20]
			goto ret_status;
10006514:	e04b      	b.n	100065ae <rpmsg_create_ept+0xe6>
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
10006516:	683b      	ldr	r3, [r7, #0]
10006518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
1000651c:	d318      	bcc.n	10006550 <rpmsg_create_ept+0x88>
		status = rpmsg_is_address_set(rdev->bitmap,
1000651e:	68bb      	ldr	r3, [r7, #8]
10006520:	3348      	adds	r3, #72	@ 0x48
10006522:	683a      	ldr	r2, [r7, #0]
10006524:	2180      	movs	r1, #128	@ 0x80
10006526:	4618      	mov	r0, r3
10006528:	f7ff fe9a 	bl	10006260 <rpmsg_is_address_set>
1000652c:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
1000652e:	697b      	ldr	r3, [r7, #20]
10006530:	2b00      	cmp	r3, #0
10006532:	d107      	bne.n	10006544 <rpmsg_create_ept+0x7c>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10006534:	68bb      	ldr	r3, [r7, #8]
10006536:	3348      	adds	r3, #72	@ 0x48
10006538:	683a      	ldr	r2, [r7, #0]
1000653a:	2180      	movs	r1, #128	@ 0x80
1000653c:	4618      	mov	r0, r3
1000653e:	f7ff fead 	bl	1000629c <rpmsg_set_address>
10006542:	e005      	b.n	10006550 <rpmsg_create_ept+0x88>
					  src);
		} else if (status > 0) {
10006544:	697b      	ldr	r3, [r7, #20]
10006546:	2b00      	cmp	r3, #0
10006548:	dd30      	ble.n	100065ac <rpmsg_create_ept+0xe4>
			status = RPMSG_ERR_ADDR;
1000654a:	4b1f      	ldr	r3, [pc, #124]	@ (100065c8 <rpmsg_create_ept+0x100>)
1000654c:	617b      	str	r3, [r7, #20]
			goto ret_status;
1000654e:	e02e      	b.n	100065ae <rpmsg_create_ept+0xe6>
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
10006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10006552:	9301      	str	r3, [sp, #4]
10006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006556:	9300      	str	r3, [sp, #0]
10006558:	6a3b      	ldr	r3, [r7, #32]
1000655a:	693a      	ldr	r2, [r7, #16]
1000655c:	6879      	ldr	r1, [r7, #4]
1000655e:	68f8      	ldr	r0, [r7, #12]
10006560:	f7ff fe20 	bl	100061a4 <rpmsg_initialize_ept>
	rpmsg_register_endpoint(rdev, ept);
10006564:	68f9      	ldr	r1, [r7, #12]
10006566:	68b8      	ldr	r0, [r7, #8]
10006568:	f7ff ff9b 	bl	100064a2 <rpmsg_register_endpoint>
	metal_mutex_release(&rdev->lock);
1000656c:	68bb      	ldr	r3, [r7, #8]
1000656e:	3358      	adds	r3, #88	@ 0x58
10006570:	4618      	mov	r0, r3
10006572:	f7ff fd45 	bl	10006000 <metal_mutex_release>

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
10006576:	68fb      	ldr	r3, [r7, #12]
10006578:	781b      	ldrb	r3, [r3, #0]
1000657a:	2b00      	cmp	r3, #0
1000657c:	d00e      	beq.n	1000659c <rpmsg_create_ept+0xd4>
1000657e:	68bb      	ldr	r3, [r7, #8]
10006580:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
10006584:	2b00      	cmp	r3, #0
10006586:	d009      	beq.n	1000659c <rpmsg_create_ept+0xd4>
	    ept->dest_addr == RPMSG_ADDR_ANY)
10006588:	68fb      	ldr	r3, [r7, #12]
1000658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	if (ept->name[0] && rdev->support_ns &&
1000658c:	f1b3 3fff 	cmp.w	r3, #4294967295
10006590:	d104      	bne.n	1000659c <rpmsg_create_ept+0xd4>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
10006592:	2100      	movs	r1, #0
10006594:	68f8      	ldr	r0, [r7, #12]
10006596:	f7ff fed1 	bl	1000633c <rpmsg_send_ns_message>
1000659a:	6178      	str	r0, [r7, #20]

	if (status)
1000659c:	697b      	ldr	r3, [r7, #20]
1000659e:	2b00      	cmp	r3, #0
100065a0:	d002      	beq.n	100065a8 <rpmsg_create_ept+0xe0>
		rpmsg_unregister_endpoint(ept);
100065a2:	68f8      	ldr	r0, [r7, #12]
100065a4:	f7ff ff52 	bl	1000644c <rpmsg_unregister_endpoint>
	return status;
100065a8:	697b      	ldr	r3, [r7, #20]
100065aa:	e006      	b.n	100065ba <rpmsg_create_ept+0xf2>
			goto ret_status;
100065ac:	bf00      	nop

ret_status:
	metal_mutex_release(&rdev->lock);
100065ae:	68bb      	ldr	r3, [r7, #8]
100065b0:	3358      	adds	r3, #88	@ 0x58
100065b2:	4618      	mov	r0, r3
100065b4:	f7ff fd24 	bl	10006000 <metal_mutex_release>
	return status;
100065b8:	697b      	ldr	r3, [r7, #20]
}
100065ba:	4618      	mov	r0, r3
100065bc:	3718      	adds	r7, #24
100065be:	46bd      	mov	sp, r7
100065c0:	bd80      	pop	{r7, pc}
100065c2:	bf00      	nop
100065c4:	fffff82d 	.word	0xfffff82d
100065c8:	fffff829 	.word	0xfffff829

100065cc <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
100065cc:	b480      	push	{r7}
100065ce:	b083      	sub	sp, #12
100065d0:	af00      	add	r7, sp, #0
100065d2:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
100065d4:	2300      	movs	r3, #0
}
100065d6:	4618      	mov	r0, r3
100065d8:	370c      	adds	r7, #12
100065da:	46bd      	mov	sp, r7
100065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
100065e0:	4770      	bx	lr

100065e2 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
100065e2:	b580      	push	{r7, lr}
100065e4:	b082      	sub	sp, #8
100065e6:	af00      	add	r7, sp, #0
100065e8:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
100065ea:	6878      	ldr	r0, [r7, #4]
100065ec:	f7ff ffee 	bl	100065cc <__metal_sleep_usec>
100065f0:	4603      	mov	r3, r0
}
100065f2:	4618      	mov	r0, r3
100065f4:	3708      	adds	r7, #8
100065f6:	46bd      	mov	sp, r7
100065f8:	bd80      	pop	{r7, pc}

100065fa <metal_list_init>:
{
100065fa:	b480      	push	{r7}
100065fc:	b083      	sub	sp, #12
100065fe:	af00      	add	r7, sp, #0
10006600:	6078      	str	r0, [r7, #4]
	list->prev = list;
10006602:	687b      	ldr	r3, [r7, #4]
10006604:	687a      	ldr	r2, [r7, #4]
10006606:	605a      	str	r2, [r3, #4]
	list->next = list;
10006608:	687b      	ldr	r3, [r7, #4]
1000660a:	687a      	ldr	r2, [r7, #4]
1000660c:	601a      	str	r2, [r3, #0]
}
1000660e:	bf00      	nop
10006610:	370c      	adds	r7, #12
10006612:	46bd      	mov	sp, r7
10006614:	f85d 7b04 	ldr.w	r7, [sp], #4
10006618:	4770      	bx	lr

1000661a <metal_io_virt_to_offset>:
{
1000661a:	b480      	push	{r7}
1000661c:	b085      	sub	sp, #20
1000661e:	af00      	add	r7, sp, #0
10006620:	6078      	str	r0, [r7, #4]
10006622:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10006624:	683b      	ldr	r3, [r7, #0]
10006626:	687a      	ldr	r2, [r7, #4]
10006628:	6812      	ldr	r2, [r2, #0]
1000662a:	1a9b      	subs	r3, r3, r2
1000662c:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000662e:	687b      	ldr	r3, [r7, #4]
10006630:	689b      	ldr	r3, [r3, #8]
10006632:	68fa      	ldr	r2, [r7, #12]
10006634:	429a      	cmp	r2, r3
10006636:	d201      	bcs.n	1000663c <metal_io_virt_to_offset+0x22>
10006638:	68fb      	ldr	r3, [r7, #12]
1000663a:	e001      	b.n	10006640 <metal_io_virt_to_offset+0x26>
1000663c:	f04f 33ff 	mov.w	r3, #4294967295
}
10006640:	4618      	mov	r0, r3
10006642:	3714      	adds	r7, #20
10006644:	46bd      	mov	sp, r7
10006646:	f85d 7b04 	ldr.w	r7, [sp], #4
1000664a:	4770      	bx	lr

1000664c <__metal_mutex_init>:
{
1000664c:	b480      	push	{r7}
1000664e:	b085      	sub	sp, #20
10006650:	af00      	add	r7, sp, #0
10006652:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10006654:	687b      	ldr	r3, [r7, #4]
10006656:	60fb      	str	r3, [r7, #12]
10006658:	2300      	movs	r3, #0
1000665a:	60bb      	str	r3, [r7, #8]
1000665c:	68bb      	ldr	r3, [r7, #8]
1000665e:	461a      	mov	r2, r3
10006660:	68fb      	ldr	r3, [r7, #12]
10006662:	f3bf 8f5b 	dmb	ish
10006666:	601a      	str	r2, [r3, #0]
10006668:	f3bf 8f5b 	dmb	ish
}
1000666c:	bf00      	nop
1000666e:	3714      	adds	r7, #20
10006670:	46bd      	mov	sp, r7
10006672:	f85d 7b04 	ldr.w	r7, [sp], #4
10006676:	4770      	bx	lr

10006678 <__metal_mutex_acquire>:
{
10006678:	b490      	push	{r4, r7}
1000667a:	b086      	sub	sp, #24
1000667c:	af00      	add	r7, sp, #0
1000667e:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10006680:	2300      	movs	r3, #0
10006682:	613b      	str	r3, [r7, #16]
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10006684:	bf00      	nop
10006686:	687b      	ldr	r3, [r7, #4]
10006688:	617b      	str	r3, [r7, #20]
1000668a:	2301      	movs	r3, #1
1000668c:	60fb      	str	r3, [r7, #12]
1000668e:	68fb      	ldr	r3, [r7, #12]
10006690:	461c      	mov	r4, r3
10006692:	697a      	ldr	r2, [r7, #20]
10006694:	f107 0310 	add.w	r3, r7, #16
10006698:	6818      	ldr	r0, [r3, #0]
1000669a:	f3bf 8f5b 	dmb	ish
1000669e:	e852 1f00 	ldrex	r1, [r2]
100066a2:	4281      	cmp	r1, r0
100066a4:	d103      	bne.n	100066ae <__metal_mutex_acquire+0x36>
100066a6:	e842 4c00 	strex	ip, r4, [r2]
100066aa:	f1bc 0f00 	cmp.w	ip, #0
100066ae:	f3bf 8f5b 	dmb	ish
100066b2:	bf0c      	ite	eq
100066b4:	2201      	moveq	r2, #1
100066b6:	2200      	movne	r2, #0
100066b8:	2a00      	cmp	r2, #0
100066ba:	d100      	bne.n	100066be <__metal_mutex_acquire+0x46>
100066bc:	6019      	str	r1, [r3, #0]
100066be:	4613      	mov	r3, r2
100066c0:	f083 0301 	eor.w	r3, r3, #1
100066c4:	b2db      	uxtb	r3, r3
100066c6:	2b00      	cmp	r3, #0
100066c8:	d1dd      	bne.n	10006686 <__metal_mutex_acquire+0xe>
}
100066ca:	bf00      	nop
100066cc:	bf00      	nop
100066ce:	3718      	adds	r7, #24
100066d0:	46bd      	mov	sp, r7
100066d2:	bc90      	pop	{r4, r7}
100066d4:	4770      	bx	lr

100066d6 <__metal_mutex_release>:
{
100066d6:	b480      	push	{r7}
100066d8:	b085      	sub	sp, #20
100066da:	af00      	add	r7, sp, #0
100066dc:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100066de:	687b      	ldr	r3, [r7, #4]
100066e0:	60fb      	str	r3, [r7, #12]
100066e2:	2300      	movs	r3, #0
100066e4:	60bb      	str	r3, [r7, #8]
100066e6:	68bb      	ldr	r3, [r7, #8]
100066e8:	461a      	mov	r2, r3
100066ea:	68fb      	ldr	r3, [r7, #12]
100066ec:	f3bf 8f5b 	dmb	ish
100066f0:	601a      	str	r2, [r3, #0]
100066f2:	f3bf 8f5b 	dmb	ish
}
100066f6:	bf00      	nop
100066f8:	3714      	adds	r7, #20
100066fa:	46bd      	mov	sp, r7
100066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
10006700:	4770      	bx	lr

10006702 <metal_mutex_init>:
{
10006702:	b580      	push	{r7, lr}
10006704:	b082      	sub	sp, #8
10006706:	af00      	add	r7, sp, #0
10006708:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000670a:	6878      	ldr	r0, [r7, #4]
1000670c:	f7ff ff9e 	bl	1000664c <__metal_mutex_init>
}
10006710:	bf00      	nop
10006712:	3708      	adds	r7, #8
10006714:	46bd      	mov	sp, r7
10006716:	bd80      	pop	{r7, pc}

10006718 <metal_mutex_acquire>:
{
10006718:	b580      	push	{r7, lr}
1000671a:	b082      	sub	sp, #8
1000671c:	af00      	add	r7, sp, #0
1000671e:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
10006720:	6878      	ldr	r0, [r7, #4]
10006722:	f7ff ffa9 	bl	10006678 <__metal_mutex_acquire>
}
10006726:	bf00      	nop
10006728:	3708      	adds	r7, #8
1000672a:	46bd      	mov	sp, r7
1000672c:	bd80      	pop	{r7, pc}

1000672e <metal_mutex_release>:
{
1000672e:	b580      	push	{r7, lr}
10006730:	b082      	sub	sp, #8
10006732:	af00      	add	r7, sp, #0
10006734:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10006736:	6878      	ldr	r0, [r7, #4]
10006738:	f7ff ffcd 	bl	100066d6 <__metal_mutex_release>
}
1000673c:	bf00      	nop
1000673e:	3708      	adds	r7, #8
10006740:	46bd      	mov	sp, r7
10006742:	bd80      	pop	{r7, pc}

10006744 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
10006744:	b480      	push	{r7}
10006746:	b083      	sub	sp, #12
10006748:	af00      	add	r7, sp, #0
1000674a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
1000674c:	687b      	ldr	r3, [r7, #4]
1000674e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10006750:	699b      	ldr	r3, [r3, #24]
}
10006752:	4618      	mov	r0, r3
10006754:	370c      	adds	r7, #12
10006756:	46bd      	mov	sp, r7
10006758:	f85d 7b04 	ldr.w	r7, [sp], #4
1000675c:	4770      	bx	lr

1000675e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000675e:	b580      	push	{r7, lr}
10006760:	b082      	sub	sp, #8
10006762:	af00      	add	r7, sp, #0
10006764:	6078      	str	r0, [r7, #4]
10006766:	460b      	mov	r3, r1
10006768:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000676a:	687b      	ldr	r3, [r7, #4]
1000676c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000676e:	6a1b      	ldr	r3, [r3, #32]
10006770:	685b      	ldr	r3, [r3, #4]
10006772:	687a      	ldr	r2, [r7, #4]
10006774:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10006776:	78f9      	ldrb	r1, [r7, #3]
10006778:	4610      	mov	r0, r2
1000677a:	4798      	blx	r3
}
1000677c:	bf00      	nop
1000677e:	3708      	adds	r7, #8
10006780:	46bd      	mov	sp, r7
10006782:	bd80      	pop	{r7, pc}

10006784 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
10006784:	b580      	push	{r7, lr}
10006786:	b082      	sub	sp, #8
10006788:	af00      	add	r7, sp, #0
1000678a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000678c:	687b      	ldr	r3, [r7, #4]
1000678e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10006790:	6a1b      	ldr	r3, [r3, #32]
10006792:	681b      	ldr	r3, [r3, #0]
10006794:	687a      	ldr	r2, [r7, #4]
10006796:	6f92      	ldr	r2, [r2, #120]	@ 0x78
10006798:	4610      	mov	r0, r2
1000679a:	4798      	blx	r3
1000679c:	4603      	mov	r3, r0
}
1000679e:	4618      	mov	r0, r3
100067a0:	3708      	adds	r7, #8
100067a2:	46bd      	mov	sp, r7
100067a4:	bd80      	pop	{r7, pc}

100067a6 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
100067a6:	b580      	push	{r7, lr}
100067a8:	b082      	sub	sp, #8
100067aa:	af00      	add	r7, sp, #0
100067ac:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
100067ae:	687b      	ldr	r3, [r7, #4]
100067b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100067b2:	6a1b      	ldr	r3, [r3, #32]
100067b4:	689b      	ldr	r3, [r3, #8]
100067b6:	687a      	ldr	r2, [r7, #4]
100067b8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
100067ba:	4610      	mov	r0, r2
100067bc:	4798      	blx	r3
100067be:	4603      	mov	r3, r0
}
100067c0:	4618      	mov	r0, r3
100067c2:	3708      	adds	r7, #8
100067c4:	46bd      	mov	sp, r7
100067c6:	bd80      	pop	{r7, pc}

100067c8 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
100067c8:	b580      	push	{r7, lr}
100067ca:	b086      	sub	sp, #24
100067cc:	af02      	add	r7, sp, #8
100067ce:	60f8      	str	r0, [r7, #12]
100067d0:	60b9      	str	r1, [r7, #8]
100067d2:	607a      	str	r2, [r7, #4]
100067d4:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
100067d6:	68fb      	ldr	r3, [r7, #12]
100067d8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
100067da:	68b9      	ldr	r1, [r7, #8]
100067dc:	69bb      	ldr	r3, [r7, #24]
100067de:	9300      	str	r3, [sp, #0]
100067e0:	683b      	ldr	r3, [r7, #0]
100067e2:	687a      	ldr	r2, [r7, #4]
100067e4:	f000 fcb4 	bl	10007150 <virtio_create_virtqueues>
100067e8:	4603      	mov	r3, r0
					callbacks);
}
100067ea:	4618      	mov	r0, r3
100067ec:	3710      	adds	r7, #16
100067ee:	46bd      	mov	sp, r7
100067f0:	bd80      	pop	{r7, pc}
	...

100067f4 <rpmsg_initialize_ept>:
{
100067f4:	b580      	push	{r7, lr}
100067f6:	b084      	sub	sp, #16
100067f8:	af00      	add	r7, sp, #0
100067fa:	60f8      	str	r0, [r7, #12]
100067fc:	60b9      	str	r1, [r7, #8]
100067fe:	607a      	str	r2, [r7, #4]
10006800:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10006802:	68f8      	ldr	r0, [r7, #12]
10006804:	68bb      	ldr	r3, [r7, #8]
10006806:	2b00      	cmp	r3, #0
10006808:	d001      	beq.n	1000680e <rpmsg_initialize_ept+0x1a>
1000680a:	68bb      	ldr	r3, [r7, #8]
1000680c:	e000      	b.n	10006810 <rpmsg_initialize_ept+0x1c>
1000680e:	4b0a      	ldr	r3, [pc, #40]	@ (10006838 <rpmsg_initialize_ept+0x44>)
10006810:	2220      	movs	r2, #32
10006812:	4619      	mov	r1, r3
10006814:	f001 fc08 	bl	10008028 <strncpy>
	ept->addr = src;
10006818:	68fb      	ldr	r3, [r7, #12]
1000681a:	687a      	ldr	r2, [r7, #4]
1000681c:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
1000681e:	68fb      	ldr	r3, [r7, #12]
10006820:	683a      	ldr	r2, [r7, #0]
10006822:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
10006824:	68fb      	ldr	r3, [r7, #12]
10006826:	69ba      	ldr	r2, [r7, #24]
10006828:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000682a:	68fb      	ldr	r3, [r7, #12]
1000682c:	69fa      	ldr	r2, [r7, #28]
1000682e:	631a      	str	r2, [r3, #48]	@ 0x30
}
10006830:	bf00      	nop
10006832:	3710      	adds	r7, #16
10006834:	46bd      	mov	sp, r7
10006836:	bd80      	pop	{r7, pc}
10006838:	10009170 	.word	0x10009170

1000683c <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
1000683c:	b580      	push	{r7, lr}
1000683e:	b082      	sub	sp, #8
10006840:	af00      	add	r7, sp, #0
10006842:	6078      	str	r0, [r7, #4]
10006844:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
10006846:	f04f 33ff 	mov.w	r3, #4294967295
1000684a:	683a      	ldr	r2, [r7, #0]
1000684c:	2100      	movs	r1, #0
1000684e:	6878      	ldr	r0, [r7, #4]
10006850:	f7ff fd9c 	bl	1000638c <rpmsg_get_endpoint>
10006854:	4603      	mov	r3, r0
}
10006856:	4618      	mov	r0, r3
10006858:	3708      	adds	r7, #8
1000685a:	46bd      	mov	sp, r7
1000685c:	bd80      	pop	{r7, pc}

1000685e <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
1000685e:	b480      	push	{r7}
10006860:	b085      	sub	sp, #20
10006862:	af00      	add	r7, sp, #0
10006864:	60f8      	str	r0, [r7, #12]
10006866:	60b9      	str	r1, [r7, #8]
10006868:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000686a:	68fb      	ldr	r3, [r7, #12]
1000686c:	2b00      	cmp	r3, #0
1000686e:	d009      	beq.n	10006884 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
10006870:	68fb      	ldr	r3, [r7, #12]
10006872:	68ba      	ldr	r2, [r7, #8]
10006874:	601a      	str	r2, [r3, #0]
	shpool->size = size;
10006876:	68fb      	ldr	r3, [r7, #12]
10006878:	687a      	ldr	r2, [r7, #4]
1000687a:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
1000687c:	68fb      	ldr	r3, [r7, #12]
1000687e:	687a      	ldr	r2, [r7, #4]
10006880:	605a      	str	r2, [r3, #4]
10006882:	e000      	b.n	10006886 <rpmsg_virtio_init_shm_pool+0x28>
		return;
10006884:	bf00      	nop
}
10006886:	3714      	adds	r7, #20
10006888:	46bd      	mov	sp, r7
1000688a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000688e:	4770      	bx	lr

10006890 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10006890:	b580      	push	{r7, lr}
10006892:	b086      	sub	sp, #24
10006894:	af00      	add	r7, sp, #0
10006896:	60f8      	str	r0, [r7, #12]
10006898:	60b9      	str	r1, [r7, #8]
1000689a:	607a      	str	r2, [r7, #4]
1000689c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000689e:	68f8      	ldr	r0, [r7, #12]
100068a0:	f7ff ff50 	bl	10006744 <rpmsg_virtio_get_role>
100068a4:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100068a6:	697b      	ldr	r3, [r7, #20]
100068a8:	2b01      	cmp	r3, #1
100068aa:	d106      	bne.n	100068ba <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
100068ac:	68fb      	ldr	r3, [r7, #12]
100068ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100068b0:	8879      	ldrh	r1, [r7, #2]
100068b2:	687a      	ldr	r2, [r7, #4]
100068b4:	4618      	mov	r0, r3
100068b6:	f000 fe1d 	bl	100074f4 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
100068ba:	bf00      	nop
100068bc:	3718      	adds	r7, #24
100068be:	46bd      	mov	sp, r7
100068c0:	bd80      	pop	{r7, pc}

100068c2 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
100068c2:	b580      	push	{r7, lr}
100068c4:	b086      	sub	sp, #24
100068c6:	af00      	add	r7, sp, #0
100068c8:	60f8      	str	r0, [r7, #12]
100068ca:	60b9      	str	r1, [r7, #8]
100068cc:	607a      	str	r2, [r7, #4]
100068ce:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
100068d0:	68f8      	ldr	r0, [r7, #12]
100068d2:	f7ff ff37 	bl	10006744 <rpmsg_virtio_get_role>
100068d6:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100068d8:	697b      	ldr	r3, [r7, #20]
100068da:	2b01      	cmp	r3, #1
100068dc:	d109      	bne.n	100068f2 <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
100068de:	68fb      	ldr	r3, [r7, #12]
100068e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100068e4:	8879      	ldrh	r1, [r7, #2]
100068e6:	687a      	ldr	r2, [r7, #4]
100068e8:	4618      	mov	r0, r3
100068ea:	f000 fe03 	bl	100074f4 <virtqueue_add_consumed_buffer>
100068ee:	4603      	mov	r3, r0
100068f0:	e000      	b.n	100068f4 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
100068f2:	2300      	movs	r3, #0
}
100068f4:	4618      	mov	r0, r3
100068f6:	3718      	adds	r7, #24
100068f8:	46bd      	mov	sp, r7
100068fa:	bd80      	pop	{r7, pc}

100068fc <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
100068fc:	b580      	push	{r7, lr}
100068fe:	b086      	sub	sp, #24
10006900:	af00      	add	r7, sp, #0
10006902:	60f8      	str	r0, [r7, #12]
10006904:	60b9      	str	r1, [r7, #8]
10006906:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10006908:	68f8      	ldr	r0, [r7, #12]
1000690a:	f7ff ff1b 	bl	10006744 <rpmsg_virtio_get_role>
1000690e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
10006910:	2300      	movs	r3, #0
10006912:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10006914:	693b      	ldr	r3, [r7, #16]
10006916:	2b01      	cmp	r3, #1
10006918:	d108      	bne.n	1000692c <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
1000691a:	68fb      	ldr	r3, [r7, #12]
1000691c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006920:	68ba      	ldr	r2, [r7, #8]
10006922:	6879      	ldr	r1, [r7, #4]
10006924:	4618      	mov	r0, r3
10006926:	f000 fd9d 	bl	10007464 <virtqueue_get_available_buffer>
1000692a:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
1000692c:	697b      	ldr	r3, [r7, #20]
}
1000692e:	4618      	mov	r0, r3
10006930:	3718      	adds	r7, #24
10006932:	46bd      	mov	sp, r7
10006934:	bd80      	pop	{r7, pc}

10006936 <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
10006936:	b580      	push	{r7, lr}
10006938:	b086      	sub	sp, #24
1000693a:	af00      	add	r7, sp, #0
1000693c:	60f8      	str	r0, [r7, #12]
1000693e:	60b9      	str	r1, [r7, #8]
10006940:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10006942:	68f8      	ldr	r0, [r7, #12]
10006944:	f7ff fefe 	bl	10006744 <rpmsg_virtio_get_role>
10006948:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000694a:	2300      	movs	r3, #0
1000694c:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000694e:	693b      	ldr	r3, [r7, #16]
10006950:	2b01      	cmp	r3, #1
10006952:	d107      	bne.n	10006964 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
10006954:	68fb      	ldr	r3, [r7, #12]
10006956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10006958:	68ba      	ldr	r2, [r7, #8]
1000695a:	6879      	ldr	r1, [r7, #4]
1000695c:	4618      	mov	r0, r3
1000695e:	f000 fd81 	bl	10007464 <virtqueue_get_available_buffer>
10006962:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
10006964:	697b      	ldr	r3, [r7, #20]
}
10006966:	4618      	mov	r0, r3
10006968:	3718      	adds	r7, #24
1000696a:	46bd      	mov	sp, r7
1000696c:	bd80      	pop	{r7, pc}

1000696e <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000696e:	b580      	push	{r7, lr}
10006970:	b084      	sub	sp, #16
10006972:	af00      	add	r7, sp, #0
10006974:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
10006976:	6878      	ldr	r0, [r7, #4]
10006978:	f7ff ff04 	bl	10006784 <rpmsg_virtio_get_status>
1000697c:	4603      	mov	r3, r0
1000697e:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
10006980:	7bfb      	ldrb	r3, [r7, #15]
10006982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10006986:	2b00      	cmp	r3, #0
10006988:	d004      	beq.n	10006994 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000698a:	2100      	movs	r1, #0
1000698c:	6878      	ldr	r0, [r7, #4]
1000698e:	f7ff fee6 	bl	1000675e <rpmsg_virtio_set_status>
10006992:	e7f0      	b.n	10006976 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
10006994:	7bfb      	ldrb	r3, [r7, #15]
10006996:	f003 0304 	and.w	r3, r3, #4
1000699a:	2b00      	cmp	r3, #0
1000699c:	d0eb      	beq.n	10006976 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
1000699e:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
100069a0:	4618      	mov	r0, r3
100069a2:	3710      	adds	r7, #16
100069a4:	46bd      	mov	sp, r7
100069a6:	bd80      	pop	{r7, pc}

100069a8 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
100069a8:	b480      	push	{r7}
100069aa:	b085      	sub	sp, #20
100069ac:	af00      	add	r7, sp, #0
100069ae:	6078      	str	r0, [r7, #4]
100069b0:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
100069b2:	683b      	ldr	r3, [r7, #0]
100069b4:	3b10      	subs	r3, #16
100069b6:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
100069b8:	68fb      	ldr	r3, [r7, #12]
100069ba:	689b      	ldr	r3, [r3, #8]
100069bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
100069c0:	68fb      	ldr	r3, [r7, #12]
100069c2:	609a      	str	r2, [r3, #8]
}
100069c4:	bf00      	nop
100069c6:	3714      	adds	r7, #20
100069c8:	46bd      	mov	sp, r7
100069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
100069ce:	4770      	bx	lr

100069d0 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
100069d0:	b580      	push	{r7, lr}
100069d2:	b086      	sub	sp, #24
100069d4:	af00      	add	r7, sp, #0
100069d6:	6078      	str	r0, [r7, #4]
100069d8:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
100069da:	687b      	ldr	r3, [r7, #4]
100069dc:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
100069de:	683b      	ldr	r3, [r7, #0]
100069e0:	3b10      	subs	r3, #16
100069e2:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
100069e4:	693b      	ldr	r3, [r7, #16]
100069e6:	689b      	ldr	r3, [r3, #8]
100069e8:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
100069ea:	687b      	ldr	r3, [r7, #4]
100069ec:	3358      	adds	r3, #88	@ 0x58
100069ee:	4618      	mov	r0, r3
100069f0:	f7ff fe92 	bl	10006718 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
100069f4:	697b      	ldr	r3, [r7, #20]
100069f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100069f8:	89fa      	ldrh	r2, [r7, #14]
100069fa:	4611      	mov	r1, r2
100069fc:	4618      	mov	r0, r3
100069fe:	f000 fd1f 	bl	10007440 <virtqueue_get_buffer_length>
10006a02:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10006a04:	89fb      	ldrh	r3, [r7, #14]
10006a06:	68ba      	ldr	r2, [r7, #8]
10006a08:	6939      	ldr	r1, [r7, #16]
10006a0a:	6978      	ldr	r0, [r7, #20]
10006a0c:	f7ff ff40 	bl	10006890 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
10006a10:	687b      	ldr	r3, [r7, #4]
10006a12:	3358      	adds	r3, #88	@ 0x58
10006a14:	4618      	mov	r0, r3
10006a16:	f7ff fe8a 	bl	1000672e <metal_mutex_release>
}
10006a1a:	bf00      	nop
10006a1c:	3718      	adds	r7, #24
10006a1e:	46bd      	mov	sp, r7
10006a20:	bd80      	pop	{r7, pc}

10006a22 <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
10006a22:	b580      	push	{r7, lr}
10006a24:	b08a      	sub	sp, #40	@ 0x28
10006a26:	af00      	add	r7, sp, #0
10006a28:	60f8      	str	r0, [r7, #12]
10006a2a:	60b9      	str	r1, [r7, #8]
10006a2c:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10006a2e:	68fb      	ldr	r3, [r7, #12]
10006a30:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
10006a32:	6a38      	ldr	r0, [r7, #32]
10006a34:	f7ff fea6 	bl	10006784 <rpmsg_virtio_get_status>
10006a38:	4603      	mov	r3, r0
10006a3a:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
10006a3c:	69fb      	ldr	r3, [r7, #28]
10006a3e:	f003 0304 	and.w	r3, r3, #4
10006a42:	2b00      	cmp	r3, #0
10006a44:	d101      	bne.n	10006a4a <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
10006a46:	2300      	movs	r3, #0
10006a48:	e039      	b.n	10006abe <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
10006a4a:	687b      	ldr	r3, [r7, #4]
10006a4c:	2b00      	cmp	r3, #0
10006a4e:	d003      	beq.n	10006a58 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
10006a50:	f643 2398 	movw	r3, #15000	@ 0x3a98
10006a54:	627b      	str	r3, [r7, #36]	@ 0x24
10006a56:	e001      	b.n	10006a5c <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
10006a58:	2300      	movs	r3, #0
10006a5a:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
10006a5c:	68fb      	ldr	r3, [r7, #12]
10006a5e:	3358      	adds	r3, #88	@ 0x58
10006a60:	4618      	mov	r0, r3
10006a62:	f7ff fe59 	bl	10006718 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
10006a66:	f107 0316 	add.w	r3, r7, #22
10006a6a:	461a      	mov	r2, r3
10006a6c:	68b9      	ldr	r1, [r7, #8]
10006a6e:	6a38      	ldr	r0, [r7, #32]
10006a70:	f7ff ff44 	bl	100068fc <rpmsg_virtio_get_tx_buffer>
10006a74:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
10006a76:	68fb      	ldr	r3, [r7, #12]
10006a78:	3358      	adds	r3, #88	@ 0x58
10006a7a:	4618      	mov	r0, r3
10006a7c:	f7ff fe57 	bl	1000672e <metal_mutex_release>
		if (rp_hdr || !tick_count)
10006a80:	69bb      	ldr	r3, [r7, #24]
10006a82:	2b00      	cmp	r3, #0
10006a84:	d10a      	bne.n	10006a9c <rpmsg_virtio_get_tx_payload_buffer+0x7a>
10006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006a88:	2b00      	cmp	r3, #0
10006a8a:	d007      	beq.n	10006a9c <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
10006a8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10006a90:	f7ff fda7 	bl	100065e2 <metal_sleep_usec>
		tick_count--;
10006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006a96:	3b01      	subs	r3, #1
10006a98:	627b      	str	r3, [r7, #36]	@ 0x24
		metal_mutex_acquire(&rdev->lock);
10006a9a:	e7df      	b.n	10006a5c <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
10006a9c:	69bb      	ldr	r3, [r7, #24]
10006a9e:	2b00      	cmp	r3, #0
10006aa0:	d101      	bne.n	10006aa6 <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
10006aa2:	2300      	movs	r3, #0
10006aa4:	e00b      	b.n	10006abe <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
10006aa6:	8afb      	ldrh	r3, [r7, #22]
10006aa8:	461a      	mov	r2, r3
10006aaa:	69bb      	ldr	r3, [r7, #24]
10006aac:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
10006aae:	68bb      	ldr	r3, [r7, #8]
10006ab0:	681b      	ldr	r3, [r3, #0]
10006ab2:	f1a3 0210 	sub.w	r2, r3, #16
10006ab6:	68bb      	ldr	r3, [r7, #8]
10006ab8:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
10006aba:	69bb      	ldr	r3, [r7, #24]
10006abc:	3310      	adds	r3, #16
}
10006abe:	4618      	mov	r0, r3
10006ac0:	3728      	adds	r7, #40	@ 0x28
10006ac2:	46bd      	mov	sp, r7
10006ac4:	bd80      	pop	{r7, pc}
	...

10006ac8 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
10006ac8:	b580      	push	{r7, lr}
10006aca:	b08e      	sub	sp, #56	@ 0x38
10006acc:	af00      	add	r7, sp, #0
10006ace:	60f8      	str	r0, [r7, #12]
10006ad0:	60b9      	str	r1, [r7, #8]
10006ad2:	607a      	str	r2, [r7, #4]
10006ad4:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10006ad6:	68fb      	ldr	r3, [r7, #12]
10006ad8:	637b      	str	r3, [r7, #52]	@ 0x34

	hdr = RPMSG_LOCATE_HDR(data);
10006ada:	683b      	ldr	r3, [r7, #0]
10006adc:	3b10      	subs	r3, #16
10006ade:	633b      	str	r3, [r7, #48]	@ 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
10006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006ae2:	689b      	ldr	r3, [r3, #8]
10006ae4:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
10006ae6:	687b      	ldr	r3, [r7, #4]
10006ae8:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
10006aea:	68bb      	ldr	r3, [r7, #8]
10006aec:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
10006aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10006af0:	b29b      	uxth	r3, r3
10006af2:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
10006af4:	2300      	movs	r3, #0
10006af6:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
10006af8:	2300      	movs	r3, #0
10006afa:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
10006afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006b02:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
10006b04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10006b06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10006b08:	f7ff fd87 	bl	1000661a <metal_io_virt_to_offset>
10006b0c:	4601      	mov	r1, r0
10006b0e:	f107 0210 	add.w	r2, r7, #16
10006b12:	2310      	movs	r3, #16
10006b14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10006b16:	f7fe feb3 	bl	10005880 <metal_io_block_write>
10006b1a:	6278      	str	r0, [r7, #36]	@ 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
10006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006b1e:	2b10      	cmp	r3, #16
10006b20:	d006      	beq.n	10006b30 <rpmsg_virtio_send_offchannel_nocopy+0x68>
10006b22:	4b1b      	ldr	r3, [pc, #108]	@ (10006b90 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
10006b24:	4a1b      	ldr	r2, [pc, #108]	@ (10006b94 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10006b26:	f240 117d 	movw	r1, #381	@ 0x17d
10006b2a:	481b      	ldr	r0, [pc, #108]	@ (10006b98 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10006b2c:	f001 f832 	bl	10007b94 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
10006b30:	68fb      	ldr	r3, [r7, #12]
10006b32:	3358      	adds	r3, #88	@ 0x58
10006b34:	4618      	mov	r0, r3
10006b36:	f7ff fdef 	bl	10006718 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
10006b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006b40:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
10006b42:	4611      	mov	r1, r2
10006b44:	4618      	mov	r0, r3
10006b46:	f000 fc7b 	bl	10007440 <virtqueue_get_buffer_length>
10006b4a:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
10006b4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
10006b4e:	6a3a      	ldr	r2, [r7, #32]
10006b50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10006b52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10006b54:	f7ff feb5 	bl	100068c2 <rpmsg_virtio_enqueue_buffer>
10006b58:	6278      	str	r0, [r7, #36]	@ 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
10006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006b5c:	2b00      	cmp	r3, #0
10006b5e:	d006      	beq.n	10006b6e <rpmsg_virtio_send_offchannel_nocopy+0xa6>
10006b60:	4b0e      	ldr	r3, [pc, #56]	@ (10006b9c <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
10006b62:	4a0c      	ldr	r2, [pc, #48]	@ (10006b94 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10006b64:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
10006b68:	480b      	ldr	r0, [pc, #44]	@ (10006b98 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10006b6a:	f001 f813 	bl	10007b94 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
10006b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006b74:	4618      	mov	r0, r3
10006b76:	f000 fd37 	bl	100075e8 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
10006b7a:	68fb      	ldr	r3, [r7, #12]
10006b7c:	3358      	adds	r3, #88	@ 0x58
10006b7e:	4618      	mov	r0, r3
10006b80:	f7ff fdd5 	bl	1000672e <metal_mutex_release>

	return len;
10006b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
10006b86:	4618      	mov	r0, r3
10006b88:	3738      	adds	r7, #56	@ 0x38
10006b8a:	46bd      	mov	sp, r7
10006b8c:	bd80      	pop	{r7, pc}
10006b8e:	bf00      	nop
10006b90:	10009174 	.word	0x10009174
10006b94:	100092c8 	.word	0x100092c8
10006b98:	10009190 	.word	0x10009190
10006b9c:	10009210 	.word	0x10009210

10006ba0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
10006ba0:	b580      	push	{r7, lr}
10006ba2:	b08c      	sub	sp, #48	@ 0x30
10006ba4:	af02      	add	r7, sp, #8
10006ba6:	60f8      	str	r0, [r7, #12]
10006ba8:	60b9      	str	r1, [r7, #8]
10006baa:	607a      	str	r2, [r7, #4]
10006bac:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10006bae:	68fb      	ldr	r3, [r7, #12]
10006bb0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
10006bb2:	f107 0314 	add.w	r3, r7, #20
10006bb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10006bb8:	4619      	mov	r1, r3
10006bba:	68f8      	ldr	r0, [r7, #12]
10006bbc:	f7ff ff31 	bl	10006a22 <rpmsg_virtio_get_tx_payload_buffer>
10006bc0:	6238      	str	r0, [r7, #32]
	if (!buffer)
10006bc2:	6a3b      	ldr	r3, [r7, #32]
10006bc4:	2b00      	cmp	r3, #0
10006bc6:	d101      	bne.n	10006bcc <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
10006bc8:	4b17      	ldr	r3, [pc, #92]	@ (10006c28 <rpmsg_virtio_send_offchannel_raw+0x88>)
10006bca:	e029      	b.n	10006c20 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
10006bcc:	697b      	ldr	r3, [r7, #20]
10006bce:	461a      	mov	r2, r3
10006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006bd2:	4293      	cmp	r3, r2
10006bd4:	dd01      	ble.n	10006bda <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
10006bd6:	697b      	ldr	r3, [r7, #20]
10006bd8:	633b      	str	r3, [r7, #48]	@ 0x30
	io = rvdev->shbuf_io;
10006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006be0:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
10006be2:	6a39      	ldr	r1, [r7, #32]
10006be4:	69f8      	ldr	r0, [r7, #28]
10006be6:	f7ff fd18 	bl	1000661a <metal_io_virt_to_offset>
10006bea:	4601      	mov	r1, r0
10006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006bee:	683a      	ldr	r2, [r7, #0]
10006bf0:	69f8      	ldr	r0, [r7, #28]
10006bf2:	f7fe fe45 	bl	10005880 <metal_io_block_write>
10006bf6:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10006bf8:	69ba      	ldr	r2, [r7, #24]
10006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006bfc:	429a      	cmp	r2, r3
10006bfe:	d006      	beq.n	10006c0e <rpmsg_virtio_send_offchannel_raw+0x6e>
10006c00:	4b0a      	ldr	r3, [pc, #40]	@ (10006c2c <rpmsg_virtio_send_offchannel_raw+0x8c>)
10006c02:	4a0b      	ldr	r2, [pc, #44]	@ (10006c30 <rpmsg_virtio_send_offchannel_raw+0x90>)
10006c04:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
10006c08:	480a      	ldr	r0, [pc, #40]	@ (10006c34 <rpmsg_virtio_send_offchannel_raw+0x94>)
10006c0a:	f000 ffc3 	bl	10007b94 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
10006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006c10:	9300      	str	r3, [sp, #0]
10006c12:	6a3b      	ldr	r3, [r7, #32]
10006c14:	687a      	ldr	r2, [r7, #4]
10006c16:	68b9      	ldr	r1, [r7, #8]
10006c18:	68f8      	ldr	r0, [r7, #12]
10006c1a:	f7ff ff55 	bl	10006ac8 <rpmsg_virtio_send_offchannel_nocopy>
10006c1e:	4603      	mov	r3, r0
}
10006c20:	4618      	mov	r0, r3
10006c22:	3728      	adds	r7, #40	@ 0x28
10006c24:	46bd      	mov	sp, r7
10006c26:	bd80      	pop	{r7, pc}
10006c28:	fffff82e 	.word	0xfffff82e
10006c2c:	1000921c 	.word	0x1000921c
10006c30:	100092ec 	.word	0x100092ec
10006c34:	10009190 	.word	0x10009190

10006c38 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
10006c38:	b480      	push	{r7}
10006c3a:	b083      	sub	sp, #12
10006c3c:	af00      	add	r7, sp, #0
10006c3e:	6078      	str	r0, [r7, #4]
	(void)vq;
}
10006c40:	bf00      	nop
10006c42:	370c      	adds	r7, #12
10006c44:	46bd      	mov	sp, r7
10006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
10006c4a:	4770      	bx	lr

10006c4c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
10006c4c:	b590      	push	{r4, r7, lr}
10006c4e:	b08d      	sub	sp, #52	@ 0x34
10006c50:	af02      	add	r7, sp, #8
10006c52:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
10006c54:	687b      	ldr	r3, [r7, #4]
10006c56:	681b      	ldr	r3, [r3, #0]
10006c58:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
10006c5a:	6a3b      	ldr	r3, [r7, #32]
10006c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006c5e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
10006c60:	69fb      	ldr	r3, [r7, #28]
10006c62:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
10006c64:	69bb      	ldr	r3, [r7, #24]
10006c66:	3358      	adds	r3, #88	@ 0x58
10006c68:	4618      	mov	r0, r3
10006c6a:	f7ff fd55 	bl	10006718 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10006c6e:	f107 020a 	add.w	r2, r7, #10
10006c72:	f107 030c 	add.w	r3, r7, #12
10006c76:	4619      	mov	r1, r3
10006c78:	69f8      	ldr	r0, [r7, #28]
10006c7a:	f7ff fe5c 	bl	10006936 <rpmsg_virtio_get_rx_buffer>
10006c7e:	6278      	str	r0, [r7, #36]	@ 0x24

	metal_mutex_release(&rdev->lock);
10006c80:	69bb      	ldr	r3, [r7, #24]
10006c82:	3358      	adds	r3, #88	@ 0x58
10006c84:	4618      	mov	r0, r3
10006c86:	f7ff fd52 	bl	1000672e <metal_mutex_release>

	while (rp_hdr) {
10006c8a:	e062      	b.n	10006d52 <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
10006c8c:	897b      	ldrh	r3, [r7, #10]
10006c8e:	461a      	mov	r2, r3
10006c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006c92:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
10006c94:	69bb      	ldr	r3, [r7, #24]
10006c96:	3358      	adds	r3, #88	@ 0x58
10006c98:	4618      	mov	r0, r3
10006c9a:	f7ff fd3d 	bl	10006718 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
10006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006ca0:	685b      	ldr	r3, [r3, #4]
10006ca2:	4619      	mov	r1, r3
10006ca4:	69b8      	ldr	r0, [r7, #24]
10006ca6:	f7ff fdc9 	bl	1000683c <rpmsg_get_ept_from_addr>
10006caa:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
10006cac:	69bb      	ldr	r3, [r7, #24]
10006cae:	3358      	adds	r3, #88	@ 0x58
10006cb0:	4618      	mov	r0, r3
10006cb2:	f7ff fd3c 	bl	1000672e <metal_mutex_release>

		if (ept) {
10006cb6:	697b      	ldr	r3, [r7, #20]
10006cb8:	2b00      	cmp	r3, #0
10006cba:	d025      	beq.n	10006d08 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
10006cbc:	697b      	ldr	r3, [r7, #20]
10006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
10006cc4:	d103      	bne.n	10006cce <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
10006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006cc8:	681a      	ldr	r2, [r3, #0]
10006cca:	697b      	ldr	r3, [r7, #20]
10006ccc:	629a      	str	r2, [r3, #40]	@ 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10006cce:	697b      	ldr	r3, [r7, #20]
10006cd0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
10006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006cd4:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
10006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006cda:	899b      	ldrh	r3, [r3, #12]
10006cdc:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10006cde:	4618      	mov	r0, r3
10006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006ce2:	681a      	ldr	r2, [r3, #0]
10006ce4:	697b      	ldr	r3, [r7, #20]
10006ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10006ce8:	9300      	str	r3, [sp, #0]
10006cea:	4613      	mov	r3, r2
10006cec:	4602      	mov	r2, r0
10006cee:	6978      	ldr	r0, [r7, #20]
10006cf0:	47a0      	blx	r4
10006cf2:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
10006cf4:	693b      	ldr	r3, [r7, #16]
10006cf6:	2b00      	cmp	r3, #0
10006cf8:	da06      	bge.n	10006d08 <rpmsg_virtio_rx_callback+0xbc>
10006cfa:	4b1a      	ldr	r3, [pc, #104]	@ (10006d64 <rpmsg_virtio_rx_callback+0x118>)
10006cfc:	4a1a      	ldr	r2, [pc, #104]	@ (10006d68 <rpmsg_virtio_rx_callback+0x11c>)
10006cfe:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
10006d02:	481a      	ldr	r0, [pc, #104]	@ (10006d6c <rpmsg_virtio_rx_callback+0x120>)
10006d04:	f000 ff46 	bl	10007b94 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
10006d08:	69bb      	ldr	r3, [r7, #24]
10006d0a:	3358      	adds	r3, #88	@ 0x58
10006d0c:	4618      	mov	r0, r3
10006d0e:	f7ff fd03 	bl	10006718 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
10006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006d14:	689b      	ldr	r3, [r3, #8]
10006d16:	2b00      	cmp	r3, #0
10006d18:	db05      	blt.n	10006d26 <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
10006d1a:	68fa      	ldr	r2, [r7, #12]
10006d1c:	897b      	ldrh	r3, [r7, #10]
10006d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10006d20:	69f8      	ldr	r0, [r7, #28]
10006d22:	f7ff fdb5 	bl	10006890 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10006d26:	f107 020a 	add.w	r2, r7, #10
10006d2a:	f107 030c 	add.w	r3, r7, #12
10006d2e:	4619      	mov	r1, r3
10006d30:	69f8      	ldr	r0, [r7, #28]
10006d32:	f7ff fe00 	bl	10006936 <rpmsg_virtio_get_rx_buffer>
10006d36:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!rp_hdr) {
10006d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006d3a:	2b00      	cmp	r3, #0
10006d3c:	d104      	bne.n	10006d48 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
10006d3e:	69fb      	ldr	r3, [r7, #28]
10006d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10006d42:	4618      	mov	r0, r3
10006d44:	f000 fc50 	bl	100075e8 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
10006d48:	69bb      	ldr	r3, [r7, #24]
10006d4a:	3358      	adds	r3, #88	@ 0x58
10006d4c:	4618      	mov	r0, r3
10006d4e:	f7ff fcee 	bl	1000672e <metal_mutex_release>
	while (rp_hdr) {
10006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006d54:	2b00      	cmp	r3, #0
10006d56:	d199      	bne.n	10006c8c <rpmsg_virtio_rx_callback+0x40>
	}
}
10006d58:	bf00      	nop
10006d5a:	bf00      	nop
10006d5c:	372c      	adds	r7, #44	@ 0x2c
10006d5e:	46bd      	mov	sp, r7
10006d60:	bd90      	pop	{r4, r7, pc}
10006d62:	bf00      	nop
10006d64:	1000922c 	.word	0x1000922c
10006d68:	10009310 	.word	0x10009310
10006d6c:	10009190 	.word	0x10009190

10006d70 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
10006d70:	b580      	push	{r7, lr}
10006d72:	b092      	sub	sp, #72	@ 0x48
10006d74:	af00      	add	r7, sp, #0
10006d76:	60f8      	str	r0, [r7, #12]
10006d78:	60b9      	str	r1, [r7, #8]
10006d7a:	607a      	str	r2, [r7, #4]
10006d7c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
10006d7e:	68fb      	ldr	r3, [r7, #12]
10006d80:	6a1b      	ldr	r3, [r3, #32]
10006d82:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
10006d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10006d86:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
10006d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10006d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10006d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
10006d90:	68bb      	ldr	r3, [r7, #8]
10006d92:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
10006d94:	687b      	ldr	r3, [r7, #4]
10006d96:	2b28      	cmp	r3, #40	@ 0x28
10006d98:	d001      	beq.n	10006d9e <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
10006d9a:	2300      	movs	r3, #0
10006d9c:	e057      	b.n	10006e4e <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
10006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
10006da0:	4619      	mov	r1, r3
10006da2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
10006da4:	f7ff fc39 	bl	1000661a <metal_io_virt_to_offset>
10006da8:	4601      	mov	r1, r0
10006daa:	f107 0210 	add.w	r2, r7, #16
10006dae:	2320      	movs	r3, #32
10006db0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
10006db2:	f7fe fcf0 	bl	10005796 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
10006db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10006db8:	6a1b      	ldr	r3, [r3, #32]
10006dba:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
10006dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10006dbe:	3358      	adds	r3, #88	@ 0x58
10006dc0:	4618      	mov	r0, r3
10006dc2:	f7ff fca9 	bl	10006718 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
10006dc6:	f107 0110 	add.w	r1, r7, #16
10006dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006dcc:	f04f 32ff 	mov.w	r2, #4294967295
10006dd0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10006dd2:	f7ff fadb 	bl	1000638c <rpmsg_get_endpoint>
10006dd6:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
10006dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10006dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006ddc:	f003 0301 	and.w	r3, r3, #1
10006de0:	2b00      	cmp	r3, #0
10006de2:	d017      	beq.n	10006e14 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
10006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006de6:	2b00      	cmp	r3, #0
10006de8:	d003      	beq.n	10006df2 <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
10006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006dec:	f04f 32ff 	mov.w	r2, #4294967295
10006df0:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
10006df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10006df4:	3358      	adds	r3, #88	@ 0x58
10006df6:	4618      	mov	r0, r3
10006df8:	f7ff fc99 	bl	1000672e <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
10006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006dfe:	2b00      	cmp	r3, #0
10006e00:	d024      	beq.n	10006e4c <rpmsg_virtio_ns_callback+0xdc>
10006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10006e06:	2b00      	cmp	r3, #0
10006e08:	d020      	beq.n	10006e4c <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
10006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10006e0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10006e10:	4798      	blx	r3
10006e12:	e01b      	b.n	10006e4c <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
10006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006e16:	2b00      	cmp	r3, #0
10006e18:	d110      	bne.n	10006e3c <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
10006e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10006e1c:	3358      	adds	r3, #88	@ 0x58
10006e1e:	4618      	mov	r0, r3
10006e20:	f7ff fc85 	bl	1000672e <metal_mutex_release>
			if (rdev->ns_bind_cb)
10006e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10006e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10006e28:	2b00      	cmp	r3, #0
10006e2a:	d00f      	beq.n	10006e4c <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
10006e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10006e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10006e30:	f107 0110 	add.w	r1, r7, #16
10006e34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10006e36:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10006e38:	4798      	blx	r3
10006e3a:	e007      	b.n	10006e4c <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
10006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10006e40:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
10006e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10006e44:	3358      	adds	r3, #88	@ 0x58
10006e46:	4618      	mov	r0, r3
10006e48:	f7ff fc71 	bl	1000672e <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
10006e4c:	2300      	movs	r3, #0
}
10006e4e:	4618      	mov	r0, r3
10006e50:	3748      	adds	r7, #72	@ 0x48
10006e52:	46bd      	mov	sp, r7
10006e54:	bd80      	pop	{r7, pc}
	...

10006e58 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
10006e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
10006e5c:	b090      	sub	sp, #64	@ 0x40
10006e5e:	af02      	add	r7, sp, #8
10006e60:	60f8      	str	r0, [r7, #12]
10006e62:	60b9      	str	r1, [r7, #8]
10006e64:	607a      	str	r2, [r7, #4]
10006e66:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
10006e68:	68fb      	ldr	r3, [r7, #12]
10006e6a:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
10006e6c:	2278      	movs	r2, #120	@ 0x78
10006e6e:	2100      	movs	r1, #0
10006e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10006e72:	f001 f8bf 	bl	10007ff4 <memset>
	metal_mutex_init(&rdev->lock);
10006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006e78:	3358      	adds	r3, #88	@ 0x58
10006e7a:	4618      	mov	r0, r3
10006e7c:	f7ff fc41 	bl	10006702 <metal_mutex_init>
	rvdev->vdev = vdev;
10006e80:	68fb      	ldr	r3, [r7, #12]
10006e82:	68ba      	ldr	r2, [r7, #8]
10006e84:	679a      	str	r2, [r3, #120]	@ 0x78
	rdev->ns_bind_cb = ns_bind_cb;
10006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006e88:	687a      	ldr	r2, [r7, #4]
10006e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
10006e8c:	68bb      	ldr	r3, [r7, #8]
10006e8e:	68fa      	ldr	r2, [r7, #12]
10006e90:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
10006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006e94:	4a4c      	ldr	r2, [pc, #304]	@ (10006fc8 <rpmsg_init_vdev+0x170>)
10006e96:	661a      	str	r2, [r3, #96]	@ 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
10006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006e9a:	4a4c      	ldr	r2, [pc, #304]	@ (10006fcc <rpmsg_init_vdev+0x174>)
10006e9c:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
10006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006ea0:	4a4b      	ldr	r2, [pc, #300]	@ (10006fd0 <rpmsg_init_vdev+0x178>)
10006ea2:	669a      	str	r2, [r3, #104]	@ 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
10006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006ea6:	4a4b      	ldr	r2, [pc, #300]	@ (10006fd4 <rpmsg_init_vdev+0x17c>)
10006ea8:	66da      	str	r2, [r3, #108]	@ 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
10006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006eac:	4a4a      	ldr	r2, [pc, #296]	@ (10006fd8 <rpmsg_init_vdev+0x180>)
10006eae:	671a      	str	r2, [r3, #112]	@ 0x70
	role = rpmsg_virtio_get_role(rvdev);
10006eb0:	68f8      	ldr	r0, [r7, #12]
10006eb2:	f7ff fc47 	bl	10006744 <rpmsg_virtio_get_role>
10006eb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10006eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006eba:	2b01      	cmp	r3, #1
10006ebc:	d102      	bne.n	10006ec4 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
10006ebe:	68f8      	ldr	r0, [r7, #12]
10006ec0:	f7ff fd55 	bl	1000696e <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
10006ec4:	68f8      	ldr	r0, [r7, #12]
10006ec6:	f7ff fc6e 	bl	100067a6 <rpmsg_virtio_get_features>
10006eca:	4603      	mov	r3, r0
10006ecc:	2200      	movs	r2, #0
10006ece:	4698      	mov	r8, r3
10006ed0:	4691      	mov	r9, r2
10006ed2:	68bb      	ldr	r3, [r7, #8]
10006ed4:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
10006ed8:	68bb      	ldr	r3, [r7, #8]
10006eda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
10006ede:	f002 0401 	and.w	r4, r2, #1
10006ee2:	2500      	movs	r5, #0
10006ee4:	ea54 0305 	orrs.w	r3, r4, r5
10006ee8:	bf14      	ite	ne
10006eea:	2301      	movne	r3, #1
10006eec:	2300      	moveq	r3, #0
10006eee:	b2da      	uxtb	r2, r3
10006ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006ef2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
10006ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006ef8:	2b01      	cmp	r3, #1
10006efa:	d113      	bne.n	10006f24 <rpmsg_init_vdev+0xcc>
		vq_names[0] = "tx_vq";
10006efc:	4b37      	ldr	r3, [pc, #220]	@ (10006fdc <rpmsg_init_vdev+0x184>)
10006efe:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
10006f00:	4b37      	ldr	r3, [pc, #220]	@ (10006fe0 <rpmsg_init_vdev+0x188>)
10006f02:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
10006f04:	4b37      	ldr	r3, [pc, #220]	@ (10006fe4 <rpmsg_init_vdev+0x18c>)
10006f06:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
10006f08:	4b37      	ldr	r3, [pc, #220]	@ (10006fe8 <rpmsg_init_vdev+0x190>)
10006f0a:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
10006f0c:	68bb      	ldr	r3, [r7, #8]
10006f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10006f10:	3318      	adds	r3, #24
10006f12:	681a      	ldr	r2, [r3, #0]
10006f14:	68fb      	ldr	r3, [r7, #12]
10006f16:	67da      	str	r2, [r3, #124]	@ 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
10006f18:	68bb      	ldr	r3, [r7, #8]
10006f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10006f1c:	681a      	ldr	r2, [r3, #0]
10006f1e:	68fb      	ldr	r3, [r7, #12]
10006f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
10006f24:	68fb      	ldr	r3, [r7, #12]
10006f26:	683a      	ldr	r2, [r7, #0]
10006f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
10006f2c:	f107 021c 	add.w	r2, r7, #28
10006f30:	f107 0314 	add.w	r3, r7, #20
10006f34:	9300      	str	r3, [sp, #0]
10006f36:	4613      	mov	r3, r2
10006f38:	2202      	movs	r2, #2
10006f3a:	2100      	movs	r1, #0
10006f3c:	68f8      	ldr	r0, [r7, #12]
10006f3e:	f7ff fc43 	bl	100067c8 <rpmsg_virtio_create_virtqueues>
10006f42:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
10006f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10006f46:	2b00      	cmp	r3, #0
10006f48:	d001      	beq.n	10006f4e <rpmsg_init_vdev+0xf6>
		return status;
10006f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10006f4c:	e037      	b.n	10006fbe <rpmsg_init_vdev+0x166>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
10006f4e:	68fb      	ldr	r3, [r7, #12]
10006f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006f54:	4618      	mov	r0, r3
10006f56:	f000 fb0f 	bl	10007578 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10006f5a:	2300      	movs	r3, #0
10006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
10006f5e:	e00f      	b.n	10006f80 <rpmsg_init_vdev+0x128>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
10006f60:	68bb      	ldr	r3, [r7, #8]
10006f62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10006f64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10006f66:	4613      	mov	r3, r2
10006f68:	005b      	lsls	r3, r3, #1
10006f6a:	4413      	add	r3, r2
10006f6c:	00db      	lsls	r3, r3, #3
10006f6e:	440b      	add	r3, r1
10006f70:	681b      	ldr	r3, [r3, #0]
10006f72:	627b      	str	r3, [r7, #36]	@ 0x24
		vq->shm_io = shm_io;
10006f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10006f76:	683a      	ldr	r2, [r7, #0]
10006f78:	629a      	str	r2, [r3, #40]	@ 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10006f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006f7c:	3301      	adds	r3, #1
10006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
10006f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006f82:	2b01      	cmp	r3, #1
10006f84:	d9ec      	bls.n	10006f60 <rpmsg_init_vdev+0x108>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
10006f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006f88:	4618      	mov	r0, r3
10006f8a:	f7ff fb36 	bl	100065fa <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
10006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006f90:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
10006f94:	2b00      	cmp	r3, #0
10006f96:	d011      	beq.n	10006fbc <rpmsg_init_vdev+0x164>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
10006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006f9a:	f103 0008 	add.w	r0, r3, #8
10006f9e:	2300      	movs	r3, #0
10006fa0:	9301      	str	r3, [sp, #4]
10006fa2:	4b12      	ldr	r3, [pc, #72]	@ (10006fec <rpmsg_init_vdev+0x194>)
10006fa4:	9300      	str	r3, [sp, #0]
10006fa6:	2335      	movs	r3, #53	@ 0x35
10006fa8:	2235      	movs	r2, #53	@ 0x35
10006faa:	4911      	ldr	r1, [pc, #68]	@ (10006ff0 <rpmsg_init_vdev+0x198>)
10006fac:	f7ff fc22 	bl	100067f4 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
10006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10006fb2:	3308      	adds	r3, #8
10006fb4:	4619      	mov	r1, r3
10006fb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10006fb8:	f7ff fa73 	bl	100064a2 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
10006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
10006fbe:	4618      	mov	r0, r3
10006fc0:	3738      	adds	r7, #56	@ 0x38
10006fc2:	46bd      	mov	sp, r7
10006fc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
10006fc8:	10006ba1 	.word	0x10006ba1
10006fcc:	100069a9 	.word	0x100069a9
10006fd0:	100069d1 	.word	0x100069d1
10006fd4:	10006a23 	.word	0x10006a23
10006fd8:	10006ac9 	.word	0x10006ac9
10006fdc:	10009238 	.word	0x10009238
10006fe0:	10009240 	.word	0x10009240
10006fe4:	10006c39 	.word	0x10006c39
10006fe8:	10006c4d 	.word	0x10006c4d
10006fec:	10006d71 	.word	0x10006d71
10006ff0:	10009248 	.word	0x10009248

10006ff4 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
10006ff4:	b480      	push	{r7}
10006ff6:	b083      	sub	sp, #12
10006ff8:	af00      	add	r7, sp, #0
10006ffa:	6078      	str	r0, [r7, #4]
10006ffc:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10006ffe:	bf00      	nop
10007000:	370c      	adds	r7, #12
10007002:	46bd      	mov	sp, r7
10007004:	f85d 7b04 	ldr.w	r7, [sp], #4
10007008:	4770      	bx	lr

1000700a <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000700a:	b480      	push	{r7}
1000700c:	b083      	sub	sp, #12
1000700e:	af00      	add	r7, sp, #0
10007010:	6078      	str	r0, [r7, #4]
10007012:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10007014:	bf00      	nop
10007016:	370c      	adds	r7, #12
10007018:	46bd      	mov	sp, r7
1000701a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000701e:	4770      	bx	lr

10007020 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
10007020:	b480      	push	{r7}
10007022:	b085      	sub	sp, #20
10007024:	af00      	add	r7, sp, #0
10007026:	60f8      	str	r0, [r7, #12]
10007028:	60b9      	str	r1, [r7, #8]
1000702a:	607a      	str	r2, [r7, #4]
1000702c:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000702e:	68fb      	ldr	r3, [r7, #12]
}
10007030:	4618      	mov	r0, r3
10007032:	3714      	adds	r7, #20
10007034:	46bd      	mov	sp, r7
10007036:	f85d 7b04 	ldr.w	r7, [sp], #4
1000703a:	4770      	bx	lr

1000703c <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
1000703c:	b580      	push	{r7, lr}
1000703e:	b086      	sub	sp, #24
10007040:	af02      	add	r7, sp, #8
10007042:	60f8      	str	r0, [r7, #12]
10007044:	60b9      	str	r1, [r7, #8]
10007046:	607a      	str	r2, [r7, #4]
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
10007048:	68fb      	ldr	r3, [r7, #12]
1000704a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1000704c:	68fb      	ldr	r3, [r7, #12]
1000704e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10007050:	2301      	movs	r3, #1
10007052:	9301      	str	r3, [sp, #4]
10007054:	687b      	ldr	r3, [r7, #4]
10007056:	9300      	str	r3, [sp, #0]
10007058:	68bb      	ldr	r3, [r7, #8]
1000705a:	68f8      	ldr	r0, [r7, #12]
1000705c:	f7ff f93c 	bl	100062d8 <rpmsg_send_offchannel_raw>
10007060:	4603      	mov	r3, r0
					 len, true);
}
10007062:	4618      	mov	r0, r3
10007064:	3710      	adds	r7, #16
10007066:	46bd      	mov	sp, r7
10007068:	bd80      	pop	{r7, pc}

1000706a <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
1000706a:	b580      	push	{r7, lr}
1000706c:	b086      	sub	sp, #24
1000706e:	af00      	add	r7, sp, #0
10007070:	60f8      	str	r0, [r7, #12]
10007072:	60b9      	str	r1, [r7, #8]
10007074:	607a      	str	r2, [r7, #4]
10007076:	603b      	str	r3, [r7, #0]
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
10007078:	68fb      	ldr	r3, [r7, #12]
1000707a:	617b      	str	r3, [r7, #20]
  (void)src;

  huart->pRxBuffPtr = data;
1000707c:	697b      	ldr	r3, [r7, #20]
1000707e:	68ba      	ldr	r2, [r7, #8]
10007080:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxXferSize = len;
10007082:	687b      	ldr	r3, [r7, #4]
10007084:	b29a      	uxth	r2, r3
10007086:	697b      	ldr	r3, [r7, #20]
10007088:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  if (huart->RxCpltCallback != NULL) {
1000708c:	697b      	ldr	r3, [r7, #20]
1000708e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10007090:	2b00      	cmp	r3, #0
10007092:	d003      	beq.n	1000709c <VIRT_UART_read_cb+0x32>
    huart->RxCpltCallback(huart);
10007094:	697b      	ldr	r3, [r7, #20]
10007096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10007098:	6978      	ldr	r0, [r7, #20]
1000709a:	4798      	blx	r3
  }

  return 0;
1000709c:	2300      	movs	r3, #0
}
1000709e:	4618      	mov	r0, r3
100070a0:	3718      	adds	r7, #24
100070a2:	46bd      	mov	sp, r7
100070a4:	bd80      	pop	{r7, pc}
	...

100070a8 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
100070a8:	b580      	push	{r7, lr}
100070aa:	b086      	sub	sp, #24
100070ac:	af02      	add	r7, sp, #8
100070ae:	6078      	str	r0, [r7, #4]

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
100070b0:	6878      	ldr	r0, [r7, #4]
100070b2:	2300      	movs	r3, #0
100070b4:	9300      	str	r3, [sp, #0]
100070b6:	4b08      	ldr	r3, [pc, #32]	@ (100070d8 <VIRT_UART_Init+0x30>)
100070b8:	f04f 32ff 	mov.w	r2, #4294967295
100070bc:	4907      	ldr	r1, [pc, #28]	@ (100070dc <VIRT_UART_Init+0x34>)
100070be:	f000 fd2b 	bl	10007b18 <OPENAMP_create_endpoint>
100070c2:	60f8      	str	r0, [r7, #12]
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
100070c4:	68fb      	ldr	r3, [r7, #12]
100070c6:	2b00      	cmp	r3, #0
100070c8:	da01      	bge.n	100070ce <VIRT_UART_Init+0x26>
    return VIRT_UART_ERROR;
100070ca:	2301      	movs	r3, #1
100070cc:	e000      	b.n	100070d0 <VIRT_UART_Init+0x28>
  }

  return VIRT_UART_OK;
100070ce:	2300      	movs	r3, #0
}
100070d0:	4618      	mov	r0, r3
100070d2:	3710      	adds	r7, #16
100070d4:	46bd      	mov	sp, r7
100070d6:	bd80      	pop	{r7, pc}
100070d8:	1000706b 	.word	0x1000706b
100070dc:	1000924c 	.word	0x1000924c

100070e0 <VIRT_UART_RegisterCallback>:
}

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
100070e0:	b480      	push	{r7}
100070e2:	b087      	sub	sp, #28
100070e4:	af00      	add	r7, sp, #0
100070e6:	60f8      	str	r0, [r7, #12]
100070e8:	460b      	mov	r3, r1
100070ea:	607a      	str	r2, [r7, #4]
100070ec:	72fb      	strb	r3, [r7, #11]
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;
100070ee:	2300      	movs	r3, #0
100070f0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
100070f2:	7afb      	ldrb	r3, [r7, #11]
100070f4:	2b00      	cmp	r3, #0
100070f6:	d103      	bne.n	10007100 <VIRT_UART_RegisterCallback+0x20>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
100070f8:	68fb      	ldr	r3, [r7, #12]
100070fa:	687a      	ldr	r2, [r7, #4]
100070fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    break;
100070fe:	e002      	b.n	10007106 <VIRT_UART_RegisterCallback+0x26>

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
10007100:	2301      	movs	r3, #1
10007102:	75fb      	strb	r3, [r7, #23]
    break;
10007104:	bf00      	nop
  }
  return status;
10007106:	7dfb      	ldrb	r3, [r7, #23]
}
10007108:	4618      	mov	r0, r3
1000710a:	371c      	adds	r7, #28
1000710c:	46bd      	mov	sp, r7
1000710e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007112:	4770      	bx	lr

10007114 <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
10007114:	b580      	push	{r7, lr}
10007116:	b086      	sub	sp, #24
10007118:	af00      	add	r7, sp, #0
1000711a:	60f8      	str	r0, [r7, #12]
1000711c:	60b9      	str	r1, [r7, #8]
1000711e:	4613      	mov	r3, r2
10007120:	80fb      	strh	r3, [r7, #6]
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
10007122:	88fb      	ldrh	r3, [r7, #6]
10007124:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
10007128:	d901      	bls.n	1000712e <VIRT_UART_Transmit+0x1a>
	  return VIRT_UART_ERROR;
1000712a:	2301      	movs	r3, #1
1000712c:	e00c      	b.n	10007148 <VIRT_UART_Transmit+0x34>

	res = OPENAMP_send(&huart->ept, pData, Size);
1000712e:	68fb      	ldr	r3, [r7, #12]
10007130:	88fa      	ldrh	r2, [r7, #6]
10007132:	68b9      	ldr	r1, [r7, #8]
10007134:	4618      	mov	r0, r3
10007136:	f7ff ff81 	bl	1000703c <rpmsg_send>
1000713a:	6178      	str	r0, [r7, #20]
	if (res <0) {
1000713c:	697b      	ldr	r3, [r7, #20]
1000713e:	2b00      	cmp	r3, #0
10007140:	da01      	bge.n	10007146 <VIRT_UART_Transmit+0x32>
		return VIRT_UART_ERROR;
10007142:	2301      	movs	r3, #1
10007144:	e000      	b.n	10007148 <VIRT_UART_Transmit+0x34>
	}

	return VIRT_UART_OK;
10007146:	2300      	movs	r3, #0
}
10007148:	4618      	mov	r0, r3
1000714a:	3718      	adds	r7, #24
1000714c:	46bd      	mov	sp, r7
1000714e:	bd80      	pop	{r7, pc}

10007150 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
10007150:	b590      	push	{r4, r7, lr}
10007152:	b08f      	sub	sp, #60	@ 0x3c
10007154:	af04      	add	r7, sp, #16
10007156:	60f8      	str	r0, [r7, #12]
10007158:	60b9      	str	r1, [r7, #8]
1000715a:	607a      	str	r2, [r7, #4]
1000715c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
1000715e:	68fb      	ldr	r3, [r7, #12]
10007160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007162:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
10007164:	687a      	ldr	r2, [r7, #4]
10007166:	6a3b      	ldr	r3, [r7, #32]
10007168:	429a      	cmp	r2, r3
1000716a:	d901      	bls.n	10007170 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
1000716c:	4b1e      	ldr	r3, [pc, #120]	@ (100071e8 <virtio_create_virtqueues+0x98>)
1000716e:	e036      	b.n	100071de <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
10007170:	2300      	movs	r3, #0
10007172:	627b      	str	r3, [r7, #36]	@ 0x24
10007174:	e02e      	b.n	100071d4 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
10007176:	68fb      	ldr	r3, [r7, #12]
10007178:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000717a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000717c:	4613      	mov	r3, r2
1000717e:	005b      	lsls	r3, r3, #1
10007180:	4413      	add	r3, r2
10007182:	00db      	lsls	r3, r3, #3
10007184:	440b      	add	r3, r1
10007186:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
10007188:	69fb      	ldr	r3, [r7, #28]
1000718a:	3304      	adds	r3, #4
1000718c:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007190:	b298      	uxth	r0, r3
10007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007194:	009b      	lsls	r3, r3, #2
10007196:	683a      	ldr	r2, [r7, #0]
10007198:	4413      	add	r3, r2
1000719a:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000719e:	009b      	lsls	r3, r3, #2
100071a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
100071a2:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100071a4:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
100071a6:	68fa      	ldr	r2, [r7, #12]
100071a8:	6a12      	ldr	r2, [r2, #32]
100071aa:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
100071ac:	69f9      	ldr	r1, [r7, #28]
100071ae:	6809      	ldr	r1, [r1, #0]
100071b0:	9102      	str	r1, [sp, #8]
100071b2:	9201      	str	r2, [sp, #4]
100071b4:	9300      	str	r3, [sp, #0]
100071b6:	69bb      	ldr	r3, [r7, #24]
100071b8:	4622      	mov	r2, r4
100071ba:	4601      	mov	r1, r0
100071bc:	68f8      	ldr	r0, [r7, #12]
100071be:	f000 f90e 	bl	100073de <virtqueue_create>
100071c2:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
100071c4:	697b      	ldr	r3, [r7, #20]
100071c6:	2b00      	cmp	r3, #0
100071c8:	d001      	beq.n	100071ce <virtio_create_virtqueues+0x7e>
			return ret;
100071ca:	697b      	ldr	r3, [r7, #20]
100071cc:	e007      	b.n	100071de <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
100071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100071d0:	3301      	adds	r3, #1
100071d2:	627b      	str	r3, [r7, #36]	@ 0x24
100071d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100071d6:	687b      	ldr	r3, [r7, #4]
100071d8:	429a      	cmp	r2, r3
100071da:	d3cc      	bcc.n	10007176 <virtio_create_virtqueues+0x26>
	}
	return 0;
100071dc:	2300      	movs	r3, #0
}
100071de:	4618      	mov	r0, r3
100071e0:	372c      	adds	r7, #44	@ 0x2c
100071e2:	46bd      	mov	sp, r7
100071e4:	bd90      	pop	{r4, r7, pc}
100071e6:	bf00      	nop
100071e8:	fffff440 	.word	0xfffff440

100071ec <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
100071ec:	b480      	push	{r7}
100071ee:	b085      	sub	sp, #20
100071f0:	af00      	add	r7, sp, #0
100071f2:	60f8      	str	r0, [r7, #12]
100071f4:	60b9      	str	r1, [r7, #8]
100071f6:	607a      	str	r2, [r7, #4]
100071f8:	603b      	str	r3, [r7, #0]
	vr->num = num;
100071fa:	68fb      	ldr	r3, [r7, #12]
100071fc:	68ba      	ldr	r2, [r7, #8]
100071fe:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
10007200:	68fb      	ldr	r3, [r7, #12]
10007202:	687a      	ldr	r2, [r7, #4]
10007204:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
10007206:	68bb      	ldr	r3, [r7, #8]
10007208:	011b      	lsls	r3, r3, #4
1000720a:	687a      	ldr	r2, [r7, #4]
1000720c:	441a      	add	r2, r3
1000720e:	68fb      	ldr	r3, [r7, #12]
10007210:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
10007212:	68fb      	ldr	r3, [r7, #12]
10007214:	689a      	ldr	r2, [r3, #8]
10007216:	68bb      	ldr	r3, [r7, #8]
10007218:	005b      	lsls	r3, r3, #1
1000721a:	4413      	add	r3, r2
1000721c:	3304      	adds	r3, #4
1000721e:	461a      	mov	r2, r3
10007220:	683b      	ldr	r3, [r7, #0]
10007222:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
10007224:	1c5a      	adds	r2, r3, #1
10007226:	683b      	ldr	r3, [r7, #0]
10007228:	425b      	negs	r3, r3
1000722a:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
1000722c:	461a      	mov	r2, r3
1000722e:	68fb      	ldr	r3, [r7, #12]
10007230:	60da      	str	r2, [r3, #12]
}
10007232:	bf00      	nop
10007234:	3714      	adds	r7, #20
10007236:	46bd      	mov	sp, r7
10007238:	f85d 7b04 	ldr.w	r7, [sp], #4
1000723c:	4770      	bx	lr

1000723e <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
1000723e:	b480      	push	{r7}
10007240:	b083      	sub	sp, #12
10007242:	af00      	add	r7, sp, #0
10007244:	4603      	mov	r3, r0
10007246:	80fb      	strh	r3, [r7, #6]
10007248:	460b      	mov	r3, r1
1000724a:	80bb      	strh	r3, [r7, #4]
1000724c:	4613      	mov	r3, r2
1000724e:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
10007250:	88ba      	ldrh	r2, [r7, #4]
10007252:	88fb      	ldrh	r3, [r7, #6]
10007254:	1ad3      	subs	r3, r2, r3
10007256:	b29b      	uxth	r3, r3
10007258:	3b01      	subs	r3, #1
1000725a:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
1000725c:	88b9      	ldrh	r1, [r7, #4]
1000725e:	887b      	ldrh	r3, [r7, #2]
10007260:	1acb      	subs	r3, r1, r3
10007262:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
10007264:	429a      	cmp	r2, r3
10007266:	bf34      	ite	cc
10007268:	2301      	movcc	r3, #1
1000726a:	2300      	movcs	r3, #0
1000726c:	b2db      	uxtb	r3, r3
}
1000726e:	4618      	mov	r0, r3
10007270:	370c      	adds	r7, #12
10007272:	46bd      	mov	sp, r7
10007274:	f85d 7b04 	ldr.w	r7, [sp], #4
10007278:	4770      	bx	lr

1000727a <metal_io_virt>:
{
1000727a:	b480      	push	{r7}
1000727c:	b083      	sub	sp, #12
1000727e:	af00      	add	r7, sp, #0
10007280:	6078      	str	r0, [r7, #4]
10007282:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10007284:	687b      	ldr	r3, [r7, #4]
10007286:	681b      	ldr	r3, [r3, #0]
		: NULL);
10007288:	f1b3 3fff 	cmp.w	r3, #4294967295
1000728c:	d00a      	beq.n	100072a4 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000728e:	687b      	ldr	r3, [r7, #4]
10007290:	689b      	ldr	r3, [r3, #8]
10007292:	683a      	ldr	r2, [r7, #0]
10007294:	429a      	cmp	r2, r3
10007296:	d205      	bcs.n	100072a4 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10007298:	687b      	ldr	r3, [r7, #4]
1000729a:	681b      	ldr	r3, [r3, #0]
1000729c:	461a      	mov	r2, r3
1000729e:	683b      	ldr	r3, [r7, #0]
100072a0:	4413      	add	r3, r2
		: NULL);
100072a2:	e000      	b.n	100072a6 <metal_io_virt+0x2c>
100072a4:	2300      	movs	r3, #0
}
100072a6:	4618      	mov	r0, r3
100072a8:	370c      	adds	r7, #12
100072aa:	46bd      	mov	sp, r7
100072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
100072b0:	4770      	bx	lr

100072b2 <metal_io_phys>:
{
100072b2:	b580      	push	{r7, lr}
100072b4:	b084      	sub	sp, #16
100072b6:	af00      	add	r7, sp, #0
100072b8:	6078      	str	r0, [r7, #4]
100072ba:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
100072bc:	687b      	ldr	r3, [r7, #4]
100072be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100072c0:	2b00      	cmp	r3, #0
100072c2:	d123      	bne.n	1000730c <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
100072c4:	687b      	ldr	r3, [r7, #4]
100072c6:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
100072c8:	2b1f      	cmp	r3, #31
100072ca:	d805      	bhi.n	100072d8 <metal_io_phys+0x26>
100072cc:	687b      	ldr	r3, [r7, #4]
100072ce:	68db      	ldr	r3, [r3, #12]
100072d0:	683a      	ldr	r2, [r7, #0]
100072d2:	fa22 f303 	lsr.w	r3, r2, r3
100072d6:	e000      	b.n	100072da <metal_io_phys+0x28>
100072d8:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
100072da:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
100072dc:	687b      	ldr	r3, [r7, #4]
100072de:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
100072e0:	2b00      	cmp	r3, #0
100072e2:	d010      	beq.n	10007306 <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
100072e4:	687b      	ldr	r3, [r7, #4]
100072e6:	689b      	ldr	r3, [r3, #8]
100072e8:	683a      	ldr	r2, [r7, #0]
100072ea:	429a      	cmp	r2, r3
100072ec:	d20b      	bcs.n	10007306 <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
100072ee:	687b      	ldr	r3, [r7, #4]
100072f0:	685a      	ldr	r2, [r3, #4]
100072f2:	68fb      	ldr	r3, [r7, #12]
100072f4:	009b      	lsls	r3, r3, #2
100072f6:	4413      	add	r3, r2
100072f8:	681a      	ldr	r2, [r3, #0]
100072fa:	687b      	ldr	r3, [r7, #4]
100072fc:	6919      	ldr	r1, [r3, #16]
100072fe:	683b      	ldr	r3, [r7, #0]
10007300:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
10007302:	4413      	add	r3, r2
10007304:	e008      	b.n	10007318 <metal_io_phys+0x66>
10007306:	f04f 33ff 	mov.w	r3, #4294967295
1000730a:	e005      	b.n	10007318 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
1000730c:	687b      	ldr	r3, [r7, #4]
1000730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10007310:	6839      	ldr	r1, [r7, #0]
10007312:	6878      	ldr	r0, [r7, #4]
10007314:	4798      	blx	r3
10007316:	4603      	mov	r3, r0
}
10007318:	4618      	mov	r0, r3
1000731a:	3710      	adds	r7, #16
1000731c:	46bd      	mov	sp, r7
1000731e:	bd80      	pop	{r7, pc}

10007320 <metal_io_phys_to_offset>:
{
10007320:	b580      	push	{r7, lr}
10007322:	b084      	sub	sp, #16
10007324:	af00      	add	r7, sp, #0
10007326:	6078      	str	r0, [r7, #4]
10007328:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
1000732a:	687b      	ldr	r3, [r7, #4]
1000732c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000732e:	2b00      	cmp	r3, #0
10007330:	d127      	bne.n	10007382 <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
10007332:	687b      	ldr	r3, [r7, #4]
10007334:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
10007336:	f1b3 3fff 	cmp.w	r3, #4294967295
1000733a:	d105      	bne.n	10007348 <metal_io_phys_to_offset+0x28>
1000733c:	687b      	ldr	r3, [r7, #4]
1000733e:	685b      	ldr	r3, [r3, #4]
10007340:	681b      	ldr	r3, [r3, #0]
10007342:	683a      	ldr	r2, [r7, #0]
10007344:	1ad3      	subs	r3, r2, r3
10007346:	e003      	b.n	10007350 <metal_io_phys_to_offset+0x30>
10007348:	687b      	ldr	r3, [r7, #4]
1000734a:	691a      	ldr	r2, [r3, #16]
1000734c:	683b      	ldr	r3, [r7, #0]
1000734e:	4013      	ands	r3, r2
		unsigned long offset =
10007350:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
10007352:	68f9      	ldr	r1, [r7, #12]
10007354:	6878      	ldr	r0, [r7, #4]
10007356:	f7ff ffac 	bl	100072b2 <metal_io_phys>
1000735a:	4602      	mov	r2, r0
1000735c:	683b      	ldr	r3, [r7, #0]
1000735e:	4293      	cmp	r3, r2
10007360:	d101      	bne.n	10007366 <metal_io_phys_to_offset+0x46>
				return offset;
10007362:	68fb      	ldr	r3, [r7, #12]
10007364:	e013      	b.n	1000738e <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
10007366:	687b      	ldr	r3, [r7, #4]
10007368:	691a      	ldr	r2, [r3, #16]
1000736a:	68fb      	ldr	r3, [r7, #12]
1000736c:	4413      	add	r3, r2
1000736e:	3301      	adds	r3, #1
10007370:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
10007372:	687b      	ldr	r3, [r7, #4]
10007374:	689b      	ldr	r3, [r3, #8]
10007376:	68fa      	ldr	r2, [r7, #12]
10007378:	429a      	cmp	r2, r3
1000737a:	d3ea      	bcc.n	10007352 <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
1000737c:	f04f 33ff 	mov.w	r3, #4294967295
10007380:	e005      	b.n	1000738e <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
10007382:	687b      	ldr	r3, [r7, #4]
10007384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10007386:	6839      	ldr	r1, [r7, #0]
10007388:	6878      	ldr	r0, [r7, #4]
1000738a:	4798      	blx	r3
1000738c:	4603      	mov	r3, r0
}
1000738e:	4618      	mov	r0, r3
10007390:	3710      	adds	r7, #16
10007392:	46bd      	mov	sp, r7
10007394:	bd80      	pop	{r7, pc}

10007396 <metal_io_phys_to_virt>:
{
10007396:	b580      	push	{r7, lr}
10007398:	b082      	sub	sp, #8
1000739a:	af00      	add	r7, sp, #0
1000739c:	6078      	str	r0, [r7, #4]
1000739e:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
100073a0:	6839      	ldr	r1, [r7, #0]
100073a2:	6878      	ldr	r0, [r7, #4]
100073a4:	f7ff ffbc 	bl	10007320 <metal_io_phys_to_offset>
100073a8:	4603      	mov	r3, r0
100073aa:	4619      	mov	r1, r3
100073ac:	6878      	ldr	r0, [r7, #4]
100073ae:	f7ff ff64 	bl	1000727a <metal_io_virt>
100073b2:	4603      	mov	r3, r0
}
100073b4:	4618      	mov	r0, r3
100073b6:	3708      	adds	r7, #8
100073b8:	46bd      	mov	sp, r7
100073ba:	bd80      	pop	{r7, pc}

100073bc <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
100073bc:	b580      	push	{r7, lr}
100073be:	b084      	sub	sp, #16
100073c0:	af00      	add	r7, sp, #0
100073c2:	6078      	str	r0, [r7, #4]
100073c4:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
100073c6:	687b      	ldr	r3, [r7, #4]
100073c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100073ca:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
100073cc:	6839      	ldr	r1, [r7, #0]
100073ce:	68f8      	ldr	r0, [r7, #12]
100073d0:	f7ff ffe1 	bl	10007396 <metal_io_phys_to_virt>
100073d4:	4603      	mov	r3, r0
}
100073d6:	4618      	mov	r0, r3
100073d8:	3710      	adds	r7, #16
100073da:	46bd      	mov	sp, r7
100073dc:	bd80      	pop	{r7, pc}

100073de <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
100073de:	b580      	push	{r7, lr}
100073e0:	b086      	sub	sp, #24
100073e2:	af00      	add	r7, sp, #0
100073e4:	60f8      	str	r0, [r7, #12]
100073e6:	607a      	str	r2, [r7, #4]
100073e8:	603b      	str	r3, [r7, #0]
100073ea:	460b      	mov	r3, r1
100073ec:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
100073ee:	2300      	movs	r3, #0
100073f0:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
100073f2:	697b      	ldr	r3, [r7, #20]
100073f4:	2b00      	cmp	r3, #0
100073f6:	d11e      	bne.n	10007436 <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
100073f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100073fa:	68fa      	ldr	r2, [r7, #12]
100073fc:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
100073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007400:	687a      	ldr	r2, [r7, #4]
10007402:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
10007404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007406:	897a      	ldrh	r2, [r7, #10]
10007408:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
1000740a:	683b      	ldr	r3, [r7, #0]
1000740c:	891a      	ldrh	r2, [r3, #8]
1000740e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007410:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
10007412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007414:	895a      	ldrh	r2, [r3, #10]
10007416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007418:	849a      	strh	r2, [r3, #36]	@ 0x24
		vq->callback = callback;
1000741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000741c:	6a3a      	ldr	r2, [r7, #32]
1000741e:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
10007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10007424:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
10007426:	683b      	ldr	r3, [r7, #0]
10007428:	6819      	ldr	r1, [r3, #0]
1000742a:	683b      	ldr	r3, [r7, #0]
1000742c:	685b      	ldr	r3, [r3, #4]
1000742e:	461a      	mov	r2, r3
10007430:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10007432:	f000 f8ef 	bl	10007614 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
10007436:	697b      	ldr	r3, [r7, #20]
}
10007438:	4618      	mov	r0, r3
1000743a:	3718      	adds	r7, #24
1000743c:	46bd      	mov	sp, r7
1000743e:	bd80      	pop	{r7, pc}

10007440 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
10007440:	b480      	push	{r7}
10007442:	b083      	sub	sp, #12
10007444:	af00      	add	r7, sp, #0
10007446:	6078      	str	r0, [r7, #4]
10007448:	460b      	mov	r3, r1
1000744a:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
1000744c:	687b      	ldr	r3, [r7, #4]
1000744e:	699a      	ldr	r2, [r3, #24]
10007450:	887b      	ldrh	r3, [r7, #2]
10007452:	011b      	lsls	r3, r3, #4
10007454:	4413      	add	r3, r2
10007456:	689b      	ldr	r3, [r3, #8]
}
10007458:	4618      	mov	r0, r3
1000745a:	370c      	adds	r7, #12
1000745c:	46bd      	mov	sp, r7
1000745e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007462:	4770      	bx	lr

10007464 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
10007464:	b580      	push	{r7, lr}
10007466:	b086      	sub	sp, #24
10007468:	af00      	add	r7, sp, #0
1000746a:	60f8      	str	r0, [r7, #12]
1000746c:	60b9      	str	r1, [r7, #8]
1000746e:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
10007470:	2300      	movs	r3, #0
10007472:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
10007474:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10007478:	68fb      	ldr	r3, [r7, #12]
1000747a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
1000747c:	68fb      	ldr	r3, [r7, #12]
1000747e:	69db      	ldr	r3, [r3, #28]
10007480:	885b      	ldrh	r3, [r3, #2]
10007482:	b29b      	uxth	r3, r3
10007484:	429a      	cmp	r2, r3
10007486:	d101      	bne.n	1000748c <virtqueue_get_available_buffer+0x28>
		return NULL;
10007488:	2300      	movs	r3, #0
1000748a:	e02f      	b.n	100074ec <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
1000748c:	68fb      	ldr	r3, [r7, #12]
1000748e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
10007490:	1c5a      	adds	r2, r3, #1
10007492:	b291      	uxth	r1, r2
10007494:	68fa      	ldr	r2, [r7, #12]
10007496:	8611      	strh	r1, [r2, #48]	@ 0x30
10007498:	b21a      	sxth	r2, r3
1000749a:	68fb      	ldr	r3, [r7, #12]
1000749c:	895b      	ldrh	r3, [r3, #10]
1000749e:	3b01      	subs	r3, #1
100074a0:	b29b      	uxth	r3, r3
100074a2:	b21b      	sxth	r3, r3
100074a4:	4013      	ands	r3, r2
100074a6:	b21b      	sxth	r3, r3
100074a8:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
100074aa:	68fb      	ldr	r3, [r7, #12]
100074ac:	69da      	ldr	r2, [r3, #28]
100074ae:	8afb      	ldrh	r3, [r7, #22]
100074b0:	005b      	lsls	r3, r3, #1
100074b2:	4413      	add	r3, r2
100074b4:	889b      	ldrh	r3, [r3, #4]
100074b6:	b29a      	uxth	r2, r3
100074b8:	68bb      	ldr	r3, [r7, #8]
100074ba:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
100074bc:	68fb      	ldr	r3, [r7, #12]
100074be:	699a      	ldr	r2, [r3, #24]
100074c0:	68bb      	ldr	r3, [r7, #8]
100074c2:	881b      	ldrh	r3, [r3, #0]
100074c4:	011b      	lsls	r3, r3, #4
100074c6:	18d1      	adds	r1, r2, r3
100074c8:	680a      	ldr	r2, [r1, #0]
100074ca:	684b      	ldr	r3, [r1, #4]
100074cc:	4613      	mov	r3, r2
100074ce:	4619      	mov	r1, r3
100074d0:	68f8      	ldr	r0, [r7, #12]
100074d2:	f7ff ff73 	bl	100073bc <virtqueue_phys_to_virt>
100074d6:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
100074d8:	68fb      	ldr	r3, [r7, #12]
100074da:	699a      	ldr	r2, [r3, #24]
100074dc:	68bb      	ldr	r3, [r7, #8]
100074de:	881b      	ldrh	r3, [r3, #0]
100074e0:	011b      	lsls	r3, r3, #4
100074e2:	4413      	add	r3, r2
100074e4:	689a      	ldr	r2, [r3, #8]
100074e6:	687b      	ldr	r3, [r7, #4]
100074e8:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
100074ea:	693b      	ldr	r3, [r7, #16]
}
100074ec:	4618      	mov	r0, r3
100074ee:	3718      	adds	r7, #24
100074f0:	46bd      	mov	sp, r7
100074f2:	bd80      	pop	{r7, pc}

100074f4 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
100074f4:	b480      	push	{r7}
100074f6:	b087      	sub	sp, #28
100074f8:	af00      	add	r7, sp, #0
100074fa:	60f8      	str	r0, [r7, #12]
100074fc:	460b      	mov	r3, r1
100074fe:	607a      	str	r2, [r7, #4]
10007500:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
10007502:	2300      	movs	r3, #0
10007504:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
10007506:	68fb      	ldr	r3, [r7, #12]
10007508:	895b      	ldrh	r3, [r3, #10]
1000750a:	897a      	ldrh	r2, [r7, #10]
1000750c:	429a      	cmp	r2, r3
1000750e:	d901      	bls.n	10007514 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
10007510:	4b18      	ldr	r3, [pc, #96]	@ (10007574 <virtqueue_add_consumed_buffer+0x80>)
10007512:	e029      	b.n	10007568 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
10007514:	68fb      	ldr	r3, [r7, #12]
10007516:	6a1b      	ldr	r3, [r3, #32]
10007518:	885b      	ldrh	r3, [r3, #2]
1000751a:	b29b      	uxth	r3, r3
1000751c:	b21a      	sxth	r2, r3
1000751e:	68fb      	ldr	r3, [r7, #12]
10007520:	895b      	ldrh	r3, [r3, #10]
10007522:	3b01      	subs	r3, #1
10007524:	b29b      	uxth	r3, r3
10007526:	b21b      	sxth	r3, r3
10007528:	4013      	ands	r3, r2
1000752a:	b21b      	sxth	r3, r3
1000752c:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
1000752e:	68fb      	ldr	r3, [r7, #12]
10007530:	6a1a      	ldr	r2, [r3, #32]
10007532:	8a7b      	ldrh	r3, [r7, #18]
10007534:	00db      	lsls	r3, r3, #3
10007536:	4413      	add	r3, r2
10007538:	3304      	adds	r3, #4
1000753a:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
1000753c:	897a      	ldrh	r2, [r7, #10]
1000753e:	697b      	ldr	r3, [r7, #20]
10007540:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
10007542:	697b      	ldr	r3, [r7, #20]
10007544:	687a      	ldr	r2, [r7, #4]
10007546:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
10007548:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
1000754c:	68fb      	ldr	r3, [r7, #12]
1000754e:	6a1b      	ldr	r3, [r3, #32]
10007550:	885a      	ldrh	r2, [r3, #2]
10007552:	b292      	uxth	r2, r2
10007554:	3201      	adds	r2, #1
10007556:	b292      	uxth	r2, r2
10007558:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
1000755a:	68fb      	ldr	r3, [r7, #12]
1000755c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
1000755e:	3301      	adds	r3, #1
10007560:	b29a      	uxth	r2, r3
10007562:	68fb      	ldr	r3, [r7, #12]
10007564:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
10007566:	2300      	movs	r3, #0
}
10007568:	4618      	mov	r0, r3
1000756a:	371c      	adds	r7, #28
1000756c:	46bd      	mov	sp, r7
1000756e:	f85d 7b04 	ldr.w	r7, [sp], #4
10007572:	4770      	bx	lr
10007574:	fffff441 	.word	0xfffff441

10007578 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10007578:	b480      	push	{r7}
1000757a:	b083      	sub	sp, #12
1000757c:	af00      	add	r7, sp, #0
1000757e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10007580:	6879      	ldr	r1, [r7, #4]
10007582:	6809      	ldr	r1, [r1, #0]
10007584:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10007588:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
1000758c:	2300      	movs	r3, #0
1000758e:	4313      	orrs	r3, r2
10007590:	d015      	beq.n	100075be <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10007592:	687b      	ldr	r3, [r7, #4]
10007594:	681b      	ldr	r3, [r3, #0]
10007596:	699b      	ldr	r3, [r3, #24]
10007598:	2b01      	cmp	r3, #1
1000759a:	d11f      	bne.n	100075dc <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000759c:	687b      	ldr	r3, [r7, #4]
1000759e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
100075a0:	687b      	ldr	r3, [r7, #4]
100075a2:	895b      	ldrh	r3, [r3, #10]
100075a4:	1ad3      	subs	r3, r2, r3
100075a6:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
100075a8:	687b      	ldr	r3, [r7, #4]
100075aa:	6a1a      	ldr	r2, [r3, #32]
100075ac:	687b      	ldr	r3, [r7, #4]
100075ae:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
100075b0:	3901      	subs	r1, #1
100075b2:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
100075b4:	00db      	lsls	r3, r3, #3
100075b6:	4413      	add	r3, r2
100075b8:	460a      	mov	r2, r1
100075ba:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
100075bc:	e00e      	b.n	100075dc <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
100075be:	687b      	ldr	r3, [r7, #4]
100075c0:	681b      	ldr	r3, [r3, #0]
100075c2:	699b      	ldr	r3, [r3, #24]
100075c4:	2b01      	cmp	r3, #1
100075c6:	d109      	bne.n	100075dc <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
100075c8:	687b      	ldr	r3, [r7, #4]
100075ca:	6a1b      	ldr	r3, [r3, #32]
100075cc:	881b      	ldrh	r3, [r3, #0]
100075ce:	b29a      	uxth	r2, r3
100075d0:	687b      	ldr	r3, [r7, #4]
100075d2:	6a1b      	ldr	r3, [r3, #32]
100075d4:	f042 0201 	orr.w	r2, r2, #1
100075d8:	b292      	uxth	r2, r2
100075da:	801a      	strh	r2, [r3, #0]
}
100075dc:	bf00      	nop
100075de:	370c      	adds	r7, #12
100075e0:	46bd      	mov	sp, r7
100075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
100075e6:	4770      	bx	lr

100075e8 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
100075e8:	b580      	push	{r7, lr}
100075ea:	b082      	sub	sp, #8
100075ec:	af00      	add	r7, sp, #0
100075ee:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
100075f0:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
100075f4:	6878      	ldr	r0, [r7, #4]
100075f6:	f000 f835 	bl	10007664 <vq_ring_must_notify>
100075fa:	4603      	mov	r3, r0
100075fc:	2b00      	cmp	r3, #0
100075fe:	d002      	beq.n	10007606 <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
10007600:	6878      	ldr	r0, [r7, #4]
10007602:	f000 f87d 	bl	10007700 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
10007606:	687b      	ldr	r3, [r7, #4]
10007608:	2200      	movs	r2, #0
1000760a:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);
}
1000760c:	bf00      	nop
1000760e:	3708      	adds	r7, #8
10007610:	46bd      	mov	sp, r7
10007612:	bd80      	pop	{r7, pc}

10007614 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
10007614:	b580      	push	{r7, lr}
10007616:	b086      	sub	sp, #24
10007618:	af00      	add	r7, sp, #0
1000761a:	60f8      	str	r0, [r7, #12]
1000761c:	60b9      	str	r1, [r7, #8]
1000761e:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
10007620:	68fb      	ldr	r3, [r7, #12]
10007622:	895b      	ldrh	r3, [r3, #10]
10007624:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
10007626:	68fb      	ldr	r3, [r7, #12]
10007628:	3314      	adds	r3, #20
1000762a:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
1000762c:	6979      	ldr	r1, [r7, #20]
1000762e:	687b      	ldr	r3, [r7, #4]
10007630:	68ba      	ldr	r2, [r7, #8]
10007632:	6938      	ldr	r0, [r7, #16]
10007634:	f7ff fdda 	bl	100071ec <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
10007638:	bf00      	nop
1000763a:	3718      	adds	r7, #24
1000763c:	46bd      	mov	sp, r7
1000763e:	bd80      	pop	{r7, pc}

10007640 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
10007640:	b580      	push	{r7, lr}
10007642:	b082      	sub	sp, #8
10007644:	af00      	add	r7, sp, #0
10007646:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
10007648:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
1000764c:	687b      	ldr	r3, [r7, #4]
1000764e:	68db      	ldr	r3, [r3, #12]
10007650:	2b00      	cmp	r3, #0
10007652:	d003      	beq.n	1000765c <virtqueue_notification+0x1c>
		vq->callback(vq);
10007654:	687b      	ldr	r3, [r7, #4]
10007656:	68db      	ldr	r3, [r3, #12]
10007658:	6878      	ldr	r0, [r7, #4]
1000765a:	4798      	blx	r3
}
1000765c:	bf00      	nop
1000765e:	3708      	adds	r7, #8
10007660:	46bd      	mov	sp, r7
10007662:	bd80      	pop	{r7, pc}

10007664 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
10007664:	b580      	push	{r7, lr}
10007666:	b084      	sub	sp, #16
10007668:	af00      	add	r7, sp, #0
1000766a:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000766c:	6879      	ldr	r1, [r7, #4]
1000766e:	6809      	ldr	r1, [r1, #0]
10007670:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10007674:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10007678:	2300      	movs	r3, #0
1000767a:	4313      	orrs	r3, r2
1000767c:	d02a      	beq.n	100076d4 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000767e:	687b      	ldr	r3, [r7, #4]
10007680:	681b      	ldr	r3, [r3, #0]
10007682:	699b      	ldr	r3, [r3, #24]
10007684:	2b01      	cmp	r3, #1
10007686:	d136      	bne.n	100076f6 <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
10007688:	687b      	ldr	r3, [r7, #4]
1000768a:	6a1b      	ldr	r3, [r3, #32]
1000768c:	789a      	ldrb	r2, [r3, #2]
1000768e:	78db      	ldrb	r3, [r3, #3]
10007690:	021b      	lsls	r3, r3, #8
10007692:	4313      	orrs	r3, r2
10007694:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
10007696:	687b      	ldr	r3, [r7, #4]
10007698:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
1000769a:	89fa      	ldrh	r2, [r7, #14]
1000769c:	1ad3      	subs	r3, r2, r3
1000769e:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
100076a0:	687b      	ldr	r3, [r7, #4]
100076a2:	69da      	ldr	r2, [r3, #28]
100076a4:	687b      	ldr	r3, [r7, #4]
100076a6:	6959      	ldr	r1, [r3, #20]
100076a8:	004b      	lsls	r3, r1, #1
100076aa:	4413      	add	r3, r2
100076ac:	7918      	ldrb	r0, [r3, #4]
100076ae:	004b      	lsls	r3, r1, #1
100076b0:	4413      	add	r3, r2
100076b2:	795b      	ldrb	r3, [r3, #5]
100076b4:	021b      	lsls	r3, r3, #8
100076b6:	4303      	orrs	r3, r0
100076b8:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
100076ba:	89ba      	ldrh	r2, [r7, #12]
100076bc:	89f9      	ldrh	r1, [r7, #14]
100076be:	897b      	ldrh	r3, [r7, #10]
100076c0:	4618      	mov	r0, r3
100076c2:	f7ff fdbc 	bl	1000723e <vring_need_event>
100076c6:	4603      	mov	r3, r0
						prev_idx) != 0;
100076c8:	2b00      	cmp	r3, #0
100076ca:	bf14      	ite	ne
100076cc:	2301      	movne	r3, #1
100076ce:	2300      	moveq	r3, #0
100076d0:	b2db      	uxtb	r3, r3
100076d2:	e011      	b.n	100076f8 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
100076d4:	687b      	ldr	r3, [r7, #4]
100076d6:	681b      	ldr	r3, [r3, #0]
100076d8:	699b      	ldr	r3, [r3, #24]
100076da:	2b01      	cmp	r3, #1
100076dc:	d10b      	bne.n	100076f6 <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
100076de:	687b      	ldr	r3, [r7, #4]
100076e0:	69db      	ldr	r3, [r3, #28]
100076e2:	881b      	ldrh	r3, [r3, #0]
100076e4:	b29b      	uxth	r3, r3
100076e6:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
100076ea:	2b00      	cmp	r3, #0
100076ec:	bf0c      	ite	eq
100076ee:	2301      	moveq	r3, #1
100076f0:	2300      	movne	r3, #0
100076f2:	b2db      	uxtb	r3, r3
100076f4:	e000      	b.n	100076f8 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
100076f6:	2300      	movs	r3, #0
}
100076f8:	4618      	mov	r0, r3
100076fa:	3710      	adds	r7, #16
100076fc:	46bd      	mov	sp, r7
100076fe:	bd80      	pop	{r7, pc}

10007700 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
10007700:	b580      	push	{r7, lr}
10007702:	b082      	sub	sp, #8
10007704:	af00      	add	r7, sp, #0
10007706:	6078      	str	r0, [r7, #4]
	if (vq->notify)
10007708:	687b      	ldr	r3, [r7, #4]
1000770a:	691b      	ldr	r3, [r3, #16]
1000770c:	2b00      	cmp	r3, #0
1000770e:	d003      	beq.n	10007718 <vq_ring_notify+0x18>
		vq->notify(vq);
10007710:	687b      	ldr	r3, [r7, #4]
10007712:	691b      	ldr	r3, [r3, #16]
10007714:	6878      	ldr	r0, [r7, #4]
10007716:	4798      	blx	r3
}
10007718:	bf00      	nop
1000771a:	3708      	adds	r7, #8
1000771c:	46bd      	mov	sp, r7
1000771e:	bd80      	pop	{r7, pc}

10007720 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
10007720:	b580      	push	{r7, lr}
10007722:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
10007724:	4b0d      	ldr	r3, [pc, #52]	@ (1000775c <MAILBOX_Init+0x3c>)
10007726:	2201      	movs	r2, #1
10007728:	2100      	movs	r1, #0
1000772a:	480d      	ldr	r0, [pc, #52]	@ (10007760 <MAILBOX_Init+0x40>)
1000772c:	f7f9 fd44 	bl	100011b8 <HAL_IPCC_ActivateNotification>
10007730:	4603      	mov	r3, r0
10007732:	2b00      	cmp	r3, #0
10007734:	d002      	beq.n	1000773c <MAILBOX_Init+0x1c>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
    return -1;
10007736:	f04f 33ff 	mov.w	r3, #4294967295
1000773a:	e00c      	b.n	10007756 <MAILBOX_Init+0x36>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
1000773c:	4b09      	ldr	r3, [pc, #36]	@ (10007764 <MAILBOX_Init+0x44>)
1000773e:	2201      	movs	r2, #1
10007740:	2101      	movs	r1, #1
10007742:	4807      	ldr	r0, [pc, #28]	@ (10007760 <MAILBOX_Init+0x40>)
10007744:	f7f9 fd38 	bl	100011b8 <HAL_IPCC_ActivateNotification>
10007748:	4603      	mov	r3, r0
1000774a:	2b00      	cmp	r3, #0
1000774c:	d002      	beq.n	10007754 <MAILBOX_Init+0x34>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
    return -1;
1000774e:	f04f 33ff 	mov.w	r3, #4294967295
10007752:	e000      	b.n	10007756 <MAILBOX_Init+0x36>
  }

  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
10007754:	2300      	movs	r3, #0
}
10007756:	4618      	mov	r0, r3
10007758:	bd80      	pop	{r7, pc}
1000775a:	bf00      	nop
1000775c:	10007821 	.word	0x10007821
10007760:	100201c8 	.word	0x100201c8
10007764:	1000784d 	.word	0x1000784d

10007768 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
10007768:	b580      	push	{r7, lr}
1000776a:	b084      	sub	sp, #16
1000776c:	af00      	add	r7, sp, #0
1000776e:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */
  int ret = -1;
10007770:	f04f 33ff 	mov.w	r3, #4294967295
10007774:	60fb      	str	r3, [r7, #12]

   /* USER CODE BEGIN PRE_MAILBOX_POLL */

   /* USER CODE END  PRE_MAILBOX_POLL */

   if (msg_received_ch1 == MBOX_BUF_FREE) {
10007776:	4b0f      	ldr	r3, [pc, #60]	@ (100077b4 <MAILBOX_Poll+0x4c>)
10007778:	681b      	ldr	r3, [r3, #0]
1000777a:	2b02      	cmp	r3, #2
1000777c:	d108      	bne.n	10007790 <MAILBOX_Poll+0x28>
   /* USER CODE BEGIN MSG_CHANNEL1 */

   /* USER CODE END  MSG_CHANNEL1 */

    OPENAMP_log_dbg("Running virt0 (ch_1 buf free)\r\n");
    rproc_virtio_notified(vdev, VRING0_ID);
1000777e:	2100      	movs	r1, #0
10007780:	6878      	ldr	r0, [r7, #4]
10007782:	f7fe fb98 	bl	10005eb6 <rproc_virtio_notified>
    ret = 0;
10007786:	2300      	movs	r3, #0
10007788:	60fb      	str	r3, [r7, #12]
    msg_received_ch1 = MBOX_NO_MSG;
1000778a:	4b0a      	ldr	r3, [pc, #40]	@ (100077b4 <MAILBOX_Poll+0x4c>)
1000778c:	2200      	movs	r2, #0
1000778e:	601a      	str	r2, [r3, #0]
  }

  if (msg_received_ch2 == MBOX_NEW_MSG) {
10007790:	4b09      	ldr	r3, [pc, #36]	@ (100077b8 <MAILBOX_Poll+0x50>)
10007792:	681b      	ldr	r3, [r3, #0]
10007794:	2b01      	cmp	r3, #1
10007796:	d108      	bne.n	100077aa <MAILBOX_Poll+0x42>
   /* USER CODE BEGIN MSG_CHANNEL2 */

   /* USER CODE END  MSG_CHANNEL2 */

    OPENAMP_log_dbg("Running virt1 (ch_2 new msg)\r\n");
    rproc_virtio_notified(vdev, VRING1_ID);
10007798:	2101      	movs	r1, #1
1000779a:	6878      	ldr	r0, [r7, #4]
1000779c:	f7fe fb8b 	bl	10005eb6 <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
100077a0:	4b05      	ldr	r3, [pc, #20]	@ (100077b8 <MAILBOX_Poll+0x50>)
100077a2:	2200      	movs	r2, #0
100077a4:	601a      	str	r2, [r3, #0]

    ret = 0;
100077a6:	2300      	movs	r3, #0
100077a8:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_MAILBOX_POLL */

  /* USER CODE END  POST_MAILBOX_POLL */

  return ret;
100077aa:	68fb      	ldr	r3, [r7, #12]
}
100077ac:	4618      	mov	r0, r3
100077ae:	3710      	adds	r7, #16
100077b0:	46bd      	mov	sp, r7
100077b2:	bd80      	pop	{r7, pc}
100077b4:	10020304 	.word	0x10020304
100077b8:	10020308 	.word	0x10020308

100077bc <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
100077bc:	b580      	push	{r7, lr}
100077be:	b084      	sub	sp, #16
100077c0:	af00      	add	r7, sp, #0
100077c2:	6078      	str	r0, [r7, #4]
100077c4:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
100077c6:	683b      	ldr	r3, [r7, #0]
100077c8:	2b00      	cmp	r3, #0
100077ca:	d102      	bne.n	100077d2 <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
100077cc:	2300      	movs	r3, #0
100077ce:	60fb      	str	r3, [r7, #12]
100077d0:	e008      	b.n	100077e4 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
100077d2:	683b      	ldr	r3, [r7, #0]
100077d4:	2b01      	cmp	r3, #1
100077d6:	d102      	bne.n	100077de <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
100077d8:	2301      	movs	r3, #1
100077da:	60fb      	str	r3, [r7, #12]
100077dc:	e002      	b.n	100077e4 <MAILBOX_Notify+0x28>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
    return -1;
100077de:	f04f 33ff 	mov.w	r3, #4294967295
100077e2:	e016      	b.n	10007812 <MAILBOX_Notify+0x56>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
100077e4:	2200      	movs	r2, #0
100077e6:	68f9      	ldr	r1, [r7, #12]
100077e8:	480c      	ldr	r0, [pc, #48]	@ (1000781c <MAILBOX_Notify+0x60>)
100077ea:	f7f9 fd33 	bl	10001254 <HAL_IPCC_GetChannelStatus>
100077ee:	4603      	mov	r3, r0
100077f0:	2b01      	cmp	r3, #1
100077f2:	d108      	bne.n	10007806 <MAILBOX_Notify+0x4a>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
100077f4:	bf00      	nop
100077f6:	2200      	movs	r2, #0
100077f8:	68f9      	ldr	r1, [r7, #12]
100077fa:	4808      	ldr	r0, [pc, #32]	@ (1000781c <MAILBOX_Notify+0x60>)
100077fc:	f7f9 fd2a 	bl	10001254 <HAL_IPCC_GetChannelStatus>
10007800:	4603      	mov	r3, r0
10007802:	2b01      	cmp	r3, #1
10007804:	d0f7      	beq.n	100077f6 <MAILBOX_Notify+0x3a>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
10007806:	2200      	movs	r2, #0
10007808:	68f9      	ldr	r1, [r7, #12]
1000780a:	4804      	ldr	r0, [pc, #16]	@ (1000781c <MAILBOX_Notify+0x60>)
1000780c:	f7f9 fd56 	bl	100012bc <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10007810:	2300      	movs	r3, #0
}
10007812:	4618      	mov	r0, r3
10007814:	3710      	adds	r7, #16
10007816:	46bd      	mov	sp, r7
10007818:	bd80      	pop	{r7, pc}
1000781a:	bf00      	nop
1000781c:	100201c8 	.word	0x100201c8

10007820 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10007820:	b580      	push	{r7, lr}
10007822:	b084      	sub	sp, #16
10007824:	af00      	add	r7, sp, #0
10007826:	60f8      	str	r0, [r7, #12]
10007828:	60b9      	str	r1, [r7, #8]
1000782a:	4613      	mov	r3, r2
1000782c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
1000782e:	4b06      	ldr	r3, [pc, #24]	@ (10007848 <IPCC_channel1_callback+0x28>)
10007830:	2202      	movs	r2, #2
10007832:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10007834:	2201      	movs	r2, #1
10007836:	68b9      	ldr	r1, [r7, #8]
10007838:	68f8      	ldr	r0, [r7, #12]
1000783a:	f7f9 fd3f 	bl	100012bc <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
1000783e:	bf00      	nop
10007840:	3710      	adds	r7, #16
10007842:	46bd      	mov	sp, r7
10007844:	bd80      	pop	{r7, pc}
10007846:	bf00      	nop
10007848:	10020304 	.word	0x10020304

1000784c <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000784c:	b580      	push	{r7, lr}
1000784e:	b084      	sub	sp, #16
10007850:	af00      	add	r7, sp, #0
10007852:	60f8      	str	r0, [r7, #12]
10007854:	60b9      	str	r1, [r7, #8]
10007856:	4613      	mov	r3, r2
10007858:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
1000785a:	4b06      	ldr	r3, [pc, #24]	@ (10007874 <IPCC_channel2_callback+0x28>)
1000785c:	2201      	movs	r2, #1
1000785e:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10007860:	2201      	movs	r2, #1
10007862:	68b9      	ldr	r1, [r7, #8]
10007864:	68f8      	ldr	r0, [r7, #12]
10007866:	f7f9 fd29 	bl	100012bc <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
1000786a:	bf00      	nop
1000786c:	3710      	adds	r7, #16
1000786e:	46bd      	mov	sp, r7
10007870:	bd80      	pop	{r7, pc}
10007872:	bf00      	nop
10007874:	10020308 	.word	0x10020308

10007878 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
10007878:	b480      	push	{r7}
1000787a:	b083      	sub	sp, #12
1000787c:	af00      	add	r7, sp, #0
1000787e:	6078      	str	r0, [r7, #4]
10007880:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
10007882:	687b      	ldr	r3, [r7, #4]
10007884:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
10007886:	683a      	ldr	r2, [r7, #0]
10007888:	429a      	cmp	r2, r3
1000788a:	d209      	bcs.n	100078a0 <metal_device_io_region+0x28>
1000788c:	683a      	ldr	r2, [r7, #0]
1000788e:	4613      	mov	r3, r2
10007890:	00db      	lsls	r3, r3, #3
10007892:	1a9b      	subs	r3, r3, r2
10007894:	00db      	lsls	r3, r3, #3
10007896:	3308      	adds	r3, #8
10007898:	687a      	ldr	r2, [r7, #4]
1000789a:	4413      	add	r3, r2
1000789c:	3304      	adds	r3, #4
1000789e:	e000      	b.n	100078a2 <metal_device_io_region+0x2a>
100078a0:	2300      	movs	r3, #0
}
100078a2:	4618      	mov	r0, r3
100078a4:	370c      	adds	r7, #12
100078a6:	46bd      	mov	sp, r7
100078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100078ac:	4770      	bx	lr
	...

100078b0 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
100078b0:	b590      	push	{r4, r7, lr}
100078b2:	b08d      	sub	sp, #52	@ 0x34
100078b4:	af04      	add	r7, sp, #16
100078b6:	6078      	str	r0, [r7, #4]
  int status = 0;
100078b8:	2300      	movs	r3, #0
100078ba:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
100078bc:	2300      	movs	r3, #0
100078be:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
100078c0:	4a41      	ldr	r2, [pc, #260]	@ (100079c8 <OPENAMP_shmem_init+0x118>)
100078c2:	f107 0310 	add.w	r3, r7, #16
100078c6:	e892 0003 	ldmia.w	r2, {r0, r1}
100078ca:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
100078ce:	2300      	movs	r3, #0
100078d0:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
100078d2:	2300      	movs	r3, #0
100078d4:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
100078d6:	f107 0310 	add.w	r3, r7, #16
100078da:	4618      	mov	r0, r3
100078dc:	f7fd fec0 	bl	10005660 <metal_init>

  status = metal_register_generic_device(&shm_device);
100078e0:	483a      	ldr	r0, [pc, #232]	@ (100079cc <OPENAMP_shmem_init+0x11c>)
100078e2:	f7fd fd67 	bl	100053b4 <metal_register_generic_device>
100078e6:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
100078e8:	69fb      	ldr	r3, [r7, #28]
100078ea:	2b00      	cmp	r3, #0
100078ec:	d001      	beq.n	100078f2 <OPENAMP_shmem_init+0x42>
    return status;
100078ee:	69fb      	ldr	r3, [r7, #28]
100078f0:	e066      	b.n	100079c0 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
100078f2:	f107 0318 	add.w	r3, r7, #24
100078f6:	461a      	mov	r2, r3
100078f8:	4935      	ldr	r1, [pc, #212]	@ (100079d0 <OPENAMP_shmem_init+0x120>)
100078fa:	4836      	ldr	r0, [pc, #216]	@ (100079d4 <OPENAMP_shmem_init+0x124>)
100078fc:	f7fd fd1c 	bl	10005338 <metal_device_open>
10007900:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10007902:	69fb      	ldr	r3, [r7, #28]
10007904:	2b00      	cmp	r3, #0
10007906:	d001      	beq.n	1000790c <OPENAMP_shmem_init+0x5c>
    return status;
10007908:	69fb      	ldr	r3, [r7, #28]
1000790a:	e059      	b.n	100079c0 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
1000790c:	4a32      	ldr	r2, [pc, #200]	@ (100079d8 <OPENAMP_shmem_init+0x128>)
1000790e:	4b33      	ldr	r3, [pc, #204]	@ (100079dc <OPENAMP_shmem_init+0x12c>)
10007910:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10007912:	69bb      	ldr	r3, [r7, #24]
10007914:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
10007918:	4a31      	ldr	r2, [pc, #196]	@ (100079e0 <OPENAMP_shmem_init+0x130>)
1000791a:	4b2f      	ldr	r3, [pc, #188]	@ (100079d8 <OPENAMP_shmem_init+0x128>)
1000791c:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
1000791e:	461a      	mov	r2, r3
10007920:	2300      	movs	r3, #0
10007922:	9302      	str	r3, [sp, #8]
10007924:	2300      	movs	r3, #0
10007926:	9301      	str	r3, [sp, #4]
10007928:	f04f 33ff 	mov.w	r3, #4294967295
1000792c:	9300      	str	r3, [sp, #0]
1000792e:	4613      	mov	r3, r2
10007930:	4a2a      	ldr	r2, [pc, #168]	@ (100079dc <OPENAMP_shmem_init+0x12c>)
10007932:	4929      	ldr	r1, [pc, #164]	@ (100079d8 <OPENAMP_shmem_init+0x128>)
10007934:	f7fd fee2 	bl	100056fc <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
10007938:	69bb      	ldr	r3, [r7, #24]
1000793a:	2100      	movs	r1, #0
1000793c:	4618      	mov	r0, r3
1000793e:	f7ff ff9b 	bl	10007878 <metal_device_io_region>
10007942:	4603      	mov	r3, r0
10007944:	4a27      	ldr	r2, [pc, #156]	@ (100079e4 <OPENAMP_shmem_init+0x134>)
10007946:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
10007948:	4b26      	ldr	r3, [pc, #152]	@ (100079e4 <OPENAMP_shmem_init+0x134>)
1000794a:	681b      	ldr	r3, [r3, #0]
1000794c:	2b00      	cmp	r3, #0
1000794e:	d102      	bne.n	10007956 <OPENAMP_shmem_init+0xa6>
    return -1;
10007950:	f04f 33ff 	mov.w	r3, #4294967295
10007954:	e034      	b.n	100079c0 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
10007956:	f107 0208 	add.w	r2, r7, #8
1000795a:	f107 030c 	add.w	r3, r7, #12
1000795e:	4619      	mov	r1, r3
10007960:	6878      	ldr	r0, [r7, #4]
10007962:	f000 f903 	bl	10007b6c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
10007966:	68fb      	ldr	r3, [r7, #12]
10007968:	4a1f      	ldr	r2, [pc, #124]	@ (100079e8 <OPENAMP_shmem_init+0x138>)
1000796a:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
1000796c:	4b1e      	ldr	r3, [pc, #120]	@ (100079e8 <OPENAMP_shmem_init+0x138>)
1000796e:	681b      	ldr	r3, [r3, #0]
10007970:	2b00      	cmp	r3, #0
10007972:	d102      	bne.n	1000797a <OPENAMP_shmem_init+0xca>
  {
    return -1;
10007974:	f04f 33ff 	mov.w	r3, #4294967295
10007978:	e022      	b.n	100079c0 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
1000797a:	69bb      	ldr	r3, [r7, #24]
1000797c:	f103 0044 	add.w	r0, r3, #68	@ 0x44
10007980:	4b19      	ldr	r3, [pc, #100]	@ (100079e8 <OPENAMP_shmem_init+0x138>)
10007982:	6819      	ldr	r1, [r3, #0]
10007984:	4b18      	ldr	r3, [pc, #96]	@ (100079e8 <OPENAMP_shmem_init+0x138>)
10007986:	681a      	ldr	r2, [r3, #0]
10007988:	68bb      	ldr	r3, [r7, #8]
1000798a:	461c      	mov	r4, r3
1000798c:	2300      	movs	r3, #0
1000798e:	9302      	str	r3, [sp, #8]
10007990:	2300      	movs	r3, #0
10007992:	9301      	str	r3, [sp, #4]
10007994:	f04f 33ff 	mov.w	r3, #4294967295
10007998:	9300      	str	r3, [sp, #0]
1000799a:	4623      	mov	r3, r4
1000799c:	f7fd feae 	bl	100056fc <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
100079a0:	69bb      	ldr	r3, [r7, #24]
100079a2:	2101      	movs	r1, #1
100079a4:	4618      	mov	r0, r3
100079a6:	f7ff ff67 	bl	10007878 <metal_device_io_region>
100079aa:	4603      	mov	r3, r0
100079ac:	4a0f      	ldr	r2, [pc, #60]	@ (100079ec <OPENAMP_shmem_init+0x13c>)
100079ae:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
100079b0:	4b0e      	ldr	r3, [pc, #56]	@ (100079ec <OPENAMP_shmem_init+0x13c>)
100079b2:	681b      	ldr	r3, [r3, #0]
100079b4:	2b00      	cmp	r3, #0
100079b6:	d102      	bne.n	100079be <OPENAMP_shmem_init+0x10e>
    return -1;
100079b8:	f04f 33ff 	mov.w	r3, #4294967295
100079bc:	e000      	b.n	100079c0 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
100079be:	2300      	movs	r3, #0
}
100079c0:	4618      	mov	r0, r3
100079c2:	3724      	adds	r7, #36	@ 0x24
100079c4:	46bd      	mov	sp, r7
100079c6:	bd90      	pop	{r4, r7, pc}
100079c8:	1000926c 	.word	0x1000926c
100079cc:	10020038 	.word	0x10020038
100079d0:	10009258 	.word	0x10009258
100079d4:	10009264 	.word	0x10009264
100079d8:	10040000 	.word	0x10040000
100079dc:	100203b0 	.word	0x100203b0
100079e0:	10050000 	.word	0x10050000
100079e4:	1002030c 	.word	0x1002030c
100079e8:	10020314 	.word	0x10020314
100079ec:	10020310 	.word	0x10020310

100079f0 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
100079f0:	b590      	push	{r4, r7, lr}
100079f2:	b08b      	sub	sp, #44	@ 0x2c
100079f4:	af04      	add	r7, sp, #16
100079f6:	6078      	str	r0, [r7, #4]
100079f8:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
100079fa:	2300      	movs	r3, #0
100079fc:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
100079fe:	2300      	movs	r3, #0
10007a00:	613b      	str	r3, [r7, #16]
  int status = 0;
10007a02:	2300      	movs	r3, #0
10007a04:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
10007a06:	f7ff fe8b 	bl	10007720 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
10007a0a:	6878      	ldr	r0, [r7, #4]
10007a0c:	f7ff ff50 	bl	100078b0 <OPENAMP_shmem_init>
10007a10:	60f8      	str	r0, [r7, #12]
  if(status)
10007a12:	68fb      	ldr	r3, [r7, #12]
10007a14:	2b00      	cmp	r3, #0
10007a16:	d001      	beq.n	10007a1c <MX_OPENAMP_Init+0x2c>
  {
    return status;
10007a18:	68fb      	ldr	r3, [r7, #12]
10007a1a:	e068      	b.n	10007aee <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
10007a1c:	6878      	ldr	r0, [r7, #4]
10007a1e:	4b36      	ldr	r3, [pc, #216]	@ (10007af8 <MX_OPENAMP_Init+0x108>)
10007a20:	681b      	ldr	r3, [r3, #0]
10007a22:	f103 0218 	add.w	r2, r3, #24
10007a26:	4b35      	ldr	r3, [pc, #212]	@ (10007afc <MX_OPENAMP_Init+0x10c>)
10007a28:	681b      	ldr	r3, [r3, #0]
10007a2a:	2100      	movs	r1, #0
10007a2c:	9102      	str	r1, [sp, #8]
10007a2e:	4934      	ldr	r1, [pc, #208]	@ (10007b00 <MX_OPENAMP_Init+0x110>)
10007a30:	9101      	str	r1, [sp, #4]
10007a32:	2100      	movs	r1, #0
10007a34:	9100      	str	r1, [sp, #0]
10007a36:	21ff      	movs	r1, #255	@ 0xff
10007a38:	f7fe f95e 	bl	10005cf8 <rproc_virtio_create_vdev>
10007a3c:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
10007a3e:	693b      	ldr	r3, [r7, #16]
10007a40:	2b00      	cmp	r3, #0
10007a42:	d102      	bne.n	10007a4a <MX_OPENAMP_Init+0x5a>
  {
    return -1;
10007a44:	f04f 33ff 	mov.w	r3, #4294967295
10007a48:	e051      	b.n	10007aee <MX_OPENAMP_Init+0xfe>
  }

  rproc_virtio_wait_remote_ready(vdev);
10007a4a:	6938      	ldr	r0, [r7, #16]
10007a4c:	f7fe fa6f 	bl	10005f2e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
10007a50:	4b29      	ldr	r3, [pc, #164]	@ (10007af8 <MX_OPENAMP_Init+0x108>)
10007a52:	681b      	ldr	r3, [r3, #0]
10007a54:	3334      	adds	r3, #52	@ 0x34
10007a56:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10007a58:	697b      	ldr	r3, [r7, #20]
10007a5a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10007a5c:	697b      	ldr	r3, [r7, #20]
10007a5e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10007a60:	461c      	mov	r4, r3
10007a62:	4b28      	ldr	r3, [pc, #160]	@ (10007b04 <MX_OPENAMP_Init+0x114>)
10007a64:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10007a66:	697a      	ldr	r2, [r7, #20]
10007a68:	6892      	ldr	r2, [r2, #8]
10007a6a:	6979      	ldr	r1, [r7, #20]
10007a6c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10007a6e:	9102      	str	r1, [sp, #8]
10007a70:	9201      	str	r2, [sp, #4]
10007a72:	9300      	str	r3, [sp, #0]
10007a74:	4623      	mov	r3, r4
10007a76:	4602      	mov	r2, r0
10007a78:	2100      	movs	r1, #0
10007a7a:	6938      	ldr	r0, [r7, #16]
10007a7c:	f7fe f9ea 	bl	10005e54 <rproc_virtio_init_vring>
10007a80:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10007a82:	68fb      	ldr	r3, [r7, #12]
10007a84:	2b00      	cmp	r3, #0
10007a86:	d001      	beq.n	10007a8c <MX_OPENAMP_Init+0x9c>
  {
    return status;
10007a88:	68fb      	ldr	r3, [r7, #12]
10007a8a:	e030      	b.n	10007aee <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
10007a8c:	4b1a      	ldr	r3, [pc, #104]	@ (10007af8 <MX_OPENAMP_Init+0x108>)
10007a8e:	681b      	ldr	r3, [r3, #0]
10007a90:	3348      	adds	r3, #72	@ 0x48
10007a92:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10007a94:	697b      	ldr	r3, [r7, #20]
10007a96:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10007a98:	697b      	ldr	r3, [r7, #20]
10007a9a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10007a9c:	461c      	mov	r4, r3
10007a9e:	4b19      	ldr	r3, [pc, #100]	@ (10007b04 <MX_OPENAMP_Init+0x114>)
10007aa0:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10007aa2:	697a      	ldr	r2, [r7, #20]
10007aa4:	6892      	ldr	r2, [r2, #8]
10007aa6:	6979      	ldr	r1, [r7, #20]
10007aa8:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10007aaa:	9102      	str	r1, [sp, #8]
10007aac:	9201      	str	r2, [sp, #4]
10007aae:	9300      	str	r3, [sp, #0]
10007ab0:	4623      	mov	r3, r4
10007ab2:	4602      	mov	r2, r0
10007ab4:	2101      	movs	r1, #1
10007ab6:	6938      	ldr	r0, [r7, #16]
10007ab8:	f7fe f9cc 	bl	10005e54 <rproc_virtio_init_vring>
10007abc:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10007abe:	68fb      	ldr	r3, [r7, #12]
10007ac0:	2b00      	cmp	r3, #0
10007ac2:	d001      	beq.n	10007ac8 <MX_OPENAMP_Init+0xd8>
  {
    return status;
10007ac4:	68fb      	ldr	r3, [r7, #12]
10007ac6:	e012      	b.n	10007aee <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10007ac8:	4a0f      	ldr	r2, [pc, #60]	@ (10007b08 <MX_OPENAMP_Init+0x118>)
10007aca:	4b10      	ldr	r3, [pc, #64]	@ (10007b0c <MX_OPENAMP_Init+0x11c>)
10007acc:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10007ace:	461a      	mov	r2, r3
10007ad0:	f04f 31ff 	mov.w	r1, #4294967295
10007ad4:	480e      	ldr	r0, [pc, #56]	@ (10007b10 <MX_OPENAMP_Init+0x120>)
10007ad6:	f7fe fec2 	bl	1000685e <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
10007ada:	4b0a      	ldr	r3, [pc, #40]	@ (10007b04 <MX_OPENAMP_Init+0x114>)
10007adc:	681b      	ldr	r3, [r3, #0]
10007ade:	4a0c      	ldr	r2, [pc, #48]	@ (10007b10 <MX_OPENAMP_Init+0x120>)
10007ae0:	9200      	str	r2, [sp, #0]
10007ae2:	683a      	ldr	r2, [r7, #0]
10007ae4:	6939      	ldr	r1, [r7, #16]
10007ae6:	480b      	ldr	r0, [pc, #44]	@ (10007b14 <MX_OPENAMP_Init+0x124>)
10007ae8:	f7ff f9b6 	bl	10006e58 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
10007aec:	2300      	movs	r3, #0
}
10007aee:	4618      	mov	r0, r3
10007af0:	371c      	adds	r7, #28
10007af2:	46bd      	mov	sp, r7
10007af4:	bd90      	pop	{r4, r7, pc}
10007af6:	bf00      	nop
10007af8:	10020314 	.word	0x10020314
10007afc:	10020310 	.word	0x10020310
10007b00:	100077bd 	.word	0x100077bd
10007b04:	1002030c 	.word	0x1002030c
10007b08:	10050000 	.word	0x10050000
10007b0c:	10040000 	.word	0x10040000
10007b10:	10020318 	.word	0x10020318
10007b14:	10020324 	.word	0x10020324

10007b18 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
10007b18:	b580      	push	{r7, lr}
10007b1a:	b08a      	sub	sp, #40	@ 0x28
10007b1c:	af04      	add	r7, sp, #16
10007b1e:	60f8      	str	r0, [r7, #12]
10007b20:	60b9      	str	r1, [r7, #8]
10007b22:	607a      	str	r2, [r7, #4]
10007b24:	603b      	str	r3, [r7, #0]
  int ret = 0;
10007b26:	2300      	movs	r3, #0
10007b28:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
10007b2a:	6a3b      	ldr	r3, [r7, #32]
10007b2c:	9302      	str	r3, [sp, #8]
10007b2e:	683b      	ldr	r3, [r7, #0]
10007b30:	9301      	str	r3, [sp, #4]
10007b32:	687b      	ldr	r3, [r7, #4]
10007b34:	9300      	str	r3, [sp, #0]
10007b36:	f04f 33ff 	mov.w	r3, #4294967295
10007b3a:	68ba      	ldr	r2, [r7, #8]
10007b3c:	4904      	ldr	r1, [pc, #16]	@ (10007b50 <OPENAMP_create_endpoint+0x38>)
10007b3e:	68f8      	ldr	r0, [r7, #12]
10007b40:	f7fe fcc2 	bl	100064c8 <rpmsg_create_ept>
10007b44:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
10007b46:	697b      	ldr	r3, [r7, #20]
}
10007b48:	4618      	mov	r0, r3
10007b4a:	3718      	adds	r7, #24
10007b4c:	46bd      	mov	sp, r7
10007b4e:	bd80      	pop	{r7, pc}
10007b50:	10020324 	.word	0x10020324

10007b54 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
10007b54:	b580      	push	{r7, lr}
10007b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
10007b58:	4b03      	ldr	r3, [pc, #12]	@ (10007b68 <OPENAMP_check_for_message+0x14>)
10007b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10007b5c:	4618      	mov	r0, r3
10007b5e:	f7ff fe03 	bl	10007768 <MAILBOX_Poll>
}
10007b62:	bf00      	nop
10007b64:	bd80      	pop	{r7, pc}
10007b66:	bf00      	nop
10007b68:	10020324 	.word	0x10020324

10007b6c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
10007b6c:	b480      	push	{r7}
10007b6e:	b085      	sub	sp, #20
10007b70:	af00      	add	r7, sp, #0
10007b72:	60f8      	str	r0, [r7, #12]
10007b74:	60b9      	str	r1, [r7, #8]
10007b76:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
10007b78:	687b      	ldr	r3, [r7, #4]
10007b7a:	228c      	movs	r2, #140	@ 0x8c
10007b7c:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
10007b7e:	68bb      	ldr	r3, [r7, #8]
10007b80:	4a03      	ldr	r2, [pc, #12]	@ (10007b90 <resource_table_init+0x24>)
10007b82:	601a      	str	r2, [r3, #0]
}
10007b84:	bf00      	nop
10007b86:	3714      	adds	r7, #20
10007b88:	46bd      	mov	sp, r7
10007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
10007b8e:	4770      	bx	lr
10007b90:	10020120 	.word	0x10020120

10007b94 <__assert_func>:
10007b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10007b96:	4614      	mov	r4, r2
10007b98:	461a      	mov	r2, r3
10007b9a:	4b09      	ldr	r3, [pc, #36]	@ (10007bc0 <__assert_func+0x2c>)
10007b9c:	681b      	ldr	r3, [r3, #0]
10007b9e:	4605      	mov	r5, r0
10007ba0:	68d8      	ldr	r0, [r3, #12]
10007ba2:	b14c      	cbz	r4, 10007bb8 <__assert_func+0x24>
10007ba4:	4b07      	ldr	r3, [pc, #28]	@ (10007bc4 <__assert_func+0x30>)
10007ba6:	9100      	str	r1, [sp, #0]
10007ba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
10007bac:	4906      	ldr	r1, [pc, #24]	@ (10007bc8 <__assert_func+0x34>)
10007bae:	462b      	mov	r3, r5
10007bb0:	f000 f970 	bl	10007e94 <fiprintf>
10007bb4:	f000 fadd 	bl	10008172 <abort>
10007bb8:	4b04      	ldr	r3, [pc, #16]	@ (10007bcc <__assert_func+0x38>)
10007bba:	461c      	mov	r4, r3
10007bbc:	e7f3      	b.n	10007ba6 <__assert_func+0x12>
10007bbe:	bf00      	nop
10007bc0:	100200d0 	.word	0x100200d0
10007bc4:	10009329 	.word	0x10009329
10007bc8:	10009336 	.word	0x10009336
10007bcc:	10009364 	.word	0x10009364

10007bd0 <malloc>:
10007bd0:	4b02      	ldr	r3, [pc, #8]	@ (10007bdc <malloc+0xc>)
10007bd2:	4601      	mov	r1, r0
10007bd4:	6818      	ldr	r0, [r3, #0]
10007bd6:	f000 b82d 	b.w	10007c34 <_malloc_r>
10007bda:	bf00      	nop
10007bdc:	100200d0 	.word	0x100200d0

10007be0 <free>:
10007be0:	4b02      	ldr	r3, [pc, #8]	@ (10007bec <free+0xc>)
10007be2:	4601      	mov	r1, r0
10007be4:	6818      	ldr	r0, [r3, #0]
10007be6:	f000 bacb 	b.w	10008180 <_free_r>
10007bea:	bf00      	nop
10007bec:	100200d0 	.word	0x100200d0

10007bf0 <sbrk_aligned>:
10007bf0:	b570      	push	{r4, r5, r6, lr}
10007bf2:	4e0f      	ldr	r6, [pc, #60]	@ (10007c30 <sbrk_aligned+0x40>)
10007bf4:	460c      	mov	r4, r1
10007bf6:	6831      	ldr	r1, [r6, #0]
10007bf8:	4605      	mov	r5, r0
10007bfa:	b911      	cbnz	r1, 10007c02 <sbrk_aligned+0x12>
10007bfc:	f000 fa5c 	bl	100080b8 <_sbrk_r>
10007c00:	6030      	str	r0, [r6, #0]
10007c02:	4621      	mov	r1, r4
10007c04:	4628      	mov	r0, r5
10007c06:	f000 fa57 	bl	100080b8 <_sbrk_r>
10007c0a:	1c43      	adds	r3, r0, #1
10007c0c:	d103      	bne.n	10007c16 <sbrk_aligned+0x26>
10007c0e:	f04f 34ff 	mov.w	r4, #4294967295
10007c12:	4620      	mov	r0, r4
10007c14:	bd70      	pop	{r4, r5, r6, pc}
10007c16:	1cc4      	adds	r4, r0, #3
10007c18:	f024 0403 	bic.w	r4, r4, #3
10007c1c:	42a0      	cmp	r0, r4
10007c1e:	d0f8      	beq.n	10007c12 <sbrk_aligned+0x22>
10007c20:	1a21      	subs	r1, r4, r0
10007c22:	4628      	mov	r0, r5
10007c24:	f000 fa48 	bl	100080b8 <_sbrk_r>
10007c28:	3001      	adds	r0, #1
10007c2a:	d1f2      	bne.n	10007c12 <sbrk_aligned+0x22>
10007c2c:	e7ef      	b.n	10007c0e <sbrk_aligned+0x1e>
10007c2e:	bf00      	nop
10007c30:	100203b4 	.word	0x100203b4

10007c34 <_malloc_r>:
10007c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10007c38:	1ccd      	adds	r5, r1, #3
10007c3a:	f025 0503 	bic.w	r5, r5, #3
10007c3e:	3508      	adds	r5, #8
10007c40:	2d0c      	cmp	r5, #12
10007c42:	bf38      	it	cc
10007c44:	250c      	movcc	r5, #12
10007c46:	2d00      	cmp	r5, #0
10007c48:	4606      	mov	r6, r0
10007c4a:	db01      	blt.n	10007c50 <_malloc_r+0x1c>
10007c4c:	42a9      	cmp	r1, r5
10007c4e:	d904      	bls.n	10007c5a <_malloc_r+0x26>
10007c50:	230c      	movs	r3, #12
10007c52:	6033      	str	r3, [r6, #0]
10007c54:	2000      	movs	r0, #0
10007c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10007c5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 10007d30 <_malloc_r+0xfc>
10007c5e:	f000 f869 	bl	10007d34 <__malloc_lock>
10007c62:	f8d8 3000 	ldr.w	r3, [r8]
10007c66:	461c      	mov	r4, r3
10007c68:	bb44      	cbnz	r4, 10007cbc <_malloc_r+0x88>
10007c6a:	4629      	mov	r1, r5
10007c6c:	4630      	mov	r0, r6
10007c6e:	f7ff ffbf 	bl	10007bf0 <sbrk_aligned>
10007c72:	1c43      	adds	r3, r0, #1
10007c74:	4604      	mov	r4, r0
10007c76:	d158      	bne.n	10007d2a <_malloc_r+0xf6>
10007c78:	f8d8 4000 	ldr.w	r4, [r8]
10007c7c:	4627      	mov	r7, r4
10007c7e:	2f00      	cmp	r7, #0
10007c80:	d143      	bne.n	10007d0a <_malloc_r+0xd6>
10007c82:	2c00      	cmp	r4, #0
10007c84:	d04b      	beq.n	10007d1e <_malloc_r+0xea>
10007c86:	6823      	ldr	r3, [r4, #0]
10007c88:	4639      	mov	r1, r7
10007c8a:	4630      	mov	r0, r6
10007c8c:	eb04 0903 	add.w	r9, r4, r3
10007c90:	f000 fa12 	bl	100080b8 <_sbrk_r>
10007c94:	4581      	cmp	r9, r0
10007c96:	d142      	bne.n	10007d1e <_malloc_r+0xea>
10007c98:	6821      	ldr	r1, [r4, #0]
10007c9a:	1a6d      	subs	r5, r5, r1
10007c9c:	4629      	mov	r1, r5
10007c9e:	4630      	mov	r0, r6
10007ca0:	f7ff ffa6 	bl	10007bf0 <sbrk_aligned>
10007ca4:	3001      	adds	r0, #1
10007ca6:	d03a      	beq.n	10007d1e <_malloc_r+0xea>
10007ca8:	6823      	ldr	r3, [r4, #0]
10007caa:	442b      	add	r3, r5
10007cac:	6023      	str	r3, [r4, #0]
10007cae:	f8d8 3000 	ldr.w	r3, [r8]
10007cb2:	685a      	ldr	r2, [r3, #4]
10007cb4:	bb62      	cbnz	r2, 10007d10 <_malloc_r+0xdc>
10007cb6:	f8c8 7000 	str.w	r7, [r8]
10007cba:	e00f      	b.n	10007cdc <_malloc_r+0xa8>
10007cbc:	6822      	ldr	r2, [r4, #0]
10007cbe:	1b52      	subs	r2, r2, r5
10007cc0:	d420      	bmi.n	10007d04 <_malloc_r+0xd0>
10007cc2:	2a0b      	cmp	r2, #11
10007cc4:	d917      	bls.n	10007cf6 <_malloc_r+0xc2>
10007cc6:	1961      	adds	r1, r4, r5
10007cc8:	42a3      	cmp	r3, r4
10007cca:	6025      	str	r5, [r4, #0]
10007ccc:	bf18      	it	ne
10007cce:	6059      	strne	r1, [r3, #4]
10007cd0:	6863      	ldr	r3, [r4, #4]
10007cd2:	bf08      	it	eq
10007cd4:	f8c8 1000 	streq.w	r1, [r8]
10007cd8:	5162      	str	r2, [r4, r5]
10007cda:	604b      	str	r3, [r1, #4]
10007cdc:	4630      	mov	r0, r6
10007cde:	f000 f82f 	bl	10007d40 <__malloc_unlock>
10007ce2:	f104 000b 	add.w	r0, r4, #11
10007ce6:	1d23      	adds	r3, r4, #4
10007ce8:	f020 0007 	bic.w	r0, r0, #7
10007cec:	1ac2      	subs	r2, r0, r3
10007cee:	bf1c      	itt	ne
10007cf0:	1a1b      	subne	r3, r3, r0
10007cf2:	50a3      	strne	r3, [r4, r2]
10007cf4:	e7af      	b.n	10007c56 <_malloc_r+0x22>
10007cf6:	6862      	ldr	r2, [r4, #4]
10007cf8:	42a3      	cmp	r3, r4
10007cfa:	bf0c      	ite	eq
10007cfc:	f8c8 2000 	streq.w	r2, [r8]
10007d00:	605a      	strne	r2, [r3, #4]
10007d02:	e7eb      	b.n	10007cdc <_malloc_r+0xa8>
10007d04:	4623      	mov	r3, r4
10007d06:	6864      	ldr	r4, [r4, #4]
10007d08:	e7ae      	b.n	10007c68 <_malloc_r+0x34>
10007d0a:	463c      	mov	r4, r7
10007d0c:	687f      	ldr	r7, [r7, #4]
10007d0e:	e7b6      	b.n	10007c7e <_malloc_r+0x4a>
10007d10:	461a      	mov	r2, r3
10007d12:	685b      	ldr	r3, [r3, #4]
10007d14:	42a3      	cmp	r3, r4
10007d16:	d1fb      	bne.n	10007d10 <_malloc_r+0xdc>
10007d18:	2300      	movs	r3, #0
10007d1a:	6053      	str	r3, [r2, #4]
10007d1c:	e7de      	b.n	10007cdc <_malloc_r+0xa8>
10007d1e:	230c      	movs	r3, #12
10007d20:	6033      	str	r3, [r6, #0]
10007d22:	4630      	mov	r0, r6
10007d24:	f000 f80c 	bl	10007d40 <__malloc_unlock>
10007d28:	e794      	b.n	10007c54 <_malloc_r+0x20>
10007d2a:	6005      	str	r5, [r0, #0]
10007d2c:	e7d6      	b.n	10007cdc <_malloc_r+0xa8>
10007d2e:	bf00      	nop
10007d30:	100203b8 	.word	0x100203b8

10007d34 <__malloc_lock>:
10007d34:	4801      	ldr	r0, [pc, #4]	@ (10007d3c <__malloc_lock+0x8>)
10007d36:	f000 ba0c 	b.w	10008152 <__retarget_lock_acquire_recursive>
10007d3a:	bf00      	nop
10007d3c:	100204fc 	.word	0x100204fc

10007d40 <__malloc_unlock>:
10007d40:	4801      	ldr	r0, [pc, #4]	@ (10007d48 <__malloc_unlock+0x8>)
10007d42:	f000 ba07 	b.w	10008154 <__retarget_lock_release_recursive>
10007d46:	bf00      	nop
10007d48:	100204fc 	.word	0x100204fc

10007d4c <std>:
10007d4c:	2300      	movs	r3, #0
10007d4e:	b510      	push	{r4, lr}
10007d50:	4604      	mov	r4, r0
10007d52:	e9c0 3300 	strd	r3, r3, [r0]
10007d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
10007d5a:	6083      	str	r3, [r0, #8]
10007d5c:	8181      	strh	r1, [r0, #12]
10007d5e:	6643      	str	r3, [r0, #100]	@ 0x64
10007d60:	81c2      	strh	r2, [r0, #14]
10007d62:	6183      	str	r3, [r0, #24]
10007d64:	4619      	mov	r1, r3
10007d66:	2208      	movs	r2, #8
10007d68:	305c      	adds	r0, #92	@ 0x5c
10007d6a:	f000 f943 	bl	10007ff4 <memset>
10007d6e:	4b0d      	ldr	r3, [pc, #52]	@ (10007da4 <std+0x58>)
10007d70:	6263      	str	r3, [r4, #36]	@ 0x24
10007d72:	4b0d      	ldr	r3, [pc, #52]	@ (10007da8 <std+0x5c>)
10007d74:	62a3      	str	r3, [r4, #40]	@ 0x28
10007d76:	4b0d      	ldr	r3, [pc, #52]	@ (10007dac <std+0x60>)
10007d78:	62e3      	str	r3, [r4, #44]	@ 0x2c
10007d7a:	4b0d      	ldr	r3, [pc, #52]	@ (10007db0 <std+0x64>)
10007d7c:	6323      	str	r3, [r4, #48]	@ 0x30
10007d7e:	4b0d      	ldr	r3, [pc, #52]	@ (10007db4 <std+0x68>)
10007d80:	6224      	str	r4, [r4, #32]
10007d82:	429c      	cmp	r4, r3
10007d84:	d006      	beq.n	10007d94 <std+0x48>
10007d86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
10007d8a:	4294      	cmp	r4, r2
10007d8c:	d002      	beq.n	10007d94 <std+0x48>
10007d8e:	33d0      	adds	r3, #208	@ 0xd0
10007d90:	429c      	cmp	r4, r3
10007d92:	d105      	bne.n	10007da0 <std+0x54>
10007d94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
10007d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10007d9c:	f000 b9d8 	b.w	10008150 <__retarget_lock_init_recursive>
10007da0:	bd10      	pop	{r4, pc}
10007da2:	bf00      	nop
10007da4:	10007ef5 	.word	0x10007ef5
10007da8:	10007f17 	.word	0x10007f17
10007dac:	10007f4f 	.word	0x10007f4f
10007db0:	10007f73 	.word	0x10007f73
10007db4:	100203bc 	.word	0x100203bc

10007db8 <stdio_exit_handler>:
10007db8:	4a02      	ldr	r2, [pc, #8]	@ (10007dc4 <stdio_exit_handler+0xc>)
10007dba:	4903      	ldr	r1, [pc, #12]	@ (10007dc8 <stdio_exit_handler+0x10>)
10007dbc:	4803      	ldr	r0, [pc, #12]	@ (10007dcc <stdio_exit_handler+0x14>)
10007dbe:	f000 b87b 	b.w	10007eb8 <_fwalk_sglue>
10007dc2:	bf00      	nop
10007dc4:	100200c4 	.word	0x100200c4
10007dc8:	10008b69 	.word	0x10008b69
10007dcc:	100200d4 	.word	0x100200d4

10007dd0 <cleanup_stdio>:
10007dd0:	6841      	ldr	r1, [r0, #4]
10007dd2:	4b0c      	ldr	r3, [pc, #48]	@ (10007e04 <cleanup_stdio+0x34>)
10007dd4:	4299      	cmp	r1, r3
10007dd6:	b510      	push	{r4, lr}
10007dd8:	4604      	mov	r4, r0
10007dda:	d001      	beq.n	10007de0 <cleanup_stdio+0x10>
10007ddc:	f000 fec4 	bl	10008b68 <_fflush_r>
10007de0:	68a1      	ldr	r1, [r4, #8]
10007de2:	4b09      	ldr	r3, [pc, #36]	@ (10007e08 <cleanup_stdio+0x38>)
10007de4:	4299      	cmp	r1, r3
10007de6:	d002      	beq.n	10007dee <cleanup_stdio+0x1e>
10007de8:	4620      	mov	r0, r4
10007dea:	f000 febd 	bl	10008b68 <_fflush_r>
10007dee:	68e1      	ldr	r1, [r4, #12]
10007df0:	4b06      	ldr	r3, [pc, #24]	@ (10007e0c <cleanup_stdio+0x3c>)
10007df2:	4299      	cmp	r1, r3
10007df4:	d004      	beq.n	10007e00 <cleanup_stdio+0x30>
10007df6:	4620      	mov	r0, r4
10007df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10007dfc:	f000 beb4 	b.w	10008b68 <_fflush_r>
10007e00:	bd10      	pop	{r4, pc}
10007e02:	bf00      	nop
10007e04:	100203bc 	.word	0x100203bc
10007e08:	10020424 	.word	0x10020424
10007e0c:	1002048c 	.word	0x1002048c

10007e10 <global_stdio_init.part.0>:
10007e10:	b510      	push	{r4, lr}
10007e12:	4b0b      	ldr	r3, [pc, #44]	@ (10007e40 <global_stdio_init.part.0+0x30>)
10007e14:	4c0b      	ldr	r4, [pc, #44]	@ (10007e44 <global_stdio_init.part.0+0x34>)
10007e16:	4a0c      	ldr	r2, [pc, #48]	@ (10007e48 <global_stdio_init.part.0+0x38>)
10007e18:	601a      	str	r2, [r3, #0]
10007e1a:	4620      	mov	r0, r4
10007e1c:	2200      	movs	r2, #0
10007e1e:	2104      	movs	r1, #4
10007e20:	f7ff ff94 	bl	10007d4c <std>
10007e24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
10007e28:	2201      	movs	r2, #1
10007e2a:	2109      	movs	r1, #9
10007e2c:	f7ff ff8e 	bl	10007d4c <std>
10007e30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
10007e34:	2202      	movs	r2, #2
10007e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10007e3a:	2112      	movs	r1, #18
10007e3c:	f7ff bf86 	b.w	10007d4c <std>
10007e40:	100204f4 	.word	0x100204f4
10007e44:	100203bc 	.word	0x100203bc
10007e48:	10007db9 	.word	0x10007db9

10007e4c <__sfp_lock_acquire>:
10007e4c:	4801      	ldr	r0, [pc, #4]	@ (10007e54 <__sfp_lock_acquire+0x8>)
10007e4e:	f000 b980 	b.w	10008152 <__retarget_lock_acquire_recursive>
10007e52:	bf00      	nop
10007e54:	100204fd 	.word	0x100204fd

10007e58 <__sfp_lock_release>:
10007e58:	4801      	ldr	r0, [pc, #4]	@ (10007e60 <__sfp_lock_release+0x8>)
10007e5a:	f000 b97b 	b.w	10008154 <__retarget_lock_release_recursive>
10007e5e:	bf00      	nop
10007e60:	100204fd 	.word	0x100204fd

10007e64 <__sinit>:
10007e64:	b510      	push	{r4, lr}
10007e66:	4604      	mov	r4, r0
10007e68:	f7ff fff0 	bl	10007e4c <__sfp_lock_acquire>
10007e6c:	6a23      	ldr	r3, [r4, #32]
10007e6e:	b11b      	cbz	r3, 10007e78 <__sinit+0x14>
10007e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10007e74:	f7ff bff0 	b.w	10007e58 <__sfp_lock_release>
10007e78:	4b04      	ldr	r3, [pc, #16]	@ (10007e8c <__sinit+0x28>)
10007e7a:	6223      	str	r3, [r4, #32]
10007e7c:	4b04      	ldr	r3, [pc, #16]	@ (10007e90 <__sinit+0x2c>)
10007e7e:	681b      	ldr	r3, [r3, #0]
10007e80:	2b00      	cmp	r3, #0
10007e82:	d1f5      	bne.n	10007e70 <__sinit+0xc>
10007e84:	f7ff ffc4 	bl	10007e10 <global_stdio_init.part.0>
10007e88:	e7f2      	b.n	10007e70 <__sinit+0xc>
10007e8a:	bf00      	nop
10007e8c:	10007dd1 	.word	0x10007dd1
10007e90:	100204f4 	.word	0x100204f4

10007e94 <fiprintf>:
10007e94:	b40e      	push	{r1, r2, r3}
10007e96:	b503      	push	{r0, r1, lr}
10007e98:	4601      	mov	r1, r0
10007e9a:	ab03      	add	r3, sp, #12
10007e9c:	4805      	ldr	r0, [pc, #20]	@ (10007eb4 <fiprintf+0x20>)
10007e9e:	f853 2b04 	ldr.w	r2, [r3], #4
10007ea2:	6800      	ldr	r0, [r0, #0]
10007ea4:	9301      	str	r3, [sp, #4]
10007ea6:	f000 fb37 	bl	10008518 <_vfiprintf_r>
10007eaa:	b002      	add	sp, #8
10007eac:	f85d eb04 	ldr.w	lr, [sp], #4
10007eb0:	b003      	add	sp, #12
10007eb2:	4770      	bx	lr
10007eb4:	100200d0 	.word	0x100200d0

10007eb8 <_fwalk_sglue>:
10007eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10007ebc:	4607      	mov	r7, r0
10007ebe:	4688      	mov	r8, r1
10007ec0:	4614      	mov	r4, r2
10007ec2:	2600      	movs	r6, #0
10007ec4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10007ec8:	f1b9 0901 	subs.w	r9, r9, #1
10007ecc:	d505      	bpl.n	10007eda <_fwalk_sglue+0x22>
10007ece:	6824      	ldr	r4, [r4, #0]
10007ed0:	2c00      	cmp	r4, #0
10007ed2:	d1f7      	bne.n	10007ec4 <_fwalk_sglue+0xc>
10007ed4:	4630      	mov	r0, r6
10007ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10007eda:	89ab      	ldrh	r3, [r5, #12]
10007edc:	2b01      	cmp	r3, #1
10007ede:	d907      	bls.n	10007ef0 <_fwalk_sglue+0x38>
10007ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10007ee4:	3301      	adds	r3, #1
10007ee6:	d003      	beq.n	10007ef0 <_fwalk_sglue+0x38>
10007ee8:	4629      	mov	r1, r5
10007eea:	4638      	mov	r0, r7
10007eec:	47c0      	blx	r8
10007eee:	4306      	orrs	r6, r0
10007ef0:	3568      	adds	r5, #104	@ 0x68
10007ef2:	e7e9      	b.n	10007ec8 <_fwalk_sglue+0x10>

10007ef4 <__sread>:
10007ef4:	b510      	push	{r4, lr}
10007ef6:	460c      	mov	r4, r1
10007ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10007efc:	f000 f8ca 	bl	10008094 <_read_r>
10007f00:	2800      	cmp	r0, #0
10007f02:	bfab      	itete	ge
10007f04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
10007f06:	89a3      	ldrhlt	r3, [r4, #12]
10007f08:	181b      	addge	r3, r3, r0
10007f0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
10007f0e:	bfac      	ite	ge
10007f10:	6563      	strge	r3, [r4, #84]	@ 0x54
10007f12:	81a3      	strhlt	r3, [r4, #12]
10007f14:	bd10      	pop	{r4, pc}

10007f16 <__swrite>:
10007f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10007f1a:	461f      	mov	r7, r3
10007f1c:	898b      	ldrh	r3, [r1, #12]
10007f1e:	05db      	lsls	r3, r3, #23
10007f20:	4605      	mov	r5, r0
10007f22:	460c      	mov	r4, r1
10007f24:	4616      	mov	r6, r2
10007f26:	d505      	bpl.n	10007f34 <__swrite+0x1e>
10007f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10007f2c:	2302      	movs	r3, #2
10007f2e:	2200      	movs	r2, #0
10007f30:	f000 f89e 	bl	10008070 <_lseek_r>
10007f34:	89a3      	ldrh	r3, [r4, #12]
10007f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10007f3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
10007f3e:	81a3      	strh	r3, [r4, #12]
10007f40:	4632      	mov	r2, r6
10007f42:	463b      	mov	r3, r7
10007f44:	4628      	mov	r0, r5
10007f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10007f4a:	f000 b8c5 	b.w	100080d8 <_write_r>

10007f4e <__sseek>:
10007f4e:	b510      	push	{r4, lr}
10007f50:	460c      	mov	r4, r1
10007f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10007f56:	f000 f88b 	bl	10008070 <_lseek_r>
10007f5a:	1c43      	adds	r3, r0, #1
10007f5c:	89a3      	ldrh	r3, [r4, #12]
10007f5e:	bf15      	itete	ne
10007f60:	6560      	strne	r0, [r4, #84]	@ 0x54
10007f62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
10007f66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
10007f6a:	81a3      	strheq	r3, [r4, #12]
10007f6c:	bf18      	it	ne
10007f6e:	81a3      	strhne	r3, [r4, #12]
10007f70:	bd10      	pop	{r4, pc}

10007f72 <__sclose>:
10007f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10007f76:	f000 b86b 	b.w	10008050 <_close_r>

10007f7a <_vsniprintf_r>:
10007f7a:	b530      	push	{r4, r5, lr}
10007f7c:	4614      	mov	r4, r2
10007f7e:	2c00      	cmp	r4, #0
10007f80:	b09b      	sub	sp, #108	@ 0x6c
10007f82:	4605      	mov	r5, r0
10007f84:	461a      	mov	r2, r3
10007f86:	da05      	bge.n	10007f94 <_vsniprintf_r+0x1a>
10007f88:	238b      	movs	r3, #139	@ 0x8b
10007f8a:	6003      	str	r3, [r0, #0]
10007f8c:	f04f 30ff 	mov.w	r0, #4294967295
10007f90:	b01b      	add	sp, #108	@ 0x6c
10007f92:	bd30      	pop	{r4, r5, pc}
10007f94:	f44f 7302 	mov.w	r3, #520	@ 0x208
10007f98:	f8ad 300c 	strh.w	r3, [sp, #12]
10007f9c:	f04f 0300 	mov.w	r3, #0
10007fa0:	9319      	str	r3, [sp, #100]	@ 0x64
10007fa2:	bf14      	ite	ne
10007fa4:	f104 33ff 	addne.w	r3, r4, #4294967295
10007fa8:	4623      	moveq	r3, r4
10007faa:	9302      	str	r3, [sp, #8]
10007fac:	9305      	str	r3, [sp, #20]
10007fae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
10007fb2:	9100      	str	r1, [sp, #0]
10007fb4:	9104      	str	r1, [sp, #16]
10007fb6:	f8ad 300e 	strh.w	r3, [sp, #14]
10007fba:	4669      	mov	r1, sp
10007fbc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
10007fbe:	f000 f985 	bl	100082cc <_svfiprintf_r>
10007fc2:	1c43      	adds	r3, r0, #1
10007fc4:	bfbc      	itt	lt
10007fc6:	238b      	movlt	r3, #139	@ 0x8b
10007fc8:	602b      	strlt	r3, [r5, #0]
10007fca:	2c00      	cmp	r4, #0
10007fcc:	d0e0      	beq.n	10007f90 <_vsniprintf_r+0x16>
10007fce:	9b00      	ldr	r3, [sp, #0]
10007fd0:	2200      	movs	r2, #0
10007fd2:	701a      	strb	r2, [r3, #0]
10007fd4:	e7dc      	b.n	10007f90 <_vsniprintf_r+0x16>
	...

10007fd8 <vsniprintf>:
10007fd8:	b507      	push	{r0, r1, r2, lr}
10007fda:	9300      	str	r3, [sp, #0]
10007fdc:	4613      	mov	r3, r2
10007fde:	460a      	mov	r2, r1
10007fe0:	4601      	mov	r1, r0
10007fe2:	4803      	ldr	r0, [pc, #12]	@ (10007ff0 <vsniprintf+0x18>)
10007fe4:	6800      	ldr	r0, [r0, #0]
10007fe6:	f7ff ffc8 	bl	10007f7a <_vsniprintf_r>
10007fea:	b003      	add	sp, #12
10007fec:	f85d fb04 	ldr.w	pc, [sp], #4
10007ff0:	100200d0 	.word	0x100200d0

10007ff4 <memset>:
10007ff4:	4402      	add	r2, r0
10007ff6:	4603      	mov	r3, r0
10007ff8:	4293      	cmp	r3, r2
10007ffa:	d100      	bne.n	10007ffe <memset+0xa>
10007ffc:	4770      	bx	lr
10007ffe:	f803 1b01 	strb.w	r1, [r3], #1
10008002:	e7f9      	b.n	10007ff8 <memset+0x4>

10008004 <strncmp>:
10008004:	b510      	push	{r4, lr}
10008006:	b16a      	cbz	r2, 10008024 <strncmp+0x20>
10008008:	3901      	subs	r1, #1
1000800a:	1884      	adds	r4, r0, r2
1000800c:	f810 2b01 	ldrb.w	r2, [r0], #1
10008010:	f811 3f01 	ldrb.w	r3, [r1, #1]!
10008014:	429a      	cmp	r2, r3
10008016:	d103      	bne.n	10008020 <strncmp+0x1c>
10008018:	42a0      	cmp	r0, r4
1000801a:	d001      	beq.n	10008020 <strncmp+0x1c>
1000801c:	2a00      	cmp	r2, #0
1000801e:	d1f5      	bne.n	1000800c <strncmp+0x8>
10008020:	1ad0      	subs	r0, r2, r3
10008022:	bd10      	pop	{r4, pc}
10008024:	4610      	mov	r0, r2
10008026:	e7fc      	b.n	10008022 <strncmp+0x1e>

10008028 <strncpy>:
10008028:	b510      	push	{r4, lr}
1000802a:	3901      	subs	r1, #1
1000802c:	4603      	mov	r3, r0
1000802e:	b132      	cbz	r2, 1000803e <strncpy+0x16>
10008030:	f811 4f01 	ldrb.w	r4, [r1, #1]!
10008034:	f803 4b01 	strb.w	r4, [r3], #1
10008038:	3a01      	subs	r2, #1
1000803a:	2c00      	cmp	r4, #0
1000803c:	d1f7      	bne.n	1000802e <strncpy+0x6>
1000803e:	441a      	add	r2, r3
10008040:	2100      	movs	r1, #0
10008042:	4293      	cmp	r3, r2
10008044:	d100      	bne.n	10008048 <strncpy+0x20>
10008046:	bd10      	pop	{r4, pc}
10008048:	f803 1b01 	strb.w	r1, [r3], #1
1000804c:	e7f9      	b.n	10008042 <strncpy+0x1a>
	...

10008050 <_close_r>:
10008050:	b538      	push	{r3, r4, r5, lr}
10008052:	4d06      	ldr	r5, [pc, #24]	@ (1000806c <_close_r+0x1c>)
10008054:	2300      	movs	r3, #0
10008056:	4604      	mov	r4, r0
10008058:	4608      	mov	r0, r1
1000805a:	602b      	str	r3, [r5, #0]
1000805c:	f7f8 fcbe 	bl	100009dc <_close>
10008060:	1c43      	adds	r3, r0, #1
10008062:	d102      	bne.n	1000806a <_close_r+0x1a>
10008064:	682b      	ldr	r3, [r5, #0]
10008066:	b103      	cbz	r3, 1000806a <_close_r+0x1a>
10008068:	6023      	str	r3, [r4, #0]
1000806a:	bd38      	pop	{r3, r4, r5, pc}
1000806c:	100204f8 	.word	0x100204f8

10008070 <_lseek_r>:
10008070:	b538      	push	{r3, r4, r5, lr}
10008072:	4d07      	ldr	r5, [pc, #28]	@ (10008090 <_lseek_r+0x20>)
10008074:	4604      	mov	r4, r0
10008076:	4608      	mov	r0, r1
10008078:	4611      	mov	r1, r2
1000807a:	2200      	movs	r2, #0
1000807c:	602a      	str	r2, [r5, #0]
1000807e:	461a      	mov	r2, r3
10008080:	f7f8 fcd3 	bl	10000a2a <_lseek>
10008084:	1c43      	adds	r3, r0, #1
10008086:	d102      	bne.n	1000808e <_lseek_r+0x1e>
10008088:	682b      	ldr	r3, [r5, #0]
1000808a:	b103      	cbz	r3, 1000808e <_lseek_r+0x1e>
1000808c:	6023      	str	r3, [r4, #0]
1000808e:	bd38      	pop	{r3, r4, r5, pc}
10008090:	100204f8 	.word	0x100204f8

10008094 <_read_r>:
10008094:	b538      	push	{r3, r4, r5, lr}
10008096:	4d07      	ldr	r5, [pc, #28]	@ (100080b4 <_read_r+0x20>)
10008098:	4604      	mov	r4, r0
1000809a:	4608      	mov	r0, r1
1000809c:	4611      	mov	r1, r2
1000809e:	2200      	movs	r2, #0
100080a0:	602a      	str	r2, [r5, #0]
100080a2:	461a      	mov	r2, r3
100080a4:	f7f8 fc61 	bl	1000096a <_read>
100080a8:	1c43      	adds	r3, r0, #1
100080aa:	d102      	bne.n	100080b2 <_read_r+0x1e>
100080ac:	682b      	ldr	r3, [r5, #0]
100080ae:	b103      	cbz	r3, 100080b2 <_read_r+0x1e>
100080b0:	6023      	str	r3, [r4, #0]
100080b2:	bd38      	pop	{r3, r4, r5, pc}
100080b4:	100204f8 	.word	0x100204f8

100080b8 <_sbrk_r>:
100080b8:	b538      	push	{r3, r4, r5, lr}
100080ba:	4d06      	ldr	r5, [pc, #24]	@ (100080d4 <_sbrk_r+0x1c>)
100080bc:	2300      	movs	r3, #0
100080be:	4604      	mov	r4, r0
100080c0:	4608      	mov	r0, r1
100080c2:	602b      	str	r3, [r5, #0]
100080c4:	f7f8 fcbe 	bl	10000a44 <_sbrk>
100080c8:	1c43      	adds	r3, r0, #1
100080ca:	d102      	bne.n	100080d2 <_sbrk_r+0x1a>
100080cc:	682b      	ldr	r3, [r5, #0]
100080ce:	b103      	cbz	r3, 100080d2 <_sbrk_r+0x1a>
100080d0:	6023      	str	r3, [r4, #0]
100080d2:	bd38      	pop	{r3, r4, r5, pc}
100080d4:	100204f8 	.word	0x100204f8

100080d8 <_write_r>:
100080d8:	b538      	push	{r3, r4, r5, lr}
100080da:	4d07      	ldr	r5, [pc, #28]	@ (100080f8 <_write_r+0x20>)
100080dc:	4604      	mov	r4, r0
100080de:	4608      	mov	r0, r1
100080e0:	4611      	mov	r1, r2
100080e2:	2200      	movs	r2, #0
100080e4:	602a      	str	r2, [r5, #0]
100080e6:	461a      	mov	r2, r3
100080e8:	f7f8 fc5c 	bl	100009a4 <_write>
100080ec:	1c43      	adds	r3, r0, #1
100080ee:	d102      	bne.n	100080f6 <_write_r+0x1e>
100080f0:	682b      	ldr	r3, [r5, #0]
100080f2:	b103      	cbz	r3, 100080f6 <_write_r+0x1e>
100080f4:	6023      	str	r3, [r4, #0]
100080f6:	bd38      	pop	{r3, r4, r5, pc}
100080f8:	100204f8 	.word	0x100204f8

100080fc <__errno>:
100080fc:	4b01      	ldr	r3, [pc, #4]	@ (10008104 <__errno+0x8>)
100080fe:	6818      	ldr	r0, [r3, #0]
10008100:	4770      	bx	lr
10008102:	bf00      	nop
10008104:	100200d0 	.word	0x100200d0

10008108 <__libc_init_array>:
10008108:	b570      	push	{r4, r5, r6, lr}
1000810a:	4d0d      	ldr	r5, [pc, #52]	@ (10008140 <__libc_init_array+0x38>)
1000810c:	4c0d      	ldr	r4, [pc, #52]	@ (10008144 <__libc_init_array+0x3c>)
1000810e:	1b64      	subs	r4, r4, r5
10008110:	10a4      	asrs	r4, r4, #2
10008112:	2600      	movs	r6, #0
10008114:	42a6      	cmp	r6, r4
10008116:	d109      	bne.n	1000812c <__libc_init_array+0x24>
10008118:	4d0b      	ldr	r5, [pc, #44]	@ (10008148 <__libc_init_array+0x40>)
1000811a:	4c0c      	ldr	r4, [pc, #48]	@ (1000814c <__libc_init_array+0x44>)
1000811c:	f000 fef8 	bl	10008f10 <_init>
10008120:	1b64      	subs	r4, r4, r5
10008122:	10a4      	asrs	r4, r4, #2
10008124:	2600      	movs	r6, #0
10008126:	42a6      	cmp	r6, r4
10008128:	d105      	bne.n	10008136 <__libc_init_array+0x2e>
1000812a:	bd70      	pop	{r4, r5, r6, pc}
1000812c:	f855 3b04 	ldr.w	r3, [r5], #4
10008130:	4798      	blx	r3
10008132:	3601      	adds	r6, #1
10008134:	e7ee      	b.n	10008114 <__libc_init_array+0xc>
10008136:	f855 3b04 	ldr.w	r3, [r5], #4
1000813a:	4798      	blx	r3
1000813c:	3601      	adds	r6, #1
1000813e:	e7f2      	b.n	10008126 <__libc_init_array+0x1e>
10008140:	100093a0 	.word	0x100093a0
10008144:	100093a0 	.word	0x100093a0
10008148:	100093a0 	.word	0x100093a0
1000814c:	100093a4 	.word	0x100093a4

10008150 <__retarget_lock_init_recursive>:
10008150:	4770      	bx	lr

10008152 <__retarget_lock_acquire_recursive>:
10008152:	4770      	bx	lr

10008154 <__retarget_lock_release_recursive>:
10008154:	4770      	bx	lr

10008156 <memcpy>:
10008156:	440a      	add	r2, r1
10008158:	4291      	cmp	r1, r2
1000815a:	f100 33ff 	add.w	r3, r0, #4294967295
1000815e:	d100      	bne.n	10008162 <memcpy+0xc>
10008160:	4770      	bx	lr
10008162:	b510      	push	{r4, lr}
10008164:	f811 4b01 	ldrb.w	r4, [r1], #1
10008168:	f803 4f01 	strb.w	r4, [r3, #1]!
1000816c:	4291      	cmp	r1, r2
1000816e:	d1f9      	bne.n	10008164 <memcpy+0xe>
10008170:	bd10      	pop	{r4, pc}

10008172 <abort>:
10008172:	b508      	push	{r3, lr}
10008174:	2006      	movs	r0, #6
10008176:	f000 fdf5 	bl	10008d64 <raise>
1000817a:	2001      	movs	r0, #1
1000817c:	f7f8 fbea 	bl	10000954 <_exit>

10008180 <_free_r>:
10008180:	b538      	push	{r3, r4, r5, lr}
10008182:	4605      	mov	r5, r0
10008184:	2900      	cmp	r1, #0
10008186:	d041      	beq.n	1000820c <_free_r+0x8c>
10008188:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000818c:	1f0c      	subs	r4, r1, #4
1000818e:	2b00      	cmp	r3, #0
10008190:	bfb8      	it	lt
10008192:	18e4      	addlt	r4, r4, r3
10008194:	f7ff fdce 	bl	10007d34 <__malloc_lock>
10008198:	4a1d      	ldr	r2, [pc, #116]	@ (10008210 <_free_r+0x90>)
1000819a:	6813      	ldr	r3, [r2, #0]
1000819c:	b933      	cbnz	r3, 100081ac <_free_r+0x2c>
1000819e:	6063      	str	r3, [r4, #4]
100081a0:	6014      	str	r4, [r2, #0]
100081a2:	4628      	mov	r0, r5
100081a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
100081a8:	f7ff bdca 	b.w	10007d40 <__malloc_unlock>
100081ac:	42a3      	cmp	r3, r4
100081ae:	d908      	bls.n	100081c2 <_free_r+0x42>
100081b0:	6820      	ldr	r0, [r4, #0]
100081b2:	1821      	adds	r1, r4, r0
100081b4:	428b      	cmp	r3, r1
100081b6:	bf01      	itttt	eq
100081b8:	6819      	ldreq	r1, [r3, #0]
100081ba:	685b      	ldreq	r3, [r3, #4]
100081bc:	1809      	addeq	r1, r1, r0
100081be:	6021      	streq	r1, [r4, #0]
100081c0:	e7ed      	b.n	1000819e <_free_r+0x1e>
100081c2:	461a      	mov	r2, r3
100081c4:	685b      	ldr	r3, [r3, #4]
100081c6:	b10b      	cbz	r3, 100081cc <_free_r+0x4c>
100081c8:	42a3      	cmp	r3, r4
100081ca:	d9fa      	bls.n	100081c2 <_free_r+0x42>
100081cc:	6811      	ldr	r1, [r2, #0]
100081ce:	1850      	adds	r0, r2, r1
100081d0:	42a0      	cmp	r0, r4
100081d2:	d10b      	bne.n	100081ec <_free_r+0x6c>
100081d4:	6820      	ldr	r0, [r4, #0]
100081d6:	4401      	add	r1, r0
100081d8:	1850      	adds	r0, r2, r1
100081da:	4283      	cmp	r3, r0
100081dc:	6011      	str	r1, [r2, #0]
100081de:	d1e0      	bne.n	100081a2 <_free_r+0x22>
100081e0:	6818      	ldr	r0, [r3, #0]
100081e2:	685b      	ldr	r3, [r3, #4]
100081e4:	6053      	str	r3, [r2, #4]
100081e6:	4408      	add	r0, r1
100081e8:	6010      	str	r0, [r2, #0]
100081ea:	e7da      	b.n	100081a2 <_free_r+0x22>
100081ec:	d902      	bls.n	100081f4 <_free_r+0x74>
100081ee:	230c      	movs	r3, #12
100081f0:	602b      	str	r3, [r5, #0]
100081f2:	e7d6      	b.n	100081a2 <_free_r+0x22>
100081f4:	6820      	ldr	r0, [r4, #0]
100081f6:	1821      	adds	r1, r4, r0
100081f8:	428b      	cmp	r3, r1
100081fa:	bf04      	itt	eq
100081fc:	6819      	ldreq	r1, [r3, #0]
100081fe:	685b      	ldreq	r3, [r3, #4]
10008200:	6063      	str	r3, [r4, #4]
10008202:	bf04      	itt	eq
10008204:	1809      	addeq	r1, r1, r0
10008206:	6021      	streq	r1, [r4, #0]
10008208:	6054      	str	r4, [r2, #4]
1000820a:	e7ca      	b.n	100081a2 <_free_r+0x22>
1000820c:	bd38      	pop	{r3, r4, r5, pc}
1000820e:	bf00      	nop
10008210:	100203b8 	.word	0x100203b8

10008214 <__ssputs_r>:
10008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10008218:	688e      	ldr	r6, [r1, #8]
1000821a:	461f      	mov	r7, r3
1000821c:	42be      	cmp	r6, r7
1000821e:	680b      	ldr	r3, [r1, #0]
10008220:	4682      	mov	sl, r0
10008222:	460c      	mov	r4, r1
10008224:	4690      	mov	r8, r2
10008226:	d82d      	bhi.n	10008284 <__ssputs_r+0x70>
10008228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1000822c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
10008230:	d026      	beq.n	10008280 <__ssputs_r+0x6c>
10008232:	6965      	ldr	r5, [r4, #20]
10008234:	6909      	ldr	r1, [r1, #16]
10008236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1000823a:	eba3 0901 	sub.w	r9, r3, r1
1000823e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
10008242:	1c7b      	adds	r3, r7, #1
10008244:	444b      	add	r3, r9
10008246:	106d      	asrs	r5, r5, #1
10008248:	429d      	cmp	r5, r3
1000824a:	bf38      	it	cc
1000824c:	461d      	movcc	r5, r3
1000824e:	0553      	lsls	r3, r2, #21
10008250:	d527      	bpl.n	100082a2 <__ssputs_r+0x8e>
10008252:	4629      	mov	r1, r5
10008254:	f7ff fcee 	bl	10007c34 <_malloc_r>
10008258:	4606      	mov	r6, r0
1000825a:	b360      	cbz	r0, 100082b6 <__ssputs_r+0xa2>
1000825c:	6921      	ldr	r1, [r4, #16]
1000825e:	464a      	mov	r2, r9
10008260:	f7ff ff79 	bl	10008156 <memcpy>
10008264:	89a3      	ldrh	r3, [r4, #12]
10008266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
1000826a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000826e:	81a3      	strh	r3, [r4, #12]
10008270:	6126      	str	r6, [r4, #16]
10008272:	6165      	str	r5, [r4, #20]
10008274:	444e      	add	r6, r9
10008276:	eba5 0509 	sub.w	r5, r5, r9
1000827a:	6026      	str	r6, [r4, #0]
1000827c:	60a5      	str	r5, [r4, #8]
1000827e:	463e      	mov	r6, r7
10008280:	42be      	cmp	r6, r7
10008282:	d900      	bls.n	10008286 <__ssputs_r+0x72>
10008284:	463e      	mov	r6, r7
10008286:	6820      	ldr	r0, [r4, #0]
10008288:	4632      	mov	r2, r6
1000828a:	4641      	mov	r1, r8
1000828c:	f000 fd28 	bl	10008ce0 <memmove>
10008290:	68a3      	ldr	r3, [r4, #8]
10008292:	1b9b      	subs	r3, r3, r6
10008294:	60a3      	str	r3, [r4, #8]
10008296:	6823      	ldr	r3, [r4, #0]
10008298:	4433      	add	r3, r6
1000829a:	6023      	str	r3, [r4, #0]
1000829c:	2000      	movs	r0, #0
1000829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100082a2:	462a      	mov	r2, r5
100082a4:	f000 fd7a 	bl	10008d9c <_realloc_r>
100082a8:	4606      	mov	r6, r0
100082aa:	2800      	cmp	r0, #0
100082ac:	d1e0      	bne.n	10008270 <__ssputs_r+0x5c>
100082ae:	6921      	ldr	r1, [r4, #16]
100082b0:	4650      	mov	r0, sl
100082b2:	f7ff ff65 	bl	10008180 <_free_r>
100082b6:	230c      	movs	r3, #12
100082b8:	f8ca 3000 	str.w	r3, [sl]
100082bc:	89a3      	ldrh	r3, [r4, #12]
100082be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100082c2:	81a3      	strh	r3, [r4, #12]
100082c4:	f04f 30ff 	mov.w	r0, #4294967295
100082c8:	e7e9      	b.n	1000829e <__ssputs_r+0x8a>
	...

100082cc <_svfiprintf_r>:
100082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100082d0:	4698      	mov	r8, r3
100082d2:	898b      	ldrh	r3, [r1, #12]
100082d4:	061b      	lsls	r3, r3, #24
100082d6:	b09d      	sub	sp, #116	@ 0x74
100082d8:	4607      	mov	r7, r0
100082da:	460d      	mov	r5, r1
100082dc:	4614      	mov	r4, r2
100082de:	d510      	bpl.n	10008302 <_svfiprintf_r+0x36>
100082e0:	690b      	ldr	r3, [r1, #16]
100082e2:	b973      	cbnz	r3, 10008302 <_svfiprintf_r+0x36>
100082e4:	2140      	movs	r1, #64	@ 0x40
100082e6:	f7ff fca5 	bl	10007c34 <_malloc_r>
100082ea:	6028      	str	r0, [r5, #0]
100082ec:	6128      	str	r0, [r5, #16]
100082ee:	b930      	cbnz	r0, 100082fe <_svfiprintf_r+0x32>
100082f0:	230c      	movs	r3, #12
100082f2:	603b      	str	r3, [r7, #0]
100082f4:	f04f 30ff 	mov.w	r0, #4294967295
100082f8:	b01d      	add	sp, #116	@ 0x74
100082fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100082fe:	2340      	movs	r3, #64	@ 0x40
10008300:	616b      	str	r3, [r5, #20]
10008302:	2300      	movs	r3, #0
10008304:	9309      	str	r3, [sp, #36]	@ 0x24
10008306:	2320      	movs	r3, #32
10008308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
1000830c:	f8cd 800c 	str.w	r8, [sp, #12]
10008310:	2330      	movs	r3, #48	@ 0x30
10008312:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 100084b0 <_svfiprintf_r+0x1e4>
10008316:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
1000831a:	f04f 0901 	mov.w	r9, #1
1000831e:	4623      	mov	r3, r4
10008320:	469a      	mov	sl, r3
10008322:	f813 2b01 	ldrb.w	r2, [r3], #1
10008326:	b10a      	cbz	r2, 1000832c <_svfiprintf_r+0x60>
10008328:	2a25      	cmp	r2, #37	@ 0x25
1000832a:	d1f9      	bne.n	10008320 <_svfiprintf_r+0x54>
1000832c:	ebba 0b04 	subs.w	fp, sl, r4
10008330:	d00b      	beq.n	1000834a <_svfiprintf_r+0x7e>
10008332:	465b      	mov	r3, fp
10008334:	4622      	mov	r2, r4
10008336:	4629      	mov	r1, r5
10008338:	4638      	mov	r0, r7
1000833a:	f7ff ff6b 	bl	10008214 <__ssputs_r>
1000833e:	3001      	adds	r0, #1
10008340:	f000 80a7 	beq.w	10008492 <_svfiprintf_r+0x1c6>
10008344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10008346:	445a      	add	r2, fp
10008348:	9209      	str	r2, [sp, #36]	@ 0x24
1000834a:	f89a 3000 	ldrb.w	r3, [sl]
1000834e:	2b00      	cmp	r3, #0
10008350:	f000 809f 	beq.w	10008492 <_svfiprintf_r+0x1c6>
10008354:	2300      	movs	r3, #0
10008356:	f04f 32ff 	mov.w	r2, #4294967295
1000835a:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000835e:	f10a 0a01 	add.w	sl, sl, #1
10008362:	9304      	str	r3, [sp, #16]
10008364:	9307      	str	r3, [sp, #28]
10008366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
1000836a:	931a      	str	r3, [sp, #104]	@ 0x68
1000836c:	4654      	mov	r4, sl
1000836e:	2205      	movs	r2, #5
10008370:	f814 1b01 	ldrb.w	r1, [r4], #1
10008374:	484e      	ldr	r0, [pc, #312]	@ (100084b0 <_svfiprintf_r+0x1e4>)
10008376:	f7f7 fe73 	bl	10000060 <memchr>
1000837a:	9a04      	ldr	r2, [sp, #16]
1000837c:	b9d8      	cbnz	r0, 100083b6 <_svfiprintf_r+0xea>
1000837e:	06d0      	lsls	r0, r2, #27
10008380:	bf44      	itt	mi
10008382:	2320      	movmi	r3, #32
10008384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10008388:	0711      	lsls	r1, r2, #28
1000838a:	bf44      	itt	mi
1000838c:	232b      	movmi	r3, #43	@ 0x2b
1000838e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10008392:	f89a 3000 	ldrb.w	r3, [sl]
10008396:	2b2a      	cmp	r3, #42	@ 0x2a
10008398:	d015      	beq.n	100083c6 <_svfiprintf_r+0xfa>
1000839a:	9a07      	ldr	r2, [sp, #28]
1000839c:	4654      	mov	r4, sl
1000839e:	2000      	movs	r0, #0
100083a0:	f04f 0c0a 	mov.w	ip, #10
100083a4:	4621      	mov	r1, r4
100083a6:	f811 3b01 	ldrb.w	r3, [r1], #1
100083aa:	3b30      	subs	r3, #48	@ 0x30
100083ac:	2b09      	cmp	r3, #9
100083ae:	d94b      	bls.n	10008448 <_svfiprintf_r+0x17c>
100083b0:	b1b0      	cbz	r0, 100083e0 <_svfiprintf_r+0x114>
100083b2:	9207      	str	r2, [sp, #28]
100083b4:	e014      	b.n	100083e0 <_svfiprintf_r+0x114>
100083b6:	eba0 0308 	sub.w	r3, r0, r8
100083ba:	fa09 f303 	lsl.w	r3, r9, r3
100083be:	4313      	orrs	r3, r2
100083c0:	9304      	str	r3, [sp, #16]
100083c2:	46a2      	mov	sl, r4
100083c4:	e7d2      	b.n	1000836c <_svfiprintf_r+0xa0>
100083c6:	9b03      	ldr	r3, [sp, #12]
100083c8:	1d19      	adds	r1, r3, #4
100083ca:	681b      	ldr	r3, [r3, #0]
100083cc:	9103      	str	r1, [sp, #12]
100083ce:	2b00      	cmp	r3, #0
100083d0:	bfbb      	ittet	lt
100083d2:	425b      	neglt	r3, r3
100083d4:	f042 0202 	orrlt.w	r2, r2, #2
100083d8:	9307      	strge	r3, [sp, #28]
100083da:	9307      	strlt	r3, [sp, #28]
100083dc:	bfb8      	it	lt
100083de:	9204      	strlt	r2, [sp, #16]
100083e0:	7823      	ldrb	r3, [r4, #0]
100083e2:	2b2e      	cmp	r3, #46	@ 0x2e
100083e4:	d10a      	bne.n	100083fc <_svfiprintf_r+0x130>
100083e6:	7863      	ldrb	r3, [r4, #1]
100083e8:	2b2a      	cmp	r3, #42	@ 0x2a
100083ea:	d132      	bne.n	10008452 <_svfiprintf_r+0x186>
100083ec:	9b03      	ldr	r3, [sp, #12]
100083ee:	1d1a      	adds	r2, r3, #4
100083f0:	681b      	ldr	r3, [r3, #0]
100083f2:	9203      	str	r2, [sp, #12]
100083f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
100083f8:	3402      	adds	r4, #2
100083fa:	9305      	str	r3, [sp, #20]
100083fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 100084c0 <_svfiprintf_r+0x1f4>
10008400:	7821      	ldrb	r1, [r4, #0]
10008402:	2203      	movs	r2, #3
10008404:	4650      	mov	r0, sl
10008406:	f7f7 fe2b 	bl	10000060 <memchr>
1000840a:	b138      	cbz	r0, 1000841c <_svfiprintf_r+0x150>
1000840c:	9b04      	ldr	r3, [sp, #16]
1000840e:	eba0 000a 	sub.w	r0, r0, sl
10008412:	2240      	movs	r2, #64	@ 0x40
10008414:	4082      	lsls	r2, r0
10008416:	4313      	orrs	r3, r2
10008418:	3401      	adds	r4, #1
1000841a:	9304      	str	r3, [sp, #16]
1000841c:	f814 1b01 	ldrb.w	r1, [r4], #1
10008420:	4824      	ldr	r0, [pc, #144]	@ (100084b4 <_svfiprintf_r+0x1e8>)
10008422:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
10008426:	2206      	movs	r2, #6
10008428:	f7f7 fe1a 	bl	10000060 <memchr>
1000842c:	2800      	cmp	r0, #0
1000842e:	d036      	beq.n	1000849e <_svfiprintf_r+0x1d2>
10008430:	4b21      	ldr	r3, [pc, #132]	@ (100084b8 <_svfiprintf_r+0x1ec>)
10008432:	bb1b      	cbnz	r3, 1000847c <_svfiprintf_r+0x1b0>
10008434:	9b03      	ldr	r3, [sp, #12]
10008436:	3307      	adds	r3, #7
10008438:	f023 0307 	bic.w	r3, r3, #7
1000843c:	3308      	adds	r3, #8
1000843e:	9303      	str	r3, [sp, #12]
10008440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10008442:	4433      	add	r3, r6
10008444:	9309      	str	r3, [sp, #36]	@ 0x24
10008446:	e76a      	b.n	1000831e <_svfiprintf_r+0x52>
10008448:	fb0c 3202 	mla	r2, ip, r2, r3
1000844c:	460c      	mov	r4, r1
1000844e:	2001      	movs	r0, #1
10008450:	e7a8      	b.n	100083a4 <_svfiprintf_r+0xd8>
10008452:	2300      	movs	r3, #0
10008454:	3401      	adds	r4, #1
10008456:	9305      	str	r3, [sp, #20]
10008458:	4619      	mov	r1, r3
1000845a:	f04f 0c0a 	mov.w	ip, #10
1000845e:	4620      	mov	r0, r4
10008460:	f810 2b01 	ldrb.w	r2, [r0], #1
10008464:	3a30      	subs	r2, #48	@ 0x30
10008466:	2a09      	cmp	r2, #9
10008468:	d903      	bls.n	10008472 <_svfiprintf_r+0x1a6>
1000846a:	2b00      	cmp	r3, #0
1000846c:	d0c6      	beq.n	100083fc <_svfiprintf_r+0x130>
1000846e:	9105      	str	r1, [sp, #20]
10008470:	e7c4      	b.n	100083fc <_svfiprintf_r+0x130>
10008472:	fb0c 2101 	mla	r1, ip, r1, r2
10008476:	4604      	mov	r4, r0
10008478:	2301      	movs	r3, #1
1000847a:	e7f0      	b.n	1000845e <_svfiprintf_r+0x192>
1000847c:	ab03      	add	r3, sp, #12
1000847e:	9300      	str	r3, [sp, #0]
10008480:	462a      	mov	r2, r5
10008482:	4b0e      	ldr	r3, [pc, #56]	@ (100084bc <_svfiprintf_r+0x1f0>)
10008484:	a904      	add	r1, sp, #16
10008486:	4638      	mov	r0, r7
10008488:	f3af 8000 	nop.w
1000848c:	1c42      	adds	r2, r0, #1
1000848e:	4606      	mov	r6, r0
10008490:	d1d6      	bne.n	10008440 <_svfiprintf_r+0x174>
10008492:	89ab      	ldrh	r3, [r5, #12]
10008494:	065b      	lsls	r3, r3, #25
10008496:	f53f af2d 	bmi.w	100082f4 <_svfiprintf_r+0x28>
1000849a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1000849c:	e72c      	b.n	100082f8 <_svfiprintf_r+0x2c>
1000849e:	ab03      	add	r3, sp, #12
100084a0:	9300      	str	r3, [sp, #0]
100084a2:	462a      	mov	r2, r5
100084a4:	4b05      	ldr	r3, [pc, #20]	@ (100084bc <_svfiprintf_r+0x1f0>)
100084a6:	a904      	add	r1, sp, #16
100084a8:	4638      	mov	r0, r7
100084aa:	f000 f9bb 	bl	10008824 <_printf_i>
100084ae:	e7ed      	b.n	1000848c <_svfiprintf_r+0x1c0>
100084b0:	10009365 	.word	0x10009365
100084b4:	1000936f 	.word	0x1000936f
100084b8:	00000000 	.word	0x00000000
100084bc:	10008215 	.word	0x10008215
100084c0:	1000936b 	.word	0x1000936b

100084c4 <__sfputc_r>:
100084c4:	6893      	ldr	r3, [r2, #8]
100084c6:	3b01      	subs	r3, #1
100084c8:	2b00      	cmp	r3, #0
100084ca:	b410      	push	{r4}
100084cc:	6093      	str	r3, [r2, #8]
100084ce:	da08      	bge.n	100084e2 <__sfputc_r+0x1e>
100084d0:	6994      	ldr	r4, [r2, #24]
100084d2:	42a3      	cmp	r3, r4
100084d4:	db01      	blt.n	100084da <__sfputc_r+0x16>
100084d6:	290a      	cmp	r1, #10
100084d8:	d103      	bne.n	100084e2 <__sfputc_r+0x1e>
100084da:	f85d 4b04 	ldr.w	r4, [sp], #4
100084de:	f000 bb6b 	b.w	10008bb8 <__swbuf_r>
100084e2:	6813      	ldr	r3, [r2, #0]
100084e4:	1c58      	adds	r0, r3, #1
100084e6:	6010      	str	r0, [r2, #0]
100084e8:	7019      	strb	r1, [r3, #0]
100084ea:	4608      	mov	r0, r1
100084ec:	f85d 4b04 	ldr.w	r4, [sp], #4
100084f0:	4770      	bx	lr

100084f2 <__sfputs_r>:
100084f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100084f4:	4606      	mov	r6, r0
100084f6:	460f      	mov	r7, r1
100084f8:	4614      	mov	r4, r2
100084fa:	18d5      	adds	r5, r2, r3
100084fc:	42ac      	cmp	r4, r5
100084fe:	d101      	bne.n	10008504 <__sfputs_r+0x12>
10008500:	2000      	movs	r0, #0
10008502:	e007      	b.n	10008514 <__sfputs_r+0x22>
10008504:	f814 1b01 	ldrb.w	r1, [r4], #1
10008508:	463a      	mov	r2, r7
1000850a:	4630      	mov	r0, r6
1000850c:	f7ff ffda 	bl	100084c4 <__sfputc_r>
10008510:	1c43      	adds	r3, r0, #1
10008512:	d1f3      	bne.n	100084fc <__sfputs_r+0xa>
10008514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10008518 <_vfiprintf_r>:
10008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000851c:	460d      	mov	r5, r1
1000851e:	b09d      	sub	sp, #116	@ 0x74
10008520:	4614      	mov	r4, r2
10008522:	4698      	mov	r8, r3
10008524:	4606      	mov	r6, r0
10008526:	b118      	cbz	r0, 10008530 <_vfiprintf_r+0x18>
10008528:	6a03      	ldr	r3, [r0, #32]
1000852a:	b90b      	cbnz	r3, 10008530 <_vfiprintf_r+0x18>
1000852c:	f7ff fc9a 	bl	10007e64 <__sinit>
10008530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10008532:	07d9      	lsls	r1, r3, #31
10008534:	d405      	bmi.n	10008542 <_vfiprintf_r+0x2a>
10008536:	89ab      	ldrh	r3, [r5, #12]
10008538:	059a      	lsls	r2, r3, #22
1000853a:	d402      	bmi.n	10008542 <_vfiprintf_r+0x2a>
1000853c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000853e:	f7ff fe08 	bl	10008152 <__retarget_lock_acquire_recursive>
10008542:	89ab      	ldrh	r3, [r5, #12]
10008544:	071b      	lsls	r3, r3, #28
10008546:	d501      	bpl.n	1000854c <_vfiprintf_r+0x34>
10008548:	692b      	ldr	r3, [r5, #16]
1000854a:	b99b      	cbnz	r3, 10008574 <_vfiprintf_r+0x5c>
1000854c:	4629      	mov	r1, r5
1000854e:	4630      	mov	r0, r6
10008550:	f000 fb70 	bl	10008c34 <__swsetup_r>
10008554:	b170      	cbz	r0, 10008574 <_vfiprintf_r+0x5c>
10008556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10008558:	07dc      	lsls	r4, r3, #31
1000855a:	d504      	bpl.n	10008566 <_vfiprintf_r+0x4e>
1000855c:	f04f 30ff 	mov.w	r0, #4294967295
10008560:	b01d      	add	sp, #116	@ 0x74
10008562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10008566:	89ab      	ldrh	r3, [r5, #12]
10008568:	0598      	lsls	r0, r3, #22
1000856a:	d4f7      	bmi.n	1000855c <_vfiprintf_r+0x44>
1000856c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000856e:	f7ff fdf1 	bl	10008154 <__retarget_lock_release_recursive>
10008572:	e7f3      	b.n	1000855c <_vfiprintf_r+0x44>
10008574:	2300      	movs	r3, #0
10008576:	9309      	str	r3, [sp, #36]	@ 0x24
10008578:	2320      	movs	r3, #32
1000857a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
1000857e:	f8cd 800c 	str.w	r8, [sp, #12]
10008582:	2330      	movs	r3, #48	@ 0x30
10008584:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 10008734 <_vfiprintf_r+0x21c>
10008588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
1000858c:	f04f 0901 	mov.w	r9, #1
10008590:	4623      	mov	r3, r4
10008592:	469a      	mov	sl, r3
10008594:	f813 2b01 	ldrb.w	r2, [r3], #1
10008598:	b10a      	cbz	r2, 1000859e <_vfiprintf_r+0x86>
1000859a:	2a25      	cmp	r2, #37	@ 0x25
1000859c:	d1f9      	bne.n	10008592 <_vfiprintf_r+0x7a>
1000859e:	ebba 0b04 	subs.w	fp, sl, r4
100085a2:	d00b      	beq.n	100085bc <_vfiprintf_r+0xa4>
100085a4:	465b      	mov	r3, fp
100085a6:	4622      	mov	r2, r4
100085a8:	4629      	mov	r1, r5
100085aa:	4630      	mov	r0, r6
100085ac:	f7ff ffa1 	bl	100084f2 <__sfputs_r>
100085b0:	3001      	adds	r0, #1
100085b2:	f000 80a7 	beq.w	10008704 <_vfiprintf_r+0x1ec>
100085b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
100085b8:	445a      	add	r2, fp
100085ba:	9209      	str	r2, [sp, #36]	@ 0x24
100085bc:	f89a 3000 	ldrb.w	r3, [sl]
100085c0:	2b00      	cmp	r3, #0
100085c2:	f000 809f 	beq.w	10008704 <_vfiprintf_r+0x1ec>
100085c6:	2300      	movs	r3, #0
100085c8:	f04f 32ff 	mov.w	r2, #4294967295
100085cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
100085d0:	f10a 0a01 	add.w	sl, sl, #1
100085d4:	9304      	str	r3, [sp, #16]
100085d6:	9307      	str	r3, [sp, #28]
100085d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
100085dc:	931a      	str	r3, [sp, #104]	@ 0x68
100085de:	4654      	mov	r4, sl
100085e0:	2205      	movs	r2, #5
100085e2:	f814 1b01 	ldrb.w	r1, [r4], #1
100085e6:	4853      	ldr	r0, [pc, #332]	@ (10008734 <_vfiprintf_r+0x21c>)
100085e8:	f7f7 fd3a 	bl	10000060 <memchr>
100085ec:	9a04      	ldr	r2, [sp, #16]
100085ee:	b9d8      	cbnz	r0, 10008628 <_vfiprintf_r+0x110>
100085f0:	06d1      	lsls	r1, r2, #27
100085f2:	bf44      	itt	mi
100085f4:	2320      	movmi	r3, #32
100085f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
100085fa:	0713      	lsls	r3, r2, #28
100085fc:	bf44      	itt	mi
100085fe:	232b      	movmi	r3, #43	@ 0x2b
10008600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10008604:	f89a 3000 	ldrb.w	r3, [sl]
10008608:	2b2a      	cmp	r3, #42	@ 0x2a
1000860a:	d015      	beq.n	10008638 <_vfiprintf_r+0x120>
1000860c:	9a07      	ldr	r2, [sp, #28]
1000860e:	4654      	mov	r4, sl
10008610:	2000      	movs	r0, #0
10008612:	f04f 0c0a 	mov.w	ip, #10
10008616:	4621      	mov	r1, r4
10008618:	f811 3b01 	ldrb.w	r3, [r1], #1
1000861c:	3b30      	subs	r3, #48	@ 0x30
1000861e:	2b09      	cmp	r3, #9
10008620:	d94b      	bls.n	100086ba <_vfiprintf_r+0x1a2>
10008622:	b1b0      	cbz	r0, 10008652 <_vfiprintf_r+0x13a>
10008624:	9207      	str	r2, [sp, #28]
10008626:	e014      	b.n	10008652 <_vfiprintf_r+0x13a>
10008628:	eba0 0308 	sub.w	r3, r0, r8
1000862c:	fa09 f303 	lsl.w	r3, r9, r3
10008630:	4313      	orrs	r3, r2
10008632:	9304      	str	r3, [sp, #16]
10008634:	46a2      	mov	sl, r4
10008636:	e7d2      	b.n	100085de <_vfiprintf_r+0xc6>
10008638:	9b03      	ldr	r3, [sp, #12]
1000863a:	1d19      	adds	r1, r3, #4
1000863c:	681b      	ldr	r3, [r3, #0]
1000863e:	9103      	str	r1, [sp, #12]
10008640:	2b00      	cmp	r3, #0
10008642:	bfbb      	ittet	lt
10008644:	425b      	neglt	r3, r3
10008646:	f042 0202 	orrlt.w	r2, r2, #2
1000864a:	9307      	strge	r3, [sp, #28]
1000864c:	9307      	strlt	r3, [sp, #28]
1000864e:	bfb8      	it	lt
10008650:	9204      	strlt	r2, [sp, #16]
10008652:	7823      	ldrb	r3, [r4, #0]
10008654:	2b2e      	cmp	r3, #46	@ 0x2e
10008656:	d10a      	bne.n	1000866e <_vfiprintf_r+0x156>
10008658:	7863      	ldrb	r3, [r4, #1]
1000865a:	2b2a      	cmp	r3, #42	@ 0x2a
1000865c:	d132      	bne.n	100086c4 <_vfiprintf_r+0x1ac>
1000865e:	9b03      	ldr	r3, [sp, #12]
10008660:	1d1a      	adds	r2, r3, #4
10008662:	681b      	ldr	r3, [r3, #0]
10008664:	9203      	str	r2, [sp, #12]
10008666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
1000866a:	3402      	adds	r4, #2
1000866c:	9305      	str	r3, [sp, #20]
1000866e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 10008744 <_vfiprintf_r+0x22c>
10008672:	7821      	ldrb	r1, [r4, #0]
10008674:	2203      	movs	r2, #3
10008676:	4650      	mov	r0, sl
10008678:	f7f7 fcf2 	bl	10000060 <memchr>
1000867c:	b138      	cbz	r0, 1000868e <_vfiprintf_r+0x176>
1000867e:	9b04      	ldr	r3, [sp, #16]
10008680:	eba0 000a 	sub.w	r0, r0, sl
10008684:	2240      	movs	r2, #64	@ 0x40
10008686:	4082      	lsls	r2, r0
10008688:	4313      	orrs	r3, r2
1000868a:	3401      	adds	r4, #1
1000868c:	9304      	str	r3, [sp, #16]
1000868e:	f814 1b01 	ldrb.w	r1, [r4], #1
10008692:	4829      	ldr	r0, [pc, #164]	@ (10008738 <_vfiprintf_r+0x220>)
10008694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
10008698:	2206      	movs	r2, #6
1000869a:	f7f7 fce1 	bl	10000060 <memchr>
1000869e:	2800      	cmp	r0, #0
100086a0:	d03f      	beq.n	10008722 <_vfiprintf_r+0x20a>
100086a2:	4b26      	ldr	r3, [pc, #152]	@ (1000873c <_vfiprintf_r+0x224>)
100086a4:	bb1b      	cbnz	r3, 100086ee <_vfiprintf_r+0x1d6>
100086a6:	9b03      	ldr	r3, [sp, #12]
100086a8:	3307      	adds	r3, #7
100086aa:	f023 0307 	bic.w	r3, r3, #7
100086ae:	3308      	adds	r3, #8
100086b0:	9303      	str	r3, [sp, #12]
100086b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
100086b4:	443b      	add	r3, r7
100086b6:	9309      	str	r3, [sp, #36]	@ 0x24
100086b8:	e76a      	b.n	10008590 <_vfiprintf_r+0x78>
100086ba:	fb0c 3202 	mla	r2, ip, r2, r3
100086be:	460c      	mov	r4, r1
100086c0:	2001      	movs	r0, #1
100086c2:	e7a8      	b.n	10008616 <_vfiprintf_r+0xfe>
100086c4:	2300      	movs	r3, #0
100086c6:	3401      	adds	r4, #1
100086c8:	9305      	str	r3, [sp, #20]
100086ca:	4619      	mov	r1, r3
100086cc:	f04f 0c0a 	mov.w	ip, #10
100086d0:	4620      	mov	r0, r4
100086d2:	f810 2b01 	ldrb.w	r2, [r0], #1
100086d6:	3a30      	subs	r2, #48	@ 0x30
100086d8:	2a09      	cmp	r2, #9
100086da:	d903      	bls.n	100086e4 <_vfiprintf_r+0x1cc>
100086dc:	2b00      	cmp	r3, #0
100086de:	d0c6      	beq.n	1000866e <_vfiprintf_r+0x156>
100086e0:	9105      	str	r1, [sp, #20]
100086e2:	e7c4      	b.n	1000866e <_vfiprintf_r+0x156>
100086e4:	fb0c 2101 	mla	r1, ip, r1, r2
100086e8:	4604      	mov	r4, r0
100086ea:	2301      	movs	r3, #1
100086ec:	e7f0      	b.n	100086d0 <_vfiprintf_r+0x1b8>
100086ee:	ab03      	add	r3, sp, #12
100086f0:	9300      	str	r3, [sp, #0]
100086f2:	462a      	mov	r2, r5
100086f4:	4b12      	ldr	r3, [pc, #72]	@ (10008740 <_vfiprintf_r+0x228>)
100086f6:	a904      	add	r1, sp, #16
100086f8:	4630      	mov	r0, r6
100086fa:	f3af 8000 	nop.w
100086fe:	4607      	mov	r7, r0
10008700:	1c78      	adds	r0, r7, #1
10008702:	d1d6      	bne.n	100086b2 <_vfiprintf_r+0x19a>
10008704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10008706:	07d9      	lsls	r1, r3, #31
10008708:	d405      	bmi.n	10008716 <_vfiprintf_r+0x1fe>
1000870a:	89ab      	ldrh	r3, [r5, #12]
1000870c:	059a      	lsls	r2, r3, #22
1000870e:	d402      	bmi.n	10008716 <_vfiprintf_r+0x1fe>
10008710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
10008712:	f7ff fd1f 	bl	10008154 <__retarget_lock_release_recursive>
10008716:	89ab      	ldrh	r3, [r5, #12]
10008718:	065b      	lsls	r3, r3, #25
1000871a:	f53f af1f 	bmi.w	1000855c <_vfiprintf_r+0x44>
1000871e:	9809      	ldr	r0, [sp, #36]	@ 0x24
10008720:	e71e      	b.n	10008560 <_vfiprintf_r+0x48>
10008722:	ab03      	add	r3, sp, #12
10008724:	9300      	str	r3, [sp, #0]
10008726:	462a      	mov	r2, r5
10008728:	4b05      	ldr	r3, [pc, #20]	@ (10008740 <_vfiprintf_r+0x228>)
1000872a:	a904      	add	r1, sp, #16
1000872c:	4630      	mov	r0, r6
1000872e:	f000 f879 	bl	10008824 <_printf_i>
10008732:	e7e4      	b.n	100086fe <_vfiprintf_r+0x1e6>
10008734:	10009365 	.word	0x10009365
10008738:	1000936f 	.word	0x1000936f
1000873c:	00000000 	.word	0x00000000
10008740:	100084f3 	.word	0x100084f3
10008744:	1000936b 	.word	0x1000936b

10008748 <_printf_common>:
10008748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000874c:	4616      	mov	r6, r2
1000874e:	4698      	mov	r8, r3
10008750:	688a      	ldr	r2, [r1, #8]
10008752:	690b      	ldr	r3, [r1, #16]
10008754:	f8dd 9020 	ldr.w	r9, [sp, #32]
10008758:	4293      	cmp	r3, r2
1000875a:	bfb8      	it	lt
1000875c:	4613      	movlt	r3, r2
1000875e:	6033      	str	r3, [r6, #0]
10008760:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
10008764:	4607      	mov	r7, r0
10008766:	460c      	mov	r4, r1
10008768:	b10a      	cbz	r2, 1000876e <_printf_common+0x26>
1000876a:	3301      	adds	r3, #1
1000876c:	6033      	str	r3, [r6, #0]
1000876e:	6823      	ldr	r3, [r4, #0]
10008770:	0699      	lsls	r1, r3, #26
10008772:	bf42      	ittt	mi
10008774:	6833      	ldrmi	r3, [r6, #0]
10008776:	3302      	addmi	r3, #2
10008778:	6033      	strmi	r3, [r6, #0]
1000877a:	6825      	ldr	r5, [r4, #0]
1000877c:	f015 0506 	ands.w	r5, r5, #6
10008780:	d106      	bne.n	10008790 <_printf_common+0x48>
10008782:	f104 0a19 	add.w	sl, r4, #25
10008786:	68e3      	ldr	r3, [r4, #12]
10008788:	6832      	ldr	r2, [r6, #0]
1000878a:	1a9b      	subs	r3, r3, r2
1000878c:	42ab      	cmp	r3, r5
1000878e:	dc26      	bgt.n	100087de <_printf_common+0x96>
10008790:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
10008794:	6822      	ldr	r2, [r4, #0]
10008796:	3b00      	subs	r3, #0
10008798:	bf18      	it	ne
1000879a:	2301      	movne	r3, #1
1000879c:	0692      	lsls	r2, r2, #26
1000879e:	d42b      	bmi.n	100087f8 <_printf_common+0xb0>
100087a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
100087a4:	4641      	mov	r1, r8
100087a6:	4638      	mov	r0, r7
100087a8:	47c8      	blx	r9
100087aa:	3001      	adds	r0, #1
100087ac:	d01e      	beq.n	100087ec <_printf_common+0xa4>
100087ae:	6823      	ldr	r3, [r4, #0]
100087b0:	6922      	ldr	r2, [r4, #16]
100087b2:	f003 0306 	and.w	r3, r3, #6
100087b6:	2b04      	cmp	r3, #4
100087b8:	bf02      	ittt	eq
100087ba:	68e5      	ldreq	r5, [r4, #12]
100087bc:	6833      	ldreq	r3, [r6, #0]
100087be:	1aed      	subeq	r5, r5, r3
100087c0:	68a3      	ldr	r3, [r4, #8]
100087c2:	bf0c      	ite	eq
100087c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
100087c8:	2500      	movne	r5, #0
100087ca:	4293      	cmp	r3, r2
100087cc:	bfc4      	itt	gt
100087ce:	1a9b      	subgt	r3, r3, r2
100087d0:	18ed      	addgt	r5, r5, r3
100087d2:	2600      	movs	r6, #0
100087d4:	341a      	adds	r4, #26
100087d6:	42b5      	cmp	r5, r6
100087d8:	d11a      	bne.n	10008810 <_printf_common+0xc8>
100087da:	2000      	movs	r0, #0
100087dc:	e008      	b.n	100087f0 <_printf_common+0xa8>
100087de:	2301      	movs	r3, #1
100087e0:	4652      	mov	r2, sl
100087e2:	4641      	mov	r1, r8
100087e4:	4638      	mov	r0, r7
100087e6:	47c8      	blx	r9
100087e8:	3001      	adds	r0, #1
100087ea:	d103      	bne.n	100087f4 <_printf_common+0xac>
100087ec:	f04f 30ff 	mov.w	r0, #4294967295
100087f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100087f4:	3501      	adds	r5, #1
100087f6:	e7c6      	b.n	10008786 <_printf_common+0x3e>
100087f8:	18e1      	adds	r1, r4, r3
100087fa:	1c5a      	adds	r2, r3, #1
100087fc:	2030      	movs	r0, #48	@ 0x30
100087fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
10008802:	4422      	add	r2, r4
10008804:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
10008808:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
1000880c:	3302      	adds	r3, #2
1000880e:	e7c7      	b.n	100087a0 <_printf_common+0x58>
10008810:	2301      	movs	r3, #1
10008812:	4622      	mov	r2, r4
10008814:	4641      	mov	r1, r8
10008816:	4638      	mov	r0, r7
10008818:	47c8      	blx	r9
1000881a:	3001      	adds	r0, #1
1000881c:	d0e6      	beq.n	100087ec <_printf_common+0xa4>
1000881e:	3601      	adds	r6, #1
10008820:	e7d9      	b.n	100087d6 <_printf_common+0x8e>
	...

10008824 <_printf_i>:
10008824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
10008828:	7e0f      	ldrb	r7, [r1, #24]
1000882a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1000882c:	2f78      	cmp	r7, #120	@ 0x78
1000882e:	4691      	mov	r9, r2
10008830:	4680      	mov	r8, r0
10008832:	460c      	mov	r4, r1
10008834:	469a      	mov	sl, r3
10008836:	f101 0243 	add.w	r2, r1, #67	@ 0x43
1000883a:	d807      	bhi.n	1000884c <_printf_i+0x28>
1000883c:	2f62      	cmp	r7, #98	@ 0x62
1000883e:	d80a      	bhi.n	10008856 <_printf_i+0x32>
10008840:	2f00      	cmp	r7, #0
10008842:	f000 80d1 	beq.w	100089e8 <_printf_i+0x1c4>
10008846:	2f58      	cmp	r7, #88	@ 0x58
10008848:	f000 80b8 	beq.w	100089bc <_printf_i+0x198>
1000884c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
10008850:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
10008854:	e03a      	b.n	100088cc <_printf_i+0xa8>
10008856:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
1000885a:	2b15      	cmp	r3, #21
1000885c:	d8f6      	bhi.n	1000884c <_printf_i+0x28>
1000885e:	a101      	add	r1, pc, #4	@ (adr r1, 10008864 <_printf_i+0x40>)
10008860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
10008864:	100088bd 	.word	0x100088bd
10008868:	100088d1 	.word	0x100088d1
1000886c:	1000884d 	.word	0x1000884d
10008870:	1000884d 	.word	0x1000884d
10008874:	1000884d 	.word	0x1000884d
10008878:	1000884d 	.word	0x1000884d
1000887c:	100088d1 	.word	0x100088d1
10008880:	1000884d 	.word	0x1000884d
10008884:	1000884d 	.word	0x1000884d
10008888:	1000884d 	.word	0x1000884d
1000888c:	1000884d 	.word	0x1000884d
10008890:	100089cf 	.word	0x100089cf
10008894:	100088fb 	.word	0x100088fb
10008898:	10008989 	.word	0x10008989
1000889c:	1000884d 	.word	0x1000884d
100088a0:	1000884d 	.word	0x1000884d
100088a4:	100089f1 	.word	0x100089f1
100088a8:	1000884d 	.word	0x1000884d
100088ac:	100088fb 	.word	0x100088fb
100088b0:	1000884d 	.word	0x1000884d
100088b4:	1000884d 	.word	0x1000884d
100088b8:	10008991 	.word	0x10008991
100088bc:	6833      	ldr	r3, [r6, #0]
100088be:	1d1a      	adds	r2, r3, #4
100088c0:	681b      	ldr	r3, [r3, #0]
100088c2:	6032      	str	r2, [r6, #0]
100088c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
100088c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
100088cc:	2301      	movs	r3, #1
100088ce:	e09c      	b.n	10008a0a <_printf_i+0x1e6>
100088d0:	6833      	ldr	r3, [r6, #0]
100088d2:	6820      	ldr	r0, [r4, #0]
100088d4:	1d19      	adds	r1, r3, #4
100088d6:	6031      	str	r1, [r6, #0]
100088d8:	0606      	lsls	r6, r0, #24
100088da:	d501      	bpl.n	100088e0 <_printf_i+0xbc>
100088dc:	681d      	ldr	r5, [r3, #0]
100088de:	e003      	b.n	100088e8 <_printf_i+0xc4>
100088e0:	0645      	lsls	r5, r0, #25
100088e2:	d5fb      	bpl.n	100088dc <_printf_i+0xb8>
100088e4:	f9b3 5000 	ldrsh.w	r5, [r3]
100088e8:	2d00      	cmp	r5, #0
100088ea:	da03      	bge.n	100088f4 <_printf_i+0xd0>
100088ec:	232d      	movs	r3, #45	@ 0x2d
100088ee:	426d      	negs	r5, r5
100088f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
100088f4:	4858      	ldr	r0, [pc, #352]	@ (10008a58 <_printf_i+0x234>)
100088f6:	230a      	movs	r3, #10
100088f8:	e011      	b.n	1000891e <_printf_i+0xfa>
100088fa:	6821      	ldr	r1, [r4, #0]
100088fc:	6833      	ldr	r3, [r6, #0]
100088fe:	0608      	lsls	r0, r1, #24
10008900:	f853 5b04 	ldr.w	r5, [r3], #4
10008904:	d402      	bmi.n	1000890c <_printf_i+0xe8>
10008906:	0649      	lsls	r1, r1, #25
10008908:	bf48      	it	mi
1000890a:	b2ad      	uxthmi	r5, r5
1000890c:	2f6f      	cmp	r7, #111	@ 0x6f
1000890e:	4852      	ldr	r0, [pc, #328]	@ (10008a58 <_printf_i+0x234>)
10008910:	6033      	str	r3, [r6, #0]
10008912:	bf14      	ite	ne
10008914:	230a      	movne	r3, #10
10008916:	2308      	moveq	r3, #8
10008918:	2100      	movs	r1, #0
1000891a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
1000891e:	6866      	ldr	r6, [r4, #4]
10008920:	60a6      	str	r6, [r4, #8]
10008922:	2e00      	cmp	r6, #0
10008924:	db05      	blt.n	10008932 <_printf_i+0x10e>
10008926:	6821      	ldr	r1, [r4, #0]
10008928:	432e      	orrs	r6, r5
1000892a:	f021 0104 	bic.w	r1, r1, #4
1000892e:	6021      	str	r1, [r4, #0]
10008930:	d04b      	beq.n	100089ca <_printf_i+0x1a6>
10008932:	4616      	mov	r6, r2
10008934:	fbb5 f1f3 	udiv	r1, r5, r3
10008938:	fb03 5711 	mls	r7, r3, r1, r5
1000893c:	5dc7      	ldrb	r7, [r0, r7]
1000893e:	f806 7d01 	strb.w	r7, [r6, #-1]!
10008942:	462f      	mov	r7, r5
10008944:	42bb      	cmp	r3, r7
10008946:	460d      	mov	r5, r1
10008948:	d9f4      	bls.n	10008934 <_printf_i+0x110>
1000894a:	2b08      	cmp	r3, #8
1000894c:	d10b      	bne.n	10008966 <_printf_i+0x142>
1000894e:	6823      	ldr	r3, [r4, #0]
10008950:	07df      	lsls	r7, r3, #31
10008952:	d508      	bpl.n	10008966 <_printf_i+0x142>
10008954:	6923      	ldr	r3, [r4, #16]
10008956:	6861      	ldr	r1, [r4, #4]
10008958:	4299      	cmp	r1, r3
1000895a:	bfde      	ittt	le
1000895c:	2330      	movle	r3, #48	@ 0x30
1000895e:	f806 3c01 	strble.w	r3, [r6, #-1]
10008962:	f106 36ff 	addle.w	r6, r6, #4294967295
10008966:	1b92      	subs	r2, r2, r6
10008968:	6122      	str	r2, [r4, #16]
1000896a:	f8cd a000 	str.w	sl, [sp]
1000896e:	464b      	mov	r3, r9
10008970:	aa03      	add	r2, sp, #12
10008972:	4621      	mov	r1, r4
10008974:	4640      	mov	r0, r8
10008976:	f7ff fee7 	bl	10008748 <_printf_common>
1000897a:	3001      	adds	r0, #1
1000897c:	d14a      	bne.n	10008a14 <_printf_i+0x1f0>
1000897e:	f04f 30ff 	mov.w	r0, #4294967295
10008982:	b004      	add	sp, #16
10008984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10008988:	6823      	ldr	r3, [r4, #0]
1000898a:	f043 0320 	orr.w	r3, r3, #32
1000898e:	6023      	str	r3, [r4, #0]
10008990:	4832      	ldr	r0, [pc, #200]	@ (10008a5c <_printf_i+0x238>)
10008992:	2778      	movs	r7, #120	@ 0x78
10008994:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
10008998:	6823      	ldr	r3, [r4, #0]
1000899a:	6831      	ldr	r1, [r6, #0]
1000899c:	061f      	lsls	r7, r3, #24
1000899e:	f851 5b04 	ldr.w	r5, [r1], #4
100089a2:	d402      	bmi.n	100089aa <_printf_i+0x186>
100089a4:	065f      	lsls	r7, r3, #25
100089a6:	bf48      	it	mi
100089a8:	b2ad      	uxthmi	r5, r5
100089aa:	6031      	str	r1, [r6, #0]
100089ac:	07d9      	lsls	r1, r3, #31
100089ae:	bf44      	itt	mi
100089b0:	f043 0320 	orrmi.w	r3, r3, #32
100089b4:	6023      	strmi	r3, [r4, #0]
100089b6:	b11d      	cbz	r5, 100089c0 <_printf_i+0x19c>
100089b8:	2310      	movs	r3, #16
100089ba:	e7ad      	b.n	10008918 <_printf_i+0xf4>
100089bc:	4826      	ldr	r0, [pc, #152]	@ (10008a58 <_printf_i+0x234>)
100089be:	e7e9      	b.n	10008994 <_printf_i+0x170>
100089c0:	6823      	ldr	r3, [r4, #0]
100089c2:	f023 0320 	bic.w	r3, r3, #32
100089c6:	6023      	str	r3, [r4, #0]
100089c8:	e7f6      	b.n	100089b8 <_printf_i+0x194>
100089ca:	4616      	mov	r6, r2
100089cc:	e7bd      	b.n	1000894a <_printf_i+0x126>
100089ce:	6833      	ldr	r3, [r6, #0]
100089d0:	6825      	ldr	r5, [r4, #0]
100089d2:	6961      	ldr	r1, [r4, #20]
100089d4:	1d18      	adds	r0, r3, #4
100089d6:	6030      	str	r0, [r6, #0]
100089d8:	062e      	lsls	r6, r5, #24
100089da:	681b      	ldr	r3, [r3, #0]
100089dc:	d501      	bpl.n	100089e2 <_printf_i+0x1be>
100089de:	6019      	str	r1, [r3, #0]
100089e0:	e002      	b.n	100089e8 <_printf_i+0x1c4>
100089e2:	0668      	lsls	r0, r5, #25
100089e4:	d5fb      	bpl.n	100089de <_printf_i+0x1ba>
100089e6:	8019      	strh	r1, [r3, #0]
100089e8:	2300      	movs	r3, #0
100089ea:	6123      	str	r3, [r4, #16]
100089ec:	4616      	mov	r6, r2
100089ee:	e7bc      	b.n	1000896a <_printf_i+0x146>
100089f0:	6833      	ldr	r3, [r6, #0]
100089f2:	1d1a      	adds	r2, r3, #4
100089f4:	6032      	str	r2, [r6, #0]
100089f6:	681e      	ldr	r6, [r3, #0]
100089f8:	6862      	ldr	r2, [r4, #4]
100089fa:	2100      	movs	r1, #0
100089fc:	4630      	mov	r0, r6
100089fe:	f7f7 fb2f 	bl	10000060 <memchr>
10008a02:	b108      	cbz	r0, 10008a08 <_printf_i+0x1e4>
10008a04:	1b80      	subs	r0, r0, r6
10008a06:	6060      	str	r0, [r4, #4]
10008a08:	6863      	ldr	r3, [r4, #4]
10008a0a:	6123      	str	r3, [r4, #16]
10008a0c:	2300      	movs	r3, #0
10008a0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
10008a12:	e7aa      	b.n	1000896a <_printf_i+0x146>
10008a14:	6923      	ldr	r3, [r4, #16]
10008a16:	4632      	mov	r2, r6
10008a18:	4649      	mov	r1, r9
10008a1a:	4640      	mov	r0, r8
10008a1c:	47d0      	blx	sl
10008a1e:	3001      	adds	r0, #1
10008a20:	d0ad      	beq.n	1000897e <_printf_i+0x15a>
10008a22:	6823      	ldr	r3, [r4, #0]
10008a24:	079b      	lsls	r3, r3, #30
10008a26:	d413      	bmi.n	10008a50 <_printf_i+0x22c>
10008a28:	68e0      	ldr	r0, [r4, #12]
10008a2a:	9b03      	ldr	r3, [sp, #12]
10008a2c:	4298      	cmp	r0, r3
10008a2e:	bfb8      	it	lt
10008a30:	4618      	movlt	r0, r3
10008a32:	e7a6      	b.n	10008982 <_printf_i+0x15e>
10008a34:	2301      	movs	r3, #1
10008a36:	4632      	mov	r2, r6
10008a38:	4649      	mov	r1, r9
10008a3a:	4640      	mov	r0, r8
10008a3c:	47d0      	blx	sl
10008a3e:	3001      	adds	r0, #1
10008a40:	d09d      	beq.n	1000897e <_printf_i+0x15a>
10008a42:	3501      	adds	r5, #1
10008a44:	68e3      	ldr	r3, [r4, #12]
10008a46:	9903      	ldr	r1, [sp, #12]
10008a48:	1a5b      	subs	r3, r3, r1
10008a4a:	42ab      	cmp	r3, r5
10008a4c:	dcf2      	bgt.n	10008a34 <_printf_i+0x210>
10008a4e:	e7eb      	b.n	10008a28 <_printf_i+0x204>
10008a50:	2500      	movs	r5, #0
10008a52:	f104 0619 	add.w	r6, r4, #25
10008a56:	e7f5      	b.n	10008a44 <_printf_i+0x220>
10008a58:	10009376 	.word	0x10009376
10008a5c:	10009387 	.word	0x10009387

10008a60 <__sflush_r>:
10008a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
10008a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10008a68:	0716      	lsls	r6, r2, #28
10008a6a:	4605      	mov	r5, r0
10008a6c:	460c      	mov	r4, r1
10008a6e:	d454      	bmi.n	10008b1a <__sflush_r+0xba>
10008a70:	684b      	ldr	r3, [r1, #4]
10008a72:	2b00      	cmp	r3, #0
10008a74:	dc02      	bgt.n	10008a7c <__sflush_r+0x1c>
10008a76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
10008a78:	2b00      	cmp	r3, #0
10008a7a:	dd48      	ble.n	10008b0e <__sflush_r+0xae>
10008a7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
10008a7e:	2e00      	cmp	r6, #0
10008a80:	d045      	beq.n	10008b0e <__sflush_r+0xae>
10008a82:	2300      	movs	r3, #0
10008a84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
10008a88:	682f      	ldr	r7, [r5, #0]
10008a8a:	6a21      	ldr	r1, [r4, #32]
10008a8c:	602b      	str	r3, [r5, #0]
10008a8e:	d030      	beq.n	10008af2 <__sflush_r+0x92>
10008a90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
10008a92:	89a3      	ldrh	r3, [r4, #12]
10008a94:	0759      	lsls	r1, r3, #29
10008a96:	d505      	bpl.n	10008aa4 <__sflush_r+0x44>
10008a98:	6863      	ldr	r3, [r4, #4]
10008a9a:	1ad2      	subs	r2, r2, r3
10008a9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
10008a9e:	b10b      	cbz	r3, 10008aa4 <__sflush_r+0x44>
10008aa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
10008aa2:	1ad2      	subs	r2, r2, r3
10008aa4:	2300      	movs	r3, #0
10008aa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
10008aa8:	6a21      	ldr	r1, [r4, #32]
10008aaa:	4628      	mov	r0, r5
10008aac:	47b0      	blx	r6
10008aae:	1c43      	adds	r3, r0, #1
10008ab0:	89a3      	ldrh	r3, [r4, #12]
10008ab2:	d106      	bne.n	10008ac2 <__sflush_r+0x62>
10008ab4:	6829      	ldr	r1, [r5, #0]
10008ab6:	291d      	cmp	r1, #29
10008ab8:	d82b      	bhi.n	10008b12 <__sflush_r+0xb2>
10008aba:	4a2a      	ldr	r2, [pc, #168]	@ (10008b64 <__sflush_r+0x104>)
10008abc:	40ca      	lsrs	r2, r1
10008abe:	07d6      	lsls	r6, r2, #31
10008ac0:	d527      	bpl.n	10008b12 <__sflush_r+0xb2>
10008ac2:	2200      	movs	r2, #0
10008ac4:	6062      	str	r2, [r4, #4]
10008ac6:	04d9      	lsls	r1, r3, #19
10008ac8:	6922      	ldr	r2, [r4, #16]
10008aca:	6022      	str	r2, [r4, #0]
10008acc:	d504      	bpl.n	10008ad8 <__sflush_r+0x78>
10008ace:	1c42      	adds	r2, r0, #1
10008ad0:	d101      	bne.n	10008ad6 <__sflush_r+0x76>
10008ad2:	682b      	ldr	r3, [r5, #0]
10008ad4:	b903      	cbnz	r3, 10008ad8 <__sflush_r+0x78>
10008ad6:	6560      	str	r0, [r4, #84]	@ 0x54
10008ad8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10008ada:	602f      	str	r7, [r5, #0]
10008adc:	b1b9      	cbz	r1, 10008b0e <__sflush_r+0xae>
10008ade:	f104 0344 	add.w	r3, r4, #68	@ 0x44
10008ae2:	4299      	cmp	r1, r3
10008ae4:	d002      	beq.n	10008aec <__sflush_r+0x8c>
10008ae6:	4628      	mov	r0, r5
10008ae8:	f7ff fb4a 	bl	10008180 <_free_r>
10008aec:	2300      	movs	r3, #0
10008aee:	6363      	str	r3, [r4, #52]	@ 0x34
10008af0:	e00d      	b.n	10008b0e <__sflush_r+0xae>
10008af2:	2301      	movs	r3, #1
10008af4:	4628      	mov	r0, r5
10008af6:	47b0      	blx	r6
10008af8:	4602      	mov	r2, r0
10008afa:	1c50      	adds	r0, r2, #1
10008afc:	d1c9      	bne.n	10008a92 <__sflush_r+0x32>
10008afe:	682b      	ldr	r3, [r5, #0]
10008b00:	2b00      	cmp	r3, #0
10008b02:	d0c6      	beq.n	10008a92 <__sflush_r+0x32>
10008b04:	2b1d      	cmp	r3, #29
10008b06:	d001      	beq.n	10008b0c <__sflush_r+0xac>
10008b08:	2b16      	cmp	r3, #22
10008b0a:	d11e      	bne.n	10008b4a <__sflush_r+0xea>
10008b0c:	602f      	str	r7, [r5, #0]
10008b0e:	2000      	movs	r0, #0
10008b10:	e022      	b.n	10008b58 <__sflush_r+0xf8>
10008b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10008b16:	b21b      	sxth	r3, r3
10008b18:	e01b      	b.n	10008b52 <__sflush_r+0xf2>
10008b1a:	690f      	ldr	r7, [r1, #16]
10008b1c:	2f00      	cmp	r7, #0
10008b1e:	d0f6      	beq.n	10008b0e <__sflush_r+0xae>
10008b20:	0793      	lsls	r3, r2, #30
10008b22:	680e      	ldr	r6, [r1, #0]
10008b24:	bf08      	it	eq
10008b26:	694b      	ldreq	r3, [r1, #20]
10008b28:	600f      	str	r7, [r1, #0]
10008b2a:	bf18      	it	ne
10008b2c:	2300      	movne	r3, #0
10008b2e:	eba6 0807 	sub.w	r8, r6, r7
10008b32:	608b      	str	r3, [r1, #8]
10008b34:	f1b8 0f00 	cmp.w	r8, #0
10008b38:	dde9      	ble.n	10008b0e <__sflush_r+0xae>
10008b3a:	6a21      	ldr	r1, [r4, #32]
10008b3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
10008b3e:	4643      	mov	r3, r8
10008b40:	463a      	mov	r2, r7
10008b42:	4628      	mov	r0, r5
10008b44:	47b0      	blx	r6
10008b46:	2800      	cmp	r0, #0
10008b48:	dc08      	bgt.n	10008b5c <__sflush_r+0xfc>
10008b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10008b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10008b52:	81a3      	strh	r3, [r4, #12]
10008b54:	f04f 30ff 	mov.w	r0, #4294967295
10008b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10008b5c:	4407      	add	r7, r0
10008b5e:	eba8 0800 	sub.w	r8, r8, r0
10008b62:	e7e7      	b.n	10008b34 <__sflush_r+0xd4>
10008b64:	20400001 	.word	0x20400001

10008b68 <_fflush_r>:
10008b68:	b538      	push	{r3, r4, r5, lr}
10008b6a:	690b      	ldr	r3, [r1, #16]
10008b6c:	4605      	mov	r5, r0
10008b6e:	460c      	mov	r4, r1
10008b70:	b913      	cbnz	r3, 10008b78 <_fflush_r+0x10>
10008b72:	2500      	movs	r5, #0
10008b74:	4628      	mov	r0, r5
10008b76:	bd38      	pop	{r3, r4, r5, pc}
10008b78:	b118      	cbz	r0, 10008b82 <_fflush_r+0x1a>
10008b7a:	6a03      	ldr	r3, [r0, #32]
10008b7c:	b90b      	cbnz	r3, 10008b82 <_fflush_r+0x1a>
10008b7e:	f7ff f971 	bl	10007e64 <__sinit>
10008b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10008b86:	2b00      	cmp	r3, #0
10008b88:	d0f3      	beq.n	10008b72 <_fflush_r+0xa>
10008b8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10008b8c:	07d0      	lsls	r0, r2, #31
10008b8e:	d404      	bmi.n	10008b9a <_fflush_r+0x32>
10008b90:	0599      	lsls	r1, r3, #22
10008b92:	d402      	bmi.n	10008b9a <_fflush_r+0x32>
10008b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10008b96:	f7ff fadc 	bl	10008152 <__retarget_lock_acquire_recursive>
10008b9a:	4628      	mov	r0, r5
10008b9c:	4621      	mov	r1, r4
10008b9e:	f7ff ff5f 	bl	10008a60 <__sflush_r>
10008ba2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10008ba4:	07da      	lsls	r2, r3, #31
10008ba6:	4605      	mov	r5, r0
10008ba8:	d4e4      	bmi.n	10008b74 <_fflush_r+0xc>
10008baa:	89a3      	ldrh	r3, [r4, #12]
10008bac:	059b      	lsls	r3, r3, #22
10008bae:	d4e1      	bmi.n	10008b74 <_fflush_r+0xc>
10008bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10008bb2:	f7ff facf 	bl	10008154 <__retarget_lock_release_recursive>
10008bb6:	e7dd      	b.n	10008b74 <_fflush_r+0xc>

10008bb8 <__swbuf_r>:
10008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008bba:	460e      	mov	r6, r1
10008bbc:	4614      	mov	r4, r2
10008bbe:	4605      	mov	r5, r0
10008bc0:	b118      	cbz	r0, 10008bca <__swbuf_r+0x12>
10008bc2:	6a03      	ldr	r3, [r0, #32]
10008bc4:	b90b      	cbnz	r3, 10008bca <__swbuf_r+0x12>
10008bc6:	f7ff f94d 	bl	10007e64 <__sinit>
10008bca:	69a3      	ldr	r3, [r4, #24]
10008bcc:	60a3      	str	r3, [r4, #8]
10008bce:	89a3      	ldrh	r3, [r4, #12]
10008bd0:	071a      	lsls	r2, r3, #28
10008bd2:	d501      	bpl.n	10008bd8 <__swbuf_r+0x20>
10008bd4:	6923      	ldr	r3, [r4, #16]
10008bd6:	b943      	cbnz	r3, 10008bea <__swbuf_r+0x32>
10008bd8:	4621      	mov	r1, r4
10008bda:	4628      	mov	r0, r5
10008bdc:	f000 f82a 	bl	10008c34 <__swsetup_r>
10008be0:	b118      	cbz	r0, 10008bea <__swbuf_r+0x32>
10008be2:	f04f 37ff 	mov.w	r7, #4294967295
10008be6:	4638      	mov	r0, r7
10008be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008bea:	6823      	ldr	r3, [r4, #0]
10008bec:	6922      	ldr	r2, [r4, #16]
10008bee:	1a98      	subs	r0, r3, r2
10008bf0:	6963      	ldr	r3, [r4, #20]
10008bf2:	b2f6      	uxtb	r6, r6
10008bf4:	4283      	cmp	r3, r0
10008bf6:	4637      	mov	r7, r6
10008bf8:	dc05      	bgt.n	10008c06 <__swbuf_r+0x4e>
10008bfa:	4621      	mov	r1, r4
10008bfc:	4628      	mov	r0, r5
10008bfe:	f7ff ffb3 	bl	10008b68 <_fflush_r>
10008c02:	2800      	cmp	r0, #0
10008c04:	d1ed      	bne.n	10008be2 <__swbuf_r+0x2a>
10008c06:	68a3      	ldr	r3, [r4, #8]
10008c08:	3b01      	subs	r3, #1
10008c0a:	60a3      	str	r3, [r4, #8]
10008c0c:	6823      	ldr	r3, [r4, #0]
10008c0e:	1c5a      	adds	r2, r3, #1
10008c10:	6022      	str	r2, [r4, #0]
10008c12:	701e      	strb	r6, [r3, #0]
10008c14:	6962      	ldr	r2, [r4, #20]
10008c16:	1c43      	adds	r3, r0, #1
10008c18:	429a      	cmp	r2, r3
10008c1a:	d004      	beq.n	10008c26 <__swbuf_r+0x6e>
10008c1c:	89a3      	ldrh	r3, [r4, #12]
10008c1e:	07db      	lsls	r3, r3, #31
10008c20:	d5e1      	bpl.n	10008be6 <__swbuf_r+0x2e>
10008c22:	2e0a      	cmp	r6, #10
10008c24:	d1df      	bne.n	10008be6 <__swbuf_r+0x2e>
10008c26:	4621      	mov	r1, r4
10008c28:	4628      	mov	r0, r5
10008c2a:	f7ff ff9d 	bl	10008b68 <_fflush_r>
10008c2e:	2800      	cmp	r0, #0
10008c30:	d0d9      	beq.n	10008be6 <__swbuf_r+0x2e>
10008c32:	e7d6      	b.n	10008be2 <__swbuf_r+0x2a>

10008c34 <__swsetup_r>:
10008c34:	b538      	push	{r3, r4, r5, lr}
10008c36:	4b29      	ldr	r3, [pc, #164]	@ (10008cdc <__swsetup_r+0xa8>)
10008c38:	4605      	mov	r5, r0
10008c3a:	6818      	ldr	r0, [r3, #0]
10008c3c:	460c      	mov	r4, r1
10008c3e:	b118      	cbz	r0, 10008c48 <__swsetup_r+0x14>
10008c40:	6a03      	ldr	r3, [r0, #32]
10008c42:	b90b      	cbnz	r3, 10008c48 <__swsetup_r+0x14>
10008c44:	f7ff f90e 	bl	10007e64 <__sinit>
10008c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10008c4c:	0719      	lsls	r1, r3, #28
10008c4e:	d422      	bmi.n	10008c96 <__swsetup_r+0x62>
10008c50:	06da      	lsls	r2, r3, #27
10008c52:	d407      	bmi.n	10008c64 <__swsetup_r+0x30>
10008c54:	2209      	movs	r2, #9
10008c56:	602a      	str	r2, [r5, #0]
10008c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10008c5c:	81a3      	strh	r3, [r4, #12]
10008c5e:	f04f 30ff 	mov.w	r0, #4294967295
10008c62:	e033      	b.n	10008ccc <__swsetup_r+0x98>
10008c64:	0758      	lsls	r0, r3, #29
10008c66:	d512      	bpl.n	10008c8e <__swsetup_r+0x5a>
10008c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10008c6a:	b141      	cbz	r1, 10008c7e <__swsetup_r+0x4a>
10008c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
10008c70:	4299      	cmp	r1, r3
10008c72:	d002      	beq.n	10008c7a <__swsetup_r+0x46>
10008c74:	4628      	mov	r0, r5
10008c76:	f7ff fa83 	bl	10008180 <_free_r>
10008c7a:	2300      	movs	r3, #0
10008c7c:	6363      	str	r3, [r4, #52]	@ 0x34
10008c7e:	89a3      	ldrh	r3, [r4, #12]
10008c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
10008c84:	81a3      	strh	r3, [r4, #12]
10008c86:	2300      	movs	r3, #0
10008c88:	6063      	str	r3, [r4, #4]
10008c8a:	6923      	ldr	r3, [r4, #16]
10008c8c:	6023      	str	r3, [r4, #0]
10008c8e:	89a3      	ldrh	r3, [r4, #12]
10008c90:	f043 0308 	orr.w	r3, r3, #8
10008c94:	81a3      	strh	r3, [r4, #12]
10008c96:	6923      	ldr	r3, [r4, #16]
10008c98:	b94b      	cbnz	r3, 10008cae <__swsetup_r+0x7a>
10008c9a:	89a3      	ldrh	r3, [r4, #12]
10008c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
10008ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
10008ca4:	d003      	beq.n	10008cae <__swsetup_r+0x7a>
10008ca6:	4621      	mov	r1, r4
10008ca8:	4628      	mov	r0, r5
10008caa:	f000 f8cb 	bl	10008e44 <__smakebuf_r>
10008cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10008cb2:	f013 0201 	ands.w	r2, r3, #1
10008cb6:	d00a      	beq.n	10008cce <__swsetup_r+0x9a>
10008cb8:	2200      	movs	r2, #0
10008cba:	60a2      	str	r2, [r4, #8]
10008cbc:	6962      	ldr	r2, [r4, #20]
10008cbe:	4252      	negs	r2, r2
10008cc0:	61a2      	str	r2, [r4, #24]
10008cc2:	6922      	ldr	r2, [r4, #16]
10008cc4:	b942      	cbnz	r2, 10008cd8 <__swsetup_r+0xa4>
10008cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
10008cca:	d1c5      	bne.n	10008c58 <__swsetup_r+0x24>
10008ccc:	bd38      	pop	{r3, r4, r5, pc}
10008cce:	0799      	lsls	r1, r3, #30
10008cd0:	bf58      	it	pl
10008cd2:	6962      	ldrpl	r2, [r4, #20]
10008cd4:	60a2      	str	r2, [r4, #8]
10008cd6:	e7f4      	b.n	10008cc2 <__swsetup_r+0x8e>
10008cd8:	2000      	movs	r0, #0
10008cda:	e7f7      	b.n	10008ccc <__swsetup_r+0x98>
10008cdc:	100200d0 	.word	0x100200d0

10008ce0 <memmove>:
10008ce0:	4288      	cmp	r0, r1
10008ce2:	b510      	push	{r4, lr}
10008ce4:	eb01 0402 	add.w	r4, r1, r2
10008ce8:	d902      	bls.n	10008cf0 <memmove+0x10>
10008cea:	4284      	cmp	r4, r0
10008cec:	4623      	mov	r3, r4
10008cee:	d807      	bhi.n	10008d00 <memmove+0x20>
10008cf0:	1e43      	subs	r3, r0, #1
10008cf2:	42a1      	cmp	r1, r4
10008cf4:	d008      	beq.n	10008d08 <memmove+0x28>
10008cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
10008cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
10008cfe:	e7f8      	b.n	10008cf2 <memmove+0x12>
10008d00:	4402      	add	r2, r0
10008d02:	4601      	mov	r1, r0
10008d04:	428a      	cmp	r2, r1
10008d06:	d100      	bne.n	10008d0a <memmove+0x2a>
10008d08:	bd10      	pop	{r4, pc}
10008d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
10008d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
10008d12:	e7f7      	b.n	10008d04 <memmove+0x24>

10008d14 <_raise_r>:
10008d14:	291f      	cmp	r1, #31
10008d16:	b538      	push	{r3, r4, r5, lr}
10008d18:	4605      	mov	r5, r0
10008d1a:	460c      	mov	r4, r1
10008d1c:	d904      	bls.n	10008d28 <_raise_r+0x14>
10008d1e:	2316      	movs	r3, #22
10008d20:	6003      	str	r3, [r0, #0]
10008d22:	f04f 30ff 	mov.w	r0, #4294967295
10008d26:	bd38      	pop	{r3, r4, r5, pc}
10008d28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
10008d2a:	b112      	cbz	r2, 10008d32 <_raise_r+0x1e>
10008d2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
10008d30:	b94b      	cbnz	r3, 10008d46 <_raise_r+0x32>
10008d32:	4628      	mov	r0, r5
10008d34:	f000 f830 	bl	10008d98 <_getpid_r>
10008d38:	4622      	mov	r2, r4
10008d3a:	4601      	mov	r1, r0
10008d3c:	4628      	mov	r0, r5
10008d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10008d42:	f000 b817 	b.w	10008d74 <_kill_r>
10008d46:	2b01      	cmp	r3, #1
10008d48:	d00a      	beq.n	10008d60 <_raise_r+0x4c>
10008d4a:	1c59      	adds	r1, r3, #1
10008d4c:	d103      	bne.n	10008d56 <_raise_r+0x42>
10008d4e:	2316      	movs	r3, #22
10008d50:	6003      	str	r3, [r0, #0]
10008d52:	2001      	movs	r0, #1
10008d54:	e7e7      	b.n	10008d26 <_raise_r+0x12>
10008d56:	2100      	movs	r1, #0
10008d58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
10008d5c:	4620      	mov	r0, r4
10008d5e:	4798      	blx	r3
10008d60:	2000      	movs	r0, #0
10008d62:	e7e0      	b.n	10008d26 <_raise_r+0x12>

10008d64 <raise>:
10008d64:	4b02      	ldr	r3, [pc, #8]	@ (10008d70 <raise+0xc>)
10008d66:	4601      	mov	r1, r0
10008d68:	6818      	ldr	r0, [r3, #0]
10008d6a:	f7ff bfd3 	b.w	10008d14 <_raise_r>
10008d6e:	bf00      	nop
10008d70:	100200d0 	.word	0x100200d0

10008d74 <_kill_r>:
10008d74:	b538      	push	{r3, r4, r5, lr}
10008d76:	4d07      	ldr	r5, [pc, #28]	@ (10008d94 <_kill_r+0x20>)
10008d78:	2300      	movs	r3, #0
10008d7a:	4604      	mov	r4, r0
10008d7c:	4608      	mov	r0, r1
10008d7e:	4611      	mov	r1, r2
10008d80:	602b      	str	r3, [r5, #0]
10008d82:	f7f7 fdd7 	bl	10000934 <_kill>
10008d86:	1c43      	adds	r3, r0, #1
10008d88:	d102      	bne.n	10008d90 <_kill_r+0x1c>
10008d8a:	682b      	ldr	r3, [r5, #0]
10008d8c:	b103      	cbz	r3, 10008d90 <_kill_r+0x1c>
10008d8e:	6023      	str	r3, [r4, #0]
10008d90:	bd38      	pop	{r3, r4, r5, pc}
10008d92:	bf00      	nop
10008d94:	100204f8 	.word	0x100204f8

10008d98 <_getpid_r>:
10008d98:	f7f7 bdc4 	b.w	10000924 <_getpid>

10008d9c <_realloc_r>:
10008d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10008da0:	4607      	mov	r7, r0
10008da2:	4614      	mov	r4, r2
10008da4:	460d      	mov	r5, r1
10008da6:	b921      	cbnz	r1, 10008db2 <_realloc_r+0x16>
10008da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10008dac:	4611      	mov	r1, r2
10008dae:	f7fe bf41 	b.w	10007c34 <_malloc_r>
10008db2:	b92a      	cbnz	r2, 10008dc0 <_realloc_r+0x24>
10008db4:	f7ff f9e4 	bl	10008180 <_free_r>
10008db8:	4625      	mov	r5, r4
10008dba:	4628      	mov	r0, r5
10008dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10008dc0:	f000 f89e 	bl	10008f00 <_malloc_usable_size_r>
10008dc4:	4284      	cmp	r4, r0
10008dc6:	4606      	mov	r6, r0
10008dc8:	d802      	bhi.n	10008dd0 <_realloc_r+0x34>
10008dca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
10008dce:	d8f4      	bhi.n	10008dba <_realloc_r+0x1e>
10008dd0:	4621      	mov	r1, r4
10008dd2:	4638      	mov	r0, r7
10008dd4:	f7fe ff2e 	bl	10007c34 <_malloc_r>
10008dd8:	4680      	mov	r8, r0
10008dda:	b908      	cbnz	r0, 10008de0 <_realloc_r+0x44>
10008ddc:	4645      	mov	r5, r8
10008dde:	e7ec      	b.n	10008dba <_realloc_r+0x1e>
10008de0:	42b4      	cmp	r4, r6
10008de2:	4622      	mov	r2, r4
10008de4:	4629      	mov	r1, r5
10008de6:	bf28      	it	cs
10008de8:	4632      	movcs	r2, r6
10008dea:	f7ff f9b4 	bl	10008156 <memcpy>
10008dee:	4629      	mov	r1, r5
10008df0:	4638      	mov	r0, r7
10008df2:	f7ff f9c5 	bl	10008180 <_free_r>
10008df6:	e7f1      	b.n	10008ddc <_realloc_r+0x40>

10008df8 <__swhatbuf_r>:
10008df8:	b570      	push	{r4, r5, r6, lr}
10008dfa:	460c      	mov	r4, r1
10008dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10008e00:	2900      	cmp	r1, #0
10008e02:	b096      	sub	sp, #88	@ 0x58
10008e04:	4615      	mov	r5, r2
10008e06:	461e      	mov	r6, r3
10008e08:	da0d      	bge.n	10008e26 <__swhatbuf_r+0x2e>
10008e0a:	89a3      	ldrh	r3, [r4, #12]
10008e0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
10008e10:	f04f 0100 	mov.w	r1, #0
10008e14:	bf14      	ite	ne
10008e16:	2340      	movne	r3, #64	@ 0x40
10008e18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
10008e1c:	2000      	movs	r0, #0
10008e1e:	6031      	str	r1, [r6, #0]
10008e20:	602b      	str	r3, [r5, #0]
10008e22:	b016      	add	sp, #88	@ 0x58
10008e24:	bd70      	pop	{r4, r5, r6, pc}
10008e26:	466a      	mov	r2, sp
10008e28:	f000 f848 	bl	10008ebc <_fstat_r>
10008e2c:	2800      	cmp	r0, #0
10008e2e:	dbec      	blt.n	10008e0a <__swhatbuf_r+0x12>
10008e30:	9901      	ldr	r1, [sp, #4]
10008e32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
10008e36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
10008e3a:	4259      	negs	r1, r3
10008e3c:	4159      	adcs	r1, r3
10008e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
10008e42:	e7eb      	b.n	10008e1c <__swhatbuf_r+0x24>

10008e44 <__smakebuf_r>:
10008e44:	898b      	ldrh	r3, [r1, #12]
10008e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10008e48:	079d      	lsls	r5, r3, #30
10008e4a:	4606      	mov	r6, r0
10008e4c:	460c      	mov	r4, r1
10008e4e:	d507      	bpl.n	10008e60 <__smakebuf_r+0x1c>
10008e50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
10008e54:	6023      	str	r3, [r4, #0]
10008e56:	6123      	str	r3, [r4, #16]
10008e58:	2301      	movs	r3, #1
10008e5a:	6163      	str	r3, [r4, #20]
10008e5c:	b003      	add	sp, #12
10008e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008e60:	ab01      	add	r3, sp, #4
10008e62:	466a      	mov	r2, sp
10008e64:	f7ff ffc8 	bl	10008df8 <__swhatbuf_r>
10008e68:	9f00      	ldr	r7, [sp, #0]
10008e6a:	4605      	mov	r5, r0
10008e6c:	4639      	mov	r1, r7
10008e6e:	4630      	mov	r0, r6
10008e70:	f7fe fee0 	bl	10007c34 <_malloc_r>
10008e74:	b948      	cbnz	r0, 10008e8a <__smakebuf_r+0x46>
10008e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10008e7a:	059a      	lsls	r2, r3, #22
10008e7c:	d4ee      	bmi.n	10008e5c <__smakebuf_r+0x18>
10008e7e:	f023 0303 	bic.w	r3, r3, #3
10008e82:	f043 0302 	orr.w	r3, r3, #2
10008e86:	81a3      	strh	r3, [r4, #12]
10008e88:	e7e2      	b.n	10008e50 <__smakebuf_r+0xc>
10008e8a:	89a3      	ldrh	r3, [r4, #12]
10008e8c:	6020      	str	r0, [r4, #0]
10008e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10008e92:	81a3      	strh	r3, [r4, #12]
10008e94:	9b01      	ldr	r3, [sp, #4]
10008e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
10008e9a:	b15b      	cbz	r3, 10008eb4 <__smakebuf_r+0x70>
10008e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10008ea0:	4630      	mov	r0, r6
10008ea2:	f000 f81d 	bl	10008ee0 <_isatty_r>
10008ea6:	b128      	cbz	r0, 10008eb4 <__smakebuf_r+0x70>
10008ea8:	89a3      	ldrh	r3, [r4, #12]
10008eaa:	f023 0303 	bic.w	r3, r3, #3
10008eae:	f043 0301 	orr.w	r3, r3, #1
10008eb2:	81a3      	strh	r3, [r4, #12]
10008eb4:	89a3      	ldrh	r3, [r4, #12]
10008eb6:	431d      	orrs	r5, r3
10008eb8:	81a5      	strh	r5, [r4, #12]
10008eba:	e7cf      	b.n	10008e5c <__smakebuf_r+0x18>

10008ebc <_fstat_r>:
10008ebc:	b538      	push	{r3, r4, r5, lr}
10008ebe:	4d07      	ldr	r5, [pc, #28]	@ (10008edc <_fstat_r+0x20>)
10008ec0:	2300      	movs	r3, #0
10008ec2:	4604      	mov	r4, r0
10008ec4:	4608      	mov	r0, r1
10008ec6:	4611      	mov	r1, r2
10008ec8:	602b      	str	r3, [r5, #0]
10008eca:	f7f7 fd93 	bl	100009f4 <_fstat>
10008ece:	1c43      	adds	r3, r0, #1
10008ed0:	d102      	bne.n	10008ed8 <_fstat_r+0x1c>
10008ed2:	682b      	ldr	r3, [r5, #0]
10008ed4:	b103      	cbz	r3, 10008ed8 <_fstat_r+0x1c>
10008ed6:	6023      	str	r3, [r4, #0]
10008ed8:	bd38      	pop	{r3, r4, r5, pc}
10008eda:	bf00      	nop
10008edc:	100204f8 	.word	0x100204f8

10008ee0 <_isatty_r>:
10008ee0:	b538      	push	{r3, r4, r5, lr}
10008ee2:	4d06      	ldr	r5, [pc, #24]	@ (10008efc <_isatty_r+0x1c>)
10008ee4:	2300      	movs	r3, #0
10008ee6:	4604      	mov	r4, r0
10008ee8:	4608      	mov	r0, r1
10008eea:	602b      	str	r3, [r5, #0]
10008eec:	f7f7 fd92 	bl	10000a14 <_isatty>
10008ef0:	1c43      	adds	r3, r0, #1
10008ef2:	d102      	bne.n	10008efa <_isatty_r+0x1a>
10008ef4:	682b      	ldr	r3, [r5, #0]
10008ef6:	b103      	cbz	r3, 10008efa <_isatty_r+0x1a>
10008ef8:	6023      	str	r3, [r4, #0]
10008efa:	bd38      	pop	{r3, r4, r5, pc}
10008efc:	100204f8 	.word	0x100204f8

10008f00 <_malloc_usable_size_r>:
10008f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
10008f04:	1f18      	subs	r0, r3, #4
10008f06:	2b00      	cmp	r3, #0
10008f08:	bfbc      	itt	lt
10008f0a:	580b      	ldrlt	r3, [r1, r0]
10008f0c:	18c0      	addlt	r0, r0, r3
10008f0e:	4770      	bx	lr

10008f10 <_init>:
10008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008f12:	bf00      	nop
10008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
10008f16:	bc08      	pop	{r3}
10008f18:	469e      	mov	lr, r3
10008f1a:	4770      	bx	lr

10008f1c <_fini>:
10008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008f1e:	bf00      	nop
10008f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
10008f22:	bc08      	pop	{r3}
10008f24:	469e      	mov	lr, r3
10008f26:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10008f28 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10008f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 10008f60 <LoopForever+0x2>
  movs  r1, #0
10008f2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10008f2e:	e003      	b.n	10008f38 <LoopCopyDataInit>

10008f30 <CopyDataInit>:
  ldr  r3, =_sidata
10008f30:	4b0c      	ldr	r3, [pc, #48]	@ (10008f64 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10008f32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10008f34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10008f36:	3104      	adds	r1, #4

10008f38 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10008f38:	480b      	ldr	r0, [pc, #44]	@ (10008f68 <LoopForever+0xa>)
  ldr  r3, =_edata
10008f3a:	4b0c      	ldr	r3, [pc, #48]	@ (10008f6c <LoopForever+0xe>)
  adds  r2, r0, r1
10008f3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10008f3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10008f40:	d3f6      	bcc.n	10008f30 <CopyDataInit>
  ldr  r2, =_sbss
10008f42:	4a0b      	ldr	r2, [pc, #44]	@ (10008f70 <LoopForever+0x12>)
  b  LoopFillZerobss
10008f44:	e002      	b.n	10008f4c <LoopFillZerobss>

10008f46 <FillZerobss>:
  movs  r3, #0
10008f46:	2300      	movs	r3, #0
  str  r3, [r2], #4
10008f48:	f842 3b04 	str.w	r3, [r2], #4

10008f4c <LoopFillZerobss>:
  ldr  r3, = _ebss
10008f4c:	4b09      	ldr	r3, [pc, #36]	@ (10008f74 <LoopForever+0x16>)
  cmp  r2, r3
10008f4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
10008f50:	d3f9      	bcc.n	10008f46 <FillZerobss>
  bl  SystemInit
10008f52:	f7f7 f8d5 	bl	10000100 <SystemInit>
 bl __libc_init_array
10008f56:	f7ff f8d7 	bl	10008108 <__libc_init_array>
  bl main
10008f5a:	f7f7 f8f7 	bl	1000014c <main>

10008f5e <LoopForever>:
    b LoopForever
10008f5e:	e7fe      	b.n	10008f5e <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10008f60:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10008f64:	100093a8 	.word	0x100093a8
  ldr  r0, =_sdata
10008f68:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10008f6c:	10020120 	.word	0x10020120
  ldr  r2, =_sbss
10008f70:	100201ac 	.word	0x100201ac
  ldr  r3, = _ebss
10008f74:	10020500 	.word	0x10020500
